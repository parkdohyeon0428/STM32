
250626_Treadmill8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006958  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08006af8  08006af8  00007af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b7c  08006b7c  00008104  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006b7c  08006b7c  00007b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b84  08006b84  00008104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b84  08006b84  00007b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006b88  08006b88  00007b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000104  20000000  08006b8c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000410  20000104  08006c90  00008104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000514  08006c90  00008514  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008104  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ea2  00000000  00000000  00008134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000400c  00000000  00000000  0001dfd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001348  00000000  00000000  00021fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ed1  00000000  00000000  00023330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d6e  00000000  00000000  00024201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c4f2  00000000  00000000  0003cf6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000918d6  00000000  00000000  00059461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ead37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005170  00000000  00000000  000ead7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000efeec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000104 	.word	0x20000104
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006ae0 	.word	0x08006ae0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000108 	.word	0x20000108
 80001dc:	08006ae0 	.word	0x08006ae0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	@ 0x28
 80005b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	613b      	str	r3, [r7, #16]
 80005c6:	4b49      	ldr	r3, [pc, #292]	@ (80006ec <MX_GPIO_Init+0x140>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	4a48      	ldr	r2, [pc, #288]	@ (80006ec <MX_GPIO_Init+0x140>)
 80005cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d2:	4b46      	ldr	r3, [pc, #280]	@ (80006ec <MX_GPIO_Init+0x140>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005da:	613b      	str	r3, [r7, #16]
 80005dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	4b42      	ldr	r3, [pc, #264]	@ (80006ec <MX_GPIO_Init+0x140>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	4a41      	ldr	r2, [pc, #260]	@ (80006ec <MX_GPIO_Init+0x140>)
 80005e8:	f043 0304 	orr.w	r3, r3, #4
 80005ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ee:	4b3f      	ldr	r3, [pc, #252]	@ (80006ec <MX_GPIO_Init+0x140>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	f003 0304 	and.w	r3, r3, #4
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	4b3b      	ldr	r3, [pc, #236]	@ (80006ec <MX_GPIO_Init+0x140>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	4a3a      	ldr	r2, [pc, #232]	@ (80006ec <MX_GPIO_Init+0x140>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	6313      	str	r3, [r2, #48]	@ 0x30
 800060a:	4b38      	ldr	r3, [pc, #224]	@ (80006ec <MX_GPIO_Init+0x140>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	4b34      	ldr	r3, [pc, #208]	@ (80006ec <MX_GPIO_Init+0x140>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	4a33      	ldr	r2, [pc, #204]	@ (80006ec <MX_GPIO_Init+0x140>)
 8000620:	f043 0302 	orr.w	r3, r3, #2
 8000624:	6313      	str	r3, [r2, #48]	@ 0x30
 8000626:	4b31      	ldr	r3, [pc, #196]	@ (80006ec <MX_GPIO_Init+0x140>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	f003 0302 	and.w	r3, r3, #2
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000632:	2200      	movs	r2, #0
 8000634:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8000638:	482d      	ldr	r0, [pc, #180]	@ (80006f0 <MX_GPIO_Init+0x144>)
 800063a:	f002 fbef 	bl	8002e1c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_11
 800063e:	2200      	movs	r2, #0
 8000640:	f641 0113 	movw	r1, #6163	@ 0x1813
 8000644:	482b      	ldr	r0, [pc, #172]	@ (80006f4 <MX_GPIO_Init+0x148>)
 8000646:	f002 fbe9 	bl	8002e1c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 800064a:	2200      	movs	r2, #0
 800064c:	f24f 0107 	movw	r1, #61447	@ 0xf007
 8000650:	4829      	ldr	r0, [pc, #164]	@ (80006f8 <MX_GPIO_Init+0x14c>)
 8000652:	f002 fbe3 	bl	8002e1c <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000656:	f240 13ff 	movw	r3, #511	@ 0x1ff
 800065a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	2301      	movs	r3, #1
 800065e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2300      	movs	r3, #0
 8000666:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	4619      	mov	r1, r3
 800066e:	4820      	ldr	r0, [pc, #128]	@ (80006f0 <MX_GPIO_Init+0x144>)
 8000670:	f002 fa38 	bl	8002ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_11
 8000674:	f641 0313 	movw	r3, #6163	@ 0x1813
 8000678:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067a:	2301      	movs	r3, #1
 800067c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000682:	2300      	movs	r3, #0
 8000684:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	4619      	mov	r1, r3
 800068c:	4819      	ldr	r0, [pc, #100]	@ (80006f4 <MX_GPIO_Init+0x148>)
 800068e:	f002 fa29 	bl	8002ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8000692:	f24f 0307 	movw	r3, #61447	@ 0xf007
 8000696:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000698:	2301      	movs	r3, #1
 800069a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a0:	2300      	movs	r3, #0
 80006a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a4:	f107 0314 	add.w	r3, r7, #20
 80006a8:	4619      	mov	r1, r3
 80006aa:	4813      	ldr	r0, [pc, #76]	@ (80006f8 <MX_GPIO_Init+0x14c>)
 80006ac:	f002 fa1a 	bl	8002ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80006b0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80006b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	4619      	mov	r1, r3
 80006c4:	480b      	ldr	r0, [pc, #44]	@ (80006f4 <MX_GPIO_Init+0x148>)
 80006c6:	f002 fa0d 	bl	8002ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6;
 80006ca:	2368      	movs	r3, #104	@ 0x68
 80006cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	4619      	mov	r1, r3
 80006dc:	4806      	ldr	r0, [pc, #24]	@ (80006f8 <MX_GPIO_Init+0x14c>)
 80006de:	f002 fa01 	bl	8002ae4 <HAL_GPIO_Init>

}
 80006e2:	bf00      	nop
 80006e4:	3728      	adds	r7, #40	@ 0x28
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40020800 	.word	0x40020800
 80006f4:	40020000 	.word	0x40020000
 80006f8:	40020400 	.word	0x40020400

080006fc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000700:	4b12      	ldr	r3, [pc, #72]	@ (800074c <MX_I2C1_Init+0x50>)
 8000702:	4a13      	ldr	r2, [pc, #76]	@ (8000750 <MX_I2C1_Init+0x54>)
 8000704:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000706:	4b11      	ldr	r3, [pc, #68]	@ (800074c <MX_I2C1_Init+0x50>)
 8000708:	4a12      	ldr	r2, [pc, #72]	@ (8000754 <MX_I2C1_Init+0x58>)
 800070a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800070c:	4b0f      	ldr	r3, [pc, #60]	@ (800074c <MX_I2C1_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000712:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <MX_I2C1_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000718:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <MX_I2C1_Init+0x50>)
 800071a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800071e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000720:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <MX_I2C1_Init+0x50>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000726:	4b09      	ldr	r3, [pc, #36]	@ (800074c <MX_I2C1_Init+0x50>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800072c:	4b07      	ldr	r3, [pc, #28]	@ (800074c <MX_I2C1_Init+0x50>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000732:	4b06      	ldr	r3, [pc, #24]	@ (800074c <MX_I2C1_Init+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	@ (800074c <MX_I2C1_Init+0x50>)
 800073a:	f002 fb89 	bl	8002e50 <HAL_I2C_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000744:	f000 f8d4 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000120 	.word	0x20000120
 8000750:	40005400 	.word	0x40005400
 8000754:	000186a0 	.word	0x000186a0

08000758 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	@ 0x28
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a19      	ldr	r2, [pc, #100]	@ (80007dc <HAL_I2C_MspInit+0x84>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d12c      	bne.n	80007d4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <HAL_I2C_MspInit+0x88>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a17      	ldr	r2, [pc, #92]	@ (80007e0 <HAL_I2C_MspInit+0x88>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b15      	ldr	r3, [pc, #84]	@ (80007e0 <HAL_I2C_MspInit+0x88>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000796:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800079a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800079c:	2312      	movs	r3, #18
 800079e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a4:	2303      	movs	r3, #3
 80007a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007a8:	2304      	movs	r3, #4
 80007aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	4619      	mov	r1, r3
 80007b2:	480c      	ldr	r0, [pc, #48]	@ (80007e4 <HAL_I2C_MspInit+0x8c>)
 80007b4:	f002 f996 	bl	8002ae4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <HAL_I2C_MspInit+0x88>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c0:	4a07      	ldr	r2, [pc, #28]	@ (80007e0 <HAL_I2C_MspInit+0x88>)
 80007c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80007c8:	4b05      	ldr	r3, [pc, #20]	@ (80007e0 <HAL_I2C_MspInit+0x88>)
 80007ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007d4:	bf00      	nop
 80007d6:	3728      	adds	r7, #40	@ 0x28
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40005400 	.word	0x40005400
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40020400 	.word	0x40020400

080007e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ec:	f001 ff40 	bl	8002670 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f0:	f000 f816 	bl	8000820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f4:	f7ff feda 	bl	80005ac <MX_GPIO_Init>
  MX_TIM2_Init();
 80007f8:	f000 f9d4 	bl	8000ba4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80007fc:	f000 fc12 	bl	8001024 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000800:	f7ff ff7c 	bl	80006fc <MX_I2C1_Init>
  MX_TIM3_Init();
 8000804:	f000 fa1a 	bl	8000c3c <MX_TIM3_Init>
  MX_TIM1_Init();
 8000808:	f000 f92c 	bl	8000a64 <MX_TIM1_Init>
  MX_TIM4_Init();
 800080c:	f000 fa8e 	bl	8000d2c <MX_TIM4_Init>
  MX_TIM5_Init();
 8000810:	f000 fada 	bl	8000dc8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  ap_init();
 8000814:	f000 ff2c 	bl	8001670 <ap_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ap_main();
 8000818:	f000 fef4 	bl	8001604 <ap_main>
 800081c:	e7fc      	b.n	8000818 <main+0x30>
	...

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b094      	sub	sp, #80	@ 0x50
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	f107 0320 	add.w	r3, r7, #32
 800082a:	2230      	movs	r2, #48	@ 0x30
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f005 fcd8 	bl	80061e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	4b27      	ldr	r3, [pc, #156]	@ (80008e8 <SystemClock_Config+0xc8>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084c:	4a26      	ldr	r2, [pc, #152]	@ (80008e8 <SystemClock_Config+0xc8>)
 800084e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000852:	6413      	str	r3, [r2, #64]	@ 0x40
 8000854:	4b24      	ldr	r3, [pc, #144]	@ (80008e8 <SystemClock_Config+0xc8>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000858:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000860:	2300      	movs	r3, #0
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	4b21      	ldr	r3, [pc, #132]	@ (80008ec <SystemClock_Config+0xcc>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a20      	ldr	r2, [pc, #128]	@ (80008ec <SystemClock_Config+0xcc>)
 800086a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800086e:	6013      	str	r3, [r2, #0]
 8000870:	4b1e      	ldr	r3, [pc, #120]	@ (80008ec <SystemClock_Config+0xcc>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800087c:	2301      	movs	r3, #1
 800087e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000880:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000884:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000886:	2302      	movs	r3, #2
 8000888:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800088a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800088e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000890:	2304      	movs	r3, #4
 8000892:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000894:	2364      	movs	r3, #100	@ 0x64
 8000896:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000898:	2302      	movs	r3, #2
 800089a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800089c:	2304      	movs	r3, #4
 800089e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a0:	f107 0320 	add.w	r3, r7, #32
 80008a4:	4618      	mov	r0, r3
 80008a6:	f002 ff71 	bl	800378c <HAL_RCC_OscConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008b0:	f000 f81e 	bl	80008f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b4:	230f      	movs	r3, #15
 80008b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b8:	2302      	movs	r3, #2
 80008ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	2103      	movs	r1, #3
 80008d0:	4618      	mov	r0, r3
 80008d2:	f003 f9d3 	bl	8003c7c <HAL_RCC_ClockConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008dc:	f000 f808 	bl	80008f0 <Error_Handler>
  }
}
 80008e0:	bf00      	nop
 80008e2:	3750      	adds	r7, #80	@ 0x50
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40007000 	.word	0x40007000

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <Error_Handler+0x8>

080008fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	4b10      	ldr	r3, [pc, #64]	@ (8000948 <HAL_MspInit+0x4c>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800090a:	4a0f      	ldr	r2, [pc, #60]	@ (8000948 <HAL_MspInit+0x4c>)
 800090c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000910:	6453      	str	r3, [r2, #68]	@ 0x44
 8000912:	4b0d      	ldr	r3, [pc, #52]	@ (8000948 <HAL_MspInit+0x4c>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000916:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	603b      	str	r3, [r7, #0]
 8000922:	4b09      	ldr	r3, [pc, #36]	@ (8000948 <HAL_MspInit+0x4c>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000926:	4a08      	ldr	r2, [pc, #32]	@ (8000948 <HAL_MspInit+0x4c>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800092c:	6413      	str	r3, [r2, #64]	@ 0x40
 800092e:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <HAL_MspInit+0x4c>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800

0800094c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <NMI_Handler+0x4>

08000954 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <HardFault_Handler+0x4>

0800095c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <MemManage_Handler+0x4>

08000964 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <BusFault_Handler+0x4>

0800096c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <UsageFault_Handler+0x4>

08000974 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a2:	f001 feb7 	bl	8002714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
	...

080009ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009b0:	4802      	ldr	r0, [pc, #8]	@ (80009bc <TIM2_IRQHandler+0x10>)
 80009b2:	f003 fe25 	bl	8004600 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	200001c0 	.word	0x200001c0

080009c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009c4:	4802      	ldr	r0, [pc, #8]	@ (80009d0 <USART2_IRQHandler+0x10>)
 80009c6:	f004 fcd9 	bl	800537c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200002e0 	.word	0x200002e0

080009d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009dc:	4a14      	ldr	r2, [pc, #80]	@ (8000a30 <_sbrk+0x5c>)
 80009de:	4b15      	ldr	r3, [pc, #84]	@ (8000a34 <_sbrk+0x60>)
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009e8:	4b13      	ldr	r3, [pc, #76]	@ (8000a38 <_sbrk+0x64>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d102      	bne.n	80009f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009f0:	4b11      	ldr	r3, [pc, #68]	@ (8000a38 <_sbrk+0x64>)
 80009f2:	4a12      	ldr	r2, [pc, #72]	@ (8000a3c <_sbrk+0x68>)
 80009f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009f6:	4b10      	ldr	r3, [pc, #64]	@ (8000a38 <_sbrk+0x64>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4413      	add	r3, r2
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d207      	bcs.n	8000a14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a04:	f005 fbf6 	bl	80061f4 <__errno>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a12:	e009      	b.n	8000a28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a14:	4b08      	ldr	r3, [pc, #32]	@ (8000a38 <_sbrk+0x64>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a1a:	4b07      	ldr	r3, [pc, #28]	@ (8000a38 <_sbrk+0x64>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	4a05      	ldr	r2, [pc, #20]	@ (8000a38 <_sbrk+0x64>)
 8000a24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a26:	68fb      	ldr	r3, [r7, #12]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3718      	adds	r7, #24
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20020000 	.word	0x20020000
 8000a34:	00000400 	.word	0x00000400
 8000a38:	20000174 	.word	0x20000174
 8000a3c:	20000518 	.word	0x20000518

08000a40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a44:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <SystemInit+0x20>)
 8000a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a4a:	4a05      	ldr	r2, [pc, #20]	@ (8000a60 <SystemInit+0x20>)
 8000a4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b096      	sub	sp, #88	@ 0x58
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a6a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a78:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]
 8000a92:	615a      	str	r2, [r3, #20]
 8000a94:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	2220      	movs	r2, #32
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f005 fba1 	bl	80061e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000aa2:	4b3e      	ldr	r3, [pc, #248]	@ (8000b9c <MX_TIM1_Init+0x138>)
 8000aa4:	4a3e      	ldr	r2, [pc, #248]	@ (8000ba0 <MX_TIM1_Init+0x13c>)
 8000aa6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8000aa8:	4b3c      	ldr	r3, [pc, #240]	@ (8000b9c <MX_TIM1_Init+0x138>)
 8000aaa:	2263      	movs	r2, #99	@ 0x63
 8000aac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aae:	4b3b      	ldr	r3, [pc, #236]	@ (8000b9c <MX_TIM1_Init+0x138>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000ab4:	4b39      	ldr	r3, [pc, #228]	@ (8000b9c <MX_TIM1_Init+0x138>)
 8000ab6:	2263      	movs	r2, #99	@ 0x63
 8000ab8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aba:	4b38      	ldr	r3, [pc, #224]	@ (8000b9c <MX_TIM1_Init+0x138>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ac0:	4b36      	ldr	r3, [pc, #216]	@ (8000b9c <MX_TIM1_Init+0x138>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ac6:	4b35      	ldr	r3, [pc, #212]	@ (8000b9c <MX_TIM1_Init+0x138>)
 8000ac8:	2280      	movs	r2, #128	@ 0x80
 8000aca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000acc:	4833      	ldr	r0, [pc, #204]	@ (8000b9c <MX_TIM1_Init+0x138>)
 8000ace:	f003 faf5 	bl	80040bc <HAL_TIM_Base_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000ad8:	f7ff ff0a 	bl	80008f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000adc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ae0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ae2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	482c      	ldr	r0, [pc, #176]	@ (8000b9c <MX_TIM1_Init+0x138>)
 8000aea:	f003 ff3b 	bl	8004964 <HAL_TIM_ConfigClockSource>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000af4:	f7ff fefc 	bl	80008f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000af8:	4828      	ldr	r0, [pc, #160]	@ (8000b9c <MX_TIM1_Init+0x138>)
 8000afa:	f003 fc13 	bl	8004324 <HAL_TIM_PWM_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000b04:	f7ff fef4 	bl	80008f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b10:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b14:	4619      	mov	r1, r3
 8000b16:	4821      	ldr	r0, [pc, #132]	@ (8000b9c <MX_TIM1_Init+0x138>)
 8000b18:	f004 fae6 	bl	80050e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000b22:	f7ff fee5 	bl	80008f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b26:	2360      	movs	r3, #96	@ 0x60
 8000b28:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 50;
 8000b2a:	2332      	movs	r3, #50	@ 0x32
 8000b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b32:	2300      	movs	r3, #0
 8000b34:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b46:	2200      	movs	r2, #0
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4814      	ldr	r0, [pc, #80]	@ (8000b9c <MX_TIM1_Init+0x138>)
 8000b4c:	f003 fe48 	bl	80047e0 <HAL_TIM_PWM_ConfigChannel>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000b56:	f7ff fecb 	bl	80008f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b72:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4807      	ldr	r0, [pc, #28]	@ (8000b9c <MX_TIM1_Init+0x138>)
 8000b7e:	f004 fb21 	bl	80051c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000b88:	f7ff feb2 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b8c:	4803      	ldr	r0, [pc, #12]	@ (8000b9c <MX_TIM1_Init+0x138>)
 8000b8e:	f000 f9e7 	bl	8000f60 <HAL_TIM_MspPostInit>

}
 8000b92:	bf00      	nop
 8000b94:	3758      	adds	r7, #88	@ 0x58
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000178 	.word	0x20000178
 8000ba0:	40010000 	.word	0x40010000

08000ba4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000baa:	f107 0308 	add.w	r3, r7, #8
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb8:	463b      	mov	r3, r7
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c38 <MX_TIM2_Init+0x94>)
 8000bc2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bc6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8000bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c38 <MX_TIM2_Init+0x94>)
 8000bca:	2263      	movs	r2, #99	@ 0x63
 8000bcc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bce:	4b1a      	ldr	r3, [pc, #104]	@ (8000c38 <MX_TIM2_Init+0x94>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000bd4:	4b18      	ldr	r3, [pc, #96]	@ (8000c38 <MX_TIM2_Init+0x94>)
 8000bd6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bda:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bdc:	4b16      	ldr	r3, [pc, #88]	@ (8000c38 <MX_TIM2_Init+0x94>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be2:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <MX_TIM2_Init+0x94>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000be8:	4813      	ldr	r0, [pc, #76]	@ (8000c38 <MX_TIM2_Init+0x94>)
 8000bea:	f003 fa67 	bl	80040bc <HAL_TIM_Base_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000bf4:	f7ff fe7c 	bl	80008f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bfc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bfe:	f107 0308 	add.w	r3, r7, #8
 8000c02:	4619      	mov	r1, r3
 8000c04:	480c      	ldr	r0, [pc, #48]	@ (8000c38 <MX_TIM2_Init+0x94>)
 8000c06:	f003 fead 	bl	8004964 <HAL_TIM_ConfigClockSource>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c10:	f7ff fe6e 	bl	80008f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c14:	2300      	movs	r3, #0
 8000c16:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c1c:	463b      	mov	r3, r7
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4805      	ldr	r0, [pc, #20]	@ (8000c38 <MX_TIM2_Init+0x94>)
 8000c22:	f004 fa61 	bl	80050e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c2c:	f7ff fe60 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	3718      	adds	r7, #24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	200001c0 	.word	0x200001c0

08000c3c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08e      	sub	sp, #56	@ 0x38
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c50:	f107 0320 	add.w	r3, r7, #32
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
 8000c68:	615a      	str	r2, [r3, #20]
 8000c6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c6c:	4b2d      	ldr	r3, [pc, #180]	@ (8000d24 <MX_TIM3_Init+0xe8>)
 8000c6e:	4a2e      	ldr	r2, [pc, #184]	@ (8000d28 <MX_TIM3_Init+0xec>)
 8000c70:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8000c72:	4b2c      	ldr	r3, [pc, #176]	@ (8000d24 <MX_TIM3_Init+0xe8>)
 8000c74:	2263      	movs	r2, #99	@ 0x63
 8000c76:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c78:	4b2a      	ldr	r3, [pc, #168]	@ (8000d24 <MX_TIM3_Init+0xe8>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000c7e:	4b29      	ldr	r3, [pc, #164]	@ (8000d24 <MX_TIM3_Init+0xe8>)
 8000c80:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c84:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c86:	4b27      	ldr	r3, [pc, #156]	@ (8000d24 <MX_TIM3_Init+0xe8>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c8c:	4b25      	ldr	r3, [pc, #148]	@ (8000d24 <MX_TIM3_Init+0xe8>)
 8000c8e:	2280      	movs	r2, #128	@ 0x80
 8000c90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c92:	4824      	ldr	r0, [pc, #144]	@ (8000d24 <MX_TIM3_Init+0xe8>)
 8000c94:	f003 fa12 	bl	80040bc <HAL_TIM_Base_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000c9e:	f7ff fe27 	bl	80008f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ca8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cac:	4619      	mov	r1, r3
 8000cae:	481d      	ldr	r0, [pc, #116]	@ (8000d24 <MX_TIM3_Init+0xe8>)
 8000cb0:	f003 fe58 	bl	8004964 <HAL_TIM_ConfigClockSource>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000cba:	f7ff fe19 	bl	80008f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000cbe:	4819      	ldr	r0, [pc, #100]	@ (8000d24 <MX_TIM3_Init+0xe8>)
 8000cc0:	f003 fb30 	bl	8004324 <HAL_TIM_PWM_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000cca:	f7ff fe11 	bl	80008f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cd6:	f107 0320 	add.w	r3, r7, #32
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4811      	ldr	r0, [pc, #68]	@ (8000d24 <MX_TIM3_Init+0xe8>)
 8000cde:	f004 fa03 	bl	80050e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000ce8:	f7ff fe02 	bl	80008f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cec:	2360      	movs	r3, #96	@ 0x60
 8000cee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8000cf0:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8000cf4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	2200      	movs	r2, #0
 8000d02:	4619      	mov	r1, r3
 8000d04:	4807      	ldr	r0, [pc, #28]	@ (8000d24 <MX_TIM3_Init+0xe8>)
 8000d06:	f003 fd6b 	bl	80047e0 <HAL_TIM_PWM_ConfigChannel>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000d10:	f7ff fdee 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d14:	4803      	ldr	r0, [pc, #12]	@ (8000d24 <MX_TIM3_Init+0xe8>)
 8000d16:	f000 f923 	bl	8000f60 <HAL_TIM_MspPostInit>

}
 8000d1a:	bf00      	nop
 8000d1c:	3738      	adds	r7, #56	@ 0x38
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000208 	.word	0x20000208
 8000d28:	40000400 	.word	0x40000400

08000d2c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d32:	f107 0308 	add.w	r3, r7, #8
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d40:	463b      	mov	r3, r7
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d48:	4b1d      	ldr	r3, [pc, #116]	@ (8000dc0 <MX_TIM4_Init+0x94>)
 8000d4a:	4a1e      	ldr	r2, [pc, #120]	@ (8000dc4 <MX_TIM4_Init+0x98>)
 8000d4c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8000d4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc0 <MX_TIM4_Init+0x94>)
 8000d50:	2263      	movs	r2, #99	@ 0x63
 8000d52:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d54:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc0 <MX_TIM4_Init+0x94>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 30000;
 8000d5a:	4b19      	ldr	r3, [pc, #100]	@ (8000dc0 <MX_TIM4_Init+0x94>)
 8000d5c:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000d60:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d62:	4b17      	ldr	r3, [pc, #92]	@ (8000dc0 <MX_TIM4_Init+0x94>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d68:	4b15      	ldr	r3, [pc, #84]	@ (8000dc0 <MX_TIM4_Init+0x94>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d6e:	4814      	ldr	r0, [pc, #80]	@ (8000dc0 <MX_TIM4_Init+0x94>)
 8000d70:	f003 f9a4 	bl	80040bc <HAL_TIM_Base_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000d7a:	f7ff fdb9 	bl	80008f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d84:	f107 0308 	add.w	r3, r7, #8
 8000d88:	4619      	mov	r1, r3
 8000d8a:	480d      	ldr	r0, [pc, #52]	@ (8000dc0 <MX_TIM4_Init+0x94>)
 8000d8c:	f003 fdea 	bl	8004964 <HAL_TIM_ConfigClockSource>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000d96:	f7ff fdab 	bl	80008f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000da2:	463b      	mov	r3, r7
 8000da4:	4619      	mov	r1, r3
 8000da6:	4806      	ldr	r0, [pc, #24]	@ (8000dc0 <MX_TIM4_Init+0x94>)
 8000da8:	f004 f99e 	bl	80050e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000db2:	f7ff fd9d 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000db6:	bf00      	nop
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000250 	.word	0x20000250
 8000dc4:	40000800 	.word	0x40000800

08000dc8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dce:	f107 0308 	add.w	r3, r7, #8
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]
 8000dda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ddc:	463b      	mov	r3, r7
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000de4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e5c <MX_TIM5_Init+0x94>)
 8000de6:	4a1e      	ldr	r2, [pc, #120]	@ (8000e60 <MX_TIM5_Init+0x98>)
 8000de8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100-1;
 8000dea:	4b1c      	ldr	r3, [pc, #112]	@ (8000e5c <MX_TIM5_Init+0x94>)
 8000dec:	2263      	movs	r2, #99	@ 0x63
 8000dee:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e5c <MX_TIM5_Init+0x94>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000df6:	4b19      	ldr	r3, [pc, #100]	@ (8000e5c <MX_TIM5_Init+0x94>)
 8000df8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dfc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dfe:	4b17      	ldr	r3, [pc, #92]	@ (8000e5c <MX_TIM5_Init+0x94>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e04:	4b15      	ldr	r3, [pc, #84]	@ (8000e5c <MX_TIM5_Init+0x94>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000e0a:	4814      	ldr	r0, [pc, #80]	@ (8000e5c <MX_TIM5_Init+0x94>)
 8000e0c:	f003 f956 	bl	80040bc <HAL_TIM_Base_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8000e16:	f7ff fd6b 	bl	80008f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000e20:	f107 0308 	add.w	r3, r7, #8
 8000e24:	4619      	mov	r1, r3
 8000e26:	480d      	ldr	r0, [pc, #52]	@ (8000e5c <MX_TIM5_Init+0x94>)
 8000e28:	f003 fd9c 	bl	8004964 <HAL_TIM_ConfigClockSource>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8000e32:	f7ff fd5d 	bl	80008f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e36:	2300      	movs	r3, #0
 8000e38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e3e:	463b      	mov	r3, r7
 8000e40:	4619      	mov	r1, r3
 8000e42:	4806      	ldr	r0, [pc, #24]	@ (8000e5c <MX_TIM5_Init+0x94>)
 8000e44:	f004 f950 	bl	80050e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8000e4e:	f7ff fd4f 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000e52:	bf00      	nop
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000298 	.word	0x20000298
 8000e60:	40000c00 	.word	0x40000c00

08000e64 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b088      	sub	sp, #32
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a36      	ldr	r2, [pc, #216]	@ (8000f4c <HAL_TIM_Base_MspInit+0xe8>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d10e      	bne.n	8000e94 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
 8000e7a:	4b35      	ldr	r3, [pc, #212]	@ (8000f50 <HAL_TIM_Base_MspInit+0xec>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e7e:	4a34      	ldr	r2, [pc, #208]	@ (8000f50 <HAL_TIM_Base_MspInit+0xec>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e86:	4b32      	ldr	r3, [pc, #200]	@ (8000f50 <HAL_TIM_Base_MspInit+0xec>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	61fb      	str	r3, [r7, #28]
 8000e90:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8000e92:	e056      	b.n	8000f42 <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM2)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e9c:	d116      	bne.n	8000ecc <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61bb      	str	r3, [r7, #24]
 8000ea2:	4b2b      	ldr	r3, [pc, #172]	@ (8000f50 <HAL_TIM_Base_MspInit+0xec>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea6:	4a2a      	ldr	r2, [pc, #168]	@ (8000f50 <HAL_TIM_Base_MspInit+0xec>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eae:	4b28      	ldr	r3, [pc, #160]	@ (8000f50 <HAL_TIM_Base_MspInit+0xec>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	61bb      	str	r3, [r7, #24]
 8000eb8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	201c      	movs	r0, #28
 8000ec0:	f001 fd47 	bl	8002952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ec4:	201c      	movs	r0, #28
 8000ec6:	f001 fd60 	bl	800298a <HAL_NVIC_EnableIRQ>
}
 8000eca:	e03a      	b.n	8000f42 <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM3)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a20      	ldr	r2, [pc, #128]	@ (8000f54 <HAL_TIM_Base_MspInit+0xf0>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d10e      	bne.n	8000ef4 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	4b1d      	ldr	r3, [pc, #116]	@ (8000f50 <HAL_TIM_Base_MspInit+0xec>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ede:	4a1c      	ldr	r2, [pc, #112]	@ (8000f50 <HAL_TIM_Base_MspInit+0xec>)
 8000ee0:	f043 0302 	orr.w	r3, r3, #2
 8000ee4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ee6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f50 <HAL_TIM_Base_MspInit+0xec>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	697b      	ldr	r3, [r7, #20]
}
 8000ef2:	e026      	b.n	8000f42 <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM4)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a17      	ldr	r2, [pc, #92]	@ (8000f58 <HAL_TIM_Base_MspInit+0xf4>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d10e      	bne.n	8000f1c <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	4b13      	ldr	r3, [pc, #76]	@ (8000f50 <HAL_TIM_Base_MspInit+0xec>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f06:	4a12      	ldr	r2, [pc, #72]	@ (8000f50 <HAL_TIM_Base_MspInit+0xec>)
 8000f08:	f043 0304 	orr.w	r3, r3, #4
 8000f0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f0e:	4b10      	ldr	r3, [pc, #64]	@ (8000f50 <HAL_TIM_Base_MspInit+0xec>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f12:	f003 0304 	and.w	r3, r3, #4
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]
}
 8000f1a:	e012      	b.n	8000f42 <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM5)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0e      	ldr	r2, [pc, #56]	@ (8000f5c <HAL_TIM_Base_MspInit+0xf8>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d10d      	bne.n	8000f42 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	4b09      	ldr	r3, [pc, #36]	@ (8000f50 <HAL_TIM_Base_MspInit+0xec>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2e:	4a08      	ldr	r2, [pc, #32]	@ (8000f50 <HAL_TIM_Base_MspInit+0xec>)
 8000f30:	f043 0308 	orr.w	r3, r3, #8
 8000f34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f36:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <HAL_TIM_Base_MspInit+0xec>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3a:	f003 0308 	and.w	r3, r3, #8
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
}
 8000f42:	bf00      	nop
 8000f44:	3720      	adds	r7, #32
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40010000 	.word	0x40010000
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40000400 	.word	0x40000400
 8000f58:	40000800 	.word	0x40000800
 8000f5c:	40000c00 	.word	0x40000c00

08000f60 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08a      	sub	sp, #40	@ 0x28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a24      	ldr	r2, [pc, #144]	@ (8001010 <HAL_TIM_MspPostInit+0xb0>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d11f      	bne.n	8000fc2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	4b23      	ldr	r3, [pc, #140]	@ (8001014 <HAL_TIM_MspPostInit+0xb4>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	4a22      	ldr	r2, [pc, #136]	@ (8001014 <HAL_TIM_MspPostInit+0xb4>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f92:	4b20      	ldr	r3, [pc, #128]	@ (8001014 <HAL_TIM_MspPostInit+0xb4>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4817      	ldr	r0, [pc, #92]	@ (8001018 <HAL_TIM_MspPostInit+0xb8>)
 8000fbc:	f001 fd92 	bl	8002ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000fc0:	e022      	b.n	8001008 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a15      	ldr	r2, [pc, #84]	@ (800101c <HAL_TIM_MspPostInit+0xbc>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d11d      	bne.n	8001008 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	4b10      	ldr	r3, [pc, #64]	@ (8001014 <HAL_TIM_MspPostInit+0xb4>)
 8000fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd4:	4a0f      	ldr	r2, [pc, #60]	@ (8001014 <HAL_TIM_MspPostInit+0xb4>)
 8000fd6:	f043 0302 	orr.w	r3, r3, #2
 8000fda:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fdc:	4b0d      	ldr	r3, [pc, #52]	@ (8001014 <HAL_TIM_MspPostInit+0xb4>)
 8000fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe0:	f003 0302 	and.w	r3, r3, #2
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fe8:	2310      	movs	r3, #16
 8000fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4619      	mov	r1, r3
 8001002:	4807      	ldr	r0, [pc, #28]	@ (8001020 <HAL_TIM_MspPostInit+0xc0>)
 8001004:	f001 fd6e 	bl	8002ae4 <HAL_GPIO_Init>
}
 8001008:	bf00      	nop
 800100a:	3728      	adds	r7, #40	@ 0x28
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40010000 	.word	0x40010000
 8001014:	40023800 	.word	0x40023800
 8001018:	40020000 	.word	0x40020000
 800101c:	40000400 	.word	0x40000400
 8001020:	40020400 	.word	0x40020400

08001024 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001028:	4b11      	ldr	r3, [pc, #68]	@ (8001070 <MX_USART2_UART_Init+0x4c>)
 800102a:	4a12      	ldr	r2, [pc, #72]	@ (8001074 <MX_USART2_UART_Init+0x50>)
 800102c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800102e:	4b10      	ldr	r3, [pc, #64]	@ (8001070 <MX_USART2_UART_Init+0x4c>)
 8001030:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001034:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001036:	4b0e      	ldr	r3, [pc, #56]	@ (8001070 <MX_USART2_UART_Init+0x4c>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800103c:	4b0c      	ldr	r3, [pc, #48]	@ (8001070 <MX_USART2_UART_Init+0x4c>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001042:	4b0b      	ldr	r3, [pc, #44]	@ (8001070 <MX_USART2_UART_Init+0x4c>)
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001048:	4b09      	ldr	r3, [pc, #36]	@ (8001070 <MX_USART2_UART_Init+0x4c>)
 800104a:	220c      	movs	r2, #12
 800104c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800104e:	4b08      	ldr	r3, [pc, #32]	@ (8001070 <MX_USART2_UART_Init+0x4c>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001054:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <MX_USART2_UART_Init+0x4c>)
 8001056:	2200      	movs	r2, #0
 8001058:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800105a:	4805      	ldr	r0, [pc, #20]	@ (8001070 <MX_USART2_UART_Init+0x4c>)
 800105c:	f004 f918 	bl	8005290 <HAL_UART_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001066:	f7ff fc43 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200002e0 	.word	0x200002e0
 8001074:	40004400 	.word	0x40004400

08001078 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	@ 0x28
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a1d      	ldr	r2, [pc, #116]	@ (800110c <HAL_UART_MspInit+0x94>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d133      	bne.n	8001102 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	4b1c      	ldr	r3, [pc, #112]	@ (8001110 <HAL_UART_MspInit+0x98>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a2:	4a1b      	ldr	r2, [pc, #108]	@ (8001110 <HAL_UART_MspInit+0x98>)
 80010a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010aa:	4b19      	ldr	r3, [pc, #100]	@ (8001110 <HAL_UART_MspInit+0x98>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4b15      	ldr	r3, [pc, #84]	@ (8001110 <HAL_UART_MspInit+0x98>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	4a14      	ldr	r2, [pc, #80]	@ (8001110 <HAL_UART_MspInit+0x98>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c6:	4b12      	ldr	r3, [pc, #72]	@ (8001110 <HAL_UART_MspInit+0x98>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010d2:	230c      	movs	r3, #12
 80010d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010de:	2303      	movs	r3, #3
 80010e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010e2:	2307      	movs	r3, #7
 80010e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	4619      	mov	r1, r3
 80010ec:	4809      	ldr	r0, [pc, #36]	@ (8001114 <HAL_UART_MspInit+0x9c>)
 80010ee:	f001 fcf9 	bl	8002ae4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2100      	movs	r1, #0
 80010f6:	2026      	movs	r0, #38	@ 0x26
 80010f8:	f001 fc2b 	bl	8002952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010fc:	2026      	movs	r0, #38	@ 0x26
 80010fe:	f001 fc44 	bl	800298a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001102:	bf00      	nop
 8001104:	3728      	adds	r7, #40	@ 0x28
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40004400 	.word	0x40004400
 8001110:	40023800 	.word	0x40023800
 8001114:	40020000 	.word	0x40020000

08001118 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001118:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001150 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800111c:	f7ff fc90 	bl	8000a40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001120:	480c      	ldr	r0, [pc, #48]	@ (8001154 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001122:	490d      	ldr	r1, [pc, #52]	@ (8001158 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001124:	4a0d      	ldr	r2, [pc, #52]	@ (800115c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001126:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001128:	e002      	b.n	8001130 <LoopCopyDataInit>

0800112a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800112c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800112e:	3304      	adds	r3, #4

08001130 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001130:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001132:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001134:	d3f9      	bcc.n	800112a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001136:	4a0a      	ldr	r2, [pc, #40]	@ (8001160 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001138:	4c0a      	ldr	r4, [pc, #40]	@ (8001164 <LoopFillZerobss+0x22>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800113c:	e001      	b.n	8001142 <LoopFillZerobss>

0800113e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800113e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001140:	3204      	adds	r2, #4

08001142 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001142:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001144:	d3fb      	bcc.n	800113e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001146:	f005 f85b 	bl	8006200 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800114a:	f7ff fb4d 	bl	80007e8 <main>
  bx  lr    
 800114e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001150:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001154:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001158:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 800115c:	08006b8c 	.word	0x08006b8c
  ldr r2, =_sbss
 8001160:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8001164:	20000514 	.word	0x20000514

08001168 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001168:	e7fe      	b.n	8001168 <ADC_IRQHandler>
	...

0800116c <Listener_Init>:


TreadmillInputId_t inputdata = NO_INPUT;

void Listener_Init()
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af02      	add	r7, sp, #8
	Button_Init(&hBtnUP, GPIOB, GPIO_PIN_5);
 8001172:	2220      	movs	r2, #32
 8001174:	4914      	ldr	r1, [pc, #80]	@ (80011c8 <Listener_Init+0x5c>)
 8001176:	4815      	ldr	r0, [pc, #84]	@ (80011cc <Listener_Init+0x60>)
 8001178:	f000 fc32 	bl	80019e0 <Button_Init>
	Button_Init(&hBtnDOWN, GPIOB, GPIO_PIN_3);
 800117c:	2208      	movs	r2, #8
 800117e:	4912      	ldr	r1, [pc, #72]	@ (80011c8 <Listener_Init+0x5c>)
 8001180:	4813      	ldr	r0, [pc, #76]	@ (80011d0 <Listener_Init+0x64>)
 8001182:	f000 fc2d 	bl	80019e0 <Button_Init>
	Button_Init(&hBtnSTOP, GPIOA, GPIO_PIN_10);
 8001186:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800118a:	4912      	ldr	r1, [pc, #72]	@ (80011d4 <Listener_Init+0x68>)
 800118c:	4812      	ldr	r0, [pc, #72]	@ (80011d8 <Listener_Init+0x6c>)
 800118e:	f000 fc27 	bl	80019e0 <Button_Init>
	Button_Init(&hBtnSTART, GPIOC, GPIO_PIN_13);
 8001192:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001196:	4911      	ldr	r1, [pc, #68]	@ (80011dc <Listener_Init+0x70>)
 8001198:	4811      	ldr	r0, [pc, #68]	@ (80011e0 <Listener_Init+0x74>)
 800119a:	f000 fc21 	bl	80019e0 <Button_Init>
	UltraSonic_Init(&sensor, GPIOC, GPIO_PIN_7, GPIOA, GPIO_PIN_9);
 800119e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <Listener_Init+0x68>)
 80011a6:	2280      	movs	r2, #128	@ 0x80
 80011a8:	490c      	ldr	r1, [pc, #48]	@ (80011dc <Listener_Init+0x70>)
 80011aa:	480e      	ldr	r0, [pc, #56]	@ (80011e4 <Listener_Init+0x78>)
 80011ac:	f001 f9de 	bl	800256c <UltraSonic_Init>
	Que_Init(&uartRxQue);
 80011b0:	480d      	ldr	r0, [pc, #52]	@ (80011e8 <Listener_Init+0x7c>)
 80011b2:	f000 fb11 	bl	80017d8 <Que_Init>
	HAL_UART_Receive_IT(&huart2, &rcvData, 1); // uart recv interrupt enable
 80011b6:	2201      	movs	r2, #1
 80011b8:	490c      	ldr	r1, [pc, #48]	@ (80011ec <Listener_Init+0x80>)
 80011ba:	480d      	ldr	r0, [pc, #52]	@ (80011f0 <Listener_Init+0x84>)
 80011bc:	f004 f8b8 	bl	8005330 <HAL_UART_Receive_IT>
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40020400 	.word	0x40020400
 80011cc:	20000378 	.word	0x20000378
 80011d0:	20000384 	.word	0x20000384
 80011d4:	40020000 	.word	0x40020000
 80011d8:	20000390 	.word	0x20000390
 80011dc:	40020800 	.word	0x40020800
 80011e0:	2000039c 	.word	0x2000039c
 80011e4:	20000368 	.word	0x20000368
 80011e8:	2000032c 	.word	0x2000032c
 80011ec:	20000328 	.word	0x20000328
 80011f0:	200002e0 	.word	0x200002e0

080011f4 <Listener_Excute>:

void Listener_Excute()
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	Treadmill_Listener();
 80011f8:	f000 f804 	bl	8001204 <Treadmill_Listener>
	Listener_CheckUart();
 80011fc:	f000 f84a 	bl	8001294 <Listener_CheckUart>
}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}

08001204 <Treadmill_Listener>:

void Treadmill_Listener()
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
    static uint32_t prevChkTime = 0;
    uint32_t curTick = HAL_GetTick();
 800120a:	f001 fa97 	bl	800273c <HAL_GetTick>
 800120e:	6078      	str	r0, [r7, #4]
    if (curTick - prevChkTime < 50) return;
 8001210:	4b1a      	ldr	r3, [pc, #104]	@ (800127c <Treadmill_Listener+0x78>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	2b31      	cmp	r3, #49	@ 0x31
 800121a:	d92a      	bls.n	8001272 <Treadmill_Listener+0x6e>
    prevChkTime = curTick;
 800121c:	4a17      	ldr	r2, [pc, #92]	@ (800127c <Treadmill_Listener+0x78>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6013      	str	r3, [r2, #0]

    if (Button_GetState(&hBtnSTART) == ACT_PUSHED) {
 8001222:	4817      	ldr	r0, [pc, #92]	@ (8001280 <Treadmill_Listener+0x7c>)
 8001224:	f000 fbf2 	bl	8001a0c <Button_GetState>
 8001228:	4603      	mov	r3, r0
 800122a:	2b01      	cmp	r3, #1
 800122c:	d103      	bne.n	8001236 <Treadmill_Listener+0x32>

    	inputdata = TREADMILL_START;
 800122e:	4b15      	ldr	r3, [pc, #84]	@ (8001284 <Treadmill_Listener+0x80>)
 8001230:	2201      	movs	r2, #1
 8001232:	701a      	strb	r2, [r3, #0]
 8001234:	e01e      	b.n	8001274 <Treadmill_Listener+0x70>
    }
    else if (Button_GetState(&hBtnSTOP) == ACT_PUSHED) {
 8001236:	4814      	ldr	r0, [pc, #80]	@ (8001288 <Treadmill_Listener+0x84>)
 8001238:	f000 fbe8 	bl	8001a0c <Button_GetState>
 800123c:	4603      	mov	r3, r0
 800123e:	2b01      	cmp	r3, #1
 8001240:	d103      	bne.n	800124a <Treadmill_Listener+0x46>

    	inputdata = TREADMILL_STOP;
 8001242:	4b10      	ldr	r3, [pc, #64]	@ (8001284 <Treadmill_Listener+0x80>)
 8001244:	2202      	movs	r2, #2
 8001246:	701a      	strb	r2, [r3, #0]
 8001248:	e014      	b.n	8001274 <Treadmill_Listener+0x70>
    }
    else if (Button_GetState(&hBtnUP) == ACT_PUSHED) {
 800124a:	4810      	ldr	r0, [pc, #64]	@ (800128c <Treadmill_Listener+0x88>)
 800124c:	f000 fbde 	bl	8001a0c <Button_GetState>
 8001250:	4603      	mov	r3, r0
 8001252:	2b01      	cmp	r3, #1
 8001254:	d103      	bne.n	800125e <Treadmill_Listener+0x5a>

    	inputdata = TREADMILL_UP;
 8001256:	4b0b      	ldr	r3, [pc, #44]	@ (8001284 <Treadmill_Listener+0x80>)
 8001258:	2203      	movs	r2, #3
 800125a:	701a      	strb	r2, [r3, #0]
 800125c:	e00a      	b.n	8001274 <Treadmill_Listener+0x70>
    }
    else if (Button_GetState(&hBtnDOWN) == ACT_PUSHED) {
 800125e:	480c      	ldr	r0, [pc, #48]	@ (8001290 <Treadmill_Listener+0x8c>)
 8001260:	f000 fbd4 	bl	8001a0c <Button_GetState>
 8001264:	4603      	mov	r3, r0
 8001266:	2b01      	cmp	r3, #1
 8001268:	d104      	bne.n	8001274 <Treadmill_Listener+0x70>

    	inputdata = TREADMILL_DOWN;
 800126a:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <Treadmill_Listener+0x80>)
 800126c:	2204      	movs	r2, #4
 800126e:	701a      	strb	r2, [r3, #0]
 8001270:	e000      	b.n	8001274 <Treadmill_Listener+0x70>
    if (curTick - prevChkTime < 50) return;
 8001272:	bf00      	nop
    }
}
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000348 	.word	0x20000348
 8001280:	2000039c 	.word	0x2000039c
 8001284:	20000344 	.word	0x20000344
 8001288:	20000390 	.word	0x20000390
 800128c:	20000378 	.word	0x20000378
 8001290:	20000384 	.word	0x20000384

08001294 <Listener_CheckUart>:

void Listener_CheckUart()
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
	if (isQueEmpty(&uartRxQue)) {
 800129a:	4818      	ldr	r0, [pc, #96]	@ (80012fc <Listener_CheckUart+0x68>)
 800129c:	f000 fac7 	bl	800182e <isQueEmpty>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d126      	bne.n	80012f4 <Listener_CheckUart+0x60>
		return;
	}
	int uartRxData = deQue(&uartRxQue);
 80012a6:	4815      	ldr	r0, [pc, #84]	@ (80012fc <Listener_CheckUart+0x68>)
 80012a8:	f000 faf7 	bl	800189a <deQue>
 80012ac:	6078      	str	r0, [r7, #4]

	if (uartRxData == 'R') {
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b52      	cmp	r3, #82	@ 0x52
 80012b2:	d103      	bne.n	80012bc <Listener_CheckUart+0x28>

		inputdata = TREADMILL_START;
 80012b4:	4b12      	ldr	r3, [pc, #72]	@ (8001300 <Listener_CheckUart+0x6c>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	701a      	strb	r2, [r3, #0]
 80012ba:	e01c      	b.n	80012f6 <Listener_CheckUart+0x62>
	}
	else if (uartRxData == 'S') {
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b53      	cmp	r3, #83	@ 0x53
 80012c0:	d103      	bne.n	80012ca <Listener_CheckUart+0x36>

		inputdata = TREADMILL_STOP;
 80012c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001300 <Listener_CheckUart+0x6c>)
 80012c4:	2202      	movs	r2, #2
 80012c6:	701a      	strb	r2, [r3, #0]
 80012c8:	e015      	b.n	80012f6 <Listener_CheckUart+0x62>
	}
	else if (uartRxData == 'U') {
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b55      	cmp	r3, #85	@ 0x55
 80012ce:	d103      	bne.n	80012d8 <Listener_CheckUart+0x44>

		inputdata = TREADMILL_UP;
 80012d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001300 <Listener_CheckUart+0x6c>)
 80012d2:	2203      	movs	r2, #3
 80012d4:	701a      	strb	r2, [r3, #0]
 80012d6:	e00e      	b.n	80012f6 <Listener_CheckUart+0x62>
	}
	else if (uartRxData == 'D') {
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b44      	cmp	r3, #68	@ 0x44
 80012dc:	d103      	bne.n	80012e6 <Listener_CheckUart+0x52>

		inputdata = TREADMILL_DOWN;
 80012de:	4b08      	ldr	r3, [pc, #32]	@ (8001300 <Listener_CheckUart+0x6c>)
 80012e0:	2204      	movs	r2, #4
 80012e2:	701a      	strb	r2, [r3, #0]
 80012e4:	e007      	b.n	80012f6 <Listener_CheckUart+0x62>
	}
	else if (uartRxData == 'A') {
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b41      	cmp	r3, #65	@ 0x41
 80012ea:	d104      	bne.n	80012f6 <Listener_CheckUart+0x62>

		inputdata = TEMP;
 80012ec:	4b04      	ldr	r3, [pc, #16]	@ (8001300 <Listener_CheckUart+0x6c>)
 80012ee:	2205      	movs	r2, #5
 80012f0:	701a      	strb	r2, [r3, #0]
 80012f2:	e000      	b.n	80012f6 <Listener_CheckUart+0x62>
		return;
 80012f4:	bf00      	nop
	}
}
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	2000032c 	.word	0x2000032c
 8001300:	20000344 	.word	0x20000344

08001304 <Listener_UartCallBack>:

void Listener_UartCallBack()
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
	enQue(&uartRxQue, rcvData);
 8001308:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <Listener_UartCallBack+0x20>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	4619      	mov	r1, r3
 800130e:	4806      	ldr	r0, [pc, #24]	@ (8001328 <Listener_UartCallBack+0x24>)
 8001310:	f000 faa0 	bl	8001854 <enQue>
	HAL_UART_Receive_IT(&huart2, &rcvData, 1); // interrupt enable
 8001314:	2201      	movs	r2, #1
 8001316:	4903      	ldr	r1, [pc, #12]	@ (8001324 <Listener_UartCallBack+0x20>)
 8001318:	4804      	ldr	r0, [pc, #16]	@ (800132c <Listener_UartCallBack+0x28>)
 800131a:	f004 f809 	bl	8005330 <HAL_UART_Receive_IT>
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000328 	.word	0x20000328
 8001328:	2000032c 	.word	0x2000032c
 800132c:	200002e0 	.word	0x200002e0

08001330 <Presenter_Init>:


extern DHT11_TypeDef hdht11;

void Presenter_Init()
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
	LCD_Init(&hi2c1);
 8001334:	4802      	ldr	r0, [pc, #8]	@ (8001340 <Presenter_Init+0x10>)
 8001336:	f000 ff55 	bl	80021e4 <LCD_Init>
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000120 	.word	0x20000120

08001344 <Presenter_Excute>:

void Presenter_Excute()
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
	Presenter_DispLcdTreadmill(state);
 8001348:	4b09      	ldr	r3, [pc, #36]	@ (8001370 <Presenter_Excute+0x2c>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f000 f813 	bl	8001378 <Presenter_DispLcdTreadmill>
	display_speed(speed, state);
 8001352:	4b08      	ldr	r3, [pc, #32]	@ (8001374 <Presenter_Excute+0x30>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a06      	ldr	r2, [pc, #24]	@ (8001370 <Presenter_Excute+0x2c>)
 8001358:	7812      	ldrb	r2, [r2, #0]
 800135a:	4611      	mov	r1, r2
 800135c:	4618      	mov	r0, r3
 800135e:	f000 f883 	bl	8001468 <display_speed>
	Presenter_DispFndRunTime(state);
 8001362:	4b03      	ldr	r3, [pc, #12]	@ (8001370 <Presenter_Excute+0x2c>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f000 f8de 	bl	8001528 <Presenter_DispFndRunTime>
}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000005 	.word	0x20000005
 8001374:	20000008 	.word	0x20000008

08001378 <Presenter_DispLcdTreadmill>:


void Presenter_DispLcdTreadmill(TreadmillState_t state)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b090      	sub	sp, #64	@ 0x40
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
    static TreadmillState_t prevState = -1;
    static uint32_t stopDisplayStartTime = 0;
    static uint8_t isStopDisplayed = 0;

	char str[50] = {0};
 8001382:	f107 030c 	add.w	r3, r7, #12
 8001386:	2232      	movs	r2, #50	@ 0x32
 8001388:	2100      	movs	r1, #0
 800138a:	4618      	mov	r0, r3
 800138c:	f004 ff2a 	bl	80061e4 <memset>

    if (state == NO_RUNNING && isStopDisplayed == 0)
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	2b04      	cmp	r3, #4
 8001394:	d11e      	bne.n	80013d4 <Presenter_DispLcdTreadmill+0x5c>
 8001396:	4b2e      	ldr	r3, [pc, #184]	@ (8001450 <Presenter_DispLcdTreadmill+0xd8>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d11a      	bne.n	80013d4 <Presenter_DispLcdTreadmill+0x5c>
    {
        sprintf(str, "Stop");
 800139e:	f107 030c 	add.w	r3, r7, #12
 80013a2:	492c      	ldr	r1, [pc, #176]	@ (8001454 <Presenter_DispLcdTreadmill+0xdc>)
 80013a4:	4618      	mov	r0, r3
 80013a6:	f004 fefb 	bl	80061a0 <siprintf>
        LCD_clear();
 80013aa:	f001 f87f 	bl	80024ac <LCD_clear>
        LCD_writeStringXY(0, 0, str);
 80013ae:	f107 030c 	add.w	r3, r7, #12
 80013b2:	461a      	mov	r2, r3
 80013b4:	2100      	movs	r1, #0
 80013b6:	2000      	movs	r0, #0
 80013b8:	f001 f863 	bl	8002482 <LCD_writeStringXY>
        stopDisplayStartTime = HAL_GetTick(); // 현재 시간 저장
 80013bc:	f001 f9be 	bl	800273c <HAL_GetTick>
 80013c0:	4603      	mov	r3, r0
 80013c2:	4a25      	ldr	r2, [pc, #148]	@ (8001458 <Presenter_DispLcdTreadmill+0xe0>)
 80013c4:	6013      	str	r3, [r2, #0]
        isStopDisplayed = 1; // 표시 시작
 80013c6:	4b22      	ldr	r3, [pc, #136]	@ (8001450 <Presenter_DispLcdTreadmill+0xd8>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	701a      	strb	r2, [r3, #0]
        prevState = state;
 80013cc:	4a23      	ldr	r2, [pc, #140]	@ (800145c <Presenter_DispLcdTreadmill+0xe4>)
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	7013      	strb	r3, [r2, #0]
        }
        LCD_clear();
        LCD_writeStringXY(0, 0, str);
        prevState = state;
    }
}
 80013d2:	e039      	b.n	8001448 <Presenter_DispLcdTreadmill+0xd0>
    else if (isStopDisplayed == 1)
 80013d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001450 <Presenter_DispLcdTreadmill+0xd8>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d10e      	bne.n	80013fa <Presenter_DispLcdTreadmill+0x82>
        if (HAL_GetTick() - stopDisplayStartTime >= 2000) // 2000ms = 2초
 80013dc:	f001 f9ae 	bl	800273c <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001458 <Presenter_DispLcdTreadmill+0xe0>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80013ec:	d32c      	bcc.n	8001448 <Presenter_DispLcdTreadmill+0xd0>
            isStopDisplayed = 0; // 표시 종료
 80013ee:	4b18      	ldr	r3, [pc, #96]	@ (8001450 <Presenter_DispLcdTreadmill+0xd8>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
            LCD_clear();
 80013f4:	f001 f85a 	bl	80024ac <LCD_clear>
}
 80013f8:	e026      	b.n	8001448 <Presenter_DispLcdTreadmill+0xd0>
    else if (state != prevState && state != NO_RUNNING)
 80013fa:	4b18      	ldr	r3, [pc, #96]	@ (800145c <Presenter_DispLcdTreadmill+0xe4>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	79fa      	ldrb	r2, [r7, #7]
 8001400:	429a      	cmp	r2, r3
 8001402:	d021      	beq.n	8001448 <Presenter_DispLcdTreadmill+0xd0>
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	2b04      	cmp	r3, #4
 8001408:	d01e      	beq.n	8001448 <Presenter_DispLcdTreadmill+0xd0>
        if (state == RUNNING) {
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d106      	bne.n	800141e <Presenter_DispLcdTreadmill+0xa6>
            sprintf(str, "Running");
 8001410:	f107 030c 	add.w	r3, r7, #12
 8001414:	4912      	ldr	r1, [pc, #72]	@ (8001460 <Presenter_DispLcdTreadmill+0xe8>)
 8001416:	4618      	mov	r0, r3
 8001418:	f004 fec2 	bl	80061a0 <siprintf>
 800141c:	e008      	b.n	8001430 <Presenter_DispLcdTreadmill+0xb8>
        else if (state == IDLE) {
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d105      	bne.n	8001430 <Presenter_DispLcdTreadmill+0xb8>
            sprintf(str, "Press Button");
 8001424:	f107 030c 	add.w	r3, r7, #12
 8001428:	490e      	ldr	r1, [pc, #56]	@ (8001464 <Presenter_DispLcdTreadmill+0xec>)
 800142a:	4618      	mov	r0, r3
 800142c:	f004 feb8 	bl	80061a0 <siprintf>
        LCD_clear();
 8001430:	f001 f83c 	bl	80024ac <LCD_clear>
        LCD_writeStringXY(0, 0, str);
 8001434:	f107 030c 	add.w	r3, r7, #12
 8001438:	461a      	mov	r2, r3
 800143a:	2100      	movs	r1, #0
 800143c:	2000      	movs	r0, #0
 800143e:	f001 f820 	bl	8002482 <LCD_writeStringXY>
        prevState = state;
 8001442:	4a06      	ldr	r2, [pc, #24]	@ (800145c <Presenter_DispLcdTreadmill+0xe4>)
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	7013      	strb	r3, [r2, #0]
}
 8001448:	bf00      	nop
 800144a:	3740      	adds	r7, #64	@ 0x40
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	2000034c 	.word	0x2000034c
 8001454:	08006af8 	.word	0x08006af8
 8001458:	20000350 	.word	0x20000350
 800145c:	20000004 	.word	0x20000004
 8001460:	08006b00 	.word	0x08006b00
 8001464:	08006b08 	.word	0x08006b08

08001468 <display_speed>:

void display_speed(int speed, TreadmillState_t state)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	70fb      	strb	r3, [r7, #3]
	int led = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]

	if ((speed >= 1) && (speed <= 5)) {
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	dd05      	ble.n	800148a <display_speed+0x22>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b05      	cmp	r3, #5
 8001482:	dc02      	bgt.n	800148a <display_speed+0x22>
		led = 0b00000001;
 8001484:	2301      	movs	r3, #1
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	e03d      	b.n	8001506 <display_speed+0x9e>
	}
	else if ((speed >= 6) && (speed <= 10)) {
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b05      	cmp	r3, #5
 800148e:	dd05      	ble.n	800149c <display_speed+0x34>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b0a      	cmp	r3, #10
 8001494:	dc02      	bgt.n	800149c <display_speed+0x34>
		led = 0b00000011;
 8001496:	2303      	movs	r3, #3
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	e034      	b.n	8001506 <display_speed+0x9e>
	}
	else if ((speed >= 11) && (speed <= 15)) {
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b0a      	cmp	r3, #10
 80014a0:	dd05      	ble.n	80014ae <display_speed+0x46>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2b0f      	cmp	r3, #15
 80014a6:	dc02      	bgt.n	80014ae <display_speed+0x46>
		led = 0b00000111;
 80014a8:	2307      	movs	r3, #7
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	e02b      	b.n	8001506 <display_speed+0x9e>
	}
	else if ((speed >= 15) && (speed <= 20)) {
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b0e      	cmp	r3, #14
 80014b2:	dd05      	ble.n	80014c0 <display_speed+0x58>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b14      	cmp	r3, #20
 80014b8:	dc02      	bgt.n	80014c0 <display_speed+0x58>
		led = 0b00001111;
 80014ba:	230f      	movs	r3, #15
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	e022      	b.n	8001506 <display_speed+0x9e>
	}
	else if ((speed >= 21) && (speed <= 25)) {
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b14      	cmp	r3, #20
 80014c4:	dd05      	ble.n	80014d2 <display_speed+0x6a>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b19      	cmp	r3, #25
 80014ca:	dc02      	bgt.n	80014d2 <display_speed+0x6a>
		led = 0b00011111;
 80014cc:	231f      	movs	r3, #31
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	e019      	b.n	8001506 <display_speed+0x9e>
	}
	else if ((speed >= 26) && (speed <= 30)) {
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b19      	cmp	r3, #25
 80014d6:	dd05      	ble.n	80014e4 <display_speed+0x7c>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b1e      	cmp	r3, #30
 80014dc:	dc02      	bgt.n	80014e4 <display_speed+0x7c>
		led = 0b00111111;
 80014de:	233f      	movs	r3, #63	@ 0x3f
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	e010      	b.n	8001506 <display_speed+0x9e>
	}
	else if ((speed >= 31) && (speed <= 36)) {
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2b1e      	cmp	r3, #30
 80014e8:	dd05      	ble.n	80014f6 <display_speed+0x8e>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2b24      	cmp	r3, #36	@ 0x24
 80014ee:	dc02      	bgt.n	80014f6 <display_speed+0x8e>
		led = 0b01111111;
 80014f0:	237f      	movs	r3, #127	@ 0x7f
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	e007      	b.n	8001506 <display_speed+0x9e>
	}
	else if ((speed >= 37) && (speed <= 42)) {
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b24      	cmp	r3, #36	@ 0x24
 80014fa:	dd04      	ble.n	8001506 <display_speed+0x9e>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8001500:	dc01      	bgt.n	8001506 <display_speed+0x9e>
		led = 0b11111111;
 8001502:	23ff      	movs	r3, #255	@ 0xff
 8001504:	60fb      	str	r3, [r7, #12]
	}

	if (state == RUNNING) {
 8001506:	78fb      	ldrb	r3, [r7, #3]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d105      	bne.n	8001518 <display_speed+0xb0>
		LedBar_Write(led);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	b2db      	uxtb	r3, r3
 8001510:	4618      	mov	r0, r3
 8001512:	f000 ffd5 	bl	80024c0 <LedBar_Write>
	} else {
		LedBar_Write(0x00);
	}
}
 8001516:	e002      	b.n	800151e <display_speed+0xb6>
		LedBar_Write(0x00);
 8001518:	2000      	movs	r0, #0
 800151a:	f000 ffd1 	bl	80024c0 <LedBar_Write>
}
 800151e:	bf00      	nop
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <Presenter_DispFndRunTime>:


void Presenter_DispFndRunTime(TreadmillState_t state)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08c      	sub	sp, #48	@ 0x30
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
   static uint32_t startTime = 0;
   static uint32_t accumulatedTime = 0;
   static uint8_t runningFlag = 0;

   if (state == RUNNING)
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d142      	bne.n	80015be <Presenter_DispFndRunTime+0x96>
   {
      if (runningFlag == 0)
 8001538:	4b24      	ldr	r3, [pc, #144]	@ (80015cc <Presenter_DispFndRunTime+0xa4>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d107      	bne.n	8001550 <Presenter_DispFndRunTime+0x28>
      {
         startTime = HAL_GetTick();
 8001540:	f001 f8fc 	bl	800273c <HAL_GetTick>
 8001544:	4603      	mov	r3, r0
 8001546:	4a22      	ldr	r2, [pc, #136]	@ (80015d0 <Presenter_DispFndRunTime+0xa8>)
 8001548:	6013      	str	r3, [r2, #0]
         runningFlag = 1;
 800154a:	4b20      	ldr	r3, [pc, #128]	@ (80015cc <Presenter_DispFndRunTime+0xa4>)
 800154c:	2201      	movs	r2, #1
 800154e:	701a      	strb	r2, [r3, #0]
      }

      uint32_t elapsedTime = accumulatedTime + (HAL_GetTick() - startTime);
 8001550:	f001 f8f4 	bl	800273c <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	4b1e      	ldr	r3, [pc, #120]	@ (80015d0 <Presenter_DispFndRunTime+0xa8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	1ad2      	subs	r2, r2, r3
 800155c:	4b1d      	ldr	r3, [pc, #116]	@ (80015d4 <Presenter_DispFndRunTime+0xac>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4413      	add	r3, r2
 8001562:	62fb      	str	r3, [r7, #44]	@ 0x2c
      uint32_t elapsedSeconds = elapsedTime / 1000;
 8001564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001566:	4a1c      	ldr	r2, [pc, #112]	@ (80015d8 <Presenter_DispFndRunTime+0xb0>)
 8001568:	fba2 2303 	umull	r2, r3, r2, r3
 800156c:	099b      	lsrs	r3, r3, #6
 800156e:	62bb      	str	r3, [r7, #40]	@ 0x28

      uint32_t minutes = elapsedSeconds / 60;
 8001570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001572:	4a1a      	ldr	r2, [pc, #104]	@ (80015dc <Presenter_DispFndRunTime+0xb4>)
 8001574:	fba2 2303 	umull	r2, r3, r2, r3
 8001578:	095b      	lsrs	r3, r3, #5
 800157a:	627b      	str	r3, [r7, #36]	@ 0x24
      uint32_t seconds = elapsedSeconds % 60;
 800157c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800157e:	4b17      	ldr	r3, [pc, #92]	@ (80015dc <Presenter_DispFndRunTime+0xb4>)
 8001580:	fba3 1302 	umull	r1, r3, r3, r2
 8001584:	0959      	lsrs	r1, r3, #5
 8001586:	460b      	mov	r3, r1
 8001588:	011b      	lsls	r3, r3, #4
 800158a:	1a5b      	subs	r3, r3, r1
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	623b      	str	r3, [r7, #32]

      uint32_t displayData = minutes * 100 + seconds;
 8001592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001594:	2264      	movs	r2, #100	@ 0x64
 8001596:	fb02 f303 	mul.w	r3, r2, r3
 800159a:	6a3a      	ldr	r2, [r7, #32]
 800159c:	4413      	add	r3, r2
 800159e:	61fb      	str	r3, [r7, #28]

	char lcdStr[20];
	sprintf(lcdStr, "%02lu:%02lu", minutes, seconds);
 80015a0:	f107 0008 	add.w	r0, r7, #8
 80015a4:	6a3b      	ldr	r3, [r7, #32]
 80015a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015a8:	490d      	ldr	r1, [pc, #52]	@ (80015e0 <Presenter_DispFndRunTime+0xb8>)
 80015aa:	f004 fdf9 	bl	80061a0 <siprintf>
	LCD_writeStringXY(1, 0, lcdStr);
 80015ae:	f107 0308 	add.w	r3, r7, #8
 80015b2:	461a      	mov	r2, r3
 80015b4:	2100      	movs	r1, #0
 80015b6:	2001      	movs	r0, #1
 80015b8:	f000 ff63 	bl	8002482 <LCD_writeStringXY>
   }
   else
   {
      runningFlag = 0;
   }
}
 80015bc:	e002      	b.n	80015c4 <Presenter_DispFndRunTime+0x9c>
      runningFlag = 0;
 80015be:	4b03      	ldr	r3, [pc, #12]	@ (80015cc <Presenter_DispFndRunTime+0xa4>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
}
 80015c4:	bf00      	nop
 80015c6:	3730      	adds	r7, #48	@ 0x30
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000354 	.word	0x20000354
 80015d0:	20000358 	.word	0x20000358
 80015d4:	2000035c 	.word	0x2000035c
 80015d8:	10624dd3 	.word	0x10624dd3
 80015dc:	88888889 	.word	0x88888889
 80015e0:	08006b18 	.word	0x08006b18

080015e4 <HAL_TIM_PeriodElapsedCallback>:
//static uint8_t rcvData = 0;

DHT11_TypeDef hdht11;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2) {
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015f4:	d101      	bne.n	80015fa <HAL_TIM_PeriodElapsedCallback+0x16>
		FND_DispDataCallBack();
 80015f6:	f000 fc63 	bl	8001ec0 <FND_DispDataCallBack>
	}
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <ap_main>:

int ap_main()
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
   HAL_TIM_Base_Start_IT(&htim2);
 8001608:	480b      	ldr	r0, [pc, #44]	@ (8001638 <ap_main+0x34>)
 800160a:	f002 fe29 	bl	8004260 <HAL_TIM_Base_Start_IT>
   HAL_TIM_Base_Start(&htim4);
 800160e:	480b      	ldr	r0, [pc, #44]	@ (800163c <ap_main+0x38>)
 8001610:	f002 fda4 	bl	800415c <HAL_TIM_Base_Start>
   HAL_TIM_Base_Start(&htim5);
 8001614:	480a      	ldr	r0, [pc, #40]	@ (8001640 <ap_main+0x3c>)
 8001616:	f002 fda1 	bl	800415c <HAL_TIM_Base_Start>
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800161a:	2100      	movs	r1, #0
 800161c:	4809      	ldr	r0, [pc, #36]	@ (8001644 <ap_main+0x40>)
 800161e:	f002 fedb 	bl	80043d8 <HAL_TIM_PWM_Start>
   HAL_TIM_Base_Start(&htim3);
 8001622:	4809      	ldr	r0, [pc, #36]	@ (8001648 <ap_main+0x44>)
 8001624:	f002 fd9a 	bl	800415c <HAL_TIM_Base_Start>
    while (1)
    {
    	Listener_Excute();
 8001628:	f7ff fde4 	bl	80011f4 <Listener_Excute>
    	controller_excute();
 800162c:	f000 f83a 	bl	80016a4 <controller_excute>
        Presenter_Excute();
 8001630:	f7ff fe88 	bl	8001344 <Presenter_Excute>
    	Listener_Excute();
 8001634:	bf00      	nop
 8001636:	e7f7      	b.n	8001628 <ap_main+0x24>
 8001638:	200001c0 	.word	0x200001c0
 800163c:	20000250 	.word	0x20000250
 8001640:	20000298 	.word	0x20000298
 8001644:	20000178 	.word	0x20000178
 8001648:	20000208 	.word	0x20000208

0800164c <HAL_UART_RxCpltCallback>:

    return 0;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a04      	ldr	r2, [pc, #16]	@ (800166c <HAL_UART_RxCpltCallback+0x20>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d101      	bne.n	8001662 <HAL_UART_RxCpltCallback+0x16>
		Listener_UartCallBack();
 800165e:	f7ff fe51 	bl	8001304 <Listener_UartCallBack>
	}
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40004400 	.word	0x40004400

08001670 <ap_init>:


void ap_init()
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
	Listener_Init();
 8001674:	f7ff fd7a 	bl	800116c <Listener_Init>
	Presenter_Init();
 8001678:	f7ff fe5a 	bl	8001330 <Presenter_Init>
	Sound_Init();
 800167c:	f000 f932 	bl	80018e4 <Sound_Init>
	DC_Motor_Init(&htim1, TIM_CHANNEL_1);
 8001680:	2100      	movs	r1, #0
 8001682:	4805      	ldr	r0, [pc, #20]	@ (8001698 <ap_init+0x28>)
 8001684:	f000 fa60 	bl	8001b48 <DC_Motor_Init>
	DHT11_Init(&hdht11, GPIOB, GPIO_PIN_6);
 8001688:	2240      	movs	r2, #64	@ 0x40
 800168a:	4904      	ldr	r1, [pc, #16]	@ (800169c <ap_init+0x2c>)
 800168c:	4804      	ldr	r0, [pc, #16]	@ (80016a0 <ap_init+0x30>)
 800168e:	f000 fb25 	bl	8001cdc <DHT11_Init>

}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000178 	.word	0x20000178
 800169c:	40020400 	.word	0x40020400
 80016a0:	20000360 	.word	0x20000360

080016a4 <controller_excute>:
static void controller_treadmill();
static void controller_sound();


void controller_excute()
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
	controller_dht();
 80016a8:	f000 f806 	bl	80016b8 <controller_dht>
	controller_treadmill();
 80016ac:	f000 f832 	bl	8001714 <controller_treadmill>
	controller_sound();
 80016b0:	f000 f872 	bl	8001798 <controller_sound>
}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <controller_dht>:


void controller_dht()
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
	if (inputdata == TEMP)
 80016be:	4b13      	ldr	r3, [pc, #76]	@ (800170c <controller_dht+0x54>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b05      	cmp	r3, #5
 80016c4:	d11e      	bne.n	8001704 <controller_dht+0x4c>
	{
		uint8_t temp = 0, humi = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	717b      	strb	r3, [r7, #5]
 80016ca:	2300      	movs	r3, #0
 80016cc:	713b      	strb	r3, [r7, #4]
		if (DHT11_Read(&hdht11, &temp, &humi) == 0)
 80016ce:	1d3a      	adds	r2, r7, #4
 80016d0:	1d7b      	adds	r3, r7, #5
 80016d2:	4619      	mov	r1, r3
 80016d4:	480e      	ldr	r0, [pc, #56]	@ (8001710 <controller_dht+0x58>)
 80016d6:	f000 fb14 	bl	8001d02 <DHT11_Read>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d111      	bne.n	8001704 <controller_dht+0x4c>
		{
			uint16_t fndData = (temp * 100) + humi;
 80016e0:	797b      	ldrb	r3, [r7, #5]
 80016e2:	461a      	mov	r2, r3
 80016e4:	0092      	lsls	r2, r2, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	461a      	mov	r2, r3
 80016ea:	0091      	lsls	r1, r2, #2
 80016ec:	461a      	mov	r2, r3
 80016ee:	460b      	mov	r3, r1
 80016f0:	4413      	add	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	793a      	ldrb	r2, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	80fb      	strh	r3, [r7, #6]
			FND_WriteData(fndData);
 80016fc:	88fb      	ldrh	r3, [r7, #6]
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 fbce 	bl	8001ea0 <FND_WriteData>
		}
	}
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000344 	.word	0x20000344
 8001710:	20000360 	.word	0x20000360

08001714 <controller_treadmill>:


void controller_treadmill()
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0

    switch (state)
 8001718:	4b1d      	ldr	r3, [pc, #116]	@ (8001790 <controller_treadmill+0x7c>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b04      	cmp	r3, #4
 800171e:	d02c      	beq.n	800177a <controller_treadmill+0x66>
 8001720:	2b04      	cmp	r3, #4
 8001722:	dc33      	bgt.n	800178c <controller_treadmill+0x78>
 8001724:	2b00      	cmp	r3, #0
 8001726:	d002      	beq.n	800172e <controller_treadmill+0x1a>
 8001728:	2b01      	cmp	r3, #1
 800172a:	d008      	beq.n	800173e <controller_treadmill+0x2a>

        case NO_RUNNING:
        	treadmill_stop();
        	state = IDLE;
    }
}
 800172c:	e02e      	b.n	800178c <controller_treadmill+0x78>
			if (inputdata == TREADMILL_START) {
 800172e:	4b19      	ldr	r3, [pc, #100]	@ (8001794 <controller_treadmill+0x80>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d127      	bne.n	8001786 <controller_treadmill+0x72>
				state = RUNNING;
 8001736:	4b16      	ldr	r3, [pc, #88]	@ (8001790 <controller_treadmill+0x7c>)
 8001738:	2201      	movs	r2, #1
 800173a:	701a      	strb	r2, [r3, #0]
			break;
 800173c:	e023      	b.n	8001786 <controller_treadmill+0x72>
			treadmill_start();
 800173e:	f000 f90f 	bl	8001960 <treadmill_start>
			if (inputdata == TREADMILL_STOP) {
 8001742:	4b14      	ldr	r3, [pc, #80]	@ (8001794 <controller_treadmill+0x80>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b02      	cmp	r3, #2
 8001748:	d103      	bne.n	8001752 <controller_treadmill+0x3e>
				state = NO_RUNNING;
 800174a:	4b11      	ldr	r3, [pc, #68]	@ (8001790 <controller_treadmill+0x7c>)
 800174c:	2204      	movs	r2, #4
 800174e:	701a      	strb	r2, [r3, #0]
			break;
 8001750:	e01b      	b.n	800178a <controller_treadmill+0x76>
			else if (inputdata == TREADMILL_UP) {
 8001752:	4b10      	ldr	r3, [pc, #64]	@ (8001794 <controller_treadmill+0x80>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b03      	cmp	r3, #3
 8001758:	d105      	bne.n	8001766 <controller_treadmill+0x52>
				inputdata = NO_INPUT;
 800175a:	4b0e      	ldr	r3, [pc, #56]	@ (8001794 <controller_treadmill+0x80>)
 800175c:	2200      	movs	r2, #0
 800175e:	701a      	strb	r2, [r3, #0]
				treadmill_up();
 8001760:	f000 f912 	bl	8001988 <treadmill_up>
			break;
 8001764:	e011      	b.n	800178a <controller_treadmill+0x76>
			else if (inputdata == TREADMILL_DOWN) {
 8001766:	4b0b      	ldr	r3, [pc, #44]	@ (8001794 <controller_treadmill+0x80>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b04      	cmp	r3, #4
 800176c:	d10d      	bne.n	800178a <controller_treadmill+0x76>
				inputdata = NO_INPUT;
 800176e:	4b09      	ldr	r3, [pc, #36]	@ (8001794 <controller_treadmill+0x80>)
 8001770:	2200      	movs	r2, #0
 8001772:	701a      	strb	r2, [r3, #0]
				treadmill_down();
 8001774:	f000 f91e 	bl	80019b4 <treadmill_down>
			break;
 8001778:	e007      	b.n	800178a <controller_treadmill+0x76>
        	treadmill_stop();
 800177a:	f000 f8ff 	bl	800197c <treadmill_stop>
        	state = IDLE;
 800177e:	4b04      	ldr	r3, [pc, #16]	@ (8001790 <controller_treadmill+0x7c>)
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]
}
 8001784:	e002      	b.n	800178c <controller_treadmill+0x78>
			break;
 8001786:	bf00      	nop
 8001788:	e000      	b.n	800178c <controller_treadmill+0x78>
			break;
 800178a:	bf00      	nop
}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20000005 	.word	0x20000005
 8001794:	20000344 	.word	0x20000344

08001798 <controller_sound>:

void controller_sound()
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
    int dist = UltraSonic_GetDistance(&sensor);
 800179e:	480c      	ldr	r0, [pc, #48]	@ (80017d0 <controller_sound+0x38>)
 80017a0:	f000 fefe 	bl	80025a0 <UltraSonic_GetDistance>
 80017a4:	6078      	str	r0, [r7, #4]

    if ((dist <= 5) && (dist >= 1) && (state == RUNNING))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b05      	cmp	r3, #5
 80017aa:	dc09      	bgt.n	80017c0 <controller_sound+0x28>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	dd06      	ble.n	80017c0 <controller_sound+0x28>
 80017b2:	4b08      	ldr	r3, [pc, #32]	@ (80017d4 <controller_sound+0x3c>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d102      	bne.n	80017c0 <controller_sound+0x28>
    {
    	Sound_PowerOn();
 80017ba:	f000 f89d 	bl	80018f8 <Sound_PowerOn>
 80017be:	e002      	b.n	80017c6 <controller_sound+0x2e>
    } else
    {
    	Sound_PowerOff();
 80017c0:	f000 f8c7 	bl	8001952 <Sound_PowerOff>
    }
}
 80017c4:	bf00      	nop
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000368 	.word	0x20000368
 80017d4:	20000005 	.word	0x20000005

080017d8 <Que_Init>:
#include "queue.h"



void Que_Init(Que_TypeDef *q)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	q->front = 0;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
	q->rear = 0;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	605a      	str	r2, [r3, #4]
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <isQueFull>:

int isQueFull(Que_TypeDef *q)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
	return q->front == ((q->rear+1) % QUE_SIZE);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	3301      	adds	r3, #1
 800180a:	4259      	negs	r1, r3
 800180c:	f003 0303 	and.w	r3, r3, #3
 8001810:	f001 0103 	and.w	r1, r1, #3
 8001814:	bf58      	it	pl
 8001816:	424b      	negpl	r3, r1
 8001818:	429a      	cmp	r2, r3
 800181a:	bf0c      	ite	eq
 800181c:	2301      	moveq	r3, #1
 800181e:	2300      	movne	r3, #0
 8001820:	b2db      	uxtb	r3, r3
}
 8001822:	4618      	mov	r0, r3
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <isQueEmpty>:

int isQueEmpty(Que_TypeDef *q)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
	return q->front == q->rear;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	429a      	cmp	r2, r3
 8001840:	bf0c      	ite	eq
 8001842:	2301      	moveq	r3, #1
 8001844:	2300      	movne	r3, #0
 8001846:	b2db      	uxtb	r3, r3
}
 8001848:	4618      	mov	r0, r3
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <enQue>:

void enQue(Que_TypeDef *q, int data)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
	if (isQueFull(q)) {
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff ffca 	bl	80017f8 <isQueFull>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d113      	bne.n	8001892 <enQue+0x3e>
		return;
	}
	q->queData[q->rear] = data;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685a      	ldr	r2, [r3, #4]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3202      	adds	r2, #2
 8001872:	6839      	ldr	r1, [r7, #0]
 8001874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	q->rear = (q->rear+1) % QUE_SIZE;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	3301      	adds	r3, #1
 800187e:	425a      	negs	r2, r3
 8001880:	f003 0303 	and.w	r3, r3, #3
 8001884:	f002 0203 	and.w	r2, r2, #3
 8001888:	bf58      	it	pl
 800188a:	4253      	negpl	r3, r2
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6053      	str	r3, [r2, #4]
 8001890:	e000      	b.n	8001894 <enQue+0x40>
		return;
 8001892:	bf00      	nop
}
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <deQue>:

int deQue(Que_TypeDef *q)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b084      	sub	sp, #16
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
	if (isQueEmpty(q)) {
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff ffc3 	bl	800182e <isQueEmpty>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d114      	bne.n	80018d8 <deQue+0x3e>
		return;
	}
	int data = q->queData[q->front];
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3202      	adds	r2, #2
 80018b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ba:	60fb      	str	r3, [r7, #12]
	q->front = (q->front+1) % QUE_SIZE;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	3301      	adds	r3, #1
 80018c2:	425a      	negs	r2, r3
 80018c4:	f003 0303 	and.w	r3, r3, #3
 80018c8:	f002 0203 	and.w	r2, r2, #3
 80018cc:	bf58      	it	pl
 80018ce:	4253      	negpl	r3, r2
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	6013      	str	r3, [r2, #0]
	return data;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	e001      	b.n	80018dc <deQue+0x42>
		return;
 80018d8:	bf00      	nop
 80018da:	bf00      	nop
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <Sound_Init>:
 *      Author: kccistc
 */
#include "sound.h"

void Sound_Init()
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
   Buzzer_Init(&htim3, TIM_CHANNEL_1);
 80018e8:	2100      	movs	r1, #0
 80018ea:	4802      	ldr	r0, [pc, #8]	@ (80018f4 <Sound_Init+0x10>)
 80018ec:	f000 f8c0 	bl	8001a70 <Buzzer_Init>
}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000208 	.word	0x20000208

080018f8 <Sound_PowerOn>:

void Sound_PowerOn()
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
    for (int i = 0; i < 5; i++)
 80018fe:	2300      	movs	r3, #0
 8001900:	607b      	str	r3, [r7, #4]
 8001902:	e01e      	b.n	8001942 <Sound_PowerOn+0x4a>
    {
        Buzzer_SetFreq(2000);
 8001904:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001908:	f000 f8c8 	bl	8001a9c <Buzzer_SetFreq>
        Buzzer_Start();
 800190c:	f000 f8fc 	bl	8001b08 <Buzzer_Start>
        HAL_Delay(80);
 8001910:	2050      	movs	r0, #80	@ 0x50
 8001912:	f000 ff1f 	bl	8002754 <HAL_Delay>

        Buzzer_Stop();
 8001916:	f000 f907 	bl	8001b28 <Buzzer_Stop>
        HAL_Delay(50);
 800191a:	2032      	movs	r0, #50	@ 0x32
 800191c:	f000 ff1a 	bl	8002754 <HAL_Delay>

        Buzzer_SetFreq(1200);
 8001920:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8001924:	f000 f8ba 	bl	8001a9c <Buzzer_SetFreq>
        Buzzer_Start();
 8001928:	f000 f8ee 	bl	8001b08 <Buzzer_Start>
        HAL_Delay(80);
 800192c:	2050      	movs	r0, #80	@ 0x50
 800192e:	f000 ff11 	bl	8002754 <HAL_Delay>

        Buzzer_Stop();
 8001932:	f000 f8f9 	bl	8001b28 <Buzzer_Stop>
        HAL_Delay(50);
 8001936:	2032      	movs	r0, #50	@ 0x32
 8001938:	f000 ff0c 	bl	8002754 <HAL_Delay>
    for (int i = 0; i < 5; i++)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3301      	adds	r3, #1
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b04      	cmp	r3, #4
 8001946:	dddd      	ble.n	8001904 <Sound_PowerOn+0xc>
    }
}
 8001948:	bf00      	nop
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <Sound_PowerOff>:

void Sound_PowerOff()
{
 8001952:	b580      	push	{r7, lr}
 8001954:	af00      	add	r7, sp, #0
   Buzzer_Stop();
 8001956:	f000 f8e7 	bl	8001b28 <Buzzer_Stop>
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <treadmill_start>:
#define MIN_SPEED 0

int speed = 3;

void treadmill_start()
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
	DC_Motor_SetFreq(10, speed);
 8001964:	4b04      	ldr	r3, [pc, #16]	@ (8001978 <treadmill_start+0x18>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4619      	mov	r1, r3
 800196a:	200a      	movs	r0, #10
 800196c:	f000 f902 	bl	8001b74 <DC_Motor_SetFreq>
	DC_Motor_Start();
 8001970:	f000 f938 	bl	8001be4 <DC_Motor_Start>
}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000008 	.word	0x20000008

0800197c <treadmill_stop>:

void treadmill_stop()
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
	DC_Motor_Stop();
 8001980:	f000 f940 	bl	8001c04 <DC_Motor_Stop>
}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}

08001988 <treadmill_up>:

void treadmill_up()
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
	speed += 2;
 800198c:	4b08      	ldr	r3, [pc, #32]	@ (80019b0 <treadmill_up+0x28>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	3302      	adds	r3, #2
 8001992:	4a07      	ldr	r2, [pc, #28]	@ (80019b0 <treadmill_up+0x28>)
 8001994:	6013      	str	r3, [r2, #0]
	if (speed > MAX_SPEED) speed = MAX_SPEED;
 8001996:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <treadmill_up+0x28>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2b64      	cmp	r3, #100	@ 0x64
 800199c:	dd02      	ble.n	80019a4 <treadmill_up+0x1c>
 800199e:	4b04      	ldr	r3, [pc, #16]	@ (80019b0 <treadmill_up+0x28>)
 80019a0:	2264      	movs	r2, #100	@ 0x64
 80019a2:	601a      	str	r2, [r3, #0]
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	20000008 	.word	0x20000008

080019b4 <treadmill_down>:

void treadmill_down()
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
	speed -= 2;
 80019b8:	4b08      	ldr	r3, [pc, #32]	@ (80019dc <treadmill_down+0x28>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	3b02      	subs	r3, #2
 80019be:	4a07      	ldr	r2, [pc, #28]	@ (80019dc <treadmill_down+0x28>)
 80019c0:	6013      	str	r3, [r2, #0]
	if (speed < MIN_SPEED) speed = MIN_SPEED;
 80019c2:	4b06      	ldr	r3, [pc, #24]	@ (80019dc <treadmill_down+0x28>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	da02      	bge.n	80019d0 <treadmill_down+0x1c>
 80019ca:	4b04      	ldr	r3, [pc, #16]	@ (80019dc <treadmill_down+0x28>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	20000008 	.word	0x20000008

080019e0 <Button_Init>:
Button_Handler_t hBtnSTOP;
Button_Handler_t hBtnSTART;


void Button_Init(Button_Handler_t *hbtn, GPIO_TypeDef *GPIOx, uint16_t pinNum)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	4613      	mov	r3, r2
 80019ec:	80fb      	strh	r3, [r7, #6]
	hbtn->GPIOx = GPIOx;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	68ba      	ldr	r2, [r7, #8]
 80019f2:	601a      	str	r2, [r3, #0]
	hbtn->pinNum = pinNum;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	88fa      	ldrh	r2, [r7, #6]
 80019f8:	809a      	strh	r2, [r3, #4]
	hbtn->prevState = RELEASED;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2201      	movs	r2, #1
 80019fe:	609a      	str	r2, [r3, #8]
}
 8001a00:	bf00      	nop
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <Button_GetState>:

button_state_t Button_GetState(Button_Handler_t *hbtn)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	uint32_t curState;
	curState = HAL_GPIO_ReadPin(hbtn->GPIOx, hbtn->pinNum); // normal state is high.
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	889b      	ldrh	r3, [r3, #4]
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4610      	mov	r0, r2
 8001a20:	f001 f9e4 	bl	8002dec <HAL_GPIO_ReadPin>
 8001a24:	4603      	mov	r3, r0
 8001a26:	60fb      	str	r3, [r7, #12]

	if ((hbtn->prevState == RELEASED) && (curState == PUSHED)) { // button released -> pushed
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d10a      	bne.n	8001a46 <Button_GetState+0x3a>
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d107      	bne.n	8001a46 <Button_GetState+0x3a>
		HAL_Delay(2); // debounce
 8001a36:	2002      	movs	r0, #2
 8001a38:	f000 fe8c 	bl	8002754 <HAL_Delay>
		hbtn->prevState = PUSHED;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
		return ACT_PUSHED;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e00f      	b.n	8001a66 <Button_GetState+0x5a>
	}
	else if ((hbtn->prevState == PUSHED) && (curState == RELEASED)) { // button pushed -> released
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10a      	bne.n	8001a64 <Button_GetState+0x58>
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d107      	bne.n	8001a64 <Button_GetState+0x58>
		HAL_Delay(2); // debounce
 8001a54:	2002      	movs	r0, #2
 8001a56:	f000 fe7d 	bl	8002754 <HAL_Delay>
		hbtn->prevState = RELEASED;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	609a      	str	r2, [r3, #8]
		return ACT_RELEASED;
 8001a60:	2302      	movs	r3, #2
 8001a62:	e000      	b.n	8001a66 <Button_GetState+0x5a>
	}
	return NO_ACT;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <Buzzer_Init>:

static TIM_HandleTypeDef *hbuzzerTim;
static uint32_t buzzerTimChannel;

void Buzzer_Init(TIM_HandleTypeDef *htim, uint32_t channel)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
	hbuzzerTim = htim;
 8001a7a:	4a06      	ldr	r2, [pc, #24]	@ (8001a94 <Buzzer_Init+0x24>)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6013      	str	r3, [r2, #0]
	buzzerTimChannel = channel;
 8001a80:	4a05      	ldr	r2, [pc, #20]	@ (8001a98 <Buzzer_Init+0x28>)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	6013      	str	r3, [r2, #0]
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	200003a8 	.word	0x200003a8
 8001a98:	200003ac 	.word	0x200003ac

08001a9c <Buzzer_SetFreq>:

void Buzzer_SetFreq(uint32_t freq)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
	if (freq < 100) freq = 100;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b63      	cmp	r3, #99	@ 0x63
 8001aa8:	d802      	bhi.n	8001ab0 <Buzzer_SetFreq+0x14>
 8001aaa:	2364      	movs	r3, #100	@ 0x64
 8001aac:	607b      	str	r3, [r7, #4]
 8001aae:	e007      	b.n	8001ac0 <Buzzer_SetFreq+0x24>
	else if (freq > 10000) freq = 10000;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d902      	bls.n	8001ac0 <Buzzer_SetFreq+0x24>
 8001aba:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001abe:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_AUTORELOAD(&htim3, 1000000/freq - 1);
 8001ac0:	4a0e      	ldr	r2, [pc, #56]	@ (8001afc <Buzzer_SetFreq+0x60>)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ac8:	4b0d      	ldr	r3, [pc, #52]	@ (8001b00 <Buzzer_SetFreq+0x64>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	3a01      	subs	r2, #1
 8001ace:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8001afc <Buzzer_SetFreq+0x60>)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	4a09      	ldr	r2, [pc, #36]	@ (8001b00 <Buzzer_SetFreq+0x64>)
 8001adc:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1000000/freq/2 - 1); // duty cycle 50%
 8001ade:	4a09      	ldr	r2, [pc, #36]	@ (8001b04 <Buzzer_SetFreq+0x68>)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ae6:	4b06      	ldr	r3, [pc, #24]	@ (8001b00 <Buzzer_SetFreq+0x64>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	3a01      	subs	r2, #1
 8001aec:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	000f4240 	.word	0x000f4240
 8001b00:	20000208 	.word	0x20000208
 8001b04:	0007a120 	.word	0x0007a120

08001b08 <Buzzer_Start>:

void Buzzer_Start()
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(hbuzzerTim, buzzerTimChannel);
 8001b0c:	4b04      	ldr	r3, [pc, #16]	@ (8001b20 <Buzzer_Start+0x18>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a04      	ldr	r2, [pc, #16]	@ (8001b24 <Buzzer_Start+0x1c>)
 8001b12:	6812      	ldr	r2, [r2, #0]
 8001b14:	4611      	mov	r1, r2
 8001b16:	4618      	mov	r0, r3
 8001b18:	f002 fc5e 	bl	80043d8 <HAL_TIM_PWM_Start>
}
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	200003a8 	.word	0x200003a8
 8001b24:	200003ac 	.word	0x200003ac

08001b28 <Buzzer_Stop>:

void Buzzer_Stop()
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(hbuzzerTim, buzzerTimChannel);
 8001b2c:	4b04      	ldr	r3, [pc, #16]	@ (8001b40 <Buzzer_Stop+0x18>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a04      	ldr	r2, [pc, #16]	@ (8001b44 <Buzzer_Stop+0x1c>)
 8001b32:	6812      	ldr	r2, [r2, #0]
 8001b34:	4611      	mov	r1, r2
 8001b36:	4618      	mov	r0, r3
 8001b38:	f002 fcfe 	bl	8004538 <HAL_TIM_PWM_Stop>
}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	200003a8 	.word	0x200003a8
 8001b44:	200003ac 	.word	0x200003ac

08001b48 <DC_Motor_Init>:

static TIM_HandleTypeDef *hmotorTim;
static uint32_t motorTimChannel;

void DC_Motor_Init(TIM_HandleTypeDef *htim, uint32_t channel)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
	hmotorTim = htim;
 8001b52:	4a06      	ldr	r2, [pc, #24]	@ (8001b6c <DC_Motor_Init+0x24>)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6013      	str	r3, [r2, #0]
	motorTimChannel = channel;
 8001b58:	4a05      	ldr	r2, [pc, #20]	@ (8001b70 <DC_Motor_Init+0x28>)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	6013      	str	r3, [r2, #0]
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	200003b0 	.word	0x200003b0
 8001b70:	200003b4 	.word	0x200003b4

08001b74 <DC_Motor_SetFreq>:

void DC_Motor_SetFreq(uint32_t freq, int duty)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
	if (duty < 0) duty = 0;
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	da02      	bge.n	8001b8a <DC_Motor_SetFreq+0x16>
 8001b84:	2300      	movs	r3, #0
 8001b86:	603b      	str	r3, [r7, #0]
 8001b88:	e004      	b.n	8001b94 <DC_Motor_SetFreq+0x20>
	else if (duty > 100) duty = 100;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	2b64      	cmp	r3, #100	@ 0x64
 8001b8e:	dd01      	ble.n	8001b94 <DC_Motor_SetFreq+0x20>
 8001b90:	2364      	movs	r3, #100	@ 0x64
 8001b92:	603b      	str	r3, [r7, #0]

    uint32_t arr = 1000000 / freq - 1;  // 주기 설정
 8001b94:	4a10      	ldr	r2, [pc, #64]	@ (8001bd8 <DC_Motor_SetFreq+0x64>)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	60fb      	str	r3, [r7, #12]
    uint32_t ccr = (arr + 1) * duty / 100;  // 듀티비 비율 설정
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	fb02 f303 	mul.w	r3, r2, r3
 8001baa:	4a0c      	ldr	r2, [pc, #48]	@ (8001bdc <DC_Motor_SetFreq+0x68>)
 8001bac:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb0:	095b      	lsrs	r3, r3, #5
 8001bb2:	60bb      	str	r3, [r7, #8]

	__HAL_TIM_SET_AUTORELOAD(&htim1, arr);
 8001bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8001be0 <DC_Motor_SetFreq+0x6c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001bbc:	4a08      	ldr	r2, [pc, #32]	@ (8001be0 <DC_Motor_SetFreq+0x6c>)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ccr);
 8001bc2:	4b07      	ldr	r3, [pc, #28]	@ (8001be0 <DC_Motor_SetFreq+0x6c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001bca:	bf00      	nop
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	000f4240 	.word	0x000f4240
 8001bdc:	51eb851f 	.word	0x51eb851f
 8001be0:	20000178 	.word	0x20000178

08001be4 <DC_Motor_Start>:

void DC_Motor_Start()
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(hmotorTim, motorTimChannel);
 8001be8:	4b04      	ldr	r3, [pc, #16]	@ (8001bfc <DC_Motor_Start+0x18>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a04      	ldr	r2, [pc, #16]	@ (8001c00 <DC_Motor_Start+0x1c>)
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	4611      	mov	r1, r2
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f002 fbf0 	bl	80043d8 <HAL_TIM_PWM_Start>
}
 8001bf8:	bf00      	nop
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	200003b0 	.word	0x200003b0
 8001c00:	200003b4 	.word	0x200003b4

08001c04 <DC_Motor_Stop>:

void DC_Motor_Stop()
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(hmotorTim, motorTimChannel);
 8001c08:	4b04      	ldr	r3, [pc, #16]	@ (8001c1c <DC_Motor_Stop+0x18>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a04      	ldr	r2, [pc, #16]	@ (8001c20 <DC_Motor_Stop+0x1c>)
 8001c0e:	6812      	ldr	r2, [r2, #0]
 8001c10:	4611      	mov	r1, r2
 8001c12:	4618      	mov	r0, r3
 8001c14:	f002 fc90 	bl	8004538 <HAL_TIM_PWM_Stop>
}
 8001c18:	bf00      	nop
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	200003b0 	.word	0x200003b0
 8001c20:	200003b4 	.word	0x200003b4

08001c24 <Set_Pin_Output>:

#include "DHT11.h"

extern TIM_HandleTypeDef htim5;

static void Set_Pin_Output(DHT11_TypeDef *dht) {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b088      	sub	sp, #32
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2c:	f107 030c 	add.w	r3, r7, #12
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = dht->data_pinNum;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	889b      	ldrh	r3, [r3, #4]
 8001c40:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c42:	2301      	movs	r3, #1
 8001c44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(dht->data_GPIOx, &GPIO_InitStruct);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f107 020c 	add.w	r2, r7, #12
 8001c56:	4611      	mov	r1, r2
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f000 ff43 	bl	8002ae4 <HAL_GPIO_Init>
}
 8001c5e:	bf00      	nop
 8001c60:	3720      	adds	r7, #32
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <Set_Pin_Input>:

static void Set_Pin_Input(DHT11_TypeDef *dht) {
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b088      	sub	sp, #32
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6e:	f107 030c 	add.w	r3, r7, #12
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	60da      	str	r2, [r3, #12]
 8001c7c:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = dht->data_pinNum;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	889b      	ldrh	r3, [r3, #4]
 8001c82:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c84:	2300      	movs	r3, #0
 8001c86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(dht->data_GPIOx, &GPIO_InitStruct);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f107 020c 	add.w	r2, r7, #12
 8001c94:	4611      	mov	r1, r2
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 ff24 	bl	8002ae4 <HAL_GPIO_Init>
}
 8001c9c:	bf00      	nop
 8001c9e:	3720      	adds	r7, #32
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <delay_us_dht>:

void delay_us_dht(uint16_t us)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim5, 0);
 8001cae:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd8 <delay_us_dht+0x34>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Start(&htim5);
 8001cb6:	4808      	ldr	r0, [pc, #32]	@ (8001cd8 <delay_us_dht+0x34>)
 8001cb8:	f002 fa50 	bl	800415c <HAL_TIM_Base_Start>
    while (__HAL_TIM_GET_COUNTER(&htim5) < us);
 8001cbc:	bf00      	nop
 8001cbe:	4b06      	ldr	r3, [pc, #24]	@ (8001cd8 <delay_us_dht+0x34>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001cc4:	88fb      	ldrh	r3, [r7, #6]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d3f9      	bcc.n	8001cbe <delay_us_dht+0x1a>
    HAL_TIM_Base_Stop(&htim5);
 8001cca:	4803      	ldr	r0, [pc, #12]	@ (8001cd8 <delay_us_dht+0x34>)
 8001ccc:	f002 faa0 	bl	8004210 <HAL_TIM_Base_Stop>
}
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20000298 	.word	0x20000298

08001cdc <DHT11_Init>:

void DHT11_Init(DHT11_TypeDef *dht, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	80fb      	strh	r3, [r7, #6]
    dht->data_GPIOx = GPIOx;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	68ba      	ldr	r2, [r7, #8]
 8001cee:	601a      	str	r2, [r3, #0]
    dht->data_pinNum = GPIO_Pin;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	88fa      	ldrh	r2, [r7, #6]
 8001cf4:	809a      	strh	r2, [r3, #4]
}
 8001cf6:	bf00      	nop
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <DHT11_Read>:

uint8_t DHT11_Read(DHT11_TypeDef *dht, uint8_t *temp, uint8_t *humi) {
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b088      	sub	sp, #32
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	60f8      	str	r0, [r7, #12]
 8001d0a:	60b9      	str	r1, [r7, #8]
 8001d0c:	607a      	str	r2, [r7, #4]
    uint8_t data[5] = {0};
 8001d0e:	f107 0310 	add.w	r3, r7, #16
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	711a      	strb	r2, [r3, #4]

    // Start signal
    Set_Pin_Output(dht);
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	f7ff ff83 	bl	8001c24 <Set_Pin_Output>
    HAL_GPIO_WritePin(dht->data_GPIOx, dht->data_pinNum, GPIO_PIN_RESET);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6818      	ldr	r0, [r3, #0]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	889b      	ldrh	r3, [r3, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f001 f877 	bl	8002e1c <HAL_GPIO_WritePin>
    delay_us_dht(18000);
 8001d2e:	f244 6050 	movw	r0, #18000	@ 0x4650
 8001d32:	f7ff ffb7 	bl	8001ca4 <delay_us_dht>
    HAL_GPIO_WritePin(dht->data_GPIOx, dht->data_pinNum, GPIO_PIN_SET);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6818      	ldr	r0, [r3, #0]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	889b      	ldrh	r3, [r3, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	4619      	mov	r1, r3
 8001d42:	f001 f86b 	bl	8002e1c <HAL_GPIO_WritePin>
    delay_us_dht(30);
 8001d46:	201e      	movs	r0, #30
 8001d48:	f7ff ffac 	bl	8001ca4 <delay_us_dht>

    Set_Pin_Input(dht);
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f7ff ff8a 	bl	8001c66 <Set_Pin_Input>

    // 응답 신호 대기
    uint32_t timeout = 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
    while (HAL_GPIO_ReadPin(dht->data_GPIOx, dht->data_pinNum) == GPIO_PIN_SET)
 8001d56:	e009      	b.n	8001d6c <DHT11_Read+0x6a>
        if (++timeout > 10000) return 1;
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	61fb      	str	r3, [r7, #28]
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d901      	bls.n	8001d6c <DHT11_Read+0x6a>
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e094      	b.n	8001e96 <DHT11_Read+0x194>
    while (HAL_GPIO_ReadPin(dht->data_GPIOx, dht->data_pinNum) == GPIO_PIN_SET)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	889b      	ldrh	r3, [r3, #4]
 8001d74:	4619      	mov	r1, r3
 8001d76:	4610      	mov	r0, r2
 8001d78:	f001 f838 	bl	8002dec <HAL_GPIO_ReadPin>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d0ea      	beq.n	8001d58 <DHT11_Read+0x56>

    while (HAL_GPIO_ReadPin(dht->data_GPIOx, dht->data_pinNum) == GPIO_PIN_RESET);
 8001d82:	bf00      	nop
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	889b      	ldrh	r3, [r3, #4]
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4610      	mov	r0, r2
 8001d90:	f001 f82c 	bl	8002dec <HAL_GPIO_ReadPin>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0f4      	beq.n	8001d84 <DHT11_Read+0x82>
    while (HAL_GPIO_ReadPin(dht->data_GPIOx, dht->data_pinNum) == GPIO_PIN_SET);
 8001d9a:	bf00      	nop
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	889b      	ldrh	r3, [r3, #4]
 8001da4:	4619      	mov	r1, r3
 8001da6:	4610      	mov	r0, r2
 8001da8:	f001 f820 	bl	8002dec <HAL_GPIO_ReadPin>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d0f4      	beq.n	8001d9c <DHT11_Read+0x9a>

    // 40bit 데이터 수신
    for (int i = 0; i < 40; i++) {
 8001db2:	2300      	movs	r3, #0
 8001db4:	61bb      	str	r3, [r7, #24]
 8001db6:	e056      	b.n	8001e66 <DHT11_Read+0x164>
        while (HAL_GPIO_ReadPin(dht->data_GPIOx, dht->data_pinNum) == GPIO_PIN_RESET);
 8001db8:	bf00      	nop
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	889b      	ldrh	r3, [r3, #4]
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4610      	mov	r0, r2
 8001dc6:	f001 f811 	bl	8002dec <HAL_GPIO_ReadPin>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0f4      	beq.n	8001dba <DHT11_Read+0xb8>
        delay_us_dht(40);
 8001dd0:	2028      	movs	r0, #40	@ 0x28
 8001dd2:	f7ff ff67 	bl	8001ca4 <delay_us_dht>

        if (HAL_GPIO_ReadPin(dht->data_GPIOx, dht->data_pinNum) == GPIO_PIN_SET)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	889b      	ldrh	r3, [r3, #4]
 8001dde:	4619      	mov	r1, r3
 8001de0:	4610      	mov	r0, r2
 8001de2:	f001 f803 	bl	8002dec <HAL_GPIO_ReadPin>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d119      	bne.n	8001e20 <DHT11_Read+0x11e>
            data[i/8] = (data[i/8] << 1) | 1;
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	da00      	bge.n	8001df4 <DHT11_Read+0xf2>
 8001df2:	3307      	adds	r3, #7
 8001df4:	10db      	asrs	r3, r3, #3
 8001df6:	3320      	adds	r3, #32
 8001df8:	443b      	add	r3, r7
 8001dfa:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001dfe:	b25b      	sxtb	r3, r3
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	b25b      	sxtb	r3, r3
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	b25a      	sxtb	r2, r3
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	da00      	bge.n	8001e12 <DHT11_Read+0x110>
 8001e10:	3307      	adds	r3, #7
 8001e12:	10db      	asrs	r3, r3, #3
 8001e14:	b2d2      	uxtb	r2, r2
 8001e16:	3320      	adds	r3, #32
 8001e18:	443b      	add	r3, r7
 8001e1a:	f803 2c10 	strb.w	r2, [r3, #-16]
 8001e1e:	e013      	b.n	8001e48 <DHT11_Read+0x146>
        else
            data[i/8] = (data[i/8] << 1);
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	da00      	bge.n	8001e28 <DHT11_Read+0x126>
 8001e26:	3307      	adds	r3, #7
 8001e28:	10db      	asrs	r3, r3, #3
 8001e2a:	3320      	adds	r3, #32
 8001e2c:	443b      	add	r3, r7
 8001e2e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	da00      	bge.n	8001e3a <DHT11_Read+0x138>
 8001e38:	3307      	adds	r3, #7
 8001e3a:	10db      	asrs	r3, r3, #3
 8001e3c:	0052      	lsls	r2, r2, #1
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	3320      	adds	r3, #32
 8001e42:	443b      	add	r3, r7
 8001e44:	f803 2c10 	strb.w	r2, [r3, #-16]

        while (HAL_GPIO_ReadPin(dht->data_GPIOx, dht->data_pinNum) == GPIO_PIN_SET);
 8001e48:	bf00      	nop
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	889b      	ldrh	r3, [r3, #4]
 8001e52:	4619      	mov	r1, r3
 8001e54:	4610      	mov	r0, r2
 8001e56:	f000 ffc9 	bl	8002dec <HAL_GPIO_ReadPin>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d0f4      	beq.n	8001e4a <DHT11_Read+0x148>
    for (int i = 0; i < 40; i++) {
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	3301      	adds	r3, #1
 8001e64:	61bb      	str	r3, [r7, #24]
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	2b27      	cmp	r3, #39	@ 0x27
 8001e6a:	dda5      	ble.n	8001db8 <DHT11_Read+0xb6>
    }

    // 체크섬 검증
    if (data[4] == (data[0] + data[1] + data[2] + data[3])) {
 8001e6c:	7d3b      	ldrb	r3, [r7, #20]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	7c3b      	ldrb	r3, [r7, #16]
 8001e72:	4619      	mov	r1, r3
 8001e74:	7c7b      	ldrb	r3, [r7, #17]
 8001e76:	440b      	add	r3, r1
 8001e78:	7cb9      	ldrb	r1, [r7, #18]
 8001e7a:	440b      	add	r3, r1
 8001e7c:	7cf9      	ldrb	r1, [r7, #19]
 8001e7e:	440b      	add	r3, r1
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d107      	bne.n	8001e94 <DHT11_Read+0x192>
        *humi = data[0];
 8001e84:	7c3a      	ldrb	r2, [r7, #16]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	701a      	strb	r2, [r3, #0]
        *temp = data[2];
 8001e8a:	7cba      	ldrb	r2, [r7, #18]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	701a      	strb	r2, [r3, #0]
        return 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	e000      	b.n	8001e96 <DHT11_Read+0x194>
    }

    return 2;
 8001e94:	2302      	movs	r3, #2
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3720      	adds	r7, #32
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <FND_WriteData>:
	else
		fndDispDp &= ~dpData;
}

void FND_WriteData(uint16_t data)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	80fb      	strh	r3, [r7, #6]
	fndDispNum = data;
 8001eaa:	4a04      	ldr	r2, [pc, #16]	@ (8001ebc <FND_WriteData+0x1c>)
 8001eac:	88fb      	ldrh	r3, [r7, #6]
 8001eae:	8013      	strh	r3, [r2, #0]
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	200003b8 	.word	0x200003b8

08001ec0 <FND_DispDataCallBack>:
	return fndDispNum;
}

// display fndDispNum
void FND_DispDataCallBack()
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
	static int digitPos = 0;
	// 인터럽트가 발생하면 한 자리씩 출력한다.
	digitPos = (digitPos+1) % 8;
 8001ec4:	4b80      	ldr	r3, [pc, #512]	@ (80020c8 <FND_DispDataCallBack+0x208>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	425a      	negs	r2, r3
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	f002 0207 	and.w	r2, r2, #7
 8001ed4:	bf58      	it	pl
 8001ed6:	4253      	negpl	r3, r2
 8001ed8:	4a7b      	ldr	r2, [pc, #492]	@ (80020c8 <FND_DispDataCallBack+0x208>)
 8001eda:	6013      	str	r3, [r2, #0]
	switch(digitPos)
 8001edc:	4b7a      	ldr	r3, [pc, #488]	@ (80020c8 <FND_DispDataCallBack+0x208>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b07      	cmp	r3, #7
 8001ee2:	f200 80ee 	bhi.w	80020c2 <FND_DispDataCallBack+0x202>
 8001ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8001eec <FND_DispDataCallBack+0x2c>)
 8001ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eec:	08001f0d 	.word	0x08001f0d
 8001ef0:	08001f3b 	.word	0x08001f3b
 8001ef4:	08001f73 	.word	0x08001f73
 8001ef8:	08001fab 	.word	0x08001fab
 8001efc:	08001fe3 	.word	0x08001fe3
 8001f00:	0800201b 	.word	0x0800201b
 8001f04:	08002053 	.word	0x08002053
 8001f08:	0800208b 	.word	0x0800208b
	{
	case DIGIT_1:
		FND_DispOffAll();
 8001f0c:	f000 f8e8 	bl	80020e0 <FND_DispOffAll>
		FND_DispDigit(fndDispNum % 10);
 8001f10:	4b6e      	ldr	r3, [pc, #440]	@ (80020cc <FND_DispDataCallBack+0x20c>)
 8001f12:	881a      	ldrh	r2, [r3, #0]
 8001f14:	4b6e      	ldr	r3, [pc, #440]	@ (80020d0 <FND_DispDataCallBack+0x210>)
 8001f16:	fba3 1302 	umull	r1, r3, r3, r2
 8001f1a:	08d9      	lsrs	r1, r3, #3
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	440b      	add	r3, r1
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f000 f913 	bl	8002154 <FND_DispDigit>
		FND_DispOn(digitPos);
 8001f2e:	4b66      	ldr	r3, [pc, #408]	@ (80020c8 <FND_DispDataCallBack+0x208>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f000 f8f6 	bl	8002124 <FND_DispOn>
		break;
 8001f38:	e0c3      	b.n	80020c2 <FND_DispDataCallBack+0x202>
	case DIGIT_10:
		FND_DispOffAll();
 8001f3a:	f000 f8d1 	bl	80020e0 <FND_DispOffAll>
		FND_DispDigit(fndDispNum /10 % 10);
 8001f3e:	4b63      	ldr	r3, [pc, #396]	@ (80020cc <FND_DispDataCallBack+0x20c>)
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	4a63      	ldr	r2, [pc, #396]	@ (80020d0 <FND_DispDataCallBack+0x210>)
 8001f44:	fba2 2303 	umull	r2, r3, r2, r3
 8001f48:	08db      	lsrs	r3, r3, #3
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	4b60      	ldr	r3, [pc, #384]	@ (80020d0 <FND_DispDataCallBack+0x210>)
 8001f4e:	fba3 1302 	umull	r1, r3, r3, r2
 8001f52:	08d9      	lsrs	r1, r3, #3
 8001f54:	460b      	mov	r3, r1
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	440b      	add	r3, r1
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	4618      	mov	r0, r3
 8001f62:	f000 f8f7 	bl	8002154 <FND_DispDigit>
		FND_DispOn(digitPos);
 8001f66:	4b58      	ldr	r3, [pc, #352]	@ (80020c8 <FND_DispDataCallBack+0x208>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 f8da 	bl	8002124 <FND_DispOn>
		break;
 8001f70:	e0a7      	b.n	80020c2 <FND_DispDataCallBack+0x202>
	case DIGIT_100:
		FND_DispOffAll();
 8001f72:	f000 f8b5 	bl	80020e0 <FND_DispOffAll>
		FND_DispDigit(fndDispNum /100 % 10);
 8001f76:	4b55      	ldr	r3, [pc, #340]	@ (80020cc <FND_DispDataCallBack+0x20c>)
 8001f78:	881b      	ldrh	r3, [r3, #0]
 8001f7a:	4a56      	ldr	r2, [pc, #344]	@ (80020d4 <FND_DispDataCallBack+0x214>)
 8001f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f80:	095b      	lsrs	r3, r3, #5
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	4b52      	ldr	r3, [pc, #328]	@ (80020d0 <FND_DispDataCallBack+0x210>)
 8001f86:	fba3 1302 	umull	r1, r3, r3, r2
 8001f8a:	08d9      	lsrs	r1, r3, #3
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	440b      	add	r3, r1
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f000 f8db 	bl	8002154 <FND_DispDigit>
		FND_DispOn(digitPos);
 8001f9e:	4b4a      	ldr	r3, [pc, #296]	@ (80020c8 <FND_DispDataCallBack+0x208>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 f8be 	bl	8002124 <FND_DispOn>
		break;
 8001fa8:	e08b      	b.n	80020c2 <FND_DispDataCallBack+0x202>
	case DIGIT_1000:
		FND_DispOffAll();
 8001faa:	f000 f899 	bl	80020e0 <FND_DispOffAll>
		FND_DispDigit(fndDispNum /1000 % 10);
 8001fae:	4b47      	ldr	r3, [pc, #284]	@ (80020cc <FND_DispDataCallBack+0x20c>)
 8001fb0:	881b      	ldrh	r3, [r3, #0]
 8001fb2:	4a49      	ldr	r2, [pc, #292]	@ (80020d8 <FND_DispDataCallBack+0x218>)
 8001fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb8:	099b      	lsrs	r3, r3, #6
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	4b44      	ldr	r3, [pc, #272]	@ (80020d0 <FND_DispDataCallBack+0x210>)
 8001fbe:	fba3 1302 	umull	r1, r3, r3, r2
 8001fc2:	08d9      	lsrs	r1, r3, #3
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	440b      	add	r3, r1
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f000 f8bf 	bl	8002154 <FND_DispDigit>
		FND_DispOn(digitPos);
 8001fd6:	4b3c      	ldr	r3, [pc, #240]	@ (80020c8 <FND_DispDataCallBack+0x208>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 f8a2 	bl	8002124 <FND_DispOn>
		break;
 8001fe0:	e06f      	b.n	80020c2 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_1:
		FND_DispOffAll();
 8001fe2:	f000 f87d 	bl	80020e0 <FND_DispOffAll>
		if (fndDispDp & (1<<0)) {
 8001fe6:	4b3d      	ldr	r3, [pc, #244]	@ (80020dc <FND_DispDataCallBack+0x21c>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <FND_DispDataCallBack+0x13a>
			FND_DispDigit(10); // DP ON
 8001ff2:	200a      	movs	r0, #10
 8001ff4:	f000 f8ae 	bl	8002154 <FND_DispDigit>
 8001ff8:	e002      	b.n	8002000 <FND_DispDataCallBack+0x140>
		} else {
			FND_DispDigit(11); // ALL OFF
 8001ffa:	200b      	movs	r0, #11
 8001ffc:	f000 f8aa 	bl	8002154 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8002000:	4b31      	ldr	r3, [pc, #196]	@ (80020c8 <FND_DispDataCallBack+0x208>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	425a      	negs	r2, r3
 8002006:	f003 0303 	and.w	r3, r3, #3
 800200a:	f002 0203 	and.w	r2, r2, #3
 800200e:	bf58      	it	pl
 8002010:	4253      	negpl	r3, r2
 8002012:	4618      	mov	r0, r3
 8002014:	f000 f886 	bl	8002124 <FND_DispOn>
		break;
 8002018:	e053      	b.n	80020c2 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_10:
		FND_DispOffAll();
 800201a:	f000 f861 	bl	80020e0 <FND_DispOffAll>
		if (fndDispDp & (1<<1)) {
 800201e:	4b2f      	ldr	r3, [pc, #188]	@ (80020dc <FND_DispDataCallBack+0x21c>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <FND_DispDataCallBack+0x172>
			FND_DispDigit(10); // DP ON
 800202a:	200a      	movs	r0, #10
 800202c:	f000 f892 	bl	8002154 <FND_DispDigit>
 8002030:	e002      	b.n	8002038 <FND_DispDataCallBack+0x178>
		} else {
			FND_DispDigit(11); // ALL OFF
 8002032:	200b      	movs	r0, #11
 8002034:	f000 f88e 	bl	8002154 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8002038:	4b23      	ldr	r3, [pc, #140]	@ (80020c8 <FND_DispDataCallBack+0x208>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	425a      	negs	r2, r3
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	f002 0203 	and.w	r2, r2, #3
 8002046:	bf58      	it	pl
 8002048:	4253      	negpl	r3, r2
 800204a:	4618      	mov	r0, r3
 800204c:	f000 f86a 	bl	8002124 <FND_DispOn>
		break;
 8002050:	e037      	b.n	80020c2 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_100:
		FND_DispOffAll();
 8002052:	f000 f845 	bl	80020e0 <FND_DispOffAll>
		if (fndDispDp & (1<<2)) {
 8002056:	4b21      	ldr	r3, [pc, #132]	@ (80020dc <FND_DispDataCallBack+0x21c>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <FND_DispDataCallBack+0x1aa>
			FND_DispDigit(10); // DP ON
 8002062:	200a      	movs	r0, #10
 8002064:	f000 f876 	bl	8002154 <FND_DispDigit>
 8002068:	e002      	b.n	8002070 <FND_DispDataCallBack+0x1b0>
		} else {
			FND_DispDigit(11); // ALL OFF
 800206a:	200b      	movs	r0, #11
 800206c:	f000 f872 	bl	8002154 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8002070:	4b15      	ldr	r3, [pc, #84]	@ (80020c8 <FND_DispDataCallBack+0x208>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	425a      	negs	r2, r3
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	f002 0203 	and.w	r2, r2, #3
 800207e:	bf58      	it	pl
 8002080:	4253      	negpl	r3, r2
 8002082:	4618      	mov	r0, r3
 8002084:	f000 f84e 	bl	8002124 <FND_DispOn>
		break;
 8002088:	e01b      	b.n	80020c2 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_1000:
		FND_DispOffAll();
 800208a:	f000 f829 	bl	80020e0 <FND_DispOffAll>
		if (fndDispDp & (1<<3)) {
 800208e:	4b13      	ldr	r3, [pc, #76]	@ (80020dc <FND_DispDataCallBack+0x21c>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <FND_DispDataCallBack+0x1e2>
			FND_DispDigit(10); // DP ON
 800209a:	200a      	movs	r0, #10
 800209c:	f000 f85a 	bl	8002154 <FND_DispDigit>
 80020a0:	e002      	b.n	80020a8 <FND_DispDataCallBack+0x1e8>
		} else {
			FND_DispDigit(11); // ALL OFF
 80020a2:	200b      	movs	r0, #11
 80020a4:	f000 f856 	bl	8002154 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 80020a8:	4b07      	ldr	r3, [pc, #28]	@ (80020c8 <FND_DispDataCallBack+0x208>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	425a      	negs	r2, r3
 80020ae:	f003 0303 	and.w	r3, r3, #3
 80020b2:	f002 0203 	and.w	r2, r2, #3
 80020b6:	bf58      	it	pl
 80020b8:	4253      	negpl	r3, r2
 80020ba:	4618      	mov	r0, r3
 80020bc:	f000 f832 	bl	8002124 <FND_DispOn>
		break;
 80020c0:	bf00      	nop
	}
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	200003bc 	.word	0x200003bc
 80020cc:	200003b8 	.word	0x200003b8
 80020d0:	cccccccd 	.word	0xcccccccd
 80020d4:	51eb851f 	.word	0x51eb851f
 80020d8:	10624dd3 	.word	0x10624dd3
 80020dc:	200003ba 	.word	0x200003ba

080020e0 <FND_DispOffAll>:
//		}
//	}
//}

void FND_DispOffAll()
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
	// GPIO_Write(GPIOx, Pin, RESET);
	for (int i=0; i<4; i++) {
 80020e6:	2300      	movs	r3, #0
 80020e8:	607b      	str	r3, [r7, #4]
 80020ea:	e010      	b.n	800210e <FND_DispOffAll+0x2e>
		HAL_GPIO_WritePin(fndDigitCom[i].GPIOx, fndDigitCom[i].pinNum, RESET);
 80020ec:	4a0c      	ldr	r2, [pc, #48]	@ (8002120 <FND_DispOffAll+0x40>)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80020f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002120 <FND_DispOffAll+0x40>)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	4413      	add	r3, r2
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	b29b      	uxth	r3, r3
 8002100:	2200      	movs	r2, #0
 8002102:	4619      	mov	r1, r3
 8002104:	f000 fe8a 	bl	8002e1c <HAL_GPIO_WritePin>
	for (int i=0; i<4; i++) {
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3301      	adds	r3, #1
 800210c:	607b      	str	r3, [r7, #4]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b03      	cmp	r3, #3
 8002112:	ddeb      	ble.n	80020ec <FND_DispOffAll+0xc>
	}
}
 8002114:	bf00      	nop
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	2000000c 	.word	0x2000000c

08002124 <FND_DispOn>:

void FND_DispOn(int fndPos)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
	// GPIO_Write(GPIOx, Pin, SET);
	HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, SET);
 800212c:	4a08      	ldr	r2, [pc, #32]	@ (8002150 <FND_DispOn+0x2c>)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002134:	4a06      	ldr	r2, [pc, #24]	@ (8002150 <FND_DispOn+0x2c>)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	4413      	add	r3, r2
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	b29b      	uxth	r3, r3
 8002140:	2201      	movs	r2, #1
 8002142:	4619      	mov	r1, r3
 8002144:	f000 fe6a 	bl	8002e1c <HAL_GPIO_WritePin>
}
 8002148:	bf00      	nop
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	2000000c 	.word	0x2000000c

08002154 <FND_DispDigit>:


void FND_DispDigit(uint16_t digit)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	80fb      	strh	r3, [r7, #6]
	const uint8_t segFont[12] = {
 800215e:	4a1f      	ldr	r2, [pc, #124]	@ (80021dc <FND_DispDigit+0x88>)
 8002160:	f107 0308 	add.w	r3, r7, #8
 8002164:	ca07      	ldmia	r2, {r0, r1, r2}
 8002166:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		    0x90,  // 9
			0x7F,  // dot
			0xFF  // all off
	};

	for (int i=0; i<8; i++) {
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]
 800216e:	e02c      	b.n	80021ca <FND_DispDigit+0x76>
		if (!(segFont[digit] & (1<<i))) {
 8002170:	88fb      	ldrh	r3, [r7, #6]
 8002172:	3318      	adds	r3, #24
 8002174:	443b      	add	r3, r7
 8002176:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800217a:	461a      	mov	r2, r3
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	fa42 f303 	asr.w	r3, r2, r3
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10e      	bne.n	80021a8 <FND_DispDigit+0x54>
			HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, RESET); // 0 -> on
 800218a:	4a15      	ldr	r2, [pc, #84]	@ (80021e0 <FND_DispDigit+0x8c>)
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002192:	4a13      	ldr	r2, [pc, #76]	@ (80021e0 <FND_DispDigit+0x8c>)
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	4413      	add	r3, r2
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	b29b      	uxth	r3, r3
 800219e:	2200      	movs	r2, #0
 80021a0:	4619      	mov	r1, r3
 80021a2:	f000 fe3b 	bl	8002e1c <HAL_GPIO_WritePin>
 80021a6:	e00d      	b.n	80021c4 <FND_DispDigit+0x70>
		}
		else {
			HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, SET); // 1 -> off
 80021a8:	4a0d      	ldr	r2, [pc, #52]	@ (80021e0 <FND_DispDigit+0x8c>)
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80021b0:	4a0b      	ldr	r2, [pc, #44]	@ (80021e0 <FND_DispDigit+0x8c>)
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	4413      	add	r3, r2
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	2201      	movs	r2, #1
 80021be:	4619      	mov	r1, r3
 80021c0:	f000 fe2c 	bl	8002e1c <HAL_GPIO_WritePin>
	for (int i=0; i<8; i++) {
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	3301      	adds	r3, #1
 80021c8:	617b      	str	r3, [r7, #20]
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	2b07      	cmp	r3, #7
 80021ce:	ddcf      	ble.n	8002170 <FND_DispDigit+0x1c>
		}
	}
}
 80021d0:	bf00      	nop
 80021d2:	bf00      	nop
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	08006b24 	.word	0x08006b24
 80021e0:	2000002c 	.word	0x2000002c

080021e4 <LCD_Init>:

static uint8_t lcdData = 0;
static I2C_HandleTypeDef *hLcdI2C;

void LCD_Init(I2C_HandleTypeDef *hI2C)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
	hLcdI2C = hI2C;
 80021ec:	4a18      	ldr	r2, [pc, #96]	@ (8002250 <LCD_Init+0x6c>)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6013      	str	r3, [r2, #0]
	HAL_Delay(50);
 80021f2:	2032      	movs	r0, #50	@ 0x32
 80021f4:	f000 faae 	bl	8002754 <HAL_Delay>
	LCD_cmdMode();
 80021f8:	f000 f852 	bl	80022a0 <LCD_cmdMode>
	LCD_writeMode();
 80021fc:	f000 f874 	bl	80022e8 <LCD_writeMode>
	LCD_sendNibbleData(0x30);
 8002200:	2030      	movs	r0, #48	@ 0x30
 8002202:	f000 f8a7 	bl	8002354 <LCD_sendNibbleData>
	HAL_Delay(5);
 8002206:	2005      	movs	r0, #5
 8002208:	f000 faa4 	bl	8002754 <HAL_Delay>
	LCD_sendNibbleData(0x30);
 800220c:	2030      	movs	r0, #48	@ 0x30
 800220e:	f000 f8a1 	bl	8002354 <LCD_sendNibbleData>
	HAL_Delay(1);
 8002212:	2001      	movs	r0, #1
 8002214:	f000 fa9e 	bl	8002754 <HAL_Delay>
	LCD_sendNibbleData(0x30);
 8002218:	2030      	movs	r0, #48	@ 0x30
 800221a:	f000 f89b 	bl	8002354 <LCD_sendNibbleData>
	LCD_sendNibbleData(0x20);
 800221e:	2020      	movs	r0, #32
 8002220:	f000 f898 	bl	8002354 <LCD_sendNibbleData>
	LCD_sendData(LCD_4BIT_FUNC_SET);
 8002224:	2028      	movs	r0, #40	@ 0x28
 8002226:	f000 f8b9 	bl	800239c <LCD_sendData>
	LCD_sendData(LCD_DISP_OFF);
 800222a:	2008      	movs	r0, #8
 800222c:	f000 f8b6 	bl	800239c <LCD_sendData>
	LCD_sendData(LCD_DISP_CLEAR);
 8002230:	2001      	movs	r0, #1
 8002232:	f000 f8b3 	bl	800239c <LCD_sendData>
	LCD_sendData(LCD_ENTRY_MODE_SET);
 8002236:	2006      	movs	r0, #6
 8002238:	f000 f8b0 	bl	800239c <LCD_sendData>
	LCD_sendData(LCD_DISP_ON);
 800223c:	200c      	movs	r0, #12
 800223e:	f000 f8ad 	bl	800239c <LCD_sendData>
	LCD_backLightOn();
 8002242:	f000 f81d 	bl	8002280 <LCD_backLightOn>
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	200003c4 	.word	0x200003c4

08002254 <LCD_sendI2C>:

void LCD_sendI2C(uint8_t data)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af02      	add	r7, sp, #8
 800225a:	4603      	mov	r3, r0
 800225c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(hLcdI2C, LCD_DEV_ADDR<<1, &data, 1, 1000);
 800225e:	4b07      	ldr	r3, [pc, #28]	@ (800227c <LCD_sendI2C+0x28>)
 8002260:	6818      	ldr	r0, [r3, #0]
 8002262:	1dfa      	adds	r2, r7, #7
 8002264:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	2301      	movs	r3, #1
 800226c:	214e      	movs	r1, #78	@ 0x4e
 800226e:	f000 ff33 	bl	80030d8 <HAL_I2C_Master_Transmit>
}
 8002272:	bf00      	nop
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	200003c4 	.word	0x200003c4

08002280 <LCD_backLightOn>:

void LCD_backLightOn()
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_BL);
 8002284:	4b05      	ldr	r3, [pc, #20]	@ (800229c <LCD_backLightOn+0x1c>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	f043 0308 	orr.w	r3, r3, #8
 800228c:	b2da      	uxtb	r2, r3
 800228e:	4b03      	ldr	r3, [pc, #12]	@ (800229c <LCD_backLightOn+0x1c>)
 8002290:	701a      	strb	r2, [r3, #0]
}
 8002292:	bf00      	nop
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	200003c0 	.word	0x200003c0

080022a0 <LCD_cmdMode>:
{
	lcdData &= ~(1<<LCD_BL);
}

void LCD_cmdMode()
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RS);
 80022a4:	4b06      	ldr	r3, [pc, #24]	@ (80022c0 <LCD_cmdMode+0x20>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	f023 0301 	bic.w	r3, r3, #1
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	4b04      	ldr	r3, [pc, #16]	@ (80022c0 <LCD_cmdMode+0x20>)
 80022b0:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 80022b2:	4b03      	ldr	r3, [pc, #12]	@ (80022c0 <LCD_cmdMode+0x20>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff ffcc 	bl	8002254 <LCD_sendI2C>
}
 80022bc:	bf00      	nop
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	200003c0 	.word	0x200003c0

080022c4 <LCD_charMode>:

void LCD_charMode()
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_RS);
 80022c8:	4b06      	ldr	r3, [pc, #24]	@ (80022e4 <LCD_charMode+0x20>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	4b04      	ldr	r3, [pc, #16]	@ (80022e4 <LCD_charMode+0x20>)
 80022d4:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 80022d6:	4b03      	ldr	r3, [pc, #12]	@ (80022e4 <LCD_charMode+0x20>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff ffba 	bl	8002254 <LCD_sendI2C>
}
 80022e0:	bf00      	nop
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	200003c0 	.word	0x200003c0

080022e8 <LCD_writeMode>:

void LCD_writeMode()
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RW);
 80022ec:	4b06      	ldr	r3, [pc, #24]	@ (8002308 <LCD_writeMode+0x20>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	f023 0302 	bic.w	r3, r3, #2
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	4b04      	ldr	r3, [pc, #16]	@ (8002308 <LCD_writeMode+0x20>)
 80022f8:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 80022fa:	4b03      	ldr	r3, [pc, #12]	@ (8002308 <LCD_writeMode+0x20>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff ffa8 	bl	8002254 <LCD_sendI2C>
}
 8002304:	bf00      	nop
 8002306:	bd80      	pop	{r7, pc}
 8002308:	200003c0 	.word	0x200003c0

0800230c <LCD_E_High>:

void LCD_E_High()
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_E);
 8002310:	4b06      	ldr	r3, [pc, #24]	@ (800232c <LCD_E_High+0x20>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	f043 0304 	orr.w	r3, r3, #4
 8002318:	b2da      	uxtb	r2, r3
 800231a:	4b04      	ldr	r3, [pc, #16]	@ (800232c <LCD_E_High+0x20>)
 800231c:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 800231e:	4b03      	ldr	r3, [pc, #12]	@ (800232c <LCD_E_High+0x20>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff ff96 	bl	8002254 <LCD_sendI2C>
}
 8002328:	bf00      	nop
 800232a:	bd80      	pop	{r7, pc}
 800232c:	200003c0 	.word	0x200003c0

08002330 <LCD_E_Low>:

void LCD_E_Low()
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_E);
 8002334:	4b06      	ldr	r3, [pc, #24]	@ (8002350 <LCD_E_Low+0x20>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	f023 0304 	bic.w	r3, r3, #4
 800233c:	b2da      	uxtb	r2, r3
 800233e:	4b04      	ldr	r3, [pc, #16]	@ (8002350 <LCD_E_Low+0x20>)
 8002340:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8002342:	4b03      	ldr	r3, [pc, #12]	@ (8002350 <LCD_E_Low+0x20>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff ff84 	bl	8002254 <LCD_sendI2C>
}
 800234c:	bf00      	nop
 800234e:	bd80      	pop	{r7, pc}
 8002350:	200003c0 	.word	0x200003c0

08002354 <LCD_sendNibbleData>:

void LCD_sendNibbleData(uint8_t data)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	71fb      	strb	r3, [r7, #7]
	LCD_E_High();
 800235e:	f7ff ffd5 	bl	800230c <LCD_E_High>
	lcdData = (data & 0xf0) | (lcdData & 0x0f);
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	f023 030f 	bic.w	r3, r3, #15
 800236a:	b25a      	sxtb	r2, r3
 800236c:	4b0a      	ldr	r3, [pc, #40]	@ (8002398 <LCD_sendNibbleData+0x44>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	b25b      	sxtb	r3, r3
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	b25b      	sxtb	r3, r3
 8002378:	4313      	orrs	r3, r2
 800237a:	b25b      	sxtb	r3, r3
 800237c:	b2da      	uxtb	r2, r3
 800237e:	4b06      	ldr	r3, [pc, #24]	@ (8002398 <LCD_sendNibbleData+0x44>)
 8002380:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8002382:	4b05      	ldr	r3, [pc, #20]	@ (8002398 <LCD_sendNibbleData+0x44>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff ff64 	bl	8002254 <LCD_sendI2C>
	LCD_E_Low();
 800238c:	f7ff ffd0 	bl	8002330 <LCD_E_Low>
}
 8002390:	bf00      	nop
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	200003c0 	.word	0x200003c0

0800239c <LCD_sendData>:

void LCD_sendData(uint8_t data)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	71fb      	strb	r3, [r7, #7]
	// High 4bit
	LCD_sendNibbleData(data);
 80023a6:	79fb      	ldrb	r3, [r7, #7]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff ffd3 	bl	8002354 <LCD_sendNibbleData>

	data = data << 4;
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	011b      	lsls	r3, r3, #4
 80023b2:	71fb      	strb	r3, [r7, #7]
	// Low 4bit
	LCD_sendNibbleData(data);
 80023b4:	79fb      	ldrb	r3, [r7, #7]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff ffcc 	bl	8002354 <LCD_sendNibbleData>
}
 80023bc:	bf00      	nop
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <LCD_writeCmdData>:

void LCD_writeCmdData(uint8_t data)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	71fb      	strb	r3, [r7, #7]
	LCD_writeMode();
 80023ce:	f7ff ff8b 	bl	80022e8 <LCD_writeMode>
	LCD_cmdMode();
 80023d2:	f7ff ff65 	bl	80022a0 <LCD_cmdMode>
	LCD_sendData(data);
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff ffdf 	bl	800239c <LCD_sendData>
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <LCD_writeCharData>:

void LCD_writeCharData(uint8_t data)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	4603      	mov	r3, r0
 80023ee:	71fb      	strb	r3, [r7, #7]
	LCD_writeMode();
 80023f0:	f7ff ff7a 	bl	80022e8 <LCD_writeMode>
	LCD_charMode();
 80023f4:	f7ff ff66 	bl	80022c4 <LCD_charMode>
	LCD_sendData(data);
 80023f8:	79fb      	ldrb	r3, [r7, #7]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff ffce 	bl	800239c <LCD_sendData>
}
 8002400:	bf00      	nop
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <LCD_writeString>:

void LCD_writeString(char *str)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
	for (int i=0; str[i]; i++) {
 8002410:	2300      	movs	r3, #0
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	e009      	b.n	800242a <LCD_writeString+0x22>
		LCD_writeCharData(str[i]);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	4413      	add	r3, r2
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff ffe1 	bl	80023e6 <LCD_writeCharData>
	for (int i=0; str[i]; i++) {
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	3301      	adds	r3, #1
 8002428:	60fb      	str	r3, [r7, #12]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	4413      	add	r3, r2
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1ef      	bne.n	8002416 <LCD_writeString+0xe>
	}
}
 8002436:	bf00      	nop
 8002438:	bf00      	nop
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	460a      	mov	r2, r1
 800244a:	71fb      	strb	r3, [r7, #7]
 800244c:	4613      	mov	r3, r2
 800244e:	71bb      	strb	r3, [r7, #6]
	col %= 16;
 8002450:	79bb      	ldrb	r3, [r7, #6]
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	71bb      	strb	r3, [r7, #6]
	row %= 2;
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	71fb      	strb	r3, [r7, #7]

	uint8_t lcdRegAddr = (0x40 * row) +col;
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	019b      	lsls	r3, r3, #6
 8002464:	b2da      	uxtb	r2, r3
 8002466:	79bb      	ldrb	r3, [r7, #6]
 8002468:	4413      	add	r3, r2
 800246a:	73fb      	strb	r3, [r7, #15]
	uint8_t command = 0x80 + lcdRegAddr;
 800246c:	7bfb      	ldrb	r3, [r7, #15]
 800246e:	3b80      	subs	r3, #128	@ 0x80
 8002470:	73bb      	strb	r3, [r7, #14]
	LCD_writeCmdData(command);
 8002472:	7bbb      	ldrb	r3, [r7, #14]
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff ffa5 	bl	80023c4 <LCD_writeCmdData>
}
 800247a:	bf00      	nop
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <LCD_writeStringXY>:

void LCD_writeStringXY(uint8_t row, uint8_t col, char *str)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	4603      	mov	r3, r0
 800248a:	603a      	str	r2, [r7, #0]
 800248c:	71fb      	strb	r3, [r7, #7]
 800248e:	460b      	mov	r3, r1
 8002490:	71bb      	strb	r3, [r7, #6]
	LCD_gotoXY(row, col);
 8002492:	79ba      	ldrb	r2, [r7, #6]
 8002494:	79fb      	ldrb	r3, [r7, #7]
 8002496:	4611      	mov	r1, r2
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff ffd1 	bl	8002440 <LCD_gotoXY>
	LCD_writeString(str);
 800249e:	6838      	ldr	r0, [r7, #0]
 80024a0:	f7ff ffb2 	bl	8002408 <LCD_writeString>
}
 80024a4:	bf00      	nop
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <LCD_clear>:

void LCD_clear()
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
    LCD_writeCmdData(LCD_DISP_CLEAR);
 80024b0:	2001      	movs	r0, #1
 80024b2:	f7ff ff87 	bl	80023c4 <LCD_writeCmdData>
    HAL_Delay(2);
 80024b6:	2002      	movs	r0, #2
 80024b8:	f000 f94c 	bl	8002754 <HAL_Delay>
}
 80024bc:	bf00      	nop
 80024be:	bd80      	pop	{r7, pc}

080024c0 <LedBar_Write>:
		{GPIOC, GPIO_PIN_2},
		{GPIOC, GPIO_PIN_3}
};

void LedBar_Write(uint8_t data)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	71fb      	strb	r3, [r7, #7]
	for (int i=0; i<8; i++) {
 80024ca:	2300      	movs	r3, #0
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	e027      	b.n	8002520 <LedBar_Write+0x60>
		if ((data & (1<<i)) == 0) {
 80024d0:	79fa      	ldrb	r2, [r7, #7]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	fa42 f303 	asr.w	r3, r2, r3
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10e      	bne.n	80024fe <LedBar_Write+0x3e>
			HAL_GPIO_WritePin(ledBar[i].GPIOx, ledBar[i].pinNum, RESET);
 80024e0:	4a13      	ldr	r2, [pc, #76]	@ (8002530 <LedBar_Write+0x70>)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80024e8:	4a11      	ldr	r2, [pc, #68]	@ (8002530 <LedBar_Write+0x70>)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	4413      	add	r3, r2
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	2200      	movs	r2, #0
 80024f6:	4619      	mov	r1, r3
 80024f8:	f000 fc90 	bl	8002e1c <HAL_GPIO_WritePin>
 80024fc:	e00d      	b.n	800251a <LedBar_Write+0x5a>
		}
		else {
			HAL_GPIO_WritePin(ledBar[i].GPIOx, ledBar[i].pinNum, SET);
 80024fe:	4a0c      	ldr	r2, [pc, #48]	@ (8002530 <LedBar_Write+0x70>)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002506:	4a0a      	ldr	r2, [pc, #40]	@ (8002530 <LedBar_Write+0x70>)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	4413      	add	r3, r2
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	b29b      	uxth	r3, r3
 8002512:	2201      	movs	r2, #1
 8002514:	4619      	mov	r1, r3
 8002516:	f000 fc81 	bl	8002e1c <HAL_GPIO_WritePin>
	for (int i=0; i<8; i++) {
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	3301      	adds	r3, #1
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2b07      	cmp	r3, #7
 8002524:	ddd4      	ble.n	80024d0 <LedBar_Write+0x10>
		}
	}
}
 8002526:	bf00      	nop
 8002528:	bf00      	nop
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	2000006c 	.word	0x2000006c

08002534 <delay_us>:
#include "UltraSonic.h"
#define FILTER_SIZE 5


void delay_us(uint16_t us)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 800253e:	4b0a      	ldr	r3, [pc, #40]	@ (8002568 <delay_us+0x34>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2200      	movs	r2, #0
 8002544:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start(&htim4);
 8002546:	4808      	ldr	r0, [pc, #32]	@ (8002568 <delay_us+0x34>)
 8002548:	f001 fe08 	bl	800415c <HAL_TIM_Base_Start>

	while(__HAL_TIM_GET_COUNTER(&htim4) < us);
 800254c:	bf00      	nop
 800254e:	4b06      	ldr	r3, [pc, #24]	@ (8002568 <delay_us+0x34>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002554:	88fb      	ldrh	r3, [r7, #6]
 8002556:	429a      	cmp	r2, r3
 8002558:	d3f9      	bcc.n	800254e <delay_us+0x1a>
	HAL_TIM_Base_Stop(&htim4);
 800255a:	4803      	ldr	r0, [pc, #12]	@ (8002568 <delay_us+0x34>)
 800255c:	f001 fe58 	bl	8004210 <HAL_TIM_Base_Stop>
}
 8002560:	bf00      	nop
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20000250 	.word	0x20000250

0800256c <UltraSonic_Init>:

void UltraSonic_Init(UltraSonic_TypeDef *hultra, GPIO_TypeDef *Trig_GPIOx, uint16_t Trig_pinNum,  GPIO_TypeDef *Echo_GPIOx, uint16_t Echo_pinNum) {
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	603b      	str	r3, [r7, #0]
 8002578:	4613      	mov	r3, r2
 800257a:	80fb      	strh	r3, [r7, #6]
	hultra->Trig_GPIOx = Trig_GPIOx;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	601a      	str	r2, [r3, #0]
	hultra->Trig_pinNum = Trig_pinNum;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	88fa      	ldrh	r2, [r7, #6]
 8002586:	809a      	strh	r2, [r3, #4]
	hultra->Echo_GPIOx = Echo_GPIOx;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	609a      	str	r2, [r3, #8]
	hultra->Echo_pinNum = Echo_pinNum;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8b3a      	ldrh	r2, [r7, #24]
 8002592:	819a      	strh	r2, [r3, #12]
}
 8002594:	bf00      	nop
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <UltraSonic_GetDistance>:

int UltraSonic_GetDistance (UltraSonic_TypeDef *hultra)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
	uint32_t count = 0;
 80025a8:	2300      	movs	r3, #0
 80025aa:	613b      	str	r3, [r7, #16]
	int distance = 0;
 80025ac:	2300      	movs	r3, #0
 80025ae:	60fb      	str	r3, [r7, #12]

	// trig
	HAL_GPIO_WritePin(hultra->Trig_GPIOx, hultra->Trig_pinNum, GPIO_PIN_SET);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	889b      	ldrh	r3, [r3, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	4619      	mov	r1, r3
 80025bc:	f000 fc2e 	bl	8002e1c <HAL_GPIO_WritePin>
	delay_us(10);
 80025c0:	200a      	movs	r0, #10
 80025c2:	f7ff ffb7 	bl	8002534 <delay_us>
	HAL_GPIO_WritePin(hultra->Trig_GPIOx, hultra->Trig_pinNum, GPIO_PIN_RESET);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6818      	ldr	r0, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	889b      	ldrh	r3, [r3, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	4619      	mov	r1, r3
 80025d2:	f000 fc23 	bl	8002e1c <HAL_GPIO_WritePin>

	// wait echo -> high
	uint32_t timeout = 30000;
 80025d6:	f247 5330 	movw	r3, #30000	@ 0x7530
 80025da:	617b      	str	r3, [r7, #20]
	while(!(HAL_GPIO_ReadPin(hultra->Echo_GPIOx, hultra->Echo_pinNum)))
 80025dc:	e008      	b.n	80025f0 <UltraSonic_GetDistance+0x50>
	{
		if (--timeout == 0)
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	3b01      	subs	r3, #1
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d102      	bne.n	80025f0 <UltraSonic_GetDistance+0x50>
			return -1;
 80025ea:	f04f 33ff 	mov.w	r3, #4294967295
 80025ee:	e037      	b.n	8002660 <UltraSonic_GetDistance+0xc0>
	while(!(HAL_GPIO_ReadPin(hultra->Echo_GPIOx, hultra->Echo_pinNum)))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	899b      	ldrh	r3, [r3, #12]
 80025f8:	4619      	mov	r1, r3
 80025fa:	4610      	mov	r0, r2
 80025fc:	f000 fbf6 	bl	8002dec <HAL_GPIO_ReadPin>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0eb      	beq.n	80025de <UltraSonic_GetDistance+0x3e>
	}

	// timer start
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8002606:	4b18      	ldr	r3, [pc, #96]	@ (8002668 <UltraSonic_GetDistance+0xc8>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2200      	movs	r2, #0
 800260c:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start(&htim4);
 800260e:	4816      	ldr	r0, [pc, #88]	@ (8002668 <UltraSonic_GetDistance+0xc8>)
 8002610:	f001 fda4 	bl	800415c <HAL_TIM_Base_Start>

	// wait echo -> low
	timeout = 30000;
 8002614:	f247 5330 	movw	r3, #30000	@ 0x7530
 8002618:	617b      	str	r3, [r7, #20]
	while(HAL_GPIO_ReadPin(hultra->Echo_GPIOx, hultra->Echo_pinNum))
 800261a:	e008      	b.n	800262e <UltraSonic_GetDistance+0x8e>
	{
		if (--timeout == 0)
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	3b01      	subs	r3, #1
 8002620:	617b      	str	r3, [r7, #20]
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d102      	bne.n	800262e <UltraSonic_GetDistance+0x8e>
			return -1;
 8002628:	f04f 33ff 	mov.w	r3, #4294967295
 800262c:	e018      	b.n	8002660 <UltraSonic_GetDistance+0xc0>
	while(HAL_GPIO_ReadPin(hultra->Echo_GPIOx, hultra->Echo_pinNum))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	899b      	ldrh	r3, [r3, #12]
 8002636:	4619      	mov	r1, r3
 8002638:	4610      	mov	r0, r2
 800263a:	f000 fbd7 	bl	8002dec <HAL_GPIO_ReadPin>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1eb      	bne.n	800261c <UltraSonic_GetDistance+0x7c>
	}

	// timer stop
	HAL_TIM_Base_Stop(&htim4);
 8002644:	4808      	ldr	r0, [pc, #32]	@ (8002668 <UltraSonic_GetDistance+0xc8>)
 8002646:	f001 fde3 	bl	8004210 <HAL_TIM_Base_Stop>
	count = __HAL_TIM_GET_COUNTER(&htim4);
 800264a:	4b07      	ldr	r3, [pc, #28]	@ (8002668 <UltraSonic_GetDistance+0xc8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002650:	613b      	str	r3, [r7, #16]

	distance = count / 58;
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4a05      	ldr	r2, [pc, #20]	@ (800266c <UltraSonic_GetDistance+0xcc>)
 8002656:	fba2 2303 	umull	r2, r3, r2, r3
 800265a:	095b      	lsrs	r3, r3, #5
 800265c:	60fb      	str	r3, [r7, #12]

	return distance;
 800265e:	68fb      	ldr	r3, [r7, #12]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	20000250 	.word	0x20000250
 800266c:	8d3dcb09 	.word	0x8d3dcb09

08002670 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002674:	4b0e      	ldr	r3, [pc, #56]	@ (80026b0 <HAL_Init+0x40>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a0d      	ldr	r2, [pc, #52]	@ (80026b0 <HAL_Init+0x40>)
 800267a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800267e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002680:	4b0b      	ldr	r3, [pc, #44]	@ (80026b0 <HAL_Init+0x40>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a0a      	ldr	r2, [pc, #40]	@ (80026b0 <HAL_Init+0x40>)
 8002686:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800268a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800268c:	4b08      	ldr	r3, [pc, #32]	@ (80026b0 <HAL_Init+0x40>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a07      	ldr	r2, [pc, #28]	@ (80026b0 <HAL_Init+0x40>)
 8002692:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002696:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002698:	2003      	movs	r0, #3
 800269a:	f000 f94f 	bl	800293c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800269e:	200f      	movs	r0, #15
 80026a0:	f000 f808 	bl	80026b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026a4:	f7fe f92a 	bl	80008fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40023c00 	.word	0x40023c00

080026b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026bc:	4b12      	ldr	r3, [pc, #72]	@ (8002708 <HAL_InitTick+0x54>)
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	4b12      	ldr	r3, [pc, #72]	@ (800270c <HAL_InitTick+0x58>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	4619      	mov	r1, r3
 80026c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80026ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 f967 	bl	80029a6 <HAL_SYSTICK_Config>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e00e      	b.n	8002700 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b0f      	cmp	r3, #15
 80026e6:	d80a      	bhi.n	80026fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026e8:	2200      	movs	r2, #0
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	f04f 30ff 	mov.w	r0, #4294967295
 80026f0:	f000 f92f 	bl	8002952 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026f4:	4a06      	ldr	r2, [pc, #24]	@ (8002710 <HAL_InitTick+0x5c>)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
 80026fc:	e000      	b.n	8002700 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
}
 8002700:	4618      	mov	r0, r3
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	20000000 	.word	0x20000000
 800270c:	200000b0 	.word	0x200000b0
 8002710:	200000ac 	.word	0x200000ac

08002714 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002718:	4b06      	ldr	r3, [pc, #24]	@ (8002734 <HAL_IncTick+0x20>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	461a      	mov	r2, r3
 800271e:	4b06      	ldr	r3, [pc, #24]	@ (8002738 <HAL_IncTick+0x24>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4413      	add	r3, r2
 8002724:	4a04      	ldr	r2, [pc, #16]	@ (8002738 <HAL_IncTick+0x24>)
 8002726:	6013      	str	r3, [r2, #0]
}
 8002728:	bf00      	nop
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	200000b0 	.word	0x200000b0
 8002738:	200003c8 	.word	0x200003c8

0800273c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  return uwTick;
 8002740:	4b03      	ldr	r3, [pc, #12]	@ (8002750 <HAL_GetTick+0x14>)
 8002742:	681b      	ldr	r3, [r3, #0]
}
 8002744:	4618      	mov	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	200003c8 	.word	0x200003c8

08002754 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800275c:	f7ff ffee 	bl	800273c <HAL_GetTick>
 8002760:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276c:	d005      	beq.n	800277a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800276e:	4b0a      	ldr	r3, [pc, #40]	@ (8002798 <HAL_Delay+0x44>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	461a      	mov	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	4413      	add	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800277a:	bf00      	nop
 800277c:	f7ff ffde 	bl	800273c <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	429a      	cmp	r2, r3
 800278a:	d8f7      	bhi.n	800277c <HAL_Delay+0x28>
  {
  }
}
 800278c:	bf00      	nop
 800278e:	bf00      	nop
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	200000b0 	.word	0x200000b0

0800279c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027ac:	4b0c      	ldr	r3, [pc, #48]	@ (80027e0 <__NVIC_SetPriorityGrouping+0x44>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027b8:	4013      	ands	r3, r2
 80027ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ce:	4a04      	ldr	r2, [pc, #16]	@ (80027e0 <__NVIC_SetPriorityGrouping+0x44>)
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	60d3      	str	r3, [r2, #12]
}
 80027d4:	bf00      	nop
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	e000ed00 	.word	0xe000ed00

080027e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027e8:	4b04      	ldr	r3, [pc, #16]	@ (80027fc <__NVIC_GetPriorityGrouping+0x18>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	0a1b      	lsrs	r3, r3, #8
 80027ee:	f003 0307 	and.w	r3, r3, #7
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	e000ed00 	.word	0xe000ed00

08002800 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800280a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280e:	2b00      	cmp	r3, #0
 8002810:	db0b      	blt.n	800282a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	f003 021f 	and.w	r2, r3, #31
 8002818:	4907      	ldr	r1, [pc, #28]	@ (8002838 <__NVIC_EnableIRQ+0x38>)
 800281a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281e:	095b      	lsrs	r3, r3, #5
 8002820:	2001      	movs	r0, #1
 8002822:	fa00 f202 	lsl.w	r2, r0, r2
 8002826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	e000e100 	.word	0xe000e100

0800283c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	4603      	mov	r3, r0
 8002844:	6039      	str	r1, [r7, #0]
 8002846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284c:	2b00      	cmp	r3, #0
 800284e:	db0a      	blt.n	8002866 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	b2da      	uxtb	r2, r3
 8002854:	490c      	ldr	r1, [pc, #48]	@ (8002888 <__NVIC_SetPriority+0x4c>)
 8002856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285a:	0112      	lsls	r2, r2, #4
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	440b      	add	r3, r1
 8002860:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002864:	e00a      	b.n	800287c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	b2da      	uxtb	r2, r3
 800286a:	4908      	ldr	r1, [pc, #32]	@ (800288c <__NVIC_SetPriority+0x50>)
 800286c:	79fb      	ldrb	r3, [r7, #7]
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	3b04      	subs	r3, #4
 8002874:	0112      	lsls	r2, r2, #4
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	440b      	add	r3, r1
 800287a:	761a      	strb	r2, [r3, #24]
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	e000e100 	.word	0xe000e100
 800288c:	e000ed00 	.word	0xe000ed00

08002890 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002890:	b480      	push	{r7}
 8002892:	b089      	sub	sp, #36	@ 0x24
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f1c3 0307 	rsb	r3, r3, #7
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	bf28      	it	cs
 80028ae:	2304      	movcs	r3, #4
 80028b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	3304      	adds	r3, #4
 80028b6:	2b06      	cmp	r3, #6
 80028b8:	d902      	bls.n	80028c0 <NVIC_EncodePriority+0x30>
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	3b03      	subs	r3, #3
 80028be:	e000      	b.n	80028c2 <NVIC_EncodePriority+0x32>
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c4:	f04f 32ff 	mov.w	r2, #4294967295
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	43da      	mvns	r2, r3
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	401a      	ands	r2, r3
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028d8:	f04f 31ff 	mov.w	r1, #4294967295
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	fa01 f303 	lsl.w	r3, r1, r3
 80028e2:	43d9      	mvns	r1, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e8:	4313      	orrs	r3, r2
         );
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3724      	adds	r7, #36	@ 0x24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
	...

080028f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3b01      	subs	r3, #1
 8002904:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002908:	d301      	bcc.n	800290e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800290a:	2301      	movs	r3, #1
 800290c:	e00f      	b.n	800292e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800290e:	4a0a      	ldr	r2, [pc, #40]	@ (8002938 <SysTick_Config+0x40>)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3b01      	subs	r3, #1
 8002914:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002916:	210f      	movs	r1, #15
 8002918:	f04f 30ff 	mov.w	r0, #4294967295
 800291c:	f7ff ff8e 	bl	800283c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002920:	4b05      	ldr	r3, [pc, #20]	@ (8002938 <SysTick_Config+0x40>)
 8002922:	2200      	movs	r2, #0
 8002924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002926:	4b04      	ldr	r3, [pc, #16]	@ (8002938 <SysTick_Config+0x40>)
 8002928:	2207      	movs	r2, #7
 800292a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	e000e010 	.word	0xe000e010

0800293c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f7ff ff29 	bl	800279c <__NVIC_SetPriorityGrouping>
}
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002952:	b580      	push	{r7, lr}
 8002954:	b086      	sub	sp, #24
 8002956:	af00      	add	r7, sp, #0
 8002958:	4603      	mov	r3, r0
 800295a:	60b9      	str	r1, [r7, #8]
 800295c:	607a      	str	r2, [r7, #4]
 800295e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002960:	2300      	movs	r3, #0
 8002962:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002964:	f7ff ff3e 	bl	80027e4 <__NVIC_GetPriorityGrouping>
 8002968:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	68b9      	ldr	r1, [r7, #8]
 800296e:	6978      	ldr	r0, [r7, #20]
 8002970:	f7ff ff8e 	bl	8002890 <NVIC_EncodePriority>
 8002974:	4602      	mov	r2, r0
 8002976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800297a:	4611      	mov	r1, r2
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff ff5d 	bl	800283c <__NVIC_SetPriority>
}
 8002982:	bf00      	nop
 8002984:	3718      	adds	r7, #24
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b082      	sub	sp, #8
 800298e:	af00      	add	r7, sp, #0
 8002990:	4603      	mov	r3, r0
 8002992:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff ff31 	bl	8002800 <__NVIC_EnableIRQ>
}
 800299e:	bf00      	nop
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7ff ffa2 	bl	80028f8 <SysTick_Config>
 80029b4:	4603      	mov	r3, r0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b084      	sub	sp, #16
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029cc:	f7ff feb6 	bl	800273c <HAL_GetTick>
 80029d0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d008      	beq.n	80029f0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2280      	movs	r2, #128	@ 0x80
 80029e2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e052      	b.n	8002a96 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 0216 	bic.w	r2, r2, #22
 80029fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	695a      	ldr	r2, [r3, #20]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a0e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d103      	bne.n	8002a20 <HAL_DMA_Abort+0x62>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d007      	beq.n	8002a30 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0208 	bic.w	r2, r2, #8
 8002a2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0201 	bic.w	r2, r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a40:	e013      	b.n	8002a6a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a42:	f7ff fe7b 	bl	800273c <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b05      	cmp	r3, #5
 8002a4e:	d90c      	bls.n	8002a6a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2220      	movs	r2, #32
 8002a54:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2203      	movs	r2, #3
 8002a5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e015      	b.n	8002a96 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1e4      	bne.n	8002a42 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a7c:	223f      	movs	r2, #63	@ 0x3f
 8002a7e:	409a      	lsls	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d004      	beq.n	8002abc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2280      	movs	r2, #128	@ 0x80
 8002ab6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e00c      	b.n	8002ad6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2205      	movs	r2, #5
 8002ac0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0201 	bic.w	r2, r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
	...

08002ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b089      	sub	sp, #36	@ 0x24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002afa:	2300      	movs	r3, #0
 8002afc:	61fb      	str	r3, [r7, #28]
 8002afe:	e159      	b.n	8002db4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b00:	2201      	movs	r2, #1
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	4013      	ands	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	f040 8148 	bne.w	8002dae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d005      	beq.n	8002b36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d130      	bne.n	8002b98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	2203      	movs	r2, #3
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	43db      	mvns	r3, r3
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	68da      	ldr	r2, [r3, #12]
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	43db      	mvns	r3, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	091b      	lsrs	r3, r3, #4
 8002b82:	f003 0201 	and.w	r2, r3, #1
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 0303 	and.w	r3, r3, #3
 8002ba0:	2b03      	cmp	r3, #3
 8002ba2:	d017      	beq.n	8002bd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	2203      	movs	r2, #3
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 0303 	and.w	r3, r3, #3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d123      	bne.n	8002c28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	08da      	lsrs	r2, r3, #3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3208      	adds	r2, #8
 8002be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	220f      	movs	r2, #15
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	4013      	ands	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	691a      	ldr	r2, [r3, #16]
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	08da      	lsrs	r2, r3, #3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	3208      	adds	r2, #8
 8002c22:	69b9      	ldr	r1, [r7, #24]
 8002c24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	2203      	movs	r2, #3
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 0203 	and.w	r2, r3, #3
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 80a2 	beq.w	8002dae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	4b57      	ldr	r3, [pc, #348]	@ (8002dcc <HAL_GPIO_Init+0x2e8>)
 8002c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c72:	4a56      	ldr	r2, [pc, #344]	@ (8002dcc <HAL_GPIO_Init+0x2e8>)
 8002c74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c78:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c7a:	4b54      	ldr	r3, [pc, #336]	@ (8002dcc <HAL_GPIO_Init+0x2e8>)
 8002c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c86:	4a52      	ldr	r2, [pc, #328]	@ (8002dd0 <HAL_GPIO_Init+0x2ec>)
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	089b      	lsrs	r3, r3, #2
 8002c8c:	3302      	adds	r3, #2
 8002c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f003 0303 	and.w	r3, r3, #3
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	220f      	movs	r2, #15
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a49      	ldr	r2, [pc, #292]	@ (8002dd4 <HAL_GPIO_Init+0x2f0>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d019      	beq.n	8002ce6 <HAL_GPIO_Init+0x202>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a48      	ldr	r2, [pc, #288]	@ (8002dd8 <HAL_GPIO_Init+0x2f4>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d013      	beq.n	8002ce2 <HAL_GPIO_Init+0x1fe>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a47      	ldr	r2, [pc, #284]	@ (8002ddc <HAL_GPIO_Init+0x2f8>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d00d      	beq.n	8002cde <HAL_GPIO_Init+0x1fa>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a46      	ldr	r2, [pc, #280]	@ (8002de0 <HAL_GPIO_Init+0x2fc>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d007      	beq.n	8002cda <HAL_GPIO_Init+0x1f6>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a45      	ldr	r2, [pc, #276]	@ (8002de4 <HAL_GPIO_Init+0x300>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d101      	bne.n	8002cd6 <HAL_GPIO_Init+0x1f2>
 8002cd2:	2304      	movs	r3, #4
 8002cd4:	e008      	b.n	8002ce8 <HAL_GPIO_Init+0x204>
 8002cd6:	2307      	movs	r3, #7
 8002cd8:	e006      	b.n	8002ce8 <HAL_GPIO_Init+0x204>
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e004      	b.n	8002ce8 <HAL_GPIO_Init+0x204>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e002      	b.n	8002ce8 <HAL_GPIO_Init+0x204>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e000      	b.n	8002ce8 <HAL_GPIO_Init+0x204>
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	69fa      	ldr	r2, [r7, #28]
 8002cea:	f002 0203 	and.w	r2, r2, #3
 8002cee:	0092      	lsls	r2, r2, #2
 8002cf0:	4093      	lsls	r3, r2
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cf8:	4935      	ldr	r1, [pc, #212]	@ (8002dd0 <HAL_GPIO_Init+0x2ec>)
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	089b      	lsrs	r3, r3, #2
 8002cfe:	3302      	adds	r3, #2
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d06:	4b38      	ldr	r3, [pc, #224]	@ (8002de8 <HAL_GPIO_Init+0x304>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4013      	ands	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d2a:	4a2f      	ldr	r2, [pc, #188]	@ (8002de8 <HAL_GPIO_Init+0x304>)
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d30:	4b2d      	ldr	r3, [pc, #180]	@ (8002de8 <HAL_GPIO_Init+0x304>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d54:	4a24      	ldr	r2, [pc, #144]	@ (8002de8 <HAL_GPIO_Init+0x304>)
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d5a:	4b23      	ldr	r3, [pc, #140]	@ (8002de8 <HAL_GPIO_Init+0x304>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	43db      	mvns	r3, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4013      	ands	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d7e:	4a1a      	ldr	r2, [pc, #104]	@ (8002de8 <HAL_GPIO_Init+0x304>)
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d84:	4b18      	ldr	r3, [pc, #96]	@ (8002de8 <HAL_GPIO_Init+0x304>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4013      	ands	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002da8:	4a0f      	ldr	r2, [pc, #60]	@ (8002de8 <HAL_GPIO_Init+0x304>)
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	3301      	adds	r3, #1
 8002db2:	61fb      	str	r3, [r7, #28]
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	2b0f      	cmp	r3, #15
 8002db8:	f67f aea2 	bls.w	8002b00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dbc:	bf00      	nop
 8002dbe:	bf00      	nop
 8002dc0:	3724      	adds	r7, #36	@ 0x24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	40013800 	.word	0x40013800
 8002dd4:	40020000 	.word	0x40020000
 8002dd8:	40020400 	.word	0x40020400
 8002ddc:	40020800 	.word	0x40020800
 8002de0:	40020c00 	.word	0x40020c00
 8002de4:	40021000 	.word	0x40021000
 8002de8:	40013c00 	.word	0x40013c00

08002dec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	460b      	mov	r3, r1
 8002df6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691a      	ldr	r2, [r3, #16]
 8002dfc:	887b      	ldrh	r3, [r7, #2]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d002      	beq.n	8002e0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e04:	2301      	movs	r3, #1
 8002e06:	73fb      	strb	r3, [r7, #15]
 8002e08:	e001      	b.n	8002e0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	460b      	mov	r3, r1
 8002e26:	807b      	strh	r3, [r7, #2]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e2c:	787b      	ldrb	r3, [r7, #1]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e32:	887a      	ldrh	r2, [r7, #2]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e38:	e003      	b.n	8002e42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e3a:	887b      	ldrh	r3, [r7, #2]
 8002e3c:	041a      	lsls	r2, r3, #16
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	619a      	str	r2, [r3, #24]
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
	...

08002e50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e12b      	b.n	80030ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d106      	bne.n	8002e7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7fd fc6e 	bl	8000758 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2224      	movs	r2, #36	@ 0x24
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 0201 	bic.w	r2, r2, #1
 8002e92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ea2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002eb2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002eb4:	f001 f8da 	bl	800406c <HAL_RCC_GetPCLK1Freq>
 8002eb8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	4a81      	ldr	r2, [pc, #516]	@ (80030c4 <HAL_I2C_Init+0x274>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d807      	bhi.n	8002ed4 <HAL_I2C_Init+0x84>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4a80      	ldr	r2, [pc, #512]	@ (80030c8 <HAL_I2C_Init+0x278>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	bf94      	ite	ls
 8002ecc:	2301      	movls	r3, #1
 8002ece:	2300      	movhi	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	e006      	b.n	8002ee2 <HAL_I2C_Init+0x92>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4a7d      	ldr	r2, [pc, #500]	@ (80030cc <HAL_I2C_Init+0x27c>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	bf94      	ite	ls
 8002edc:	2301      	movls	r3, #1
 8002ede:	2300      	movhi	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e0e7      	b.n	80030ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	4a78      	ldr	r2, [pc, #480]	@ (80030d0 <HAL_I2C_Init+0x280>)
 8002eee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef2:	0c9b      	lsrs	r3, r3, #18
 8002ef4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	4a6a      	ldr	r2, [pc, #424]	@ (80030c4 <HAL_I2C_Init+0x274>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d802      	bhi.n	8002f24 <HAL_I2C_Init+0xd4>
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	3301      	adds	r3, #1
 8002f22:	e009      	b.n	8002f38 <HAL_I2C_Init+0xe8>
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002f2a:	fb02 f303 	mul.w	r3, r2, r3
 8002f2e:	4a69      	ldr	r2, [pc, #420]	@ (80030d4 <HAL_I2C_Init+0x284>)
 8002f30:	fba2 2303 	umull	r2, r3, r2, r3
 8002f34:	099b      	lsrs	r3, r3, #6
 8002f36:	3301      	adds	r3, #1
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6812      	ldr	r2, [r2, #0]
 8002f3c:	430b      	orrs	r3, r1
 8002f3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002f4a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	495c      	ldr	r1, [pc, #368]	@ (80030c4 <HAL_I2C_Init+0x274>)
 8002f54:	428b      	cmp	r3, r1
 8002f56:	d819      	bhi.n	8002f8c <HAL_I2C_Init+0x13c>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	1e59      	subs	r1, r3, #1
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f66:	1c59      	adds	r1, r3, #1
 8002f68:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002f6c:	400b      	ands	r3, r1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00a      	beq.n	8002f88 <HAL_I2C_Init+0x138>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	1e59      	subs	r1, r3, #1
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f80:	3301      	adds	r3, #1
 8002f82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f86:	e051      	b.n	800302c <HAL_I2C_Init+0x1dc>
 8002f88:	2304      	movs	r3, #4
 8002f8a:	e04f      	b.n	800302c <HAL_I2C_Init+0x1dc>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d111      	bne.n	8002fb8 <HAL_I2C_Init+0x168>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	1e58      	subs	r0, r3, #1
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6859      	ldr	r1, [r3, #4]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	440b      	add	r3, r1
 8002fa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	bf0c      	ite	eq
 8002fb0:	2301      	moveq	r3, #1
 8002fb2:	2300      	movne	r3, #0
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	e012      	b.n	8002fde <HAL_I2C_Init+0x18e>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	1e58      	subs	r0, r3, #1
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6859      	ldr	r1, [r3, #4]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	0099      	lsls	r1, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fce:	3301      	adds	r3, #1
 8002fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	bf0c      	ite	eq
 8002fd8:	2301      	moveq	r3, #1
 8002fda:	2300      	movne	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <HAL_I2C_Init+0x196>
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e022      	b.n	800302c <HAL_I2C_Init+0x1dc>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10e      	bne.n	800300c <HAL_I2C_Init+0x1bc>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	1e58      	subs	r0, r3, #1
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6859      	ldr	r1, [r3, #4]
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	440b      	add	r3, r1
 8002ffc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003000:	3301      	adds	r3, #1
 8003002:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003006:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800300a:	e00f      	b.n	800302c <HAL_I2C_Init+0x1dc>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	1e58      	subs	r0, r3, #1
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6859      	ldr	r1, [r3, #4]
 8003014:	460b      	mov	r3, r1
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	0099      	lsls	r1, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003022:	3301      	adds	r3, #1
 8003024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003028:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	6809      	ldr	r1, [r1, #0]
 8003030:	4313      	orrs	r3, r2
 8003032:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69da      	ldr	r2, [r3, #28]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	430a      	orrs	r2, r1
 800304e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800305a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6911      	ldr	r1, [r2, #16]
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	68d2      	ldr	r2, [r2, #12]
 8003066:	4311      	orrs	r1, r2
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6812      	ldr	r2, [r2, #0]
 800306c:	430b      	orrs	r3, r1
 800306e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	695a      	ldr	r2, [r3, #20]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f042 0201 	orr.w	r2, r2, #1
 800309a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2220      	movs	r2, #32
 80030a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	000186a0 	.word	0x000186a0
 80030c8:	001e847f 	.word	0x001e847f
 80030cc:	003d08ff 	.word	0x003d08ff
 80030d0:	431bde83 	.word	0x431bde83
 80030d4:	10624dd3 	.word	0x10624dd3

080030d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b088      	sub	sp, #32
 80030dc:	af02      	add	r7, sp, #8
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	607a      	str	r2, [r7, #4]
 80030e2:	461a      	mov	r2, r3
 80030e4:	460b      	mov	r3, r1
 80030e6:	817b      	strh	r3, [r7, #10]
 80030e8:	4613      	mov	r3, r2
 80030ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030ec:	f7ff fb26 	bl	800273c <HAL_GetTick>
 80030f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b20      	cmp	r3, #32
 80030fc:	f040 80e0 	bne.w	80032c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	2319      	movs	r3, #25
 8003106:	2201      	movs	r2, #1
 8003108:	4970      	ldr	r1, [pc, #448]	@ (80032cc <HAL_I2C_Master_Transmit+0x1f4>)
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 f964 	bl	80033d8 <I2C_WaitOnFlagUntilTimeout>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003116:	2302      	movs	r3, #2
 8003118:	e0d3      	b.n	80032c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003120:	2b01      	cmp	r3, #1
 8003122:	d101      	bne.n	8003128 <HAL_I2C_Master_Transmit+0x50>
 8003124:	2302      	movs	r3, #2
 8003126:	e0cc      	b.n	80032c2 <HAL_I2C_Master_Transmit+0x1ea>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b01      	cmp	r3, #1
 800313c:	d007      	beq.n	800314e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f042 0201 	orr.w	r2, r2, #1
 800314c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800315c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2221      	movs	r2, #33	@ 0x21
 8003162:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2210      	movs	r2, #16
 800316a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	893a      	ldrh	r2, [r7, #8]
 800317e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003184:	b29a      	uxth	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	4a50      	ldr	r2, [pc, #320]	@ (80032d0 <HAL_I2C_Master_Transmit+0x1f8>)
 800318e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003190:	8979      	ldrh	r1, [r7, #10]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	6a3a      	ldr	r2, [r7, #32]
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f000 f89c 	bl	80032d4 <I2C_MasterRequestWrite>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e08d      	b.n	80032c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031a6:	2300      	movs	r3, #0
 80031a8:	613b      	str	r3, [r7, #16]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	613b      	str	r3, [r7, #16]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	613b      	str	r3, [r7, #16]
 80031ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80031bc:	e066      	b.n	800328c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	6a39      	ldr	r1, [r7, #32]
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 fa22 	bl	800360c <I2C_WaitOnTXEFlagUntilTimeout>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00d      	beq.n	80031ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d107      	bne.n	80031e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e06b      	b.n	80032c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ee:	781a      	ldrb	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fa:	1c5a      	adds	r2, r3, #1
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003204:	b29b      	uxth	r3, r3
 8003206:	3b01      	subs	r3, #1
 8003208:	b29a      	uxth	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003212:	3b01      	subs	r3, #1
 8003214:	b29a      	uxth	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	f003 0304 	and.w	r3, r3, #4
 8003224:	2b04      	cmp	r3, #4
 8003226:	d11b      	bne.n	8003260 <HAL_I2C_Master_Transmit+0x188>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800322c:	2b00      	cmp	r3, #0
 800322e:	d017      	beq.n	8003260 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003234:	781a      	ldrb	r2, [r3, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003240:	1c5a      	adds	r2, r3, #1
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800324a:	b29b      	uxth	r3, r3
 800324c:	3b01      	subs	r3, #1
 800324e:	b29a      	uxth	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003258:	3b01      	subs	r3, #1
 800325a:	b29a      	uxth	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	6a39      	ldr	r1, [r7, #32]
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f000 fa19 	bl	800369c <I2C_WaitOnBTFFlagUntilTimeout>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00d      	beq.n	800328c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003274:	2b04      	cmp	r3, #4
 8003276:	d107      	bne.n	8003288 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003286:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e01a      	b.n	80032c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003290:	2b00      	cmp	r3, #0
 8003292:	d194      	bne.n	80031be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80032bc:	2300      	movs	r3, #0
 80032be:	e000      	b.n	80032c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80032c0:	2302      	movs	r3, #2
  }
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3718      	adds	r7, #24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	00100002 	.word	0x00100002
 80032d0:	ffff0000 	.word	0xffff0000

080032d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b088      	sub	sp, #32
 80032d8:	af02      	add	r7, sp, #8
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	607a      	str	r2, [r7, #4]
 80032de:	603b      	str	r3, [r7, #0]
 80032e0:	460b      	mov	r3, r1
 80032e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d006      	beq.n	80032fe <I2C_MasterRequestWrite+0x2a>
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d003      	beq.n	80032fe <I2C_MasterRequestWrite+0x2a>
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80032fc:	d108      	bne.n	8003310 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	e00b      	b.n	8003328 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003314:	2b12      	cmp	r3, #18
 8003316:	d107      	bne.n	8003328 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003326:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f000 f84f 	bl	80033d8 <I2C_WaitOnFlagUntilTimeout>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00d      	beq.n	800335c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800334a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800334e:	d103      	bne.n	8003358 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003356:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e035      	b.n	80033c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003364:	d108      	bne.n	8003378 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003366:	897b      	ldrh	r3, [r7, #10]
 8003368:	b2db      	uxtb	r3, r3
 800336a:	461a      	mov	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003374:	611a      	str	r2, [r3, #16]
 8003376:	e01b      	b.n	80033b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003378:	897b      	ldrh	r3, [r7, #10]
 800337a:	11db      	asrs	r3, r3, #7
 800337c:	b2db      	uxtb	r3, r3
 800337e:	f003 0306 	and.w	r3, r3, #6
 8003382:	b2db      	uxtb	r3, r3
 8003384:	f063 030f 	orn	r3, r3, #15
 8003388:	b2da      	uxtb	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	490e      	ldr	r1, [pc, #56]	@ (80033d0 <I2C_MasterRequestWrite+0xfc>)
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 f898 	bl	80034cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e010      	b.n	80033c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80033a6:	897b      	ldrh	r3, [r7, #10]
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	4907      	ldr	r1, [pc, #28]	@ (80033d4 <I2C_MasterRequestWrite+0x100>)
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 f888 	bl	80034cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	00010008 	.word	0x00010008
 80033d4:	00010002 	.word	0x00010002

080033d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	603b      	str	r3, [r7, #0]
 80033e4:	4613      	mov	r3, r2
 80033e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033e8:	e048      	b.n	800347c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f0:	d044      	beq.n	800347c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f2:	f7ff f9a3 	bl	800273c <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d302      	bcc.n	8003408 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d139      	bne.n	800347c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	0c1b      	lsrs	r3, r3, #16
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b01      	cmp	r3, #1
 8003410:	d10d      	bne.n	800342e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	43da      	mvns	r2, r3
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	4013      	ands	r3, r2
 800341e:	b29b      	uxth	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	bf0c      	ite	eq
 8003424:	2301      	moveq	r3, #1
 8003426:	2300      	movne	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	461a      	mov	r2, r3
 800342c:	e00c      	b.n	8003448 <I2C_WaitOnFlagUntilTimeout+0x70>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	43da      	mvns	r2, r3
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	4013      	ands	r3, r2
 800343a:	b29b      	uxth	r3, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	bf0c      	ite	eq
 8003440:	2301      	moveq	r3, #1
 8003442:	2300      	movne	r3, #0
 8003444:	b2db      	uxtb	r3, r3
 8003446:	461a      	mov	r2, r3
 8003448:	79fb      	ldrb	r3, [r7, #7]
 800344a:	429a      	cmp	r2, r3
 800344c:	d116      	bne.n	800347c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2220      	movs	r2, #32
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003468:	f043 0220 	orr.w	r2, r3, #32
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e023      	b.n	80034c4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	0c1b      	lsrs	r3, r3, #16
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b01      	cmp	r3, #1
 8003484:	d10d      	bne.n	80034a2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	43da      	mvns	r2, r3
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	4013      	ands	r3, r2
 8003492:	b29b      	uxth	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	bf0c      	ite	eq
 8003498:	2301      	moveq	r3, #1
 800349a:	2300      	movne	r3, #0
 800349c:	b2db      	uxtb	r3, r3
 800349e:	461a      	mov	r2, r3
 80034a0:	e00c      	b.n	80034bc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	43da      	mvns	r2, r3
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	4013      	ands	r3, r2
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	bf0c      	ite	eq
 80034b4:	2301      	moveq	r3, #1
 80034b6:	2300      	movne	r3, #0
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	461a      	mov	r2, r3
 80034bc:	79fb      	ldrb	r3, [r7, #7]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d093      	beq.n	80033ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
 80034d8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034da:	e071      	b.n	80035c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034ea:	d123      	bne.n	8003534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034fa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003504:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003520:	f043 0204 	orr.w	r2, r3, #4
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e067      	b.n	8003604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353a:	d041      	beq.n	80035c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800353c:	f7ff f8fe 	bl	800273c <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	429a      	cmp	r2, r3
 800354a:	d302      	bcc.n	8003552 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d136      	bne.n	80035c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	0c1b      	lsrs	r3, r3, #16
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b01      	cmp	r3, #1
 800355a:	d10c      	bne.n	8003576 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	43da      	mvns	r2, r3
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	4013      	ands	r3, r2
 8003568:	b29b      	uxth	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	bf14      	ite	ne
 800356e:	2301      	movne	r3, #1
 8003570:	2300      	moveq	r3, #0
 8003572:	b2db      	uxtb	r3, r3
 8003574:	e00b      	b.n	800358e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	43da      	mvns	r2, r3
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	4013      	ands	r3, r2
 8003582:	b29b      	uxth	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	bf14      	ite	ne
 8003588:	2301      	movne	r3, #1
 800358a:	2300      	moveq	r3, #0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d016      	beq.n	80035c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2220      	movs	r2, #32
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ac:	f043 0220 	orr.w	r2, r3, #32
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e021      	b.n	8003604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	0c1b      	lsrs	r3, r3, #16
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d10c      	bne.n	80035e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	43da      	mvns	r2, r3
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	4013      	ands	r3, r2
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	bf14      	ite	ne
 80035dc:	2301      	movne	r3, #1
 80035de:	2300      	moveq	r3, #0
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	e00b      	b.n	80035fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	43da      	mvns	r2, r3
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	4013      	ands	r3, r2
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	bf14      	ite	ne
 80035f6:	2301      	movne	r3, #1
 80035f8:	2300      	moveq	r3, #0
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f47f af6d 	bne.w	80034dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003618:	e034      	b.n	8003684 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 f886 	bl	800372c <I2C_IsAcknowledgeFailed>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e034      	b.n	8003694 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003630:	d028      	beq.n	8003684 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003632:	f7ff f883 	bl	800273c <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	429a      	cmp	r2, r3
 8003640:	d302      	bcc.n	8003648 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d11d      	bne.n	8003684 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003652:	2b80      	cmp	r3, #128	@ 0x80
 8003654:	d016      	beq.n	8003684 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2220      	movs	r2, #32
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003670:	f043 0220 	orr.w	r2, r3, #32
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e007      	b.n	8003694 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800368e:	2b80      	cmp	r3, #128	@ 0x80
 8003690:	d1c3      	bne.n	800361a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036a8:	e034      	b.n	8003714 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 f83e 	bl	800372c <I2C_IsAcknowledgeFailed>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e034      	b.n	8003724 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c0:	d028      	beq.n	8003714 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c2:	f7ff f83b 	bl	800273c <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d302      	bcc.n	80036d8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d11d      	bne.n	8003714 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	f003 0304 	and.w	r3, r3, #4
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	d016      	beq.n	8003714 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2220      	movs	r2, #32
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003700:	f043 0220 	orr.w	r2, r3, #32
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e007      	b.n	8003724 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	f003 0304 	and.w	r3, r3, #4
 800371e:	2b04      	cmp	r3, #4
 8003720:	d1c3      	bne.n	80036aa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800373e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003742:	d11b      	bne.n	800377c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800374c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2220      	movs	r2, #32
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003768:	f043 0204 	orr.w	r2, r3, #4
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e000      	b.n	800377e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
	...

0800378c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e267      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d075      	beq.n	8003896 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80037aa:	4b88      	ldr	r3, [pc, #544]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 030c 	and.w	r3, r3, #12
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d00c      	beq.n	80037d0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037b6:	4b85      	ldr	r3, [pc, #532]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80037be:	2b08      	cmp	r3, #8
 80037c0:	d112      	bne.n	80037e8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037c2:	4b82      	ldr	r3, [pc, #520]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037ce:	d10b      	bne.n	80037e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d0:	4b7e      	ldr	r3, [pc, #504]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d05b      	beq.n	8003894 <HAL_RCC_OscConfig+0x108>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d157      	bne.n	8003894 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e242      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037f0:	d106      	bne.n	8003800 <HAL_RCC_OscConfig+0x74>
 80037f2:	4b76      	ldr	r3, [pc, #472]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a75      	ldr	r2, [pc, #468]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 80037f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037fc:	6013      	str	r3, [r2, #0]
 80037fe:	e01d      	b.n	800383c <HAL_RCC_OscConfig+0xb0>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003808:	d10c      	bne.n	8003824 <HAL_RCC_OscConfig+0x98>
 800380a:	4b70      	ldr	r3, [pc, #448]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a6f      	ldr	r2, [pc, #444]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 8003810:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003814:	6013      	str	r3, [r2, #0]
 8003816:	4b6d      	ldr	r3, [pc, #436]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a6c      	ldr	r2, [pc, #432]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 800381c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003820:	6013      	str	r3, [r2, #0]
 8003822:	e00b      	b.n	800383c <HAL_RCC_OscConfig+0xb0>
 8003824:	4b69      	ldr	r3, [pc, #420]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a68      	ldr	r2, [pc, #416]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 800382a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800382e:	6013      	str	r3, [r2, #0]
 8003830:	4b66      	ldr	r3, [pc, #408]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a65      	ldr	r2, [pc, #404]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 8003836:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800383a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d013      	beq.n	800386c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003844:	f7fe ff7a 	bl	800273c <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800384c:	f7fe ff76 	bl	800273c <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b64      	cmp	r3, #100	@ 0x64
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e207      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800385e:	4b5b      	ldr	r3, [pc, #364]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0f0      	beq.n	800384c <HAL_RCC_OscConfig+0xc0>
 800386a:	e014      	b.n	8003896 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386c:	f7fe ff66 	bl	800273c <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003874:	f7fe ff62 	bl	800273c <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b64      	cmp	r3, #100	@ 0x64
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e1f3      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003886:	4b51      	ldr	r3, [pc, #324]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1f0      	bne.n	8003874 <HAL_RCC_OscConfig+0xe8>
 8003892:	e000      	b.n	8003896 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d063      	beq.n	800396a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80038a2:	4b4a      	ldr	r3, [pc, #296]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 030c 	and.w	r3, r3, #12
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00b      	beq.n	80038c6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ae:	4b47      	ldr	r3, [pc, #284]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80038b6:	2b08      	cmp	r3, #8
 80038b8:	d11c      	bne.n	80038f4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ba:	4b44      	ldr	r3, [pc, #272]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d116      	bne.n	80038f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038c6:	4b41      	ldr	r3, [pc, #260]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d005      	beq.n	80038de <HAL_RCC_OscConfig+0x152>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d001      	beq.n	80038de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e1c7      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038de:	4b3b      	ldr	r3, [pc, #236]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	4937      	ldr	r1, [pc, #220]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038f2:	e03a      	b.n	800396a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d020      	beq.n	800393e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038fc:	4b34      	ldr	r3, [pc, #208]	@ (80039d0 <HAL_RCC_OscConfig+0x244>)
 80038fe:	2201      	movs	r2, #1
 8003900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003902:	f7fe ff1b 	bl	800273c <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003908:	e008      	b.n	800391c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800390a:	f7fe ff17 	bl	800273c <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e1a8      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800391c:	4b2b      	ldr	r3, [pc, #172]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0f0      	beq.n	800390a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003928:	4b28      	ldr	r3, [pc, #160]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	4925      	ldr	r1, [pc, #148]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 8003938:	4313      	orrs	r3, r2
 800393a:	600b      	str	r3, [r1, #0]
 800393c:	e015      	b.n	800396a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800393e:	4b24      	ldr	r3, [pc, #144]	@ (80039d0 <HAL_RCC_OscConfig+0x244>)
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003944:	f7fe fefa 	bl	800273c <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800394c:	f7fe fef6 	bl	800273c <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e187      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800395e:	4b1b      	ldr	r3, [pc, #108]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f0      	bne.n	800394c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0308 	and.w	r3, r3, #8
 8003972:	2b00      	cmp	r3, #0
 8003974:	d036      	beq.n	80039e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d016      	beq.n	80039ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800397e:	4b15      	ldr	r3, [pc, #84]	@ (80039d4 <HAL_RCC_OscConfig+0x248>)
 8003980:	2201      	movs	r2, #1
 8003982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003984:	f7fe feda 	bl	800273c <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800398c:	f7fe fed6 	bl	800273c <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e167      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800399e:	4b0b      	ldr	r3, [pc, #44]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 80039a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0f0      	beq.n	800398c <HAL_RCC_OscConfig+0x200>
 80039aa:	e01b      	b.n	80039e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039ac:	4b09      	ldr	r3, [pc, #36]	@ (80039d4 <HAL_RCC_OscConfig+0x248>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039b2:	f7fe fec3 	bl	800273c <HAL_GetTick>
 80039b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039b8:	e00e      	b.n	80039d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039ba:	f7fe febf 	bl	800273c <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d907      	bls.n	80039d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e150      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
 80039cc:	40023800 	.word	0x40023800
 80039d0:	42470000 	.word	0x42470000
 80039d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039d8:	4b88      	ldr	r3, [pc, #544]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 80039da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1ea      	bne.n	80039ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 8097 	beq.w	8003b20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039f2:	2300      	movs	r3, #0
 80039f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039f6:	4b81      	ldr	r3, [pc, #516]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 80039f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10f      	bne.n	8003a22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a02:	2300      	movs	r3, #0
 8003a04:	60bb      	str	r3, [r7, #8]
 8003a06:	4b7d      	ldr	r3, [pc, #500]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0a:	4a7c      	ldr	r2, [pc, #496]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a10:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a12:	4b7a      	ldr	r3, [pc, #488]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a1a:	60bb      	str	r3, [r7, #8]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a22:	4b77      	ldr	r3, [pc, #476]	@ (8003c00 <HAL_RCC_OscConfig+0x474>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d118      	bne.n	8003a60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a2e:	4b74      	ldr	r3, [pc, #464]	@ (8003c00 <HAL_RCC_OscConfig+0x474>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a73      	ldr	r2, [pc, #460]	@ (8003c00 <HAL_RCC_OscConfig+0x474>)
 8003a34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a3a:	f7fe fe7f 	bl	800273c <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a42:	f7fe fe7b 	bl	800273c <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e10c      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a54:	4b6a      	ldr	r3, [pc, #424]	@ (8003c00 <HAL_RCC_OscConfig+0x474>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0f0      	beq.n	8003a42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d106      	bne.n	8003a76 <HAL_RCC_OscConfig+0x2ea>
 8003a68:	4b64      	ldr	r3, [pc, #400]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a6c:	4a63      	ldr	r2, [pc, #396]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a6e:	f043 0301 	orr.w	r3, r3, #1
 8003a72:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a74:	e01c      	b.n	8003ab0 <HAL_RCC_OscConfig+0x324>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	2b05      	cmp	r3, #5
 8003a7c:	d10c      	bne.n	8003a98 <HAL_RCC_OscConfig+0x30c>
 8003a7e:	4b5f      	ldr	r3, [pc, #380]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a82:	4a5e      	ldr	r2, [pc, #376]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a84:	f043 0304 	orr.w	r3, r3, #4
 8003a88:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a8a:	4b5c      	ldr	r3, [pc, #368]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a8e:	4a5b      	ldr	r2, [pc, #364]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a96:	e00b      	b.n	8003ab0 <HAL_RCC_OscConfig+0x324>
 8003a98:	4b58      	ldr	r3, [pc, #352]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a9c:	4a57      	ldr	r2, [pc, #348]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a9e:	f023 0301 	bic.w	r3, r3, #1
 8003aa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003aa4:	4b55      	ldr	r3, [pc, #340]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003aa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa8:	4a54      	ldr	r2, [pc, #336]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003aaa:	f023 0304 	bic.w	r3, r3, #4
 8003aae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d015      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab8:	f7fe fe40 	bl	800273c <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003abe:	e00a      	b.n	8003ad6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac0:	f7fe fe3c 	bl	800273c <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e0cb      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ad6:	4b49      	ldr	r3, [pc, #292]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0ee      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x334>
 8003ae2:	e014      	b.n	8003b0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ae4:	f7fe fe2a 	bl	800273c <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aea:	e00a      	b.n	8003b02 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aec:	f7fe fe26 	bl	800273c <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e0b5      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b02:	4b3e      	ldr	r3, [pc, #248]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1ee      	bne.n	8003aec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b0e:	7dfb      	ldrb	r3, [r7, #23]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d105      	bne.n	8003b20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b14:	4b39      	ldr	r3, [pc, #228]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b18:	4a38      	ldr	r2, [pc, #224]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003b1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b1e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 80a1 	beq.w	8003c6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b2a:	4b34      	ldr	r3, [pc, #208]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 030c 	and.w	r3, r3, #12
 8003b32:	2b08      	cmp	r3, #8
 8003b34:	d05c      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d141      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b3e:	4b31      	ldr	r3, [pc, #196]	@ (8003c04 <HAL_RCC_OscConfig+0x478>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b44:	f7fe fdfa 	bl	800273c <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b4c:	f7fe fdf6 	bl	800273c <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e087      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b5e:	4b27      	ldr	r3, [pc, #156]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1f0      	bne.n	8003b4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69da      	ldr	r2, [r3, #28]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b78:	019b      	lsls	r3, r3, #6
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b80:	085b      	lsrs	r3, r3, #1
 8003b82:	3b01      	subs	r3, #1
 8003b84:	041b      	lsls	r3, r3, #16
 8003b86:	431a      	orrs	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b8c:	061b      	lsls	r3, r3, #24
 8003b8e:	491b      	ldr	r1, [pc, #108]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b94:	4b1b      	ldr	r3, [pc, #108]	@ (8003c04 <HAL_RCC_OscConfig+0x478>)
 8003b96:	2201      	movs	r2, #1
 8003b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9a:	f7fe fdcf 	bl	800273c <HAL_GetTick>
 8003b9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ba0:	e008      	b.n	8003bb4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba2:	f7fe fdcb 	bl	800273c <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e05c      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bb4:	4b11      	ldr	r3, [pc, #68]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0f0      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x416>
 8003bc0:	e054      	b.n	8003c6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc2:	4b10      	ldr	r3, [pc, #64]	@ (8003c04 <HAL_RCC_OscConfig+0x478>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc8:	f7fe fdb8 	bl	800273c <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd0:	f7fe fdb4 	bl	800273c <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e045      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003be2:	4b06      	ldr	r3, [pc, #24]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1f0      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x444>
 8003bee:	e03d      	b.n	8003c6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d107      	bne.n	8003c08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e038      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	40007000 	.word	0x40007000
 8003c04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c08:	4b1b      	ldr	r3, [pc, #108]	@ (8003c78 <HAL_RCC_OscConfig+0x4ec>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d028      	beq.n	8003c68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d121      	bne.n	8003c68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d11a      	bne.n	8003c68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c38:	4013      	ands	r3, r2
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d111      	bne.n	8003c68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c4e:	085b      	lsrs	r3, r3, #1
 8003c50:	3b01      	subs	r3, #1
 8003c52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d107      	bne.n	8003c68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d001      	beq.n	8003c6c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e000      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40023800 	.word	0x40023800

08003c7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d101      	bne.n	8003c90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e0cc      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c90:	4b68      	ldr	r3, [pc, #416]	@ (8003e34 <HAL_RCC_ClockConfig+0x1b8>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0307 	and.w	r3, r3, #7
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d90c      	bls.n	8003cb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c9e:	4b65      	ldr	r3, [pc, #404]	@ (8003e34 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	b2d2      	uxtb	r2, r2
 8003ca4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca6:	4b63      	ldr	r3, [pc, #396]	@ (8003e34 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d001      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e0b8      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d020      	beq.n	8003d06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0304 	and.w	r3, r3, #4
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d005      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cd0:	4b59      	ldr	r3, [pc, #356]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	4a58      	ldr	r2, [pc, #352]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003cda:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d005      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ce8:	4b53      	ldr	r3, [pc, #332]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	4a52      	ldr	r2, [pc, #328]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003cee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003cf2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cf4:	4b50      	ldr	r3, [pc, #320]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	494d      	ldr	r1, [pc, #308]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d044      	beq.n	8003d9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d107      	bne.n	8003d2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d1a:	4b47      	ldr	r3, [pc, #284]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d119      	bne.n	8003d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e07f      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d003      	beq.n	8003d3a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d36:	2b03      	cmp	r3, #3
 8003d38:	d107      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d3a:	4b3f      	ldr	r3, [pc, #252]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d109      	bne.n	8003d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e06f      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d4a:	4b3b      	ldr	r3, [pc, #236]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e067      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d5a:	4b37      	ldr	r3, [pc, #220]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f023 0203 	bic.w	r2, r3, #3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	4934      	ldr	r1, [pc, #208]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d6c:	f7fe fce6 	bl	800273c <HAL_GetTick>
 8003d70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d72:	e00a      	b.n	8003d8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d74:	f7fe fce2 	bl	800273c <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e04f      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8a:	4b2b      	ldr	r3, [pc, #172]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 020c 	and.w	r2, r3, #12
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d1eb      	bne.n	8003d74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d9c:	4b25      	ldr	r3, [pc, #148]	@ (8003e34 <HAL_RCC_ClockConfig+0x1b8>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0307 	and.w	r3, r3, #7
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d20c      	bcs.n	8003dc4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003daa:	4b22      	ldr	r3, [pc, #136]	@ (8003e34 <HAL_RCC_ClockConfig+0x1b8>)
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	b2d2      	uxtb	r2, r2
 8003db0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db2:	4b20      	ldr	r3, [pc, #128]	@ (8003e34 <HAL_RCC_ClockConfig+0x1b8>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d001      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e032      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0304 	and.w	r3, r3, #4
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d008      	beq.n	8003de2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dd0:	4b19      	ldr	r3, [pc, #100]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	4916      	ldr	r1, [pc, #88]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0308 	and.w	r3, r3, #8
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d009      	beq.n	8003e02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dee:	4b12      	ldr	r3, [pc, #72]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	490e      	ldr	r1, [pc, #56]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e02:	f000 f821 	bl	8003e48 <HAL_RCC_GetSysClockFreq>
 8003e06:	4602      	mov	r2, r0
 8003e08:	4b0b      	ldr	r3, [pc, #44]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	091b      	lsrs	r3, r3, #4
 8003e0e:	f003 030f 	and.w	r3, r3, #15
 8003e12:	490a      	ldr	r1, [pc, #40]	@ (8003e3c <HAL_RCC_ClockConfig+0x1c0>)
 8003e14:	5ccb      	ldrb	r3, [r1, r3]
 8003e16:	fa22 f303 	lsr.w	r3, r2, r3
 8003e1a:	4a09      	ldr	r2, [pc, #36]	@ (8003e40 <HAL_RCC_ClockConfig+0x1c4>)
 8003e1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003e1e:	4b09      	ldr	r3, [pc, #36]	@ (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fe fc46 	bl	80026b4 <HAL_InitTick>

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	40023c00 	.word	0x40023c00
 8003e38:	40023800 	.word	0x40023800
 8003e3c:	08006b30 	.word	0x08006b30
 8003e40:	20000000 	.word	0x20000000
 8003e44:	200000ac 	.word	0x200000ac

08003e48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e4c:	b094      	sub	sp, #80	@ 0x50
 8003e4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e50:	2300      	movs	r3, #0
 8003e52:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003e54:	2300      	movs	r3, #0
 8003e56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e60:	4b79      	ldr	r3, [pc, #484]	@ (8004048 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f003 030c 	and.w	r3, r3, #12
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d00d      	beq.n	8003e88 <HAL_RCC_GetSysClockFreq+0x40>
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	f200 80e1 	bhi.w	8004034 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d002      	beq.n	8003e7c <HAL_RCC_GetSysClockFreq+0x34>
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	d003      	beq.n	8003e82 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e7a:	e0db      	b.n	8004034 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e7c:	4b73      	ldr	r3, [pc, #460]	@ (800404c <HAL_RCC_GetSysClockFreq+0x204>)
 8003e7e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e80:	e0db      	b.n	800403a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e82:	4b73      	ldr	r3, [pc, #460]	@ (8004050 <HAL_RCC_GetSysClockFreq+0x208>)
 8003e84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e86:	e0d8      	b.n	800403a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e88:	4b6f      	ldr	r3, [pc, #444]	@ (8004048 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e90:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e92:	4b6d      	ldr	r3, [pc, #436]	@ (8004048 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d063      	beq.n	8003f66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e9e:	4b6a      	ldr	r3, [pc, #424]	@ (8004048 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	099b      	lsrs	r3, r3, #6
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ea8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003eb6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003eba:	4622      	mov	r2, r4
 8003ebc:	462b      	mov	r3, r5
 8003ebe:	f04f 0000 	mov.w	r0, #0
 8003ec2:	f04f 0100 	mov.w	r1, #0
 8003ec6:	0159      	lsls	r1, r3, #5
 8003ec8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ecc:	0150      	lsls	r0, r2, #5
 8003ece:	4602      	mov	r2, r0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4621      	mov	r1, r4
 8003ed4:	1a51      	subs	r1, r2, r1
 8003ed6:	6139      	str	r1, [r7, #16]
 8003ed8:	4629      	mov	r1, r5
 8003eda:	eb63 0301 	sbc.w	r3, r3, r1
 8003ede:	617b      	str	r3, [r7, #20]
 8003ee0:	f04f 0200 	mov.w	r2, #0
 8003ee4:	f04f 0300 	mov.w	r3, #0
 8003ee8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003eec:	4659      	mov	r1, fp
 8003eee:	018b      	lsls	r3, r1, #6
 8003ef0:	4651      	mov	r1, sl
 8003ef2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ef6:	4651      	mov	r1, sl
 8003ef8:	018a      	lsls	r2, r1, #6
 8003efa:	4651      	mov	r1, sl
 8003efc:	ebb2 0801 	subs.w	r8, r2, r1
 8003f00:	4659      	mov	r1, fp
 8003f02:	eb63 0901 	sbc.w	r9, r3, r1
 8003f06:	f04f 0200 	mov.w	r2, #0
 8003f0a:	f04f 0300 	mov.w	r3, #0
 8003f0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f1a:	4690      	mov	r8, r2
 8003f1c:	4699      	mov	r9, r3
 8003f1e:	4623      	mov	r3, r4
 8003f20:	eb18 0303 	adds.w	r3, r8, r3
 8003f24:	60bb      	str	r3, [r7, #8]
 8003f26:	462b      	mov	r3, r5
 8003f28:	eb49 0303 	adc.w	r3, r9, r3
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	f04f 0200 	mov.w	r2, #0
 8003f32:	f04f 0300 	mov.w	r3, #0
 8003f36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f3a:	4629      	mov	r1, r5
 8003f3c:	024b      	lsls	r3, r1, #9
 8003f3e:	4621      	mov	r1, r4
 8003f40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f44:	4621      	mov	r1, r4
 8003f46:	024a      	lsls	r2, r1, #9
 8003f48:	4610      	mov	r0, r2
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f4e:	2200      	movs	r2, #0
 8003f50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f58:	f7fc f992 	bl	8000280 <__aeabi_uldivmod>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	460b      	mov	r3, r1
 8003f60:	4613      	mov	r3, r2
 8003f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f64:	e058      	b.n	8004018 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f66:	4b38      	ldr	r3, [pc, #224]	@ (8004048 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	099b      	lsrs	r3, r3, #6
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	4618      	mov	r0, r3
 8003f70:	4611      	mov	r1, r2
 8003f72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f76:	623b      	str	r3, [r7, #32]
 8003f78:	2300      	movs	r3, #0
 8003f7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f80:	4642      	mov	r2, r8
 8003f82:	464b      	mov	r3, r9
 8003f84:	f04f 0000 	mov.w	r0, #0
 8003f88:	f04f 0100 	mov.w	r1, #0
 8003f8c:	0159      	lsls	r1, r3, #5
 8003f8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f92:	0150      	lsls	r0, r2, #5
 8003f94:	4602      	mov	r2, r0
 8003f96:	460b      	mov	r3, r1
 8003f98:	4641      	mov	r1, r8
 8003f9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f9e:	4649      	mov	r1, r9
 8003fa0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fa4:	f04f 0200 	mov.w	r2, #0
 8003fa8:	f04f 0300 	mov.w	r3, #0
 8003fac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fb0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fb4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003fb8:	ebb2 040a 	subs.w	r4, r2, sl
 8003fbc:	eb63 050b 	sbc.w	r5, r3, fp
 8003fc0:	f04f 0200 	mov.w	r2, #0
 8003fc4:	f04f 0300 	mov.w	r3, #0
 8003fc8:	00eb      	lsls	r3, r5, #3
 8003fca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fce:	00e2      	lsls	r2, r4, #3
 8003fd0:	4614      	mov	r4, r2
 8003fd2:	461d      	mov	r5, r3
 8003fd4:	4643      	mov	r3, r8
 8003fd6:	18e3      	adds	r3, r4, r3
 8003fd8:	603b      	str	r3, [r7, #0]
 8003fda:	464b      	mov	r3, r9
 8003fdc:	eb45 0303 	adc.w	r3, r5, r3
 8003fe0:	607b      	str	r3, [r7, #4]
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	f04f 0300 	mov.w	r3, #0
 8003fea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fee:	4629      	mov	r1, r5
 8003ff0:	028b      	lsls	r3, r1, #10
 8003ff2:	4621      	mov	r1, r4
 8003ff4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ff8:	4621      	mov	r1, r4
 8003ffa:	028a      	lsls	r2, r1, #10
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	4619      	mov	r1, r3
 8004000:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004002:	2200      	movs	r2, #0
 8004004:	61bb      	str	r3, [r7, #24]
 8004006:	61fa      	str	r2, [r7, #28]
 8004008:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800400c:	f7fc f938 	bl	8000280 <__aeabi_uldivmod>
 8004010:	4602      	mov	r2, r0
 8004012:	460b      	mov	r3, r1
 8004014:	4613      	mov	r3, r2
 8004016:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004018:	4b0b      	ldr	r3, [pc, #44]	@ (8004048 <HAL_RCC_GetSysClockFreq+0x200>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	0c1b      	lsrs	r3, r3, #16
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	3301      	adds	r3, #1
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004028:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800402a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800402c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004030:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004032:	e002      	b.n	800403a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004034:	4b05      	ldr	r3, [pc, #20]	@ (800404c <HAL_RCC_GetSysClockFreq+0x204>)
 8004036:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004038:	bf00      	nop
    }
  }
  return sysclockfreq;
 800403a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800403c:	4618      	mov	r0, r3
 800403e:	3750      	adds	r7, #80	@ 0x50
 8004040:	46bd      	mov	sp, r7
 8004042:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004046:	bf00      	nop
 8004048:	40023800 	.word	0x40023800
 800404c:	00f42400 	.word	0x00f42400
 8004050:	007a1200 	.word	0x007a1200

08004054 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004058:	4b03      	ldr	r3, [pc, #12]	@ (8004068 <HAL_RCC_GetHCLKFreq+0x14>)
 800405a:	681b      	ldr	r3, [r3, #0]
}
 800405c:	4618      	mov	r0, r3
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	20000000 	.word	0x20000000

0800406c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004070:	f7ff fff0 	bl	8004054 <HAL_RCC_GetHCLKFreq>
 8004074:	4602      	mov	r2, r0
 8004076:	4b05      	ldr	r3, [pc, #20]	@ (800408c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	0a9b      	lsrs	r3, r3, #10
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	4903      	ldr	r1, [pc, #12]	@ (8004090 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004082:	5ccb      	ldrb	r3, [r1, r3]
 8004084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004088:	4618      	mov	r0, r3
 800408a:	bd80      	pop	{r7, pc}
 800408c:	40023800 	.word	0x40023800
 8004090:	08006b40 	.word	0x08006b40

08004094 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004098:	f7ff ffdc 	bl	8004054 <HAL_RCC_GetHCLKFreq>
 800409c:	4602      	mov	r2, r0
 800409e:	4b05      	ldr	r3, [pc, #20]	@ (80040b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	0b5b      	lsrs	r3, r3, #13
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	4903      	ldr	r1, [pc, #12]	@ (80040b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040aa:	5ccb      	ldrb	r3, [r1, r3]
 80040ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	40023800 	.word	0x40023800
 80040b8:	08006b40 	.word	0x08006b40

080040bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e041      	b.n	8004152 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d106      	bne.n	80040e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7fc febe 	bl	8000e64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2202      	movs	r2, #2
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3304      	adds	r3, #4
 80040f8:	4619      	mov	r1, r3
 80040fa:	4610      	mov	r0, r2
 80040fc:	f000 fd22 	bl	8004b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3708      	adds	r7, #8
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
	...

0800415c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b01      	cmp	r3, #1
 800416e:	d001      	beq.n	8004174 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e03c      	b.n	80041ee <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a1e      	ldr	r2, [pc, #120]	@ (80041fc <HAL_TIM_Base_Start+0xa0>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d018      	beq.n	80041b8 <HAL_TIM_Base_Start+0x5c>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800418e:	d013      	beq.n	80041b8 <HAL_TIM_Base_Start+0x5c>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a1a      	ldr	r2, [pc, #104]	@ (8004200 <HAL_TIM_Base_Start+0xa4>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d00e      	beq.n	80041b8 <HAL_TIM_Base_Start+0x5c>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a19      	ldr	r2, [pc, #100]	@ (8004204 <HAL_TIM_Base_Start+0xa8>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d009      	beq.n	80041b8 <HAL_TIM_Base_Start+0x5c>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a17      	ldr	r2, [pc, #92]	@ (8004208 <HAL_TIM_Base_Start+0xac>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d004      	beq.n	80041b8 <HAL_TIM_Base_Start+0x5c>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a16      	ldr	r2, [pc, #88]	@ (800420c <HAL_TIM_Base_Start+0xb0>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d111      	bne.n	80041dc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 0307 	and.w	r3, r3, #7
 80041c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2b06      	cmp	r3, #6
 80041c8:	d010      	beq.n	80041ec <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f042 0201 	orr.w	r2, r2, #1
 80041d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041da:	e007      	b.n	80041ec <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f042 0201 	orr.w	r2, r2, #1
 80041ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	40010000 	.word	0x40010000
 8004200:	40000400 	.word	0x40000400
 8004204:	40000800 	.word	0x40000800
 8004208:	40000c00 	.word	0x40000c00
 800420c:	40014000 	.word	0x40014000

08004210 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6a1a      	ldr	r2, [r3, #32]
 800421e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004222:	4013      	ands	r3, r2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10f      	bne.n	8004248 <HAL_TIM_Base_Stop+0x38>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6a1a      	ldr	r2, [r3, #32]
 800422e:	f240 4344 	movw	r3, #1092	@ 0x444
 8004232:	4013      	ands	r3, r2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d107      	bne.n	8004248 <HAL_TIM_Base_Stop+0x38>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 0201 	bic.w	r2, r2, #1
 8004246:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
	...

08004260 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b01      	cmp	r3, #1
 8004272:	d001      	beq.n	8004278 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e044      	b.n	8004302 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2202      	movs	r2, #2
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68da      	ldr	r2, [r3, #12]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0201 	orr.w	r2, r2, #1
 800428e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a1e      	ldr	r2, [pc, #120]	@ (8004310 <HAL_TIM_Base_Start_IT+0xb0>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d018      	beq.n	80042cc <HAL_TIM_Base_Start_IT+0x6c>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042a2:	d013      	beq.n	80042cc <HAL_TIM_Base_Start_IT+0x6c>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a1a      	ldr	r2, [pc, #104]	@ (8004314 <HAL_TIM_Base_Start_IT+0xb4>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d00e      	beq.n	80042cc <HAL_TIM_Base_Start_IT+0x6c>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a19      	ldr	r2, [pc, #100]	@ (8004318 <HAL_TIM_Base_Start_IT+0xb8>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d009      	beq.n	80042cc <HAL_TIM_Base_Start_IT+0x6c>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a17      	ldr	r2, [pc, #92]	@ (800431c <HAL_TIM_Base_Start_IT+0xbc>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d004      	beq.n	80042cc <HAL_TIM_Base_Start_IT+0x6c>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a16      	ldr	r2, [pc, #88]	@ (8004320 <HAL_TIM_Base_Start_IT+0xc0>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d111      	bne.n	80042f0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 0307 	and.w	r3, r3, #7
 80042d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2b06      	cmp	r3, #6
 80042dc:	d010      	beq.n	8004300 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f042 0201 	orr.w	r2, r2, #1
 80042ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ee:	e007      	b.n	8004300 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f042 0201 	orr.w	r2, r2, #1
 80042fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	40010000 	.word	0x40010000
 8004314:	40000400 	.word	0x40000400
 8004318:	40000800 	.word	0x40000800
 800431c:	40000c00 	.word	0x40000c00
 8004320:	40014000 	.word	0x40014000

08004324 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e041      	b.n	80043ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d106      	bne.n	8004350 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f839 	bl	80043c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2202      	movs	r2, #2
 8004354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3304      	adds	r3, #4
 8004360:	4619      	mov	r1, r3
 8004362:	4610      	mov	r0, r2
 8004364:	f000 fbee 	bl	8004b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
	...

080043d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d109      	bne.n	80043fc <HAL_TIM_PWM_Start+0x24>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	bf14      	ite	ne
 80043f4:	2301      	movne	r3, #1
 80043f6:	2300      	moveq	r3, #0
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	e022      	b.n	8004442 <HAL_TIM_PWM_Start+0x6a>
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	2b04      	cmp	r3, #4
 8004400:	d109      	bne.n	8004416 <HAL_TIM_PWM_Start+0x3e>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b01      	cmp	r3, #1
 800440c:	bf14      	ite	ne
 800440e:	2301      	movne	r3, #1
 8004410:	2300      	moveq	r3, #0
 8004412:	b2db      	uxtb	r3, r3
 8004414:	e015      	b.n	8004442 <HAL_TIM_PWM_Start+0x6a>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b08      	cmp	r3, #8
 800441a:	d109      	bne.n	8004430 <HAL_TIM_PWM_Start+0x58>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b01      	cmp	r3, #1
 8004426:	bf14      	ite	ne
 8004428:	2301      	movne	r3, #1
 800442a:	2300      	moveq	r3, #0
 800442c:	b2db      	uxtb	r3, r3
 800442e:	e008      	b.n	8004442 <HAL_TIM_PWM_Start+0x6a>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b01      	cmp	r3, #1
 800443a:	bf14      	ite	ne
 800443c:	2301      	movne	r3, #1
 800443e:	2300      	moveq	r3, #0
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e068      	b.n	800451c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d104      	bne.n	800445a <HAL_TIM_PWM_Start+0x82>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2202      	movs	r2, #2
 8004454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004458:	e013      	b.n	8004482 <HAL_TIM_PWM_Start+0xaa>
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b04      	cmp	r3, #4
 800445e:	d104      	bne.n	800446a <HAL_TIM_PWM_Start+0x92>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004468:	e00b      	b.n	8004482 <HAL_TIM_PWM_Start+0xaa>
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	2b08      	cmp	r3, #8
 800446e:	d104      	bne.n	800447a <HAL_TIM_PWM_Start+0xa2>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2202      	movs	r2, #2
 8004474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004478:	e003      	b.n	8004482 <HAL_TIM_PWM_Start+0xaa>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2202      	movs	r2, #2
 800447e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2201      	movs	r2, #1
 8004488:	6839      	ldr	r1, [r7, #0]
 800448a:	4618      	mov	r0, r3
 800448c:	f000 fe06 	bl	800509c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a23      	ldr	r2, [pc, #140]	@ (8004524 <HAL_TIM_PWM_Start+0x14c>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d107      	bne.n	80044aa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a1d      	ldr	r2, [pc, #116]	@ (8004524 <HAL_TIM_PWM_Start+0x14c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d018      	beq.n	80044e6 <HAL_TIM_PWM_Start+0x10e>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044bc:	d013      	beq.n	80044e6 <HAL_TIM_PWM_Start+0x10e>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a19      	ldr	r2, [pc, #100]	@ (8004528 <HAL_TIM_PWM_Start+0x150>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d00e      	beq.n	80044e6 <HAL_TIM_PWM_Start+0x10e>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a17      	ldr	r2, [pc, #92]	@ (800452c <HAL_TIM_PWM_Start+0x154>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d009      	beq.n	80044e6 <HAL_TIM_PWM_Start+0x10e>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a16      	ldr	r2, [pc, #88]	@ (8004530 <HAL_TIM_PWM_Start+0x158>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d004      	beq.n	80044e6 <HAL_TIM_PWM_Start+0x10e>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a14      	ldr	r2, [pc, #80]	@ (8004534 <HAL_TIM_PWM_Start+0x15c>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d111      	bne.n	800450a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f003 0307 	and.w	r3, r3, #7
 80044f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2b06      	cmp	r3, #6
 80044f6:	d010      	beq.n	800451a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f042 0201 	orr.w	r2, r2, #1
 8004506:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004508:	e007      	b.n	800451a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f042 0201 	orr.w	r2, r2, #1
 8004518:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3710      	adds	r7, #16
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	40010000 	.word	0x40010000
 8004528:	40000400 	.word	0x40000400
 800452c:	40000800 	.word	0x40000800
 8004530:	40000c00 	.word	0x40000c00
 8004534:	40014000 	.word	0x40014000

08004538 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2200      	movs	r2, #0
 8004548:	6839      	ldr	r1, [r7, #0]
 800454a:	4618      	mov	r0, r3
 800454c:	f000 fda6 	bl	800509c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a29      	ldr	r2, [pc, #164]	@ (80045fc <HAL_TIM_PWM_Stop+0xc4>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d117      	bne.n	800458a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6a1a      	ldr	r2, [r3, #32]
 8004560:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004564:	4013      	ands	r3, r2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10f      	bne.n	800458a <HAL_TIM_PWM_Stop+0x52>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6a1a      	ldr	r2, [r3, #32]
 8004570:	f240 4344 	movw	r3, #1092	@ 0x444
 8004574:	4013      	ands	r3, r2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d107      	bne.n	800458a <HAL_TIM_PWM_Stop+0x52>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004588:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6a1a      	ldr	r2, [r3, #32]
 8004590:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004594:	4013      	ands	r3, r2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10f      	bne.n	80045ba <HAL_TIM_PWM_Stop+0x82>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	6a1a      	ldr	r2, [r3, #32]
 80045a0:	f240 4344 	movw	r3, #1092	@ 0x444
 80045a4:	4013      	ands	r3, r2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d107      	bne.n	80045ba <HAL_TIM_PWM_Stop+0x82>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f022 0201 	bic.w	r2, r2, #1
 80045b8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d104      	bne.n	80045ca <HAL_TIM_PWM_Stop+0x92>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045c8:	e013      	b.n	80045f2 <HAL_TIM_PWM_Stop+0xba>
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	2b04      	cmp	r3, #4
 80045ce:	d104      	bne.n	80045da <HAL_TIM_PWM_Stop+0xa2>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045d8:	e00b      	b.n	80045f2 <HAL_TIM_PWM_Stop+0xba>
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	2b08      	cmp	r3, #8
 80045de:	d104      	bne.n	80045ea <HAL_TIM_PWM_Stop+0xb2>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045e8:	e003      	b.n	80045f2 <HAL_TIM_PWM_Stop+0xba>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	40010000 	.word	0x40010000

08004600 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d020      	beq.n	8004664 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f003 0302 	and.w	r3, r3, #2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d01b      	beq.n	8004664 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f06f 0202 	mvn.w	r2, #2
 8004634:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	f003 0303 	and.w	r3, r3, #3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 fa5b 	bl	8004b06 <HAL_TIM_IC_CaptureCallback>
 8004650:	e005      	b.n	800465e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 fa4d 	bl	8004af2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 fa5e 	bl	8004b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	f003 0304 	and.w	r3, r3, #4
 800466a:	2b00      	cmp	r3, #0
 800466c:	d020      	beq.n	80046b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	2b00      	cmp	r3, #0
 8004676:	d01b      	beq.n	80046b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f06f 0204 	mvn.w	r2, #4
 8004680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2202      	movs	r2, #2
 8004686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 fa35 	bl	8004b06 <HAL_TIM_IC_CaptureCallback>
 800469c:	e005      	b.n	80046aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 fa27 	bl	8004af2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 fa38 	bl	8004b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	f003 0308 	and.w	r3, r3, #8
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d020      	beq.n	80046fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f003 0308 	and.w	r3, r3, #8
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d01b      	beq.n	80046fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f06f 0208 	mvn.w	r2, #8
 80046cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2204      	movs	r2, #4
 80046d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	f003 0303 	and.w	r3, r3, #3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d003      	beq.n	80046ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 fa0f 	bl	8004b06 <HAL_TIM_IC_CaptureCallback>
 80046e8:	e005      	b.n	80046f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 fa01 	bl	8004af2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 fa12 	bl	8004b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	f003 0310 	and.w	r3, r3, #16
 8004702:	2b00      	cmp	r3, #0
 8004704:	d020      	beq.n	8004748 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f003 0310 	and.w	r3, r3, #16
 800470c:	2b00      	cmp	r3, #0
 800470e:	d01b      	beq.n	8004748 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f06f 0210 	mvn.w	r2, #16
 8004718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2208      	movs	r2, #8
 800471e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f9e9 	bl	8004b06 <HAL_TIM_IC_CaptureCallback>
 8004734:	e005      	b.n	8004742 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f9db 	bl	8004af2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 f9ec 	bl	8004b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00c      	beq.n	800476c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b00      	cmp	r3, #0
 800475a:	d007      	beq.n	800476c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f06f 0201 	mvn.w	r2, #1
 8004764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f7fc ff3c 	bl	80015e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00c      	beq.n	8004790 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800477c:	2b00      	cmp	r3, #0
 800477e:	d007      	beq.n	8004790 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 fd76 	bl	800527c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00c      	beq.n	80047b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d007      	beq.n	80047b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80047ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f9bd 	bl	8004b2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	f003 0320 	and.w	r3, r3, #32
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00c      	beq.n	80047d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f003 0320 	and.w	r3, r3, #32
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d007      	beq.n	80047d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f06f 0220 	mvn.w	r2, #32
 80047d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 fd48 	bl	8005268 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047d8:	bf00      	nop
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047ec:	2300      	movs	r3, #0
 80047ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d101      	bne.n	80047fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80047fa:	2302      	movs	r3, #2
 80047fc:	e0ae      	b.n	800495c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b0c      	cmp	r3, #12
 800480a:	f200 809f 	bhi.w	800494c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800480e:	a201      	add	r2, pc, #4	@ (adr r2, 8004814 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004814:	08004849 	.word	0x08004849
 8004818:	0800494d 	.word	0x0800494d
 800481c:	0800494d 	.word	0x0800494d
 8004820:	0800494d 	.word	0x0800494d
 8004824:	08004889 	.word	0x08004889
 8004828:	0800494d 	.word	0x0800494d
 800482c:	0800494d 	.word	0x0800494d
 8004830:	0800494d 	.word	0x0800494d
 8004834:	080048cb 	.word	0x080048cb
 8004838:	0800494d 	.word	0x0800494d
 800483c:	0800494d 	.word	0x0800494d
 8004840:	0800494d 	.word	0x0800494d
 8004844:	0800490b 	.word	0x0800490b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68b9      	ldr	r1, [r7, #8]
 800484e:	4618      	mov	r0, r3
 8004850:	f000 f9fe 	bl	8004c50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	699a      	ldr	r2, [r3, #24]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f042 0208 	orr.w	r2, r2, #8
 8004862:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	699a      	ldr	r2, [r3, #24]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 0204 	bic.w	r2, r2, #4
 8004872:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6999      	ldr	r1, [r3, #24]
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	691a      	ldr	r2, [r3, #16]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	619a      	str	r2, [r3, #24]
      break;
 8004886:	e064      	b.n	8004952 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68b9      	ldr	r1, [r7, #8]
 800488e:	4618      	mov	r0, r3
 8004890:	f000 fa44 	bl	8004d1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	699a      	ldr	r2, [r3, #24]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	699a      	ldr	r2, [r3, #24]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6999      	ldr	r1, [r3, #24]
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	021a      	lsls	r2, r3, #8
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	619a      	str	r2, [r3, #24]
      break;
 80048c8:	e043      	b.n	8004952 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68b9      	ldr	r1, [r7, #8]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f000 fa8f 	bl	8004df4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	69da      	ldr	r2, [r3, #28]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f042 0208 	orr.w	r2, r2, #8
 80048e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	69da      	ldr	r2, [r3, #28]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 0204 	bic.w	r2, r2, #4
 80048f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	69d9      	ldr	r1, [r3, #28]
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	691a      	ldr	r2, [r3, #16]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	61da      	str	r2, [r3, #28]
      break;
 8004908:	e023      	b.n	8004952 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68b9      	ldr	r1, [r7, #8]
 8004910:	4618      	mov	r0, r3
 8004912:	f000 fad9 	bl	8004ec8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	69da      	ldr	r2, [r3, #28]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004924:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	69da      	ldr	r2, [r3, #28]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004934:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	69d9      	ldr	r1, [r3, #28]
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	021a      	lsls	r2, r3, #8
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	430a      	orrs	r2, r1
 8004948:	61da      	str	r2, [r3, #28]
      break;
 800494a:	e002      	b.n	8004952 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	75fb      	strb	r3, [r7, #23]
      break;
 8004950:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800495a:	7dfb      	ldrb	r3, [r7, #23]
}
 800495c:	4618      	mov	r0, r3
 800495e:	3718      	adds	r7, #24
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800496e:	2300      	movs	r3, #0
 8004970:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004978:	2b01      	cmp	r3, #1
 800497a:	d101      	bne.n	8004980 <HAL_TIM_ConfigClockSource+0x1c>
 800497c:	2302      	movs	r3, #2
 800497e:	e0b4      	b.n	8004aea <HAL_TIM_ConfigClockSource+0x186>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2202      	movs	r2, #2
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800499e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049b8:	d03e      	beq.n	8004a38 <HAL_TIM_ConfigClockSource+0xd4>
 80049ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049be:	f200 8087 	bhi.w	8004ad0 <HAL_TIM_ConfigClockSource+0x16c>
 80049c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049c6:	f000 8086 	beq.w	8004ad6 <HAL_TIM_ConfigClockSource+0x172>
 80049ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049ce:	d87f      	bhi.n	8004ad0 <HAL_TIM_ConfigClockSource+0x16c>
 80049d0:	2b70      	cmp	r3, #112	@ 0x70
 80049d2:	d01a      	beq.n	8004a0a <HAL_TIM_ConfigClockSource+0xa6>
 80049d4:	2b70      	cmp	r3, #112	@ 0x70
 80049d6:	d87b      	bhi.n	8004ad0 <HAL_TIM_ConfigClockSource+0x16c>
 80049d8:	2b60      	cmp	r3, #96	@ 0x60
 80049da:	d050      	beq.n	8004a7e <HAL_TIM_ConfigClockSource+0x11a>
 80049dc:	2b60      	cmp	r3, #96	@ 0x60
 80049de:	d877      	bhi.n	8004ad0 <HAL_TIM_ConfigClockSource+0x16c>
 80049e0:	2b50      	cmp	r3, #80	@ 0x50
 80049e2:	d03c      	beq.n	8004a5e <HAL_TIM_ConfigClockSource+0xfa>
 80049e4:	2b50      	cmp	r3, #80	@ 0x50
 80049e6:	d873      	bhi.n	8004ad0 <HAL_TIM_ConfigClockSource+0x16c>
 80049e8:	2b40      	cmp	r3, #64	@ 0x40
 80049ea:	d058      	beq.n	8004a9e <HAL_TIM_ConfigClockSource+0x13a>
 80049ec:	2b40      	cmp	r3, #64	@ 0x40
 80049ee:	d86f      	bhi.n	8004ad0 <HAL_TIM_ConfigClockSource+0x16c>
 80049f0:	2b30      	cmp	r3, #48	@ 0x30
 80049f2:	d064      	beq.n	8004abe <HAL_TIM_ConfigClockSource+0x15a>
 80049f4:	2b30      	cmp	r3, #48	@ 0x30
 80049f6:	d86b      	bhi.n	8004ad0 <HAL_TIM_ConfigClockSource+0x16c>
 80049f8:	2b20      	cmp	r3, #32
 80049fa:	d060      	beq.n	8004abe <HAL_TIM_ConfigClockSource+0x15a>
 80049fc:	2b20      	cmp	r3, #32
 80049fe:	d867      	bhi.n	8004ad0 <HAL_TIM_ConfigClockSource+0x16c>
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d05c      	beq.n	8004abe <HAL_TIM_ConfigClockSource+0x15a>
 8004a04:	2b10      	cmp	r3, #16
 8004a06:	d05a      	beq.n	8004abe <HAL_TIM_ConfigClockSource+0x15a>
 8004a08:	e062      	b.n	8004ad0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a1a:	f000 fb1f 	bl	800505c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004a2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	609a      	str	r2, [r3, #8]
      break;
 8004a36:	e04f      	b.n	8004ad8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a48:	f000 fb08 	bl	800505c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689a      	ldr	r2, [r3, #8]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a5a:	609a      	str	r2, [r3, #8]
      break;
 8004a5c:	e03c      	b.n	8004ad8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	f000 fa7c 	bl	8004f68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2150      	movs	r1, #80	@ 0x50
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 fad5 	bl	8005026 <TIM_ITRx_SetConfig>
      break;
 8004a7c:	e02c      	b.n	8004ad8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	f000 fa9b 	bl	8004fc6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2160      	movs	r1, #96	@ 0x60
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 fac5 	bl	8005026 <TIM_ITRx_SetConfig>
      break;
 8004a9c:	e01c      	b.n	8004ad8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aaa:	461a      	mov	r2, r3
 8004aac:	f000 fa5c 	bl	8004f68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2140      	movs	r1, #64	@ 0x40
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 fab5 	bl	8005026 <TIM_ITRx_SetConfig>
      break;
 8004abc:	e00c      	b.n	8004ad8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	4610      	mov	r0, r2
 8004aca:	f000 faac 	bl	8005026 <TIM_ITRx_SetConfig>
      break;
 8004ace:	e003      	b.n	8004ad8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ad4:	e000      	b.n	8004ad8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ad6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004af2:	b480      	push	{r7}
 8004af4:	b083      	sub	sp, #12
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004afa:	bf00      	nop
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b06:	b480      	push	{r7}
 8004b08:	b083      	sub	sp, #12
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b0e:	bf00      	nop
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b083      	sub	sp, #12
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b22:	bf00      	nop
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b083      	sub	sp, #12
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b36:	bf00      	nop
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
	...

08004b44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a37      	ldr	r2, [pc, #220]	@ (8004c34 <TIM_Base_SetConfig+0xf0>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d00f      	beq.n	8004b7c <TIM_Base_SetConfig+0x38>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b62:	d00b      	beq.n	8004b7c <TIM_Base_SetConfig+0x38>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a34      	ldr	r2, [pc, #208]	@ (8004c38 <TIM_Base_SetConfig+0xf4>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d007      	beq.n	8004b7c <TIM_Base_SetConfig+0x38>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a33      	ldr	r2, [pc, #204]	@ (8004c3c <TIM_Base_SetConfig+0xf8>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d003      	beq.n	8004b7c <TIM_Base_SetConfig+0x38>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a32      	ldr	r2, [pc, #200]	@ (8004c40 <TIM_Base_SetConfig+0xfc>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d108      	bne.n	8004b8e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a28      	ldr	r2, [pc, #160]	@ (8004c34 <TIM_Base_SetConfig+0xf0>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d01b      	beq.n	8004bce <TIM_Base_SetConfig+0x8a>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b9c:	d017      	beq.n	8004bce <TIM_Base_SetConfig+0x8a>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a25      	ldr	r2, [pc, #148]	@ (8004c38 <TIM_Base_SetConfig+0xf4>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d013      	beq.n	8004bce <TIM_Base_SetConfig+0x8a>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a24      	ldr	r2, [pc, #144]	@ (8004c3c <TIM_Base_SetConfig+0xf8>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d00f      	beq.n	8004bce <TIM_Base_SetConfig+0x8a>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a23      	ldr	r2, [pc, #140]	@ (8004c40 <TIM_Base_SetConfig+0xfc>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d00b      	beq.n	8004bce <TIM_Base_SetConfig+0x8a>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a22      	ldr	r2, [pc, #136]	@ (8004c44 <TIM_Base_SetConfig+0x100>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d007      	beq.n	8004bce <TIM_Base_SetConfig+0x8a>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a21      	ldr	r2, [pc, #132]	@ (8004c48 <TIM_Base_SetConfig+0x104>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d003      	beq.n	8004bce <TIM_Base_SetConfig+0x8a>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a20      	ldr	r2, [pc, #128]	@ (8004c4c <TIM_Base_SetConfig+0x108>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d108      	bne.n	8004be0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	689a      	ldr	r2, [r3, #8]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a0c      	ldr	r2, [pc, #48]	@ (8004c34 <TIM_Base_SetConfig+0xf0>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d103      	bne.n	8004c0e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	691a      	ldr	r2, [r3, #16]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f043 0204 	orr.w	r2, r3, #4
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	601a      	str	r2, [r3, #0]
}
 8004c26:	bf00      	nop
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	40010000 	.word	0x40010000
 8004c38:	40000400 	.word	0x40000400
 8004c3c:	40000800 	.word	0x40000800
 8004c40:	40000c00 	.word	0x40000c00
 8004c44:	40014000 	.word	0x40014000
 8004c48:	40014400 	.word	0x40014400
 8004c4c:	40014800 	.word	0x40014800

08004c50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b087      	sub	sp, #28
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	f023 0201 	bic.w	r2, r3, #1
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f023 0303 	bic.w	r3, r3, #3
 8004c86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	f023 0302 	bic.w	r3, r3, #2
 8004c98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a1c      	ldr	r2, [pc, #112]	@ (8004d18 <TIM_OC1_SetConfig+0xc8>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d10c      	bne.n	8004cc6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	f023 0308 	bic.w	r3, r3, #8
 8004cb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f023 0304 	bic.w	r3, r3, #4
 8004cc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a13      	ldr	r2, [pc, #76]	@ (8004d18 <TIM_OC1_SetConfig+0xc8>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d111      	bne.n	8004cf2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004cdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	685a      	ldr	r2, [r3, #4]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	621a      	str	r2, [r3, #32]
}
 8004d0c:	bf00      	nop
 8004d0e:	371c      	adds	r7, #28
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr
 8004d18:	40010000 	.word	0x40010000

08004d1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b087      	sub	sp, #28
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	f023 0210 	bic.w	r2, r3, #16
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	021b      	lsls	r3, r3, #8
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	f023 0320 	bic.w	r3, r3, #32
 8004d66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	011b      	lsls	r3, r3, #4
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a1e      	ldr	r2, [pc, #120]	@ (8004df0 <TIM_OC2_SetConfig+0xd4>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d10d      	bne.n	8004d98 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	011b      	lsls	r3, r3, #4
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d96:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a15      	ldr	r2, [pc, #84]	@ (8004df0 <TIM_OC2_SetConfig+0xd4>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d113      	bne.n	8004dc8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004da6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004dae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	621a      	str	r2, [r3, #32]
}
 8004de2:	bf00      	nop
 8004de4:	371c      	adds	r7, #28
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	40010000 	.word	0x40010000

08004df4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b087      	sub	sp, #28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	69db      	ldr	r3, [r3, #28]
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f023 0303 	bic.w	r3, r3, #3
 8004e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	021b      	lsls	r3, r3, #8
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ec4 <TIM_OC3_SetConfig+0xd0>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d10d      	bne.n	8004e6e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	021b      	lsls	r3, r3, #8
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a14      	ldr	r2, [pc, #80]	@ (8004ec4 <TIM_OC3_SetConfig+0xd0>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d113      	bne.n	8004e9e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	011b      	lsls	r3, r3, #4
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	011b      	lsls	r3, r3, #4
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	685a      	ldr	r2, [r3, #4]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	697a      	ldr	r2, [r7, #20]
 8004eb6:	621a      	str	r2, [r3, #32]
}
 8004eb8:	bf00      	nop
 8004eba:	371c      	adds	r7, #28
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	40010000 	.word	0x40010000

08004ec8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b087      	sub	sp, #28
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	69db      	ldr	r3, [r3, #28]
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	021b      	lsls	r3, r3, #8
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	031b      	lsls	r3, r3, #12
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a10      	ldr	r2, [pc, #64]	@ (8004f64 <TIM_OC4_SetConfig+0x9c>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d109      	bne.n	8004f3c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	019b      	lsls	r3, r3, #6
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	621a      	str	r2, [r3, #32]
}
 8004f56:	bf00      	nop
 8004f58:	371c      	adds	r7, #28
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	40010000 	.word	0x40010000

08004f68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b087      	sub	sp, #28
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6a1b      	ldr	r3, [r3, #32]
 8004f78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	f023 0201 	bic.w	r2, r3, #1
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	011b      	lsls	r3, r3, #4
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f023 030a 	bic.w	r3, r3, #10
 8004fa4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	621a      	str	r2, [r3, #32]
}
 8004fba:	bf00      	nop
 8004fbc:	371c      	adds	r7, #28
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b087      	sub	sp, #28
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	60f8      	str	r0, [r7, #12]
 8004fce:	60b9      	str	r1, [r7, #8]
 8004fd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6a1b      	ldr	r3, [r3, #32]
 8004fdc:	f023 0210 	bic.w	r2, r3, #16
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ff0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	031b      	lsls	r3, r3, #12
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005002:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	011b      	lsls	r3, r3, #4
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	4313      	orrs	r3, r2
 800500c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	621a      	str	r2, [r3, #32]
}
 800501a:	bf00      	nop
 800501c:	371c      	adds	r7, #28
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005026:	b480      	push	{r7}
 8005028:	b085      	sub	sp, #20
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
 800502e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800503c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	4313      	orrs	r3, r2
 8005044:	f043 0307 	orr.w	r3, r3, #7
 8005048:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	609a      	str	r2, [r3, #8]
}
 8005050:	bf00      	nop
 8005052:	3714      	adds	r7, #20
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800505c:	b480      	push	{r7}
 800505e:	b087      	sub	sp, #28
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
 8005068:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005076:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	021a      	lsls	r2, r3, #8
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	431a      	orrs	r2, r3
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	4313      	orrs	r3, r2
 8005084:	697a      	ldr	r2, [r7, #20]
 8005086:	4313      	orrs	r3, r2
 8005088:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	609a      	str	r2, [r3, #8]
}
 8005090:	bf00      	nop
 8005092:	371c      	adds	r7, #28
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800509c:	b480      	push	{r7}
 800509e:	b087      	sub	sp, #28
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	f003 031f 	and.w	r3, r3, #31
 80050ae:	2201      	movs	r2, #1
 80050b0:	fa02 f303 	lsl.w	r3, r2, r3
 80050b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6a1a      	ldr	r2, [r3, #32]
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	43db      	mvns	r3, r3
 80050be:	401a      	ands	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6a1a      	ldr	r2, [r3, #32]
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	f003 031f 	and.w	r3, r3, #31
 80050ce:	6879      	ldr	r1, [r7, #4]
 80050d0:	fa01 f303 	lsl.w	r3, r1, r3
 80050d4:	431a      	orrs	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	621a      	str	r2, [r3, #32]
}
 80050da:	bf00      	nop
 80050dc:	371c      	adds	r7, #28
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
	...

080050e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d101      	bne.n	8005100 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050fc:	2302      	movs	r3, #2
 80050fe:	e050      	b.n	80051a2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2202      	movs	r2, #2
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005126:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	4313      	orrs	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a1c      	ldr	r2, [pc, #112]	@ (80051b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d018      	beq.n	8005176 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800514c:	d013      	beq.n	8005176 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a18      	ldr	r2, [pc, #96]	@ (80051b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d00e      	beq.n	8005176 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a16      	ldr	r2, [pc, #88]	@ (80051b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d009      	beq.n	8005176 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a15      	ldr	r2, [pc, #84]	@ (80051bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d004      	beq.n	8005176 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a13      	ldr	r2, [pc, #76]	@ (80051c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d10c      	bne.n	8005190 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800517c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	68ba      	ldr	r2, [r7, #8]
 8005184:	4313      	orrs	r3, r2
 8005186:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3714      	adds	r7, #20
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	40010000 	.word	0x40010000
 80051b4:	40000400 	.word	0x40000400
 80051b8:	40000800 	.word	0x40000800
 80051bc:	40000c00 	.word	0x40000c00
 80051c0:	40014000 	.word	0x40014000

080051c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80051ce:	2300      	movs	r3, #0
 80051d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d101      	bne.n	80051e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80051dc:	2302      	movs	r3, #2
 80051de:	e03d      	b.n	800525c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	4313      	orrs	r3, r2
 8005202:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	4313      	orrs	r3, r2
 8005210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4313      	orrs	r3, r2
 800521e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	4313      	orrs	r3, r2
 800522c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	4313      	orrs	r3, r2
 800523a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	69db      	ldr	r3, [r3, #28]
 8005246:	4313      	orrs	r3, r2
 8005248:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3714      	adds	r7, #20
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e042      	b.n	8005328 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d106      	bne.n	80052bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7fb fede 	bl	8001078 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2224      	movs	r2, #36	@ 0x24
 80052c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68da      	ldr	r2, [r3, #12]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80052d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 fcef 	bl	8005cb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	691a      	ldr	r2, [r3, #16]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80052e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	695a      	ldr	r2, [r3, #20]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80052f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68da      	ldr	r2, [r3, #12]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005308:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2220      	movs	r2, #32
 8005314:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2220      	movs	r2, #32
 800531c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3708      	adds	r7, #8
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	4613      	mov	r3, r2
 800533c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b20      	cmp	r3, #32
 8005348:	d112      	bne.n	8005370 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d002      	beq.n	8005356 <HAL_UART_Receive_IT+0x26>
 8005350:	88fb      	ldrh	r3, [r7, #6]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e00b      	b.n	8005372 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005360:	88fb      	ldrh	r3, [r7, #6]
 8005362:	461a      	mov	r2, r3
 8005364:	68b9      	ldr	r1, [r7, #8]
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f000 fad2 	bl	8005910 <UART_Start_Receive_IT>
 800536c:	4603      	mov	r3, r0
 800536e:	e000      	b.n	8005372 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005370:	2302      	movs	r3, #2
  }
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
	...

0800537c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b0ba      	sub	sp, #232	@ 0xe8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80053a2:	2300      	movs	r3, #0
 80053a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80053a8:	2300      	movs	r3, #0
 80053aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80053ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053b2:	f003 030f 	and.w	r3, r3, #15
 80053b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80053ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10f      	bne.n	80053e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053c6:	f003 0320 	and.w	r3, r3, #32
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d009      	beq.n	80053e2 <HAL_UART_IRQHandler+0x66>
 80053ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053d2:	f003 0320 	and.w	r3, r3, #32
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 fbae 	bl	8005b3c <UART_Receive_IT>
      return;
 80053e0:	e273      	b.n	80058ca <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80053e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f000 80de 	beq.w	80055a8 <HAL_UART_IRQHandler+0x22c>
 80053ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d106      	bne.n	8005406 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80053f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053fc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005400:	2b00      	cmp	r3, #0
 8005402:	f000 80d1 	beq.w	80055a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00b      	beq.n	800542a <HAL_UART_IRQHandler+0xae>
 8005412:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005416:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800541a:	2b00      	cmp	r3, #0
 800541c:	d005      	beq.n	800542a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005422:	f043 0201 	orr.w	r2, r3, #1
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800542a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800542e:	f003 0304 	and.w	r3, r3, #4
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00b      	beq.n	800544e <HAL_UART_IRQHandler+0xd2>
 8005436:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	d005      	beq.n	800544e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005446:	f043 0202 	orr.w	r2, r3, #2
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800544e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00b      	beq.n	8005472 <HAL_UART_IRQHandler+0xf6>
 800545a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b00      	cmp	r3, #0
 8005464:	d005      	beq.n	8005472 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800546a:	f043 0204 	orr.w	r2, r3, #4
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005476:	f003 0308 	and.w	r3, r3, #8
 800547a:	2b00      	cmp	r3, #0
 800547c:	d011      	beq.n	80054a2 <HAL_UART_IRQHandler+0x126>
 800547e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005482:	f003 0320 	and.w	r3, r3, #32
 8005486:	2b00      	cmp	r3, #0
 8005488:	d105      	bne.n	8005496 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800548a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	2b00      	cmp	r3, #0
 8005494:	d005      	beq.n	80054a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800549a:	f043 0208 	orr.w	r2, r3, #8
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f000 820a 	beq.w	80058c0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054b0:	f003 0320 	and.w	r3, r3, #32
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d008      	beq.n	80054ca <HAL_UART_IRQHandler+0x14e>
 80054b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054bc:	f003 0320 	and.w	r3, r3, #32
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d002      	beq.n	80054ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 fb39 	bl	8005b3c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054d4:	2b40      	cmp	r3, #64	@ 0x40
 80054d6:	bf0c      	ite	eq
 80054d8:	2301      	moveq	r3, #1
 80054da:	2300      	movne	r3, #0
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054e6:	f003 0308 	and.w	r3, r3, #8
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d103      	bne.n	80054f6 <HAL_UART_IRQHandler+0x17a>
 80054ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d04f      	beq.n	8005596 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 fa44 	bl	8005984 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005506:	2b40      	cmp	r3, #64	@ 0x40
 8005508:	d141      	bne.n	800558e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	3314      	adds	r3, #20
 8005510:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005514:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005518:	e853 3f00 	ldrex	r3, [r3]
 800551c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005520:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005524:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005528:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	3314      	adds	r3, #20
 8005532:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005536:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800553a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005542:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005546:	e841 2300 	strex	r3, r2, [r1]
 800554a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800554e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1d9      	bne.n	800550a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800555a:	2b00      	cmp	r3, #0
 800555c:	d013      	beq.n	8005586 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005562:	4a8a      	ldr	r2, [pc, #552]	@ (800578c <HAL_UART_IRQHandler+0x410>)
 8005564:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800556a:	4618      	mov	r0, r3
 800556c:	f7fd fa97 	bl	8002a9e <HAL_DMA_Abort_IT>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d016      	beq.n	80055a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800557a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005580:	4610      	mov	r0, r2
 8005582:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005584:	e00e      	b.n	80055a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f9ac 	bl	80058e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800558c:	e00a      	b.n	80055a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f9a8 	bl	80058e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005594:	e006      	b.n	80055a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f9a4 	bl	80058e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80055a2:	e18d      	b.n	80058c0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a4:	bf00      	nop
    return;
 80055a6:	e18b      	b.n	80058c0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	f040 8167 	bne.w	8005880 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80055b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055b6:	f003 0310 	and.w	r3, r3, #16
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f000 8160 	beq.w	8005880 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80055c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055c4:	f003 0310 	and.w	r3, r3, #16
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f000 8159 	beq.w	8005880 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055ce:	2300      	movs	r3, #0
 80055d0:	60bb      	str	r3, [r7, #8]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	60bb      	str	r3, [r7, #8]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	60bb      	str	r3, [r7, #8]
 80055e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ee:	2b40      	cmp	r3, #64	@ 0x40
 80055f0:	f040 80ce 	bne.w	8005790 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005600:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005604:	2b00      	cmp	r3, #0
 8005606:	f000 80a9 	beq.w	800575c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800560e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005612:	429a      	cmp	r2, r3
 8005614:	f080 80a2 	bcs.w	800575c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800561e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005624:	69db      	ldr	r3, [r3, #28]
 8005626:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800562a:	f000 8088 	beq.w	800573e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	330c      	adds	r3, #12
 8005634:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005638:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800563c:	e853 3f00 	ldrex	r3, [r3]
 8005640:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005644:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005648:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800564c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	330c      	adds	r3, #12
 8005656:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800565a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800565e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005662:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005666:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800566a:	e841 2300 	strex	r3, r2, [r1]
 800566e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005672:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1d9      	bne.n	800562e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	3314      	adds	r3, #20
 8005680:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005682:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005684:	e853 3f00 	ldrex	r3, [r3]
 8005688:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800568a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800568c:	f023 0301 	bic.w	r3, r3, #1
 8005690:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	3314      	adds	r3, #20
 800569a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800569e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80056a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80056a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80056aa:	e841 2300 	strex	r3, r2, [r1]
 80056ae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80056b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1e1      	bne.n	800567a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	3314      	adds	r3, #20
 80056bc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056c0:	e853 3f00 	ldrex	r3, [r3]
 80056c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80056c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3314      	adds	r3, #20
 80056d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80056da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80056dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056de:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80056e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80056e2:	e841 2300 	strex	r3, r2, [r1]
 80056e6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80056e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1e3      	bne.n	80056b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2220      	movs	r2, #32
 80056f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	330c      	adds	r3, #12
 8005702:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005704:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005706:	e853 3f00 	ldrex	r3, [r3]
 800570a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800570c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800570e:	f023 0310 	bic.w	r3, r3, #16
 8005712:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	330c      	adds	r3, #12
 800571c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005720:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005722:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005724:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005726:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005728:	e841 2300 	strex	r3, r2, [r1]
 800572c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800572e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1e3      	bne.n	80056fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005738:	4618      	mov	r0, r3
 800573a:	f7fd f940 	bl	80029be <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2202      	movs	r2, #2
 8005742:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800574c:	b29b      	uxth	r3, r3
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	b29b      	uxth	r3, r3
 8005752:	4619      	mov	r1, r3
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 f8cf 	bl	80058f8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800575a:	e0b3      	b.n	80058c4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005760:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005764:	429a      	cmp	r2, r3
 8005766:	f040 80ad 	bne.w	80058c4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800576e:	69db      	ldr	r3, [r3, #28]
 8005770:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005774:	f040 80a6 	bne.w	80058c4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2202      	movs	r2, #2
 800577c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005782:	4619      	mov	r1, r3
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 f8b7 	bl	80058f8 <HAL_UARTEx_RxEventCallback>
      return;
 800578a:	e09b      	b.n	80058c4 <HAL_UART_IRQHandler+0x548>
 800578c:	08005a4b 	.word	0x08005a4b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005798:	b29b      	uxth	r3, r3
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f000 808e 	beq.w	80058c8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80057ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f000 8089 	beq.w	80058c8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	330c      	adds	r3, #12
 80057bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c0:	e853 3f00 	ldrex	r3, [r3]
 80057c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80057c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	330c      	adds	r3, #12
 80057d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80057da:	647a      	str	r2, [r7, #68]	@ 0x44
 80057dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80057e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057e2:	e841 2300 	strex	r3, r2, [r1]
 80057e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80057e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1e3      	bne.n	80057b6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	3314      	adds	r3, #20
 80057f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f8:	e853 3f00 	ldrex	r3, [r3]
 80057fc:	623b      	str	r3, [r7, #32]
   return(result);
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	f023 0301 	bic.w	r3, r3, #1
 8005804:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	3314      	adds	r3, #20
 800580e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005812:	633a      	str	r2, [r7, #48]	@ 0x30
 8005814:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005816:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005818:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800581a:	e841 2300 	strex	r3, r2, [r1]
 800581e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1e3      	bne.n	80057ee <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2220      	movs	r2, #32
 800582a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	330c      	adds	r3, #12
 800583a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	e853 3f00 	ldrex	r3, [r3]
 8005842:	60fb      	str	r3, [r7, #12]
   return(result);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f023 0310 	bic.w	r3, r3, #16
 800584a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	330c      	adds	r3, #12
 8005854:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005858:	61fa      	str	r2, [r7, #28]
 800585a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585c:	69b9      	ldr	r1, [r7, #24]
 800585e:	69fa      	ldr	r2, [r7, #28]
 8005860:	e841 2300 	strex	r3, r2, [r1]
 8005864:	617b      	str	r3, [r7, #20]
   return(result);
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1e3      	bne.n	8005834 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2202      	movs	r2, #2
 8005870:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005872:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005876:	4619      	mov	r1, r3
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 f83d 	bl	80058f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800587e:	e023      	b.n	80058c8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005884:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005888:	2b00      	cmp	r3, #0
 800588a:	d009      	beq.n	80058a0 <HAL_UART_IRQHandler+0x524>
 800588c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005890:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005894:	2b00      	cmp	r3, #0
 8005896:	d003      	beq.n	80058a0 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 f8e7 	bl	8005a6c <UART_Transmit_IT>
    return;
 800589e:	e014      	b.n	80058ca <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80058a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00e      	beq.n	80058ca <HAL_UART_IRQHandler+0x54e>
 80058ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d008      	beq.n	80058ca <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 f927 	bl	8005b0c <UART_EndTransmit_IT>
    return;
 80058be:	e004      	b.n	80058ca <HAL_UART_IRQHandler+0x54e>
    return;
 80058c0:	bf00      	nop
 80058c2:	e002      	b.n	80058ca <HAL_UART_IRQHandler+0x54e>
      return;
 80058c4:	bf00      	nop
 80058c6:	e000      	b.n	80058ca <HAL_UART_IRQHandler+0x54e>
      return;
 80058c8:	bf00      	nop
  }
}
 80058ca:	37e8      	adds	r7, #232	@ 0xe8
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	460b      	mov	r3, r1
 8005902:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005904:	bf00      	nop
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	4613      	mov	r3, r2
 800591c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	88fa      	ldrh	r2, [r7, #6]
 8005928:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	88fa      	ldrh	r2, [r7, #6]
 800592e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2222      	movs	r2, #34	@ 0x22
 800593a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d007      	beq.n	8005956 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68da      	ldr	r2, [r3, #12]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005954:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	695a      	ldr	r2, [r3, #20]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f042 0201 	orr.w	r2, r2, #1
 8005964:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68da      	ldr	r2, [r3, #12]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f042 0220 	orr.w	r2, r2, #32
 8005974:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3714      	adds	r7, #20
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005984:	b480      	push	{r7}
 8005986:	b095      	sub	sp, #84	@ 0x54
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	330c      	adds	r3, #12
 8005992:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005996:	e853 3f00 	ldrex	r3, [r3]
 800599a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800599c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800599e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	330c      	adds	r3, #12
 80059aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80059ac:	643a      	str	r2, [r7, #64]	@ 0x40
 80059ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80059b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80059b4:	e841 2300 	strex	r3, r2, [r1]
 80059b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80059ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1e5      	bne.n	800598c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	3314      	adds	r3, #20
 80059c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c8:	6a3b      	ldr	r3, [r7, #32]
 80059ca:	e853 3f00 	ldrex	r3, [r3]
 80059ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	f023 0301 	bic.w	r3, r3, #1
 80059d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	3314      	adds	r3, #20
 80059de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059e8:	e841 2300 	strex	r3, r2, [r1]
 80059ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80059ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1e5      	bne.n	80059c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d119      	bne.n	8005a30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	330c      	adds	r3, #12
 8005a02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	e853 3f00 	ldrex	r3, [r3]
 8005a0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	f023 0310 	bic.w	r3, r3, #16
 8005a12:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	330c      	adds	r3, #12
 8005a1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a1c:	61ba      	str	r2, [r7, #24]
 8005a1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a20:	6979      	ldr	r1, [r7, #20]
 8005a22:	69ba      	ldr	r2, [r7, #24]
 8005a24:	e841 2300 	strex	r3, r2, [r1]
 8005a28:	613b      	str	r3, [r7, #16]
   return(result);
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1e5      	bne.n	80059fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2220      	movs	r2, #32
 8005a34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005a3e:	bf00      	nop
 8005a40:	3754      	adds	r7, #84	@ 0x54
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b084      	sub	sp, #16
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f7ff ff40 	bl	80058e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a64:	bf00      	nop
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	2b21      	cmp	r3, #33	@ 0x21
 8005a7e:	d13e      	bne.n	8005afe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a88:	d114      	bne.n	8005ab4 <UART_Transmit_IT+0x48>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d110      	bne.n	8005ab4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005aa6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
 8005aac:	1c9a      	adds	r2, r3, #2
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	621a      	str	r2, [r3, #32]
 8005ab2:	e008      	b.n	8005ac6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a1b      	ldr	r3, [r3, #32]
 8005ab8:	1c59      	adds	r1, r3, #1
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	6211      	str	r1, [r2, #32]
 8005abe:	781a      	ldrb	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	3b01      	subs	r3, #1
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d10f      	bne.n	8005afa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68da      	ldr	r2, [r3, #12]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005ae8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68da      	ldr	r2, [r3, #12]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005af8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005afa:	2300      	movs	r3, #0
 8005afc:	e000      	b.n	8005b00 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005afe:	2302      	movs	r3, #2
  }
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3714      	adds	r7, #20
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68da      	ldr	r2, [r3, #12]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b22:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2220      	movs	r2, #32
 8005b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f7ff fecf 	bl	80058d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b08c      	sub	sp, #48	@ 0x30
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005b44:	2300      	movs	r3, #0
 8005b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	2b22      	cmp	r3, #34	@ 0x22
 8005b56:	f040 80aa 	bne.w	8005cae <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b62:	d115      	bne.n	8005b90 <UART_Receive_IT+0x54>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d111      	bne.n	8005b90 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b70:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b82:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b88:	1c9a      	adds	r2, r3, #2
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b8e:	e024      	b.n	8005bda <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b9e:	d007      	beq.n	8005bb0 <UART_Receive_IT+0x74>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10a      	bne.n	8005bbe <UART_Receive_IT+0x82>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d106      	bne.n	8005bbe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	b2da      	uxtb	r2, r3
 8005bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bba:	701a      	strb	r2, [r3, #0]
 8005bbc:	e008      	b.n	8005bd0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bca:	b2da      	uxtb	r2, r3
 8005bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bce:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd4:	1c5a      	adds	r2, r3, #1
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	3b01      	subs	r3, #1
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	4619      	mov	r1, r3
 8005be8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d15d      	bne.n	8005caa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68da      	ldr	r2, [r3, #12]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f022 0220 	bic.w	r2, r2, #32
 8005bfc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68da      	ldr	r2, [r3, #12]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c0c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	695a      	ldr	r2, [r3, #20]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f022 0201 	bic.w	r2, r2, #1
 8005c1c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2220      	movs	r2, #32
 8005c22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d135      	bne.n	8005ca0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	330c      	adds	r3, #12
 8005c40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	e853 3f00 	ldrex	r3, [r3]
 8005c48:	613b      	str	r3, [r7, #16]
   return(result);
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	f023 0310 	bic.w	r3, r3, #16
 8005c50:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	330c      	adds	r3, #12
 8005c58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c5a:	623a      	str	r2, [r7, #32]
 8005c5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5e:	69f9      	ldr	r1, [r7, #28]
 8005c60:	6a3a      	ldr	r2, [r7, #32]
 8005c62:	e841 2300 	strex	r3, r2, [r1]
 8005c66:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1e5      	bne.n	8005c3a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0310 	and.w	r3, r3, #16
 8005c78:	2b10      	cmp	r3, #16
 8005c7a:	d10a      	bne.n	8005c92 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	60fb      	str	r3, [r7, #12]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	60fb      	str	r3, [r7, #12]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	60fb      	str	r3, [r7, #12]
 8005c90:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005c96:	4619      	mov	r1, r3
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f7ff fe2d 	bl	80058f8 <HAL_UARTEx_RxEventCallback>
 8005c9e:	e002      	b.n	8005ca6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7fb fcd3 	bl	800164c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	e002      	b.n	8005cb0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005caa:	2300      	movs	r3, #0
 8005cac:	e000      	b.n	8005cb0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005cae:	2302      	movs	r3, #2
  }
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3730      	adds	r7, #48	@ 0x30
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cbc:	b0c0      	sub	sp, #256	@ 0x100
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cd4:	68d9      	ldr	r1, [r3, #12]
 8005cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	ea40 0301 	orr.w	r3, r0, r1
 8005ce0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ce6:	689a      	ldr	r2, [r3, #8]
 8005ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	431a      	orrs	r2, r3
 8005cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005d10:	f021 010c 	bic.w	r1, r1, #12
 8005d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005d1e:	430b      	orrs	r3, r1
 8005d20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d32:	6999      	ldr	r1, [r3, #24]
 8005d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	ea40 0301 	orr.w	r3, r0, r1
 8005d3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	4b8f      	ldr	r3, [pc, #572]	@ (8005f84 <UART_SetConfig+0x2cc>)
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d005      	beq.n	8005d58 <UART_SetConfig+0xa0>
 8005d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	4b8d      	ldr	r3, [pc, #564]	@ (8005f88 <UART_SetConfig+0x2d0>)
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d104      	bne.n	8005d62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d58:	f7fe f99c 	bl	8004094 <HAL_RCC_GetPCLK2Freq>
 8005d5c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005d60:	e003      	b.n	8005d6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d62:	f7fe f983 	bl	800406c <HAL_RCC_GetPCLK1Freq>
 8005d66:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d6e:	69db      	ldr	r3, [r3, #28]
 8005d70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d74:	f040 810c 	bne.w	8005f90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005d82:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005d86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005d8a:	4622      	mov	r2, r4
 8005d8c:	462b      	mov	r3, r5
 8005d8e:	1891      	adds	r1, r2, r2
 8005d90:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005d92:	415b      	adcs	r3, r3
 8005d94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005d9a:	4621      	mov	r1, r4
 8005d9c:	eb12 0801 	adds.w	r8, r2, r1
 8005da0:	4629      	mov	r1, r5
 8005da2:	eb43 0901 	adc.w	r9, r3, r1
 8005da6:	f04f 0200 	mov.w	r2, #0
 8005daa:	f04f 0300 	mov.w	r3, #0
 8005dae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005db2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005db6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005dba:	4690      	mov	r8, r2
 8005dbc:	4699      	mov	r9, r3
 8005dbe:	4623      	mov	r3, r4
 8005dc0:	eb18 0303 	adds.w	r3, r8, r3
 8005dc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005dc8:	462b      	mov	r3, r5
 8005dca:	eb49 0303 	adc.w	r3, r9, r3
 8005dce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005dde:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005de2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005de6:	460b      	mov	r3, r1
 8005de8:	18db      	adds	r3, r3, r3
 8005dea:	653b      	str	r3, [r7, #80]	@ 0x50
 8005dec:	4613      	mov	r3, r2
 8005dee:	eb42 0303 	adc.w	r3, r2, r3
 8005df2:	657b      	str	r3, [r7, #84]	@ 0x54
 8005df4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005df8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005dfc:	f7fa fa40 	bl	8000280 <__aeabi_uldivmod>
 8005e00:	4602      	mov	r2, r0
 8005e02:	460b      	mov	r3, r1
 8005e04:	4b61      	ldr	r3, [pc, #388]	@ (8005f8c <UART_SetConfig+0x2d4>)
 8005e06:	fba3 2302 	umull	r2, r3, r3, r2
 8005e0a:	095b      	lsrs	r3, r3, #5
 8005e0c:	011c      	lsls	r4, r3, #4
 8005e0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e12:	2200      	movs	r2, #0
 8005e14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e18:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005e1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005e20:	4642      	mov	r2, r8
 8005e22:	464b      	mov	r3, r9
 8005e24:	1891      	adds	r1, r2, r2
 8005e26:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005e28:	415b      	adcs	r3, r3
 8005e2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005e30:	4641      	mov	r1, r8
 8005e32:	eb12 0a01 	adds.w	sl, r2, r1
 8005e36:	4649      	mov	r1, r9
 8005e38:	eb43 0b01 	adc.w	fp, r3, r1
 8005e3c:	f04f 0200 	mov.w	r2, #0
 8005e40:	f04f 0300 	mov.w	r3, #0
 8005e44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005e48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005e4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e50:	4692      	mov	sl, r2
 8005e52:	469b      	mov	fp, r3
 8005e54:	4643      	mov	r3, r8
 8005e56:	eb1a 0303 	adds.w	r3, sl, r3
 8005e5a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e5e:	464b      	mov	r3, r9
 8005e60:	eb4b 0303 	adc.w	r3, fp, r3
 8005e64:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e74:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005e78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	18db      	adds	r3, r3, r3
 8005e80:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e82:	4613      	mov	r3, r2
 8005e84:	eb42 0303 	adc.w	r3, r2, r3
 8005e88:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005e8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005e92:	f7fa f9f5 	bl	8000280 <__aeabi_uldivmod>
 8005e96:	4602      	mov	r2, r0
 8005e98:	460b      	mov	r3, r1
 8005e9a:	4611      	mov	r1, r2
 8005e9c:	4b3b      	ldr	r3, [pc, #236]	@ (8005f8c <UART_SetConfig+0x2d4>)
 8005e9e:	fba3 2301 	umull	r2, r3, r3, r1
 8005ea2:	095b      	lsrs	r3, r3, #5
 8005ea4:	2264      	movs	r2, #100	@ 0x64
 8005ea6:	fb02 f303 	mul.w	r3, r2, r3
 8005eaa:	1acb      	subs	r3, r1, r3
 8005eac:	00db      	lsls	r3, r3, #3
 8005eae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005eb2:	4b36      	ldr	r3, [pc, #216]	@ (8005f8c <UART_SetConfig+0x2d4>)
 8005eb4:	fba3 2302 	umull	r2, r3, r3, r2
 8005eb8:	095b      	lsrs	r3, r3, #5
 8005eba:	005b      	lsls	r3, r3, #1
 8005ebc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005ec0:	441c      	add	r4, r3
 8005ec2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ecc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005ed0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005ed4:	4642      	mov	r2, r8
 8005ed6:	464b      	mov	r3, r9
 8005ed8:	1891      	adds	r1, r2, r2
 8005eda:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005edc:	415b      	adcs	r3, r3
 8005ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ee0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005ee4:	4641      	mov	r1, r8
 8005ee6:	1851      	adds	r1, r2, r1
 8005ee8:	6339      	str	r1, [r7, #48]	@ 0x30
 8005eea:	4649      	mov	r1, r9
 8005eec:	414b      	adcs	r3, r1
 8005eee:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ef0:	f04f 0200 	mov.w	r2, #0
 8005ef4:	f04f 0300 	mov.w	r3, #0
 8005ef8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005efc:	4659      	mov	r1, fp
 8005efe:	00cb      	lsls	r3, r1, #3
 8005f00:	4651      	mov	r1, sl
 8005f02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f06:	4651      	mov	r1, sl
 8005f08:	00ca      	lsls	r2, r1, #3
 8005f0a:	4610      	mov	r0, r2
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	4603      	mov	r3, r0
 8005f10:	4642      	mov	r2, r8
 8005f12:	189b      	adds	r3, r3, r2
 8005f14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f18:	464b      	mov	r3, r9
 8005f1a:	460a      	mov	r2, r1
 8005f1c:	eb42 0303 	adc.w	r3, r2, r3
 8005f20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005f30:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005f34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005f38:	460b      	mov	r3, r1
 8005f3a:	18db      	adds	r3, r3, r3
 8005f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f3e:	4613      	mov	r3, r2
 8005f40:	eb42 0303 	adc.w	r3, r2, r3
 8005f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005f4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005f4e:	f7fa f997 	bl	8000280 <__aeabi_uldivmod>
 8005f52:	4602      	mov	r2, r0
 8005f54:	460b      	mov	r3, r1
 8005f56:	4b0d      	ldr	r3, [pc, #52]	@ (8005f8c <UART_SetConfig+0x2d4>)
 8005f58:	fba3 1302 	umull	r1, r3, r3, r2
 8005f5c:	095b      	lsrs	r3, r3, #5
 8005f5e:	2164      	movs	r1, #100	@ 0x64
 8005f60:	fb01 f303 	mul.w	r3, r1, r3
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	00db      	lsls	r3, r3, #3
 8005f68:	3332      	adds	r3, #50	@ 0x32
 8005f6a:	4a08      	ldr	r2, [pc, #32]	@ (8005f8c <UART_SetConfig+0x2d4>)
 8005f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f70:	095b      	lsrs	r3, r3, #5
 8005f72:	f003 0207 	and.w	r2, r3, #7
 8005f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4422      	add	r2, r4
 8005f7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f80:	e106      	b.n	8006190 <UART_SetConfig+0x4d8>
 8005f82:	bf00      	nop
 8005f84:	40011000 	.word	0x40011000
 8005f88:	40011400 	.word	0x40011400
 8005f8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f94:	2200      	movs	r2, #0
 8005f96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005f9a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005f9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005fa2:	4642      	mov	r2, r8
 8005fa4:	464b      	mov	r3, r9
 8005fa6:	1891      	adds	r1, r2, r2
 8005fa8:	6239      	str	r1, [r7, #32]
 8005faa:	415b      	adcs	r3, r3
 8005fac:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005fb2:	4641      	mov	r1, r8
 8005fb4:	1854      	adds	r4, r2, r1
 8005fb6:	4649      	mov	r1, r9
 8005fb8:	eb43 0501 	adc.w	r5, r3, r1
 8005fbc:	f04f 0200 	mov.w	r2, #0
 8005fc0:	f04f 0300 	mov.w	r3, #0
 8005fc4:	00eb      	lsls	r3, r5, #3
 8005fc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005fca:	00e2      	lsls	r2, r4, #3
 8005fcc:	4614      	mov	r4, r2
 8005fce:	461d      	mov	r5, r3
 8005fd0:	4643      	mov	r3, r8
 8005fd2:	18e3      	adds	r3, r4, r3
 8005fd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005fd8:	464b      	mov	r3, r9
 8005fda:	eb45 0303 	adc.w	r3, r5, r3
 8005fde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005fee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005ff2:	f04f 0200 	mov.w	r2, #0
 8005ff6:	f04f 0300 	mov.w	r3, #0
 8005ffa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005ffe:	4629      	mov	r1, r5
 8006000:	008b      	lsls	r3, r1, #2
 8006002:	4621      	mov	r1, r4
 8006004:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006008:	4621      	mov	r1, r4
 800600a:	008a      	lsls	r2, r1, #2
 800600c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006010:	f7fa f936 	bl	8000280 <__aeabi_uldivmod>
 8006014:	4602      	mov	r2, r0
 8006016:	460b      	mov	r3, r1
 8006018:	4b60      	ldr	r3, [pc, #384]	@ (800619c <UART_SetConfig+0x4e4>)
 800601a:	fba3 2302 	umull	r2, r3, r3, r2
 800601e:	095b      	lsrs	r3, r3, #5
 8006020:	011c      	lsls	r4, r3, #4
 8006022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006026:	2200      	movs	r2, #0
 8006028:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800602c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006030:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006034:	4642      	mov	r2, r8
 8006036:	464b      	mov	r3, r9
 8006038:	1891      	adds	r1, r2, r2
 800603a:	61b9      	str	r1, [r7, #24]
 800603c:	415b      	adcs	r3, r3
 800603e:	61fb      	str	r3, [r7, #28]
 8006040:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006044:	4641      	mov	r1, r8
 8006046:	1851      	adds	r1, r2, r1
 8006048:	6139      	str	r1, [r7, #16]
 800604a:	4649      	mov	r1, r9
 800604c:	414b      	adcs	r3, r1
 800604e:	617b      	str	r3, [r7, #20]
 8006050:	f04f 0200 	mov.w	r2, #0
 8006054:	f04f 0300 	mov.w	r3, #0
 8006058:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800605c:	4659      	mov	r1, fp
 800605e:	00cb      	lsls	r3, r1, #3
 8006060:	4651      	mov	r1, sl
 8006062:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006066:	4651      	mov	r1, sl
 8006068:	00ca      	lsls	r2, r1, #3
 800606a:	4610      	mov	r0, r2
 800606c:	4619      	mov	r1, r3
 800606e:	4603      	mov	r3, r0
 8006070:	4642      	mov	r2, r8
 8006072:	189b      	adds	r3, r3, r2
 8006074:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006078:	464b      	mov	r3, r9
 800607a:	460a      	mov	r2, r1
 800607c:	eb42 0303 	adc.w	r3, r2, r3
 8006080:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800608e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006090:	f04f 0200 	mov.w	r2, #0
 8006094:	f04f 0300 	mov.w	r3, #0
 8006098:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800609c:	4649      	mov	r1, r9
 800609e:	008b      	lsls	r3, r1, #2
 80060a0:	4641      	mov	r1, r8
 80060a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060a6:	4641      	mov	r1, r8
 80060a8:	008a      	lsls	r2, r1, #2
 80060aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80060ae:	f7fa f8e7 	bl	8000280 <__aeabi_uldivmod>
 80060b2:	4602      	mov	r2, r0
 80060b4:	460b      	mov	r3, r1
 80060b6:	4611      	mov	r1, r2
 80060b8:	4b38      	ldr	r3, [pc, #224]	@ (800619c <UART_SetConfig+0x4e4>)
 80060ba:	fba3 2301 	umull	r2, r3, r3, r1
 80060be:	095b      	lsrs	r3, r3, #5
 80060c0:	2264      	movs	r2, #100	@ 0x64
 80060c2:	fb02 f303 	mul.w	r3, r2, r3
 80060c6:	1acb      	subs	r3, r1, r3
 80060c8:	011b      	lsls	r3, r3, #4
 80060ca:	3332      	adds	r3, #50	@ 0x32
 80060cc:	4a33      	ldr	r2, [pc, #204]	@ (800619c <UART_SetConfig+0x4e4>)
 80060ce:	fba2 2303 	umull	r2, r3, r2, r3
 80060d2:	095b      	lsrs	r3, r3, #5
 80060d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80060d8:	441c      	add	r4, r3
 80060da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060de:	2200      	movs	r2, #0
 80060e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80060e2:	677a      	str	r2, [r7, #116]	@ 0x74
 80060e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80060e8:	4642      	mov	r2, r8
 80060ea:	464b      	mov	r3, r9
 80060ec:	1891      	adds	r1, r2, r2
 80060ee:	60b9      	str	r1, [r7, #8]
 80060f0:	415b      	adcs	r3, r3
 80060f2:	60fb      	str	r3, [r7, #12]
 80060f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060f8:	4641      	mov	r1, r8
 80060fa:	1851      	adds	r1, r2, r1
 80060fc:	6039      	str	r1, [r7, #0]
 80060fe:	4649      	mov	r1, r9
 8006100:	414b      	adcs	r3, r1
 8006102:	607b      	str	r3, [r7, #4]
 8006104:	f04f 0200 	mov.w	r2, #0
 8006108:	f04f 0300 	mov.w	r3, #0
 800610c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006110:	4659      	mov	r1, fp
 8006112:	00cb      	lsls	r3, r1, #3
 8006114:	4651      	mov	r1, sl
 8006116:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800611a:	4651      	mov	r1, sl
 800611c:	00ca      	lsls	r2, r1, #3
 800611e:	4610      	mov	r0, r2
 8006120:	4619      	mov	r1, r3
 8006122:	4603      	mov	r3, r0
 8006124:	4642      	mov	r2, r8
 8006126:	189b      	adds	r3, r3, r2
 8006128:	66bb      	str	r3, [r7, #104]	@ 0x68
 800612a:	464b      	mov	r3, r9
 800612c:	460a      	mov	r2, r1
 800612e:	eb42 0303 	adc.w	r3, r2, r3
 8006132:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	663b      	str	r3, [r7, #96]	@ 0x60
 800613e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006140:	f04f 0200 	mov.w	r2, #0
 8006144:	f04f 0300 	mov.w	r3, #0
 8006148:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800614c:	4649      	mov	r1, r9
 800614e:	008b      	lsls	r3, r1, #2
 8006150:	4641      	mov	r1, r8
 8006152:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006156:	4641      	mov	r1, r8
 8006158:	008a      	lsls	r2, r1, #2
 800615a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800615e:	f7fa f88f 	bl	8000280 <__aeabi_uldivmod>
 8006162:	4602      	mov	r2, r0
 8006164:	460b      	mov	r3, r1
 8006166:	4b0d      	ldr	r3, [pc, #52]	@ (800619c <UART_SetConfig+0x4e4>)
 8006168:	fba3 1302 	umull	r1, r3, r3, r2
 800616c:	095b      	lsrs	r3, r3, #5
 800616e:	2164      	movs	r1, #100	@ 0x64
 8006170:	fb01 f303 	mul.w	r3, r1, r3
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	011b      	lsls	r3, r3, #4
 8006178:	3332      	adds	r3, #50	@ 0x32
 800617a:	4a08      	ldr	r2, [pc, #32]	@ (800619c <UART_SetConfig+0x4e4>)
 800617c:	fba2 2303 	umull	r2, r3, r2, r3
 8006180:	095b      	lsrs	r3, r3, #5
 8006182:	f003 020f 	and.w	r2, r3, #15
 8006186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4422      	add	r2, r4
 800618e:	609a      	str	r2, [r3, #8]
}
 8006190:	bf00      	nop
 8006192:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006196:	46bd      	mov	sp, r7
 8006198:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800619c:	51eb851f 	.word	0x51eb851f

080061a0 <siprintf>:
 80061a0:	b40e      	push	{r1, r2, r3}
 80061a2:	b510      	push	{r4, lr}
 80061a4:	b09d      	sub	sp, #116	@ 0x74
 80061a6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80061a8:	9002      	str	r0, [sp, #8]
 80061aa:	9006      	str	r0, [sp, #24]
 80061ac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80061b0:	480a      	ldr	r0, [pc, #40]	@ (80061dc <siprintf+0x3c>)
 80061b2:	9107      	str	r1, [sp, #28]
 80061b4:	9104      	str	r1, [sp, #16]
 80061b6:	490a      	ldr	r1, [pc, #40]	@ (80061e0 <siprintf+0x40>)
 80061b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80061bc:	9105      	str	r1, [sp, #20]
 80061be:	2400      	movs	r4, #0
 80061c0:	a902      	add	r1, sp, #8
 80061c2:	6800      	ldr	r0, [r0, #0]
 80061c4:	9301      	str	r3, [sp, #4]
 80061c6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80061c8:	f000 f994 	bl	80064f4 <_svfiprintf_r>
 80061cc:	9b02      	ldr	r3, [sp, #8]
 80061ce:	701c      	strb	r4, [r3, #0]
 80061d0:	b01d      	add	sp, #116	@ 0x74
 80061d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061d6:	b003      	add	sp, #12
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	200000b4 	.word	0x200000b4
 80061e0:	ffff0208 	.word	0xffff0208

080061e4 <memset>:
 80061e4:	4402      	add	r2, r0
 80061e6:	4603      	mov	r3, r0
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d100      	bne.n	80061ee <memset+0xa>
 80061ec:	4770      	bx	lr
 80061ee:	f803 1b01 	strb.w	r1, [r3], #1
 80061f2:	e7f9      	b.n	80061e8 <memset+0x4>

080061f4 <__errno>:
 80061f4:	4b01      	ldr	r3, [pc, #4]	@ (80061fc <__errno+0x8>)
 80061f6:	6818      	ldr	r0, [r3, #0]
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	200000b4 	.word	0x200000b4

08006200 <__libc_init_array>:
 8006200:	b570      	push	{r4, r5, r6, lr}
 8006202:	4d0d      	ldr	r5, [pc, #52]	@ (8006238 <__libc_init_array+0x38>)
 8006204:	4c0d      	ldr	r4, [pc, #52]	@ (800623c <__libc_init_array+0x3c>)
 8006206:	1b64      	subs	r4, r4, r5
 8006208:	10a4      	asrs	r4, r4, #2
 800620a:	2600      	movs	r6, #0
 800620c:	42a6      	cmp	r6, r4
 800620e:	d109      	bne.n	8006224 <__libc_init_array+0x24>
 8006210:	4d0b      	ldr	r5, [pc, #44]	@ (8006240 <__libc_init_array+0x40>)
 8006212:	4c0c      	ldr	r4, [pc, #48]	@ (8006244 <__libc_init_array+0x44>)
 8006214:	f000 fc64 	bl	8006ae0 <_init>
 8006218:	1b64      	subs	r4, r4, r5
 800621a:	10a4      	asrs	r4, r4, #2
 800621c:	2600      	movs	r6, #0
 800621e:	42a6      	cmp	r6, r4
 8006220:	d105      	bne.n	800622e <__libc_init_array+0x2e>
 8006222:	bd70      	pop	{r4, r5, r6, pc}
 8006224:	f855 3b04 	ldr.w	r3, [r5], #4
 8006228:	4798      	blx	r3
 800622a:	3601      	adds	r6, #1
 800622c:	e7ee      	b.n	800620c <__libc_init_array+0xc>
 800622e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006232:	4798      	blx	r3
 8006234:	3601      	adds	r6, #1
 8006236:	e7f2      	b.n	800621e <__libc_init_array+0x1e>
 8006238:	08006b84 	.word	0x08006b84
 800623c:	08006b84 	.word	0x08006b84
 8006240:	08006b84 	.word	0x08006b84
 8006244:	08006b88 	.word	0x08006b88

08006248 <__retarget_lock_acquire_recursive>:
 8006248:	4770      	bx	lr

0800624a <__retarget_lock_release_recursive>:
 800624a:	4770      	bx	lr

0800624c <_free_r>:
 800624c:	b538      	push	{r3, r4, r5, lr}
 800624e:	4605      	mov	r5, r0
 8006250:	2900      	cmp	r1, #0
 8006252:	d041      	beq.n	80062d8 <_free_r+0x8c>
 8006254:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006258:	1f0c      	subs	r4, r1, #4
 800625a:	2b00      	cmp	r3, #0
 800625c:	bfb8      	it	lt
 800625e:	18e4      	addlt	r4, r4, r3
 8006260:	f000 f8e0 	bl	8006424 <__malloc_lock>
 8006264:	4a1d      	ldr	r2, [pc, #116]	@ (80062dc <_free_r+0x90>)
 8006266:	6813      	ldr	r3, [r2, #0]
 8006268:	b933      	cbnz	r3, 8006278 <_free_r+0x2c>
 800626a:	6063      	str	r3, [r4, #4]
 800626c:	6014      	str	r4, [r2, #0]
 800626e:	4628      	mov	r0, r5
 8006270:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006274:	f000 b8dc 	b.w	8006430 <__malloc_unlock>
 8006278:	42a3      	cmp	r3, r4
 800627a:	d908      	bls.n	800628e <_free_r+0x42>
 800627c:	6820      	ldr	r0, [r4, #0]
 800627e:	1821      	adds	r1, r4, r0
 8006280:	428b      	cmp	r3, r1
 8006282:	bf01      	itttt	eq
 8006284:	6819      	ldreq	r1, [r3, #0]
 8006286:	685b      	ldreq	r3, [r3, #4]
 8006288:	1809      	addeq	r1, r1, r0
 800628a:	6021      	streq	r1, [r4, #0]
 800628c:	e7ed      	b.n	800626a <_free_r+0x1e>
 800628e:	461a      	mov	r2, r3
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	b10b      	cbz	r3, 8006298 <_free_r+0x4c>
 8006294:	42a3      	cmp	r3, r4
 8006296:	d9fa      	bls.n	800628e <_free_r+0x42>
 8006298:	6811      	ldr	r1, [r2, #0]
 800629a:	1850      	adds	r0, r2, r1
 800629c:	42a0      	cmp	r0, r4
 800629e:	d10b      	bne.n	80062b8 <_free_r+0x6c>
 80062a0:	6820      	ldr	r0, [r4, #0]
 80062a2:	4401      	add	r1, r0
 80062a4:	1850      	adds	r0, r2, r1
 80062a6:	4283      	cmp	r3, r0
 80062a8:	6011      	str	r1, [r2, #0]
 80062aa:	d1e0      	bne.n	800626e <_free_r+0x22>
 80062ac:	6818      	ldr	r0, [r3, #0]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	6053      	str	r3, [r2, #4]
 80062b2:	4408      	add	r0, r1
 80062b4:	6010      	str	r0, [r2, #0]
 80062b6:	e7da      	b.n	800626e <_free_r+0x22>
 80062b8:	d902      	bls.n	80062c0 <_free_r+0x74>
 80062ba:	230c      	movs	r3, #12
 80062bc:	602b      	str	r3, [r5, #0]
 80062be:	e7d6      	b.n	800626e <_free_r+0x22>
 80062c0:	6820      	ldr	r0, [r4, #0]
 80062c2:	1821      	adds	r1, r4, r0
 80062c4:	428b      	cmp	r3, r1
 80062c6:	bf04      	itt	eq
 80062c8:	6819      	ldreq	r1, [r3, #0]
 80062ca:	685b      	ldreq	r3, [r3, #4]
 80062cc:	6063      	str	r3, [r4, #4]
 80062ce:	bf04      	itt	eq
 80062d0:	1809      	addeq	r1, r1, r0
 80062d2:	6021      	streq	r1, [r4, #0]
 80062d4:	6054      	str	r4, [r2, #4]
 80062d6:	e7ca      	b.n	800626e <_free_r+0x22>
 80062d8:	bd38      	pop	{r3, r4, r5, pc}
 80062da:	bf00      	nop
 80062dc:	20000510 	.word	0x20000510

080062e0 <sbrk_aligned>:
 80062e0:	b570      	push	{r4, r5, r6, lr}
 80062e2:	4e0f      	ldr	r6, [pc, #60]	@ (8006320 <sbrk_aligned+0x40>)
 80062e4:	460c      	mov	r4, r1
 80062e6:	6831      	ldr	r1, [r6, #0]
 80062e8:	4605      	mov	r5, r0
 80062ea:	b911      	cbnz	r1, 80062f2 <sbrk_aligned+0x12>
 80062ec:	f000 fba4 	bl	8006a38 <_sbrk_r>
 80062f0:	6030      	str	r0, [r6, #0]
 80062f2:	4621      	mov	r1, r4
 80062f4:	4628      	mov	r0, r5
 80062f6:	f000 fb9f 	bl	8006a38 <_sbrk_r>
 80062fa:	1c43      	adds	r3, r0, #1
 80062fc:	d103      	bne.n	8006306 <sbrk_aligned+0x26>
 80062fe:	f04f 34ff 	mov.w	r4, #4294967295
 8006302:	4620      	mov	r0, r4
 8006304:	bd70      	pop	{r4, r5, r6, pc}
 8006306:	1cc4      	adds	r4, r0, #3
 8006308:	f024 0403 	bic.w	r4, r4, #3
 800630c:	42a0      	cmp	r0, r4
 800630e:	d0f8      	beq.n	8006302 <sbrk_aligned+0x22>
 8006310:	1a21      	subs	r1, r4, r0
 8006312:	4628      	mov	r0, r5
 8006314:	f000 fb90 	bl	8006a38 <_sbrk_r>
 8006318:	3001      	adds	r0, #1
 800631a:	d1f2      	bne.n	8006302 <sbrk_aligned+0x22>
 800631c:	e7ef      	b.n	80062fe <sbrk_aligned+0x1e>
 800631e:	bf00      	nop
 8006320:	2000050c 	.word	0x2000050c

08006324 <_malloc_r>:
 8006324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006328:	1ccd      	adds	r5, r1, #3
 800632a:	f025 0503 	bic.w	r5, r5, #3
 800632e:	3508      	adds	r5, #8
 8006330:	2d0c      	cmp	r5, #12
 8006332:	bf38      	it	cc
 8006334:	250c      	movcc	r5, #12
 8006336:	2d00      	cmp	r5, #0
 8006338:	4606      	mov	r6, r0
 800633a:	db01      	blt.n	8006340 <_malloc_r+0x1c>
 800633c:	42a9      	cmp	r1, r5
 800633e:	d904      	bls.n	800634a <_malloc_r+0x26>
 8006340:	230c      	movs	r3, #12
 8006342:	6033      	str	r3, [r6, #0]
 8006344:	2000      	movs	r0, #0
 8006346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800634a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006420 <_malloc_r+0xfc>
 800634e:	f000 f869 	bl	8006424 <__malloc_lock>
 8006352:	f8d8 3000 	ldr.w	r3, [r8]
 8006356:	461c      	mov	r4, r3
 8006358:	bb44      	cbnz	r4, 80063ac <_malloc_r+0x88>
 800635a:	4629      	mov	r1, r5
 800635c:	4630      	mov	r0, r6
 800635e:	f7ff ffbf 	bl	80062e0 <sbrk_aligned>
 8006362:	1c43      	adds	r3, r0, #1
 8006364:	4604      	mov	r4, r0
 8006366:	d158      	bne.n	800641a <_malloc_r+0xf6>
 8006368:	f8d8 4000 	ldr.w	r4, [r8]
 800636c:	4627      	mov	r7, r4
 800636e:	2f00      	cmp	r7, #0
 8006370:	d143      	bne.n	80063fa <_malloc_r+0xd6>
 8006372:	2c00      	cmp	r4, #0
 8006374:	d04b      	beq.n	800640e <_malloc_r+0xea>
 8006376:	6823      	ldr	r3, [r4, #0]
 8006378:	4639      	mov	r1, r7
 800637a:	4630      	mov	r0, r6
 800637c:	eb04 0903 	add.w	r9, r4, r3
 8006380:	f000 fb5a 	bl	8006a38 <_sbrk_r>
 8006384:	4581      	cmp	r9, r0
 8006386:	d142      	bne.n	800640e <_malloc_r+0xea>
 8006388:	6821      	ldr	r1, [r4, #0]
 800638a:	1a6d      	subs	r5, r5, r1
 800638c:	4629      	mov	r1, r5
 800638e:	4630      	mov	r0, r6
 8006390:	f7ff ffa6 	bl	80062e0 <sbrk_aligned>
 8006394:	3001      	adds	r0, #1
 8006396:	d03a      	beq.n	800640e <_malloc_r+0xea>
 8006398:	6823      	ldr	r3, [r4, #0]
 800639a:	442b      	add	r3, r5
 800639c:	6023      	str	r3, [r4, #0]
 800639e:	f8d8 3000 	ldr.w	r3, [r8]
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	bb62      	cbnz	r2, 8006400 <_malloc_r+0xdc>
 80063a6:	f8c8 7000 	str.w	r7, [r8]
 80063aa:	e00f      	b.n	80063cc <_malloc_r+0xa8>
 80063ac:	6822      	ldr	r2, [r4, #0]
 80063ae:	1b52      	subs	r2, r2, r5
 80063b0:	d420      	bmi.n	80063f4 <_malloc_r+0xd0>
 80063b2:	2a0b      	cmp	r2, #11
 80063b4:	d917      	bls.n	80063e6 <_malloc_r+0xc2>
 80063b6:	1961      	adds	r1, r4, r5
 80063b8:	42a3      	cmp	r3, r4
 80063ba:	6025      	str	r5, [r4, #0]
 80063bc:	bf18      	it	ne
 80063be:	6059      	strne	r1, [r3, #4]
 80063c0:	6863      	ldr	r3, [r4, #4]
 80063c2:	bf08      	it	eq
 80063c4:	f8c8 1000 	streq.w	r1, [r8]
 80063c8:	5162      	str	r2, [r4, r5]
 80063ca:	604b      	str	r3, [r1, #4]
 80063cc:	4630      	mov	r0, r6
 80063ce:	f000 f82f 	bl	8006430 <__malloc_unlock>
 80063d2:	f104 000b 	add.w	r0, r4, #11
 80063d6:	1d23      	adds	r3, r4, #4
 80063d8:	f020 0007 	bic.w	r0, r0, #7
 80063dc:	1ac2      	subs	r2, r0, r3
 80063de:	bf1c      	itt	ne
 80063e0:	1a1b      	subne	r3, r3, r0
 80063e2:	50a3      	strne	r3, [r4, r2]
 80063e4:	e7af      	b.n	8006346 <_malloc_r+0x22>
 80063e6:	6862      	ldr	r2, [r4, #4]
 80063e8:	42a3      	cmp	r3, r4
 80063ea:	bf0c      	ite	eq
 80063ec:	f8c8 2000 	streq.w	r2, [r8]
 80063f0:	605a      	strne	r2, [r3, #4]
 80063f2:	e7eb      	b.n	80063cc <_malloc_r+0xa8>
 80063f4:	4623      	mov	r3, r4
 80063f6:	6864      	ldr	r4, [r4, #4]
 80063f8:	e7ae      	b.n	8006358 <_malloc_r+0x34>
 80063fa:	463c      	mov	r4, r7
 80063fc:	687f      	ldr	r7, [r7, #4]
 80063fe:	e7b6      	b.n	800636e <_malloc_r+0x4a>
 8006400:	461a      	mov	r2, r3
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	42a3      	cmp	r3, r4
 8006406:	d1fb      	bne.n	8006400 <_malloc_r+0xdc>
 8006408:	2300      	movs	r3, #0
 800640a:	6053      	str	r3, [r2, #4]
 800640c:	e7de      	b.n	80063cc <_malloc_r+0xa8>
 800640e:	230c      	movs	r3, #12
 8006410:	6033      	str	r3, [r6, #0]
 8006412:	4630      	mov	r0, r6
 8006414:	f000 f80c 	bl	8006430 <__malloc_unlock>
 8006418:	e794      	b.n	8006344 <_malloc_r+0x20>
 800641a:	6005      	str	r5, [r0, #0]
 800641c:	e7d6      	b.n	80063cc <_malloc_r+0xa8>
 800641e:	bf00      	nop
 8006420:	20000510 	.word	0x20000510

08006424 <__malloc_lock>:
 8006424:	4801      	ldr	r0, [pc, #4]	@ (800642c <__malloc_lock+0x8>)
 8006426:	f7ff bf0f 	b.w	8006248 <__retarget_lock_acquire_recursive>
 800642a:	bf00      	nop
 800642c:	20000508 	.word	0x20000508

08006430 <__malloc_unlock>:
 8006430:	4801      	ldr	r0, [pc, #4]	@ (8006438 <__malloc_unlock+0x8>)
 8006432:	f7ff bf0a 	b.w	800624a <__retarget_lock_release_recursive>
 8006436:	bf00      	nop
 8006438:	20000508 	.word	0x20000508

0800643c <__ssputs_r>:
 800643c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006440:	688e      	ldr	r6, [r1, #8]
 8006442:	461f      	mov	r7, r3
 8006444:	42be      	cmp	r6, r7
 8006446:	680b      	ldr	r3, [r1, #0]
 8006448:	4682      	mov	sl, r0
 800644a:	460c      	mov	r4, r1
 800644c:	4690      	mov	r8, r2
 800644e:	d82d      	bhi.n	80064ac <__ssputs_r+0x70>
 8006450:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006454:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006458:	d026      	beq.n	80064a8 <__ssputs_r+0x6c>
 800645a:	6965      	ldr	r5, [r4, #20]
 800645c:	6909      	ldr	r1, [r1, #16]
 800645e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006462:	eba3 0901 	sub.w	r9, r3, r1
 8006466:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800646a:	1c7b      	adds	r3, r7, #1
 800646c:	444b      	add	r3, r9
 800646e:	106d      	asrs	r5, r5, #1
 8006470:	429d      	cmp	r5, r3
 8006472:	bf38      	it	cc
 8006474:	461d      	movcc	r5, r3
 8006476:	0553      	lsls	r3, r2, #21
 8006478:	d527      	bpl.n	80064ca <__ssputs_r+0x8e>
 800647a:	4629      	mov	r1, r5
 800647c:	f7ff ff52 	bl	8006324 <_malloc_r>
 8006480:	4606      	mov	r6, r0
 8006482:	b360      	cbz	r0, 80064de <__ssputs_r+0xa2>
 8006484:	6921      	ldr	r1, [r4, #16]
 8006486:	464a      	mov	r2, r9
 8006488:	f000 fae6 	bl	8006a58 <memcpy>
 800648c:	89a3      	ldrh	r3, [r4, #12]
 800648e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006492:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006496:	81a3      	strh	r3, [r4, #12]
 8006498:	6126      	str	r6, [r4, #16]
 800649a:	6165      	str	r5, [r4, #20]
 800649c:	444e      	add	r6, r9
 800649e:	eba5 0509 	sub.w	r5, r5, r9
 80064a2:	6026      	str	r6, [r4, #0]
 80064a4:	60a5      	str	r5, [r4, #8]
 80064a6:	463e      	mov	r6, r7
 80064a8:	42be      	cmp	r6, r7
 80064aa:	d900      	bls.n	80064ae <__ssputs_r+0x72>
 80064ac:	463e      	mov	r6, r7
 80064ae:	6820      	ldr	r0, [r4, #0]
 80064b0:	4632      	mov	r2, r6
 80064b2:	4641      	mov	r1, r8
 80064b4:	f000 faa6 	bl	8006a04 <memmove>
 80064b8:	68a3      	ldr	r3, [r4, #8]
 80064ba:	1b9b      	subs	r3, r3, r6
 80064bc:	60a3      	str	r3, [r4, #8]
 80064be:	6823      	ldr	r3, [r4, #0]
 80064c0:	4433      	add	r3, r6
 80064c2:	6023      	str	r3, [r4, #0]
 80064c4:	2000      	movs	r0, #0
 80064c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064ca:	462a      	mov	r2, r5
 80064cc:	f000 fad2 	bl	8006a74 <_realloc_r>
 80064d0:	4606      	mov	r6, r0
 80064d2:	2800      	cmp	r0, #0
 80064d4:	d1e0      	bne.n	8006498 <__ssputs_r+0x5c>
 80064d6:	6921      	ldr	r1, [r4, #16]
 80064d8:	4650      	mov	r0, sl
 80064da:	f7ff feb7 	bl	800624c <_free_r>
 80064de:	230c      	movs	r3, #12
 80064e0:	f8ca 3000 	str.w	r3, [sl]
 80064e4:	89a3      	ldrh	r3, [r4, #12]
 80064e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064ea:	81a3      	strh	r3, [r4, #12]
 80064ec:	f04f 30ff 	mov.w	r0, #4294967295
 80064f0:	e7e9      	b.n	80064c6 <__ssputs_r+0x8a>
	...

080064f4 <_svfiprintf_r>:
 80064f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064f8:	4698      	mov	r8, r3
 80064fa:	898b      	ldrh	r3, [r1, #12]
 80064fc:	061b      	lsls	r3, r3, #24
 80064fe:	b09d      	sub	sp, #116	@ 0x74
 8006500:	4607      	mov	r7, r0
 8006502:	460d      	mov	r5, r1
 8006504:	4614      	mov	r4, r2
 8006506:	d510      	bpl.n	800652a <_svfiprintf_r+0x36>
 8006508:	690b      	ldr	r3, [r1, #16]
 800650a:	b973      	cbnz	r3, 800652a <_svfiprintf_r+0x36>
 800650c:	2140      	movs	r1, #64	@ 0x40
 800650e:	f7ff ff09 	bl	8006324 <_malloc_r>
 8006512:	6028      	str	r0, [r5, #0]
 8006514:	6128      	str	r0, [r5, #16]
 8006516:	b930      	cbnz	r0, 8006526 <_svfiprintf_r+0x32>
 8006518:	230c      	movs	r3, #12
 800651a:	603b      	str	r3, [r7, #0]
 800651c:	f04f 30ff 	mov.w	r0, #4294967295
 8006520:	b01d      	add	sp, #116	@ 0x74
 8006522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006526:	2340      	movs	r3, #64	@ 0x40
 8006528:	616b      	str	r3, [r5, #20]
 800652a:	2300      	movs	r3, #0
 800652c:	9309      	str	r3, [sp, #36]	@ 0x24
 800652e:	2320      	movs	r3, #32
 8006530:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006534:	f8cd 800c 	str.w	r8, [sp, #12]
 8006538:	2330      	movs	r3, #48	@ 0x30
 800653a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80066d8 <_svfiprintf_r+0x1e4>
 800653e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006542:	f04f 0901 	mov.w	r9, #1
 8006546:	4623      	mov	r3, r4
 8006548:	469a      	mov	sl, r3
 800654a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800654e:	b10a      	cbz	r2, 8006554 <_svfiprintf_r+0x60>
 8006550:	2a25      	cmp	r2, #37	@ 0x25
 8006552:	d1f9      	bne.n	8006548 <_svfiprintf_r+0x54>
 8006554:	ebba 0b04 	subs.w	fp, sl, r4
 8006558:	d00b      	beq.n	8006572 <_svfiprintf_r+0x7e>
 800655a:	465b      	mov	r3, fp
 800655c:	4622      	mov	r2, r4
 800655e:	4629      	mov	r1, r5
 8006560:	4638      	mov	r0, r7
 8006562:	f7ff ff6b 	bl	800643c <__ssputs_r>
 8006566:	3001      	adds	r0, #1
 8006568:	f000 80a7 	beq.w	80066ba <_svfiprintf_r+0x1c6>
 800656c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800656e:	445a      	add	r2, fp
 8006570:	9209      	str	r2, [sp, #36]	@ 0x24
 8006572:	f89a 3000 	ldrb.w	r3, [sl]
 8006576:	2b00      	cmp	r3, #0
 8006578:	f000 809f 	beq.w	80066ba <_svfiprintf_r+0x1c6>
 800657c:	2300      	movs	r3, #0
 800657e:	f04f 32ff 	mov.w	r2, #4294967295
 8006582:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006586:	f10a 0a01 	add.w	sl, sl, #1
 800658a:	9304      	str	r3, [sp, #16]
 800658c:	9307      	str	r3, [sp, #28]
 800658e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006592:	931a      	str	r3, [sp, #104]	@ 0x68
 8006594:	4654      	mov	r4, sl
 8006596:	2205      	movs	r2, #5
 8006598:	f814 1b01 	ldrb.w	r1, [r4], #1
 800659c:	484e      	ldr	r0, [pc, #312]	@ (80066d8 <_svfiprintf_r+0x1e4>)
 800659e:	f7f9 fe1f 	bl	80001e0 <memchr>
 80065a2:	9a04      	ldr	r2, [sp, #16]
 80065a4:	b9d8      	cbnz	r0, 80065de <_svfiprintf_r+0xea>
 80065a6:	06d0      	lsls	r0, r2, #27
 80065a8:	bf44      	itt	mi
 80065aa:	2320      	movmi	r3, #32
 80065ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065b0:	0711      	lsls	r1, r2, #28
 80065b2:	bf44      	itt	mi
 80065b4:	232b      	movmi	r3, #43	@ 0x2b
 80065b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065ba:	f89a 3000 	ldrb.w	r3, [sl]
 80065be:	2b2a      	cmp	r3, #42	@ 0x2a
 80065c0:	d015      	beq.n	80065ee <_svfiprintf_r+0xfa>
 80065c2:	9a07      	ldr	r2, [sp, #28]
 80065c4:	4654      	mov	r4, sl
 80065c6:	2000      	movs	r0, #0
 80065c8:	f04f 0c0a 	mov.w	ip, #10
 80065cc:	4621      	mov	r1, r4
 80065ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065d2:	3b30      	subs	r3, #48	@ 0x30
 80065d4:	2b09      	cmp	r3, #9
 80065d6:	d94b      	bls.n	8006670 <_svfiprintf_r+0x17c>
 80065d8:	b1b0      	cbz	r0, 8006608 <_svfiprintf_r+0x114>
 80065da:	9207      	str	r2, [sp, #28]
 80065dc:	e014      	b.n	8006608 <_svfiprintf_r+0x114>
 80065de:	eba0 0308 	sub.w	r3, r0, r8
 80065e2:	fa09 f303 	lsl.w	r3, r9, r3
 80065e6:	4313      	orrs	r3, r2
 80065e8:	9304      	str	r3, [sp, #16]
 80065ea:	46a2      	mov	sl, r4
 80065ec:	e7d2      	b.n	8006594 <_svfiprintf_r+0xa0>
 80065ee:	9b03      	ldr	r3, [sp, #12]
 80065f0:	1d19      	adds	r1, r3, #4
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	9103      	str	r1, [sp, #12]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	bfbb      	ittet	lt
 80065fa:	425b      	neglt	r3, r3
 80065fc:	f042 0202 	orrlt.w	r2, r2, #2
 8006600:	9307      	strge	r3, [sp, #28]
 8006602:	9307      	strlt	r3, [sp, #28]
 8006604:	bfb8      	it	lt
 8006606:	9204      	strlt	r2, [sp, #16]
 8006608:	7823      	ldrb	r3, [r4, #0]
 800660a:	2b2e      	cmp	r3, #46	@ 0x2e
 800660c:	d10a      	bne.n	8006624 <_svfiprintf_r+0x130>
 800660e:	7863      	ldrb	r3, [r4, #1]
 8006610:	2b2a      	cmp	r3, #42	@ 0x2a
 8006612:	d132      	bne.n	800667a <_svfiprintf_r+0x186>
 8006614:	9b03      	ldr	r3, [sp, #12]
 8006616:	1d1a      	adds	r2, r3, #4
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	9203      	str	r2, [sp, #12]
 800661c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006620:	3402      	adds	r4, #2
 8006622:	9305      	str	r3, [sp, #20]
 8006624:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80066e8 <_svfiprintf_r+0x1f4>
 8006628:	7821      	ldrb	r1, [r4, #0]
 800662a:	2203      	movs	r2, #3
 800662c:	4650      	mov	r0, sl
 800662e:	f7f9 fdd7 	bl	80001e0 <memchr>
 8006632:	b138      	cbz	r0, 8006644 <_svfiprintf_r+0x150>
 8006634:	9b04      	ldr	r3, [sp, #16]
 8006636:	eba0 000a 	sub.w	r0, r0, sl
 800663a:	2240      	movs	r2, #64	@ 0x40
 800663c:	4082      	lsls	r2, r0
 800663e:	4313      	orrs	r3, r2
 8006640:	3401      	adds	r4, #1
 8006642:	9304      	str	r3, [sp, #16]
 8006644:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006648:	4824      	ldr	r0, [pc, #144]	@ (80066dc <_svfiprintf_r+0x1e8>)
 800664a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800664e:	2206      	movs	r2, #6
 8006650:	f7f9 fdc6 	bl	80001e0 <memchr>
 8006654:	2800      	cmp	r0, #0
 8006656:	d036      	beq.n	80066c6 <_svfiprintf_r+0x1d2>
 8006658:	4b21      	ldr	r3, [pc, #132]	@ (80066e0 <_svfiprintf_r+0x1ec>)
 800665a:	bb1b      	cbnz	r3, 80066a4 <_svfiprintf_r+0x1b0>
 800665c:	9b03      	ldr	r3, [sp, #12]
 800665e:	3307      	adds	r3, #7
 8006660:	f023 0307 	bic.w	r3, r3, #7
 8006664:	3308      	adds	r3, #8
 8006666:	9303      	str	r3, [sp, #12]
 8006668:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800666a:	4433      	add	r3, r6
 800666c:	9309      	str	r3, [sp, #36]	@ 0x24
 800666e:	e76a      	b.n	8006546 <_svfiprintf_r+0x52>
 8006670:	fb0c 3202 	mla	r2, ip, r2, r3
 8006674:	460c      	mov	r4, r1
 8006676:	2001      	movs	r0, #1
 8006678:	e7a8      	b.n	80065cc <_svfiprintf_r+0xd8>
 800667a:	2300      	movs	r3, #0
 800667c:	3401      	adds	r4, #1
 800667e:	9305      	str	r3, [sp, #20]
 8006680:	4619      	mov	r1, r3
 8006682:	f04f 0c0a 	mov.w	ip, #10
 8006686:	4620      	mov	r0, r4
 8006688:	f810 2b01 	ldrb.w	r2, [r0], #1
 800668c:	3a30      	subs	r2, #48	@ 0x30
 800668e:	2a09      	cmp	r2, #9
 8006690:	d903      	bls.n	800669a <_svfiprintf_r+0x1a6>
 8006692:	2b00      	cmp	r3, #0
 8006694:	d0c6      	beq.n	8006624 <_svfiprintf_r+0x130>
 8006696:	9105      	str	r1, [sp, #20]
 8006698:	e7c4      	b.n	8006624 <_svfiprintf_r+0x130>
 800669a:	fb0c 2101 	mla	r1, ip, r1, r2
 800669e:	4604      	mov	r4, r0
 80066a0:	2301      	movs	r3, #1
 80066a2:	e7f0      	b.n	8006686 <_svfiprintf_r+0x192>
 80066a4:	ab03      	add	r3, sp, #12
 80066a6:	9300      	str	r3, [sp, #0]
 80066a8:	462a      	mov	r2, r5
 80066aa:	4b0e      	ldr	r3, [pc, #56]	@ (80066e4 <_svfiprintf_r+0x1f0>)
 80066ac:	a904      	add	r1, sp, #16
 80066ae:	4638      	mov	r0, r7
 80066b0:	f3af 8000 	nop.w
 80066b4:	1c42      	adds	r2, r0, #1
 80066b6:	4606      	mov	r6, r0
 80066b8:	d1d6      	bne.n	8006668 <_svfiprintf_r+0x174>
 80066ba:	89ab      	ldrh	r3, [r5, #12]
 80066bc:	065b      	lsls	r3, r3, #25
 80066be:	f53f af2d 	bmi.w	800651c <_svfiprintf_r+0x28>
 80066c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80066c4:	e72c      	b.n	8006520 <_svfiprintf_r+0x2c>
 80066c6:	ab03      	add	r3, sp, #12
 80066c8:	9300      	str	r3, [sp, #0]
 80066ca:	462a      	mov	r2, r5
 80066cc:	4b05      	ldr	r3, [pc, #20]	@ (80066e4 <_svfiprintf_r+0x1f0>)
 80066ce:	a904      	add	r1, sp, #16
 80066d0:	4638      	mov	r0, r7
 80066d2:	f000 f879 	bl	80067c8 <_printf_i>
 80066d6:	e7ed      	b.n	80066b4 <_svfiprintf_r+0x1c0>
 80066d8:	08006b48 	.word	0x08006b48
 80066dc:	08006b52 	.word	0x08006b52
 80066e0:	00000000 	.word	0x00000000
 80066e4:	0800643d 	.word	0x0800643d
 80066e8:	08006b4e 	.word	0x08006b4e

080066ec <_printf_common>:
 80066ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066f0:	4616      	mov	r6, r2
 80066f2:	4698      	mov	r8, r3
 80066f4:	688a      	ldr	r2, [r1, #8]
 80066f6:	690b      	ldr	r3, [r1, #16]
 80066f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80066fc:	4293      	cmp	r3, r2
 80066fe:	bfb8      	it	lt
 8006700:	4613      	movlt	r3, r2
 8006702:	6033      	str	r3, [r6, #0]
 8006704:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006708:	4607      	mov	r7, r0
 800670a:	460c      	mov	r4, r1
 800670c:	b10a      	cbz	r2, 8006712 <_printf_common+0x26>
 800670e:	3301      	adds	r3, #1
 8006710:	6033      	str	r3, [r6, #0]
 8006712:	6823      	ldr	r3, [r4, #0]
 8006714:	0699      	lsls	r1, r3, #26
 8006716:	bf42      	ittt	mi
 8006718:	6833      	ldrmi	r3, [r6, #0]
 800671a:	3302      	addmi	r3, #2
 800671c:	6033      	strmi	r3, [r6, #0]
 800671e:	6825      	ldr	r5, [r4, #0]
 8006720:	f015 0506 	ands.w	r5, r5, #6
 8006724:	d106      	bne.n	8006734 <_printf_common+0x48>
 8006726:	f104 0a19 	add.w	sl, r4, #25
 800672a:	68e3      	ldr	r3, [r4, #12]
 800672c:	6832      	ldr	r2, [r6, #0]
 800672e:	1a9b      	subs	r3, r3, r2
 8006730:	42ab      	cmp	r3, r5
 8006732:	dc26      	bgt.n	8006782 <_printf_common+0x96>
 8006734:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006738:	6822      	ldr	r2, [r4, #0]
 800673a:	3b00      	subs	r3, #0
 800673c:	bf18      	it	ne
 800673e:	2301      	movne	r3, #1
 8006740:	0692      	lsls	r2, r2, #26
 8006742:	d42b      	bmi.n	800679c <_printf_common+0xb0>
 8006744:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006748:	4641      	mov	r1, r8
 800674a:	4638      	mov	r0, r7
 800674c:	47c8      	blx	r9
 800674e:	3001      	adds	r0, #1
 8006750:	d01e      	beq.n	8006790 <_printf_common+0xa4>
 8006752:	6823      	ldr	r3, [r4, #0]
 8006754:	6922      	ldr	r2, [r4, #16]
 8006756:	f003 0306 	and.w	r3, r3, #6
 800675a:	2b04      	cmp	r3, #4
 800675c:	bf02      	ittt	eq
 800675e:	68e5      	ldreq	r5, [r4, #12]
 8006760:	6833      	ldreq	r3, [r6, #0]
 8006762:	1aed      	subeq	r5, r5, r3
 8006764:	68a3      	ldr	r3, [r4, #8]
 8006766:	bf0c      	ite	eq
 8006768:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800676c:	2500      	movne	r5, #0
 800676e:	4293      	cmp	r3, r2
 8006770:	bfc4      	itt	gt
 8006772:	1a9b      	subgt	r3, r3, r2
 8006774:	18ed      	addgt	r5, r5, r3
 8006776:	2600      	movs	r6, #0
 8006778:	341a      	adds	r4, #26
 800677a:	42b5      	cmp	r5, r6
 800677c:	d11a      	bne.n	80067b4 <_printf_common+0xc8>
 800677e:	2000      	movs	r0, #0
 8006780:	e008      	b.n	8006794 <_printf_common+0xa8>
 8006782:	2301      	movs	r3, #1
 8006784:	4652      	mov	r2, sl
 8006786:	4641      	mov	r1, r8
 8006788:	4638      	mov	r0, r7
 800678a:	47c8      	blx	r9
 800678c:	3001      	adds	r0, #1
 800678e:	d103      	bne.n	8006798 <_printf_common+0xac>
 8006790:	f04f 30ff 	mov.w	r0, #4294967295
 8006794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006798:	3501      	adds	r5, #1
 800679a:	e7c6      	b.n	800672a <_printf_common+0x3e>
 800679c:	18e1      	adds	r1, r4, r3
 800679e:	1c5a      	adds	r2, r3, #1
 80067a0:	2030      	movs	r0, #48	@ 0x30
 80067a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80067a6:	4422      	add	r2, r4
 80067a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80067ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80067b0:	3302      	adds	r3, #2
 80067b2:	e7c7      	b.n	8006744 <_printf_common+0x58>
 80067b4:	2301      	movs	r3, #1
 80067b6:	4622      	mov	r2, r4
 80067b8:	4641      	mov	r1, r8
 80067ba:	4638      	mov	r0, r7
 80067bc:	47c8      	blx	r9
 80067be:	3001      	adds	r0, #1
 80067c0:	d0e6      	beq.n	8006790 <_printf_common+0xa4>
 80067c2:	3601      	adds	r6, #1
 80067c4:	e7d9      	b.n	800677a <_printf_common+0x8e>
	...

080067c8 <_printf_i>:
 80067c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067cc:	7e0f      	ldrb	r7, [r1, #24]
 80067ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80067d0:	2f78      	cmp	r7, #120	@ 0x78
 80067d2:	4691      	mov	r9, r2
 80067d4:	4680      	mov	r8, r0
 80067d6:	460c      	mov	r4, r1
 80067d8:	469a      	mov	sl, r3
 80067da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80067de:	d807      	bhi.n	80067f0 <_printf_i+0x28>
 80067e0:	2f62      	cmp	r7, #98	@ 0x62
 80067e2:	d80a      	bhi.n	80067fa <_printf_i+0x32>
 80067e4:	2f00      	cmp	r7, #0
 80067e6:	f000 80d1 	beq.w	800698c <_printf_i+0x1c4>
 80067ea:	2f58      	cmp	r7, #88	@ 0x58
 80067ec:	f000 80b8 	beq.w	8006960 <_printf_i+0x198>
 80067f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80067f8:	e03a      	b.n	8006870 <_printf_i+0xa8>
 80067fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80067fe:	2b15      	cmp	r3, #21
 8006800:	d8f6      	bhi.n	80067f0 <_printf_i+0x28>
 8006802:	a101      	add	r1, pc, #4	@ (adr r1, 8006808 <_printf_i+0x40>)
 8006804:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006808:	08006861 	.word	0x08006861
 800680c:	08006875 	.word	0x08006875
 8006810:	080067f1 	.word	0x080067f1
 8006814:	080067f1 	.word	0x080067f1
 8006818:	080067f1 	.word	0x080067f1
 800681c:	080067f1 	.word	0x080067f1
 8006820:	08006875 	.word	0x08006875
 8006824:	080067f1 	.word	0x080067f1
 8006828:	080067f1 	.word	0x080067f1
 800682c:	080067f1 	.word	0x080067f1
 8006830:	080067f1 	.word	0x080067f1
 8006834:	08006973 	.word	0x08006973
 8006838:	0800689f 	.word	0x0800689f
 800683c:	0800692d 	.word	0x0800692d
 8006840:	080067f1 	.word	0x080067f1
 8006844:	080067f1 	.word	0x080067f1
 8006848:	08006995 	.word	0x08006995
 800684c:	080067f1 	.word	0x080067f1
 8006850:	0800689f 	.word	0x0800689f
 8006854:	080067f1 	.word	0x080067f1
 8006858:	080067f1 	.word	0x080067f1
 800685c:	08006935 	.word	0x08006935
 8006860:	6833      	ldr	r3, [r6, #0]
 8006862:	1d1a      	adds	r2, r3, #4
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	6032      	str	r2, [r6, #0]
 8006868:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800686c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006870:	2301      	movs	r3, #1
 8006872:	e09c      	b.n	80069ae <_printf_i+0x1e6>
 8006874:	6833      	ldr	r3, [r6, #0]
 8006876:	6820      	ldr	r0, [r4, #0]
 8006878:	1d19      	adds	r1, r3, #4
 800687a:	6031      	str	r1, [r6, #0]
 800687c:	0606      	lsls	r6, r0, #24
 800687e:	d501      	bpl.n	8006884 <_printf_i+0xbc>
 8006880:	681d      	ldr	r5, [r3, #0]
 8006882:	e003      	b.n	800688c <_printf_i+0xc4>
 8006884:	0645      	lsls	r5, r0, #25
 8006886:	d5fb      	bpl.n	8006880 <_printf_i+0xb8>
 8006888:	f9b3 5000 	ldrsh.w	r5, [r3]
 800688c:	2d00      	cmp	r5, #0
 800688e:	da03      	bge.n	8006898 <_printf_i+0xd0>
 8006890:	232d      	movs	r3, #45	@ 0x2d
 8006892:	426d      	negs	r5, r5
 8006894:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006898:	4858      	ldr	r0, [pc, #352]	@ (80069fc <_printf_i+0x234>)
 800689a:	230a      	movs	r3, #10
 800689c:	e011      	b.n	80068c2 <_printf_i+0xfa>
 800689e:	6821      	ldr	r1, [r4, #0]
 80068a0:	6833      	ldr	r3, [r6, #0]
 80068a2:	0608      	lsls	r0, r1, #24
 80068a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80068a8:	d402      	bmi.n	80068b0 <_printf_i+0xe8>
 80068aa:	0649      	lsls	r1, r1, #25
 80068ac:	bf48      	it	mi
 80068ae:	b2ad      	uxthmi	r5, r5
 80068b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80068b2:	4852      	ldr	r0, [pc, #328]	@ (80069fc <_printf_i+0x234>)
 80068b4:	6033      	str	r3, [r6, #0]
 80068b6:	bf14      	ite	ne
 80068b8:	230a      	movne	r3, #10
 80068ba:	2308      	moveq	r3, #8
 80068bc:	2100      	movs	r1, #0
 80068be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80068c2:	6866      	ldr	r6, [r4, #4]
 80068c4:	60a6      	str	r6, [r4, #8]
 80068c6:	2e00      	cmp	r6, #0
 80068c8:	db05      	blt.n	80068d6 <_printf_i+0x10e>
 80068ca:	6821      	ldr	r1, [r4, #0]
 80068cc:	432e      	orrs	r6, r5
 80068ce:	f021 0104 	bic.w	r1, r1, #4
 80068d2:	6021      	str	r1, [r4, #0]
 80068d4:	d04b      	beq.n	800696e <_printf_i+0x1a6>
 80068d6:	4616      	mov	r6, r2
 80068d8:	fbb5 f1f3 	udiv	r1, r5, r3
 80068dc:	fb03 5711 	mls	r7, r3, r1, r5
 80068e0:	5dc7      	ldrb	r7, [r0, r7]
 80068e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80068e6:	462f      	mov	r7, r5
 80068e8:	42bb      	cmp	r3, r7
 80068ea:	460d      	mov	r5, r1
 80068ec:	d9f4      	bls.n	80068d8 <_printf_i+0x110>
 80068ee:	2b08      	cmp	r3, #8
 80068f0:	d10b      	bne.n	800690a <_printf_i+0x142>
 80068f2:	6823      	ldr	r3, [r4, #0]
 80068f4:	07df      	lsls	r7, r3, #31
 80068f6:	d508      	bpl.n	800690a <_printf_i+0x142>
 80068f8:	6923      	ldr	r3, [r4, #16]
 80068fa:	6861      	ldr	r1, [r4, #4]
 80068fc:	4299      	cmp	r1, r3
 80068fe:	bfde      	ittt	le
 8006900:	2330      	movle	r3, #48	@ 0x30
 8006902:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006906:	f106 36ff 	addle.w	r6, r6, #4294967295
 800690a:	1b92      	subs	r2, r2, r6
 800690c:	6122      	str	r2, [r4, #16]
 800690e:	f8cd a000 	str.w	sl, [sp]
 8006912:	464b      	mov	r3, r9
 8006914:	aa03      	add	r2, sp, #12
 8006916:	4621      	mov	r1, r4
 8006918:	4640      	mov	r0, r8
 800691a:	f7ff fee7 	bl	80066ec <_printf_common>
 800691e:	3001      	adds	r0, #1
 8006920:	d14a      	bne.n	80069b8 <_printf_i+0x1f0>
 8006922:	f04f 30ff 	mov.w	r0, #4294967295
 8006926:	b004      	add	sp, #16
 8006928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800692c:	6823      	ldr	r3, [r4, #0]
 800692e:	f043 0320 	orr.w	r3, r3, #32
 8006932:	6023      	str	r3, [r4, #0]
 8006934:	4832      	ldr	r0, [pc, #200]	@ (8006a00 <_printf_i+0x238>)
 8006936:	2778      	movs	r7, #120	@ 0x78
 8006938:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800693c:	6823      	ldr	r3, [r4, #0]
 800693e:	6831      	ldr	r1, [r6, #0]
 8006940:	061f      	lsls	r7, r3, #24
 8006942:	f851 5b04 	ldr.w	r5, [r1], #4
 8006946:	d402      	bmi.n	800694e <_printf_i+0x186>
 8006948:	065f      	lsls	r7, r3, #25
 800694a:	bf48      	it	mi
 800694c:	b2ad      	uxthmi	r5, r5
 800694e:	6031      	str	r1, [r6, #0]
 8006950:	07d9      	lsls	r1, r3, #31
 8006952:	bf44      	itt	mi
 8006954:	f043 0320 	orrmi.w	r3, r3, #32
 8006958:	6023      	strmi	r3, [r4, #0]
 800695a:	b11d      	cbz	r5, 8006964 <_printf_i+0x19c>
 800695c:	2310      	movs	r3, #16
 800695e:	e7ad      	b.n	80068bc <_printf_i+0xf4>
 8006960:	4826      	ldr	r0, [pc, #152]	@ (80069fc <_printf_i+0x234>)
 8006962:	e7e9      	b.n	8006938 <_printf_i+0x170>
 8006964:	6823      	ldr	r3, [r4, #0]
 8006966:	f023 0320 	bic.w	r3, r3, #32
 800696a:	6023      	str	r3, [r4, #0]
 800696c:	e7f6      	b.n	800695c <_printf_i+0x194>
 800696e:	4616      	mov	r6, r2
 8006970:	e7bd      	b.n	80068ee <_printf_i+0x126>
 8006972:	6833      	ldr	r3, [r6, #0]
 8006974:	6825      	ldr	r5, [r4, #0]
 8006976:	6961      	ldr	r1, [r4, #20]
 8006978:	1d18      	adds	r0, r3, #4
 800697a:	6030      	str	r0, [r6, #0]
 800697c:	062e      	lsls	r6, r5, #24
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	d501      	bpl.n	8006986 <_printf_i+0x1be>
 8006982:	6019      	str	r1, [r3, #0]
 8006984:	e002      	b.n	800698c <_printf_i+0x1c4>
 8006986:	0668      	lsls	r0, r5, #25
 8006988:	d5fb      	bpl.n	8006982 <_printf_i+0x1ba>
 800698a:	8019      	strh	r1, [r3, #0]
 800698c:	2300      	movs	r3, #0
 800698e:	6123      	str	r3, [r4, #16]
 8006990:	4616      	mov	r6, r2
 8006992:	e7bc      	b.n	800690e <_printf_i+0x146>
 8006994:	6833      	ldr	r3, [r6, #0]
 8006996:	1d1a      	adds	r2, r3, #4
 8006998:	6032      	str	r2, [r6, #0]
 800699a:	681e      	ldr	r6, [r3, #0]
 800699c:	6862      	ldr	r2, [r4, #4]
 800699e:	2100      	movs	r1, #0
 80069a0:	4630      	mov	r0, r6
 80069a2:	f7f9 fc1d 	bl	80001e0 <memchr>
 80069a6:	b108      	cbz	r0, 80069ac <_printf_i+0x1e4>
 80069a8:	1b80      	subs	r0, r0, r6
 80069aa:	6060      	str	r0, [r4, #4]
 80069ac:	6863      	ldr	r3, [r4, #4]
 80069ae:	6123      	str	r3, [r4, #16]
 80069b0:	2300      	movs	r3, #0
 80069b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069b6:	e7aa      	b.n	800690e <_printf_i+0x146>
 80069b8:	6923      	ldr	r3, [r4, #16]
 80069ba:	4632      	mov	r2, r6
 80069bc:	4649      	mov	r1, r9
 80069be:	4640      	mov	r0, r8
 80069c0:	47d0      	blx	sl
 80069c2:	3001      	adds	r0, #1
 80069c4:	d0ad      	beq.n	8006922 <_printf_i+0x15a>
 80069c6:	6823      	ldr	r3, [r4, #0]
 80069c8:	079b      	lsls	r3, r3, #30
 80069ca:	d413      	bmi.n	80069f4 <_printf_i+0x22c>
 80069cc:	68e0      	ldr	r0, [r4, #12]
 80069ce:	9b03      	ldr	r3, [sp, #12]
 80069d0:	4298      	cmp	r0, r3
 80069d2:	bfb8      	it	lt
 80069d4:	4618      	movlt	r0, r3
 80069d6:	e7a6      	b.n	8006926 <_printf_i+0x15e>
 80069d8:	2301      	movs	r3, #1
 80069da:	4632      	mov	r2, r6
 80069dc:	4649      	mov	r1, r9
 80069de:	4640      	mov	r0, r8
 80069e0:	47d0      	blx	sl
 80069e2:	3001      	adds	r0, #1
 80069e4:	d09d      	beq.n	8006922 <_printf_i+0x15a>
 80069e6:	3501      	adds	r5, #1
 80069e8:	68e3      	ldr	r3, [r4, #12]
 80069ea:	9903      	ldr	r1, [sp, #12]
 80069ec:	1a5b      	subs	r3, r3, r1
 80069ee:	42ab      	cmp	r3, r5
 80069f0:	dcf2      	bgt.n	80069d8 <_printf_i+0x210>
 80069f2:	e7eb      	b.n	80069cc <_printf_i+0x204>
 80069f4:	2500      	movs	r5, #0
 80069f6:	f104 0619 	add.w	r6, r4, #25
 80069fa:	e7f5      	b.n	80069e8 <_printf_i+0x220>
 80069fc:	08006b59 	.word	0x08006b59
 8006a00:	08006b6a 	.word	0x08006b6a

08006a04 <memmove>:
 8006a04:	4288      	cmp	r0, r1
 8006a06:	b510      	push	{r4, lr}
 8006a08:	eb01 0402 	add.w	r4, r1, r2
 8006a0c:	d902      	bls.n	8006a14 <memmove+0x10>
 8006a0e:	4284      	cmp	r4, r0
 8006a10:	4623      	mov	r3, r4
 8006a12:	d807      	bhi.n	8006a24 <memmove+0x20>
 8006a14:	1e43      	subs	r3, r0, #1
 8006a16:	42a1      	cmp	r1, r4
 8006a18:	d008      	beq.n	8006a2c <memmove+0x28>
 8006a1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a22:	e7f8      	b.n	8006a16 <memmove+0x12>
 8006a24:	4402      	add	r2, r0
 8006a26:	4601      	mov	r1, r0
 8006a28:	428a      	cmp	r2, r1
 8006a2a:	d100      	bne.n	8006a2e <memmove+0x2a>
 8006a2c:	bd10      	pop	{r4, pc}
 8006a2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a36:	e7f7      	b.n	8006a28 <memmove+0x24>

08006a38 <_sbrk_r>:
 8006a38:	b538      	push	{r3, r4, r5, lr}
 8006a3a:	4d06      	ldr	r5, [pc, #24]	@ (8006a54 <_sbrk_r+0x1c>)
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	4604      	mov	r4, r0
 8006a40:	4608      	mov	r0, r1
 8006a42:	602b      	str	r3, [r5, #0]
 8006a44:	f7f9 ffc6 	bl	80009d4 <_sbrk>
 8006a48:	1c43      	adds	r3, r0, #1
 8006a4a:	d102      	bne.n	8006a52 <_sbrk_r+0x1a>
 8006a4c:	682b      	ldr	r3, [r5, #0]
 8006a4e:	b103      	cbz	r3, 8006a52 <_sbrk_r+0x1a>
 8006a50:	6023      	str	r3, [r4, #0]
 8006a52:	bd38      	pop	{r3, r4, r5, pc}
 8006a54:	20000504 	.word	0x20000504

08006a58 <memcpy>:
 8006a58:	440a      	add	r2, r1
 8006a5a:	4291      	cmp	r1, r2
 8006a5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a60:	d100      	bne.n	8006a64 <memcpy+0xc>
 8006a62:	4770      	bx	lr
 8006a64:	b510      	push	{r4, lr}
 8006a66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a6e:	4291      	cmp	r1, r2
 8006a70:	d1f9      	bne.n	8006a66 <memcpy+0xe>
 8006a72:	bd10      	pop	{r4, pc}

08006a74 <_realloc_r>:
 8006a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a78:	4607      	mov	r7, r0
 8006a7a:	4614      	mov	r4, r2
 8006a7c:	460d      	mov	r5, r1
 8006a7e:	b921      	cbnz	r1, 8006a8a <_realloc_r+0x16>
 8006a80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a84:	4611      	mov	r1, r2
 8006a86:	f7ff bc4d 	b.w	8006324 <_malloc_r>
 8006a8a:	b92a      	cbnz	r2, 8006a98 <_realloc_r+0x24>
 8006a8c:	f7ff fbde 	bl	800624c <_free_r>
 8006a90:	4625      	mov	r5, r4
 8006a92:	4628      	mov	r0, r5
 8006a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a98:	f000 f81a 	bl	8006ad0 <_malloc_usable_size_r>
 8006a9c:	4284      	cmp	r4, r0
 8006a9e:	4606      	mov	r6, r0
 8006aa0:	d802      	bhi.n	8006aa8 <_realloc_r+0x34>
 8006aa2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006aa6:	d8f4      	bhi.n	8006a92 <_realloc_r+0x1e>
 8006aa8:	4621      	mov	r1, r4
 8006aaa:	4638      	mov	r0, r7
 8006aac:	f7ff fc3a 	bl	8006324 <_malloc_r>
 8006ab0:	4680      	mov	r8, r0
 8006ab2:	b908      	cbnz	r0, 8006ab8 <_realloc_r+0x44>
 8006ab4:	4645      	mov	r5, r8
 8006ab6:	e7ec      	b.n	8006a92 <_realloc_r+0x1e>
 8006ab8:	42b4      	cmp	r4, r6
 8006aba:	4622      	mov	r2, r4
 8006abc:	4629      	mov	r1, r5
 8006abe:	bf28      	it	cs
 8006ac0:	4632      	movcs	r2, r6
 8006ac2:	f7ff ffc9 	bl	8006a58 <memcpy>
 8006ac6:	4629      	mov	r1, r5
 8006ac8:	4638      	mov	r0, r7
 8006aca:	f7ff fbbf 	bl	800624c <_free_r>
 8006ace:	e7f1      	b.n	8006ab4 <_realloc_r+0x40>

08006ad0 <_malloc_usable_size_r>:
 8006ad0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ad4:	1f18      	subs	r0, r3, #4
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	bfbc      	itt	lt
 8006ada:	580b      	ldrlt	r3, [r1, r0]
 8006adc:	18c0      	addlt	r0, r0, r3
 8006ade:	4770      	bx	lr

08006ae0 <_init>:
 8006ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ae2:	bf00      	nop
 8006ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ae6:	bc08      	pop	{r3}
 8006ae8:	469e      	mov	lr, r3
 8006aea:	4770      	bx	lr

08006aec <_fini>:
 8006aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aee:	bf00      	nop
 8006af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006af2:	bc08      	pop	{r3}
 8006af4:	469e      	mov	lr, r3
 8006af6:	4770      	bx	lr
