
250618_GPIO_Baremetal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000035c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004f4  080004f4  00002040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004f4  080004f4  00002040  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080004f4  080004f4  00002040  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080004f4  080004f4  00002040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004f4  080004f4  000014f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004f8  080004f8  000014f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000040  20000000  080004fc  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000040  0800053c  00002040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  0800053c  0000205c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000864  00000000  00000000  00002070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003f3  00000000  00000000  000028d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a8  00000000  00000000  00002cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000006b  00000000  00000000  00002d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000cab7  00000000  00000000  00002ddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000ed6  00000000  00000000  0000f892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00048b21  00000000  00000000  00010768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00059289  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000168  00000000  00000000  000592cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  00059434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000040 	.word	0x20000040
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080004dc 	.word	0x080004dc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000044 	.word	0x20000044
 80001d4:	080004dc 	.word	0x080004dc

080001d8 <GPIO_Init>:




void GPIO_Init(GPIO_TypeDef *GPIOx, uint32_t pinNum, pinMode pin_Mode)
{
 80001d8:	b480      	push	{r7}
 80001da:	b085      	sub	sp, #20
 80001dc:	af00      	add	r7, sp, #0
 80001de:	60f8      	str	r0, [r7, #12]
 80001e0:	60b9      	str	r1, [r7, #8]
 80001e2:	4613      	mov	r3, r2
 80001e4:	71fb      	strb	r3, [r7, #7]
   if(pin_Mode == OUTPUT)
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d115      	bne.n	8000218 <GPIO_Init+0x40>
   {
      GPIOx -> MODER  |=  (0x01U << (pinNum*2));
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	681a      	ldr	r2, [r3, #0]
 80001f0:	68bb      	ldr	r3, [r7, #8]
 80001f2:	005b      	lsls	r3, r3, #1
 80001f4:	2101      	movs	r1, #1
 80001f6:	fa01 f303 	lsl.w	r3, r1, r3
 80001fa:	431a      	orrs	r2, r3
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	601a      	str	r2, [r3, #0]
      GPIOx -> MODER  &= ~(0x02U << (pinNum*2));
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	681a      	ldr	r2, [r3, #0]
 8000204:	68bb      	ldr	r3, [r7, #8]
 8000206:	005b      	lsls	r3, r3, #1
 8000208:	2102      	movs	r1, #2
 800020a:	fa01 f303 	lsl.w	r3, r1, r3
 800020e:	43db      	mvns	r3, r3
 8000210:	401a      	ands	r2, r3
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	601a      	str	r2, [r3, #0]
   }
   else {
      GPIOx -> MODER  &= ~(0x03U << (pinNum*2));
   }
}
 8000216:	e00a      	b.n	800022e <GPIO_Init+0x56>
      GPIOx -> MODER  &= ~(0x03U << (pinNum*2));
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	681a      	ldr	r2, [r3, #0]
 800021c:	68bb      	ldr	r3, [r7, #8]
 800021e:	005b      	lsls	r3, r3, #1
 8000220:	2103      	movs	r1, #3
 8000222:	fa01 f303 	lsl.w	r3, r1, r3
 8000226:	43db      	mvns	r3, r3
 8000228:	401a      	ands	r2, r3
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	601a      	str	r2, [r3, #0]
}
 800022e:	bf00      	nop
 8000230:	3714      	adds	r7, #20
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr

0800023a <GPIO_WritePin>:



void GPIO_WritePin(GPIO_TypeDef *GPIOx, uint32_t pinNum, pinState pin_State)
{
 800023a:	b480      	push	{r7}
 800023c:	b085      	sub	sp, #20
 800023e:	af00      	add	r7, sp, #0
 8000240:	60f8      	str	r0, [r7, #12]
 8000242:	60b9      	str	r1, [r7, #8]
 8000244:	4613      	mov	r3, r2
 8000246:	71fb      	strb	r3, [r7, #7]
   if(pin_State == PIN_SET) {
 8000248:	79fb      	ldrb	r3, [r7, #7]
 800024a:	2b01      	cmp	r3, #1
 800024c:	d109      	bne.n	8000262 <GPIO_WritePin+0x28>
   GPIOx -> ODR |= (1U<<pinNum);
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	695a      	ldr	r2, [r3, #20]
 8000252:	2101      	movs	r1, #1
 8000254:	68bb      	ldr	r3, [r7, #8]
 8000256:	fa01 f303 	lsl.w	r3, r1, r3
 800025a:	431a      	orrs	r2, r3
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	615a      	str	r2, [r3, #20]
   }
   else {
      GPIOx-> ODR &= ~(1U<<pinNum);
   }
}
 8000260:	e009      	b.n	8000276 <GPIO_WritePin+0x3c>
      GPIOx-> ODR &= ~(1U<<pinNum);
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	695a      	ldr	r2, [r3, #20]
 8000266:	2101      	movs	r1, #1
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	fa01 f303 	lsl.w	r3, r1, r3
 800026e:	43db      	mvns	r3, r3
 8000270:	401a      	ands	r2, r3
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	615a      	str	r2, [r3, #20]
}
 8000276:	bf00      	nop
 8000278:	3714      	adds	r7, #20
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr

08000282 <GPIO_ReadPin>:




uint32_t GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint32_t pinNum)
{
 8000282:	b480      	push	{r7}
 8000284:	b083      	sub	sp, #12
 8000286:	af00      	add	r7, sp, #0
 8000288:	6078      	str	r0, [r7, #4]
 800028a:	6039      	str	r1, [r7, #0]
return !((GPIOx->IDR & (1<<pinNum)) == 0); // 1bit만 내보내기 위한
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	691b      	ldr	r3, [r3, #16]
 8000290:	2101      	movs	r1, #1
 8000292:	683a      	ldr	r2, [r7, #0]
 8000294:	fa01 f202 	lsl.w	r2, r1, r2
 8000298:	4013      	ands	r3, r2
 800029a:	2b00      	cmp	r3, #0
 800029c:	bf14      	ite	ne
 800029e:	2301      	movne	r3, #1
 80002a0:	2300      	moveq	r3, #0
 80002a2:	b2db      	uxtb	r3, r3

}
 80002a4:	4618      	mov	r0, r3
 80002a6:	370c      	adds	r7, #12
 80002a8:	46bd      	mov	sp, r7
 80002aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ae:	4770      	bx	lr

080002b0 <LED_Bar_Write>:
		{GPIOC, 2},
		{GPIOC, 3}
};

void LED_Bar_Write(uint8_t data)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	71fb      	strb	r3, [r7, #7]
	for (int i=0; i<8; i++){
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]
 80002be:	e025      	b.n	800030c <LED_Bar_Write+0x5c>
		if ((data&(1<<i))==0){
 80002c0:	79fa      	ldrb	r2, [r7, #7]
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	fa42 f303 	asr.w	r3, r2, r3
 80002c8:	f003 0301 	and.w	r3, r3, #1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d10d      	bne.n	80002ec <LED_Bar_Write+0x3c>
			GPIO_WritePin(ledBar[i].GPIOx, ledBar[i].pinNum, PIN_RESET);
 80002d0:	4a12      	ldr	r2, [pc, #72]	@ (800031c <LED_Bar_Write+0x6c>)
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80002d8:	4a10      	ldr	r2, [pc, #64]	@ (800031c <LED_Bar_Write+0x6c>)
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	00db      	lsls	r3, r3, #3
 80002de:	4413      	add	r3, r2
 80002e0:	685b      	ldr	r3, [r3, #4]
 80002e2:	2200      	movs	r2, #0
 80002e4:	4619      	mov	r1, r3
 80002e6:	f7ff ffa8 	bl	800023a <GPIO_WritePin>
 80002ea:	e00c      	b.n	8000306 <LED_Bar_Write+0x56>
		}
		else {
			GPIO_WritePin(ledBar[i].GPIOx, ledBar[i].pinNum, PIN_SET);
 80002ec:	4a0b      	ldr	r2, [pc, #44]	@ (800031c <LED_Bar_Write+0x6c>)
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80002f4:	4a09      	ldr	r2, [pc, #36]	@ (800031c <LED_Bar_Write+0x6c>)
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	00db      	lsls	r3, r3, #3
 80002fa:	4413      	add	r3, r2
 80002fc:	685b      	ldr	r3, [r3, #4]
 80002fe:	2201      	movs	r2, #1
 8000300:	4619      	mov	r1, r3
 8000302:	f7ff ff9a 	bl	800023a <GPIO_WritePin>
	for (int i=0; i<8; i++){
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	3301      	adds	r3, #1
 800030a:	60fb      	str	r3, [r7, #12]
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	2b07      	cmp	r3, #7
 8000310:	ddd6      	ble.n	80002c0 <LED_Bar_Write+0x10>
		}
	}
}
 8000312:	bf00      	nop
 8000314:	bf00      	nop
 8000316:	3710      	adds	r7, #16
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	20000000 	.word	0x20000000

08000320 <main>:


void delay();

int main(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
//   1. 페리페럴에 clock 넣기//
   RCC -> AHB1ENR |= (1U << 0);//  RCC_AHB1ENR 해당위치의 비트만 1로 만들겠다
 8000326:	4b37      	ldr	r3, [pc, #220]	@ (8000404 <main+0xe4>)
 8000328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800032a:	4a36      	ldr	r2, [pc, #216]	@ (8000404 <main+0xe4>)
 800032c:	f043 0301 	orr.w	r3, r3, #1
 8000330:	6313      	str	r3, [r2, #48]	@ 0x30
   RCC -> AHB1ENR |= (1U << 1);//  RCC_AHB1ENR 해당위치의 비트만 1로 만들겠다
 8000332:	4b34      	ldr	r3, [pc, #208]	@ (8000404 <main+0xe4>)
 8000334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000336:	4a33      	ldr	r2, [pc, #204]	@ (8000404 <main+0xe4>)
 8000338:	f043 0302 	orr.w	r3, r3, #2
 800033c:	6313      	str	r3, [r2, #48]	@ 0x30
   RCC -> AHB1ENR |= (1U << 2);//  RCC_AHB1ENR 해당위치의 비트만 1로 만들겠다
 800033e:	4b31      	ldr	r3, [pc, #196]	@ (8000404 <main+0xe4>)
 8000340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000342:	4a30      	ldr	r2, [pc, #192]	@ (8000404 <main+0xe4>)
 8000344:	f043 0304 	orr.w	r3, r3, #4
 8000348:	6313      	str	r3, [r2, #48]	@ 0x30
//   GPIOA -> MODER |= (1U << 10);//GPIOA_MODER
//   GPIOA -> MODER &= ~(1U << 11); // 11번 bit를 0
   GPIO_Init(GPIOA, 0, OUTPUT);
 800034a:	2200      	movs	r2, #0
 800034c:	2100      	movs	r1, #0
 800034e:	482e      	ldr	r0, [pc, #184]	@ (8000408 <main+0xe8>)
 8000350:	f7ff ff42 	bl	80001d8 <GPIO_Init>
   GPIO_Init(GPIOA, 1, OUTPUT);
 8000354:	2200      	movs	r2, #0
 8000356:	2101      	movs	r1, #1
 8000358:	482b      	ldr	r0, [pc, #172]	@ (8000408 <main+0xe8>)
 800035a:	f7ff ff3d 	bl	80001d8 <GPIO_Init>
   GPIO_Init(GPIOA, 4, OUTPUT);
 800035e:	2200      	movs	r2, #0
 8000360:	2104      	movs	r1, #4
 8000362:	4829      	ldr	r0, [pc, #164]	@ (8000408 <main+0xe8>)
 8000364:	f7ff ff38 	bl	80001d8 <GPIO_Init>
   GPIO_Init(GPIOB, 0, OUTPUT);
 8000368:	2200      	movs	r2, #0
 800036a:	2100      	movs	r1, #0
 800036c:	4827      	ldr	r0, [pc, #156]	@ (800040c <main+0xec>)
 800036e:	f7ff ff33 	bl	80001d8 <GPIO_Init>
   GPIO_Init(GPIOC, 1, OUTPUT);
 8000372:	2200      	movs	r2, #0
 8000374:	2101      	movs	r1, #1
 8000376:	4826      	ldr	r0, [pc, #152]	@ (8000410 <main+0xf0>)
 8000378:	f7ff ff2e 	bl	80001d8 <GPIO_Init>
   GPIO_Init(GPIOC, 0, OUTPUT);
 800037c:	2200      	movs	r2, #0
 800037e:	2100      	movs	r1, #0
 8000380:	4823      	ldr	r0, [pc, #140]	@ (8000410 <main+0xf0>)
 8000382:	f7ff ff29 	bl	80001d8 <GPIO_Init>
   GPIO_Init(GPIOC, 2, OUTPUT);
 8000386:	2200      	movs	r2, #0
 8000388:	2102      	movs	r1, #2
 800038a:	4821      	ldr	r0, [pc, #132]	@ (8000410 <main+0xf0>)
 800038c:	f7ff ff24 	bl	80001d8 <GPIO_Init>
   GPIO_Init(GPIOC, 3, OUTPUT);
 8000390:	2200      	movs	r2, #0
 8000392:	2103      	movs	r1, #3
 8000394:	481e      	ldr	r0, [pc, #120]	@ (8000410 <main+0xf0>)
 8000396:	f7ff ff1f 	bl	80001d8 <GPIO_Init>
   //GPIO_Init(GPIOC, 13, output);
//   2. PA5를 output으로 설정//

//   3. set PA5 high//
   uint8_t data = 1;
 800039a:	2301      	movs	r3, #1
 800039c:	71fb      	strb	r3, [r7, #7]
   uint8_t btn = 0;
 800039e:	2300      	movs	r3, #0
 80003a0:	717b      	strb	r3, [r7, #5]
   uint8_t flag = 1;
 80003a2:	2301      	movs	r3, #1
 80003a4:	71bb      	strb	r3, [r7, #6]
//   4. set PA5 low//
   while(1)
   {


      LED_Bar_Write(data);
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	4618      	mov	r0, r3
 80003aa:	f7ff ff81 	bl	80002b0 <LED_Bar_Write>
      delay();
 80003ae:	f000 f831 	bl	8000414 <delay>
      //data = (data << 1) | (data >> 7);

      btn = GPIO_ReadPin(GPIOC, 13);
 80003b2:	210d      	movs	r1, #13
 80003b4:	4816      	ldr	r0, [pc, #88]	@ (8000410 <main+0xf0>)
 80003b6:	f7ff ff64 	bl	8000282 <GPIO_ReadPin>
 80003ba:	4603      	mov	r3, r0
 80003bc:	717b      	strb	r3, [r7, #5]


      if (btn==0)
 80003be:	797b      	ldrb	r3, [r7, #5]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d103      	bne.n	80003cc <main+0xac>
      {
    	flag ^= 1;
 80003c4:	79bb      	ldrb	r3, [r7, #6]
 80003c6:	f083 0301 	eor.w	r3, r3, #1
 80003ca:	71bb      	strb	r3, [r7, #6]
      }



      if (flag)
 80003cc:	79bb      	ldrb	r3, [r7, #6]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d00b      	beq.n	80003ea <main+0xca>
      {
    	  data = (data << 1) | (data >> 7);
 80003d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003d6:	005b      	lsls	r3, r3, #1
 80003d8:	b25a      	sxtb	r2, r3
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	09db      	lsrs	r3, r3, #7
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	b25b      	sxtb	r3, r3
 80003e2:	4313      	orrs	r3, r2
 80003e4:	b25b      	sxtb	r3, r3
 80003e6:	71fb      	strb	r3, [r7, #7]
 80003e8:	e7dd      	b.n	80003a6 <main+0x86>
      } else {
    	  data = (data >> 1) | (data << 7);
 80003ea:	79fb      	ldrb	r3, [r7, #7]
 80003ec:	085b      	lsrs	r3, r3, #1
 80003ee:	b2db      	uxtb	r3, r3
 80003f0:	b25a      	sxtb	r2, r3
 80003f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003f6:	01db      	lsls	r3, r3, #7
 80003f8:	b25b      	sxtb	r3, r3
 80003fa:	4313      	orrs	r3, r2
 80003fc:	b25b      	sxtb	r3, r3
 80003fe:	71fb      	strb	r3, [r7, #7]
      LED_Bar_Write(data);
 8000400:	e7d1      	b.n	80003a6 <main+0x86>
 8000402:	bf00      	nop
 8000404:	40023800 	.word	0x40023800
 8000408:	40020000 	.word	0x40020000
 800040c:	40020400 	.word	0x40020400
 8000410:	40020800 	.word	0x40020800

08000414 <delay>:
   }

}

void delay()
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
   for(int i = 0; i<100000; i++){}
 800041a:	2300      	movs	r3, #0
 800041c:	607b      	str	r3, [r7, #4]
 800041e:	e002      	b.n	8000426 <delay+0x12>
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	3301      	adds	r3, #1
 8000424:	607b      	str	r3, [r7, #4]
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	4a04      	ldr	r2, [pc, #16]	@ (800043c <delay+0x28>)
 800042a:	4293      	cmp	r3, r2
 800042c:	ddf8      	ble.n	8000420 <delay+0xc>
}
 800042e:	bf00      	nop
 8000430:	bf00      	nop
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr
 800043c:	0001869f 	.word	0x0001869f

08000440 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000440:	480d      	ldr	r0, [pc, #52]	@ (8000478 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000442:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000444:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000448:	480c      	ldr	r0, [pc, #48]	@ (800047c <LoopForever+0x6>)
  ldr r1, =_edata
 800044a:	490d      	ldr	r1, [pc, #52]	@ (8000480 <LoopForever+0xa>)
  ldr r2, =_sidata
 800044c:	4a0d      	ldr	r2, [pc, #52]	@ (8000484 <LoopForever+0xe>)
  movs r3, #0
 800044e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000450:	e002      	b.n	8000458 <LoopCopyDataInit>

08000452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000456:	3304      	adds	r3, #4

08000458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800045a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800045c:	d3f9      	bcc.n	8000452 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800045e:	4a0a      	ldr	r2, [pc, #40]	@ (8000488 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000460:	4c0a      	ldr	r4, [pc, #40]	@ (800048c <LoopForever+0x16>)
  movs r3, #0
 8000462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000464:	e001      	b.n	800046a <LoopFillZerobss>

08000466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000468:	3204      	adds	r2, #4

0800046a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800046a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800046c:	d3fb      	bcc.n	8000466 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800046e:	f000 f811 	bl	8000494 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000472:	f7ff ff55 	bl	8000320 <main>

08000476 <LoopForever>:

LoopForever:
  b LoopForever
 8000476:	e7fe      	b.n	8000476 <LoopForever>
  ldr   r0, =_estack
 8000478:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800047c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000480:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8000484:	080004fc 	.word	0x080004fc
  ldr r2, =_sbss
 8000488:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 800048c:	2000005c 	.word	0x2000005c

08000490 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000490:	e7fe      	b.n	8000490 <ADC_IRQHandler>
	...

08000494 <__libc_init_array>:
 8000494:	b570      	push	{r4, r5, r6, lr}
 8000496:	4d0d      	ldr	r5, [pc, #52]	@ (80004cc <__libc_init_array+0x38>)
 8000498:	4c0d      	ldr	r4, [pc, #52]	@ (80004d0 <__libc_init_array+0x3c>)
 800049a:	1b64      	subs	r4, r4, r5
 800049c:	10a4      	asrs	r4, r4, #2
 800049e:	2600      	movs	r6, #0
 80004a0:	42a6      	cmp	r6, r4
 80004a2:	d109      	bne.n	80004b8 <__libc_init_array+0x24>
 80004a4:	4d0b      	ldr	r5, [pc, #44]	@ (80004d4 <__libc_init_array+0x40>)
 80004a6:	4c0c      	ldr	r4, [pc, #48]	@ (80004d8 <__libc_init_array+0x44>)
 80004a8:	f000 f818 	bl	80004dc <_init>
 80004ac:	1b64      	subs	r4, r4, r5
 80004ae:	10a4      	asrs	r4, r4, #2
 80004b0:	2600      	movs	r6, #0
 80004b2:	42a6      	cmp	r6, r4
 80004b4:	d105      	bne.n	80004c2 <__libc_init_array+0x2e>
 80004b6:	bd70      	pop	{r4, r5, r6, pc}
 80004b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80004bc:	4798      	blx	r3
 80004be:	3601      	adds	r6, #1
 80004c0:	e7ee      	b.n	80004a0 <__libc_init_array+0xc>
 80004c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80004c6:	4798      	blx	r3
 80004c8:	3601      	adds	r6, #1
 80004ca:	e7f2      	b.n	80004b2 <__libc_init_array+0x1e>
 80004cc:	080004f4 	.word	0x080004f4
 80004d0:	080004f4 	.word	0x080004f4
 80004d4:	080004f4 	.word	0x080004f4
 80004d8:	080004f8 	.word	0x080004f8

080004dc <_init>:
 80004dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004de:	bf00      	nop
 80004e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004e2:	bc08      	pop	{r3}
 80004e4:	469e      	mov	lr, r3
 80004e6:	4770      	bx	lr

080004e8 <_fini>:
 80004e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ea:	bf00      	nop
 80004ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ee:	bc08      	pop	{r3}
 80004f0:	469e      	mov	lr, r3
 80004f2:	4770      	bx	lr
