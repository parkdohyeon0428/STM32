
250626_Treadmill2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000621c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080063bc  080063bc  000073bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800647c  0800647c  00008104  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800647c  0800647c  0000747c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006484  08006484  00008104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006484  08006484  00007484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006488  08006488  00007488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000104  20000000  0800648c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  20000104  08006590  00008104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004b4  08006590  000084b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008104  2**0
                  CONTENTS, READONLY
 12 .debug_info   000154c8  00000000  00000000  00008134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d0f  00000000  00000000  0001d5fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e0  00000000  00000000  00021310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e8b  00000000  00000000  000225f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188a5  00000000  00000000  0002347b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b0f9  00000000  00000000  0003bd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009187f  00000000  00000000  00056e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e8698  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005078  00000000  00000000  000e86dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000ed754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000104 	.word	0x20000104
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080063a4 	.word	0x080063a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000108 	.word	0x20000108
 80001dc:	080063a4 	.word	0x080063a4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	@ 0x28
 80005b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	613b      	str	r3, [r7, #16]
 80005c6:	4b49      	ldr	r3, [pc, #292]	@ (80006ec <MX_GPIO_Init+0x140>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	4a48      	ldr	r2, [pc, #288]	@ (80006ec <MX_GPIO_Init+0x140>)
 80005cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d2:	4b46      	ldr	r3, [pc, #280]	@ (80006ec <MX_GPIO_Init+0x140>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005da:	613b      	str	r3, [r7, #16]
 80005dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	4b42      	ldr	r3, [pc, #264]	@ (80006ec <MX_GPIO_Init+0x140>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	4a41      	ldr	r2, [pc, #260]	@ (80006ec <MX_GPIO_Init+0x140>)
 80005e8:	f043 0304 	orr.w	r3, r3, #4
 80005ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ee:	4b3f      	ldr	r3, [pc, #252]	@ (80006ec <MX_GPIO_Init+0x140>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	f003 0304 	and.w	r3, r3, #4
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	4b3b      	ldr	r3, [pc, #236]	@ (80006ec <MX_GPIO_Init+0x140>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	4a3a      	ldr	r2, [pc, #232]	@ (80006ec <MX_GPIO_Init+0x140>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	6313      	str	r3, [r2, #48]	@ 0x30
 800060a:	4b38      	ldr	r3, [pc, #224]	@ (80006ec <MX_GPIO_Init+0x140>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	4b34      	ldr	r3, [pc, #208]	@ (80006ec <MX_GPIO_Init+0x140>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	4a33      	ldr	r2, [pc, #204]	@ (80006ec <MX_GPIO_Init+0x140>)
 8000620:	f043 0302 	orr.w	r3, r3, #2
 8000624:	6313      	str	r3, [r2, #48]	@ 0x30
 8000626:	4b31      	ldr	r3, [pc, #196]	@ (80006ec <MX_GPIO_Init+0x140>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	f003 0302 	and.w	r3, r3, #2
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000632:	2200      	movs	r2, #0
 8000634:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8000638:	482d      	ldr	r0, [pc, #180]	@ (80006f0 <MX_GPIO_Init+0x144>)
 800063a:	f002 f847 	bl	80026cc <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_11
 800063e:	2200      	movs	r2, #0
 8000640:	f641 0113 	movw	r1, #6163	@ 0x1813
 8000644:	482b      	ldr	r0, [pc, #172]	@ (80006f4 <MX_GPIO_Init+0x148>)
 8000646:	f002 f841 	bl	80026cc <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 800064a:	2200      	movs	r2, #0
 800064c:	f24f 0107 	movw	r1, #61447	@ 0xf007
 8000650:	4829      	ldr	r0, [pc, #164]	@ (80006f8 <MX_GPIO_Init+0x14c>)
 8000652:	f002 f83b 	bl	80026cc <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000656:	f240 13ff 	movw	r3, #511	@ 0x1ff
 800065a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	2301      	movs	r3, #1
 800065e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2300      	movs	r3, #0
 8000666:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	4619      	mov	r1, r3
 800066e:	4820      	ldr	r0, [pc, #128]	@ (80006f0 <MX_GPIO_Init+0x144>)
 8000670:	f001 fe90 	bl	8002394 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_11
 8000674:	f641 0313 	movw	r3, #6163	@ 0x1813
 8000678:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067a:	2301      	movs	r3, #1
 800067c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000682:	2300      	movs	r3, #0
 8000684:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	4619      	mov	r1, r3
 800068c:	4819      	ldr	r0, [pc, #100]	@ (80006f4 <MX_GPIO_Init+0x148>)
 800068e:	f001 fe81 	bl	8002394 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8000692:	f24f 0307 	movw	r3, #61447	@ 0xf007
 8000696:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000698:	2301      	movs	r3, #1
 800069a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a0:	2300      	movs	r3, #0
 80006a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a4:	f107 0314 	add.w	r3, r7, #20
 80006a8:	4619      	mov	r1, r3
 80006aa:	4813      	ldr	r0, [pc, #76]	@ (80006f8 <MX_GPIO_Init+0x14c>)
 80006ac:	f001 fe72 	bl	8002394 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80006b0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80006b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	4619      	mov	r1, r3
 80006c4:	480b      	ldr	r0, [pc, #44]	@ (80006f4 <MX_GPIO_Init+0x148>)
 80006c6:	f001 fe65 	bl	8002394 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80006ca:	2328      	movs	r3, #40	@ 0x28
 80006cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	4619      	mov	r1, r3
 80006dc:	4806      	ldr	r0, [pc, #24]	@ (80006f8 <MX_GPIO_Init+0x14c>)
 80006de:	f001 fe59 	bl	8002394 <HAL_GPIO_Init>

}
 80006e2:	bf00      	nop
 80006e4:	3728      	adds	r7, #40	@ 0x28
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40020800 	.word	0x40020800
 80006f4:	40020000 	.word	0x40020000
 80006f8:	40020400 	.word	0x40020400

080006fc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000700:	4b12      	ldr	r3, [pc, #72]	@ (800074c <MX_I2C1_Init+0x50>)
 8000702:	4a13      	ldr	r2, [pc, #76]	@ (8000750 <MX_I2C1_Init+0x54>)
 8000704:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000706:	4b11      	ldr	r3, [pc, #68]	@ (800074c <MX_I2C1_Init+0x50>)
 8000708:	4a12      	ldr	r2, [pc, #72]	@ (8000754 <MX_I2C1_Init+0x58>)
 800070a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800070c:	4b0f      	ldr	r3, [pc, #60]	@ (800074c <MX_I2C1_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000712:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <MX_I2C1_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000718:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <MX_I2C1_Init+0x50>)
 800071a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800071e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000720:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <MX_I2C1_Init+0x50>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000726:	4b09      	ldr	r3, [pc, #36]	@ (800074c <MX_I2C1_Init+0x50>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800072c:	4b07      	ldr	r3, [pc, #28]	@ (800074c <MX_I2C1_Init+0x50>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000732:	4b06      	ldr	r3, [pc, #24]	@ (800074c <MX_I2C1_Init+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	@ (800074c <MX_I2C1_Init+0x50>)
 800073a:	f001 ffe1 	bl	8002700 <HAL_I2C_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000744:	f000 f8d2 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000120 	.word	0x20000120
 8000750:	40005400 	.word	0x40005400
 8000754:	000186a0 	.word	0x000186a0

08000758 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	@ 0x28
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a19      	ldr	r2, [pc, #100]	@ (80007dc <HAL_I2C_MspInit+0x84>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d12c      	bne.n	80007d4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <HAL_I2C_MspInit+0x88>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a17      	ldr	r2, [pc, #92]	@ (80007e0 <HAL_I2C_MspInit+0x88>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b15      	ldr	r3, [pc, #84]	@ (80007e0 <HAL_I2C_MspInit+0x88>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000796:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800079a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800079c:	2312      	movs	r3, #18
 800079e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a4:	2303      	movs	r3, #3
 80007a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007a8:	2304      	movs	r3, #4
 80007aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	4619      	mov	r1, r3
 80007b2:	480c      	ldr	r0, [pc, #48]	@ (80007e4 <HAL_I2C_MspInit+0x8c>)
 80007b4:	f001 fdee 	bl	8002394 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <HAL_I2C_MspInit+0x88>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c0:	4a07      	ldr	r2, [pc, #28]	@ (80007e0 <HAL_I2C_MspInit+0x88>)
 80007c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80007c8:	4b05      	ldr	r3, [pc, #20]	@ (80007e0 <HAL_I2C_MspInit+0x88>)
 80007ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007d4:	bf00      	nop
 80007d6:	3728      	adds	r7, #40	@ 0x28
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40005400 	.word	0x40005400
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40020400 	.word	0x40020400

080007e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ec:	f001 fb98 	bl	8001f20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f0:	f000 f814 	bl	800081c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f4:	f7ff feda 	bl	80005ac <MX_GPIO_Init>
  MX_TIM2_Init();
 80007f8:	f000 f9d2 	bl	8000ba0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80007fc:	f000 fbac 	bl	8000f58 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000800:	f7ff ff7c 	bl	80006fc <MX_I2C1_Init>
  MX_TIM3_Init();
 8000804:	f000 fa18 	bl	8000c38 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000808:	f000 f92a 	bl	8000a60 <MX_TIM1_Init>
  MX_TIM4_Init();
 800080c:	f000 fa8c 	bl	8000d28 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  ap_init();
 8000810:	f000 fdb8 	bl	8001384 <ap_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ap_main();
 8000814:	f000 fd88 	bl	8001328 <ap_main>
 8000818:	e7fc      	b.n	8000814 <main+0x2c>
	...

0800081c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b094      	sub	sp, #80	@ 0x50
 8000820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000822:	f107 0320 	add.w	r3, r7, #32
 8000826:	2230      	movs	r2, #48	@ 0x30
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f005 f93c 	bl	8005aa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000840:	2300      	movs	r3, #0
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	4b27      	ldr	r3, [pc, #156]	@ (80008e4 <SystemClock_Config+0xc8>)
 8000846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000848:	4a26      	ldr	r2, [pc, #152]	@ (80008e4 <SystemClock_Config+0xc8>)
 800084a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800084e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000850:	4b24      	ldr	r3, [pc, #144]	@ (80008e4 <SystemClock_Config+0xc8>)
 8000852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000854:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800085c:	2300      	movs	r3, #0
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	4b21      	ldr	r3, [pc, #132]	@ (80008e8 <SystemClock_Config+0xcc>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a20      	ldr	r2, [pc, #128]	@ (80008e8 <SystemClock_Config+0xcc>)
 8000866:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800086a:	6013      	str	r3, [r2, #0]
 800086c:	4b1e      	ldr	r3, [pc, #120]	@ (80008e8 <SystemClock_Config+0xcc>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000878:	2301      	movs	r3, #1
 800087a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800087c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000880:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000882:	2302      	movs	r3, #2
 8000884:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000886:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800088a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800088c:	2304      	movs	r3, #4
 800088e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000890:	2364      	movs	r3, #100	@ 0x64
 8000892:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000894:	2302      	movs	r3, #2
 8000896:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000898:	2304      	movs	r3, #4
 800089a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089c:	f107 0320 	add.w	r3, r7, #32
 80008a0:	4618      	mov	r0, r3
 80008a2:	f002 fbcb 	bl	800303c <HAL_RCC_OscConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008ac:	f000 f81e 	bl	80008ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b0:	230f      	movs	r3, #15
 80008b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b4:	2302      	movs	r3, #2
 80008b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008c6:	f107 030c 	add.w	r3, r7, #12
 80008ca:	2103      	movs	r1, #3
 80008cc:	4618      	mov	r0, r3
 80008ce:	f002 fe2d 	bl	800352c <HAL_RCC_ClockConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008d8:	f000 f808 	bl	80008ec <Error_Handler>
  }
}
 80008dc:	bf00      	nop
 80008de:	3750      	adds	r7, #80	@ 0x50
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40007000 	.word	0x40007000

080008ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f0:	b672      	cpsid	i
}
 80008f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <Error_Handler+0x8>

080008f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	4b10      	ldr	r3, [pc, #64]	@ (8000944 <HAL_MspInit+0x4c>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000906:	4a0f      	ldr	r2, [pc, #60]	@ (8000944 <HAL_MspInit+0x4c>)
 8000908:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800090c:	6453      	str	r3, [r2, #68]	@ 0x44
 800090e:	4b0d      	ldr	r3, [pc, #52]	@ (8000944 <HAL_MspInit+0x4c>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000912:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	603b      	str	r3, [r7, #0]
 800091e:	4b09      	ldr	r3, [pc, #36]	@ (8000944 <HAL_MspInit+0x4c>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000922:	4a08      	ldr	r2, [pc, #32]	@ (8000944 <HAL_MspInit+0x4c>)
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000928:	6413      	str	r3, [r2, #64]	@ 0x40
 800092a:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <HAL_MspInit+0x4c>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800

08000948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <NMI_Handler+0x4>

08000950 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <HardFault_Handler+0x4>

08000958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <MemManage_Handler+0x4>

08000960 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <BusFault_Handler+0x4>

08000968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <UsageFault_Handler+0x4>

08000970 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800099e:	f001 fb11 	bl	8001fc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009ac:	4802      	ldr	r0, [pc, #8]	@ (80009b8 <TIM2_IRQHandler+0x10>)
 80009ae:	f003 fa7f 	bl	8003eb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200001c0 	.word	0x200001c0

080009bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009c0:	4802      	ldr	r0, [pc, #8]	@ (80009cc <USART2_IRQHandler+0x10>)
 80009c2:	f004 f933 	bl	8004c2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000298 	.word	0x20000298

080009d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009d8:	4a14      	ldr	r2, [pc, #80]	@ (8000a2c <_sbrk+0x5c>)
 80009da:	4b15      	ldr	r3, [pc, #84]	@ (8000a30 <_sbrk+0x60>)
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009e4:	4b13      	ldr	r3, [pc, #76]	@ (8000a34 <_sbrk+0x64>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d102      	bne.n	80009f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009ec:	4b11      	ldr	r3, [pc, #68]	@ (8000a34 <_sbrk+0x64>)
 80009ee:	4a12      	ldr	r2, [pc, #72]	@ (8000a38 <_sbrk+0x68>)
 80009f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009f2:	4b10      	ldr	r3, [pc, #64]	@ (8000a34 <_sbrk+0x64>)
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4413      	add	r3, r2
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d207      	bcs.n	8000a10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a00:	f005 f85a 	bl	8005ab8 <__errno>
 8000a04:	4603      	mov	r3, r0
 8000a06:	220c      	movs	r2, #12
 8000a08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a0e:	e009      	b.n	8000a24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a10:	4b08      	ldr	r3, [pc, #32]	@ (8000a34 <_sbrk+0x64>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a16:	4b07      	ldr	r3, [pc, #28]	@ (8000a34 <_sbrk+0x64>)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	4a05      	ldr	r2, [pc, #20]	@ (8000a34 <_sbrk+0x64>)
 8000a20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a22:	68fb      	ldr	r3, [r7, #12]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3718      	adds	r7, #24
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20020000 	.word	0x20020000
 8000a30:	00000400 	.word	0x00000400
 8000a34:	20000174 	.word	0x20000174
 8000a38:	200004b8 	.word	0x200004b8

08000a3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a40:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <SystemInit+0x20>)
 8000a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a46:	4a05      	ldr	r2, [pc, #20]	@ (8000a5c <SystemInit+0x20>)
 8000a48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b096      	sub	sp, #88	@ 0x58
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a66:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a74:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]
 8000a8e:	615a      	str	r2, [r3, #20]
 8000a90:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	2220      	movs	r2, #32
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f005 f805 	bl	8005aa8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a9e:	4b3e      	ldr	r3, [pc, #248]	@ (8000b98 <MX_TIM1_Init+0x138>)
 8000aa0:	4a3e      	ldr	r2, [pc, #248]	@ (8000b9c <MX_TIM1_Init+0x13c>)
 8000aa2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8000aa4:	4b3c      	ldr	r3, [pc, #240]	@ (8000b98 <MX_TIM1_Init+0x138>)
 8000aa6:	2263      	movs	r2, #99	@ 0x63
 8000aa8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aaa:	4b3b      	ldr	r3, [pc, #236]	@ (8000b98 <MX_TIM1_Init+0x138>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000ab0:	4b39      	ldr	r3, [pc, #228]	@ (8000b98 <MX_TIM1_Init+0x138>)
 8000ab2:	2263      	movs	r2, #99	@ 0x63
 8000ab4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab6:	4b38      	ldr	r3, [pc, #224]	@ (8000b98 <MX_TIM1_Init+0x138>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000abc:	4b36      	ldr	r3, [pc, #216]	@ (8000b98 <MX_TIM1_Init+0x138>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ac2:	4b35      	ldr	r3, [pc, #212]	@ (8000b98 <MX_TIM1_Init+0x138>)
 8000ac4:	2280      	movs	r2, #128	@ 0x80
 8000ac6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ac8:	4833      	ldr	r0, [pc, #204]	@ (8000b98 <MX_TIM1_Init+0x138>)
 8000aca:	f002 ff4f 	bl	800396c <HAL_TIM_Base_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000ad4:	f7ff ff0a 	bl	80008ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ad8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000adc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ade:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	482c      	ldr	r0, [pc, #176]	@ (8000b98 <MX_TIM1_Init+0x138>)
 8000ae6:	f003 fb95 	bl	8004214 <HAL_TIM_ConfigClockSource>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000af0:	f7ff fefc 	bl	80008ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000af4:	4828      	ldr	r0, [pc, #160]	@ (8000b98 <MX_TIM1_Init+0x138>)
 8000af6:	f003 f86d 	bl	8003bd4 <HAL_TIM_PWM_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000b00:	f7ff fef4 	bl	80008ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b04:	2300      	movs	r3, #0
 8000b06:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b0c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b10:	4619      	mov	r1, r3
 8000b12:	4821      	ldr	r0, [pc, #132]	@ (8000b98 <MX_TIM1_Init+0x138>)
 8000b14:	f003 ff40 	bl	8004998 <HAL_TIMEx_MasterConfigSynchronization>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000b1e:	f7ff fee5 	bl	80008ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b22:	2360      	movs	r3, #96	@ 0x60
 8000b24:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b32:	2300      	movs	r3, #0
 8000b34:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b36:	2300      	movs	r3, #0
 8000b38:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b42:	2200      	movs	r2, #0
 8000b44:	4619      	mov	r1, r3
 8000b46:	4814      	ldr	r0, [pc, #80]	@ (8000b98 <MX_TIM1_Init+0x138>)
 8000b48:	f003 faa2 	bl	8004090 <HAL_TIM_PWM_ConfigChannel>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000b52:	f7ff fecb 	bl	80008ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b6e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	4619      	mov	r1, r3
 8000b78:	4807      	ldr	r0, [pc, #28]	@ (8000b98 <MX_TIM1_Init+0x138>)
 8000b7a:	f003 ff7b 	bl	8004a74 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000b84:	f7ff feb2 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b88:	4803      	ldr	r0, [pc, #12]	@ (8000b98 <MX_TIM1_Init+0x138>)
 8000b8a:	f000 f983 	bl	8000e94 <HAL_TIM_MspPostInit>

}
 8000b8e:	bf00      	nop
 8000b90:	3758      	adds	r7, #88	@ 0x58
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000178 	.word	0x20000178
 8000b9c:	40010000 	.word	0x40010000

08000ba0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ba6:	f107 0308 	add.w	r3, r7, #8
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8000c34 <MX_TIM2_Init+0x94>)
 8000bbe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bc2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8000bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c34 <MX_TIM2_Init+0x94>)
 8000bc6:	2263      	movs	r2, #99	@ 0x63
 8000bc8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bca:	4b1a      	ldr	r3, [pc, #104]	@ (8000c34 <MX_TIM2_Init+0x94>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000bd0:	4b18      	ldr	r3, [pc, #96]	@ (8000c34 <MX_TIM2_Init+0x94>)
 8000bd2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bd6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd8:	4b16      	ldr	r3, [pc, #88]	@ (8000c34 <MX_TIM2_Init+0x94>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bde:	4b15      	ldr	r3, [pc, #84]	@ (8000c34 <MX_TIM2_Init+0x94>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000be4:	4813      	ldr	r0, [pc, #76]	@ (8000c34 <MX_TIM2_Init+0x94>)
 8000be6:	f002 fec1 	bl	800396c <HAL_TIM_Base_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000bf0:	f7ff fe7c 	bl	80008ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bf8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bfa:	f107 0308 	add.w	r3, r7, #8
 8000bfe:	4619      	mov	r1, r3
 8000c00:	480c      	ldr	r0, [pc, #48]	@ (8000c34 <MX_TIM2_Init+0x94>)
 8000c02:	f003 fb07 	bl	8004214 <HAL_TIM_ConfigClockSource>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c0c:	f7ff fe6e 	bl	80008ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c10:	2300      	movs	r3, #0
 8000c12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c14:	2300      	movs	r3, #0
 8000c16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c18:	463b      	mov	r3, r7
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4805      	ldr	r0, [pc, #20]	@ (8000c34 <MX_TIM2_Init+0x94>)
 8000c1e:	f003 febb 	bl	8004998 <HAL_TIMEx_MasterConfigSynchronization>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c28:	f7ff fe60 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c2c:	bf00      	nop
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	200001c0 	.word	0x200001c0

08000c38 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08e      	sub	sp, #56	@ 0x38
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c4c:	f107 0320 	add.w	r3, r7, #32
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
 8000c64:	615a      	str	r2, [r3, #20]
 8000c66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c68:	4b2d      	ldr	r3, [pc, #180]	@ (8000d20 <MX_TIM3_Init+0xe8>)
 8000c6a:	4a2e      	ldr	r2, [pc, #184]	@ (8000d24 <MX_TIM3_Init+0xec>)
 8000c6c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8000c6e:	4b2c      	ldr	r3, [pc, #176]	@ (8000d20 <MX_TIM3_Init+0xe8>)
 8000c70:	2263      	movs	r2, #99	@ 0x63
 8000c72:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c74:	4b2a      	ldr	r3, [pc, #168]	@ (8000d20 <MX_TIM3_Init+0xe8>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000c7a:	4b29      	ldr	r3, [pc, #164]	@ (8000d20 <MX_TIM3_Init+0xe8>)
 8000c7c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c80:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c82:	4b27      	ldr	r3, [pc, #156]	@ (8000d20 <MX_TIM3_Init+0xe8>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c88:	4b25      	ldr	r3, [pc, #148]	@ (8000d20 <MX_TIM3_Init+0xe8>)
 8000c8a:	2280      	movs	r2, #128	@ 0x80
 8000c8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c8e:	4824      	ldr	r0, [pc, #144]	@ (8000d20 <MX_TIM3_Init+0xe8>)
 8000c90:	f002 fe6c 	bl	800396c <HAL_TIM_Base_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000c9a:	f7ff fe27 	bl	80008ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ca4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ca8:	4619      	mov	r1, r3
 8000caa:	481d      	ldr	r0, [pc, #116]	@ (8000d20 <MX_TIM3_Init+0xe8>)
 8000cac:	f003 fab2 	bl	8004214 <HAL_TIM_ConfigClockSource>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000cb6:	f7ff fe19 	bl	80008ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000cba:	4819      	ldr	r0, [pc, #100]	@ (8000d20 <MX_TIM3_Init+0xe8>)
 8000cbc:	f002 ff8a 	bl	8003bd4 <HAL_TIM_PWM_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000cc6:	f7ff fe11 	bl	80008ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cd2:	f107 0320 	add.w	r3, r7, #32
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4811      	ldr	r0, [pc, #68]	@ (8000d20 <MX_TIM3_Init+0xe8>)
 8000cda:	f003 fe5d 	bl	8004998 <HAL_TIMEx_MasterConfigSynchronization>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000ce4:	f7ff fe02 	bl	80008ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ce8:	2360      	movs	r3, #96	@ 0x60
 8000cea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8000cec:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8000cf0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4807      	ldr	r0, [pc, #28]	@ (8000d20 <MX_TIM3_Init+0xe8>)
 8000d02:	f003 f9c5 	bl	8004090 <HAL_TIM_PWM_ConfigChannel>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000d0c:	f7ff fdee 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d10:	4803      	ldr	r0, [pc, #12]	@ (8000d20 <MX_TIM3_Init+0xe8>)
 8000d12:	f000 f8bf 	bl	8000e94 <HAL_TIM_MspPostInit>

}
 8000d16:	bf00      	nop
 8000d18:	3738      	adds	r7, #56	@ 0x38
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000208 	.word	0x20000208
 8000d24:	40000400 	.word	0x40000400

08000d28 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d2e:	f107 0308 	add.w	r3, r7, #8
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d44:	4b1d      	ldr	r3, [pc, #116]	@ (8000dbc <MX_TIM4_Init+0x94>)
 8000d46:	4a1e      	ldr	r2, [pc, #120]	@ (8000dc0 <MX_TIM4_Init+0x98>)
 8000d48:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8000d4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dbc <MX_TIM4_Init+0x94>)
 8000d4c:	2263      	movs	r2, #99	@ 0x63
 8000d4e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d50:	4b1a      	ldr	r3, [pc, #104]	@ (8000dbc <MX_TIM4_Init+0x94>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000d56:	4b19      	ldr	r3, [pc, #100]	@ (8000dbc <MX_TIM4_Init+0x94>)
 8000d58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d5c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d5e:	4b17      	ldr	r3, [pc, #92]	@ (8000dbc <MX_TIM4_Init+0x94>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d64:	4b15      	ldr	r3, [pc, #84]	@ (8000dbc <MX_TIM4_Init+0x94>)
 8000d66:	2280      	movs	r2, #128	@ 0x80
 8000d68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d6a:	4814      	ldr	r0, [pc, #80]	@ (8000dbc <MX_TIM4_Init+0x94>)
 8000d6c:	f002 fdfe 	bl	800396c <HAL_TIM_Base_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000d76:	f7ff fdb9 	bl	80008ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d80:	f107 0308 	add.w	r3, r7, #8
 8000d84:	4619      	mov	r1, r3
 8000d86:	480d      	ldr	r0, [pc, #52]	@ (8000dbc <MX_TIM4_Init+0x94>)
 8000d88:	f003 fa44 	bl	8004214 <HAL_TIM_ConfigClockSource>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000d92:	f7ff fdab 	bl	80008ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d96:	2300      	movs	r3, #0
 8000d98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d9e:	463b      	mov	r3, r7
 8000da0:	4619      	mov	r1, r3
 8000da2:	4806      	ldr	r0, [pc, #24]	@ (8000dbc <MX_TIM4_Init+0x94>)
 8000da4:	f003 fdf8 	bl	8004998 <HAL_TIMEx_MasterConfigSynchronization>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000dae:	f7ff fd9d 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000db2:	bf00      	nop
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000250 	.word	0x20000250
 8000dc0:	40000800 	.word	0x40000800

08000dc4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a2c      	ldr	r2, [pc, #176]	@ (8000e84 <HAL_TIM_Base_MspInit+0xc0>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d10e      	bne.n	8000df4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
 8000dda:	4b2b      	ldr	r3, [pc, #172]	@ (8000e88 <HAL_TIM_Base_MspInit+0xc4>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dde:	4a2a      	ldr	r2, [pc, #168]	@ (8000e88 <HAL_TIM_Base_MspInit+0xc4>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000de6:	4b28      	ldr	r3, [pc, #160]	@ (8000e88 <HAL_TIM_Base_MspInit+0xc4>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000df2:	e042      	b.n	8000e7a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM2)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000dfc:	d116      	bne.n	8000e2c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	4b21      	ldr	r3, [pc, #132]	@ (8000e88 <HAL_TIM_Base_MspInit+0xc4>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e06:	4a20      	ldr	r2, [pc, #128]	@ (8000e88 <HAL_TIM_Base_MspInit+0xc4>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000e88 <HAL_TIM_Base_MspInit+0xc4>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	201c      	movs	r0, #28
 8000e20:	f001 f9ef 	bl	8002202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e24:	201c      	movs	r0, #28
 8000e26:	f001 fa08 	bl	800223a <HAL_NVIC_EnableIRQ>
}
 8000e2a:	e026      	b.n	8000e7a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM3)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a16      	ldr	r2, [pc, #88]	@ (8000e8c <HAL_TIM_Base_MspInit+0xc8>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d10e      	bne.n	8000e54 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	4b13      	ldr	r3, [pc, #76]	@ (8000e88 <HAL_TIM_Base_MspInit+0xc4>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3e:	4a12      	ldr	r2, [pc, #72]	@ (8000e88 <HAL_TIM_Base_MspInit+0xc4>)
 8000e40:	f043 0302 	orr.w	r3, r3, #2
 8000e44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e46:	4b10      	ldr	r3, [pc, #64]	@ (8000e88 <HAL_TIM_Base_MspInit+0xc4>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
}
 8000e52:	e012      	b.n	8000e7a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM4)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a0d      	ldr	r2, [pc, #52]	@ (8000e90 <HAL_TIM_Base_MspInit+0xcc>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d10d      	bne.n	8000e7a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60bb      	str	r3, [r7, #8]
 8000e62:	4b09      	ldr	r3, [pc, #36]	@ (8000e88 <HAL_TIM_Base_MspInit+0xc4>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e66:	4a08      	ldr	r2, [pc, #32]	@ (8000e88 <HAL_TIM_Base_MspInit+0xc4>)
 8000e68:	f043 0304 	orr.w	r3, r3, #4
 8000e6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e6e:	4b06      	ldr	r3, [pc, #24]	@ (8000e88 <HAL_TIM_Base_MspInit+0xc4>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e72:	f003 0304 	and.w	r3, r3, #4
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
}
 8000e7a:	bf00      	nop
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40010000 	.word	0x40010000
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40000400 	.word	0x40000400
 8000e90:	40000800 	.word	0x40000800

08000e94 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08a      	sub	sp, #40	@ 0x28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a24      	ldr	r2, [pc, #144]	@ (8000f44 <HAL_TIM_MspPostInit+0xb0>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d11f      	bne.n	8000ef6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	4b23      	ldr	r3, [pc, #140]	@ (8000f48 <HAL_TIM_MspPostInit+0xb4>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	4a22      	ldr	r2, [pc, #136]	@ (8000f48 <HAL_TIM_MspPostInit+0xb4>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec6:	4b20      	ldr	r3, [pc, #128]	@ (8000f48 <HAL_TIM_MspPostInit+0xb4>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ed2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	4619      	mov	r1, r3
 8000eee:	4817      	ldr	r0, [pc, #92]	@ (8000f4c <HAL_TIM_MspPostInit+0xb8>)
 8000ef0:	f001 fa50 	bl	8002394 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ef4:	e022      	b.n	8000f3c <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a15      	ldr	r2, [pc, #84]	@ (8000f50 <HAL_TIM_MspPostInit+0xbc>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d11d      	bne.n	8000f3c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f00:	2300      	movs	r3, #0
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	4b10      	ldr	r3, [pc, #64]	@ (8000f48 <HAL_TIM_MspPostInit+0xb4>)
 8000f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f08:	4a0f      	ldr	r2, [pc, #60]	@ (8000f48 <HAL_TIM_MspPostInit+0xb4>)
 8000f0a:	f043 0302 	orr.w	r3, r3, #2
 8000f0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f10:	4b0d      	ldr	r3, [pc, #52]	@ (8000f48 <HAL_TIM_MspPostInit+0xb4>)
 8000f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f14:	f003 0302 	and.w	r3, r3, #2
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f1c:	2310      	movs	r3, #16
 8000f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	4807      	ldr	r0, [pc, #28]	@ (8000f54 <HAL_TIM_MspPostInit+0xc0>)
 8000f38:	f001 fa2c 	bl	8002394 <HAL_GPIO_Init>
}
 8000f3c:	bf00      	nop
 8000f3e:	3728      	adds	r7, #40	@ 0x28
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40010000 	.word	0x40010000
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40020000 	.word	0x40020000
 8000f50:	40000400 	.word	0x40000400
 8000f54:	40020400 	.word	0x40020400

08000f58 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	@ (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f5e:	4a12      	ldr	r2, [pc, #72]	@ (8000fa8 <MX_USART2_UART_Init+0x50>)
 8000f60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f62:	4b10      	ldr	r3, [pc, #64]	@ (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f70:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f76:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f7c:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f7e:	220c      	movs	r2, #12
 8000f80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f82:	4b08      	ldr	r3, [pc, #32]	@ (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f88:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f8e:	4805      	ldr	r0, [pc, #20]	@ (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f90:	f003 fdd6 	bl	8004b40 <HAL_UART_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f9a:	f7ff fca7 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000298 	.word	0x20000298
 8000fa8:	40004400 	.word	0x40004400

08000fac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	@ 0x28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a1d      	ldr	r2, [pc, #116]	@ (8001040 <HAL_UART_MspInit+0x94>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d133      	bne.n	8001036 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]
 8000fd2:	4b1c      	ldr	r3, [pc, #112]	@ (8001044 <HAL_UART_MspInit+0x98>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd6:	4a1b      	ldr	r2, [pc, #108]	@ (8001044 <HAL_UART_MspInit+0x98>)
 8000fd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fde:	4b19      	ldr	r3, [pc, #100]	@ (8001044 <HAL_UART_MspInit+0x98>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	4b15      	ldr	r3, [pc, #84]	@ (8001044 <HAL_UART_MspInit+0x98>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	4a14      	ldr	r2, [pc, #80]	@ (8001044 <HAL_UART_MspInit+0x98>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffa:	4b12      	ldr	r3, [pc, #72]	@ (8001044 <HAL_UART_MspInit+0x98>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001006:	230c      	movs	r3, #12
 8001008:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001012:	2303      	movs	r3, #3
 8001014:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001016:	2307      	movs	r3, #7
 8001018:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101a:	f107 0314 	add.w	r3, r7, #20
 800101e:	4619      	mov	r1, r3
 8001020:	4809      	ldr	r0, [pc, #36]	@ (8001048 <HAL_UART_MspInit+0x9c>)
 8001022:	f001 f9b7 	bl	8002394 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2100      	movs	r1, #0
 800102a:	2026      	movs	r0, #38	@ 0x26
 800102c:	f001 f8e9 	bl	8002202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001030:	2026      	movs	r0, #38	@ 0x26
 8001032:	f001 f902 	bl	800223a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001036:	bf00      	nop
 8001038:	3728      	adds	r7, #40	@ 0x28
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40004400 	.word	0x40004400
 8001044:	40023800 	.word	0x40023800
 8001048:	40020000 	.word	0x40020000

0800104c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800104c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001084 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001050:	f7ff fcf4 	bl	8000a3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001054:	480c      	ldr	r0, [pc, #48]	@ (8001088 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001056:	490d      	ldr	r1, [pc, #52]	@ (800108c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001058:	4a0d      	ldr	r2, [pc, #52]	@ (8001090 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800105c:	e002      	b.n	8001064 <LoopCopyDataInit>

0800105e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001062:	3304      	adds	r3, #4

08001064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001068:	d3f9      	bcc.n	800105e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106a:	4a0a      	ldr	r2, [pc, #40]	@ (8001094 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800106c:	4c0a      	ldr	r4, [pc, #40]	@ (8001098 <LoopFillZerobss+0x22>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001070:	e001      	b.n	8001076 <LoopFillZerobss>

08001072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001074:	3204      	adds	r2, #4

08001076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001078:	d3fb      	bcc.n	8001072 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800107a:	f004 fd23 	bl	8005ac4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800107e:	f7ff fbb3 	bl	80007e8 <main>
  bx  lr    
 8001082:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001084:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001088:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800108c:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8001090:	0800648c 	.word	0x0800648c
  ldr r2, =_sbss
 8001094:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8001098:	200004b4 	.word	0x200004b4

0800109c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800109c:	e7fe      	b.n	800109c <ADC_IRQHandler>
	...

080010a0 <Listener_Init>:
static uint8_t rcvData = 0;
static Que_TypeDef uartRxQue;
inputData_TypeDef inputData;
UltraSonic_TypeDef sensor;
void Listener_Init()
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af02      	add	r7, sp, #8
	Button_Init(&hBtnUP, GPIOB, GPIO_PIN_5);
 80010a6:	2220      	movs	r2, #32
 80010a8:	4914      	ldr	r1, [pc, #80]	@ (80010fc <Listener_Init+0x5c>)
 80010aa:	4815      	ldr	r0, [pc, #84]	@ (8001100 <Listener_Init+0x60>)
 80010ac:	f000 fa2e 	bl	800150c <Button_Init>
	Button_Init(&hBtnDOWN, GPIOB, GPIO_PIN_3);
 80010b0:	2208      	movs	r2, #8
 80010b2:	4912      	ldr	r1, [pc, #72]	@ (80010fc <Listener_Init+0x5c>)
 80010b4:	4813      	ldr	r0, [pc, #76]	@ (8001104 <Listener_Init+0x64>)
 80010b6:	f000 fa29 	bl	800150c <Button_Init>
	Button_Init(&hBtnSTOP, GPIOA, GPIO_PIN_10);
 80010ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010be:	4912      	ldr	r1, [pc, #72]	@ (8001108 <Listener_Init+0x68>)
 80010c0:	4812      	ldr	r0, [pc, #72]	@ (800110c <Listener_Init+0x6c>)
 80010c2:	f000 fa23 	bl	800150c <Button_Init>
	Button_Init(&hBtnSTART, GPIOC, GPIO_PIN_13);
 80010c6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010ca:	4911      	ldr	r1, [pc, #68]	@ (8001110 <Listener_Init+0x70>)
 80010cc:	4811      	ldr	r0, [pc, #68]	@ (8001114 <Listener_Init+0x74>)
 80010ce:	f000 fa1d 	bl	800150c <Button_Init>
	UltraSonic_Init(&sensor, GPIOC, GPIO_PIN_7, GPIOA, GPIO_PIN_9);
 80010d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001108 <Listener_Init+0x68>)
 80010da:	2280      	movs	r2, #128	@ 0x80
 80010dc:	490c      	ldr	r1, [pc, #48]	@ (8001110 <Listener_Init+0x70>)
 80010de:	480e      	ldr	r0, [pc, #56]	@ (8001118 <Listener_Init+0x78>)
 80010e0:	f000 fe9c 	bl	8001e1c <UltraSonic_Init>

	Que_Init(&uartRxQue);
 80010e4:	480d      	ldr	r0, [pc, #52]	@ (800111c <Listener_Init+0x7c>)
 80010e6:	f000 f95d 	bl	80013a4 <Que_Init>
	HAL_UART_Receive_IT(&huart2, &rcvData, 1); // uart recv interrupt enable
 80010ea:	2201      	movs	r2, #1
 80010ec:	490c      	ldr	r1, [pc, #48]	@ (8001120 <Listener_Init+0x80>)
 80010ee:	480d      	ldr	r0, [pc, #52]	@ (8001124 <Listener_Init+0x84>)
 80010f0:	f003 fd76 	bl	8004be0 <HAL_UART_Receive_IT>
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40020400 	.word	0x40020400
 8001100:	20000318 	.word	0x20000318
 8001104:	20000324 	.word	0x20000324
 8001108:	40020000 	.word	0x40020000
 800110c:	20000330 	.word	0x20000330
 8001110:	40020800 	.word	0x40020800
 8001114:	2000033c 	.word	0x2000033c
 8001118:	200002fc 	.word	0x200002fc
 800111c:	200002e4 	.word	0x200002e4
 8001120:	200002e0 	.word	0x200002e0
 8001124:	20000298 	.word	0x20000298

08001128 <Presenter_Init>:

static watch_t dispData = {TIME_WATCH, 12, 0, 0, 0};
//extern TreadmillState_t state;

void Presenter_Init()
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	LCD_Init(&hi2c1);
 800112c:	4802      	ldr	r0, [pc, #8]	@ (8001138 <Presenter_Init+0x10>)
 800112e:	f000 fcb1 	bl	8001a94 <LCD_Init>
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000120 	.word	0x20000120

0800113c <Presenter_Excute>:
{
	memcpy(&dispData, &watchData, sizeof(watch_t));
}

void Presenter_Excute()
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
	Presenter_DispLcdTreadmill(state);
 8001140:	4b07      	ldr	r3, [pc, #28]	@ (8001160 <Presenter_Excute+0x24>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	4618      	mov	r0, r3
 8001146:	f000 f80f 	bl	8001168 <Presenter_DispLcdTreadmill>
	display_speed(speed, state);
 800114a:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <Presenter_Excute+0x28>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a04      	ldr	r2, [pc, #16]	@ (8001160 <Presenter_Excute+0x24>)
 8001150:	7812      	ldrb	r2, [r2, #0]
 8001152:	4611      	mov	r1, r2
 8001154:	4618      	mov	r0, r3
 8001156:	f000 f879 	bl	800124c <display_speed>
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000314 	.word	0x20000314
 8001164:	20000008 	.word	0x20000008

08001168 <Presenter_DispLcdTreadmill>:
//		prevState = state;
//	}
//}

void Presenter_DispLcdTreadmill(TreadmillState_t state)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b090      	sub	sp, #64	@ 0x40
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
    static TreadmillState_t prevState = -1;
    static uint32_t stopDisplayStartTime = 0;
    static uint8_t isStopDisplayed = 0;

    if (state == NO_RUNNING && isStopDisplayed == 0)
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	2b02      	cmp	r3, #2
 8001176:	d11f      	bne.n	80011b8 <Presenter_DispLcdTreadmill+0x50>
 8001178:	4b2e      	ldr	r3, [pc, #184]	@ (8001234 <Presenter_DispLcdTreadmill+0xcc>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d11b      	bne.n	80011b8 <Presenter_DispLcdTreadmill+0x50>
    {
        char str[50];
        sprintf(str, "Stop");
 8001180:	f107 030c 	add.w	r3, r7, #12
 8001184:	492c      	ldr	r1, [pc, #176]	@ (8001238 <Presenter_DispLcdTreadmill+0xd0>)
 8001186:	4618      	mov	r0, r3
 8001188:	f004 fc6c 	bl	8005a64 <siprintf>

        LCD_clear();
 800118c:	f000 fde6 	bl	8001d5c <LCD_clear>
        LCD_writeStringXY(0, 0, str);
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	461a      	mov	r2, r3
 8001196:	2100      	movs	r1, #0
 8001198:	2000      	movs	r0, #0
 800119a:	f000 fdca 	bl	8001d32 <LCD_writeStringXY>

        stopDisplayStartTime = HAL_GetTick(); // 현재 시간 저장
 800119e:	f000 ff25 	bl	8001fec <HAL_GetTick>
 80011a2:	4603      	mov	r3, r0
 80011a4:	4a25      	ldr	r2, [pc, #148]	@ (800123c <Presenter_DispLcdTreadmill+0xd4>)
 80011a6:	6013      	str	r3, [r2, #0]
        isStopDisplayed = 1; // 표시 시작
 80011a8:	4b22      	ldr	r3, [pc, #136]	@ (8001234 <Presenter_DispLcdTreadmill+0xcc>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	701a      	strb	r2, [r3, #0]
        prevState = state;
 80011ae:	4a24      	ldr	r2, [pc, #144]	@ (8001240 <Presenter_DispLcdTreadmill+0xd8>)
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	7013      	strb	r3, [r2, #0]
    {
 80011b4:	bf00      	nop

        LCD_clear();
        LCD_writeStringXY(0, 0, str);
        prevState = state;
    }
}
 80011b6:	e039      	b.n	800122c <Presenter_DispLcdTreadmill+0xc4>
    else if (isStopDisplayed == 1)
 80011b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001234 <Presenter_DispLcdTreadmill+0xcc>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d10e      	bne.n	80011de <Presenter_DispLcdTreadmill+0x76>
        if (HAL_GetTick() - stopDisplayStartTime >= 2000) // 2000ms = 2초
 80011c0:	f000 ff14 	bl	8001fec <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	4b1d      	ldr	r3, [pc, #116]	@ (800123c <Presenter_DispLcdTreadmill+0xd4>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80011d0:	d32c      	bcc.n	800122c <Presenter_DispLcdTreadmill+0xc4>
            isStopDisplayed = 0; // 표시 종료
 80011d2:	4b18      	ldr	r3, [pc, #96]	@ (8001234 <Presenter_DispLcdTreadmill+0xcc>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	701a      	strb	r2, [r3, #0]
            LCD_clear();
 80011d8:	f000 fdc0 	bl	8001d5c <LCD_clear>
}
 80011dc:	e026      	b.n	800122c <Presenter_DispLcdTreadmill+0xc4>
    else if (state != prevState && state != NO_RUNNING)
 80011de:	4b18      	ldr	r3, [pc, #96]	@ (8001240 <Presenter_DispLcdTreadmill+0xd8>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	79fa      	ldrb	r2, [r7, #7]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d021      	beq.n	800122c <Presenter_DispLcdTreadmill+0xc4>
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d01e      	beq.n	800122c <Presenter_DispLcdTreadmill+0xc4>
        if (state == RUNNING) {
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d106      	bne.n	8001202 <Presenter_DispLcdTreadmill+0x9a>
            sprintf(str, "Running");
 80011f4:	f107 030c 	add.w	r3, r7, #12
 80011f8:	4912      	ldr	r1, [pc, #72]	@ (8001244 <Presenter_DispLcdTreadmill+0xdc>)
 80011fa:	4618      	mov	r0, r3
 80011fc:	f004 fc32 	bl	8005a64 <siprintf>
 8001200:	e008      	b.n	8001214 <Presenter_DispLcdTreadmill+0xac>
        else if (state == IDLE) {
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d105      	bne.n	8001214 <Presenter_DispLcdTreadmill+0xac>
            sprintf(str, "Press Button");
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	490e      	ldr	r1, [pc, #56]	@ (8001248 <Presenter_DispLcdTreadmill+0xe0>)
 800120e:	4618      	mov	r0, r3
 8001210:	f004 fc28 	bl	8005a64 <siprintf>
        LCD_clear();
 8001214:	f000 fda2 	bl	8001d5c <LCD_clear>
        LCD_writeStringXY(0, 0, str);
 8001218:	f107 030c 	add.w	r3, r7, #12
 800121c:	461a      	mov	r2, r3
 800121e:	2100      	movs	r1, #0
 8001220:	2000      	movs	r0, #0
 8001222:	f000 fd86 	bl	8001d32 <LCD_writeStringXY>
        prevState = state;
 8001226:	4a06      	ldr	r2, [pc, #24]	@ (8001240 <Presenter_DispLcdTreadmill+0xd8>)
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	7013      	strb	r3, [r2, #0]
}
 800122c:	bf00      	nop
 800122e:	3740      	adds	r7, #64	@ 0x40
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	2000030c 	.word	0x2000030c
 8001238:	08006404 	.word	0x08006404
 800123c:	20000310 	.word	0x20000310
 8001240:	20000004 	.word	0x20000004
 8001244:	0800640c 	.word	0x0800640c
 8001248:	08006414 	.word	0x08006414

0800124c <display_speed>:


void display_speed(int speed, TreadmillState_t state)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	70fb      	strb	r3, [r7, #3]
	int led = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]

	if ((speed >= 1) && (speed <= 5)) {
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	dd05      	ble.n	800126e <display_speed+0x22>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b05      	cmp	r3, #5
 8001266:	dc02      	bgt.n	800126e <display_speed+0x22>
		led = 0b00000001;
 8001268:	2301      	movs	r3, #1
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	e03d      	b.n	80012ea <display_speed+0x9e>
	}
	else if ((speed >= 6) && (speed <= 10)) {
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b05      	cmp	r3, #5
 8001272:	dd05      	ble.n	8001280 <display_speed+0x34>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b0a      	cmp	r3, #10
 8001278:	dc02      	bgt.n	8001280 <display_speed+0x34>
		led = 0b00000011;
 800127a:	2303      	movs	r3, #3
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	e034      	b.n	80012ea <display_speed+0x9e>
	}
	else if ((speed >= 11) && (speed <= 15)) {
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2b0a      	cmp	r3, #10
 8001284:	dd05      	ble.n	8001292 <display_speed+0x46>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2b0f      	cmp	r3, #15
 800128a:	dc02      	bgt.n	8001292 <display_speed+0x46>
		led = 0b00000111;
 800128c:	2307      	movs	r3, #7
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	e02b      	b.n	80012ea <display_speed+0x9e>
	}
	else if ((speed >= 15) && (speed <= 20)) {
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b0e      	cmp	r3, #14
 8001296:	dd05      	ble.n	80012a4 <display_speed+0x58>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b14      	cmp	r3, #20
 800129c:	dc02      	bgt.n	80012a4 <display_speed+0x58>
		led = 0b00001111;
 800129e:	230f      	movs	r3, #15
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	e022      	b.n	80012ea <display_speed+0x9e>
	}
	else if ((speed >= 21) && (speed <= 25)) {
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b14      	cmp	r3, #20
 80012a8:	dd05      	ble.n	80012b6 <display_speed+0x6a>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b19      	cmp	r3, #25
 80012ae:	dc02      	bgt.n	80012b6 <display_speed+0x6a>
		led = 0b00011111;
 80012b0:	231f      	movs	r3, #31
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	e019      	b.n	80012ea <display_speed+0x9e>
	}
	else if ((speed >= 26) && (speed <= 30)) {
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b19      	cmp	r3, #25
 80012ba:	dd05      	ble.n	80012c8 <display_speed+0x7c>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b1e      	cmp	r3, #30
 80012c0:	dc02      	bgt.n	80012c8 <display_speed+0x7c>
		led = 0b00111111;
 80012c2:	233f      	movs	r3, #63	@ 0x3f
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	e010      	b.n	80012ea <display_speed+0x9e>
	}
	else if ((speed >= 31) && (speed <= 36)) {
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b1e      	cmp	r3, #30
 80012cc:	dd05      	ble.n	80012da <display_speed+0x8e>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2b24      	cmp	r3, #36	@ 0x24
 80012d2:	dc02      	bgt.n	80012da <display_speed+0x8e>
		led = 0b01111111;
 80012d4:	237f      	movs	r3, #127	@ 0x7f
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	e007      	b.n	80012ea <display_speed+0x9e>
	}
	else if ((speed >= 37) && (speed <= 42)) {
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2b24      	cmp	r3, #36	@ 0x24
 80012de:	dd04      	ble.n	80012ea <display_speed+0x9e>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80012e4:	dc01      	bgt.n	80012ea <display_speed+0x9e>
		led = 0b11111111;
 80012e6:	23ff      	movs	r3, #255	@ 0xff
 80012e8:	60fb      	str	r3, [r7, #12]
	}

	if (state == RUNNING) {
 80012ea:	78fb      	ldrb	r3, [r7, #3]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d105      	bne.n	80012fc <display_speed+0xb0>
		LedBar_Write(led);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	4618      	mov	r0, r3
 80012f6:	f000 fd3b 	bl	8001d70 <LedBar_Write>
	} else {
		LedBar_Write(0x00);
	}

}
 80012fa:	e002      	b.n	8001302 <display_speed+0xb6>
		LedBar_Write(0x00);
 80012fc:	2000      	movs	r0, #0
 80012fe:	f000 fd37 	bl	8001d70 <LedBar_Write>
}
 8001302:	bf00      	nop
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_TIM_PeriodElapsedCallback>:
 */

#include "ap_main.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2) {
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800131a:	d101      	bne.n	8001320 <HAL_TIM_PeriodElapsedCallback+0x16>
		FND_DispDataCallBack();
 800131c:	f000 fa28 	bl	8001770 <FND_DispDataCallBack>
	}
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <ap_main>:




int ap_main()
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Start_IT(&htim2);
 800132e:	4810      	ldr	r0, [pc, #64]	@ (8001370 <ap_main+0x48>)
 8001330:	f002 fbee 	bl	8003b10 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim4);
 8001334:	480f      	ldr	r0, [pc, #60]	@ (8001374 <ap_main+0x4c>)
 8001336:	f002 fb69 	bl	8003a0c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800133a:	2100      	movs	r1, #0
 800133c:	480e      	ldr	r0, [pc, #56]	@ (8001378 <ap_main+0x50>)
 800133e:	f002 fca3 	bl	8003c88 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim3);
 8001342:	480e      	ldr	r0, [pc, #56]	@ (800137c <ap_main+0x54>)
 8001344:	f002 fb62 	bl	8003a0c <HAL_TIM_Base_Start>

    while (1)
    {
        treadmill_run();
 8001348:	f000 f85a 	bl	8001400 <treadmill_run>
        treadmill_emergency();
 800134c:	f000 f8be 	bl	80014cc <treadmill_emergency>
        int dist = UltraSonic_GetDistance(&sensor);
 8001350:	480b      	ldr	r0, [pc, #44]	@ (8001380 <ap_main+0x58>)
 8001352:	f000 fd7d 	bl	8001e50 <UltraSonic_GetDistance>
 8001356:	6078      	str	r0, [r7, #4]
        FND_WriteData(dist);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	b29b      	uxth	r3, r3
 800135c:	4618      	mov	r0, r3
 800135e:	f000 f9f7 	bl	8001750 <FND_WriteData>
        Presenter_Excute();
 8001362:	f7ff feeb 	bl	800113c <Presenter_Excute>

        HAL_Delay(100);
 8001366:	2064      	movs	r0, #100	@ 0x64
 8001368:	f000 fe4c 	bl	8002004 <HAL_Delay>
    {
 800136c:	bf00      	nop
 800136e:	e7eb      	b.n	8001348 <ap_main+0x20>
 8001370:	200001c0 	.word	0x200001c0
 8001374:	20000250 	.word	0x20000250
 8001378:	20000178 	.word	0x20000178
 800137c:	20000208 	.word	0x20000208
 8001380:	200002fc 	.word	0x200002fc

08001384 <ap_init>:

    return 0;
}

void ap_init()
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
	Listener_Init();
 8001388:	f7ff fe8a 	bl	80010a0 <Listener_Init>
	Presenter_Init();
 800138c:	f7ff fecc 	bl	8001128 <Presenter_Init>
	Sound_Init();
 8001390:	f000 f818 	bl	80013c4 <Sound_Init>
	DC_Motor_Init(&htim1, TIM_CHANNEL_1);
 8001394:	2100      	movs	r1, #0
 8001396:	4802      	ldr	r0, [pc, #8]	@ (80013a0 <ap_init+0x1c>)
 8001398:	f000 f96c 	bl	8001674 <DC_Motor_Init>
}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000178 	.word	0x20000178

080013a4 <Que_Init>:
#include "queue.h"



void Que_Init(Que_TypeDef *q)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	q->front = 0;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
	q->rear = 0;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	605a      	str	r2, [r3, #4]
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <Sound_Init>:
 *      Author: kccistc
 */
#include "sound.h"

void Sound_Init()
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	Buzzer_Init(&htim3, TIM_CHANNEL_1);
 80013c8:	2100      	movs	r1, #0
 80013ca:	4802      	ldr	r0, [pc, #8]	@ (80013d4 <Sound_Init+0x10>)
 80013cc:	f000 f8e6 	bl	800159c <Buzzer_Init>
}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000208 	.word	0x20000208

080013d8 <Sound_PowerOn>:

void Sound_PowerOn()
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
	Buzzer_SetFreq(1047); // 523hz -> 도
 80013dc:	f240 4017 	movw	r0, #1047	@ 0x417
 80013e0:	f000 f8f2 	bl	80015c8 <Buzzer_SetFreq>
	Buzzer_Start();
 80013e4:	f000 f926 	bl	8001634 <Buzzer_Start>
	HAL_Delay(100);
 80013e8:	2064      	movs	r0, #100	@ 0x64
 80013ea:	f000 fe0b 	bl	8002004 <HAL_Delay>
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <Sound_PowerOff>:

void Sound_PowerOff()
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	af00      	add	r7, sp, #0
	Buzzer_Stop();
 80013f6:	f000 f92d 	bl	8001654 <Buzzer_Stop>
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <treadmill_run>:
	}
	return 0;
}

void treadmill_run()
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
    switch (state)
 8001404:	4b2b      	ldr	r3, [pc, #172]	@ (80014b4 <treadmill_run+0xb4>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b02      	cmp	r3, #2
 800140a:	d048      	beq.n	800149e <treadmill_run+0x9e>
 800140c:	2b02      	cmp	r3, #2
 800140e:	dc4f      	bgt.n	80014b0 <treadmill_run+0xb0>
 8001410:	2b00      	cmp	r3, #0
 8001412:	d002      	beq.n	800141a <treadmill_run+0x1a>
 8001414:	2b01      	cmp	r3, #1
 8001416:	d00a      	beq.n	800142e <treadmill_run+0x2e>

        case NO_RUNNING:
            DC_Motor_Stop();
        	state = IDLE;
    }
}
 8001418:	e04a      	b.n	80014b0 <treadmill_run+0xb0>
            if (Button_GetState(&hBtnSTART) == ACT_PUSHED) {
 800141a:	4827      	ldr	r0, [pc, #156]	@ (80014b8 <treadmill_run+0xb8>)
 800141c:	f000 f88c 	bl	8001538 <Button_GetState>
 8001420:	4603      	mov	r3, r0
 8001422:	2b01      	cmp	r3, #1
 8001424:	d141      	bne.n	80014aa <treadmill_run+0xaa>
                state = RUNNING;
 8001426:	4b23      	ldr	r3, [pc, #140]	@ (80014b4 <treadmill_run+0xb4>)
 8001428:	2201      	movs	r2, #1
 800142a:	701a      	strb	r2, [r3, #0]
            break;
 800142c:	e03d      	b.n	80014aa <treadmill_run+0xaa>
            DC_Motor_SetFreq(10, speed);
 800142e:	4b23      	ldr	r3, [pc, #140]	@ (80014bc <treadmill_run+0xbc>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4619      	mov	r1, r3
 8001434:	200a      	movs	r0, #10
 8001436:	f000 f933 	bl	80016a0 <DC_Motor_SetFreq>
        	DC_Motor_Start();
 800143a:	f000 f969 	bl	8001710 <DC_Motor_Start>
            if (Button_GetState(&hBtnSTOP) == ACT_PUSHED) {
 800143e:	4820      	ldr	r0, [pc, #128]	@ (80014c0 <treadmill_run+0xc0>)
 8001440:	f000 f87a 	bl	8001538 <Button_GetState>
 8001444:	4603      	mov	r3, r0
 8001446:	2b01      	cmp	r3, #1
 8001448:	d103      	bne.n	8001452 <treadmill_run+0x52>
                state = NO_RUNNING;
 800144a:	4b1a      	ldr	r3, [pc, #104]	@ (80014b4 <treadmill_run+0xb4>)
 800144c:	2202      	movs	r2, #2
 800144e:	701a      	strb	r2, [r3, #0]
            break;
 8001450:	e02d      	b.n	80014ae <treadmill_run+0xae>
            else if (Button_GetState(&hBtnUP) == ACT_PUSHED) {
 8001452:	481c      	ldr	r0, [pc, #112]	@ (80014c4 <treadmill_run+0xc4>)
 8001454:	f000 f870 	bl	8001538 <Button_GetState>
 8001458:	4603      	mov	r3, r0
 800145a:	2b01      	cmp	r3, #1
 800145c:	d10c      	bne.n	8001478 <treadmill_run+0x78>
                speed += 2;
 800145e:	4b17      	ldr	r3, [pc, #92]	@ (80014bc <treadmill_run+0xbc>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	3302      	adds	r3, #2
 8001464:	4a15      	ldr	r2, [pc, #84]	@ (80014bc <treadmill_run+0xbc>)
 8001466:	6013      	str	r3, [r2, #0]
                if (speed > MAX_SPEED) speed = MAX_SPEED;
 8001468:	4b14      	ldr	r3, [pc, #80]	@ (80014bc <treadmill_run+0xbc>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b64      	cmp	r3, #100	@ 0x64
 800146e:	dd1e      	ble.n	80014ae <treadmill_run+0xae>
 8001470:	4b12      	ldr	r3, [pc, #72]	@ (80014bc <treadmill_run+0xbc>)
 8001472:	2264      	movs	r2, #100	@ 0x64
 8001474:	601a      	str	r2, [r3, #0]
            break;
 8001476:	e01a      	b.n	80014ae <treadmill_run+0xae>
            else if (Button_GetState(&hBtnDOWN) == ACT_PUSHED) {
 8001478:	4813      	ldr	r0, [pc, #76]	@ (80014c8 <treadmill_run+0xc8>)
 800147a:	f000 f85d 	bl	8001538 <Button_GetState>
 800147e:	4603      	mov	r3, r0
 8001480:	2b01      	cmp	r3, #1
 8001482:	d114      	bne.n	80014ae <treadmill_run+0xae>
                speed -= 2;
 8001484:	4b0d      	ldr	r3, [pc, #52]	@ (80014bc <treadmill_run+0xbc>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	3b02      	subs	r3, #2
 800148a:	4a0c      	ldr	r2, [pc, #48]	@ (80014bc <treadmill_run+0xbc>)
 800148c:	6013      	str	r3, [r2, #0]
                if (speed < MIN_SPEED) speed = MIN_SPEED;
 800148e:	4b0b      	ldr	r3, [pc, #44]	@ (80014bc <treadmill_run+0xbc>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	da0b      	bge.n	80014ae <treadmill_run+0xae>
 8001496:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <treadmill_run+0xbc>)
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
            break;
 800149c:	e007      	b.n	80014ae <treadmill_run+0xae>
            DC_Motor_Stop();
 800149e:	f000 f947 	bl	8001730 <DC_Motor_Stop>
        	state = IDLE;
 80014a2:	4b04      	ldr	r3, [pc, #16]	@ (80014b4 <treadmill_run+0xb4>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]
}
 80014a8:	e002      	b.n	80014b0 <treadmill_run+0xb0>
            break;
 80014aa:	bf00      	nop
 80014ac:	e000      	b.n	80014b0 <treadmill_run+0xb0>
            break;
 80014ae:	bf00      	nop
}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000314 	.word	0x20000314
 80014b8:	2000033c 	.word	0x2000033c
 80014bc:	20000008 	.word	0x20000008
 80014c0:	20000330 	.word	0x20000330
 80014c4:	20000318 	.word	0x20000318
 80014c8:	20000324 	.word	0x20000324

080014cc <treadmill_emergency>:

void treadmill_emergency()
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
    int dist = UltraSonic_GetDistance(&sensor);
 80014d2:	480c      	ldr	r0, [pc, #48]	@ (8001504 <treadmill_emergency+0x38>)
 80014d4:	f000 fcbc 	bl	8001e50 <UltraSonic_GetDistance>
 80014d8:	6078      	str	r0, [r7, #4]

    if ((dist <= 5) && (dist >= 1) && (state == RUNNING)) {
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2b05      	cmp	r3, #5
 80014de:	dc09      	bgt.n	80014f4 <treadmill_emergency+0x28>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	dd06      	ble.n	80014f4 <treadmill_emergency+0x28>
 80014e6:	4b08      	ldr	r3, [pc, #32]	@ (8001508 <treadmill_emergency+0x3c>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d102      	bne.n	80014f4 <treadmill_emergency+0x28>
    	Sound_PowerOn();
 80014ee:	f7ff ff73 	bl	80013d8 <Sound_PowerOn>
 80014f2:	e002      	b.n	80014fa <treadmill_emergency+0x2e>
    } else {
    	Sound_PowerOff();
 80014f4:	f7ff ff7d 	bl	80013f2 <Sound_PowerOff>
    }
}
 80014f8:	bf00      	nop
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	200002fc 	.word	0x200002fc
 8001508:	20000314 	.word	0x20000314

0800150c <Button_Init>:
Button_Handler_t hBtnSTOP;
Button_Handler_t hBtnSTART;


void Button_Init(Button_Handler_t *hbtn, GPIO_TypeDef *GPIOx, uint16_t pinNum)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	4613      	mov	r3, r2
 8001518:	80fb      	strh	r3, [r7, #6]
	hbtn->GPIOx = GPIOx;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	68ba      	ldr	r2, [r7, #8]
 800151e:	601a      	str	r2, [r3, #0]
	hbtn->pinNum = pinNum;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	88fa      	ldrh	r2, [r7, #6]
 8001524:	809a      	strh	r2, [r3, #4]
	hbtn->prevState = RELEASED;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2201      	movs	r2, #1
 800152a:	609a      	str	r2, [r3, #8]
}
 800152c:	bf00      	nop
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <Button_GetState>:

button_state_t Button_GetState(Button_Handler_t *hbtn)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
	uint32_t curState;
	curState = HAL_GPIO_ReadPin(hbtn->GPIOx, hbtn->pinNum); // normal state is high.
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	889b      	ldrh	r3, [r3, #4]
 8001548:	4619      	mov	r1, r3
 800154a:	4610      	mov	r0, r2
 800154c:	f001 f8a6 	bl	800269c <HAL_GPIO_ReadPin>
 8001550:	4603      	mov	r3, r0
 8001552:	60fb      	str	r3, [r7, #12]

	if ((hbtn->prevState == RELEASED) && (curState == PUSHED)) { // button released -> pushed
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d10a      	bne.n	8001572 <Button_GetState+0x3a>
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d107      	bne.n	8001572 <Button_GetState+0x3a>
		HAL_Delay(2); // debounce
 8001562:	2002      	movs	r0, #2
 8001564:	f000 fd4e 	bl	8002004 <HAL_Delay>
		hbtn->prevState = PUSHED;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
		return ACT_PUSHED;
 800156e:	2301      	movs	r3, #1
 8001570:	e00f      	b.n	8001592 <Button_GetState+0x5a>
	}
	else if ((hbtn->prevState == PUSHED) && (curState == RELEASED)) { // button pushed -> released
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d10a      	bne.n	8001590 <Button_GetState+0x58>
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d107      	bne.n	8001590 <Button_GetState+0x58>
		HAL_Delay(2); // debounce
 8001580:	2002      	movs	r0, #2
 8001582:	f000 fd3f 	bl	8002004 <HAL_Delay>
		hbtn->prevState = RELEASED;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	609a      	str	r2, [r3, #8]
		return ACT_RELEASED;
 800158c:	2302      	movs	r3, #2
 800158e:	e000      	b.n	8001592 <Button_GetState+0x5a>
	}
	return NO_ACT;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <Buzzer_Init>:

static TIM_HandleTypeDef *hbuzzerTim;
static uint32_t buzzerTimChannel;

void Buzzer_Init(TIM_HandleTypeDef *htim, uint32_t channel)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
	hbuzzerTim = htim;
 80015a6:	4a06      	ldr	r2, [pc, #24]	@ (80015c0 <Buzzer_Init+0x24>)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6013      	str	r3, [r2, #0]
	buzzerTimChannel = channel;
 80015ac:	4a05      	ldr	r2, [pc, #20]	@ (80015c4 <Buzzer_Init+0x28>)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	6013      	str	r3, [r2, #0]
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	20000348 	.word	0x20000348
 80015c4:	2000034c 	.word	0x2000034c

080015c8 <Buzzer_SetFreq>:

void Buzzer_SetFreq(uint32_t freq)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
	if (freq < 100) freq = 100;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b63      	cmp	r3, #99	@ 0x63
 80015d4:	d802      	bhi.n	80015dc <Buzzer_SetFreq+0x14>
 80015d6:	2364      	movs	r3, #100	@ 0x64
 80015d8:	607b      	str	r3, [r7, #4]
 80015da:	e007      	b.n	80015ec <Buzzer_SetFreq+0x24>
	else if (freq > 10000) freq = 10000;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f242 7210 	movw	r2, #10000	@ 0x2710
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d902      	bls.n	80015ec <Buzzer_SetFreq+0x24>
 80015e6:	f242 7310 	movw	r3, #10000	@ 0x2710
 80015ea:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_AUTORELOAD(&htim3, 1000000/freq - 1);
 80015ec:	4a0e      	ldr	r2, [pc, #56]	@ (8001628 <Buzzer_SetFreq+0x60>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80015f4:	4b0d      	ldr	r3, [pc, #52]	@ (800162c <Buzzer_SetFreq+0x64>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	3a01      	subs	r2, #1
 80015fa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80015fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001628 <Buzzer_SetFreq+0x60>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	fbb2 f3f3 	udiv	r3, r2, r3
 8001604:	3b01      	subs	r3, #1
 8001606:	4a09      	ldr	r2, [pc, #36]	@ (800162c <Buzzer_SetFreq+0x64>)
 8001608:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1000000/freq/2 - 1); // duty cycle 50%
 800160a:	4a09      	ldr	r2, [pc, #36]	@ (8001630 <Buzzer_SetFreq+0x68>)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001612:	4b06      	ldr	r3, [pc, #24]	@ (800162c <Buzzer_SetFreq+0x64>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	3a01      	subs	r2, #1
 8001618:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	000f4240 	.word	0x000f4240
 800162c:	20000208 	.word	0x20000208
 8001630:	0007a120 	.word	0x0007a120

08001634 <Buzzer_Start>:

void Buzzer_Start()
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(hbuzzerTim, buzzerTimChannel);
 8001638:	4b04      	ldr	r3, [pc, #16]	@ (800164c <Buzzer_Start+0x18>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a04      	ldr	r2, [pc, #16]	@ (8001650 <Buzzer_Start+0x1c>)
 800163e:	6812      	ldr	r2, [r2, #0]
 8001640:	4611      	mov	r1, r2
 8001642:	4618      	mov	r0, r3
 8001644:	f002 fb20 	bl	8003c88 <HAL_TIM_PWM_Start>
}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000348 	.word	0x20000348
 8001650:	2000034c 	.word	0x2000034c

08001654 <Buzzer_Stop>:

void Buzzer_Stop()
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(hbuzzerTim, buzzerTimChannel);
 8001658:	4b04      	ldr	r3, [pc, #16]	@ (800166c <Buzzer_Stop+0x18>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a04      	ldr	r2, [pc, #16]	@ (8001670 <Buzzer_Stop+0x1c>)
 800165e:	6812      	ldr	r2, [r2, #0]
 8001660:	4611      	mov	r1, r2
 8001662:	4618      	mov	r0, r3
 8001664:	f002 fbc0 	bl	8003de8 <HAL_TIM_PWM_Stop>
}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000348 	.word	0x20000348
 8001670:	2000034c 	.word	0x2000034c

08001674 <DC_Motor_Init>:

static TIM_HandleTypeDef *hmotorTim;
static uint32_t motorTimChannel;

void DC_Motor_Init(TIM_HandleTypeDef *htim, uint32_t channel)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
	hmotorTim = htim;
 800167e:	4a06      	ldr	r2, [pc, #24]	@ (8001698 <DC_Motor_Init+0x24>)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6013      	str	r3, [r2, #0]
	motorTimChannel = channel;
 8001684:	4a05      	ldr	r2, [pc, #20]	@ (800169c <DC_Motor_Init+0x28>)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	6013      	str	r3, [r2, #0]
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20000350 	.word	0x20000350
 800169c:	20000354 	.word	0x20000354

080016a0 <DC_Motor_SetFreq>:

void DC_Motor_SetFreq(uint32_t freq, int duty)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
	if (duty < 0) duty = 0;
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	da02      	bge.n	80016b6 <DC_Motor_SetFreq+0x16>
 80016b0:	2300      	movs	r3, #0
 80016b2:	603b      	str	r3, [r7, #0]
 80016b4:	e004      	b.n	80016c0 <DC_Motor_SetFreq+0x20>
	else if (duty > 100) duty = 100;
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	2b64      	cmp	r3, #100	@ 0x64
 80016ba:	dd01      	ble.n	80016c0 <DC_Motor_SetFreq+0x20>
 80016bc:	2364      	movs	r3, #100	@ 0x64
 80016be:	603b      	str	r3, [r7, #0]

    uint32_t arr = 1000000 / freq - 1;  // 주기 설정
 80016c0:	4a10      	ldr	r2, [pc, #64]	@ (8001704 <DC_Motor_SetFreq+0x64>)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c8:	3b01      	subs	r3, #1
 80016ca:	60fb      	str	r3, [r7, #12]
    uint32_t ccr = (arr + 1) * duty / 100;  // 듀티비 비율 설정
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	3301      	adds	r3, #1
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	fb02 f303 	mul.w	r3, r2, r3
 80016d6:	4a0c      	ldr	r2, [pc, #48]	@ (8001708 <DC_Motor_SetFreq+0x68>)
 80016d8:	fba2 2303 	umull	r2, r3, r2, r3
 80016dc:	095b      	lsrs	r3, r3, #5
 80016de:	60bb      	str	r3, [r7, #8]

	__HAL_TIM_SET_AUTORELOAD(&htim1, arr);
 80016e0:	4b0a      	ldr	r3, [pc, #40]	@ (800170c <DC_Motor_SetFreq+0x6c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	68fa      	ldr	r2, [r7, #12]
 80016e6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80016e8:	4a08      	ldr	r2, [pc, #32]	@ (800170c <DC_Motor_SetFreq+0x6c>)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ccr);
 80016ee:	4b07      	ldr	r3, [pc, #28]	@ (800170c <DC_Motor_SetFreq+0x6c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80016f6:	bf00      	nop
 80016f8:	3714      	adds	r7, #20
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	000f4240 	.word	0x000f4240
 8001708:	51eb851f 	.word	0x51eb851f
 800170c:	20000178 	.word	0x20000178

08001710 <DC_Motor_Start>:

void DC_Motor_Start()
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(hmotorTim, motorTimChannel);
 8001714:	4b04      	ldr	r3, [pc, #16]	@ (8001728 <DC_Motor_Start+0x18>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a04      	ldr	r2, [pc, #16]	@ (800172c <DC_Motor_Start+0x1c>)
 800171a:	6812      	ldr	r2, [r2, #0]
 800171c:	4611      	mov	r1, r2
 800171e:	4618      	mov	r0, r3
 8001720:	f002 fab2 	bl	8003c88 <HAL_TIM_PWM_Start>
}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000350 	.word	0x20000350
 800172c:	20000354 	.word	0x20000354

08001730 <DC_Motor_Stop>:

void DC_Motor_Stop()
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(hmotorTim, motorTimChannel);
 8001734:	4b04      	ldr	r3, [pc, #16]	@ (8001748 <DC_Motor_Stop+0x18>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a04      	ldr	r2, [pc, #16]	@ (800174c <DC_Motor_Stop+0x1c>)
 800173a:	6812      	ldr	r2, [r2, #0]
 800173c:	4611      	mov	r1, r2
 800173e:	4618      	mov	r0, r3
 8001740:	f002 fb52 	bl	8003de8 <HAL_TIM_PWM_Stop>
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000350 	.word	0x20000350
 800174c:	20000354 	.word	0x20000354

08001750 <FND_WriteData>:
	else
		fndDispDp &= ~dpData;
}

void FND_WriteData(uint16_t data)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	80fb      	strh	r3, [r7, #6]
	fndDispNum = data;
 800175a:	4a04      	ldr	r2, [pc, #16]	@ (800176c <FND_WriteData+0x1c>)
 800175c:	88fb      	ldrh	r3, [r7, #6]
 800175e:	8013      	strh	r3, [r2, #0]
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	20000358 	.word	0x20000358

08001770 <FND_DispDataCallBack>:
	return fndDispNum;
}

// display fndDispNum
void FND_DispDataCallBack()
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
	static int digitPos = 0;
	// 인터럽트가 발생하면 한 자리씩 출력한다.
	digitPos = (digitPos+1) % 8;
 8001774:	4b80      	ldr	r3, [pc, #512]	@ (8001978 <FND_DispDataCallBack+0x208>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	3301      	adds	r3, #1
 800177a:	425a      	negs	r2, r3
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	f002 0207 	and.w	r2, r2, #7
 8001784:	bf58      	it	pl
 8001786:	4253      	negpl	r3, r2
 8001788:	4a7b      	ldr	r2, [pc, #492]	@ (8001978 <FND_DispDataCallBack+0x208>)
 800178a:	6013      	str	r3, [r2, #0]
	switch(digitPos)
 800178c:	4b7a      	ldr	r3, [pc, #488]	@ (8001978 <FND_DispDataCallBack+0x208>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b07      	cmp	r3, #7
 8001792:	f200 80ee 	bhi.w	8001972 <FND_DispDataCallBack+0x202>
 8001796:	a201      	add	r2, pc, #4	@ (adr r2, 800179c <FND_DispDataCallBack+0x2c>)
 8001798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179c:	080017bd 	.word	0x080017bd
 80017a0:	080017eb 	.word	0x080017eb
 80017a4:	08001823 	.word	0x08001823
 80017a8:	0800185b 	.word	0x0800185b
 80017ac:	08001893 	.word	0x08001893
 80017b0:	080018cb 	.word	0x080018cb
 80017b4:	08001903 	.word	0x08001903
 80017b8:	0800193b 	.word	0x0800193b
	{
	case DIGIT_1:
		FND_DispOffAll();
 80017bc:	f000 f8e8 	bl	8001990 <FND_DispOffAll>
		FND_DispDigit(fndDispNum % 10);
 80017c0:	4b6e      	ldr	r3, [pc, #440]	@ (800197c <FND_DispDataCallBack+0x20c>)
 80017c2:	881a      	ldrh	r2, [r3, #0]
 80017c4:	4b6e      	ldr	r3, [pc, #440]	@ (8001980 <FND_DispDataCallBack+0x210>)
 80017c6:	fba3 1302 	umull	r1, r3, r3, r2
 80017ca:	08d9      	lsrs	r1, r3, #3
 80017cc:	460b      	mov	r3, r1
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	440b      	add	r3, r1
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	4618      	mov	r0, r3
 80017da:	f000 f913 	bl	8001a04 <FND_DispDigit>
		FND_DispOn(digitPos);
 80017de:	4b66      	ldr	r3, [pc, #408]	@ (8001978 <FND_DispDataCallBack+0x208>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 f8f6 	bl	80019d4 <FND_DispOn>
		break;
 80017e8:	e0c3      	b.n	8001972 <FND_DispDataCallBack+0x202>
	case DIGIT_10:
		FND_DispOffAll();
 80017ea:	f000 f8d1 	bl	8001990 <FND_DispOffAll>
		FND_DispDigit(fndDispNum /10 % 10);
 80017ee:	4b63      	ldr	r3, [pc, #396]	@ (800197c <FND_DispDataCallBack+0x20c>)
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	4a63      	ldr	r2, [pc, #396]	@ (8001980 <FND_DispDataCallBack+0x210>)
 80017f4:	fba2 2303 	umull	r2, r3, r2, r3
 80017f8:	08db      	lsrs	r3, r3, #3
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	4b60      	ldr	r3, [pc, #384]	@ (8001980 <FND_DispDataCallBack+0x210>)
 80017fe:	fba3 1302 	umull	r1, r3, r3, r2
 8001802:	08d9      	lsrs	r1, r3, #3
 8001804:	460b      	mov	r3, r1
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	440b      	add	r3, r1
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	b29b      	uxth	r3, r3
 8001810:	4618      	mov	r0, r3
 8001812:	f000 f8f7 	bl	8001a04 <FND_DispDigit>
		FND_DispOn(digitPos);
 8001816:	4b58      	ldr	r3, [pc, #352]	@ (8001978 <FND_DispDataCallBack+0x208>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f000 f8da 	bl	80019d4 <FND_DispOn>
		break;
 8001820:	e0a7      	b.n	8001972 <FND_DispDataCallBack+0x202>
	case DIGIT_100:
		FND_DispOffAll();
 8001822:	f000 f8b5 	bl	8001990 <FND_DispOffAll>
		FND_DispDigit(fndDispNum /100 % 10);
 8001826:	4b55      	ldr	r3, [pc, #340]	@ (800197c <FND_DispDataCallBack+0x20c>)
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	4a56      	ldr	r2, [pc, #344]	@ (8001984 <FND_DispDataCallBack+0x214>)
 800182c:	fba2 2303 	umull	r2, r3, r2, r3
 8001830:	095b      	lsrs	r3, r3, #5
 8001832:	b29a      	uxth	r2, r3
 8001834:	4b52      	ldr	r3, [pc, #328]	@ (8001980 <FND_DispDataCallBack+0x210>)
 8001836:	fba3 1302 	umull	r1, r3, r3, r2
 800183a:	08d9      	lsrs	r1, r3, #3
 800183c:	460b      	mov	r3, r1
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	440b      	add	r3, r1
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	b29b      	uxth	r3, r3
 8001848:	4618      	mov	r0, r3
 800184a:	f000 f8db 	bl	8001a04 <FND_DispDigit>
		FND_DispOn(digitPos);
 800184e:	4b4a      	ldr	r3, [pc, #296]	@ (8001978 <FND_DispDataCallBack+0x208>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f000 f8be 	bl	80019d4 <FND_DispOn>
		break;
 8001858:	e08b      	b.n	8001972 <FND_DispDataCallBack+0x202>
	case DIGIT_1000:
		FND_DispOffAll();
 800185a:	f000 f899 	bl	8001990 <FND_DispOffAll>
		FND_DispDigit(fndDispNum /1000 % 10);
 800185e:	4b47      	ldr	r3, [pc, #284]	@ (800197c <FND_DispDataCallBack+0x20c>)
 8001860:	881b      	ldrh	r3, [r3, #0]
 8001862:	4a49      	ldr	r2, [pc, #292]	@ (8001988 <FND_DispDataCallBack+0x218>)
 8001864:	fba2 2303 	umull	r2, r3, r2, r3
 8001868:	099b      	lsrs	r3, r3, #6
 800186a:	b29a      	uxth	r2, r3
 800186c:	4b44      	ldr	r3, [pc, #272]	@ (8001980 <FND_DispDataCallBack+0x210>)
 800186e:	fba3 1302 	umull	r1, r3, r3, r2
 8001872:	08d9      	lsrs	r1, r3, #3
 8001874:	460b      	mov	r3, r1
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	440b      	add	r3, r1
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	b29b      	uxth	r3, r3
 8001880:	4618      	mov	r0, r3
 8001882:	f000 f8bf 	bl	8001a04 <FND_DispDigit>
		FND_DispOn(digitPos);
 8001886:	4b3c      	ldr	r3, [pc, #240]	@ (8001978 <FND_DispDataCallBack+0x208>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f000 f8a2 	bl	80019d4 <FND_DispOn>
		break;
 8001890:	e06f      	b.n	8001972 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_1:
		FND_DispOffAll();
 8001892:	f000 f87d 	bl	8001990 <FND_DispOffAll>
		if (fndDispDp & (1<<0)) {
 8001896:	4b3d      	ldr	r3, [pc, #244]	@ (800198c <FND_DispDataCallBack+0x21c>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <FND_DispDataCallBack+0x13a>
			FND_DispDigit(10); // DP ON
 80018a2:	200a      	movs	r0, #10
 80018a4:	f000 f8ae 	bl	8001a04 <FND_DispDigit>
 80018a8:	e002      	b.n	80018b0 <FND_DispDataCallBack+0x140>
		} else {
			FND_DispDigit(11); // ALL OFF
 80018aa:	200b      	movs	r0, #11
 80018ac:	f000 f8aa 	bl	8001a04 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 80018b0:	4b31      	ldr	r3, [pc, #196]	@ (8001978 <FND_DispDataCallBack+0x208>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	425a      	negs	r2, r3
 80018b6:	f003 0303 	and.w	r3, r3, #3
 80018ba:	f002 0203 	and.w	r2, r2, #3
 80018be:	bf58      	it	pl
 80018c0:	4253      	negpl	r3, r2
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 f886 	bl	80019d4 <FND_DispOn>
		break;
 80018c8:	e053      	b.n	8001972 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_10:
		FND_DispOffAll();
 80018ca:	f000 f861 	bl	8001990 <FND_DispOffAll>
		if (fndDispDp & (1<<1)) {
 80018ce:	4b2f      	ldr	r3, [pc, #188]	@ (800198c <FND_DispDataCallBack+0x21c>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <FND_DispDataCallBack+0x172>
			FND_DispDigit(10); // DP ON
 80018da:	200a      	movs	r0, #10
 80018dc:	f000 f892 	bl	8001a04 <FND_DispDigit>
 80018e0:	e002      	b.n	80018e8 <FND_DispDataCallBack+0x178>
		} else {
			FND_DispDigit(11); // ALL OFF
 80018e2:	200b      	movs	r0, #11
 80018e4:	f000 f88e 	bl	8001a04 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 80018e8:	4b23      	ldr	r3, [pc, #140]	@ (8001978 <FND_DispDataCallBack+0x208>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	425a      	negs	r2, r3
 80018ee:	f003 0303 	and.w	r3, r3, #3
 80018f2:	f002 0203 	and.w	r2, r2, #3
 80018f6:	bf58      	it	pl
 80018f8:	4253      	negpl	r3, r2
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 f86a 	bl	80019d4 <FND_DispOn>
		break;
 8001900:	e037      	b.n	8001972 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_100:
		FND_DispOffAll();
 8001902:	f000 f845 	bl	8001990 <FND_DispOffAll>
		if (fndDispDp & (1<<2)) {
 8001906:	4b21      	ldr	r3, [pc, #132]	@ (800198c <FND_DispDataCallBack+0x21c>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	f003 0304 	and.w	r3, r3, #4
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <FND_DispDataCallBack+0x1aa>
			FND_DispDigit(10); // DP ON
 8001912:	200a      	movs	r0, #10
 8001914:	f000 f876 	bl	8001a04 <FND_DispDigit>
 8001918:	e002      	b.n	8001920 <FND_DispDataCallBack+0x1b0>
		} else {
			FND_DispDigit(11); // ALL OFF
 800191a:	200b      	movs	r0, #11
 800191c:	f000 f872 	bl	8001a04 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8001920:	4b15      	ldr	r3, [pc, #84]	@ (8001978 <FND_DispDataCallBack+0x208>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	425a      	negs	r2, r3
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	f002 0203 	and.w	r2, r2, #3
 800192e:	bf58      	it	pl
 8001930:	4253      	negpl	r3, r2
 8001932:	4618      	mov	r0, r3
 8001934:	f000 f84e 	bl	80019d4 <FND_DispOn>
		break;
 8001938:	e01b      	b.n	8001972 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_1000:
		FND_DispOffAll();
 800193a:	f000 f829 	bl	8001990 <FND_DispOffAll>
		if (fndDispDp & (1<<3)) {
 800193e:	4b13      	ldr	r3, [pc, #76]	@ (800198c <FND_DispDataCallBack+0x21c>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	f003 0308 	and.w	r3, r3, #8
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <FND_DispDataCallBack+0x1e2>
			FND_DispDigit(10); // DP ON
 800194a:	200a      	movs	r0, #10
 800194c:	f000 f85a 	bl	8001a04 <FND_DispDigit>
 8001950:	e002      	b.n	8001958 <FND_DispDataCallBack+0x1e8>
		} else {
			FND_DispDigit(11); // ALL OFF
 8001952:	200b      	movs	r0, #11
 8001954:	f000 f856 	bl	8001a04 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8001958:	4b07      	ldr	r3, [pc, #28]	@ (8001978 <FND_DispDataCallBack+0x208>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	425a      	negs	r2, r3
 800195e:	f003 0303 	and.w	r3, r3, #3
 8001962:	f002 0203 	and.w	r2, r2, #3
 8001966:	bf58      	it	pl
 8001968:	4253      	negpl	r3, r2
 800196a:	4618      	mov	r0, r3
 800196c:	f000 f832 	bl	80019d4 <FND_DispOn>
		break;
 8001970:	bf00      	nop
	}
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	2000035c 	.word	0x2000035c
 800197c:	20000358 	.word	0x20000358
 8001980:	cccccccd 	.word	0xcccccccd
 8001984:	51eb851f 	.word	0x51eb851f
 8001988:	10624dd3 	.word	0x10624dd3
 800198c:	2000035a 	.word	0x2000035a

08001990 <FND_DispOffAll>:
	// GPIO_Write(GPIOx, Pin, RESET);
	HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, RESET);
}

void FND_DispOffAll()
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
	// GPIO_Write(GPIOx, Pin, RESET);
	for (int i=0; i<4; i++) {
 8001996:	2300      	movs	r3, #0
 8001998:	607b      	str	r3, [r7, #4]
 800199a:	e010      	b.n	80019be <FND_DispOffAll+0x2e>
		HAL_GPIO_WritePin(fndDigitCom[i].GPIOx, fndDigitCom[i].pinNum, RESET);
 800199c:	4a0c      	ldr	r2, [pc, #48]	@ (80019d0 <FND_DispOffAll+0x40>)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80019a4:	4a0a      	ldr	r2, [pc, #40]	@ (80019d0 <FND_DispOffAll+0x40>)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	4413      	add	r3, r2
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	2200      	movs	r2, #0
 80019b2:	4619      	mov	r1, r3
 80019b4:	f000 fe8a 	bl	80026cc <HAL_GPIO_WritePin>
	for (int i=0; i<4; i++) {
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3301      	adds	r3, #1
 80019bc:	607b      	str	r3, [r7, #4]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b03      	cmp	r3, #3
 80019c2:	ddeb      	ble.n	800199c <FND_DispOffAll+0xc>
	}
}
 80019c4:	bf00      	nop
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	2000000c 	.word	0x2000000c

080019d4 <FND_DispOn>:

void FND_DispOn(int fndPos)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	// GPIO_Write(GPIOx, Pin, SET);
	HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, SET);
 80019dc:	4a08      	ldr	r2, [pc, #32]	@ (8001a00 <FND_DispOn+0x2c>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80019e4:	4a06      	ldr	r2, [pc, #24]	@ (8001a00 <FND_DispOn+0x2c>)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	4413      	add	r3, r2
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	2201      	movs	r2, #1
 80019f2:	4619      	mov	r1, r3
 80019f4:	f000 fe6a 	bl	80026cc <HAL_GPIO_WritePin>
}
 80019f8:	bf00      	nop
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	2000000c 	.word	0x2000000c

08001a04 <FND_DispDigit>:


void FND_DispDigit(uint16_t digit)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	80fb      	strh	r3, [r7, #6]
	const uint8_t segFont[12] = {
 8001a0e:	4a1f      	ldr	r2, [pc, #124]	@ (8001a8c <FND_DispDigit+0x88>)
 8001a10:	f107 0308 	add.w	r3, r7, #8
 8001a14:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x6F,
			0x7F,  // dot
			0x00   // all off
	};

	for (int i=0; i<8; i++) {
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	e02c      	b.n	8001a7a <FND_DispDigit+0x76>
		if (!(segFont[digit] & (1<<i))) {
 8001a20:	88fb      	ldrh	r3, [r7, #6]
 8001a22:	3318      	adds	r3, #24
 8001a24:	443b      	add	r3, r7
 8001a26:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	fa42 f303 	asr.w	r3, r2, r3
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10e      	bne.n	8001a58 <FND_DispDigit+0x54>
			HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, RESET); // 0 -> on
 8001a3a:	4a15      	ldr	r2, [pc, #84]	@ (8001a90 <FND_DispDigit+0x8c>)
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001a42:	4a13      	ldr	r2, [pc, #76]	@ (8001a90 <FND_DispDigit+0x8c>)
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	4413      	add	r3, r2
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	2200      	movs	r2, #0
 8001a50:	4619      	mov	r1, r3
 8001a52:	f000 fe3b 	bl	80026cc <HAL_GPIO_WritePin>
 8001a56:	e00d      	b.n	8001a74 <FND_DispDigit+0x70>
		}
		else {
			HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, SET); // 1 -> off
 8001a58:	4a0d      	ldr	r2, [pc, #52]	@ (8001a90 <FND_DispDigit+0x8c>)
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001a60:	4a0b      	ldr	r2, [pc, #44]	@ (8001a90 <FND_DispDigit+0x8c>)
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	4413      	add	r3, r2
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	4619      	mov	r1, r3
 8001a70:	f000 fe2c 	bl	80026cc <HAL_GPIO_WritePin>
	for (int i=0; i<8; i++) {
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	3301      	adds	r3, #1
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	2b07      	cmp	r3, #7
 8001a7e:	ddcf      	ble.n	8001a20 <FND_DispDigit+0x1c>
		}
	}
}
 8001a80:	bf00      	nop
 8001a82:	bf00      	nop
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	08006424 	.word	0x08006424
 8001a90:	2000002c 	.word	0x2000002c

08001a94 <LCD_Init>:

static uint8_t lcdData = 0;
static I2C_HandleTypeDef *hLcdI2C;

void LCD_Init(I2C_HandleTypeDef *hI2C)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
	hLcdI2C = hI2C;
 8001a9c:	4a18      	ldr	r2, [pc, #96]	@ (8001b00 <LCD_Init+0x6c>)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6013      	str	r3, [r2, #0]
	HAL_Delay(50);
 8001aa2:	2032      	movs	r0, #50	@ 0x32
 8001aa4:	f000 faae 	bl	8002004 <HAL_Delay>
	LCD_cmdMode();
 8001aa8:	f000 f852 	bl	8001b50 <LCD_cmdMode>
	LCD_writeMode();
 8001aac:	f000 f874 	bl	8001b98 <LCD_writeMode>
	LCD_sendNibbleData(0x30);
 8001ab0:	2030      	movs	r0, #48	@ 0x30
 8001ab2:	f000 f8a7 	bl	8001c04 <LCD_sendNibbleData>
	HAL_Delay(5);
 8001ab6:	2005      	movs	r0, #5
 8001ab8:	f000 faa4 	bl	8002004 <HAL_Delay>
	LCD_sendNibbleData(0x30);
 8001abc:	2030      	movs	r0, #48	@ 0x30
 8001abe:	f000 f8a1 	bl	8001c04 <LCD_sendNibbleData>
	HAL_Delay(1);
 8001ac2:	2001      	movs	r0, #1
 8001ac4:	f000 fa9e 	bl	8002004 <HAL_Delay>
	LCD_sendNibbleData(0x30);
 8001ac8:	2030      	movs	r0, #48	@ 0x30
 8001aca:	f000 f89b 	bl	8001c04 <LCD_sendNibbleData>
	LCD_sendNibbleData(0x20);
 8001ace:	2020      	movs	r0, #32
 8001ad0:	f000 f898 	bl	8001c04 <LCD_sendNibbleData>
	LCD_sendData(LCD_4BIT_FUNC_SET);
 8001ad4:	2028      	movs	r0, #40	@ 0x28
 8001ad6:	f000 f8b9 	bl	8001c4c <LCD_sendData>
	LCD_sendData(LCD_DISP_OFF);
 8001ada:	2008      	movs	r0, #8
 8001adc:	f000 f8b6 	bl	8001c4c <LCD_sendData>
	LCD_sendData(LCD_DISP_CLEAR);
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	f000 f8b3 	bl	8001c4c <LCD_sendData>
	LCD_sendData(LCD_ENTRY_MODE_SET);
 8001ae6:	2006      	movs	r0, #6
 8001ae8:	f000 f8b0 	bl	8001c4c <LCD_sendData>
	LCD_sendData(LCD_DISP_ON);
 8001aec:	200c      	movs	r0, #12
 8001aee:	f000 f8ad 	bl	8001c4c <LCD_sendData>
	LCD_backLightOn();
 8001af2:	f000 f81d 	bl	8001b30 <LCD_backLightOn>
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000364 	.word	0x20000364

08001b04 <LCD_sendI2C>:

void LCD_sendI2C(uint8_t data)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af02      	add	r7, sp, #8
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(hLcdI2C, LCD_DEV_ADDR<<1, &data, 1, 1000);
 8001b0e:	4b07      	ldr	r3, [pc, #28]	@ (8001b2c <LCD_sendI2C+0x28>)
 8001b10:	6818      	ldr	r0, [r3, #0]
 8001b12:	1dfa      	adds	r2, r7, #7
 8001b14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	214e      	movs	r1, #78	@ 0x4e
 8001b1e:	f000 ff33 	bl	8002988 <HAL_I2C_Master_Transmit>
}
 8001b22:	bf00      	nop
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000364 	.word	0x20000364

08001b30 <LCD_backLightOn>:

void LCD_backLightOn()
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_BL);
 8001b34:	4b05      	ldr	r3, [pc, #20]	@ (8001b4c <LCD_backLightOn+0x1c>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	f043 0308 	orr.w	r3, r3, #8
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	4b03      	ldr	r3, [pc, #12]	@ (8001b4c <LCD_backLightOn+0x1c>)
 8001b40:	701a      	strb	r2, [r3, #0]
}
 8001b42:	bf00      	nop
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	20000360 	.word	0x20000360

08001b50 <LCD_cmdMode>:
{
	lcdData &= ~(1<<LCD_BL);
}

void LCD_cmdMode()
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RS);
 8001b54:	4b06      	ldr	r3, [pc, #24]	@ (8001b70 <LCD_cmdMode+0x20>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	f023 0301 	bic.w	r3, r3, #1
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4b04      	ldr	r3, [pc, #16]	@ (8001b70 <LCD_cmdMode+0x20>)
 8001b60:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001b62:	4b03      	ldr	r3, [pc, #12]	@ (8001b70 <LCD_cmdMode+0x20>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff ffcc 	bl	8001b04 <LCD_sendI2C>
}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000360 	.word	0x20000360

08001b74 <LCD_charMode>:

void LCD_charMode()
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_RS);
 8001b78:	4b06      	ldr	r3, [pc, #24]	@ (8001b94 <LCD_charMode+0x20>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	4b04      	ldr	r3, [pc, #16]	@ (8001b94 <LCD_charMode+0x20>)
 8001b84:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001b86:	4b03      	ldr	r3, [pc, #12]	@ (8001b94 <LCD_charMode+0x20>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff ffba 	bl	8001b04 <LCD_sendI2C>
}
 8001b90:	bf00      	nop
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	20000360 	.word	0x20000360

08001b98 <LCD_writeMode>:

void LCD_writeMode()
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RW);
 8001b9c:	4b06      	ldr	r3, [pc, #24]	@ (8001bb8 <LCD_writeMode+0x20>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	f023 0302 	bic.w	r3, r3, #2
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	4b04      	ldr	r3, [pc, #16]	@ (8001bb8 <LCD_writeMode+0x20>)
 8001ba8:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001baa:	4b03      	ldr	r3, [pc, #12]	@ (8001bb8 <LCD_writeMode+0x20>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff ffa8 	bl	8001b04 <LCD_sendI2C>
}
 8001bb4:	bf00      	nop
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20000360 	.word	0x20000360

08001bbc <LCD_E_High>:

void LCD_E_High()
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_E);
 8001bc0:	4b06      	ldr	r3, [pc, #24]	@ (8001bdc <LCD_E_High+0x20>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	f043 0304 	orr.w	r3, r3, #4
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	4b04      	ldr	r3, [pc, #16]	@ (8001bdc <LCD_E_High+0x20>)
 8001bcc:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001bce:	4b03      	ldr	r3, [pc, #12]	@ (8001bdc <LCD_E_High+0x20>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff ff96 	bl	8001b04 <LCD_sendI2C>
}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000360 	.word	0x20000360

08001be0 <LCD_E_Low>:

void LCD_E_Low()
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_E);
 8001be4:	4b06      	ldr	r3, [pc, #24]	@ (8001c00 <LCD_E_Low+0x20>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	f023 0304 	bic.w	r3, r3, #4
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	4b04      	ldr	r3, [pc, #16]	@ (8001c00 <LCD_E_Low+0x20>)
 8001bf0:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001bf2:	4b03      	ldr	r3, [pc, #12]	@ (8001c00 <LCD_E_Low+0x20>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff ff84 	bl	8001b04 <LCD_sendI2C>
}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000360 	.word	0x20000360

08001c04 <LCD_sendNibbleData>:

void LCD_sendNibbleData(uint8_t data)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]
	LCD_E_High();
 8001c0e:	f7ff ffd5 	bl	8001bbc <LCD_E_High>
	lcdData = (data & 0xf0) | (lcdData & 0x0f);
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	f023 030f 	bic.w	r3, r3, #15
 8001c1a:	b25a      	sxtb	r2, r3
 8001c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c48 <LCD_sendNibbleData+0x44>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	b25b      	sxtb	r3, r3
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	b25b      	sxtb	r3, r3
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	b25b      	sxtb	r3, r3
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	4b06      	ldr	r3, [pc, #24]	@ (8001c48 <LCD_sendNibbleData+0x44>)
 8001c30:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001c32:	4b05      	ldr	r3, [pc, #20]	@ (8001c48 <LCD_sendNibbleData+0x44>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff ff64 	bl	8001b04 <LCD_sendI2C>
	LCD_E_Low();
 8001c3c:	f7ff ffd0 	bl	8001be0 <LCD_E_Low>
}
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000360 	.word	0x20000360

08001c4c <LCD_sendData>:

void LCD_sendData(uint8_t data)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
	// High 4bit
	LCD_sendNibbleData(data);
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ffd3 	bl	8001c04 <LCD_sendNibbleData>

	data = data << 4;
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	011b      	lsls	r3, r3, #4
 8001c62:	71fb      	strb	r3, [r7, #7]
	// Low 4bit
	LCD_sendNibbleData(data);
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff ffcc 	bl	8001c04 <LCD_sendNibbleData>
}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <LCD_writeCmdData>:

void LCD_writeCmdData(uint8_t data)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	71fb      	strb	r3, [r7, #7]
	LCD_writeMode();
 8001c7e:	f7ff ff8b 	bl	8001b98 <LCD_writeMode>
	LCD_cmdMode();
 8001c82:	f7ff ff65 	bl	8001b50 <LCD_cmdMode>
	LCD_sendData(data);
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff ffdf 	bl	8001c4c <LCD_sendData>
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <LCD_writeCharData>:

void LCD_writeCharData(uint8_t data)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	71fb      	strb	r3, [r7, #7]
	LCD_writeMode();
 8001ca0:	f7ff ff7a 	bl	8001b98 <LCD_writeMode>
	LCD_charMode();
 8001ca4:	f7ff ff66 	bl	8001b74 <LCD_charMode>
	LCD_sendData(data);
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff ffce 	bl	8001c4c <LCD_sendData>
}
 8001cb0:	bf00      	nop
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <LCD_writeString>:

void LCD_writeString(char *str)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
	for (int i=0; str[i]; i++) {
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	e009      	b.n	8001cda <LCD_writeString+0x22>
		LCD_writeCharData(str[i]);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	4413      	add	r3, r2
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff ffe1 	bl	8001c96 <LCD_writeCharData>
	for (int i=0; str[i]; i++) {
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	4413      	add	r3, r2
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1ef      	bne.n	8001cc6 <LCD_writeString+0xe>
	}
}
 8001ce6:	bf00      	nop
 8001ce8:	bf00      	nop
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	460a      	mov	r2, r1
 8001cfa:	71fb      	strb	r3, [r7, #7]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	71bb      	strb	r3, [r7, #6]
	col %= 16;
 8001d00:	79bb      	ldrb	r3, [r7, #6]
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	71bb      	strb	r3, [r7, #6]
	row %= 2;
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	71fb      	strb	r3, [r7, #7]

	uint8_t lcdRegAddr = (0x40 * row) +col;
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	019b      	lsls	r3, r3, #6
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	79bb      	ldrb	r3, [r7, #6]
 8001d18:	4413      	add	r3, r2
 8001d1a:	73fb      	strb	r3, [r7, #15]
	uint8_t command = 0x80 + lcdRegAddr;
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	3b80      	subs	r3, #128	@ 0x80
 8001d20:	73bb      	strb	r3, [r7, #14]
	LCD_writeCmdData(command);
 8001d22:	7bbb      	ldrb	r3, [r7, #14]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff ffa5 	bl	8001c74 <LCD_writeCmdData>
}
 8001d2a:	bf00      	nop
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <LCD_writeStringXY>:

void LCD_writeStringXY(uint8_t row, uint8_t col, char *str)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	4603      	mov	r3, r0
 8001d3a:	603a      	str	r2, [r7, #0]
 8001d3c:	71fb      	strb	r3, [r7, #7]
 8001d3e:	460b      	mov	r3, r1
 8001d40:	71bb      	strb	r3, [r7, #6]
	LCD_gotoXY(row, col);
 8001d42:	79ba      	ldrb	r2, [r7, #6]
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	4611      	mov	r1, r2
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff ffd1 	bl	8001cf0 <LCD_gotoXY>
	LCD_writeString(str);
 8001d4e:	6838      	ldr	r0, [r7, #0]
 8001d50:	f7ff ffb2 	bl	8001cb8 <LCD_writeString>
}
 8001d54:	bf00      	nop
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <LCD_clear>:

void LCD_clear()
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
    LCD_writeCmdData(LCD_DISP_CLEAR);
 8001d60:	2001      	movs	r0, #1
 8001d62:	f7ff ff87 	bl	8001c74 <LCD_writeCmdData>
    HAL_Delay(2);
 8001d66:	2002      	movs	r0, #2
 8001d68:	f000 f94c 	bl	8002004 <HAL_Delay>
}
 8001d6c:	bf00      	nop
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <LedBar_Write>:
		{GPIOC, GPIO_PIN_2},
		{GPIOC, GPIO_PIN_3}
};

void LedBar_Write(uint8_t data)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
	for (int i=0; i<8; i++) {
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	e027      	b.n	8001dd0 <LedBar_Write+0x60>
		if ((data & (1<<i)) == 0) {
 8001d80:	79fa      	ldrb	r2, [r7, #7]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	fa42 f303 	asr.w	r3, r2, r3
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d10e      	bne.n	8001dae <LedBar_Write+0x3e>
			HAL_GPIO_WritePin(ledBar[i].GPIOx, ledBar[i].pinNum, RESET);
 8001d90:	4a13      	ldr	r2, [pc, #76]	@ (8001de0 <LedBar_Write+0x70>)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001d98:	4a11      	ldr	r2, [pc, #68]	@ (8001de0 <LedBar_Write+0x70>)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	4413      	add	r3, r2
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	2200      	movs	r2, #0
 8001da6:	4619      	mov	r1, r3
 8001da8:	f000 fc90 	bl	80026cc <HAL_GPIO_WritePin>
 8001dac:	e00d      	b.n	8001dca <LedBar_Write+0x5a>
		}
		else {
			HAL_GPIO_WritePin(ledBar[i].GPIOx, ledBar[i].pinNum, SET);
 8001dae:	4a0c      	ldr	r2, [pc, #48]	@ (8001de0 <LedBar_Write+0x70>)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001db6:	4a0a      	ldr	r2, [pc, #40]	@ (8001de0 <LedBar_Write+0x70>)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	4413      	add	r3, r2
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f000 fc81 	bl	80026cc <HAL_GPIO_WritePin>
	for (int i=0; i<8; i++) {
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2b07      	cmp	r3, #7
 8001dd4:	ddd4      	ble.n	8001d80 <LedBar_Write+0x10>
		}
	}
}
 8001dd6:	bf00      	nop
 8001dd8:	bf00      	nop
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	2000006c 	.word	0x2000006c

08001de4 <delay_us>:
 */
#include "UltraSonic.h"
#define FILTER_SIZE 5

void delay_us(uint16_t us)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8001dee:	4b0a      	ldr	r3, [pc, #40]	@ (8001e18 <delay_us+0x34>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2200      	movs	r2, #0
 8001df4:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start(&htim4);
 8001df6:	4808      	ldr	r0, [pc, #32]	@ (8001e18 <delay_us+0x34>)
 8001df8:	f001 fe08 	bl	8003a0c <HAL_TIM_Base_Start>

	while(__HAL_TIM_GET_COUNTER(&htim4) < us);
 8001dfc:	bf00      	nop
 8001dfe:	4b06      	ldr	r3, [pc, #24]	@ (8001e18 <delay_us+0x34>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e04:	88fb      	ldrh	r3, [r7, #6]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d3f9      	bcc.n	8001dfe <delay_us+0x1a>
	HAL_TIM_Base_Stop(&htim4);
 8001e0a:	4803      	ldr	r0, [pc, #12]	@ (8001e18 <delay_us+0x34>)
 8001e0c:	f001 fe58 	bl	8003ac0 <HAL_TIM_Base_Stop>
}
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20000250 	.word	0x20000250

08001e1c <UltraSonic_Init>:

void UltraSonic_Init(UltraSonic_TypeDef *hultra, GPIO_TypeDef *Trig_GPIOx, uint16_t Trig_pinNum,  GPIO_TypeDef *Echo_GPIOx, uint16_t Echo_pinNum) {
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	603b      	str	r3, [r7, #0]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	80fb      	strh	r3, [r7, #6]
	hultra->Trig_GPIOx = Trig_GPIOx;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	601a      	str	r2, [r3, #0]
	hultra->Trig_pinNum = Trig_pinNum;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	88fa      	ldrh	r2, [r7, #6]
 8001e36:	809a      	strh	r2, [r3, #4]
	hultra->Echo_GPIOx = Echo_GPIOx;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	609a      	str	r2, [r3, #8]
	hultra->Echo_pinNum = Echo_pinNum;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	8b3a      	ldrh	r2, [r7, #24]
 8001e42:	819a      	strh	r2, [r3, #12]
}
 8001e44:	bf00      	nop
 8001e46:	3714      	adds	r7, #20
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <UltraSonic_GetDistance>:

int UltraSonic_GetDistance (UltraSonic_TypeDef *hultra)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
	uint32_t count = 0;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	613b      	str	r3, [r7, #16]
	int distance = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60fb      	str	r3, [r7, #12]

	// trig
	HAL_GPIO_WritePin(hultra->Trig_GPIOx, hultra->Trig_pinNum, GPIO_PIN_SET);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6818      	ldr	r0, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	889b      	ldrh	r3, [r3, #4]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	f000 fc2e 	bl	80026cc <HAL_GPIO_WritePin>
	delay_us(10);
 8001e70:	200a      	movs	r0, #10
 8001e72:	f7ff ffb7 	bl	8001de4 <delay_us>
	HAL_GPIO_WritePin(hultra->Trig_GPIOx, hultra->Trig_pinNum, GPIO_PIN_RESET);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6818      	ldr	r0, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	889b      	ldrh	r3, [r3, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	4619      	mov	r1, r3
 8001e82:	f000 fc23 	bl	80026cc <HAL_GPIO_WritePin>

	// wait echo -> high
	uint32_t timeout = 60000;
 8001e86:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8001e8a:	617b      	str	r3, [r7, #20]
	while(!(HAL_GPIO_ReadPin(hultra->Echo_GPIOx, hultra->Echo_pinNum)))
 8001e8c:	e008      	b.n	8001ea0 <UltraSonic_GetDistance+0x50>
	{
		if (--timeout == 0)
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	3b01      	subs	r3, #1
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d102      	bne.n	8001ea0 <UltraSonic_GetDistance+0x50>
			return -1;
 8001e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e9e:	e037      	b.n	8001f10 <UltraSonic_GetDistance+0xc0>
	while(!(HAL_GPIO_ReadPin(hultra->Echo_GPIOx, hultra->Echo_pinNum)))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	899b      	ldrh	r3, [r3, #12]
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4610      	mov	r0, r2
 8001eac:	f000 fbf6 	bl	800269c <HAL_GPIO_ReadPin>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0eb      	beq.n	8001e8e <UltraSonic_GetDistance+0x3e>
	}

	// timer start
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8001eb6:	4b18      	ldr	r3, [pc, #96]	@ (8001f18 <UltraSonic_GetDistance+0xc8>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start(&htim4);
 8001ebe:	4816      	ldr	r0, [pc, #88]	@ (8001f18 <UltraSonic_GetDistance+0xc8>)
 8001ec0:	f001 fda4 	bl	8003a0c <HAL_TIM_Base_Start>

	// wait echo -> low
	timeout = 60000;
 8001ec4:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8001ec8:	617b      	str	r3, [r7, #20]
	while(HAL_GPIO_ReadPin(hultra->Echo_GPIOx, hultra->Echo_pinNum))
 8001eca:	e008      	b.n	8001ede <UltraSonic_GetDistance+0x8e>
	{
		if (--timeout == 0)
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	617b      	str	r3, [r7, #20]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d102      	bne.n	8001ede <UltraSonic_GetDistance+0x8e>
			return -1;
 8001ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8001edc:	e018      	b.n	8001f10 <UltraSonic_GetDistance+0xc0>
	while(HAL_GPIO_ReadPin(hultra->Echo_GPIOx, hultra->Echo_pinNum))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	899b      	ldrh	r3, [r3, #12]
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4610      	mov	r0, r2
 8001eea:	f000 fbd7 	bl	800269c <HAL_GPIO_ReadPin>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1eb      	bne.n	8001ecc <UltraSonic_GetDistance+0x7c>
	}

	// timer stop
	HAL_TIM_Base_Stop(&htim4);
 8001ef4:	4808      	ldr	r0, [pc, #32]	@ (8001f18 <UltraSonic_GetDistance+0xc8>)
 8001ef6:	f001 fde3 	bl	8003ac0 <HAL_TIM_Base_Stop>
	count = __HAL_TIM_GET_COUNTER(&htim4);
 8001efa:	4b07      	ldr	r3, [pc, #28]	@ (8001f18 <UltraSonic_GetDistance+0xc8>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f00:	613b      	str	r3, [r7, #16]

	distance = count / 58;
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4a05      	ldr	r2, [pc, #20]	@ (8001f1c <UltraSonic_GetDistance+0xcc>)
 8001f06:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0a:	095b      	lsrs	r3, r3, #5
 8001f0c:	60fb      	str	r3, [r7, #12]

	return distance;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3718      	adds	r7, #24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	20000250 	.word	0x20000250
 8001f1c:	8d3dcb09 	.word	0x8d3dcb09

08001f20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f24:	4b0e      	ldr	r3, [pc, #56]	@ (8001f60 <HAL_Init+0x40>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a0d      	ldr	r2, [pc, #52]	@ (8001f60 <HAL_Init+0x40>)
 8001f2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f30:	4b0b      	ldr	r3, [pc, #44]	@ (8001f60 <HAL_Init+0x40>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a0a      	ldr	r2, [pc, #40]	@ (8001f60 <HAL_Init+0x40>)
 8001f36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f3c:	4b08      	ldr	r3, [pc, #32]	@ (8001f60 <HAL_Init+0x40>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a07      	ldr	r2, [pc, #28]	@ (8001f60 <HAL_Init+0x40>)
 8001f42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f48:	2003      	movs	r0, #3
 8001f4a:	f000 f94f 	bl	80021ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f4e:	200f      	movs	r0, #15
 8001f50:	f000 f808 	bl	8001f64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f54:	f7fe fcd0 	bl	80008f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40023c00 	.word	0x40023c00

08001f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f6c:	4b12      	ldr	r3, [pc, #72]	@ (8001fb8 <HAL_InitTick+0x54>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	4b12      	ldr	r3, [pc, #72]	@ (8001fbc <HAL_InitTick+0x58>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	4619      	mov	r1, r3
 8001f76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 f967 	bl	8002256 <HAL_SYSTICK_Config>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e00e      	b.n	8001fb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b0f      	cmp	r3, #15
 8001f96:	d80a      	bhi.n	8001fae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f98:	2200      	movs	r2, #0
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa0:	f000 f92f 	bl	8002202 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fa4:	4a06      	ldr	r2, [pc, #24]	@ (8001fc0 <HAL_InitTick+0x5c>)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
 8001fac:	e000      	b.n	8001fb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	20000000 	.word	0x20000000
 8001fbc:	200000b0 	.word	0x200000b0
 8001fc0:	200000ac 	.word	0x200000ac

08001fc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fc8:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <HAL_IncTick+0x20>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4b06      	ldr	r3, [pc, #24]	@ (8001fe8 <HAL_IncTick+0x24>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	4a04      	ldr	r2, [pc, #16]	@ (8001fe8 <HAL_IncTick+0x24>)
 8001fd6:	6013      	str	r3, [r2, #0]
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	200000b0 	.word	0x200000b0
 8001fe8:	20000368 	.word	0x20000368

08001fec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return uwTick;
 8001ff0:	4b03      	ldr	r3, [pc, #12]	@ (8002000 <HAL_GetTick+0x14>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	20000368 	.word	0x20000368

08002004 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800200c:	f7ff ffee 	bl	8001fec <HAL_GetTick>
 8002010:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800201c:	d005      	beq.n	800202a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800201e:	4b0a      	ldr	r3, [pc, #40]	@ (8002048 <HAL_Delay+0x44>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	461a      	mov	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4413      	add	r3, r2
 8002028:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800202a:	bf00      	nop
 800202c:	f7ff ffde 	bl	8001fec <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	429a      	cmp	r2, r3
 800203a:	d8f7      	bhi.n	800202c <HAL_Delay+0x28>
  {
  }
}
 800203c:	bf00      	nop
 800203e:	bf00      	nop
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	200000b0 	.word	0x200000b0

0800204c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800205c:	4b0c      	ldr	r3, [pc, #48]	@ (8002090 <__NVIC_SetPriorityGrouping+0x44>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002068:	4013      	ands	r3, r2
 800206a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002074:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002078:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800207c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800207e:	4a04      	ldr	r2, [pc, #16]	@ (8002090 <__NVIC_SetPriorityGrouping+0x44>)
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	60d3      	str	r3, [r2, #12]
}
 8002084:	bf00      	nop
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002098:	4b04      	ldr	r3, [pc, #16]	@ (80020ac <__NVIC_GetPriorityGrouping+0x18>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	0a1b      	lsrs	r3, r3, #8
 800209e:	f003 0307 	and.w	r3, r3, #7
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	e000ed00 	.word	0xe000ed00

080020b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	db0b      	blt.n	80020da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020c2:	79fb      	ldrb	r3, [r7, #7]
 80020c4:	f003 021f 	and.w	r2, r3, #31
 80020c8:	4907      	ldr	r1, [pc, #28]	@ (80020e8 <__NVIC_EnableIRQ+0x38>)
 80020ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ce:	095b      	lsrs	r3, r3, #5
 80020d0:	2001      	movs	r0, #1
 80020d2:	fa00 f202 	lsl.w	r2, r0, r2
 80020d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	e000e100 	.word	0xe000e100

080020ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	6039      	str	r1, [r7, #0]
 80020f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	db0a      	blt.n	8002116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	b2da      	uxtb	r2, r3
 8002104:	490c      	ldr	r1, [pc, #48]	@ (8002138 <__NVIC_SetPriority+0x4c>)
 8002106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210a:	0112      	lsls	r2, r2, #4
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	440b      	add	r3, r1
 8002110:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002114:	e00a      	b.n	800212c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	b2da      	uxtb	r2, r3
 800211a:	4908      	ldr	r1, [pc, #32]	@ (800213c <__NVIC_SetPriority+0x50>)
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	f003 030f 	and.w	r3, r3, #15
 8002122:	3b04      	subs	r3, #4
 8002124:	0112      	lsls	r2, r2, #4
 8002126:	b2d2      	uxtb	r2, r2
 8002128:	440b      	add	r3, r1
 800212a:	761a      	strb	r2, [r3, #24]
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	e000e100 	.word	0xe000e100
 800213c:	e000ed00 	.word	0xe000ed00

08002140 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002140:	b480      	push	{r7}
 8002142:	b089      	sub	sp, #36	@ 0x24
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	f1c3 0307 	rsb	r3, r3, #7
 800215a:	2b04      	cmp	r3, #4
 800215c:	bf28      	it	cs
 800215e:	2304      	movcs	r3, #4
 8002160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	3304      	adds	r3, #4
 8002166:	2b06      	cmp	r3, #6
 8002168:	d902      	bls.n	8002170 <NVIC_EncodePriority+0x30>
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	3b03      	subs	r3, #3
 800216e:	e000      	b.n	8002172 <NVIC_EncodePriority+0x32>
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002174:	f04f 32ff 	mov.w	r2, #4294967295
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43da      	mvns	r2, r3
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	401a      	ands	r2, r3
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002188:	f04f 31ff 	mov.w	r1, #4294967295
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	fa01 f303 	lsl.w	r3, r1, r3
 8002192:	43d9      	mvns	r1, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002198:	4313      	orrs	r3, r2
         );
}
 800219a:	4618      	mov	r0, r3
 800219c:	3724      	adds	r7, #36	@ 0x24
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
	...

080021a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3b01      	subs	r3, #1
 80021b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021b8:	d301      	bcc.n	80021be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ba:	2301      	movs	r3, #1
 80021bc:	e00f      	b.n	80021de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021be:	4a0a      	ldr	r2, [pc, #40]	@ (80021e8 <SysTick_Config+0x40>)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3b01      	subs	r3, #1
 80021c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021c6:	210f      	movs	r1, #15
 80021c8:	f04f 30ff 	mov.w	r0, #4294967295
 80021cc:	f7ff ff8e 	bl	80020ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021d0:	4b05      	ldr	r3, [pc, #20]	@ (80021e8 <SysTick_Config+0x40>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021d6:	4b04      	ldr	r3, [pc, #16]	@ (80021e8 <SysTick_Config+0x40>)
 80021d8:	2207      	movs	r2, #7
 80021da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	e000e010 	.word	0xe000e010

080021ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f7ff ff29 	bl	800204c <__NVIC_SetPriorityGrouping>
}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002202:	b580      	push	{r7, lr}
 8002204:	b086      	sub	sp, #24
 8002206:	af00      	add	r7, sp, #0
 8002208:	4603      	mov	r3, r0
 800220a:	60b9      	str	r1, [r7, #8]
 800220c:	607a      	str	r2, [r7, #4]
 800220e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002214:	f7ff ff3e 	bl	8002094 <__NVIC_GetPriorityGrouping>
 8002218:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	68b9      	ldr	r1, [r7, #8]
 800221e:	6978      	ldr	r0, [r7, #20]
 8002220:	f7ff ff8e 	bl	8002140 <NVIC_EncodePriority>
 8002224:	4602      	mov	r2, r0
 8002226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800222a:	4611      	mov	r1, r2
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff ff5d 	bl	80020ec <__NVIC_SetPriority>
}
 8002232:	bf00      	nop
 8002234:	3718      	adds	r7, #24
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b082      	sub	sp, #8
 800223e:	af00      	add	r7, sp, #0
 8002240:	4603      	mov	r3, r0
 8002242:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff ff31 	bl	80020b0 <__NVIC_EnableIRQ>
}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7ff ffa2 	bl	80021a8 <SysTick_Config>
 8002264:	4603      	mov	r3, r0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b084      	sub	sp, #16
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800227a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800227c:	f7ff feb6 	bl	8001fec <HAL_GetTick>
 8002280:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d008      	beq.n	80022a0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2280      	movs	r2, #128	@ 0x80
 8002292:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e052      	b.n	8002346 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f022 0216 	bic.w	r2, r2, #22
 80022ae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	695a      	ldr	r2, [r3, #20]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022be:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d103      	bne.n	80022d0 <HAL_DMA_Abort+0x62>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d007      	beq.n	80022e0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0208 	bic.w	r2, r2, #8
 80022de:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0201 	bic.w	r2, r2, #1
 80022ee:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022f0:	e013      	b.n	800231a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022f2:	f7ff fe7b 	bl	8001fec <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b05      	cmp	r3, #5
 80022fe:	d90c      	bls.n	800231a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2220      	movs	r2, #32
 8002304:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2203      	movs	r2, #3
 800230a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e015      	b.n	8002346 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1e4      	bne.n	80022f2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800232c:	223f      	movs	r2, #63	@ 0x3f
 800232e:	409a      	lsls	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d004      	beq.n	800236c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2280      	movs	r2, #128	@ 0x80
 8002366:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e00c      	b.n	8002386 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2205      	movs	r2, #5
 8002370:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 0201 	bic.w	r2, r2, #1
 8002382:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
	...

08002394 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002394:	b480      	push	{r7}
 8002396:	b089      	sub	sp, #36	@ 0x24
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800239e:	2300      	movs	r3, #0
 80023a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023a2:	2300      	movs	r3, #0
 80023a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023aa:	2300      	movs	r3, #0
 80023ac:	61fb      	str	r3, [r7, #28]
 80023ae:	e159      	b.n	8002664 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023b0:	2201      	movs	r2, #1
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	4013      	ands	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	f040 8148 	bne.w	800265e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d005      	beq.n	80023e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d130      	bne.n	8002448 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	2203      	movs	r2, #3
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43db      	mvns	r3, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4013      	ands	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	68da      	ldr	r2, [r3, #12]
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4313      	orrs	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800241c:	2201      	movs	r2, #1
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4013      	ands	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	091b      	lsrs	r3, r3, #4
 8002432:	f003 0201 	and.w	r2, r3, #1
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4313      	orrs	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f003 0303 	and.w	r3, r3, #3
 8002450:	2b03      	cmp	r3, #3
 8002452:	d017      	beq.n	8002484 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	2203      	movs	r2, #3
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f003 0303 	and.w	r3, r3, #3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d123      	bne.n	80024d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	08da      	lsrs	r2, r3, #3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3208      	adds	r2, #8
 8002498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800249c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	220f      	movs	r2, #15
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	691a      	ldr	r2, [r3, #16]
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	08da      	lsrs	r2, r3, #3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	3208      	adds	r2, #8
 80024d2:	69b9      	ldr	r1, [r7, #24]
 80024d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	2203      	movs	r2, #3
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4013      	ands	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 0203 	and.w	r2, r3, #3
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 80a2 	beq.w	800265e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	4b57      	ldr	r3, [pc, #348]	@ (800267c <HAL_GPIO_Init+0x2e8>)
 8002520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002522:	4a56      	ldr	r2, [pc, #344]	@ (800267c <HAL_GPIO_Init+0x2e8>)
 8002524:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002528:	6453      	str	r3, [r2, #68]	@ 0x44
 800252a:	4b54      	ldr	r3, [pc, #336]	@ (800267c <HAL_GPIO_Init+0x2e8>)
 800252c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002536:	4a52      	ldr	r2, [pc, #328]	@ (8002680 <HAL_GPIO_Init+0x2ec>)
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	089b      	lsrs	r3, r3, #2
 800253c:	3302      	adds	r3, #2
 800253e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002542:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	220f      	movs	r2, #15
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43db      	mvns	r3, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4013      	ands	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a49      	ldr	r2, [pc, #292]	@ (8002684 <HAL_GPIO_Init+0x2f0>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d019      	beq.n	8002596 <HAL_GPIO_Init+0x202>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a48      	ldr	r2, [pc, #288]	@ (8002688 <HAL_GPIO_Init+0x2f4>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d013      	beq.n	8002592 <HAL_GPIO_Init+0x1fe>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a47      	ldr	r2, [pc, #284]	@ (800268c <HAL_GPIO_Init+0x2f8>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d00d      	beq.n	800258e <HAL_GPIO_Init+0x1fa>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a46      	ldr	r2, [pc, #280]	@ (8002690 <HAL_GPIO_Init+0x2fc>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d007      	beq.n	800258a <HAL_GPIO_Init+0x1f6>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a45      	ldr	r2, [pc, #276]	@ (8002694 <HAL_GPIO_Init+0x300>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d101      	bne.n	8002586 <HAL_GPIO_Init+0x1f2>
 8002582:	2304      	movs	r3, #4
 8002584:	e008      	b.n	8002598 <HAL_GPIO_Init+0x204>
 8002586:	2307      	movs	r3, #7
 8002588:	e006      	b.n	8002598 <HAL_GPIO_Init+0x204>
 800258a:	2303      	movs	r3, #3
 800258c:	e004      	b.n	8002598 <HAL_GPIO_Init+0x204>
 800258e:	2302      	movs	r3, #2
 8002590:	e002      	b.n	8002598 <HAL_GPIO_Init+0x204>
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <HAL_GPIO_Init+0x204>
 8002596:	2300      	movs	r3, #0
 8002598:	69fa      	ldr	r2, [r7, #28]
 800259a:	f002 0203 	and.w	r2, r2, #3
 800259e:	0092      	lsls	r2, r2, #2
 80025a0:	4093      	lsls	r3, r2
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025a8:	4935      	ldr	r1, [pc, #212]	@ (8002680 <HAL_GPIO_Init+0x2ec>)
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	089b      	lsrs	r3, r3, #2
 80025ae:	3302      	adds	r3, #2
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025b6:	4b38      	ldr	r3, [pc, #224]	@ (8002698 <HAL_GPIO_Init+0x304>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	43db      	mvns	r3, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4013      	ands	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025da:	4a2f      	ldr	r2, [pc, #188]	@ (8002698 <HAL_GPIO_Init+0x304>)
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002698 <HAL_GPIO_Init+0x304>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	43db      	mvns	r3, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4013      	ands	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002604:	4a24      	ldr	r2, [pc, #144]	@ (8002698 <HAL_GPIO_Init+0x304>)
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800260a:	4b23      	ldr	r3, [pc, #140]	@ (8002698 <HAL_GPIO_Init+0x304>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	43db      	mvns	r3, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4013      	ands	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800262e:	4a1a      	ldr	r2, [pc, #104]	@ (8002698 <HAL_GPIO_Init+0x304>)
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002634:	4b18      	ldr	r3, [pc, #96]	@ (8002698 <HAL_GPIO_Init+0x304>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	43db      	mvns	r3, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4313      	orrs	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002658:	4a0f      	ldr	r2, [pc, #60]	@ (8002698 <HAL_GPIO_Init+0x304>)
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	3301      	adds	r3, #1
 8002662:	61fb      	str	r3, [r7, #28]
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	2b0f      	cmp	r3, #15
 8002668:	f67f aea2 	bls.w	80023b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800266c:	bf00      	nop
 800266e:	bf00      	nop
 8002670:	3724      	adds	r7, #36	@ 0x24
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	40023800 	.word	0x40023800
 8002680:	40013800 	.word	0x40013800
 8002684:	40020000 	.word	0x40020000
 8002688:	40020400 	.word	0x40020400
 800268c:	40020800 	.word	0x40020800
 8002690:	40020c00 	.word	0x40020c00
 8002694:	40021000 	.word	0x40021000
 8002698:	40013c00 	.word	0x40013c00

0800269c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	460b      	mov	r3, r1
 80026a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691a      	ldr	r2, [r3, #16]
 80026ac:	887b      	ldrh	r3, [r7, #2]
 80026ae:	4013      	ands	r3, r2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d002      	beq.n	80026ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026b4:	2301      	movs	r3, #1
 80026b6:	73fb      	strb	r3, [r7, #15]
 80026b8:	e001      	b.n	80026be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026ba:	2300      	movs	r3, #0
 80026bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026be:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	807b      	strh	r3, [r7, #2]
 80026d8:	4613      	mov	r3, r2
 80026da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026dc:	787b      	ldrb	r3, [r7, #1]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026e2:	887a      	ldrh	r2, [r7, #2]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026e8:	e003      	b.n	80026f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026ea:	887b      	ldrh	r3, [r7, #2]
 80026ec:	041a      	lsls	r2, r3, #16
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	619a      	str	r2, [r3, #24]
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
	...

08002700 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e12b      	b.n	800296a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d106      	bne.n	800272c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7fe f816 	bl	8000758 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2224      	movs	r2, #36	@ 0x24
 8002730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 0201 	bic.w	r2, r2, #1
 8002742:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002752:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002762:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002764:	f001 f8da 	bl	800391c <HAL_RCC_GetPCLK1Freq>
 8002768:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	4a81      	ldr	r2, [pc, #516]	@ (8002974 <HAL_I2C_Init+0x274>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d807      	bhi.n	8002784 <HAL_I2C_Init+0x84>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	4a80      	ldr	r2, [pc, #512]	@ (8002978 <HAL_I2C_Init+0x278>)
 8002778:	4293      	cmp	r3, r2
 800277a:	bf94      	ite	ls
 800277c:	2301      	movls	r3, #1
 800277e:	2300      	movhi	r3, #0
 8002780:	b2db      	uxtb	r3, r3
 8002782:	e006      	b.n	8002792 <HAL_I2C_Init+0x92>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4a7d      	ldr	r2, [pc, #500]	@ (800297c <HAL_I2C_Init+0x27c>)
 8002788:	4293      	cmp	r3, r2
 800278a:	bf94      	ite	ls
 800278c:	2301      	movls	r3, #1
 800278e:	2300      	movhi	r3, #0
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e0e7      	b.n	800296a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	4a78      	ldr	r2, [pc, #480]	@ (8002980 <HAL_I2C_Init+0x280>)
 800279e:	fba2 2303 	umull	r2, r3, r2, r3
 80027a2:	0c9b      	lsrs	r3, r3, #18
 80027a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	4a6a      	ldr	r2, [pc, #424]	@ (8002974 <HAL_I2C_Init+0x274>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d802      	bhi.n	80027d4 <HAL_I2C_Init+0xd4>
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	3301      	adds	r3, #1
 80027d2:	e009      	b.n	80027e8 <HAL_I2C_Init+0xe8>
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80027da:	fb02 f303 	mul.w	r3, r2, r3
 80027de:	4a69      	ldr	r2, [pc, #420]	@ (8002984 <HAL_I2C_Init+0x284>)
 80027e0:	fba2 2303 	umull	r2, r3, r2, r3
 80027e4:	099b      	lsrs	r3, r3, #6
 80027e6:	3301      	adds	r3, #1
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6812      	ldr	r2, [r2, #0]
 80027ec:	430b      	orrs	r3, r1
 80027ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80027fa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	495c      	ldr	r1, [pc, #368]	@ (8002974 <HAL_I2C_Init+0x274>)
 8002804:	428b      	cmp	r3, r1
 8002806:	d819      	bhi.n	800283c <HAL_I2C_Init+0x13c>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	1e59      	subs	r1, r3, #1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	fbb1 f3f3 	udiv	r3, r1, r3
 8002816:	1c59      	adds	r1, r3, #1
 8002818:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800281c:	400b      	ands	r3, r1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00a      	beq.n	8002838 <HAL_I2C_Init+0x138>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	1e59      	subs	r1, r3, #1
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002830:	3301      	adds	r3, #1
 8002832:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002836:	e051      	b.n	80028dc <HAL_I2C_Init+0x1dc>
 8002838:	2304      	movs	r3, #4
 800283a:	e04f      	b.n	80028dc <HAL_I2C_Init+0x1dc>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d111      	bne.n	8002868 <HAL_I2C_Init+0x168>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	1e58      	subs	r0, r3, #1
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6859      	ldr	r1, [r3, #4]
 800284c:	460b      	mov	r3, r1
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	440b      	add	r3, r1
 8002852:	fbb0 f3f3 	udiv	r3, r0, r3
 8002856:	3301      	adds	r3, #1
 8002858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800285c:	2b00      	cmp	r3, #0
 800285e:	bf0c      	ite	eq
 8002860:	2301      	moveq	r3, #1
 8002862:	2300      	movne	r3, #0
 8002864:	b2db      	uxtb	r3, r3
 8002866:	e012      	b.n	800288e <HAL_I2C_Init+0x18e>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	1e58      	subs	r0, r3, #1
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6859      	ldr	r1, [r3, #4]
 8002870:	460b      	mov	r3, r1
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	440b      	add	r3, r1
 8002876:	0099      	lsls	r1, r3, #2
 8002878:	440b      	add	r3, r1
 800287a:	fbb0 f3f3 	udiv	r3, r0, r3
 800287e:	3301      	adds	r3, #1
 8002880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002884:	2b00      	cmp	r3, #0
 8002886:	bf0c      	ite	eq
 8002888:	2301      	moveq	r3, #1
 800288a:	2300      	movne	r3, #0
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <HAL_I2C_Init+0x196>
 8002892:	2301      	movs	r3, #1
 8002894:	e022      	b.n	80028dc <HAL_I2C_Init+0x1dc>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10e      	bne.n	80028bc <HAL_I2C_Init+0x1bc>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	1e58      	subs	r0, r3, #1
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6859      	ldr	r1, [r3, #4]
 80028a6:	460b      	mov	r3, r1
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	440b      	add	r3, r1
 80028ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80028b0:	3301      	adds	r3, #1
 80028b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028ba:	e00f      	b.n	80028dc <HAL_I2C_Init+0x1dc>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	1e58      	subs	r0, r3, #1
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6859      	ldr	r1, [r3, #4]
 80028c4:	460b      	mov	r3, r1
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	0099      	lsls	r1, r3, #2
 80028cc:	440b      	add	r3, r1
 80028ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80028d2:	3301      	adds	r3, #1
 80028d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	6809      	ldr	r1, [r1, #0]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69da      	ldr	r2, [r3, #28]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	430a      	orrs	r2, r1
 80028fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800290a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6911      	ldr	r1, [r2, #16]
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	68d2      	ldr	r2, [r2, #12]
 8002916:	4311      	orrs	r1, r2
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6812      	ldr	r2, [r2, #0]
 800291c:	430b      	orrs	r3, r1
 800291e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	695a      	ldr	r2, [r3, #20]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	430a      	orrs	r2, r1
 800293a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 0201 	orr.w	r2, r2, #1
 800294a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2220      	movs	r2, #32
 8002956:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	000186a0 	.word	0x000186a0
 8002978:	001e847f 	.word	0x001e847f
 800297c:	003d08ff 	.word	0x003d08ff
 8002980:	431bde83 	.word	0x431bde83
 8002984:	10624dd3 	.word	0x10624dd3

08002988 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b088      	sub	sp, #32
 800298c:	af02      	add	r7, sp, #8
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	607a      	str	r2, [r7, #4]
 8002992:	461a      	mov	r2, r3
 8002994:	460b      	mov	r3, r1
 8002996:	817b      	strh	r3, [r7, #10]
 8002998:	4613      	mov	r3, r2
 800299a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800299c:	f7ff fb26 	bl	8001fec <HAL_GetTick>
 80029a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b20      	cmp	r3, #32
 80029ac:	f040 80e0 	bne.w	8002b70 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	2319      	movs	r3, #25
 80029b6:	2201      	movs	r2, #1
 80029b8:	4970      	ldr	r1, [pc, #448]	@ (8002b7c <HAL_I2C_Master_Transmit+0x1f4>)
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 f964 	bl	8002c88 <I2C_WaitOnFlagUntilTimeout>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80029c6:	2302      	movs	r3, #2
 80029c8:	e0d3      	b.n	8002b72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d101      	bne.n	80029d8 <HAL_I2C_Master_Transmit+0x50>
 80029d4:	2302      	movs	r3, #2
 80029d6:	e0cc      	b.n	8002b72 <HAL_I2C_Master_Transmit+0x1ea>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d007      	beq.n	80029fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f042 0201 	orr.w	r2, r2, #1
 80029fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a0c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2221      	movs	r2, #33	@ 0x21
 8002a12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2210      	movs	r2, #16
 8002a1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	893a      	ldrh	r2, [r7, #8]
 8002a2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	4a50      	ldr	r2, [pc, #320]	@ (8002b80 <HAL_I2C_Master_Transmit+0x1f8>)
 8002a3e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a40:	8979      	ldrh	r1, [r7, #10]
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	6a3a      	ldr	r2, [r7, #32]
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 f89c 	bl	8002b84 <I2C_MasterRequestWrite>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e08d      	b.n	8002b72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a56:	2300      	movs	r3, #0
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	613b      	str	r3, [r7, #16]
 8002a6a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002a6c:	e066      	b.n	8002b3c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	6a39      	ldr	r1, [r7, #32]
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f000 fa22 	bl	8002ebc <I2C_WaitOnTXEFlagUntilTimeout>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00d      	beq.n	8002a9a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	d107      	bne.n	8002a96 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e06b      	b.n	8002b72 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9e:	781a      	ldrb	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aaa:	1c5a      	adds	r2, r3, #1
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b04      	cmp	r3, #4
 8002ad6:	d11b      	bne.n	8002b10 <HAL_I2C_Master_Transmit+0x188>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d017      	beq.n	8002b10 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae4:	781a      	ldrb	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af0:	1c5a      	adds	r2, r3, #1
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	3b01      	subs	r3, #1
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	6a39      	ldr	r1, [r7, #32]
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 fa19 	bl	8002f4c <I2C_WaitOnBTFFlagUntilTimeout>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00d      	beq.n	8002b3c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b24:	2b04      	cmp	r3, #4
 8002b26:	d107      	bne.n	8002b38 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b36:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e01a      	b.n	8002b72 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d194      	bne.n	8002a6e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2220      	movs	r2, #32
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	e000      	b.n	8002b72 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002b70:	2302      	movs	r3, #2
  }
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3718      	adds	r7, #24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	00100002 	.word	0x00100002
 8002b80:	ffff0000 	.word	0xffff0000

08002b84 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b088      	sub	sp, #32
 8002b88:	af02      	add	r7, sp, #8
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	607a      	str	r2, [r7, #4]
 8002b8e:	603b      	str	r3, [r7, #0]
 8002b90:	460b      	mov	r3, r1
 8002b92:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b98:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	d006      	beq.n	8002bae <I2C_MasterRequestWrite+0x2a>
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d003      	beq.n	8002bae <I2C_MasterRequestWrite+0x2a>
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002bac:	d108      	bne.n	8002bc0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	e00b      	b.n	8002bd8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc4:	2b12      	cmp	r3, #18
 8002bc6:	d107      	bne.n	8002bd8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bd6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f000 f84f 	bl	8002c88 <I2C_WaitOnFlagUntilTimeout>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00d      	beq.n	8002c0c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bfe:	d103      	bne.n	8002c08 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c06:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e035      	b.n	8002c78 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c14:	d108      	bne.n	8002c28 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c16:	897b      	ldrh	r3, [r7, #10]
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c24:	611a      	str	r2, [r3, #16]
 8002c26:	e01b      	b.n	8002c60 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c28:	897b      	ldrh	r3, [r7, #10]
 8002c2a:	11db      	asrs	r3, r3, #7
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	f003 0306 	and.w	r3, r3, #6
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	f063 030f 	orn	r3, r3, #15
 8002c38:	b2da      	uxtb	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	490e      	ldr	r1, [pc, #56]	@ (8002c80 <I2C_MasterRequestWrite+0xfc>)
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 f898 	bl	8002d7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e010      	b.n	8002c78 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c56:	897b      	ldrh	r3, [r7, #10]
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	4907      	ldr	r1, [pc, #28]	@ (8002c84 <I2C_MasterRequestWrite+0x100>)
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 f888 	bl	8002d7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3718      	adds	r7, #24
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	00010008 	.word	0x00010008
 8002c84:	00010002 	.word	0x00010002

08002c88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	603b      	str	r3, [r7, #0]
 8002c94:	4613      	mov	r3, r2
 8002c96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c98:	e048      	b.n	8002d2c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca0:	d044      	beq.n	8002d2c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ca2:	f7ff f9a3 	bl	8001fec <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d302      	bcc.n	8002cb8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d139      	bne.n	8002d2c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	0c1b      	lsrs	r3, r3, #16
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d10d      	bne.n	8002cde <I2C_WaitOnFlagUntilTimeout+0x56>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	43da      	mvns	r2, r3
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	bf0c      	ite	eq
 8002cd4:	2301      	moveq	r3, #1
 8002cd6:	2300      	movne	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	461a      	mov	r2, r3
 8002cdc:	e00c      	b.n	8002cf8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	43da      	mvns	r2, r3
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	bf0c      	ite	eq
 8002cf0:	2301      	moveq	r3, #1
 8002cf2:	2300      	movne	r3, #0
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d116      	bne.n	8002d2c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2220      	movs	r2, #32
 8002d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d18:	f043 0220 	orr.w	r2, r3, #32
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e023      	b.n	8002d74 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	0c1b      	lsrs	r3, r3, #16
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d10d      	bne.n	8002d52 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	43da      	mvns	r2, r3
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	4013      	ands	r3, r2
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	bf0c      	ite	eq
 8002d48:	2301      	moveq	r3, #1
 8002d4a:	2300      	movne	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	461a      	mov	r2, r3
 8002d50:	e00c      	b.n	8002d6c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	43da      	mvns	r2, r3
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	bf0c      	ite	eq
 8002d64:	2301      	moveq	r3, #1
 8002d66:	2300      	movne	r3, #0
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	79fb      	ldrb	r3, [r7, #7]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d093      	beq.n	8002c9a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
 8002d88:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d8a:	e071      	b.n	8002e70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d9a:	d123      	bne.n	8002de4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002daa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002db4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd0:	f043 0204 	orr.w	r2, r3, #4
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e067      	b.n	8002eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dea:	d041      	beq.n	8002e70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dec:	f7ff f8fe 	bl	8001fec <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d302      	bcc.n	8002e02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d136      	bne.n	8002e70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	0c1b      	lsrs	r3, r3, #16
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d10c      	bne.n	8002e26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	43da      	mvns	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	4013      	ands	r3, r2
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	bf14      	ite	ne
 8002e1e:	2301      	movne	r3, #1
 8002e20:	2300      	moveq	r3, #0
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	e00b      	b.n	8002e3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	43da      	mvns	r2, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	4013      	ands	r3, r2
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	bf14      	ite	ne
 8002e38:	2301      	movne	r3, #1
 8002e3a:	2300      	moveq	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d016      	beq.n	8002e70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5c:	f043 0220 	orr.w	r2, r3, #32
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e021      	b.n	8002eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	0c1b      	lsrs	r3, r3, #16
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d10c      	bne.n	8002e94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	43da      	mvns	r2, r3
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	4013      	ands	r3, r2
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	bf14      	ite	ne
 8002e8c:	2301      	movne	r3, #1
 8002e8e:	2300      	moveq	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	e00b      	b.n	8002eac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	43da      	mvns	r2, r3
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	bf14      	ite	ne
 8002ea6:	2301      	movne	r3, #1
 8002ea8:	2300      	moveq	r3, #0
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f47f af6d 	bne.w	8002d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ec8:	e034      	b.n	8002f34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 f886 	bl	8002fdc <I2C_IsAcknowledgeFailed>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e034      	b.n	8002f44 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee0:	d028      	beq.n	8002f34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ee2:	f7ff f883 	bl	8001fec <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	68ba      	ldr	r2, [r7, #8]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d302      	bcc.n	8002ef8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d11d      	bne.n	8002f34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f02:	2b80      	cmp	r3, #128	@ 0x80
 8002f04:	d016      	beq.n	8002f34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f20:	f043 0220 	orr.w	r2, r3, #32
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e007      	b.n	8002f44 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f3e:	2b80      	cmp	r3, #128	@ 0x80
 8002f40:	d1c3      	bne.n	8002eca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f58:	e034      	b.n	8002fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 f83e 	bl	8002fdc <I2C_IsAcknowledgeFailed>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e034      	b.n	8002fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f70:	d028      	beq.n	8002fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f72:	f7ff f83b 	bl	8001fec <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d302      	bcc.n	8002f88 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d11d      	bne.n	8002fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	f003 0304 	and.w	r3, r3, #4
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	d016      	beq.n	8002fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb0:	f043 0220 	orr.w	r2, r3, #32
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e007      	b.n	8002fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	f003 0304 	and.w	r3, r3, #4
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	d1c3      	bne.n	8002f5a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ff2:	d11b      	bne.n	800302c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ffc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2220      	movs	r2, #32
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003018:	f043 0204 	orr.w	r2, r3, #4
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e000      	b.n	800302e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
	...

0800303c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e267      	b.n	800351e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d075      	beq.n	8003146 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800305a:	4b88      	ldr	r3, [pc, #544]	@ (800327c <HAL_RCC_OscConfig+0x240>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 030c 	and.w	r3, r3, #12
 8003062:	2b04      	cmp	r3, #4
 8003064:	d00c      	beq.n	8003080 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003066:	4b85      	ldr	r3, [pc, #532]	@ (800327c <HAL_RCC_OscConfig+0x240>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800306e:	2b08      	cmp	r3, #8
 8003070:	d112      	bne.n	8003098 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003072:	4b82      	ldr	r3, [pc, #520]	@ (800327c <HAL_RCC_OscConfig+0x240>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800307a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800307e:	d10b      	bne.n	8003098 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003080:	4b7e      	ldr	r3, [pc, #504]	@ (800327c <HAL_RCC_OscConfig+0x240>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d05b      	beq.n	8003144 <HAL_RCC_OscConfig+0x108>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d157      	bne.n	8003144 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e242      	b.n	800351e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030a0:	d106      	bne.n	80030b0 <HAL_RCC_OscConfig+0x74>
 80030a2:	4b76      	ldr	r3, [pc, #472]	@ (800327c <HAL_RCC_OscConfig+0x240>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a75      	ldr	r2, [pc, #468]	@ (800327c <HAL_RCC_OscConfig+0x240>)
 80030a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	e01d      	b.n	80030ec <HAL_RCC_OscConfig+0xb0>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030b8:	d10c      	bne.n	80030d4 <HAL_RCC_OscConfig+0x98>
 80030ba:	4b70      	ldr	r3, [pc, #448]	@ (800327c <HAL_RCC_OscConfig+0x240>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a6f      	ldr	r2, [pc, #444]	@ (800327c <HAL_RCC_OscConfig+0x240>)
 80030c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030c4:	6013      	str	r3, [r2, #0]
 80030c6:	4b6d      	ldr	r3, [pc, #436]	@ (800327c <HAL_RCC_OscConfig+0x240>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a6c      	ldr	r2, [pc, #432]	@ (800327c <HAL_RCC_OscConfig+0x240>)
 80030cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030d0:	6013      	str	r3, [r2, #0]
 80030d2:	e00b      	b.n	80030ec <HAL_RCC_OscConfig+0xb0>
 80030d4:	4b69      	ldr	r3, [pc, #420]	@ (800327c <HAL_RCC_OscConfig+0x240>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a68      	ldr	r2, [pc, #416]	@ (800327c <HAL_RCC_OscConfig+0x240>)
 80030da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030de:	6013      	str	r3, [r2, #0]
 80030e0:	4b66      	ldr	r3, [pc, #408]	@ (800327c <HAL_RCC_OscConfig+0x240>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a65      	ldr	r2, [pc, #404]	@ (800327c <HAL_RCC_OscConfig+0x240>)
 80030e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d013      	beq.n	800311c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f4:	f7fe ff7a 	bl	8001fec <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030fc:	f7fe ff76 	bl	8001fec <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b64      	cmp	r3, #100	@ 0x64
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e207      	b.n	800351e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310e:	4b5b      	ldr	r3, [pc, #364]	@ (800327c <HAL_RCC_OscConfig+0x240>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d0f0      	beq.n	80030fc <HAL_RCC_OscConfig+0xc0>
 800311a:	e014      	b.n	8003146 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311c:	f7fe ff66 	bl	8001fec <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003124:	f7fe ff62 	bl	8001fec <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b64      	cmp	r3, #100	@ 0x64
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e1f3      	b.n	800351e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003136:	4b51      	ldr	r3, [pc, #324]	@ (800327c <HAL_RCC_OscConfig+0x240>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1f0      	bne.n	8003124 <HAL_RCC_OscConfig+0xe8>
 8003142:	e000      	b.n	8003146 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003144:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d063      	beq.n	800321a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003152:	4b4a      	ldr	r3, [pc, #296]	@ (800327c <HAL_RCC_OscConfig+0x240>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 030c 	and.w	r3, r3, #12
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00b      	beq.n	8003176 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800315e:	4b47      	ldr	r3, [pc, #284]	@ (800327c <HAL_RCC_OscConfig+0x240>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003166:	2b08      	cmp	r3, #8
 8003168:	d11c      	bne.n	80031a4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800316a:	4b44      	ldr	r3, [pc, #272]	@ (800327c <HAL_RCC_OscConfig+0x240>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d116      	bne.n	80031a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003176:	4b41      	ldr	r3, [pc, #260]	@ (800327c <HAL_RCC_OscConfig+0x240>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d005      	beq.n	800318e <HAL_RCC_OscConfig+0x152>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d001      	beq.n	800318e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e1c7      	b.n	800351e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800318e:	4b3b      	ldr	r3, [pc, #236]	@ (800327c <HAL_RCC_OscConfig+0x240>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	4937      	ldr	r1, [pc, #220]	@ (800327c <HAL_RCC_OscConfig+0x240>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031a2:	e03a      	b.n	800321a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d020      	beq.n	80031ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031ac:	4b34      	ldr	r3, [pc, #208]	@ (8003280 <HAL_RCC_OscConfig+0x244>)
 80031ae:	2201      	movs	r2, #1
 80031b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b2:	f7fe ff1b 	bl	8001fec <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b8:	e008      	b.n	80031cc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ba:	f7fe ff17 	bl	8001fec <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e1a8      	b.n	800351e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031cc:	4b2b      	ldr	r3, [pc, #172]	@ (800327c <HAL_RCC_OscConfig+0x240>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0f0      	beq.n	80031ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d8:	4b28      	ldr	r3, [pc, #160]	@ (800327c <HAL_RCC_OscConfig+0x240>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	4925      	ldr	r1, [pc, #148]	@ (800327c <HAL_RCC_OscConfig+0x240>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	600b      	str	r3, [r1, #0]
 80031ec:	e015      	b.n	800321a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ee:	4b24      	ldr	r3, [pc, #144]	@ (8003280 <HAL_RCC_OscConfig+0x244>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f4:	f7fe fefa 	bl	8001fec <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031fc:	f7fe fef6 	bl	8001fec <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e187      	b.n	800351e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800320e:	4b1b      	ldr	r3, [pc, #108]	@ (800327c <HAL_RCC_OscConfig+0x240>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1f0      	bne.n	80031fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0308 	and.w	r3, r3, #8
 8003222:	2b00      	cmp	r3, #0
 8003224:	d036      	beq.n	8003294 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d016      	beq.n	800325c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800322e:	4b15      	ldr	r3, [pc, #84]	@ (8003284 <HAL_RCC_OscConfig+0x248>)
 8003230:	2201      	movs	r2, #1
 8003232:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003234:	f7fe feda 	bl	8001fec <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800323c:	f7fe fed6 	bl	8001fec <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e167      	b.n	800351e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800324e:	4b0b      	ldr	r3, [pc, #44]	@ (800327c <HAL_RCC_OscConfig+0x240>)
 8003250:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0f0      	beq.n	800323c <HAL_RCC_OscConfig+0x200>
 800325a:	e01b      	b.n	8003294 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800325c:	4b09      	ldr	r3, [pc, #36]	@ (8003284 <HAL_RCC_OscConfig+0x248>)
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003262:	f7fe fec3 	bl	8001fec <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003268:	e00e      	b.n	8003288 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800326a:	f7fe febf 	bl	8001fec <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d907      	bls.n	8003288 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e150      	b.n	800351e <HAL_RCC_OscConfig+0x4e2>
 800327c:	40023800 	.word	0x40023800
 8003280:	42470000 	.word	0x42470000
 8003284:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003288:	4b88      	ldr	r3, [pc, #544]	@ (80034ac <HAL_RCC_OscConfig+0x470>)
 800328a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1ea      	bne.n	800326a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 8097 	beq.w	80033d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032a2:	2300      	movs	r3, #0
 80032a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032a6:	4b81      	ldr	r3, [pc, #516]	@ (80034ac <HAL_RCC_OscConfig+0x470>)
 80032a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10f      	bne.n	80032d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032b2:	2300      	movs	r3, #0
 80032b4:	60bb      	str	r3, [r7, #8]
 80032b6:	4b7d      	ldr	r3, [pc, #500]	@ (80034ac <HAL_RCC_OscConfig+0x470>)
 80032b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ba:	4a7c      	ldr	r2, [pc, #496]	@ (80034ac <HAL_RCC_OscConfig+0x470>)
 80032bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80032c2:	4b7a      	ldr	r3, [pc, #488]	@ (80034ac <HAL_RCC_OscConfig+0x470>)
 80032c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ca:	60bb      	str	r3, [r7, #8]
 80032cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ce:	2301      	movs	r3, #1
 80032d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d2:	4b77      	ldr	r3, [pc, #476]	@ (80034b0 <HAL_RCC_OscConfig+0x474>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d118      	bne.n	8003310 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032de:	4b74      	ldr	r3, [pc, #464]	@ (80034b0 <HAL_RCC_OscConfig+0x474>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a73      	ldr	r2, [pc, #460]	@ (80034b0 <HAL_RCC_OscConfig+0x474>)
 80032e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ea:	f7fe fe7f 	bl	8001fec <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032f2:	f7fe fe7b 	bl	8001fec <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e10c      	b.n	800351e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003304:	4b6a      	ldr	r3, [pc, #424]	@ (80034b0 <HAL_RCC_OscConfig+0x474>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0f0      	beq.n	80032f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d106      	bne.n	8003326 <HAL_RCC_OscConfig+0x2ea>
 8003318:	4b64      	ldr	r3, [pc, #400]	@ (80034ac <HAL_RCC_OscConfig+0x470>)
 800331a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800331c:	4a63      	ldr	r2, [pc, #396]	@ (80034ac <HAL_RCC_OscConfig+0x470>)
 800331e:	f043 0301 	orr.w	r3, r3, #1
 8003322:	6713      	str	r3, [r2, #112]	@ 0x70
 8003324:	e01c      	b.n	8003360 <HAL_RCC_OscConfig+0x324>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	2b05      	cmp	r3, #5
 800332c:	d10c      	bne.n	8003348 <HAL_RCC_OscConfig+0x30c>
 800332e:	4b5f      	ldr	r3, [pc, #380]	@ (80034ac <HAL_RCC_OscConfig+0x470>)
 8003330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003332:	4a5e      	ldr	r2, [pc, #376]	@ (80034ac <HAL_RCC_OscConfig+0x470>)
 8003334:	f043 0304 	orr.w	r3, r3, #4
 8003338:	6713      	str	r3, [r2, #112]	@ 0x70
 800333a:	4b5c      	ldr	r3, [pc, #368]	@ (80034ac <HAL_RCC_OscConfig+0x470>)
 800333c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800333e:	4a5b      	ldr	r2, [pc, #364]	@ (80034ac <HAL_RCC_OscConfig+0x470>)
 8003340:	f043 0301 	orr.w	r3, r3, #1
 8003344:	6713      	str	r3, [r2, #112]	@ 0x70
 8003346:	e00b      	b.n	8003360 <HAL_RCC_OscConfig+0x324>
 8003348:	4b58      	ldr	r3, [pc, #352]	@ (80034ac <HAL_RCC_OscConfig+0x470>)
 800334a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800334c:	4a57      	ldr	r2, [pc, #348]	@ (80034ac <HAL_RCC_OscConfig+0x470>)
 800334e:	f023 0301 	bic.w	r3, r3, #1
 8003352:	6713      	str	r3, [r2, #112]	@ 0x70
 8003354:	4b55      	ldr	r3, [pc, #340]	@ (80034ac <HAL_RCC_OscConfig+0x470>)
 8003356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003358:	4a54      	ldr	r2, [pc, #336]	@ (80034ac <HAL_RCC_OscConfig+0x470>)
 800335a:	f023 0304 	bic.w	r3, r3, #4
 800335e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d015      	beq.n	8003394 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003368:	f7fe fe40 	bl	8001fec <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800336e:	e00a      	b.n	8003386 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003370:	f7fe fe3c 	bl	8001fec <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800337e:	4293      	cmp	r3, r2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e0cb      	b.n	800351e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003386:	4b49      	ldr	r3, [pc, #292]	@ (80034ac <HAL_RCC_OscConfig+0x470>)
 8003388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0ee      	beq.n	8003370 <HAL_RCC_OscConfig+0x334>
 8003392:	e014      	b.n	80033be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003394:	f7fe fe2a 	bl	8001fec <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800339a:	e00a      	b.n	80033b2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800339c:	f7fe fe26 	bl	8001fec <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e0b5      	b.n	800351e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033b2:	4b3e      	ldr	r3, [pc, #248]	@ (80034ac <HAL_RCC_OscConfig+0x470>)
 80033b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1ee      	bne.n	800339c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033be:	7dfb      	ldrb	r3, [r7, #23]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d105      	bne.n	80033d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033c4:	4b39      	ldr	r3, [pc, #228]	@ (80034ac <HAL_RCC_OscConfig+0x470>)
 80033c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c8:	4a38      	ldr	r2, [pc, #224]	@ (80034ac <HAL_RCC_OscConfig+0x470>)
 80033ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 80a1 	beq.w	800351c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033da:	4b34      	ldr	r3, [pc, #208]	@ (80034ac <HAL_RCC_OscConfig+0x470>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 030c 	and.w	r3, r3, #12
 80033e2:	2b08      	cmp	r3, #8
 80033e4:	d05c      	beq.n	80034a0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d141      	bne.n	8003472 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ee:	4b31      	ldr	r3, [pc, #196]	@ (80034b4 <HAL_RCC_OscConfig+0x478>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f4:	f7fe fdfa 	bl	8001fec <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033fc:	f7fe fdf6 	bl	8001fec <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e087      	b.n	800351e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800340e:	4b27      	ldr	r3, [pc, #156]	@ (80034ac <HAL_RCC_OscConfig+0x470>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1f0      	bne.n	80033fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	69da      	ldr	r2, [r3, #28]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	431a      	orrs	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003428:	019b      	lsls	r3, r3, #6
 800342a:	431a      	orrs	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003430:	085b      	lsrs	r3, r3, #1
 8003432:	3b01      	subs	r3, #1
 8003434:	041b      	lsls	r3, r3, #16
 8003436:	431a      	orrs	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800343c:	061b      	lsls	r3, r3, #24
 800343e:	491b      	ldr	r1, [pc, #108]	@ (80034ac <HAL_RCC_OscConfig+0x470>)
 8003440:	4313      	orrs	r3, r2
 8003442:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003444:	4b1b      	ldr	r3, [pc, #108]	@ (80034b4 <HAL_RCC_OscConfig+0x478>)
 8003446:	2201      	movs	r2, #1
 8003448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344a:	f7fe fdcf 	bl	8001fec <HAL_GetTick>
 800344e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003450:	e008      	b.n	8003464 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003452:	f7fe fdcb 	bl	8001fec <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e05c      	b.n	800351e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003464:	4b11      	ldr	r3, [pc, #68]	@ (80034ac <HAL_RCC_OscConfig+0x470>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0f0      	beq.n	8003452 <HAL_RCC_OscConfig+0x416>
 8003470:	e054      	b.n	800351c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003472:	4b10      	ldr	r3, [pc, #64]	@ (80034b4 <HAL_RCC_OscConfig+0x478>)
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003478:	f7fe fdb8 	bl	8001fec <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003480:	f7fe fdb4 	bl	8001fec <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e045      	b.n	800351e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003492:	4b06      	ldr	r3, [pc, #24]	@ (80034ac <HAL_RCC_OscConfig+0x470>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1f0      	bne.n	8003480 <HAL_RCC_OscConfig+0x444>
 800349e:	e03d      	b.n	800351c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d107      	bne.n	80034b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e038      	b.n	800351e <HAL_RCC_OscConfig+0x4e2>
 80034ac:	40023800 	.word	0x40023800
 80034b0:	40007000 	.word	0x40007000
 80034b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003528 <HAL_RCC_OscConfig+0x4ec>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d028      	beq.n	8003518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d121      	bne.n	8003518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034de:	429a      	cmp	r2, r3
 80034e0:	d11a      	bne.n	8003518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80034e8:	4013      	ands	r3, r2
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d111      	bne.n	8003518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034fe:	085b      	lsrs	r3, r3, #1
 8003500:	3b01      	subs	r3, #1
 8003502:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003504:	429a      	cmp	r2, r3
 8003506:	d107      	bne.n	8003518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003512:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003514:	429a      	cmp	r2, r3
 8003516:	d001      	beq.n	800351c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e000      	b.n	800351e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3718      	adds	r7, #24
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	40023800 	.word	0x40023800

0800352c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d101      	bne.n	8003540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e0cc      	b.n	80036da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003540:	4b68      	ldr	r3, [pc, #416]	@ (80036e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0307 	and.w	r3, r3, #7
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	429a      	cmp	r2, r3
 800354c:	d90c      	bls.n	8003568 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800354e:	4b65      	ldr	r3, [pc, #404]	@ (80036e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	b2d2      	uxtb	r2, r2
 8003554:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003556:	4b63      	ldr	r3, [pc, #396]	@ (80036e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0307 	and.w	r3, r3, #7
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	429a      	cmp	r2, r3
 8003562:	d001      	beq.n	8003568 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e0b8      	b.n	80036da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d020      	beq.n	80035b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b00      	cmp	r3, #0
 800357e:	d005      	beq.n	800358c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003580:	4b59      	ldr	r3, [pc, #356]	@ (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	4a58      	ldr	r2, [pc, #352]	@ (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003586:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800358a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0308 	and.w	r3, r3, #8
 8003594:	2b00      	cmp	r3, #0
 8003596:	d005      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003598:	4b53      	ldr	r3, [pc, #332]	@ (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	4a52      	ldr	r2, [pc, #328]	@ (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 800359e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80035a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035a4:	4b50      	ldr	r3, [pc, #320]	@ (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	494d      	ldr	r1, [pc, #308]	@ (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d044      	beq.n	800364c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d107      	bne.n	80035da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ca:	4b47      	ldr	r3, [pc, #284]	@ (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d119      	bne.n	800360a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e07f      	b.n	80036da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d003      	beq.n	80035ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035e6:	2b03      	cmp	r3, #3
 80035e8:	d107      	bne.n	80035fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ea:	4b3f      	ldr	r3, [pc, #252]	@ (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d109      	bne.n	800360a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e06f      	b.n	80036da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035fa:	4b3b      	ldr	r3, [pc, #236]	@ (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e067      	b.n	80036da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800360a:	4b37      	ldr	r3, [pc, #220]	@ (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f023 0203 	bic.w	r2, r3, #3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	4934      	ldr	r1, [pc, #208]	@ (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003618:	4313      	orrs	r3, r2
 800361a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800361c:	f7fe fce6 	bl	8001fec <HAL_GetTick>
 8003620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003622:	e00a      	b.n	800363a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003624:	f7fe fce2 	bl	8001fec <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003632:	4293      	cmp	r3, r2
 8003634:	d901      	bls.n	800363a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e04f      	b.n	80036da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363a:	4b2b      	ldr	r3, [pc, #172]	@ (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 020c 	and.w	r2, r3, #12
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	429a      	cmp	r2, r3
 800364a:	d1eb      	bne.n	8003624 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800364c:	4b25      	ldr	r3, [pc, #148]	@ (80036e4 <HAL_RCC_ClockConfig+0x1b8>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	429a      	cmp	r2, r3
 8003658:	d20c      	bcs.n	8003674 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800365a:	4b22      	ldr	r3, [pc, #136]	@ (80036e4 <HAL_RCC_ClockConfig+0x1b8>)
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003662:	4b20      	ldr	r3, [pc, #128]	@ (80036e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0307 	and.w	r3, r3, #7
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	429a      	cmp	r2, r3
 800366e:	d001      	beq.n	8003674 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e032      	b.n	80036da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	d008      	beq.n	8003692 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003680:	4b19      	ldr	r3, [pc, #100]	@ (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	4916      	ldr	r1, [pc, #88]	@ (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 800368e:	4313      	orrs	r3, r2
 8003690:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0308 	and.w	r3, r3, #8
 800369a:	2b00      	cmp	r3, #0
 800369c:	d009      	beq.n	80036b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800369e:	4b12      	ldr	r3, [pc, #72]	@ (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	490e      	ldr	r1, [pc, #56]	@ (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036b2:	f000 f821 	bl	80036f8 <HAL_RCC_GetSysClockFreq>
 80036b6:	4602      	mov	r2, r0
 80036b8:	4b0b      	ldr	r3, [pc, #44]	@ (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	091b      	lsrs	r3, r3, #4
 80036be:	f003 030f 	and.w	r3, r3, #15
 80036c2:	490a      	ldr	r1, [pc, #40]	@ (80036ec <HAL_RCC_ClockConfig+0x1c0>)
 80036c4:	5ccb      	ldrb	r3, [r1, r3]
 80036c6:	fa22 f303 	lsr.w	r3, r2, r3
 80036ca:	4a09      	ldr	r2, [pc, #36]	@ (80036f0 <HAL_RCC_ClockConfig+0x1c4>)
 80036cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80036ce:	4b09      	ldr	r3, [pc, #36]	@ (80036f4 <HAL_RCC_ClockConfig+0x1c8>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fe fc46 	bl	8001f64 <HAL_InitTick>

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	40023c00 	.word	0x40023c00
 80036e8:	40023800 	.word	0x40023800
 80036ec:	08006430 	.word	0x08006430
 80036f0:	20000000 	.word	0x20000000
 80036f4:	200000ac 	.word	0x200000ac

080036f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036fc:	b094      	sub	sp, #80	@ 0x50
 80036fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003700:	2300      	movs	r3, #0
 8003702:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003704:	2300      	movs	r3, #0
 8003706:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003708:	2300      	movs	r3, #0
 800370a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800370c:	2300      	movs	r3, #0
 800370e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003710:	4b79      	ldr	r3, [pc, #484]	@ (80038f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f003 030c 	and.w	r3, r3, #12
 8003718:	2b08      	cmp	r3, #8
 800371a:	d00d      	beq.n	8003738 <HAL_RCC_GetSysClockFreq+0x40>
 800371c:	2b08      	cmp	r3, #8
 800371e:	f200 80e1 	bhi.w	80038e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <HAL_RCC_GetSysClockFreq+0x34>
 8003726:	2b04      	cmp	r3, #4
 8003728:	d003      	beq.n	8003732 <HAL_RCC_GetSysClockFreq+0x3a>
 800372a:	e0db      	b.n	80038e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800372c:	4b73      	ldr	r3, [pc, #460]	@ (80038fc <HAL_RCC_GetSysClockFreq+0x204>)
 800372e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003730:	e0db      	b.n	80038ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003732:	4b73      	ldr	r3, [pc, #460]	@ (8003900 <HAL_RCC_GetSysClockFreq+0x208>)
 8003734:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003736:	e0d8      	b.n	80038ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003738:	4b6f      	ldr	r3, [pc, #444]	@ (80038f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003740:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003742:	4b6d      	ldr	r3, [pc, #436]	@ (80038f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d063      	beq.n	8003816 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800374e:	4b6a      	ldr	r3, [pc, #424]	@ (80038f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	099b      	lsrs	r3, r3, #6
 8003754:	2200      	movs	r2, #0
 8003756:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003758:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800375a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800375c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003760:	633b      	str	r3, [r7, #48]	@ 0x30
 8003762:	2300      	movs	r3, #0
 8003764:	637b      	str	r3, [r7, #52]	@ 0x34
 8003766:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800376a:	4622      	mov	r2, r4
 800376c:	462b      	mov	r3, r5
 800376e:	f04f 0000 	mov.w	r0, #0
 8003772:	f04f 0100 	mov.w	r1, #0
 8003776:	0159      	lsls	r1, r3, #5
 8003778:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800377c:	0150      	lsls	r0, r2, #5
 800377e:	4602      	mov	r2, r0
 8003780:	460b      	mov	r3, r1
 8003782:	4621      	mov	r1, r4
 8003784:	1a51      	subs	r1, r2, r1
 8003786:	6139      	str	r1, [r7, #16]
 8003788:	4629      	mov	r1, r5
 800378a:	eb63 0301 	sbc.w	r3, r3, r1
 800378e:	617b      	str	r3, [r7, #20]
 8003790:	f04f 0200 	mov.w	r2, #0
 8003794:	f04f 0300 	mov.w	r3, #0
 8003798:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800379c:	4659      	mov	r1, fp
 800379e:	018b      	lsls	r3, r1, #6
 80037a0:	4651      	mov	r1, sl
 80037a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037a6:	4651      	mov	r1, sl
 80037a8:	018a      	lsls	r2, r1, #6
 80037aa:	4651      	mov	r1, sl
 80037ac:	ebb2 0801 	subs.w	r8, r2, r1
 80037b0:	4659      	mov	r1, fp
 80037b2:	eb63 0901 	sbc.w	r9, r3, r1
 80037b6:	f04f 0200 	mov.w	r2, #0
 80037ba:	f04f 0300 	mov.w	r3, #0
 80037be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037ca:	4690      	mov	r8, r2
 80037cc:	4699      	mov	r9, r3
 80037ce:	4623      	mov	r3, r4
 80037d0:	eb18 0303 	adds.w	r3, r8, r3
 80037d4:	60bb      	str	r3, [r7, #8]
 80037d6:	462b      	mov	r3, r5
 80037d8:	eb49 0303 	adc.w	r3, r9, r3
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	f04f 0200 	mov.w	r2, #0
 80037e2:	f04f 0300 	mov.w	r3, #0
 80037e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80037ea:	4629      	mov	r1, r5
 80037ec:	024b      	lsls	r3, r1, #9
 80037ee:	4621      	mov	r1, r4
 80037f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037f4:	4621      	mov	r1, r4
 80037f6:	024a      	lsls	r2, r1, #9
 80037f8:	4610      	mov	r0, r2
 80037fa:	4619      	mov	r1, r3
 80037fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037fe:	2200      	movs	r2, #0
 8003800:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003802:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003804:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003808:	f7fc fd3a 	bl	8000280 <__aeabi_uldivmod>
 800380c:	4602      	mov	r2, r0
 800380e:	460b      	mov	r3, r1
 8003810:	4613      	mov	r3, r2
 8003812:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003814:	e058      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003816:	4b38      	ldr	r3, [pc, #224]	@ (80038f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	099b      	lsrs	r3, r3, #6
 800381c:	2200      	movs	r2, #0
 800381e:	4618      	mov	r0, r3
 8003820:	4611      	mov	r1, r2
 8003822:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003826:	623b      	str	r3, [r7, #32]
 8003828:	2300      	movs	r3, #0
 800382a:	627b      	str	r3, [r7, #36]	@ 0x24
 800382c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003830:	4642      	mov	r2, r8
 8003832:	464b      	mov	r3, r9
 8003834:	f04f 0000 	mov.w	r0, #0
 8003838:	f04f 0100 	mov.w	r1, #0
 800383c:	0159      	lsls	r1, r3, #5
 800383e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003842:	0150      	lsls	r0, r2, #5
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	4641      	mov	r1, r8
 800384a:	ebb2 0a01 	subs.w	sl, r2, r1
 800384e:	4649      	mov	r1, r9
 8003850:	eb63 0b01 	sbc.w	fp, r3, r1
 8003854:	f04f 0200 	mov.w	r2, #0
 8003858:	f04f 0300 	mov.w	r3, #0
 800385c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003860:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003864:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003868:	ebb2 040a 	subs.w	r4, r2, sl
 800386c:	eb63 050b 	sbc.w	r5, r3, fp
 8003870:	f04f 0200 	mov.w	r2, #0
 8003874:	f04f 0300 	mov.w	r3, #0
 8003878:	00eb      	lsls	r3, r5, #3
 800387a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800387e:	00e2      	lsls	r2, r4, #3
 8003880:	4614      	mov	r4, r2
 8003882:	461d      	mov	r5, r3
 8003884:	4643      	mov	r3, r8
 8003886:	18e3      	adds	r3, r4, r3
 8003888:	603b      	str	r3, [r7, #0]
 800388a:	464b      	mov	r3, r9
 800388c:	eb45 0303 	adc.w	r3, r5, r3
 8003890:	607b      	str	r3, [r7, #4]
 8003892:	f04f 0200 	mov.w	r2, #0
 8003896:	f04f 0300 	mov.w	r3, #0
 800389a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800389e:	4629      	mov	r1, r5
 80038a0:	028b      	lsls	r3, r1, #10
 80038a2:	4621      	mov	r1, r4
 80038a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038a8:	4621      	mov	r1, r4
 80038aa:	028a      	lsls	r2, r1, #10
 80038ac:	4610      	mov	r0, r2
 80038ae:	4619      	mov	r1, r3
 80038b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038b2:	2200      	movs	r2, #0
 80038b4:	61bb      	str	r3, [r7, #24]
 80038b6:	61fa      	str	r2, [r7, #28]
 80038b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038bc:	f7fc fce0 	bl	8000280 <__aeabi_uldivmod>
 80038c0:	4602      	mov	r2, r0
 80038c2:	460b      	mov	r3, r1
 80038c4:	4613      	mov	r3, r2
 80038c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80038c8:	4b0b      	ldr	r3, [pc, #44]	@ (80038f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	0c1b      	lsrs	r3, r3, #16
 80038ce:	f003 0303 	and.w	r3, r3, #3
 80038d2:	3301      	adds	r3, #1
 80038d4:	005b      	lsls	r3, r3, #1
 80038d6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80038d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038e2:	e002      	b.n	80038ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038e4:	4b05      	ldr	r3, [pc, #20]	@ (80038fc <HAL_RCC_GetSysClockFreq+0x204>)
 80038e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3750      	adds	r7, #80	@ 0x50
 80038f0:	46bd      	mov	sp, r7
 80038f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038f6:	bf00      	nop
 80038f8:	40023800 	.word	0x40023800
 80038fc:	00f42400 	.word	0x00f42400
 8003900:	007a1200 	.word	0x007a1200

08003904 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003908:	4b03      	ldr	r3, [pc, #12]	@ (8003918 <HAL_RCC_GetHCLKFreq+0x14>)
 800390a:	681b      	ldr	r3, [r3, #0]
}
 800390c:	4618      	mov	r0, r3
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	20000000 	.word	0x20000000

0800391c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003920:	f7ff fff0 	bl	8003904 <HAL_RCC_GetHCLKFreq>
 8003924:	4602      	mov	r2, r0
 8003926:	4b05      	ldr	r3, [pc, #20]	@ (800393c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	0a9b      	lsrs	r3, r3, #10
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	4903      	ldr	r1, [pc, #12]	@ (8003940 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003932:	5ccb      	ldrb	r3, [r1, r3]
 8003934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003938:	4618      	mov	r0, r3
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40023800 	.word	0x40023800
 8003940:	08006440 	.word	0x08006440

08003944 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003948:	f7ff ffdc 	bl	8003904 <HAL_RCC_GetHCLKFreq>
 800394c:	4602      	mov	r2, r0
 800394e:	4b05      	ldr	r3, [pc, #20]	@ (8003964 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	0b5b      	lsrs	r3, r3, #13
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	4903      	ldr	r1, [pc, #12]	@ (8003968 <HAL_RCC_GetPCLK2Freq+0x24>)
 800395a:	5ccb      	ldrb	r3, [r1, r3]
 800395c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003960:	4618      	mov	r0, r3
 8003962:	bd80      	pop	{r7, pc}
 8003964:	40023800 	.word	0x40023800
 8003968:	08006440 	.word	0x08006440

0800396c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e041      	b.n	8003a02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d106      	bne.n	8003998 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7fd fa16 	bl	8000dc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3304      	adds	r3, #4
 80039a8:	4619      	mov	r1, r3
 80039aa:	4610      	mov	r0, r2
 80039ac:	f000 fd22 	bl	80043f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
	...

08003a0c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d001      	beq.n	8003a24 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e03c      	b.n	8003a9e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a1e      	ldr	r2, [pc, #120]	@ (8003aac <HAL_TIM_Base_Start+0xa0>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d018      	beq.n	8003a68 <HAL_TIM_Base_Start+0x5c>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a3e:	d013      	beq.n	8003a68 <HAL_TIM_Base_Start+0x5c>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a1a      	ldr	r2, [pc, #104]	@ (8003ab0 <HAL_TIM_Base_Start+0xa4>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d00e      	beq.n	8003a68 <HAL_TIM_Base_Start+0x5c>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a19      	ldr	r2, [pc, #100]	@ (8003ab4 <HAL_TIM_Base_Start+0xa8>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d009      	beq.n	8003a68 <HAL_TIM_Base_Start+0x5c>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a17      	ldr	r2, [pc, #92]	@ (8003ab8 <HAL_TIM_Base_Start+0xac>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d004      	beq.n	8003a68 <HAL_TIM_Base_Start+0x5c>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a16      	ldr	r2, [pc, #88]	@ (8003abc <HAL_TIM_Base_Start+0xb0>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d111      	bne.n	8003a8c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2b06      	cmp	r3, #6
 8003a78:	d010      	beq.n	8003a9c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f042 0201 	orr.w	r2, r2, #1
 8003a88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a8a:	e007      	b.n	8003a9c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0201 	orr.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	40010000 	.word	0x40010000
 8003ab0:	40000400 	.word	0x40000400
 8003ab4:	40000800 	.word	0x40000800
 8003ab8:	40000c00 	.word	0x40000c00
 8003abc:	40014000 	.word	0x40014000

08003ac0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6a1a      	ldr	r2, [r3, #32]
 8003ace:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10f      	bne.n	8003af8 <HAL_TIM_Base_Stop+0x38>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6a1a      	ldr	r2, [r3, #32]
 8003ade:	f240 4344 	movw	r3, #1092	@ 0x444
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d107      	bne.n	8003af8 <HAL_TIM_Base_Stop+0x38>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 0201 	bic.w	r2, r2, #1
 8003af6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
	...

08003b10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d001      	beq.n	8003b28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e044      	b.n	8003bb2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 0201 	orr.w	r2, r2, #1
 8003b3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a1e      	ldr	r2, [pc, #120]	@ (8003bc0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d018      	beq.n	8003b7c <HAL_TIM_Base_Start_IT+0x6c>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b52:	d013      	beq.n	8003b7c <HAL_TIM_Base_Start_IT+0x6c>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a1a      	ldr	r2, [pc, #104]	@ (8003bc4 <HAL_TIM_Base_Start_IT+0xb4>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d00e      	beq.n	8003b7c <HAL_TIM_Base_Start_IT+0x6c>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a19      	ldr	r2, [pc, #100]	@ (8003bc8 <HAL_TIM_Base_Start_IT+0xb8>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d009      	beq.n	8003b7c <HAL_TIM_Base_Start_IT+0x6c>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a17      	ldr	r2, [pc, #92]	@ (8003bcc <HAL_TIM_Base_Start_IT+0xbc>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d004      	beq.n	8003b7c <HAL_TIM_Base_Start_IT+0x6c>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a16      	ldr	r2, [pc, #88]	@ (8003bd0 <HAL_TIM_Base_Start_IT+0xc0>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d111      	bne.n	8003ba0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 0307 	and.w	r3, r3, #7
 8003b86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2b06      	cmp	r3, #6
 8003b8c:	d010      	beq.n	8003bb0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f042 0201 	orr.w	r2, r2, #1
 8003b9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b9e:	e007      	b.n	8003bb0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 0201 	orr.w	r2, r2, #1
 8003bae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3714      	adds	r7, #20
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	40010000 	.word	0x40010000
 8003bc4:	40000400 	.word	0x40000400
 8003bc8:	40000800 	.word	0x40000800
 8003bcc:	40000c00 	.word	0x40000c00
 8003bd0:	40014000 	.word	0x40014000

08003bd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e041      	b.n	8003c6a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d106      	bne.n	8003c00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f839 	bl	8003c72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2202      	movs	r2, #2
 8003c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3304      	adds	r3, #4
 8003c10:	4619      	mov	r1, r3
 8003c12:	4610      	mov	r0, r2
 8003c14:	f000 fbee 	bl	80043f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
	...

08003c88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d109      	bne.n	8003cac <HAL_TIM_PWM_Start+0x24>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	bf14      	ite	ne
 8003ca4:	2301      	movne	r3, #1
 8003ca6:	2300      	moveq	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	e022      	b.n	8003cf2 <HAL_TIM_PWM_Start+0x6a>
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	d109      	bne.n	8003cc6 <HAL_TIM_PWM_Start+0x3e>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	bf14      	ite	ne
 8003cbe:	2301      	movne	r3, #1
 8003cc0:	2300      	moveq	r3, #0
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	e015      	b.n	8003cf2 <HAL_TIM_PWM_Start+0x6a>
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	2b08      	cmp	r3, #8
 8003cca:	d109      	bne.n	8003ce0 <HAL_TIM_PWM_Start+0x58>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	bf14      	ite	ne
 8003cd8:	2301      	movne	r3, #1
 8003cda:	2300      	moveq	r3, #0
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	e008      	b.n	8003cf2 <HAL_TIM_PWM_Start+0x6a>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	bf14      	ite	ne
 8003cec:	2301      	movne	r3, #1
 8003cee:	2300      	moveq	r3, #0
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e068      	b.n	8003dcc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d104      	bne.n	8003d0a <HAL_TIM_PWM_Start+0x82>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2202      	movs	r2, #2
 8003d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d08:	e013      	b.n	8003d32 <HAL_TIM_PWM_Start+0xaa>
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	2b04      	cmp	r3, #4
 8003d0e:	d104      	bne.n	8003d1a <HAL_TIM_PWM_Start+0x92>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2202      	movs	r2, #2
 8003d14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d18:	e00b      	b.n	8003d32 <HAL_TIM_PWM_Start+0xaa>
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	d104      	bne.n	8003d2a <HAL_TIM_PWM_Start+0xa2>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2202      	movs	r2, #2
 8003d24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d28:	e003      	b.n	8003d32 <HAL_TIM_PWM_Start+0xaa>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2202      	movs	r2, #2
 8003d2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2201      	movs	r2, #1
 8003d38:	6839      	ldr	r1, [r7, #0]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 fe06 	bl	800494c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a23      	ldr	r2, [pc, #140]	@ (8003dd4 <HAL_TIM_PWM_Start+0x14c>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d107      	bne.n	8003d5a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d58:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a1d      	ldr	r2, [pc, #116]	@ (8003dd4 <HAL_TIM_PWM_Start+0x14c>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d018      	beq.n	8003d96 <HAL_TIM_PWM_Start+0x10e>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d6c:	d013      	beq.n	8003d96 <HAL_TIM_PWM_Start+0x10e>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a19      	ldr	r2, [pc, #100]	@ (8003dd8 <HAL_TIM_PWM_Start+0x150>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d00e      	beq.n	8003d96 <HAL_TIM_PWM_Start+0x10e>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a17      	ldr	r2, [pc, #92]	@ (8003ddc <HAL_TIM_PWM_Start+0x154>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d009      	beq.n	8003d96 <HAL_TIM_PWM_Start+0x10e>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a16      	ldr	r2, [pc, #88]	@ (8003de0 <HAL_TIM_PWM_Start+0x158>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d004      	beq.n	8003d96 <HAL_TIM_PWM_Start+0x10e>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a14      	ldr	r2, [pc, #80]	@ (8003de4 <HAL_TIM_PWM_Start+0x15c>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d111      	bne.n	8003dba <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2b06      	cmp	r3, #6
 8003da6:	d010      	beq.n	8003dca <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f042 0201 	orr.w	r2, r2, #1
 8003db6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003db8:	e007      	b.n	8003dca <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f042 0201 	orr.w	r2, r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	40010000 	.word	0x40010000
 8003dd8:	40000400 	.word	0x40000400
 8003ddc:	40000800 	.word	0x40000800
 8003de0:	40000c00 	.word	0x40000c00
 8003de4:	40014000 	.word	0x40014000

08003de8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2200      	movs	r2, #0
 8003df8:	6839      	ldr	r1, [r7, #0]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 fda6 	bl	800494c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a29      	ldr	r2, [pc, #164]	@ (8003eac <HAL_TIM_PWM_Stop+0xc4>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d117      	bne.n	8003e3a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6a1a      	ldr	r2, [r3, #32]
 8003e10:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003e14:	4013      	ands	r3, r2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10f      	bne.n	8003e3a <HAL_TIM_PWM_Stop+0x52>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6a1a      	ldr	r2, [r3, #32]
 8003e20:	f240 4344 	movw	r3, #1092	@ 0x444
 8003e24:	4013      	ands	r3, r2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d107      	bne.n	8003e3a <HAL_TIM_PWM_Stop+0x52>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e38:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6a1a      	ldr	r2, [r3, #32]
 8003e40:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003e44:	4013      	ands	r3, r2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10f      	bne.n	8003e6a <HAL_TIM_PWM_Stop+0x82>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6a1a      	ldr	r2, [r3, #32]
 8003e50:	f240 4344 	movw	r3, #1092	@ 0x444
 8003e54:	4013      	ands	r3, r2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d107      	bne.n	8003e6a <HAL_TIM_PWM_Stop+0x82>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 0201 	bic.w	r2, r2, #1
 8003e68:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d104      	bne.n	8003e7a <HAL_TIM_PWM_Stop+0x92>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e78:	e013      	b.n	8003ea2 <HAL_TIM_PWM_Stop+0xba>
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	2b04      	cmp	r3, #4
 8003e7e:	d104      	bne.n	8003e8a <HAL_TIM_PWM_Stop+0xa2>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e88:	e00b      	b.n	8003ea2 <HAL_TIM_PWM_Stop+0xba>
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d104      	bne.n	8003e9a <HAL_TIM_PWM_Stop+0xb2>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e98:	e003      	b.n	8003ea2 <HAL_TIM_PWM_Stop+0xba>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3708      	adds	r7, #8
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	40010000 	.word	0x40010000

08003eb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d020      	beq.n	8003f14 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d01b      	beq.n	8003f14 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f06f 0202 	mvn.w	r2, #2
 8003ee4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	f003 0303 	and.w	r3, r3, #3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 fa5b 	bl	80043b6 <HAL_TIM_IC_CaptureCallback>
 8003f00:	e005      	b.n	8003f0e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 fa4d 	bl	80043a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 fa5e 	bl	80043ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	f003 0304 	and.w	r3, r3, #4
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d020      	beq.n	8003f60 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d01b      	beq.n	8003f60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f06f 0204 	mvn.w	r2, #4
 8003f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2202      	movs	r2, #2
 8003f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 fa35 	bl	80043b6 <HAL_TIM_IC_CaptureCallback>
 8003f4c:	e005      	b.n	8003f5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 fa27 	bl	80043a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 fa38 	bl	80043ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	f003 0308 	and.w	r3, r3, #8
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d020      	beq.n	8003fac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f003 0308 	and.w	r3, r3, #8
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d01b      	beq.n	8003fac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f06f 0208 	mvn.w	r2, #8
 8003f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2204      	movs	r2, #4
 8003f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	f003 0303 	and.w	r3, r3, #3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 fa0f 	bl	80043b6 <HAL_TIM_IC_CaptureCallback>
 8003f98:	e005      	b.n	8003fa6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 fa01 	bl	80043a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 fa12 	bl	80043ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	f003 0310 	and.w	r3, r3, #16
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d020      	beq.n	8003ff8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f003 0310 	and.w	r3, r3, #16
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d01b      	beq.n	8003ff8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f06f 0210 	mvn.w	r2, #16
 8003fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2208      	movs	r2, #8
 8003fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d003      	beq.n	8003fe6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f9e9 	bl	80043b6 <HAL_TIM_IC_CaptureCallback>
 8003fe4:	e005      	b.n	8003ff2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f9db 	bl	80043a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 f9ec 	bl	80043ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00c      	beq.n	800401c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b00      	cmp	r3, #0
 800400a:	d007      	beq.n	800401c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f06f 0201 	mvn.w	r2, #1
 8004014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7fd f977 	bl	800130a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00c      	beq.n	8004040 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800402c:	2b00      	cmp	r3, #0
 800402e:	d007      	beq.n	8004040 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 fd76 	bl	8004b2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00c      	beq.n	8004064 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004050:	2b00      	cmp	r3, #0
 8004052:	d007      	beq.n	8004064 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800405c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f9bd 	bl	80043de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	f003 0320 	and.w	r3, r3, #32
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00c      	beq.n	8004088 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f003 0320 	and.w	r3, r3, #32
 8004074:	2b00      	cmp	r3, #0
 8004076:	d007      	beq.n	8004088 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f06f 0220 	mvn.w	r2, #32
 8004080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 fd48 	bl	8004b18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004088:	bf00      	nop
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800409c:	2300      	movs	r3, #0
 800409e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d101      	bne.n	80040ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040aa:	2302      	movs	r3, #2
 80040ac:	e0ae      	b.n	800420c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b0c      	cmp	r3, #12
 80040ba:	f200 809f 	bhi.w	80041fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80040be:	a201      	add	r2, pc, #4	@ (adr r2, 80040c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80040c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c4:	080040f9 	.word	0x080040f9
 80040c8:	080041fd 	.word	0x080041fd
 80040cc:	080041fd 	.word	0x080041fd
 80040d0:	080041fd 	.word	0x080041fd
 80040d4:	08004139 	.word	0x08004139
 80040d8:	080041fd 	.word	0x080041fd
 80040dc:	080041fd 	.word	0x080041fd
 80040e0:	080041fd 	.word	0x080041fd
 80040e4:	0800417b 	.word	0x0800417b
 80040e8:	080041fd 	.word	0x080041fd
 80040ec:	080041fd 	.word	0x080041fd
 80040f0:	080041fd 	.word	0x080041fd
 80040f4:	080041bb 	.word	0x080041bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68b9      	ldr	r1, [r7, #8]
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 f9fe 	bl	8004500 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	699a      	ldr	r2, [r3, #24]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0208 	orr.w	r2, r2, #8
 8004112:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	699a      	ldr	r2, [r3, #24]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 0204 	bic.w	r2, r2, #4
 8004122:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6999      	ldr	r1, [r3, #24]
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	691a      	ldr	r2, [r3, #16]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	619a      	str	r2, [r3, #24]
      break;
 8004136:	e064      	b.n	8004202 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68b9      	ldr	r1, [r7, #8]
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fa44 	bl	80045cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	699a      	ldr	r2, [r3, #24]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004152:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	699a      	ldr	r2, [r3, #24]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004162:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6999      	ldr	r1, [r3, #24]
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	021a      	lsls	r2, r3, #8
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	619a      	str	r2, [r3, #24]
      break;
 8004178:	e043      	b.n	8004202 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68b9      	ldr	r1, [r7, #8]
 8004180:	4618      	mov	r0, r3
 8004182:	f000 fa8f 	bl	80046a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	69da      	ldr	r2, [r3, #28]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f042 0208 	orr.w	r2, r2, #8
 8004194:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	69da      	ldr	r2, [r3, #28]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0204 	bic.w	r2, r2, #4
 80041a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	69d9      	ldr	r1, [r3, #28]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	691a      	ldr	r2, [r3, #16]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	430a      	orrs	r2, r1
 80041b6:	61da      	str	r2, [r3, #28]
      break;
 80041b8:	e023      	b.n	8004202 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68b9      	ldr	r1, [r7, #8]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f000 fad9 	bl	8004778 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	69da      	ldr	r2, [r3, #28]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	69da      	ldr	r2, [r3, #28]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	69d9      	ldr	r1, [r3, #28]
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	021a      	lsls	r2, r3, #8
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	61da      	str	r2, [r3, #28]
      break;
 80041fa:	e002      	b.n	8004202 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004200:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800420a:	7dfb      	ldrb	r3, [r7, #23]
}
 800420c:	4618      	mov	r0, r3
 800420e:	3718      	adds	r7, #24
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800421e:	2300      	movs	r3, #0
 8004220:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004228:	2b01      	cmp	r3, #1
 800422a:	d101      	bne.n	8004230 <HAL_TIM_ConfigClockSource+0x1c>
 800422c:	2302      	movs	r3, #2
 800422e:	e0b4      	b.n	800439a <HAL_TIM_ConfigClockSource+0x186>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2202      	movs	r2, #2
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800424e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004256:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004268:	d03e      	beq.n	80042e8 <HAL_TIM_ConfigClockSource+0xd4>
 800426a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800426e:	f200 8087 	bhi.w	8004380 <HAL_TIM_ConfigClockSource+0x16c>
 8004272:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004276:	f000 8086 	beq.w	8004386 <HAL_TIM_ConfigClockSource+0x172>
 800427a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800427e:	d87f      	bhi.n	8004380 <HAL_TIM_ConfigClockSource+0x16c>
 8004280:	2b70      	cmp	r3, #112	@ 0x70
 8004282:	d01a      	beq.n	80042ba <HAL_TIM_ConfigClockSource+0xa6>
 8004284:	2b70      	cmp	r3, #112	@ 0x70
 8004286:	d87b      	bhi.n	8004380 <HAL_TIM_ConfigClockSource+0x16c>
 8004288:	2b60      	cmp	r3, #96	@ 0x60
 800428a:	d050      	beq.n	800432e <HAL_TIM_ConfigClockSource+0x11a>
 800428c:	2b60      	cmp	r3, #96	@ 0x60
 800428e:	d877      	bhi.n	8004380 <HAL_TIM_ConfigClockSource+0x16c>
 8004290:	2b50      	cmp	r3, #80	@ 0x50
 8004292:	d03c      	beq.n	800430e <HAL_TIM_ConfigClockSource+0xfa>
 8004294:	2b50      	cmp	r3, #80	@ 0x50
 8004296:	d873      	bhi.n	8004380 <HAL_TIM_ConfigClockSource+0x16c>
 8004298:	2b40      	cmp	r3, #64	@ 0x40
 800429a:	d058      	beq.n	800434e <HAL_TIM_ConfigClockSource+0x13a>
 800429c:	2b40      	cmp	r3, #64	@ 0x40
 800429e:	d86f      	bhi.n	8004380 <HAL_TIM_ConfigClockSource+0x16c>
 80042a0:	2b30      	cmp	r3, #48	@ 0x30
 80042a2:	d064      	beq.n	800436e <HAL_TIM_ConfigClockSource+0x15a>
 80042a4:	2b30      	cmp	r3, #48	@ 0x30
 80042a6:	d86b      	bhi.n	8004380 <HAL_TIM_ConfigClockSource+0x16c>
 80042a8:	2b20      	cmp	r3, #32
 80042aa:	d060      	beq.n	800436e <HAL_TIM_ConfigClockSource+0x15a>
 80042ac:	2b20      	cmp	r3, #32
 80042ae:	d867      	bhi.n	8004380 <HAL_TIM_ConfigClockSource+0x16c>
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d05c      	beq.n	800436e <HAL_TIM_ConfigClockSource+0x15a>
 80042b4:	2b10      	cmp	r3, #16
 80042b6:	d05a      	beq.n	800436e <HAL_TIM_ConfigClockSource+0x15a>
 80042b8:	e062      	b.n	8004380 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042ca:	f000 fb1f 	bl	800490c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80042dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68ba      	ldr	r2, [r7, #8]
 80042e4:	609a      	str	r2, [r3, #8]
      break;
 80042e6:	e04f      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042f8:	f000 fb08 	bl	800490c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800430a:	609a      	str	r2, [r3, #8]
      break;
 800430c:	e03c      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800431a:	461a      	mov	r2, r3
 800431c:	f000 fa7c 	bl	8004818 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2150      	movs	r1, #80	@ 0x50
 8004326:	4618      	mov	r0, r3
 8004328:	f000 fad5 	bl	80048d6 <TIM_ITRx_SetConfig>
      break;
 800432c:	e02c      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800433a:	461a      	mov	r2, r3
 800433c:	f000 fa9b 	bl	8004876 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2160      	movs	r1, #96	@ 0x60
 8004346:	4618      	mov	r0, r3
 8004348:	f000 fac5 	bl	80048d6 <TIM_ITRx_SetConfig>
      break;
 800434c:	e01c      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800435a:	461a      	mov	r2, r3
 800435c:	f000 fa5c 	bl	8004818 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2140      	movs	r1, #64	@ 0x40
 8004366:	4618      	mov	r0, r3
 8004368:	f000 fab5 	bl	80048d6 <TIM_ITRx_SetConfig>
      break;
 800436c:	e00c      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4619      	mov	r1, r3
 8004378:	4610      	mov	r0, r2
 800437a:	f000 faac 	bl	80048d6 <TIM_ITRx_SetConfig>
      break;
 800437e:	e003      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	73fb      	strb	r3, [r7, #15]
      break;
 8004384:	e000      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004386:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004398:	7bfb      	ldrb	r3, [r7, #15]
}
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b083      	sub	sp, #12
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043aa:	bf00      	nop
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043b6:	b480      	push	{r7}
 80043b8:	b083      	sub	sp, #12
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043be:	bf00      	nop
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr

080043ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043ca:	b480      	push	{r7}
 80043cc:	b083      	sub	sp, #12
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043d2:	bf00      	nop
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043de:	b480      	push	{r7}
 80043e0:	b083      	sub	sp, #12
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043e6:	bf00      	nop
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
	...

080043f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a37      	ldr	r2, [pc, #220]	@ (80044e4 <TIM_Base_SetConfig+0xf0>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d00f      	beq.n	800442c <TIM_Base_SetConfig+0x38>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004412:	d00b      	beq.n	800442c <TIM_Base_SetConfig+0x38>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a34      	ldr	r2, [pc, #208]	@ (80044e8 <TIM_Base_SetConfig+0xf4>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d007      	beq.n	800442c <TIM_Base_SetConfig+0x38>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a33      	ldr	r2, [pc, #204]	@ (80044ec <TIM_Base_SetConfig+0xf8>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d003      	beq.n	800442c <TIM_Base_SetConfig+0x38>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a32      	ldr	r2, [pc, #200]	@ (80044f0 <TIM_Base_SetConfig+0xfc>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d108      	bne.n	800443e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004432:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	4313      	orrs	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a28      	ldr	r2, [pc, #160]	@ (80044e4 <TIM_Base_SetConfig+0xf0>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d01b      	beq.n	800447e <TIM_Base_SetConfig+0x8a>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800444c:	d017      	beq.n	800447e <TIM_Base_SetConfig+0x8a>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a25      	ldr	r2, [pc, #148]	@ (80044e8 <TIM_Base_SetConfig+0xf4>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d013      	beq.n	800447e <TIM_Base_SetConfig+0x8a>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a24      	ldr	r2, [pc, #144]	@ (80044ec <TIM_Base_SetConfig+0xf8>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d00f      	beq.n	800447e <TIM_Base_SetConfig+0x8a>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a23      	ldr	r2, [pc, #140]	@ (80044f0 <TIM_Base_SetConfig+0xfc>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d00b      	beq.n	800447e <TIM_Base_SetConfig+0x8a>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a22      	ldr	r2, [pc, #136]	@ (80044f4 <TIM_Base_SetConfig+0x100>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d007      	beq.n	800447e <TIM_Base_SetConfig+0x8a>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a21      	ldr	r2, [pc, #132]	@ (80044f8 <TIM_Base_SetConfig+0x104>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d003      	beq.n	800447e <TIM_Base_SetConfig+0x8a>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a20      	ldr	r2, [pc, #128]	@ (80044fc <TIM_Base_SetConfig+0x108>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d108      	bne.n	8004490 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004484:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	4313      	orrs	r3, r2
 800448e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	4313      	orrs	r3, r2
 800449c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	689a      	ldr	r2, [r3, #8]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a0c      	ldr	r2, [pc, #48]	@ (80044e4 <TIM_Base_SetConfig+0xf0>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d103      	bne.n	80044be <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	691a      	ldr	r2, [r3, #16]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f043 0204 	orr.w	r2, r3, #4
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2201      	movs	r2, #1
 80044ce:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	601a      	str	r2, [r3, #0]
}
 80044d6:	bf00      	nop
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	40010000 	.word	0x40010000
 80044e8:	40000400 	.word	0x40000400
 80044ec:	40000800 	.word	0x40000800
 80044f0:	40000c00 	.word	0x40000c00
 80044f4:	40014000 	.word	0x40014000
 80044f8:	40014400 	.word	0x40014400
 80044fc:	40014800 	.word	0x40014800

08004500 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004500:	b480      	push	{r7}
 8004502:	b087      	sub	sp, #28
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	f023 0201 	bic.w	r2, r3, #1
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800452e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f023 0303 	bic.w	r3, r3, #3
 8004536:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	4313      	orrs	r3, r2
 8004540:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f023 0302 	bic.w	r3, r3, #2
 8004548:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	4313      	orrs	r3, r2
 8004552:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a1c      	ldr	r2, [pc, #112]	@ (80045c8 <TIM_OC1_SetConfig+0xc8>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d10c      	bne.n	8004576 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f023 0308 	bic.w	r3, r3, #8
 8004562:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	4313      	orrs	r3, r2
 800456c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f023 0304 	bic.w	r3, r3, #4
 8004574:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a13      	ldr	r2, [pc, #76]	@ (80045c8 <TIM_OC1_SetConfig+0xc8>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d111      	bne.n	80045a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004584:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800458c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	4313      	orrs	r3, r2
 8004596:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	4313      	orrs	r3, r2
 80045a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	621a      	str	r2, [r3, #32]
}
 80045bc:	bf00      	nop
 80045be:	371c      	adds	r7, #28
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr
 80045c8:	40010000 	.word	0x40010000

080045cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b087      	sub	sp, #28
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	f023 0210 	bic.w	r2, r3, #16
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004602:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	021b      	lsls	r3, r3, #8
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	4313      	orrs	r3, r2
 800460e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	f023 0320 	bic.w	r3, r3, #32
 8004616:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	011b      	lsls	r3, r3, #4
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	4313      	orrs	r3, r2
 8004622:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a1e      	ldr	r2, [pc, #120]	@ (80046a0 <TIM_OC2_SetConfig+0xd4>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d10d      	bne.n	8004648 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004632:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	011b      	lsls	r3, r3, #4
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	4313      	orrs	r3, r2
 800463e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004646:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a15      	ldr	r2, [pc, #84]	@ (80046a0 <TIM_OC2_SetConfig+0xd4>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d113      	bne.n	8004678 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004656:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800465e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	4313      	orrs	r3, r2
 800466a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	4313      	orrs	r3, r2
 8004676:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	621a      	str	r2, [r3, #32]
}
 8004692:	bf00      	nop
 8004694:	371c      	adds	r7, #28
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	40010000 	.word	0x40010000

080046a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b087      	sub	sp, #28
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f023 0303 	bic.w	r3, r3, #3
 80046da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	021b      	lsls	r3, r3, #8
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004774 <TIM_OC3_SetConfig+0xd0>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d10d      	bne.n	800471e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004708:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	021b      	lsls	r3, r3, #8
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	4313      	orrs	r3, r2
 8004714:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800471c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a14      	ldr	r2, [pc, #80]	@ (8004774 <TIM_OC3_SetConfig+0xd0>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d113      	bne.n	800474e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800472c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004734:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	011b      	lsls	r3, r3, #4
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	4313      	orrs	r3, r2
 8004740:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	011b      	lsls	r3, r3, #4
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	4313      	orrs	r3, r2
 800474c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	621a      	str	r2, [r3, #32]
}
 8004768:	bf00      	nop
 800476a:	371c      	adds	r7, #28
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr
 8004774:	40010000 	.word	0x40010000

08004778 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004778:	b480      	push	{r7}
 800477a:	b087      	sub	sp, #28
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	021b      	lsls	r3, r3, #8
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80047c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	031b      	lsls	r3, r3, #12
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a10      	ldr	r2, [pc, #64]	@ (8004814 <TIM_OC4_SetConfig+0x9c>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d109      	bne.n	80047ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	019b      	lsls	r3, r3, #6
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	693a      	ldr	r2, [r7, #16]
 8004804:	621a      	str	r2, [r3, #32]
}
 8004806:	bf00      	nop
 8004808:	371c      	adds	r7, #28
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	40010000 	.word	0x40010000

08004818 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004818:	b480      	push	{r7}
 800481a:	b087      	sub	sp, #28
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	f023 0201 	bic.w	r2, r3, #1
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004842:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	011b      	lsls	r3, r3, #4
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	4313      	orrs	r3, r2
 800484c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f023 030a 	bic.w	r3, r3, #10
 8004854:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	4313      	orrs	r3, r2
 800485c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	621a      	str	r2, [r3, #32]
}
 800486a:	bf00      	nop
 800486c:	371c      	adds	r7, #28
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004876:	b480      	push	{r7}
 8004878:	b087      	sub	sp, #28
 800487a:	af00      	add	r7, sp, #0
 800487c:	60f8      	str	r0, [r7, #12]
 800487e:	60b9      	str	r1, [r7, #8]
 8004880:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	f023 0210 	bic.w	r2, r3, #16
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80048a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	031b      	lsls	r3, r3, #12
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80048b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	011b      	lsls	r3, r3, #4
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	621a      	str	r2, [r3, #32]
}
 80048ca:	bf00      	nop
 80048cc:	371c      	adds	r7, #28
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr

080048d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b085      	sub	sp, #20
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
 80048de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f043 0307 	orr.w	r3, r3, #7
 80048f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	609a      	str	r2, [r3, #8]
}
 8004900:	bf00      	nop
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800490c:	b480      	push	{r7}
 800490e:	b087      	sub	sp, #28
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
 8004918:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004926:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	021a      	lsls	r2, r3, #8
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	431a      	orrs	r2, r3
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	4313      	orrs	r3, r2
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	4313      	orrs	r3, r2
 8004938:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	609a      	str	r2, [r3, #8]
}
 8004940:	bf00      	nop
 8004942:	371c      	adds	r7, #28
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800494c:	b480      	push	{r7}
 800494e:	b087      	sub	sp, #28
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	f003 031f 	and.w	r3, r3, #31
 800495e:	2201      	movs	r2, #1
 8004960:	fa02 f303 	lsl.w	r3, r2, r3
 8004964:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6a1a      	ldr	r2, [r3, #32]
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	43db      	mvns	r3, r3
 800496e:	401a      	ands	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6a1a      	ldr	r2, [r3, #32]
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	f003 031f 	and.w	r3, r3, #31
 800497e:	6879      	ldr	r1, [r7, #4]
 8004980:	fa01 f303 	lsl.w	r3, r1, r3
 8004984:	431a      	orrs	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	621a      	str	r2, [r3, #32]
}
 800498a:	bf00      	nop
 800498c:	371c      	adds	r7, #28
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
	...

08004998 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d101      	bne.n	80049b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049ac:	2302      	movs	r3, #2
 80049ae:	e050      	b.n	8004a52 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	4313      	orrs	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a1c      	ldr	r2, [pc, #112]	@ (8004a60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d018      	beq.n	8004a26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049fc:	d013      	beq.n	8004a26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a18      	ldr	r2, [pc, #96]	@ (8004a64 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d00e      	beq.n	8004a26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a16      	ldr	r2, [pc, #88]	@ (8004a68 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d009      	beq.n	8004a26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a15      	ldr	r2, [pc, #84]	@ (8004a6c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d004      	beq.n	8004a26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a13      	ldr	r2, [pc, #76]	@ (8004a70 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d10c      	bne.n	8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68ba      	ldr	r2, [r7, #8]
 8004a3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3714      	adds	r7, #20
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	40010000 	.word	0x40010000
 8004a64:	40000400 	.word	0x40000400
 8004a68:	40000800 	.word	0x40000800
 8004a6c:	40000c00 	.word	0x40000c00
 8004a70:	40014000 	.word	0x40014000

08004a74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d101      	bne.n	8004a90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	e03d      	b.n	8004b0c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	69db      	ldr	r3, [r3, #28]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b34:	bf00      	nop
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e042      	b.n	8004bd8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d106      	bne.n	8004b6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7fc fa20 	bl	8000fac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2224      	movs	r2, #36	@ 0x24
 8004b70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68da      	ldr	r2, [r3, #12]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 fcf9 	bl	800557c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	691a      	ldr	r2, [r3, #16]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	695a      	ldr	r2, [r3, #20]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ba8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68da      	ldr	r2, [r3, #12]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004bb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3708      	adds	r7, #8
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	4613      	mov	r3, r2
 8004bec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b20      	cmp	r3, #32
 8004bf8:	d112      	bne.n	8004c20 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d002      	beq.n	8004c06 <HAL_UART_Receive_IT+0x26>
 8004c00:	88fb      	ldrh	r3, [r7, #6]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e00b      	b.n	8004c22 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c10:	88fb      	ldrh	r3, [r7, #6]
 8004c12:	461a      	mov	r2, r3
 8004c14:	68b9      	ldr	r1, [r7, #8]
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f000 fadc 	bl	80051d4 <UART_Start_Receive_IT>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	e000      	b.n	8004c22 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004c20:	2302      	movs	r3, #2
  }
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3710      	adds	r7, #16
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
	...

08004c2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b0ba      	sub	sp, #232	@ 0xe8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004c6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10f      	bne.n	8004c92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c76:	f003 0320 	and.w	r3, r3, #32
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d009      	beq.n	8004c92 <HAL_UART_IRQHandler+0x66>
 8004c7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c82:	f003 0320 	and.w	r3, r3, #32
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d003      	beq.n	8004c92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 fbb8 	bl	8005400 <UART_Receive_IT>
      return;
 8004c90:	e273      	b.n	800517a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004c92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f000 80de 	beq.w	8004e58 <HAL_UART_IRQHandler+0x22c>
 8004c9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d106      	bne.n	8004cb6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cac:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 80d1 	beq.w	8004e58 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00b      	beq.n	8004cda <HAL_UART_IRQHandler+0xae>
 8004cc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d005      	beq.n	8004cda <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cd2:	f043 0201 	orr.w	r2, r3, #1
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cde:	f003 0304 	and.w	r3, r3, #4
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00b      	beq.n	8004cfe <HAL_UART_IRQHandler+0xd2>
 8004ce6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d005      	beq.n	8004cfe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cf6:	f043 0202 	orr.w	r2, r3, #2
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00b      	beq.n	8004d22 <HAL_UART_IRQHandler+0xf6>
 8004d0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d005      	beq.n	8004d22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d1a:	f043 0204 	orr.w	r2, r3, #4
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d26:	f003 0308 	and.w	r3, r3, #8
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d011      	beq.n	8004d52 <HAL_UART_IRQHandler+0x126>
 8004d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d32:	f003 0320 	and.w	r3, r3, #32
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d105      	bne.n	8004d46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d005      	beq.n	8004d52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d4a:	f043 0208 	orr.w	r2, r3, #8
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 820a 	beq.w	8005170 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d60:	f003 0320 	and.w	r3, r3, #32
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d008      	beq.n	8004d7a <HAL_UART_IRQHandler+0x14e>
 8004d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d6c:	f003 0320 	and.w	r3, r3, #32
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d002      	beq.n	8004d7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 fb43 	bl	8005400 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d84:	2b40      	cmp	r3, #64	@ 0x40
 8004d86:	bf0c      	ite	eq
 8004d88:	2301      	moveq	r3, #1
 8004d8a:	2300      	movne	r3, #0
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d96:	f003 0308 	and.w	r3, r3, #8
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d103      	bne.n	8004da6 <HAL_UART_IRQHandler+0x17a>
 8004d9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d04f      	beq.n	8004e46 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 fa4e 	bl	8005248 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004db6:	2b40      	cmp	r3, #64	@ 0x40
 8004db8:	d141      	bne.n	8004e3e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	3314      	adds	r3, #20
 8004dc0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004dc8:	e853 3f00 	ldrex	r3, [r3]
 8004dcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004dd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004dd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dd8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	3314      	adds	r3, #20
 8004de2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004de6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004dea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004df2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004df6:	e841 2300 	strex	r3, r2, [r1]
 8004dfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004dfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1d9      	bne.n	8004dba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d013      	beq.n	8004e36 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e12:	4a8a      	ldr	r2, [pc, #552]	@ (800503c <HAL_UART_IRQHandler+0x410>)
 8004e14:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fd fa97 	bl	800234e <HAL_DMA_Abort_IT>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d016      	beq.n	8004e54 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e30:	4610      	mov	r0, r2
 8004e32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e34:	e00e      	b.n	8004e54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f9b6 	bl	80051a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e3c:	e00a      	b.n	8004e54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f9b2 	bl	80051a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e44:	e006      	b.n	8004e54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f9ae 	bl	80051a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004e52:	e18d      	b.n	8005170 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e54:	bf00      	nop
    return;
 8004e56:	e18b      	b.n	8005170 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	f040 8167 	bne.w	8005130 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e66:	f003 0310 	and.w	r3, r3, #16
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f000 8160 	beq.w	8005130 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e74:	f003 0310 	and.w	r3, r3, #16
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f000 8159 	beq.w	8005130 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e7e:	2300      	movs	r3, #0
 8004e80:	60bb      	str	r3, [r7, #8]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	60bb      	str	r3, [r7, #8]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	60bb      	str	r3, [r7, #8]
 8004e92:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e9e:	2b40      	cmp	r3, #64	@ 0x40
 8004ea0:	f040 80ce 	bne.w	8005040 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004eb0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 80a9 	beq.w	800500c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ebe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	f080 80a2 	bcs.w	800500c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ece:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004eda:	f000 8088 	beq.w	8004fee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	330c      	adds	r3, #12
 8004ee4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004eec:	e853 3f00 	ldrex	r3, [r3]
 8004ef0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004ef4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ef8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004efc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	330c      	adds	r3, #12
 8004f06:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004f0a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f12:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004f16:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004f1a:	e841 2300 	strex	r3, r2, [r1]
 8004f1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004f22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1d9      	bne.n	8004ede <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	3314      	adds	r3, #20
 8004f30:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f34:	e853 3f00 	ldrex	r3, [r3]
 8004f38:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004f3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f3c:	f023 0301 	bic.w	r3, r3, #1
 8004f40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	3314      	adds	r3, #20
 8004f4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004f4e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004f52:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f54:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004f56:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004f5a:	e841 2300 	strex	r3, r2, [r1]
 8004f5e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004f60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1e1      	bne.n	8004f2a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	3314      	adds	r3, #20
 8004f6c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f70:	e853 3f00 	ldrex	r3, [r3]
 8004f74:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004f76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	3314      	adds	r3, #20
 8004f86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004f8a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004f8c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004f90:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004f92:	e841 2300 	strex	r3, r2, [r1]
 8004f96:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004f98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1e3      	bne.n	8004f66 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	330c      	adds	r3, #12
 8004fb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fb6:	e853 3f00 	ldrex	r3, [r3]
 8004fba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004fbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fbe:	f023 0310 	bic.w	r3, r3, #16
 8004fc2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	330c      	adds	r3, #12
 8004fcc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004fd0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004fd2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004fd6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004fd8:	e841 2300 	strex	r3, r2, [r1]
 8004fdc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004fde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1e3      	bne.n	8004fac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7fd f940 	bl	800226e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2202      	movs	r2, #2
 8004ff2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	b29b      	uxth	r3, r3
 8005002:	4619      	mov	r1, r3
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 f8d9 	bl	80051bc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800500a:	e0b3      	b.n	8005174 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005010:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005014:	429a      	cmp	r2, r3
 8005016:	f040 80ad 	bne.w	8005174 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800501e:	69db      	ldr	r3, [r3, #28]
 8005020:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005024:	f040 80a6 	bne.w	8005174 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2202      	movs	r2, #2
 800502c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005032:	4619      	mov	r1, r3
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 f8c1 	bl	80051bc <HAL_UARTEx_RxEventCallback>
      return;
 800503a:	e09b      	b.n	8005174 <HAL_UART_IRQHandler+0x548>
 800503c:	0800530f 	.word	0x0800530f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005048:	b29b      	uxth	r3, r3
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005054:	b29b      	uxth	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	f000 808e 	beq.w	8005178 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800505c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005060:	2b00      	cmp	r3, #0
 8005062:	f000 8089 	beq.w	8005178 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	330c      	adds	r3, #12
 800506c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005070:	e853 3f00 	ldrex	r3, [r3]
 8005074:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005078:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800507c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	330c      	adds	r3, #12
 8005086:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800508a:	647a      	str	r2, [r7, #68]	@ 0x44
 800508c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005090:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005092:	e841 2300 	strex	r3, r2, [r1]
 8005096:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005098:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1e3      	bne.n	8005066 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	3314      	adds	r3, #20
 80050a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a8:	e853 3f00 	ldrex	r3, [r3]
 80050ac:	623b      	str	r3, [r7, #32]
   return(result);
 80050ae:	6a3b      	ldr	r3, [r7, #32]
 80050b0:	f023 0301 	bic.w	r3, r3, #1
 80050b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3314      	adds	r3, #20
 80050be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80050c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80050c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050ca:	e841 2300 	strex	r3, r2, [r1]
 80050ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1e3      	bne.n	800509e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2220      	movs	r2, #32
 80050da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	330c      	adds	r3, #12
 80050ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	e853 3f00 	ldrex	r3, [r3]
 80050f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f023 0310 	bic.w	r3, r3, #16
 80050fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	330c      	adds	r3, #12
 8005104:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005108:	61fa      	str	r2, [r7, #28]
 800510a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510c:	69b9      	ldr	r1, [r7, #24]
 800510e:	69fa      	ldr	r2, [r7, #28]
 8005110:	e841 2300 	strex	r3, r2, [r1]
 8005114:	617b      	str	r3, [r7, #20]
   return(result);
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1e3      	bne.n	80050e4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2202      	movs	r2, #2
 8005120:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005122:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005126:	4619      	mov	r1, r3
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 f847 	bl	80051bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800512e:	e023      	b.n	8005178 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005134:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005138:	2b00      	cmp	r3, #0
 800513a:	d009      	beq.n	8005150 <HAL_UART_IRQHandler+0x524>
 800513c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005140:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005144:	2b00      	cmp	r3, #0
 8005146:	d003      	beq.n	8005150 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 f8f1 	bl	8005330 <UART_Transmit_IT>
    return;
 800514e:	e014      	b.n	800517a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00e      	beq.n	800517a <HAL_UART_IRQHandler+0x54e>
 800515c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005164:	2b00      	cmp	r3, #0
 8005166:	d008      	beq.n	800517a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 f931 	bl	80053d0 <UART_EndTransmit_IT>
    return;
 800516e:	e004      	b.n	800517a <HAL_UART_IRQHandler+0x54e>
    return;
 8005170:	bf00      	nop
 8005172:	e002      	b.n	800517a <HAL_UART_IRQHandler+0x54e>
      return;
 8005174:	bf00      	nop
 8005176:	e000      	b.n	800517a <HAL_UART_IRQHandler+0x54e>
      return;
 8005178:	bf00      	nop
  }
}
 800517a:	37e8      	adds	r7, #232	@ 0xe8
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	460b      	mov	r3, r1
 80051c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	4613      	mov	r3, r2
 80051e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	88fa      	ldrh	r2, [r7, #6]
 80051ec:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	88fa      	ldrh	r2, [r7, #6]
 80051f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2222      	movs	r2, #34	@ 0x22
 80051fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d007      	beq.n	800521a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68da      	ldr	r2, [r3, #12]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005218:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	695a      	ldr	r2, [r3, #20]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f042 0201 	orr.w	r2, r2, #1
 8005228:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68da      	ldr	r2, [r3, #12]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f042 0220 	orr.w	r2, r2, #32
 8005238:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005248:	b480      	push	{r7}
 800524a:	b095      	sub	sp, #84	@ 0x54
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	330c      	adds	r3, #12
 8005256:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800525a:	e853 3f00 	ldrex	r3, [r3]
 800525e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005262:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005266:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	330c      	adds	r3, #12
 800526e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005270:	643a      	str	r2, [r7, #64]	@ 0x40
 8005272:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005274:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005276:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005278:	e841 2300 	strex	r3, r2, [r1]
 800527c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800527e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1e5      	bne.n	8005250 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	3314      	adds	r3, #20
 800528a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528c:	6a3b      	ldr	r3, [r7, #32]
 800528e:	e853 3f00 	ldrex	r3, [r3]
 8005292:	61fb      	str	r3, [r7, #28]
   return(result);
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	f023 0301 	bic.w	r3, r3, #1
 800529a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	3314      	adds	r3, #20
 80052a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052ac:	e841 2300 	strex	r3, r2, [r1]
 80052b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1e5      	bne.n	8005284 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d119      	bne.n	80052f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	330c      	adds	r3, #12
 80052c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	e853 3f00 	ldrex	r3, [r3]
 80052ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	f023 0310 	bic.w	r3, r3, #16
 80052d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	330c      	adds	r3, #12
 80052de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052e0:	61ba      	str	r2, [r7, #24]
 80052e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e4:	6979      	ldr	r1, [r7, #20]
 80052e6:	69ba      	ldr	r2, [r7, #24]
 80052e8:	e841 2300 	strex	r3, r2, [r1]
 80052ec:	613b      	str	r3, [r7, #16]
   return(result);
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1e5      	bne.n	80052c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2220      	movs	r2, #32
 80052f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005302:	bf00      	nop
 8005304:	3754      	adds	r7, #84	@ 0x54
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b084      	sub	sp, #16
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800531a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f7ff ff40 	bl	80051a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005328:	bf00      	nop
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b21      	cmp	r3, #33	@ 0x21
 8005342:	d13e      	bne.n	80053c2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800534c:	d114      	bne.n	8005378 <UART_Transmit_IT+0x48>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d110      	bne.n	8005378 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	881b      	ldrh	r3, [r3, #0]
 8005360:	461a      	mov	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800536a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a1b      	ldr	r3, [r3, #32]
 8005370:	1c9a      	adds	r2, r3, #2
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	621a      	str	r2, [r3, #32]
 8005376:	e008      	b.n	800538a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a1b      	ldr	r3, [r3, #32]
 800537c:	1c59      	adds	r1, r3, #1
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	6211      	str	r1, [r2, #32]
 8005382:	781a      	ldrb	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800538e:	b29b      	uxth	r3, r3
 8005390:	3b01      	subs	r3, #1
 8005392:	b29b      	uxth	r3, r3
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	4619      	mov	r1, r3
 8005398:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10f      	bne.n	80053be <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68da      	ldr	r2, [r3, #12]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80053ac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68da      	ldr	r2, [r3, #12]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053bc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80053be:	2300      	movs	r3, #0
 80053c0:	e000      	b.n	80053c4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80053c2:	2302      	movs	r3, #2
  }
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3714      	adds	r7, #20
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68da      	ldr	r2, [r3, #12]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053e6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2220      	movs	r2, #32
 80053ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f7ff fec5 	bl	8005180 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3708      	adds	r7, #8
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b08c      	sub	sp, #48	@ 0x30
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005408:	2300      	movs	r3, #0
 800540a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800540c:	2300      	movs	r3, #0
 800540e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005416:	b2db      	uxtb	r3, r3
 8005418:	2b22      	cmp	r3, #34	@ 0x22
 800541a:	f040 80aa 	bne.w	8005572 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005426:	d115      	bne.n	8005454 <UART_Receive_IT+0x54>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d111      	bne.n	8005454 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005434:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	b29b      	uxth	r3, r3
 800543e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005442:	b29a      	uxth	r2, r3
 8005444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005446:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800544c:	1c9a      	adds	r2, r3, #2
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	629a      	str	r2, [r3, #40]	@ 0x28
 8005452:	e024      	b.n	800549e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005458:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005462:	d007      	beq.n	8005474 <UART_Receive_IT+0x74>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d10a      	bne.n	8005482 <UART_Receive_IT+0x82>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d106      	bne.n	8005482 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	b2da      	uxtb	r2, r3
 800547c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800547e:	701a      	strb	r2, [r3, #0]
 8005480:	e008      	b.n	8005494 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	b2db      	uxtb	r3, r3
 800548a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800548e:	b2da      	uxtb	r2, r3
 8005490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005492:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005498:	1c5a      	adds	r2, r3, #1
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	3b01      	subs	r3, #1
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	4619      	mov	r1, r3
 80054ac:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d15d      	bne.n	800556e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68da      	ldr	r2, [r3, #12]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f022 0220 	bic.w	r2, r2, #32
 80054c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68da      	ldr	r2, [r3, #12]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80054d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	695a      	ldr	r2, [r3, #20]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f022 0201 	bic.w	r2, r2, #1
 80054e0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2220      	movs	r2, #32
 80054e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d135      	bne.n	8005564 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	330c      	adds	r3, #12
 8005504:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	e853 3f00 	ldrex	r3, [r3]
 800550c:	613b      	str	r3, [r7, #16]
   return(result);
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	f023 0310 	bic.w	r3, r3, #16
 8005514:	627b      	str	r3, [r7, #36]	@ 0x24
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	330c      	adds	r3, #12
 800551c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800551e:	623a      	str	r2, [r7, #32]
 8005520:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005522:	69f9      	ldr	r1, [r7, #28]
 8005524:	6a3a      	ldr	r2, [r7, #32]
 8005526:	e841 2300 	strex	r3, r2, [r1]
 800552a:	61bb      	str	r3, [r7, #24]
   return(result);
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1e5      	bne.n	80054fe <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0310 	and.w	r3, r3, #16
 800553c:	2b10      	cmp	r3, #16
 800553e:	d10a      	bne.n	8005556 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005540:	2300      	movs	r3, #0
 8005542:	60fb      	str	r3, [r7, #12]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	60fb      	str	r3, [r7, #12]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	60fb      	str	r3, [r7, #12]
 8005554:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800555a:	4619      	mov	r1, r3
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f7ff fe2d 	bl	80051bc <HAL_UARTEx_RxEventCallback>
 8005562:	e002      	b.n	800556a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f7ff fe15 	bl	8005194 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800556a:	2300      	movs	r3, #0
 800556c:	e002      	b.n	8005574 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800556e:	2300      	movs	r3, #0
 8005570:	e000      	b.n	8005574 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005572:	2302      	movs	r3, #2
  }
}
 8005574:	4618      	mov	r0, r3
 8005576:	3730      	adds	r7, #48	@ 0x30
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800557c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005580:	b0c0      	sub	sp, #256	@ 0x100
 8005582:	af00      	add	r7, sp, #0
 8005584:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005598:	68d9      	ldr	r1, [r3, #12]
 800559a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	ea40 0301 	orr.w	r3, r0, r1
 80055a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055aa:	689a      	ldr	r2, [r3, #8]
 80055ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	431a      	orrs	r2, r3
 80055b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	431a      	orrs	r2, r3
 80055bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80055c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80055d4:	f021 010c 	bic.w	r1, r1, #12
 80055d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80055e2:	430b      	orrs	r3, r1
 80055e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80055f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055f6:	6999      	ldr	r1, [r3, #24]
 80055f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	ea40 0301 	orr.w	r3, r0, r1
 8005602:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	4b8f      	ldr	r3, [pc, #572]	@ (8005848 <UART_SetConfig+0x2cc>)
 800560c:	429a      	cmp	r2, r3
 800560e:	d005      	beq.n	800561c <UART_SetConfig+0xa0>
 8005610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	4b8d      	ldr	r3, [pc, #564]	@ (800584c <UART_SetConfig+0x2d0>)
 8005618:	429a      	cmp	r2, r3
 800561a:	d104      	bne.n	8005626 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800561c:	f7fe f992 	bl	8003944 <HAL_RCC_GetPCLK2Freq>
 8005620:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005624:	e003      	b.n	800562e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005626:	f7fe f979 	bl	800391c <HAL_RCC_GetPCLK1Freq>
 800562a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800562e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005632:	69db      	ldr	r3, [r3, #28]
 8005634:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005638:	f040 810c 	bne.w	8005854 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800563c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005640:	2200      	movs	r2, #0
 8005642:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005646:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800564a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800564e:	4622      	mov	r2, r4
 8005650:	462b      	mov	r3, r5
 8005652:	1891      	adds	r1, r2, r2
 8005654:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005656:	415b      	adcs	r3, r3
 8005658:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800565a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800565e:	4621      	mov	r1, r4
 8005660:	eb12 0801 	adds.w	r8, r2, r1
 8005664:	4629      	mov	r1, r5
 8005666:	eb43 0901 	adc.w	r9, r3, r1
 800566a:	f04f 0200 	mov.w	r2, #0
 800566e:	f04f 0300 	mov.w	r3, #0
 8005672:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005676:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800567a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800567e:	4690      	mov	r8, r2
 8005680:	4699      	mov	r9, r3
 8005682:	4623      	mov	r3, r4
 8005684:	eb18 0303 	adds.w	r3, r8, r3
 8005688:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800568c:	462b      	mov	r3, r5
 800568e:	eb49 0303 	adc.w	r3, r9, r3
 8005692:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80056a2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80056a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80056aa:	460b      	mov	r3, r1
 80056ac:	18db      	adds	r3, r3, r3
 80056ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80056b0:	4613      	mov	r3, r2
 80056b2:	eb42 0303 	adc.w	r3, r2, r3
 80056b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80056b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80056bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80056c0:	f7fa fdde 	bl	8000280 <__aeabi_uldivmod>
 80056c4:	4602      	mov	r2, r0
 80056c6:	460b      	mov	r3, r1
 80056c8:	4b61      	ldr	r3, [pc, #388]	@ (8005850 <UART_SetConfig+0x2d4>)
 80056ca:	fba3 2302 	umull	r2, r3, r3, r2
 80056ce:	095b      	lsrs	r3, r3, #5
 80056d0:	011c      	lsls	r4, r3, #4
 80056d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056d6:	2200      	movs	r2, #0
 80056d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80056dc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80056e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80056e4:	4642      	mov	r2, r8
 80056e6:	464b      	mov	r3, r9
 80056e8:	1891      	adds	r1, r2, r2
 80056ea:	64b9      	str	r1, [r7, #72]	@ 0x48
 80056ec:	415b      	adcs	r3, r3
 80056ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80056f4:	4641      	mov	r1, r8
 80056f6:	eb12 0a01 	adds.w	sl, r2, r1
 80056fa:	4649      	mov	r1, r9
 80056fc:	eb43 0b01 	adc.w	fp, r3, r1
 8005700:	f04f 0200 	mov.w	r2, #0
 8005704:	f04f 0300 	mov.w	r3, #0
 8005708:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800570c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005710:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005714:	4692      	mov	sl, r2
 8005716:	469b      	mov	fp, r3
 8005718:	4643      	mov	r3, r8
 800571a:	eb1a 0303 	adds.w	r3, sl, r3
 800571e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005722:	464b      	mov	r3, r9
 8005724:	eb4b 0303 	adc.w	r3, fp, r3
 8005728:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800572c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005738:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800573c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005740:	460b      	mov	r3, r1
 8005742:	18db      	adds	r3, r3, r3
 8005744:	643b      	str	r3, [r7, #64]	@ 0x40
 8005746:	4613      	mov	r3, r2
 8005748:	eb42 0303 	adc.w	r3, r2, r3
 800574c:	647b      	str	r3, [r7, #68]	@ 0x44
 800574e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005752:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005756:	f7fa fd93 	bl	8000280 <__aeabi_uldivmod>
 800575a:	4602      	mov	r2, r0
 800575c:	460b      	mov	r3, r1
 800575e:	4611      	mov	r1, r2
 8005760:	4b3b      	ldr	r3, [pc, #236]	@ (8005850 <UART_SetConfig+0x2d4>)
 8005762:	fba3 2301 	umull	r2, r3, r3, r1
 8005766:	095b      	lsrs	r3, r3, #5
 8005768:	2264      	movs	r2, #100	@ 0x64
 800576a:	fb02 f303 	mul.w	r3, r2, r3
 800576e:	1acb      	subs	r3, r1, r3
 8005770:	00db      	lsls	r3, r3, #3
 8005772:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005776:	4b36      	ldr	r3, [pc, #216]	@ (8005850 <UART_SetConfig+0x2d4>)
 8005778:	fba3 2302 	umull	r2, r3, r3, r2
 800577c:	095b      	lsrs	r3, r3, #5
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005784:	441c      	add	r4, r3
 8005786:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800578a:	2200      	movs	r2, #0
 800578c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005790:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005794:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005798:	4642      	mov	r2, r8
 800579a:	464b      	mov	r3, r9
 800579c:	1891      	adds	r1, r2, r2
 800579e:	63b9      	str	r1, [r7, #56]	@ 0x38
 80057a0:	415b      	adcs	r3, r3
 80057a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80057a8:	4641      	mov	r1, r8
 80057aa:	1851      	adds	r1, r2, r1
 80057ac:	6339      	str	r1, [r7, #48]	@ 0x30
 80057ae:	4649      	mov	r1, r9
 80057b0:	414b      	adcs	r3, r1
 80057b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80057b4:	f04f 0200 	mov.w	r2, #0
 80057b8:	f04f 0300 	mov.w	r3, #0
 80057bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80057c0:	4659      	mov	r1, fp
 80057c2:	00cb      	lsls	r3, r1, #3
 80057c4:	4651      	mov	r1, sl
 80057c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057ca:	4651      	mov	r1, sl
 80057cc:	00ca      	lsls	r2, r1, #3
 80057ce:	4610      	mov	r0, r2
 80057d0:	4619      	mov	r1, r3
 80057d2:	4603      	mov	r3, r0
 80057d4:	4642      	mov	r2, r8
 80057d6:	189b      	adds	r3, r3, r2
 80057d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80057dc:	464b      	mov	r3, r9
 80057de:	460a      	mov	r2, r1
 80057e0:	eb42 0303 	adc.w	r3, r2, r3
 80057e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80057f4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80057f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80057fc:	460b      	mov	r3, r1
 80057fe:	18db      	adds	r3, r3, r3
 8005800:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005802:	4613      	mov	r3, r2
 8005804:	eb42 0303 	adc.w	r3, r2, r3
 8005808:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800580a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800580e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005812:	f7fa fd35 	bl	8000280 <__aeabi_uldivmod>
 8005816:	4602      	mov	r2, r0
 8005818:	460b      	mov	r3, r1
 800581a:	4b0d      	ldr	r3, [pc, #52]	@ (8005850 <UART_SetConfig+0x2d4>)
 800581c:	fba3 1302 	umull	r1, r3, r3, r2
 8005820:	095b      	lsrs	r3, r3, #5
 8005822:	2164      	movs	r1, #100	@ 0x64
 8005824:	fb01 f303 	mul.w	r3, r1, r3
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	00db      	lsls	r3, r3, #3
 800582c:	3332      	adds	r3, #50	@ 0x32
 800582e:	4a08      	ldr	r2, [pc, #32]	@ (8005850 <UART_SetConfig+0x2d4>)
 8005830:	fba2 2303 	umull	r2, r3, r2, r3
 8005834:	095b      	lsrs	r3, r3, #5
 8005836:	f003 0207 	and.w	r2, r3, #7
 800583a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4422      	add	r2, r4
 8005842:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005844:	e106      	b.n	8005a54 <UART_SetConfig+0x4d8>
 8005846:	bf00      	nop
 8005848:	40011000 	.word	0x40011000
 800584c:	40011400 	.word	0x40011400
 8005850:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005854:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005858:	2200      	movs	r2, #0
 800585a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800585e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005862:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005866:	4642      	mov	r2, r8
 8005868:	464b      	mov	r3, r9
 800586a:	1891      	adds	r1, r2, r2
 800586c:	6239      	str	r1, [r7, #32]
 800586e:	415b      	adcs	r3, r3
 8005870:	627b      	str	r3, [r7, #36]	@ 0x24
 8005872:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005876:	4641      	mov	r1, r8
 8005878:	1854      	adds	r4, r2, r1
 800587a:	4649      	mov	r1, r9
 800587c:	eb43 0501 	adc.w	r5, r3, r1
 8005880:	f04f 0200 	mov.w	r2, #0
 8005884:	f04f 0300 	mov.w	r3, #0
 8005888:	00eb      	lsls	r3, r5, #3
 800588a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800588e:	00e2      	lsls	r2, r4, #3
 8005890:	4614      	mov	r4, r2
 8005892:	461d      	mov	r5, r3
 8005894:	4643      	mov	r3, r8
 8005896:	18e3      	adds	r3, r4, r3
 8005898:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800589c:	464b      	mov	r3, r9
 800589e:	eb45 0303 	adc.w	r3, r5, r3
 80058a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80058a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80058b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80058b6:	f04f 0200 	mov.w	r2, #0
 80058ba:	f04f 0300 	mov.w	r3, #0
 80058be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80058c2:	4629      	mov	r1, r5
 80058c4:	008b      	lsls	r3, r1, #2
 80058c6:	4621      	mov	r1, r4
 80058c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058cc:	4621      	mov	r1, r4
 80058ce:	008a      	lsls	r2, r1, #2
 80058d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80058d4:	f7fa fcd4 	bl	8000280 <__aeabi_uldivmod>
 80058d8:	4602      	mov	r2, r0
 80058da:	460b      	mov	r3, r1
 80058dc:	4b60      	ldr	r3, [pc, #384]	@ (8005a60 <UART_SetConfig+0x4e4>)
 80058de:	fba3 2302 	umull	r2, r3, r3, r2
 80058e2:	095b      	lsrs	r3, r3, #5
 80058e4:	011c      	lsls	r4, r3, #4
 80058e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058ea:	2200      	movs	r2, #0
 80058ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80058f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80058f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80058f8:	4642      	mov	r2, r8
 80058fa:	464b      	mov	r3, r9
 80058fc:	1891      	adds	r1, r2, r2
 80058fe:	61b9      	str	r1, [r7, #24]
 8005900:	415b      	adcs	r3, r3
 8005902:	61fb      	str	r3, [r7, #28]
 8005904:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005908:	4641      	mov	r1, r8
 800590a:	1851      	adds	r1, r2, r1
 800590c:	6139      	str	r1, [r7, #16]
 800590e:	4649      	mov	r1, r9
 8005910:	414b      	adcs	r3, r1
 8005912:	617b      	str	r3, [r7, #20]
 8005914:	f04f 0200 	mov.w	r2, #0
 8005918:	f04f 0300 	mov.w	r3, #0
 800591c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005920:	4659      	mov	r1, fp
 8005922:	00cb      	lsls	r3, r1, #3
 8005924:	4651      	mov	r1, sl
 8005926:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800592a:	4651      	mov	r1, sl
 800592c:	00ca      	lsls	r2, r1, #3
 800592e:	4610      	mov	r0, r2
 8005930:	4619      	mov	r1, r3
 8005932:	4603      	mov	r3, r0
 8005934:	4642      	mov	r2, r8
 8005936:	189b      	adds	r3, r3, r2
 8005938:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800593c:	464b      	mov	r3, r9
 800593e:	460a      	mov	r2, r1
 8005940:	eb42 0303 	adc.w	r3, r2, r3
 8005944:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005952:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005954:	f04f 0200 	mov.w	r2, #0
 8005958:	f04f 0300 	mov.w	r3, #0
 800595c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005960:	4649      	mov	r1, r9
 8005962:	008b      	lsls	r3, r1, #2
 8005964:	4641      	mov	r1, r8
 8005966:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800596a:	4641      	mov	r1, r8
 800596c:	008a      	lsls	r2, r1, #2
 800596e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005972:	f7fa fc85 	bl	8000280 <__aeabi_uldivmod>
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	4611      	mov	r1, r2
 800597c:	4b38      	ldr	r3, [pc, #224]	@ (8005a60 <UART_SetConfig+0x4e4>)
 800597e:	fba3 2301 	umull	r2, r3, r3, r1
 8005982:	095b      	lsrs	r3, r3, #5
 8005984:	2264      	movs	r2, #100	@ 0x64
 8005986:	fb02 f303 	mul.w	r3, r2, r3
 800598a:	1acb      	subs	r3, r1, r3
 800598c:	011b      	lsls	r3, r3, #4
 800598e:	3332      	adds	r3, #50	@ 0x32
 8005990:	4a33      	ldr	r2, [pc, #204]	@ (8005a60 <UART_SetConfig+0x4e4>)
 8005992:	fba2 2303 	umull	r2, r3, r2, r3
 8005996:	095b      	lsrs	r3, r3, #5
 8005998:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800599c:	441c      	add	r4, r3
 800599e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059a2:	2200      	movs	r2, #0
 80059a4:	673b      	str	r3, [r7, #112]	@ 0x70
 80059a6:	677a      	str	r2, [r7, #116]	@ 0x74
 80059a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80059ac:	4642      	mov	r2, r8
 80059ae:	464b      	mov	r3, r9
 80059b0:	1891      	adds	r1, r2, r2
 80059b2:	60b9      	str	r1, [r7, #8]
 80059b4:	415b      	adcs	r3, r3
 80059b6:	60fb      	str	r3, [r7, #12]
 80059b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059bc:	4641      	mov	r1, r8
 80059be:	1851      	adds	r1, r2, r1
 80059c0:	6039      	str	r1, [r7, #0]
 80059c2:	4649      	mov	r1, r9
 80059c4:	414b      	adcs	r3, r1
 80059c6:	607b      	str	r3, [r7, #4]
 80059c8:	f04f 0200 	mov.w	r2, #0
 80059cc:	f04f 0300 	mov.w	r3, #0
 80059d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80059d4:	4659      	mov	r1, fp
 80059d6:	00cb      	lsls	r3, r1, #3
 80059d8:	4651      	mov	r1, sl
 80059da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059de:	4651      	mov	r1, sl
 80059e0:	00ca      	lsls	r2, r1, #3
 80059e2:	4610      	mov	r0, r2
 80059e4:	4619      	mov	r1, r3
 80059e6:	4603      	mov	r3, r0
 80059e8:	4642      	mov	r2, r8
 80059ea:	189b      	adds	r3, r3, r2
 80059ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059ee:	464b      	mov	r3, r9
 80059f0:	460a      	mov	r2, r1
 80059f2:	eb42 0303 	adc.w	r3, r2, r3
 80059f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80059f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a02:	667a      	str	r2, [r7, #100]	@ 0x64
 8005a04:	f04f 0200 	mov.w	r2, #0
 8005a08:	f04f 0300 	mov.w	r3, #0
 8005a0c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005a10:	4649      	mov	r1, r9
 8005a12:	008b      	lsls	r3, r1, #2
 8005a14:	4641      	mov	r1, r8
 8005a16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a1a:	4641      	mov	r1, r8
 8005a1c:	008a      	lsls	r2, r1, #2
 8005a1e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005a22:	f7fa fc2d 	bl	8000280 <__aeabi_uldivmod>
 8005a26:	4602      	mov	r2, r0
 8005a28:	460b      	mov	r3, r1
 8005a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a60 <UART_SetConfig+0x4e4>)
 8005a2c:	fba3 1302 	umull	r1, r3, r3, r2
 8005a30:	095b      	lsrs	r3, r3, #5
 8005a32:	2164      	movs	r1, #100	@ 0x64
 8005a34:	fb01 f303 	mul.w	r3, r1, r3
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	011b      	lsls	r3, r3, #4
 8005a3c:	3332      	adds	r3, #50	@ 0x32
 8005a3e:	4a08      	ldr	r2, [pc, #32]	@ (8005a60 <UART_SetConfig+0x4e4>)
 8005a40:	fba2 2303 	umull	r2, r3, r2, r3
 8005a44:	095b      	lsrs	r3, r3, #5
 8005a46:	f003 020f 	and.w	r2, r3, #15
 8005a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4422      	add	r2, r4
 8005a52:	609a      	str	r2, [r3, #8]
}
 8005a54:	bf00      	nop
 8005a56:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a60:	51eb851f 	.word	0x51eb851f

08005a64 <siprintf>:
 8005a64:	b40e      	push	{r1, r2, r3}
 8005a66:	b510      	push	{r4, lr}
 8005a68:	b09d      	sub	sp, #116	@ 0x74
 8005a6a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005a6c:	9002      	str	r0, [sp, #8]
 8005a6e:	9006      	str	r0, [sp, #24]
 8005a70:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005a74:	480a      	ldr	r0, [pc, #40]	@ (8005aa0 <siprintf+0x3c>)
 8005a76:	9107      	str	r1, [sp, #28]
 8005a78:	9104      	str	r1, [sp, #16]
 8005a7a:	490a      	ldr	r1, [pc, #40]	@ (8005aa4 <siprintf+0x40>)
 8005a7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a80:	9105      	str	r1, [sp, #20]
 8005a82:	2400      	movs	r4, #0
 8005a84:	a902      	add	r1, sp, #8
 8005a86:	6800      	ldr	r0, [r0, #0]
 8005a88:	9301      	str	r3, [sp, #4]
 8005a8a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005a8c:	f000 f994 	bl	8005db8 <_svfiprintf_r>
 8005a90:	9b02      	ldr	r3, [sp, #8]
 8005a92:	701c      	strb	r4, [r3, #0]
 8005a94:	b01d      	add	sp, #116	@ 0x74
 8005a96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a9a:	b003      	add	sp, #12
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	200000b4 	.word	0x200000b4
 8005aa4:	ffff0208 	.word	0xffff0208

08005aa8 <memset>:
 8005aa8:	4402      	add	r2, r0
 8005aaa:	4603      	mov	r3, r0
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d100      	bne.n	8005ab2 <memset+0xa>
 8005ab0:	4770      	bx	lr
 8005ab2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ab6:	e7f9      	b.n	8005aac <memset+0x4>

08005ab8 <__errno>:
 8005ab8:	4b01      	ldr	r3, [pc, #4]	@ (8005ac0 <__errno+0x8>)
 8005aba:	6818      	ldr	r0, [r3, #0]
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	200000b4 	.word	0x200000b4

08005ac4 <__libc_init_array>:
 8005ac4:	b570      	push	{r4, r5, r6, lr}
 8005ac6:	4d0d      	ldr	r5, [pc, #52]	@ (8005afc <__libc_init_array+0x38>)
 8005ac8:	4c0d      	ldr	r4, [pc, #52]	@ (8005b00 <__libc_init_array+0x3c>)
 8005aca:	1b64      	subs	r4, r4, r5
 8005acc:	10a4      	asrs	r4, r4, #2
 8005ace:	2600      	movs	r6, #0
 8005ad0:	42a6      	cmp	r6, r4
 8005ad2:	d109      	bne.n	8005ae8 <__libc_init_array+0x24>
 8005ad4:	4d0b      	ldr	r5, [pc, #44]	@ (8005b04 <__libc_init_array+0x40>)
 8005ad6:	4c0c      	ldr	r4, [pc, #48]	@ (8005b08 <__libc_init_array+0x44>)
 8005ad8:	f000 fc64 	bl	80063a4 <_init>
 8005adc:	1b64      	subs	r4, r4, r5
 8005ade:	10a4      	asrs	r4, r4, #2
 8005ae0:	2600      	movs	r6, #0
 8005ae2:	42a6      	cmp	r6, r4
 8005ae4:	d105      	bne.n	8005af2 <__libc_init_array+0x2e>
 8005ae6:	bd70      	pop	{r4, r5, r6, pc}
 8005ae8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aec:	4798      	blx	r3
 8005aee:	3601      	adds	r6, #1
 8005af0:	e7ee      	b.n	8005ad0 <__libc_init_array+0xc>
 8005af2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005af6:	4798      	blx	r3
 8005af8:	3601      	adds	r6, #1
 8005afa:	e7f2      	b.n	8005ae2 <__libc_init_array+0x1e>
 8005afc:	08006484 	.word	0x08006484
 8005b00:	08006484 	.word	0x08006484
 8005b04:	08006484 	.word	0x08006484
 8005b08:	08006488 	.word	0x08006488

08005b0c <__retarget_lock_acquire_recursive>:
 8005b0c:	4770      	bx	lr

08005b0e <__retarget_lock_release_recursive>:
 8005b0e:	4770      	bx	lr

08005b10 <_free_r>:
 8005b10:	b538      	push	{r3, r4, r5, lr}
 8005b12:	4605      	mov	r5, r0
 8005b14:	2900      	cmp	r1, #0
 8005b16:	d041      	beq.n	8005b9c <_free_r+0x8c>
 8005b18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b1c:	1f0c      	subs	r4, r1, #4
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	bfb8      	it	lt
 8005b22:	18e4      	addlt	r4, r4, r3
 8005b24:	f000 f8e0 	bl	8005ce8 <__malloc_lock>
 8005b28:	4a1d      	ldr	r2, [pc, #116]	@ (8005ba0 <_free_r+0x90>)
 8005b2a:	6813      	ldr	r3, [r2, #0]
 8005b2c:	b933      	cbnz	r3, 8005b3c <_free_r+0x2c>
 8005b2e:	6063      	str	r3, [r4, #4]
 8005b30:	6014      	str	r4, [r2, #0]
 8005b32:	4628      	mov	r0, r5
 8005b34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b38:	f000 b8dc 	b.w	8005cf4 <__malloc_unlock>
 8005b3c:	42a3      	cmp	r3, r4
 8005b3e:	d908      	bls.n	8005b52 <_free_r+0x42>
 8005b40:	6820      	ldr	r0, [r4, #0]
 8005b42:	1821      	adds	r1, r4, r0
 8005b44:	428b      	cmp	r3, r1
 8005b46:	bf01      	itttt	eq
 8005b48:	6819      	ldreq	r1, [r3, #0]
 8005b4a:	685b      	ldreq	r3, [r3, #4]
 8005b4c:	1809      	addeq	r1, r1, r0
 8005b4e:	6021      	streq	r1, [r4, #0]
 8005b50:	e7ed      	b.n	8005b2e <_free_r+0x1e>
 8005b52:	461a      	mov	r2, r3
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	b10b      	cbz	r3, 8005b5c <_free_r+0x4c>
 8005b58:	42a3      	cmp	r3, r4
 8005b5a:	d9fa      	bls.n	8005b52 <_free_r+0x42>
 8005b5c:	6811      	ldr	r1, [r2, #0]
 8005b5e:	1850      	adds	r0, r2, r1
 8005b60:	42a0      	cmp	r0, r4
 8005b62:	d10b      	bne.n	8005b7c <_free_r+0x6c>
 8005b64:	6820      	ldr	r0, [r4, #0]
 8005b66:	4401      	add	r1, r0
 8005b68:	1850      	adds	r0, r2, r1
 8005b6a:	4283      	cmp	r3, r0
 8005b6c:	6011      	str	r1, [r2, #0]
 8005b6e:	d1e0      	bne.n	8005b32 <_free_r+0x22>
 8005b70:	6818      	ldr	r0, [r3, #0]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	6053      	str	r3, [r2, #4]
 8005b76:	4408      	add	r0, r1
 8005b78:	6010      	str	r0, [r2, #0]
 8005b7a:	e7da      	b.n	8005b32 <_free_r+0x22>
 8005b7c:	d902      	bls.n	8005b84 <_free_r+0x74>
 8005b7e:	230c      	movs	r3, #12
 8005b80:	602b      	str	r3, [r5, #0]
 8005b82:	e7d6      	b.n	8005b32 <_free_r+0x22>
 8005b84:	6820      	ldr	r0, [r4, #0]
 8005b86:	1821      	adds	r1, r4, r0
 8005b88:	428b      	cmp	r3, r1
 8005b8a:	bf04      	itt	eq
 8005b8c:	6819      	ldreq	r1, [r3, #0]
 8005b8e:	685b      	ldreq	r3, [r3, #4]
 8005b90:	6063      	str	r3, [r4, #4]
 8005b92:	bf04      	itt	eq
 8005b94:	1809      	addeq	r1, r1, r0
 8005b96:	6021      	streq	r1, [r4, #0]
 8005b98:	6054      	str	r4, [r2, #4]
 8005b9a:	e7ca      	b.n	8005b32 <_free_r+0x22>
 8005b9c:	bd38      	pop	{r3, r4, r5, pc}
 8005b9e:	bf00      	nop
 8005ba0:	200004b0 	.word	0x200004b0

08005ba4 <sbrk_aligned>:
 8005ba4:	b570      	push	{r4, r5, r6, lr}
 8005ba6:	4e0f      	ldr	r6, [pc, #60]	@ (8005be4 <sbrk_aligned+0x40>)
 8005ba8:	460c      	mov	r4, r1
 8005baa:	6831      	ldr	r1, [r6, #0]
 8005bac:	4605      	mov	r5, r0
 8005bae:	b911      	cbnz	r1, 8005bb6 <sbrk_aligned+0x12>
 8005bb0:	f000 fba4 	bl	80062fc <_sbrk_r>
 8005bb4:	6030      	str	r0, [r6, #0]
 8005bb6:	4621      	mov	r1, r4
 8005bb8:	4628      	mov	r0, r5
 8005bba:	f000 fb9f 	bl	80062fc <_sbrk_r>
 8005bbe:	1c43      	adds	r3, r0, #1
 8005bc0:	d103      	bne.n	8005bca <sbrk_aligned+0x26>
 8005bc2:	f04f 34ff 	mov.w	r4, #4294967295
 8005bc6:	4620      	mov	r0, r4
 8005bc8:	bd70      	pop	{r4, r5, r6, pc}
 8005bca:	1cc4      	adds	r4, r0, #3
 8005bcc:	f024 0403 	bic.w	r4, r4, #3
 8005bd0:	42a0      	cmp	r0, r4
 8005bd2:	d0f8      	beq.n	8005bc6 <sbrk_aligned+0x22>
 8005bd4:	1a21      	subs	r1, r4, r0
 8005bd6:	4628      	mov	r0, r5
 8005bd8:	f000 fb90 	bl	80062fc <_sbrk_r>
 8005bdc:	3001      	adds	r0, #1
 8005bde:	d1f2      	bne.n	8005bc6 <sbrk_aligned+0x22>
 8005be0:	e7ef      	b.n	8005bc2 <sbrk_aligned+0x1e>
 8005be2:	bf00      	nop
 8005be4:	200004ac 	.word	0x200004ac

08005be8 <_malloc_r>:
 8005be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bec:	1ccd      	adds	r5, r1, #3
 8005bee:	f025 0503 	bic.w	r5, r5, #3
 8005bf2:	3508      	adds	r5, #8
 8005bf4:	2d0c      	cmp	r5, #12
 8005bf6:	bf38      	it	cc
 8005bf8:	250c      	movcc	r5, #12
 8005bfa:	2d00      	cmp	r5, #0
 8005bfc:	4606      	mov	r6, r0
 8005bfe:	db01      	blt.n	8005c04 <_malloc_r+0x1c>
 8005c00:	42a9      	cmp	r1, r5
 8005c02:	d904      	bls.n	8005c0e <_malloc_r+0x26>
 8005c04:	230c      	movs	r3, #12
 8005c06:	6033      	str	r3, [r6, #0]
 8005c08:	2000      	movs	r0, #0
 8005c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005ce4 <_malloc_r+0xfc>
 8005c12:	f000 f869 	bl	8005ce8 <__malloc_lock>
 8005c16:	f8d8 3000 	ldr.w	r3, [r8]
 8005c1a:	461c      	mov	r4, r3
 8005c1c:	bb44      	cbnz	r4, 8005c70 <_malloc_r+0x88>
 8005c1e:	4629      	mov	r1, r5
 8005c20:	4630      	mov	r0, r6
 8005c22:	f7ff ffbf 	bl	8005ba4 <sbrk_aligned>
 8005c26:	1c43      	adds	r3, r0, #1
 8005c28:	4604      	mov	r4, r0
 8005c2a:	d158      	bne.n	8005cde <_malloc_r+0xf6>
 8005c2c:	f8d8 4000 	ldr.w	r4, [r8]
 8005c30:	4627      	mov	r7, r4
 8005c32:	2f00      	cmp	r7, #0
 8005c34:	d143      	bne.n	8005cbe <_malloc_r+0xd6>
 8005c36:	2c00      	cmp	r4, #0
 8005c38:	d04b      	beq.n	8005cd2 <_malloc_r+0xea>
 8005c3a:	6823      	ldr	r3, [r4, #0]
 8005c3c:	4639      	mov	r1, r7
 8005c3e:	4630      	mov	r0, r6
 8005c40:	eb04 0903 	add.w	r9, r4, r3
 8005c44:	f000 fb5a 	bl	80062fc <_sbrk_r>
 8005c48:	4581      	cmp	r9, r0
 8005c4a:	d142      	bne.n	8005cd2 <_malloc_r+0xea>
 8005c4c:	6821      	ldr	r1, [r4, #0]
 8005c4e:	1a6d      	subs	r5, r5, r1
 8005c50:	4629      	mov	r1, r5
 8005c52:	4630      	mov	r0, r6
 8005c54:	f7ff ffa6 	bl	8005ba4 <sbrk_aligned>
 8005c58:	3001      	adds	r0, #1
 8005c5a:	d03a      	beq.n	8005cd2 <_malloc_r+0xea>
 8005c5c:	6823      	ldr	r3, [r4, #0]
 8005c5e:	442b      	add	r3, r5
 8005c60:	6023      	str	r3, [r4, #0]
 8005c62:	f8d8 3000 	ldr.w	r3, [r8]
 8005c66:	685a      	ldr	r2, [r3, #4]
 8005c68:	bb62      	cbnz	r2, 8005cc4 <_malloc_r+0xdc>
 8005c6a:	f8c8 7000 	str.w	r7, [r8]
 8005c6e:	e00f      	b.n	8005c90 <_malloc_r+0xa8>
 8005c70:	6822      	ldr	r2, [r4, #0]
 8005c72:	1b52      	subs	r2, r2, r5
 8005c74:	d420      	bmi.n	8005cb8 <_malloc_r+0xd0>
 8005c76:	2a0b      	cmp	r2, #11
 8005c78:	d917      	bls.n	8005caa <_malloc_r+0xc2>
 8005c7a:	1961      	adds	r1, r4, r5
 8005c7c:	42a3      	cmp	r3, r4
 8005c7e:	6025      	str	r5, [r4, #0]
 8005c80:	bf18      	it	ne
 8005c82:	6059      	strne	r1, [r3, #4]
 8005c84:	6863      	ldr	r3, [r4, #4]
 8005c86:	bf08      	it	eq
 8005c88:	f8c8 1000 	streq.w	r1, [r8]
 8005c8c:	5162      	str	r2, [r4, r5]
 8005c8e:	604b      	str	r3, [r1, #4]
 8005c90:	4630      	mov	r0, r6
 8005c92:	f000 f82f 	bl	8005cf4 <__malloc_unlock>
 8005c96:	f104 000b 	add.w	r0, r4, #11
 8005c9a:	1d23      	adds	r3, r4, #4
 8005c9c:	f020 0007 	bic.w	r0, r0, #7
 8005ca0:	1ac2      	subs	r2, r0, r3
 8005ca2:	bf1c      	itt	ne
 8005ca4:	1a1b      	subne	r3, r3, r0
 8005ca6:	50a3      	strne	r3, [r4, r2]
 8005ca8:	e7af      	b.n	8005c0a <_malloc_r+0x22>
 8005caa:	6862      	ldr	r2, [r4, #4]
 8005cac:	42a3      	cmp	r3, r4
 8005cae:	bf0c      	ite	eq
 8005cb0:	f8c8 2000 	streq.w	r2, [r8]
 8005cb4:	605a      	strne	r2, [r3, #4]
 8005cb6:	e7eb      	b.n	8005c90 <_malloc_r+0xa8>
 8005cb8:	4623      	mov	r3, r4
 8005cba:	6864      	ldr	r4, [r4, #4]
 8005cbc:	e7ae      	b.n	8005c1c <_malloc_r+0x34>
 8005cbe:	463c      	mov	r4, r7
 8005cc0:	687f      	ldr	r7, [r7, #4]
 8005cc2:	e7b6      	b.n	8005c32 <_malloc_r+0x4a>
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	42a3      	cmp	r3, r4
 8005cca:	d1fb      	bne.n	8005cc4 <_malloc_r+0xdc>
 8005ccc:	2300      	movs	r3, #0
 8005cce:	6053      	str	r3, [r2, #4]
 8005cd0:	e7de      	b.n	8005c90 <_malloc_r+0xa8>
 8005cd2:	230c      	movs	r3, #12
 8005cd4:	6033      	str	r3, [r6, #0]
 8005cd6:	4630      	mov	r0, r6
 8005cd8:	f000 f80c 	bl	8005cf4 <__malloc_unlock>
 8005cdc:	e794      	b.n	8005c08 <_malloc_r+0x20>
 8005cde:	6005      	str	r5, [r0, #0]
 8005ce0:	e7d6      	b.n	8005c90 <_malloc_r+0xa8>
 8005ce2:	bf00      	nop
 8005ce4:	200004b0 	.word	0x200004b0

08005ce8 <__malloc_lock>:
 8005ce8:	4801      	ldr	r0, [pc, #4]	@ (8005cf0 <__malloc_lock+0x8>)
 8005cea:	f7ff bf0f 	b.w	8005b0c <__retarget_lock_acquire_recursive>
 8005cee:	bf00      	nop
 8005cf0:	200004a8 	.word	0x200004a8

08005cf4 <__malloc_unlock>:
 8005cf4:	4801      	ldr	r0, [pc, #4]	@ (8005cfc <__malloc_unlock+0x8>)
 8005cf6:	f7ff bf0a 	b.w	8005b0e <__retarget_lock_release_recursive>
 8005cfa:	bf00      	nop
 8005cfc:	200004a8 	.word	0x200004a8

08005d00 <__ssputs_r>:
 8005d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d04:	688e      	ldr	r6, [r1, #8]
 8005d06:	461f      	mov	r7, r3
 8005d08:	42be      	cmp	r6, r7
 8005d0a:	680b      	ldr	r3, [r1, #0]
 8005d0c:	4682      	mov	sl, r0
 8005d0e:	460c      	mov	r4, r1
 8005d10:	4690      	mov	r8, r2
 8005d12:	d82d      	bhi.n	8005d70 <__ssputs_r+0x70>
 8005d14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d18:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005d1c:	d026      	beq.n	8005d6c <__ssputs_r+0x6c>
 8005d1e:	6965      	ldr	r5, [r4, #20]
 8005d20:	6909      	ldr	r1, [r1, #16]
 8005d22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d26:	eba3 0901 	sub.w	r9, r3, r1
 8005d2a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d2e:	1c7b      	adds	r3, r7, #1
 8005d30:	444b      	add	r3, r9
 8005d32:	106d      	asrs	r5, r5, #1
 8005d34:	429d      	cmp	r5, r3
 8005d36:	bf38      	it	cc
 8005d38:	461d      	movcc	r5, r3
 8005d3a:	0553      	lsls	r3, r2, #21
 8005d3c:	d527      	bpl.n	8005d8e <__ssputs_r+0x8e>
 8005d3e:	4629      	mov	r1, r5
 8005d40:	f7ff ff52 	bl	8005be8 <_malloc_r>
 8005d44:	4606      	mov	r6, r0
 8005d46:	b360      	cbz	r0, 8005da2 <__ssputs_r+0xa2>
 8005d48:	6921      	ldr	r1, [r4, #16]
 8005d4a:	464a      	mov	r2, r9
 8005d4c:	f000 fae6 	bl	800631c <memcpy>
 8005d50:	89a3      	ldrh	r3, [r4, #12]
 8005d52:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005d56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d5a:	81a3      	strh	r3, [r4, #12]
 8005d5c:	6126      	str	r6, [r4, #16]
 8005d5e:	6165      	str	r5, [r4, #20]
 8005d60:	444e      	add	r6, r9
 8005d62:	eba5 0509 	sub.w	r5, r5, r9
 8005d66:	6026      	str	r6, [r4, #0]
 8005d68:	60a5      	str	r5, [r4, #8]
 8005d6a:	463e      	mov	r6, r7
 8005d6c:	42be      	cmp	r6, r7
 8005d6e:	d900      	bls.n	8005d72 <__ssputs_r+0x72>
 8005d70:	463e      	mov	r6, r7
 8005d72:	6820      	ldr	r0, [r4, #0]
 8005d74:	4632      	mov	r2, r6
 8005d76:	4641      	mov	r1, r8
 8005d78:	f000 faa6 	bl	80062c8 <memmove>
 8005d7c:	68a3      	ldr	r3, [r4, #8]
 8005d7e:	1b9b      	subs	r3, r3, r6
 8005d80:	60a3      	str	r3, [r4, #8]
 8005d82:	6823      	ldr	r3, [r4, #0]
 8005d84:	4433      	add	r3, r6
 8005d86:	6023      	str	r3, [r4, #0]
 8005d88:	2000      	movs	r0, #0
 8005d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d8e:	462a      	mov	r2, r5
 8005d90:	f000 fad2 	bl	8006338 <_realloc_r>
 8005d94:	4606      	mov	r6, r0
 8005d96:	2800      	cmp	r0, #0
 8005d98:	d1e0      	bne.n	8005d5c <__ssputs_r+0x5c>
 8005d9a:	6921      	ldr	r1, [r4, #16]
 8005d9c:	4650      	mov	r0, sl
 8005d9e:	f7ff feb7 	bl	8005b10 <_free_r>
 8005da2:	230c      	movs	r3, #12
 8005da4:	f8ca 3000 	str.w	r3, [sl]
 8005da8:	89a3      	ldrh	r3, [r4, #12]
 8005daa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005dae:	81a3      	strh	r3, [r4, #12]
 8005db0:	f04f 30ff 	mov.w	r0, #4294967295
 8005db4:	e7e9      	b.n	8005d8a <__ssputs_r+0x8a>
	...

08005db8 <_svfiprintf_r>:
 8005db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dbc:	4698      	mov	r8, r3
 8005dbe:	898b      	ldrh	r3, [r1, #12]
 8005dc0:	061b      	lsls	r3, r3, #24
 8005dc2:	b09d      	sub	sp, #116	@ 0x74
 8005dc4:	4607      	mov	r7, r0
 8005dc6:	460d      	mov	r5, r1
 8005dc8:	4614      	mov	r4, r2
 8005dca:	d510      	bpl.n	8005dee <_svfiprintf_r+0x36>
 8005dcc:	690b      	ldr	r3, [r1, #16]
 8005dce:	b973      	cbnz	r3, 8005dee <_svfiprintf_r+0x36>
 8005dd0:	2140      	movs	r1, #64	@ 0x40
 8005dd2:	f7ff ff09 	bl	8005be8 <_malloc_r>
 8005dd6:	6028      	str	r0, [r5, #0]
 8005dd8:	6128      	str	r0, [r5, #16]
 8005dda:	b930      	cbnz	r0, 8005dea <_svfiprintf_r+0x32>
 8005ddc:	230c      	movs	r3, #12
 8005dde:	603b      	str	r3, [r7, #0]
 8005de0:	f04f 30ff 	mov.w	r0, #4294967295
 8005de4:	b01d      	add	sp, #116	@ 0x74
 8005de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dea:	2340      	movs	r3, #64	@ 0x40
 8005dec:	616b      	str	r3, [r5, #20]
 8005dee:	2300      	movs	r3, #0
 8005df0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005df2:	2320      	movs	r3, #32
 8005df4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005df8:	f8cd 800c 	str.w	r8, [sp, #12]
 8005dfc:	2330      	movs	r3, #48	@ 0x30
 8005dfe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005f9c <_svfiprintf_r+0x1e4>
 8005e02:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e06:	f04f 0901 	mov.w	r9, #1
 8005e0a:	4623      	mov	r3, r4
 8005e0c:	469a      	mov	sl, r3
 8005e0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e12:	b10a      	cbz	r2, 8005e18 <_svfiprintf_r+0x60>
 8005e14:	2a25      	cmp	r2, #37	@ 0x25
 8005e16:	d1f9      	bne.n	8005e0c <_svfiprintf_r+0x54>
 8005e18:	ebba 0b04 	subs.w	fp, sl, r4
 8005e1c:	d00b      	beq.n	8005e36 <_svfiprintf_r+0x7e>
 8005e1e:	465b      	mov	r3, fp
 8005e20:	4622      	mov	r2, r4
 8005e22:	4629      	mov	r1, r5
 8005e24:	4638      	mov	r0, r7
 8005e26:	f7ff ff6b 	bl	8005d00 <__ssputs_r>
 8005e2a:	3001      	adds	r0, #1
 8005e2c:	f000 80a7 	beq.w	8005f7e <_svfiprintf_r+0x1c6>
 8005e30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e32:	445a      	add	r2, fp
 8005e34:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e36:	f89a 3000 	ldrb.w	r3, [sl]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f000 809f 	beq.w	8005f7e <_svfiprintf_r+0x1c6>
 8005e40:	2300      	movs	r3, #0
 8005e42:	f04f 32ff 	mov.w	r2, #4294967295
 8005e46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e4a:	f10a 0a01 	add.w	sl, sl, #1
 8005e4e:	9304      	str	r3, [sp, #16]
 8005e50:	9307      	str	r3, [sp, #28]
 8005e52:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e56:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e58:	4654      	mov	r4, sl
 8005e5a:	2205      	movs	r2, #5
 8005e5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e60:	484e      	ldr	r0, [pc, #312]	@ (8005f9c <_svfiprintf_r+0x1e4>)
 8005e62:	f7fa f9bd 	bl	80001e0 <memchr>
 8005e66:	9a04      	ldr	r2, [sp, #16]
 8005e68:	b9d8      	cbnz	r0, 8005ea2 <_svfiprintf_r+0xea>
 8005e6a:	06d0      	lsls	r0, r2, #27
 8005e6c:	bf44      	itt	mi
 8005e6e:	2320      	movmi	r3, #32
 8005e70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e74:	0711      	lsls	r1, r2, #28
 8005e76:	bf44      	itt	mi
 8005e78:	232b      	movmi	r3, #43	@ 0x2b
 8005e7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e7e:	f89a 3000 	ldrb.w	r3, [sl]
 8005e82:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e84:	d015      	beq.n	8005eb2 <_svfiprintf_r+0xfa>
 8005e86:	9a07      	ldr	r2, [sp, #28]
 8005e88:	4654      	mov	r4, sl
 8005e8a:	2000      	movs	r0, #0
 8005e8c:	f04f 0c0a 	mov.w	ip, #10
 8005e90:	4621      	mov	r1, r4
 8005e92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e96:	3b30      	subs	r3, #48	@ 0x30
 8005e98:	2b09      	cmp	r3, #9
 8005e9a:	d94b      	bls.n	8005f34 <_svfiprintf_r+0x17c>
 8005e9c:	b1b0      	cbz	r0, 8005ecc <_svfiprintf_r+0x114>
 8005e9e:	9207      	str	r2, [sp, #28]
 8005ea0:	e014      	b.n	8005ecc <_svfiprintf_r+0x114>
 8005ea2:	eba0 0308 	sub.w	r3, r0, r8
 8005ea6:	fa09 f303 	lsl.w	r3, r9, r3
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	9304      	str	r3, [sp, #16]
 8005eae:	46a2      	mov	sl, r4
 8005eb0:	e7d2      	b.n	8005e58 <_svfiprintf_r+0xa0>
 8005eb2:	9b03      	ldr	r3, [sp, #12]
 8005eb4:	1d19      	adds	r1, r3, #4
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	9103      	str	r1, [sp, #12]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	bfbb      	ittet	lt
 8005ebe:	425b      	neglt	r3, r3
 8005ec0:	f042 0202 	orrlt.w	r2, r2, #2
 8005ec4:	9307      	strge	r3, [sp, #28]
 8005ec6:	9307      	strlt	r3, [sp, #28]
 8005ec8:	bfb8      	it	lt
 8005eca:	9204      	strlt	r2, [sp, #16]
 8005ecc:	7823      	ldrb	r3, [r4, #0]
 8005ece:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ed0:	d10a      	bne.n	8005ee8 <_svfiprintf_r+0x130>
 8005ed2:	7863      	ldrb	r3, [r4, #1]
 8005ed4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ed6:	d132      	bne.n	8005f3e <_svfiprintf_r+0x186>
 8005ed8:	9b03      	ldr	r3, [sp, #12]
 8005eda:	1d1a      	adds	r2, r3, #4
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	9203      	str	r2, [sp, #12]
 8005ee0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005ee4:	3402      	adds	r4, #2
 8005ee6:	9305      	str	r3, [sp, #20]
 8005ee8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005fac <_svfiprintf_r+0x1f4>
 8005eec:	7821      	ldrb	r1, [r4, #0]
 8005eee:	2203      	movs	r2, #3
 8005ef0:	4650      	mov	r0, sl
 8005ef2:	f7fa f975 	bl	80001e0 <memchr>
 8005ef6:	b138      	cbz	r0, 8005f08 <_svfiprintf_r+0x150>
 8005ef8:	9b04      	ldr	r3, [sp, #16]
 8005efa:	eba0 000a 	sub.w	r0, r0, sl
 8005efe:	2240      	movs	r2, #64	@ 0x40
 8005f00:	4082      	lsls	r2, r0
 8005f02:	4313      	orrs	r3, r2
 8005f04:	3401      	adds	r4, #1
 8005f06:	9304      	str	r3, [sp, #16]
 8005f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f0c:	4824      	ldr	r0, [pc, #144]	@ (8005fa0 <_svfiprintf_r+0x1e8>)
 8005f0e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f12:	2206      	movs	r2, #6
 8005f14:	f7fa f964 	bl	80001e0 <memchr>
 8005f18:	2800      	cmp	r0, #0
 8005f1a:	d036      	beq.n	8005f8a <_svfiprintf_r+0x1d2>
 8005f1c:	4b21      	ldr	r3, [pc, #132]	@ (8005fa4 <_svfiprintf_r+0x1ec>)
 8005f1e:	bb1b      	cbnz	r3, 8005f68 <_svfiprintf_r+0x1b0>
 8005f20:	9b03      	ldr	r3, [sp, #12]
 8005f22:	3307      	adds	r3, #7
 8005f24:	f023 0307 	bic.w	r3, r3, #7
 8005f28:	3308      	adds	r3, #8
 8005f2a:	9303      	str	r3, [sp, #12]
 8005f2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f2e:	4433      	add	r3, r6
 8005f30:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f32:	e76a      	b.n	8005e0a <_svfiprintf_r+0x52>
 8005f34:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f38:	460c      	mov	r4, r1
 8005f3a:	2001      	movs	r0, #1
 8005f3c:	e7a8      	b.n	8005e90 <_svfiprintf_r+0xd8>
 8005f3e:	2300      	movs	r3, #0
 8005f40:	3401      	adds	r4, #1
 8005f42:	9305      	str	r3, [sp, #20]
 8005f44:	4619      	mov	r1, r3
 8005f46:	f04f 0c0a 	mov.w	ip, #10
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f50:	3a30      	subs	r2, #48	@ 0x30
 8005f52:	2a09      	cmp	r2, #9
 8005f54:	d903      	bls.n	8005f5e <_svfiprintf_r+0x1a6>
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d0c6      	beq.n	8005ee8 <_svfiprintf_r+0x130>
 8005f5a:	9105      	str	r1, [sp, #20]
 8005f5c:	e7c4      	b.n	8005ee8 <_svfiprintf_r+0x130>
 8005f5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f62:	4604      	mov	r4, r0
 8005f64:	2301      	movs	r3, #1
 8005f66:	e7f0      	b.n	8005f4a <_svfiprintf_r+0x192>
 8005f68:	ab03      	add	r3, sp, #12
 8005f6a:	9300      	str	r3, [sp, #0]
 8005f6c:	462a      	mov	r2, r5
 8005f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8005fa8 <_svfiprintf_r+0x1f0>)
 8005f70:	a904      	add	r1, sp, #16
 8005f72:	4638      	mov	r0, r7
 8005f74:	f3af 8000 	nop.w
 8005f78:	1c42      	adds	r2, r0, #1
 8005f7a:	4606      	mov	r6, r0
 8005f7c:	d1d6      	bne.n	8005f2c <_svfiprintf_r+0x174>
 8005f7e:	89ab      	ldrh	r3, [r5, #12]
 8005f80:	065b      	lsls	r3, r3, #25
 8005f82:	f53f af2d 	bmi.w	8005de0 <_svfiprintf_r+0x28>
 8005f86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f88:	e72c      	b.n	8005de4 <_svfiprintf_r+0x2c>
 8005f8a:	ab03      	add	r3, sp, #12
 8005f8c:	9300      	str	r3, [sp, #0]
 8005f8e:	462a      	mov	r2, r5
 8005f90:	4b05      	ldr	r3, [pc, #20]	@ (8005fa8 <_svfiprintf_r+0x1f0>)
 8005f92:	a904      	add	r1, sp, #16
 8005f94:	4638      	mov	r0, r7
 8005f96:	f000 f879 	bl	800608c <_printf_i>
 8005f9a:	e7ed      	b.n	8005f78 <_svfiprintf_r+0x1c0>
 8005f9c:	08006448 	.word	0x08006448
 8005fa0:	08006452 	.word	0x08006452
 8005fa4:	00000000 	.word	0x00000000
 8005fa8:	08005d01 	.word	0x08005d01
 8005fac:	0800644e 	.word	0x0800644e

08005fb0 <_printf_common>:
 8005fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fb4:	4616      	mov	r6, r2
 8005fb6:	4698      	mov	r8, r3
 8005fb8:	688a      	ldr	r2, [r1, #8]
 8005fba:	690b      	ldr	r3, [r1, #16]
 8005fbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	bfb8      	it	lt
 8005fc4:	4613      	movlt	r3, r2
 8005fc6:	6033      	str	r3, [r6, #0]
 8005fc8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005fcc:	4607      	mov	r7, r0
 8005fce:	460c      	mov	r4, r1
 8005fd0:	b10a      	cbz	r2, 8005fd6 <_printf_common+0x26>
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	6033      	str	r3, [r6, #0]
 8005fd6:	6823      	ldr	r3, [r4, #0]
 8005fd8:	0699      	lsls	r1, r3, #26
 8005fda:	bf42      	ittt	mi
 8005fdc:	6833      	ldrmi	r3, [r6, #0]
 8005fde:	3302      	addmi	r3, #2
 8005fe0:	6033      	strmi	r3, [r6, #0]
 8005fe2:	6825      	ldr	r5, [r4, #0]
 8005fe4:	f015 0506 	ands.w	r5, r5, #6
 8005fe8:	d106      	bne.n	8005ff8 <_printf_common+0x48>
 8005fea:	f104 0a19 	add.w	sl, r4, #25
 8005fee:	68e3      	ldr	r3, [r4, #12]
 8005ff0:	6832      	ldr	r2, [r6, #0]
 8005ff2:	1a9b      	subs	r3, r3, r2
 8005ff4:	42ab      	cmp	r3, r5
 8005ff6:	dc26      	bgt.n	8006046 <_printf_common+0x96>
 8005ff8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ffc:	6822      	ldr	r2, [r4, #0]
 8005ffe:	3b00      	subs	r3, #0
 8006000:	bf18      	it	ne
 8006002:	2301      	movne	r3, #1
 8006004:	0692      	lsls	r2, r2, #26
 8006006:	d42b      	bmi.n	8006060 <_printf_common+0xb0>
 8006008:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800600c:	4641      	mov	r1, r8
 800600e:	4638      	mov	r0, r7
 8006010:	47c8      	blx	r9
 8006012:	3001      	adds	r0, #1
 8006014:	d01e      	beq.n	8006054 <_printf_common+0xa4>
 8006016:	6823      	ldr	r3, [r4, #0]
 8006018:	6922      	ldr	r2, [r4, #16]
 800601a:	f003 0306 	and.w	r3, r3, #6
 800601e:	2b04      	cmp	r3, #4
 8006020:	bf02      	ittt	eq
 8006022:	68e5      	ldreq	r5, [r4, #12]
 8006024:	6833      	ldreq	r3, [r6, #0]
 8006026:	1aed      	subeq	r5, r5, r3
 8006028:	68a3      	ldr	r3, [r4, #8]
 800602a:	bf0c      	ite	eq
 800602c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006030:	2500      	movne	r5, #0
 8006032:	4293      	cmp	r3, r2
 8006034:	bfc4      	itt	gt
 8006036:	1a9b      	subgt	r3, r3, r2
 8006038:	18ed      	addgt	r5, r5, r3
 800603a:	2600      	movs	r6, #0
 800603c:	341a      	adds	r4, #26
 800603e:	42b5      	cmp	r5, r6
 8006040:	d11a      	bne.n	8006078 <_printf_common+0xc8>
 8006042:	2000      	movs	r0, #0
 8006044:	e008      	b.n	8006058 <_printf_common+0xa8>
 8006046:	2301      	movs	r3, #1
 8006048:	4652      	mov	r2, sl
 800604a:	4641      	mov	r1, r8
 800604c:	4638      	mov	r0, r7
 800604e:	47c8      	blx	r9
 8006050:	3001      	adds	r0, #1
 8006052:	d103      	bne.n	800605c <_printf_common+0xac>
 8006054:	f04f 30ff 	mov.w	r0, #4294967295
 8006058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800605c:	3501      	adds	r5, #1
 800605e:	e7c6      	b.n	8005fee <_printf_common+0x3e>
 8006060:	18e1      	adds	r1, r4, r3
 8006062:	1c5a      	adds	r2, r3, #1
 8006064:	2030      	movs	r0, #48	@ 0x30
 8006066:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800606a:	4422      	add	r2, r4
 800606c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006070:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006074:	3302      	adds	r3, #2
 8006076:	e7c7      	b.n	8006008 <_printf_common+0x58>
 8006078:	2301      	movs	r3, #1
 800607a:	4622      	mov	r2, r4
 800607c:	4641      	mov	r1, r8
 800607e:	4638      	mov	r0, r7
 8006080:	47c8      	blx	r9
 8006082:	3001      	adds	r0, #1
 8006084:	d0e6      	beq.n	8006054 <_printf_common+0xa4>
 8006086:	3601      	adds	r6, #1
 8006088:	e7d9      	b.n	800603e <_printf_common+0x8e>
	...

0800608c <_printf_i>:
 800608c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006090:	7e0f      	ldrb	r7, [r1, #24]
 8006092:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006094:	2f78      	cmp	r7, #120	@ 0x78
 8006096:	4691      	mov	r9, r2
 8006098:	4680      	mov	r8, r0
 800609a:	460c      	mov	r4, r1
 800609c:	469a      	mov	sl, r3
 800609e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80060a2:	d807      	bhi.n	80060b4 <_printf_i+0x28>
 80060a4:	2f62      	cmp	r7, #98	@ 0x62
 80060a6:	d80a      	bhi.n	80060be <_printf_i+0x32>
 80060a8:	2f00      	cmp	r7, #0
 80060aa:	f000 80d1 	beq.w	8006250 <_printf_i+0x1c4>
 80060ae:	2f58      	cmp	r7, #88	@ 0x58
 80060b0:	f000 80b8 	beq.w	8006224 <_printf_i+0x198>
 80060b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060bc:	e03a      	b.n	8006134 <_printf_i+0xa8>
 80060be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060c2:	2b15      	cmp	r3, #21
 80060c4:	d8f6      	bhi.n	80060b4 <_printf_i+0x28>
 80060c6:	a101      	add	r1, pc, #4	@ (adr r1, 80060cc <_printf_i+0x40>)
 80060c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060cc:	08006125 	.word	0x08006125
 80060d0:	08006139 	.word	0x08006139
 80060d4:	080060b5 	.word	0x080060b5
 80060d8:	080060b5 	.word	0x080060b5
 80060dc:	080060b5 	.word	0x080060b5
 80060e0:	080060b5 	.word	0x080060b5
 80060e4:	08006139 	.word	0x08006139
 80060e8:	080060b5 	.word	0x080060b5
 80060ec:	080060b5 	.word	0x080060b5
 80060f0:	080060b5 	.word	0x080060b5
 80060f4:	080060b5 	.word	0x080060b5
 80060f8:	08006237 	.word	0x08006237
 80060fc:	08006163 	.word	0x08006163
 8006100:	080061f1 	.word	0x080061f1
 8006104:	080060b5 	.word	0x080060b5
 8006108:	080060b5 	.word	0x080060b5
 800610c:	08006259 	.word	0x08006259
 8006110:	080060b5 	.word	0x080060b5
 8006114:	08006163 	.word	0x08006163
 8006118:	080060b5 	.word	0x080060b5
 800611c:	080060b5 	.word	0x080060b5
 8006120:	080061f9 	.word	0x080061f9
 8006124:	6833      	ldr	r3, [r6, #0]
 8006126:	1d1a      	adds	r2, r3, #4
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	6032      	str	r2, [r6, #0]
 800612c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006130:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006134:	2301      	movs	r3, #1
 8006136:	e09c      	b.n	8006272 <_printf_i+0x1e6>
 8006138:	6833      	ldr	r3, [r6, #0]
 800613a:	6820      	ldr	r0, [r4, #0]
 800613c:	1d19      	adds	r1, r3, #4
 800613e:	6031      	str	r1, [r6, #0]
 8006140:	0606      	lsls	r6, r0, #24
 8006142:	d501      	bpl.n	8006148 <_printf_i+0xbc>
 8006144:	681d      	ldr	r5, [r3, #0]
 8006146:	e003      	b.n	8006150 <_printf_i+0xc4>
 8006148:	0645      	lsls	r5, r0, #25
 800614a:	d5fb      	bpl.n	8006144 <_printf_i+0xb8>
 800614c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006150:	2d00      	cmp	r5, #0
 8006152:	da03      	bge.n	800615c <_printf_i+0xd0>
 8006154:	232d      	movs	r3, #45	@ 0x2d
 8006156:	426d      	negs	r5, r5
 8006158:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800615c:	4858      	ldr	r0, [pc, #352]	@ (80062c0 <_printf_i+0x234>)
 800615e:	230a      	movs	r3, #10
 8006160:	e011      	b.n	8006186 <_printf_i+0xfa>
 8006162:	6821      	ldr	r1, [r4, #0]
 8006164:	6833      	ldr	r3, [r6, #0]
 8006166:	0608      	lsls	r0, r1, #24
 8006168:	f853 5b04 	ldr.w	r5, [r3], #4
 800616c:	d402      	bmi.n	8006174 <_printf_i+0xe8>
 800616e:	0649      	lsls	r1, r1, #25
 8006170:	bf48      	it	mi
 8006172:	b2ad      	uxthmi	r5, r5
 8006174:	2f6f      	cmp	r7, #111	@ 0x6f
 8006176:	4852      	ldr	r0, [pc, #328]	@ (80062c0 <_printf_i+0x234>)
 8006178:	6033      	str	r3, [r6, #0]
 800617a:	bf14      	ite	ne
 800617c:	230a      	movne	r3, #10
 800617e:	2308      	moveq	r3, #8
 8006180:	2100      	movs	r1, #0
 8006182:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006186:	6866      	ldr	r6, [r4, #4]
 8006188:	60a6      	str	r6, [r4, #8]
 800618a:	2e00      	cmp	r6, #0
 800618c:	db05      	blt.n	800619a <_printf_i+0x10e>
 800618e:	6821      	ldr	r1, [r4, #0]
 8006190:	432e      	orrs	r6, r5
 8006192:	f021 0104 	bic.w	r1, r1, #4
 8006196:	6021      	str	r1, [r4, #0]
 8006198:	d04b      	beq.n	8006232 <_printf_i+0x1a6>
 800619a:	4616      	mov	r6, r2
 800619c:	fbb5 f1f3 	udiv	r1, r5, r3
 80061a0:	fb03 5711 	mls	r7, r3, r1, r5
 80061a4:	5dc7      	ldrb	r7, [r0, r7]
 80061a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061aa:	462f      	mov	r7, r5
 80061ac:	42bb      	cmp	r3, r7
 80061ae:	460d      	mov	r5, r1
 80061b0:	d9f4      	bls.n	800619c <_printf_i+0x110>
 80061b2:	2b08      	cmp	r3, #8
 80061b4:	d10b      	bne.n	80061ce <_printf_i+0x142>
 80061b6:	6823      	ldr	r3, [r4, #0]
 80061b8:	07df      	lsls	r7, r3, #31
 80061ba:	d508      	bpl.n	80061ce <_printf_i+0x142>
 80061bc:	6923      	ldr	r3, [r4, #16]
 80061be:	6861      	ldr	r1, [r4, #4]
 80061c0:	4299      	cmp	r1, r3
 80061c2:	bfde      	ittt	le
 80061c4:	2330      	movle	r3, #48	@ 0x30
 80061c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061ce:	1b92      	subs	r2, r2, r6
 80061d0:	6122      	str	r2, [r4, #16]
 80061d2:	f8cd a000 	str.w	sl, [sp]
 80061d6:	464b      	mov	r3, r9
 80061d8:	aa03      	add	r2, sp, #12
 80061da:	4621      	mov	r1, r4
 80061dc:	4640      	mov	r0, r8
 80061de:	f7ff fee7 	bl	8005fb0 <_printf_common>
 80061e2:	3001      	adds	r0, #1
 80061e4:	d14a      	bne.n	800627c <_printf_i+0x1f0>
 80061e6:	f04f 30ff 	mov.w	r0, #4294967295
 80061ea:	b004      	add	sp, #16
 80061ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061f0:	6823      	ldr	r3, [r4, #0]
 80061f2:	f043 0320 	orr.w	r3, r3, #32
 80061f6:	6023      	str	r3, [r4, #0]
 80061f8:	4832      	ldr	r0, [pc, #200]	@ (80062c4 <_printf_i+0x238>)
 80061fa:	2778      	movs	r7, #120	@ 0x78
 80061fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006200:	6823      	ldr	r3, [r4, #0]
 8006202:	6831      	ldr	r1, [r6, #0]
 8006204:	061f      	lsls	r7, r3, #24
 8006206:	f851 5b04 	ldr.w	r5, [r1], #4
 800620a:	d402      	bmi.n	8006212 <_printf_i+0x186>
 800620c:	065f      	lsls	r7, r3, #25
 800620e:	bf48      	it	mi
 8006210:	b2ad      	uxthmi	r5, r5
 8006212:	6031      	str	r1, [r6, #0]
 8006214:	07d9      	lsls	r1, r3, #31
 8006216:	bf44      	itt	mi
 8006218:	f043 0320 	orrmi.w	r3, r3, #32
 800621c:	6023      	strmi	r3, [r4, #0]
 800621e:	b11d      	cbz	r5, 8006228 <_printf_i+0x19c>
 8006220:	2310      	movs	r3, #16
 8006222:	e7ad      	b.n	8006180 <_printf_i+0xf4>
 8006224:	4826      	ldr	r0, [pc, #152]	@ (80062c0 <_printf_i+0x234>)
 8006226:	e7e9      	b.n	80061fc <_printf_i+0x170>
 8006228:	6823      	ldr	r3, [r4, #0]
 800622a:	f023 0320 	bic.w	r3, r3, #32
 800622e:	6023      	str	r3, [r4, #0]
 8006230:	e7f6      	b.n	8006220 <_printf_i+0x194>
 8006232:	4616      	mov	r6, r2
 8006234:	e7bd      	b.n	80061b2 <_printf_i+0x126>
 8006236:	6833      	ldr	r3, [r6, #0]
 8006238:	6825      	ldr	r5, [r4, #0]
 800623a:	6961      	ldr	r1, [r4, #20]
 800623c:	1d18      	adds	r0, r3, #4
 800623e:	6030      	str	r0, [r6, #0]
 8006240:	062e      	lsls	r6, r5, #24
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	d501      	bpl.n	800624a <_printf_i+0x1be>
 8006246:	6019      	str	r1, [r3, #0]
 8006248:	e002      	b.n	8006250 <_printf_i+0x1c4>
 800624a:	0668      	lsls	r0, r5, #25
 800624c:	d5fb      	bpl.n	8006246 <_printf_i+0x1ba>
 800624e:	8019      	strh	r1, [r3, #0]
 8006250:	2300      	movs	r3, #0
 8006252:	6123      	str	r3, [r4, #16]
 8006254:	4616      	mov	r6, r2
 8006256:	e7bc      	b.n	80061d2 <_printf_i+0x146>
 8006258:	6833      	ldr	r3, [r6, #0]
 800625a:	1d1a      	adds	r2, r3, #4
 800625c:	6032      	str	r2, [r6, #0]
 800625e:	681e      	ldr	r6, [r3, #0]
 8006260:	6862      	ldr	r2, [r4, #4]
 8006262:	2100      	movs	r1, #0
 8006264:	4630      	mov	r0, r6
 8006266:	f7f9 ffbb 	bl	80001e0 <memchr>
 800626a:	b108      	cbz	r0, 8006270 <_printf_i+0x1e4>
 800626c:	1b80      	subs	r0, r0, r6
 800626e:	6060      	str	r0, [r4, #4]
 8006270:	6863      	ldr	r3, [r4, #4]
 8006272:	6123      	str	r3, [r4, #16]
 8006274:	2300      	movs	r3, #0
 8006276:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800627a:	e7aa      	b.n	80061d2 <_printf_i+0x146>
 800627c:	6923      	ldr	r3, [r4, #16]
 800627e:	4632      	mov	r2, r6
 8006280:	4649      	mov	r1, r9
 8006282:	4640      	mov	r0, r8
 8006284:	47d0      	blx	sl
 8006286:	3001      	adds	r0, #1
 8006288:	d0ad      	beq.n	80061e6 <_printf_i+0x15a>
 800628a:	6823      	ldr	r3, [r4, #0]
 800628c:	079b      	lsls	r3, r3, #30
 800628e:	d413      	bmi.n	80062b8 <_printf_i+0x22c>
 8006290:	68e0      	ldr	r0, [r4, #12]
 8006292:	9b03      	ldr	r3, [sp, #12]
 8006294:	4298      	cmp	r0, r3
 8006296:	bfb8      	it	lt
 8006298:	4618      	movlt	r0, r3
 800629a:	e7a6      	b.n	80061ea <_printf_i+0x15e>
 800629c:	2301      	movs	r3, #1
 800629e:	4632      	mov	r2, r6
 80062a0:	4649      	mov	r1, r9
 80062a2:	4640      	mov	r0, r8
 80062a4:	47d0      	blx	sl
 80062a6:	3001      	adds	r0, #1
 80062a8:	d09d      	beq.n	80061e6 <_printf_i+0x15a>
 80062aa:	3501      	adds	r5, #1
 80062ac:	68e3      	ldr	r3, [r4, #12]
 80062ae:	9903      	ldr	r1, [sp, #12]
 80062b0:	1a5b      	subs	r3, r3, r1
 80062b2:	42ab      	cmp	r3, r5
 80062b4:	dcf2      	bgt.n	800629c <_printf_i+0x210>
 80062b6:	e7eb      	b.n	8006290 <_printf_i+0x204>
 80062b8:	2500      	movs	r5, #0
 80062ba:	f104 0619 	add.w	r6, r4, #25
 80062be:	e7f5      	b.n	80062ac <_printf_i+0x220>
 80062c0:	08006459 	.word	0x08006459
 80062c4:	0800646a 	.word	0x0800646a

080062c8 <memmove>:
 80062c8:	4288      	cmp	r0, r1
 80062ca:	b510      	push	{r4, lr}
 80062cc:	eb01 0402 	add.w	r4, r1, r2
 80062d0:	d902      	bls.n	80062d8 <memmove+0x10>
 80062d2:	4284      	cmp	r4, r0
 80062d4:	4623      	mov	r3, r4
 80062d6:	d807      	bhi.n	80062e8 <memmove+0x20>
 80062d8:	1e43      	subs	r3, r0, #1
 80062da:	42a1      	cmp	r1, r4
 80062dc:	d008      	beq.n	80062f0 <memmove+0x28>
 80062de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80062e6:	e7f8      	b.n	80062da <memmove+0x12>
 80062e8:	4402      	add	r2, r0
 80062ea:	4601      	mov	r1, r0
 80062ec:	428a      	cmp	r2, r1
 80062ee:	d100      	bne.n	80062f2 <memmove+0x2a>
 80062f0:	bd10      	pop	{r4, pc}
 80062f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80062f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80062fa:	e7f7      	b.n	80062ec <memmove+0x24>

080062fc <_sbrk_r>:
 80062fc:	b538      	push	{r3, r4, r5, lr}
 80062fe:	4d06      	ldr	r5, [pc, #24]	@ (8006318 <_sbrk_r+0x1c>)
 8006300:	2300      	movs	r3, #0
 8006302:	4604      	mov	r4, r0
 8006304:	4608      	mov	r0, r1
 8006306:	602b      	str	r3, [r5, #0]
 8006308:	f7fa fb62 	bl	80009d0 <_sbrk>
 800630c:	1c43      	adds	r3, r0, #1
 800630e:	d102      	bne.n	8006316 <_sbrk_r+0x1a>
 8006310:	682b      	ldr	r3, [r5, #0]
 8006312:	b103      	cbz	r3, 8006316 <_sbrk_r+0x1a>
 8006314:	6023      	str	r3, [r4, #0]
 8006316:	bd38      	pop	{r3, r4, r5, pc}
 8006318:	200004a4 	.word	0x200004a4

0800631c <memcpy>:
 800631c:	440a      	add	r2, r1
 800631e:	4291      	cmp	r1, r2
 8006320:	f100 33ff 	add.w	r3, r0, #4294967295
 8006324:	d100      	bne.n	8006328 <memcpy+0xc>
 8006326:	4770      	bx	lr
 8006328:	b510      	push	{r4, lr}
 800632a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800632e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006332:	4291      	cmp	r1, r2
 8006334:	d1f9      	bne.n	800632a <memcpy+0xe>
 8006336:	bd10      	pop	{r4, pc}

08006338 <_realloc_r>:
 8006338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800633c:	4607      	mov	r7, r0
 800633e:	4614      	mov	r4, r2
 8006340:	460d      	mov	r5, r1
 8006342:	b921      	cbnz	r1, 800634e <_realloc_r+0x16>
 8006344:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006348:	4611      	mov	r1, r2
 800634a:	f7ff bc4d 	b.w	8005be8 <_malloc_r>
 800634e:	b92a      	cbnz	r2, 800635c <_realloc_r+0x24>
 8006350:	f7ff fbde 	bl	8005b10 <_free_r>
 8006354:	4625      	mov	r5, r4
 8006356:	4628      	mov	r0, r5
 8006358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800635c:	f000 f81a 	bl	8006394 <_malloc_usable_size_r>
 8006360:	4284      	cmp	r4, r0
 8006362:	4606      	mov	r6, r0
 8006364:	d802      	bhi.n	800636c <_realloc_r+0x34>
 8006366:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800636a:	d8f4      	bhi.n	8006356 <_realloc_r+0x1e>
 800636c:	4621      	mov	r1, r4
 800636e:	4638      	mov	r0, r7
 8006370:	f7ff fc3a 	bl	8005be8 <_malloc_r>
 8006374:	4680      	mov	r8, r0
 8006376:	b908      	cbnz	r0, 800637c <_realloc_r+0x44>
 8006378:	4645      	mov	r5, r8
 800637a:	e7ec      	b.n	8006356 <_realloc_r+0x1e>
 800637c:	42b4      	cmp	r4, r6
 800637e:	4622      	mov	r2, r4
 8006380:	4629      	mov	r1, r5
 8006382:	bf28      	it	cs
 8006384:	4632      	movcs	r2, r6
 8006386:	f7ff ffc9 	bl	800631c <memcpy>
 800638a:	4629      	mov	r1, r5
 800638c:	4638      	mov	r0, r7
 800638e:	f7ff fbbf 	bl	8005b10 <_free_r>
 8006392:	e7f1      	b.n	8006378 <_realloc_r+0x40>

08006394 <_malloc_usable_size_r>:
 8006394:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006398:	1f18      	subs	r0, r3, #4
 800639a:	2b00      	cmp	r3, #0
 800639c:	bfbc      	itt	lt
 800639e:	580b      	ldrlt	r3, [r1, r0]
 80063a0:	18c0      	addlt	r0, r0, r3
 80063a2:	4770      	bx	lr

080063a4 <_init>:
 80063a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063a6:	bf00      	nop
 80063a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063aa:	bc08      	pop	{r3}
 80063ac:	469e      	mov	lr, r3
 80063ae:	4770      	bx	lr

080063b0 <_fini>:
 80063b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063b2:	bf00      	nop
 80063b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063b6:	bc08      	pop	{r3}
 80063b8:	469e      	mov	lr, r3
 80063ba:	4770      	bx	lr
