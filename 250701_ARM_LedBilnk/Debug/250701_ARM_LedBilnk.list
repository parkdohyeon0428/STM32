
250701_ARM_LedBilnk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003450  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  080035f0  080035f0  000045f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036a4  080036a4  00005060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080036a4  080036a4  000046a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036ac  080036ac  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036ac  080036ac  000046ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080036b0  080036b0  000046b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080036b4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041ac  20000060  08003714  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000420c  08003714  0000520c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f303  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026c2  00000000  00000000  00014393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  00016a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000afc  00000000  00000000  000178a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017835  00000000  00000000  000183a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f8f1  00000000  00000000  0002fbd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093fa8  00000000  00000000  0003f4ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d3472  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003da4  00000000  00000000  000d34b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000d725c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080035d8 	.word	0x080035d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	080035d8 	.word	0x080035d8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b988 	b.w	8000508 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	468e      	mov	lr, r1
 8000218:	4604      	mov	r4, r0
 800021a:	4688      	mov	r8, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d962      	bls.n	80002ec <__udivmoddi4+0xdc>
 8000226:	fab2 f682 	clz	r6, r2
 800022a:	b14e      	cbz	r6, 8000240 <__udivmoddi4+0x30>
 800022c:	f1c6 0320 	rsb	r3, r6, #32
 8000230:	fa01 f806 	lsl.w	r8, r1, r6
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	40b7      	lsls	r7, r6
 800023a:	ea43 0808 	orr.w	r8, r3, r8
 800023e:	40b4      	lsls	r4, r6
 8000240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000244:	fa1f fc87 	uxth.w	ip, r7
 8000248:	fbb8 f1fe 	udiv	r1, r8, lr
 800024c:	0c23      	lsrs	r3, r4, #16
 800024e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000252:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000256:	fb01 f20c 	mul.w	r2, r1, ip
 800025a:	429a      	cmp	r2, r3
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0x62>
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	f101 30ff 	add.w	r0, r1, #4294967295
 8000264:	f080 80ea 	bcs.w	800043c <__udivmoddi4+0x22c>
 8000268:	429a      	cmp	r2, r3
 800026a:	f240 80e7 	bls.w	800043c <__udivmoddi4+0x22c>
 800026e:	3902      	subs	r1, #2
 8000270:	443b      	add	r3, r7
 8000272:	1a9a      	subs	r2, r3, r2
 8000274:	b2a3      	uxth	r3, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000282:	fb00 fc0c 	mul.w	ip, r0, ip
 8000286:	459c      	cmp	ip, r3
 8000288:	d909      	bls.n	800029e <__udivmoddi4+0x8e>
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000290:	f080 80d6 	bcs.w	8000440 <__udivmoddi4+0x230>
 8000294:	459c      	cmp	ip, r3
 8000296:	f240 80d3 	bls.w	8000440 <__udivmoddi4+0x230>
 800029a:	443b      	add	r3, r7
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a2:	eba3 030c 	sub.w	r3, r3, ip
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40f3      	lsrs	r3, r6
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xb6>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb0>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x14c>
 80002ce:	4573      	cmp	r3, lr
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xc8>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 8105 	bhi.w	80004e2 <__udivmoddi4+0x2d2>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb6e 0203 	sbc.w	r2, lr, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4690      	mov	r8, r2
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e5      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002e6:	e9c5 4800 	strd	r4, r8, [r5]
 80002ea:	e7e2      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f000 8090 	beq.w	8000412 <__udivmoddi4+0x202>
 80002f2:	fab2 f682 	clz	r6, r2
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	f040 80a4 	bne.w	8000444 <__udivmoddi4+0x234>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	0c03      	lsrs	r3, r0, #16
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	b280      	uxth	r0, r0
 8000306:	b2bc      	uxth	r4, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb2 fcfe 	udiv	ip, r2, lr
 800030e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb04 f20c 	mul.w	r2, r4, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x11e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x11c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 80e0 	bhi.w	80004ec <__udivmoddi4+0x2dc>
 800032c:	46c4      	mov	ip, r8
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	fbb3 f2fe 	udiv	r2, r3, lr
 8000334:	fb0e 3312 	mls	r3, lr, r2, r3
 8000338:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800033c:	fb02 f404 	mul.w	r4, r2, r4
 8000340:	429c      	cmp	r4, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x144>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f102 30ff 	add.w	r0, r2, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x142>
 800034c:	429c      	cmp	r4, r3
 800034e:	f200 80ca 	bhi.w	80004e6 <__udivmoddi4+0x2d6>
 8000352:	4602      	mov	r2, r0
 8000354:	1b1b      	subs	r3, r3, r4
 8000356:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x98>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa0e f401 	lsl.w	r4, lr, r1
 800036c:	fa20 f306 	lsr.w	r3, r0, r6
 8000370:	fa2e fe06 	lsr.w	lr, lr, r6
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	fa1f fc87 	uxth.w	ip, r7
 8000382:	fbbe f0f9 	udiv	r0, lr, r9
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	fb09 ee10 	mls	lr, r9, r0, lr
 800038c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000390:	fb00 fe0c 	mul.w	lr, r0, ip
 8000394:	45a6      	cmp	lr, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x1a0>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 3aff 	add.w	sl, r0, #4294967295
 80003a2:	f080 809c 	bcs.w	80004de <__udivmoddi4+0x2ce>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f240 8099 	bls.w	80004de <__udivmoddi4+0x2ce>
 80003ac:	3802      	subs	r0, #2
 80003ae:	443c      	add	r4, r7
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	fa1f fe83 	uxth.w	lr, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c8:	45a4      	cmp	ip, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1ce>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80003d2:	f080 8082 	bcs.w	80004da <__udivmoddi4+0x2ca>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d97f      	bls.n	80004da <__udivmoddi4+0x2ca>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ea:	4564      	cmp	r4, ip
 80003ec:	4673      	mov	r3, lr
 80003ee:	46e1      	mov	r9, ip
 80003f0:	d362      	bcc.n	80004b8 <__udivmoddi4+0x2a8>
 80003f2:	d05f      	beq.n	80004b4 <__udivmoddi4+0x2a4>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x1fe>
 80003f6:	ebb8 0203 	subs.w	r2, r8, r3
 80003fa:	eb64 0409 	sbc.w	r4, r4, r9
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	fa22 f301 	lsr.w	r3, r2, r1
 8000406:	431e      	orrs	r6, r3
 8000408:	40cc      	lsrs	r4, r1
 800040a:	e9c5 6400 	strd	r6, r4, [r5]
 800040e:	2100      	movs	r1, #0
 8000410:	e74f      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000412:	fbb1 fcf2 	udiv	ip, r1, r2
 8000416:	0c01      	lsrs	r1, r0, #16
 8000418:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000422:	463b      	mov	r3, r7
 8000424:	4638      	mov	r0, r7
 8000426:	463c      	mov	r4, r7
 8000428:	46b8      	mov	r8, r7
 800042a:	46be      	mov	lr, r7
 800042c:	2620      	movs	r6, #32
 800042e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000432:	eba2 0208 	sub.w	r2, r2, r8
 8000436:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043a:	e766      	b.n	800030a <__udivmoddi4+0xfa>
 800043c:	4601      	mov	r1, r0
 800043e:	e718      	b.n	8000272 <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e72c      	b.n	800029e <__udivmoddi4+0x8e>
 8000444:	f1c6 0220 	rsb	r2, r6, #32
 8000448:	fa2e f302 	lsr.w	r3, lr, r2
 800044c:	40b7      	lsls	r7, r6
 800044e:	40b1      	lsls	r1, r6
 8000450:	fa20 f202 	lsr.w	r2, r0, r2
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	430a      	orrs	r2, r1
 800045a:	fbb3 f8fe 	udiv	r8, r3, lr
 800045e:	b2bc      	uxth	r4, r7
 8000460:	fb0e 3318 	mls	r3, lr, r8, r3
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb08 f904 	mul.w	r9, r8, r4
 800046e:	40b0      	lsls	r0, r6
 8000470:	4589      	cmp	r9, r1
 8000472:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000476:	b280      	uxth	r0, r0
 8000478:	d93e      	bls.n	80004f8 <__udivmoddi4+0x2e8>
 800047a:	1879      	adds	r1, r7, r1
 800047c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000480:	d201      	bcs.n	8000486 <__udivmoddi4+0x276>
 8000482:	4589      	cmp	r9, r1
 8000484:	d81f      	bhi.n	80004c6 <__udivmoddi4+0x2b6>
 8000486:	eba1 0109 	sub.w	r1, r1, r9
 800048a:	fbb1 f9fe 	udiv	r9, r1, lr
 800048e:	fb09 f804 	mul.w	r8, r9, r4
 8000492:	fb0e 1119 	mls	r1, lr, r9, r1
 8000496:	b292      	uxth	r2, r2
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	4542      	cmp	r2, r8
 800049e:	d229      	bcs.n	80004f4 <__udivmoddi4+0x2e4>
 80004a0:	18ba      	adds	r2, r7, r2
 80004a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004a6:	d2c4      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d2c2      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004ac:	f1a9 0102 	sub.w	r1, r9, #2
 80004b0:	443a      	add	r2, r7
 80004b2:	e7be      	b.n	8000432 <__udivmoddi4+0x222>
 80004b4:	45f0      	cmp	r8, lr
 80004b6:	d29d      	bcs.n	80003f4 <__udivmoddi4+0x1e4>
 80004b8:	ebbe 0302 	subs.w	r3, lr, r2
 80004bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c0:	3801      	subs	r0, #1
 80004c2:	46e1      	mov	r9, ip
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1e4>
 80004c6:	eba7 0909 	sub.w	r9, r7, r9
 80004ca:	4449      	add	r1, r9
 80004cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d4:	fb09 f804 	mul.w	r8, r9, r4
 80004d8:	e7db      	b.n	8000492 <__udivmoddi4+0x282>
 80004da:	4673      	mov	r3, lr
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1ce>
 80004de:	4650      	mov	r0, sl
 80004e0:	e766      	b.n	80003b0 <__udivmoddi4+0x1a0>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e6fd      	b.n	80002e2 <__udivmoddi4+0xd2>
 80004e6:	443b      	add	r3, r7
 80004e8:	3a02      	subs	r2, #2
 80004ea:	e733      	b.n	8000354 <__udivmoddi4+0x144>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	443b      	add	r3, r7
 80004f2:	e71c      	b.n	800032e <__udivmoddi4+0x11e>
 80004f4:	4649      	mov	r1, r9
 80004f6:	e79c      	b.n	8000432 <__udivmoddi4+0x222>
 80004f8:	eba1 0109 	sub.w	r1, r1, r9
 80004fc:	46c4      	mov	ip, r8
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fb09 f804 	mul.w	r8, r9, r4
 8000506:	e7c4      	b.n	8000492 <__udivmoddi4+0x282>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	@ (8000538 <vApplicationGetIdleTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	@ (800053c <vApplicationGetIdleTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2280      	movs	r2, #128	@ 0x80
 8000528:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	2000007c 	.word	0x2000007c
 800053c:	2000011c 	.word	0x2000011c

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b5b0      	push	{r4, r5, r7, lr}
 8000542:	b09c      	sub	sp, #112	@ 0x70
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000546:	f000 fab5 	bl	8000ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054a:	f000 f861 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054e:	f000 f8c7 	bl	80006e0 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000552:	4b27      	ldr	r3, [pc, #156]	@ (80005f0 <main+0xb0>)
 8000554:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000558:	461d      	mov	r5, r3
 800055a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800055c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800055e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000562:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000566:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800056a:	2100      	movs	r1, #0
 800056c:	4618      	mov	r0, r3
 800056e:	f001 fce4 	bl	8001f3a <osThreadCreate>
 8000572:	4603      	mov	r3, r0
 8000574:	4a1f      	ldr	r2, [pc, #124]	@ (80005f4 <main+0xb4>)
 8000576:	6013      	str	r3, [r2, #0]

  /* definition and creation of myLED2 */
  osThreadDef(myLED2, LedTask02, osPriorityNormal, 0, 128);
 8000578:	4b1f      	ldr	r3, [pc, #124]	@ (80005f8 <main+0xb8>)
 800057a:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 800057e:	461d      	mov	r5, r3
 8000580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000584:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000588:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myLED2Handle = osThreadCreate(osThread(myLED2), NULL);
 800058c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f001 fcd1 	bl	8001f3a <osThreadCreate>
 8000598:	4603      	mov	r3, r0
 800059a:	4a18      	ldr	r2, [pc, #96]	@ (80005fc <main+0xbc>)
 800059c:	6013      	str	r3, [r2, #0]

  /* definition and creation of myLED3 */
  osThreadDef(myLED3, LedTask03, osPriorityNormal, 0, 128);
 800059e:	4b18      	ldr	r3, [pc, #96]	@ (8000600 <main+0xc0>)
 80005a0:	f107 041c 	add.w	r4, r7, #28
 80005a4:	461d      	mov	r5, r3
 80005a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myLED3Handle = osThreadCreate(osThread(myLED3), NULL);
 80005b2:	f107 031c 	add.w	r3, r7, #28
 80005b6:	2100      	movs	r1, #0
 80005b8:	4618      	mov	r0, r3
 80005ba:	f001 fcbe 	bl	8001f3a <osThreadCreate>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a10      	ldr	r2, [pc, #64]	@ (8000604 <main+0xc4>)
 80005c2:	6013      	str	r3, [r2, #0]

  /* definition and creation of myLED1 */
  osThreadDef(myLED1, LedTask01, osPriorityNormal, 0, 128);
 80005c4:	4b10      	ldr	r3, [pc, #64]	@ (8000608 <main+0xc8>)
 80005c6:	463c      	mov	r4, r7
 80005c8:	461d      	mov	r5, r3
 80005ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myLED1Handle = osThreadCreate(osThread(myLED1), NULL);
 80005d6:	463b      	mov	r3, r7
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f001 fcad 	bl	8001f3a <osThreadCreate>
 80005e0:	4603      	mov	r3, r0
 80005e2:	4a0a      	ldr	r2, [pc, #40]	@ (800060c <main+0xcc>)
 80005e4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005e6:	f001 fca1 	bl	8001f2c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ea:	bf00      	nop
 80005ec:	e7fd      	b.n	80005ea <main+0xaa>
 80005ee:	bf00      	nop
 80005f0:	080035fc 	.word	0x080035fc
 80005f4:	2000031c 	.word	0x2000031c
 80005f8:	08003620 	.word	0x08003620
 80005fc:	20000320 	.word	0x20000320
 8000600:	08003644 	.word	0x08003644
 8000604:	20000324 	.word	0x20000324
 8000608:	08003668 	.word	0x08003668
 800060c:	20000328 	.word	0x20000328

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	@ 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	2230      	movs	r2, #48	@ 0x30
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f002 fef8 	bl	8003414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	4b27      	ldr	r3, [pc, #156]	@ (80006d8 <SystemClock_Config+0xc8>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063c:	4a26      	ldr	r2, [pc, #152]	@ (80006d8 <SystemClock_Config+0xc8>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	@ 0x40
 8000644:	4b24      	ldr	r3, [pc, #144]	@ (80006d8 <SystemClock_Config+0xc8>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	4b21      	ldr	r3, [pc, #132]	@ (80006dc <SystemClock_Config+0xcc>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a20      	ldr	r2, [pc, #128]	@ (80006dc <SystemClock_Config+0xcc>)
 800065a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4b1e      	ldr	r3, [pc, #120]	@ (80006dc <SystemClock_Config+0xcc>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800066c:	2301      	movs	r3, #1
 800066e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000670:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000674:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800067e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000680:	2304      	movs	r3, #4
 8000682:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000684:	2364      	movs	r3, #100	@ 0x64
 8000686:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000688:	2302      	movs	r3, #2
 800068a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800068c:	2304      	movs	r3, #4
 800068e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 0320 	add.w	r3, r7, #32
 8000694:	4618      	mov	r0, r3
 8000696:	f000 fd0d 	bl	80010b4 <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a0:	f000 f902 	bl	80008a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a8:	2302      	movs	r3, #2
 80006aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006ba:	f107 030c 	add.w	r3, r7, #12
 80006be:	2103      	movs	r1, #3
 80006c0:	4618      	mov	r0, r3
 80006c2:	f000 ff6f 	bl	80015a4 <HAL_RCC_ClockConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006cc:	f000 f8ec 	bl	80008a8 <Error_Handler>
  }
}
 80006d0:	bf00      	nop
 80006d2:	3750      	adds	r7, #80	@ 0x50
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	@ 0x28
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]
 80006fa:	4b40      	ldr	r3, [pc, #256]	@ (80007fc <MX_GPIO_Init+0x11c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	4a3f      	ldr	r2, [pc, #252]	@ (80007fc <MX_GPIO_Init+0x11c>)
 8000700:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000704:	6313      	str	r3, [r2, #48]	@ 0x30
 8000706:	4b3d      	ldr	r3, [pc, #244]	@ (80007fc <MX_GPIO_Init+0x11c>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	4b39      	ldr	r3, [pc, #228]	@ (80007fc <MX_GPIO_Init+0x11c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	4a38      	ldr	r2, [pc, #224]	@ (80007fc <MX_GPIO_Init+0x11c>)
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	6313      	str	r3, [r2, #48]	@ 0x30
 8000722:	4b36      	ldr	r3, [pc, #216]	@ (80007fc <MX_GPIO_Init+0x11c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	f003 0304 	and.w	r3, r3, #4
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	4b32      	ldr	r3, [pc, #200]	@ (80007fc <MX_GPIO_Init+0x11c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	4a31      	ldr	r2, [pc, #196]	@ (80007fc <MX_GPIO_Init+0x11c>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6313      	str	r3, [r2, #48]	@ 0x30
 800073e:	4b2f      	ldr	r3, [pc, #188]	@ (80007fc <MX_GPIO_Init+0x11c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b2b      	ldr	r3, [pc, #172]	@ (80007fc <MX_GPIO_Init+0x11c>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	4a2a      	ldr	r2, [pc, #168]	@ (80007fc <MX_GPIO_Init+0x11c>)
 8000754:	f043 0302 	orr.w	r3, r3, #2
 8000758:	6313      	str	r3, [r2, #48]	@ 0x30
 800075a:	4b28      	ldr	r3, [pc, #160]	@ (80007fc <MX_GPIO_Init+0x11c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	210b      	movs	r1, #11
 800076a:	4825      	ldr	r0, [pc, #148]	@ (8000800 <MX_GPIO_Init+0x120>)
 800076c:	f000 fc6e 	bl	800104c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	2113      	movs	r1, #19
 8000774:	4823      	ldr	r0, [pc, #140]	@ (8000804 <MX_GPIO_Init+0x124>)
 8000776:	f000 fc69 	bl	800104c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	2101      	movs	r1, #1
 800077e:	4822      	ldr	r0, [pc, #136]	@ (8000808 <MX_GPIO_Init+0x128>)
 8000780:	f000 fc64 	bl	800104c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8000784:	230b      	movs	r3, #11
 8000786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000788:	2301      	movs	r3, #1
 800078a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	2300      	movs	r3, #0
 8000792:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	4619      	mov	r1, r3
 800079a:	4819      	ldr	r0, [pc, #100]	@ (8000800 <MX_GPIO_Init+0x120>)
 800079c:	f000 fad2 	bl	8000d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007a0:	2304      	movs	r3, #4
 80007a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007a4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	4619      	mov	r1, r3
 80007b4:	4812      	ldr	r0, [pc, #72]	@ (8000800 <MX_GPIO_Init+0x120>)
 80007b6:	f000 fac5 	bl	8000d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80007ba:	2313      	movs	r3, #19
 80007bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007be:	2301      	movs	r3, #1
 80007c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	4619      	mov	r1, r3
 80007d0:	480c      	ldr	r0, [pc, #48]	@ (8000804 <MX_GPIO_Init+0x124>)
 80007d2:	f000 fab7 	bl	8000d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007d6:	2301      	movs	r3, #1
 80007d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007da:	2301      	movs	r3, #1
 80007dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	4619      	mov	r1, r3
 80007ec:	4806      	ldr	r0, [pc, #24]	@ (8000808 <MX_GPIO_Init+0x128>)
 80007ee:	f000 faa9 	bl	8000d44 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007f2:	bf00      	nop
 80007f4:	3728      	adds	r7, #40	@ 0x28
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40023800 	.word	0x40023800
 8000800:	40020800 	.word	0x40020800
 8000804:	40020000 	.word	0x40020000
 8000808:	40020400 	.word	0x40020400

0800080c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000814:	2001      	movs	r0, #1
 8000816:	f001 fbdc 	bl	8001fd2 <osDelay>
 800081a:	e7fb      	b.n	8000814 <StartDefaultTask+0x8>

0800081c <LedTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LedTask02 */
void LedTask02(void const * argument)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LedTask02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000824:	2102      	movs	r1, #2
 8000826:	4804      	ldr	r0, [pc, #16]	@ (8000838 <LedTask02+0x1c>)
 8000828:	f000 fc29 	bl	800107e <HAL_GPIO_TogglePin>
	  osDelay(500);
 800082c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000830:	f001 fbcf 	bl	8001fd2 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000834:	bf00      	nop
 8000836:	e7f5      	b.n	8000824 <LedTask02+0x8>
 8000838:	40020000 	.word	0x40020000

0800083c <LedTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LedTask03 */
void LedTask03(void const * argument)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LedTask03 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8000844:	2110      	movs	r1, #16
 8000846:	4806      	ldr	r0, [pc, #24]	@ (8000860 <LedTask03+0x24>)
 8000848:	f000 fc19 	bl	800107e <HAL_GPIO_TogglePin>
	  //
	  osDelay(1000);
 800084c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000850:	f001 fbbf 	bl	8001fd2 <osDelay>
	  HAL_Delay(1000);
 8000854:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000858:	f000 f96e 	bl	8000b38 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 800085c:	bf00      	nop
 800085e:	e7f1      	b.n	8000844 <LedTask03+0x8>
 8000860:	40020000 	.word	0x40020000

08000864 <LedTask01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LedTask01 */
void LedTask01(void const * argument)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LedTask01 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 800086c:	2101      	movs	r1, #1
 800086e:	4804      	ldr	r0, [pc, #16]	@ (8000880 <LedTask01+0x1c>)
 8000870:	f000 fc05 	bl	800107e <HAL_GPIO_TogglePin>
	  osDelay(200);
 8000874:	20c8      	movs	r0, #200	@ 0xc8
 8000876:	f001 fbac 	bl	8001fd2 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 800087a:	bf00      	nop
 800087c:	e7f6      	b.n	800086c <LedTask01+0x8>
 800087e:	bf00      	nop
 8000880:	40020000 	.word	0x40020000

08000884 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a04      	ldr	r2, [pc, #16]	@ (80008a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d101      	bne.n	800089a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000896:	f000 f92f 	bl	8000af8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40014800 	.word	0x40014800

080008a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ac:	b672      	cpsid	i
}
 80008ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b0:	bf00      	nop
 80008b2:	e7fd      	b.n	80008b0 <Error_Handler+0x8>

080008b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	4b12      	ldr	r3, [pc, #72]	@ (8000908 <HAL_MspInit+0x54>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008c2:	4a11      	ldr	r2, [pc, #68]	@ (8000908 <HAL_MspInit+0x54>)
 80008c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80008ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000908 <HAL_MspInit+0x54>)
 80008cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	603b      	str	r3, [r7, #0]
 80008da:	4b0b      	ldr	r3, [pc, #44]	@ (8000908 <HAL_MspInit+0x54>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008de:	4a0a      	ldr	r2, [pc, #40]	@ (8000908 <HAL_MspInit+0x54>)
 80008e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008e6:	4b08      	ldr	r3, [pc, #32]	@ (8000908 <HAL_MspInit+0x54>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	210f      	movs	r1, #15
 80008f6:	f06f 0001 	mvn.w	r0, #1
 80008fa:	f000 f9f9 	bl	8000cf0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800

0800090c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08c      	sub	sp, #48	@ 0x30
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000914:	2300      	movs	r3, #0
 8000916:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 800091c:	2300      	movs	r3, #0
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	4b2e      	ldr	r3, [pc, #184]	@ (80009dc <HAL_InitTick+0xd0>)
 8000922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000924:	4a2d      	ldr	r2, [pc, #180]	@ (80009dc <HAL_InitTick+0xd0>)
 8000926:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800092a:	6453      	str	r3, [r2, #68]	@ 0x44
 800092c:	4b2b      	ldr	r3, [pc, #172]	@ (80009dc <HAL_InitTick+0xd0>)
 800092e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000930:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000938:	f107 020c 	add.w	r2, r7, #12
 800093c:	f107 0310 	add.w	r3, r7, #16
 8000940:	4611      	mov	r1, r2
 8000942:	4618      	mov	r0, r3
 8000944:	f001 f83a 	bl	80019bc <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000948:	f001 f824 	bl	8001994 <HAL_RCC_GetPCLK2Freq>
 800094c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800094e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000950:	4a23      	ldr	r2, [pc, #140]	@ (80009e0 <HAL_InitTick+0xd4>)
 8000952:	fba2 2303 	umull	r2, r3, r2, r3
 8000956:	0c9b      	lsrs	r3, r3, #18
 8000958:	3b01      	subs	r3, #1
 800095a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 800095c:	4b21      	ldr	r3, [pc, #132]	@ (80009e4 <HAL_InitTick+0xd8>)
 800095e:	4a22      	ldr	r2, [pc, #136]	@ (80009e8 <HAL_InitTick+0xdc>)
 8000960:	601a      	str	r2, [r3, #0]
   * Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000962:	4b20      	ldr	r3, [pc, #128]	@ (80009e4 <HAL_InitTick+0xd8>)
 8000964:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000968:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 800096a:	4a1e      	ldr	r2, [pc, #120]	@ (80009e4 <HAL_InitTick+0xd8>)
 800096c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800096e:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000970:	4b1c      	ldr	r3, [pc, #112]	@ (80009e4 <HAL_InitTick+0xd8>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000976:	4b1b      	ldr	r3, [pc, #108]	@ (80009e4 <HAL_InitTick+0xd8>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097c:	4b19      	ldr	r3, [pc, #100]	@ (80009e4 <HAL_InitTick+0xd8>)
 800097e:	2200      	movs	r2, #0
 8000980:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8000982:	4818      	ldr	r0, [pc, #96]	@ (80009e4 <HAL_InitTick+0xd8>)
 8000984:	f001 f84c 	bl	8001a20 <HAL_TIM_Base_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800098e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000992:	2b00      	cmp	r3, #0
 8000994:	d11b      	bne.n	80009ce <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8000996:	4813      	ldr	r0, [pc, #76]	@ (80009e4 <HAL_InitTick+0xd8>)
 8000998:	f001 f89c 	bl	8001ad4 <HAL_TIM_Base_Start_IT>
 800099c:	4603      	mov	r3, r0
 800099e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80009a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d111      	bne.n	80009ce <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80009aa:	201a      	movs	r0, #26
 80009ac:	f000 f9bc 	bl	8000d28 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2b0f      	cmp	r3, #15
 80009b4:	d808      	bhi.n	80009c8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 80009b6:	2200      	movs	r2, #0
 80009b8:	6879      	ldr	r1, [r7, #4]
 80009ba:	201a      	movs	r0, #26
 80009bc:	f000 f998 	bl	8000cf0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009c0:	4a0a      	ldr	r2, [pc, #40]	@ (80009ec <HAL_InitTick+0xe0>)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6013      	str	r3, [r2, #0]
 80009c6:	e002      	b.n	80009ce <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80009c8:	2301      	movs	r3, #1
 80009ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80009ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3730      	adds	r7, #48	@ 0x30
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800
 80009e0:	431bde83 	.word	0x431bde83
 80009e4:	2000032c 	.word	0x2000032c
 80009e8:	40014800 	.word	0x40014800
 80009ec:	20000004 	.word	0x20000004

080009f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <NMI_Handler+0x4>

080009f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <HardFault_Handler+0x4>

08000a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <MemManage_Handler+0x4>

08000a08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <BusFault_Handler+0x4>

08000a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <UsageFault_Handler+0x4>

08000a18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
	...

08000a28 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000a2c:	4802      	ldr	r0, [pc, #8]	@ (8000a38 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000a2e:	f001 f8b3 	bl	8001b98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	2000032c 	.word	0x2000032c

08000a3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a40:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <SystemInit+0x20>)
 8000a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a46:	4a05      	ldr	r2, [pc, #20]	@ (8000a5c <SystemInit+0x20>)
 8000a48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a98 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a64:	f7ff ffea 	bl	8000a3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a68:	480c      	ldr	r0, [pc, #48]	@ (8000a9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a6a:	490d      	ldr	r1, [pc, #52]	@ (8000aa0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000aa4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a70:	e002      	b.n	8000a78 <LoopCopyDataInit>

08000a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a76:	3304      	adds	r3, #4

08000a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a7c:	d3f9      	bcc.n	8000a72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a80:	4c0a      	ldr	r4, [pc, #40]	@ (8000aac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a84:	e001      	b.n	8000a8a <LoopFillZerobss>

08000a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a88:	3204      	adds	r2, #4

08000a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a8c:	d3fb      	bcc.n	8000a86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a8e:	f002 fd27 	bl	80034e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a92:	f7ff fd55 	bl	8000540 <main>
  bx  lr    
 8000a96:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000aa4:	080036b4 	.word	0x080036b4
  ldr r2, =_sbss
 8000aa8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000aac:	2000420c 	.word	0x2000420c

08000ab0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ab0:	e7fe      	b.n	8000ab0 <ADC_IRQHandler>
	...

08000ab4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	@ (8000af4 <HAL_Init+0x40>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a0d      	ldr	r2, [pc, #52]	@ (8000af4 <HAL_Init+0x40>)
 8000abe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ac2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8000af4 <HAL_Init+0x40>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a0a      	ldr	r2, [pc, #40]	@ (8000af4 <HAL_Init+0x40>)
 8000aca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ace:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad0:	4b08      	ldr	r3, [pc, #32]	@ (8000af4 <HAL_Init+0x40>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a07      	ldr	r2, [pc, #28]	@ (8000af4 <HAL_Init+0x40>)
 8000ad6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ada:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000adc:	2003      	movs	r0, #3
 8000ade:	f000 f8fc 	bl	8000cda <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ae2:	200f      	movs	r0, #15
 8000ae4:	f7ff ff12 	bl	800090c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ae8:	f7ff fee4 	bl	80008b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40023c00 	.word	0x40023c00

08000af8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000afc:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <HAL_IncTick+0x20>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <HAL_IncTick+0x24>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4413      	add	r3, r2
 8000b08:	4a04      	ldr	r2, [pc, #16]	@ (8000b1c <HAL_IncTick+0x24>)
 8000b0a:	6013      	str	r3, [r2, #0]
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	20000008 	.word	0x20000008
 8000b1c:	20000374 	.word	0x20000374

08000b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return uwTick;
 8000b24:	4b03      	ldr	r3, [pc, #12]	@ (8000b34 <HAL_GetTick+0x14>)
 8000b26:	681b      	ldr	r3, [r3, #0]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20000374 	.word	0x20000374

08000b38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b40:	f7ff ffee 	bl	8000b20 <HAL_GetTick>
 8000b44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b50:	d005      	beq.n	8000b5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b52:	4b0a      	ldr	r3, [pc, #40]	@ (8000b7c <HAL_Delay+0x44>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	461a      	mov	r2, r3
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b5e:	bf00      	nop
 8000b60:	f7ff ffde 	bl	8000b20 <HAL_GetTick>
 8000b64:	4602      	mov	r2, r0
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d8f7      	bhi.n	8000b60 <HAL_Delay+0x28>
  {
  }
}
 8000b70:	bf00      	nop
 8000b72:	bf00      	nop
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000008 	.word	0x20000008

08000b80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b90:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bb2:	4a04      	ldr	r2, [pc, #16]	@ (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	60d3      	str	r3, [r2, #12]
}
 8000bb8:	bf00      	nop
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bcc:	4b04      	ldr	r3, [pc, #16]	@ (8000be0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	0a1b      	lsrs	r3, r3, #8
 8000bd2:	f003 0307 	and.w	r3, r3, #7
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	db0b      	blt.n	8000c0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	f003 021f 	and.w	r2, r3, #31
 8000bfc:	4907      	ldr	r1, [pc, #28]	@ (8000c1c <__NVIC_EnableIRQ+0x38>)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	095b      	lsrs	r3, r3, #5
 8000c04:	2001      	movs	r0, #1
 8000c06:	fa00 f202 	lsl.w	r2, r0, r2
 8000c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000e100 	.word	0xe000e100

08000c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	6039      	str	r1, [r7, #0]
 8000c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db0a      	blt.n	8000c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	490c      	ldr	r1, [pc, #48]	@ (8000c6c <__NVIC_SetPriority+0x4c>)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	0112      	lsls	r2, r2, #4
 8000c40:	b2d2      	uxtb	r2, r2
 8000c42:	440b      	add	r3, r1
 8000c44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c48:	e00a      	b.n	8000c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4908      	ldr	r1, [pc, #32]	@ (8000c70 <__NVIC_SetPriority+0x50>)
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	f003 030f 	and.w	r3, r3, #15
 8000c56:	3b04      	subs	r3, #4
 8000c58:	0112      	lsls	r2, r2, #4
 8000c5a:	b2d2      	uxtb	r2, r2
 8000c5c:	440b      	add	r3, r1
 8000c5e:	761a      	strb	r2, [r3, #24]
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000e100 	.word	0xe000e100
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b089      	sub	sp, #36	@ 0x24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	f1c3 0307 	rsb	r3, r3, #7
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	bf28      	it	cs
 8000c92:	2304      	movcs	r3, #4
 8000c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3304      	adds	r3, #4
 8000c9a:	2b06      	cmp	r3, #6
 8000c9c:	d902      	bls.n	8000ca4 <NVIC_EncodePriority+0x30>
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3b03      	subs	r3, #3
 8000ca2:	e000      	b.n	8000ca6 <NVIC_EncodePriority+0x32>
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43da      	mvns	r2, r3
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	401a      	ands	r2, r3
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc6:	43d9      	mvns	r1, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ccc:	4313      	orrs	r3, r2
         );
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3724      	adds	r7, #36	@ 0x24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff ff4c 	bl	8000b80 <__NVIC_SetPriorityGrouping>
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
 8000cfc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d02:	f7ff ff61 	bl	8000bc8 <__NVIC_GetPriorityGrouping>
 8000d06:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	68b9      	ldr	r1, [r7, #8]
 8000d0c:	6978      	ldr	r0, [r7, #20]
 8000d0e:	f7ff ffb1 	bl	8000c74 <NVIC_EncodePriority>
 8000d12:	4602      	mov	r2, r0
 8000d14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d18:	4611      	mov	r1, r2
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff ff80 	bl	8000c20 <__NVIC_SetPriority>
}
 8000d20:	bf00      	nop
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff ff54 	bl	8000be4 <__NVIC_EnableIRQ>
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b089      	sub	sp, #36	@ 0x24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
 8000d5e:	e159      	b.n	8001014 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d60:	2201      	movs	r2, #1
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	697a      	ldr	r2, [r7, #20]
 8000d70:	4013      	ands	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	f040 8148 	bne.w	800100e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f003 0303 	and.w	r3, r3, #3
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d005      	beq.n	8000d96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d130      	bne.n	8000df8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	2203      	movs	r2, #3
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43db      	mvns	r3, r3
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	4013      	ands	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	68da      	ldr	r2, [r3, #12]
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dcc:	2201      	movs	r2, #1
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	091b      	lsrs	r3, r3, #4
 8000de2:	f003 0201 	and.w	r2, r3, #1
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 0303 	and.w	r3, r3, #3
 8000e00:	2b03      	cmp	r3, #3
 8000e02:	d017      	beq.n	8000e34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	2203      	movs	r2, #3
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	689a      	ldr	r2, [r3, #8]
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f003 0303 	and.w	r3, r3, #3
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d123      	bne.n	8000e88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	08da      	lsrs	r2, r3, #3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3208      	adds	r2, #8
 8000e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	f003 0307 	and.w	r3, r3, #7
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	220f      	movs	r2, #15
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4013      	ands	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	691a      	ldr	r2, [r3, #16]
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	08da      	lsrs	r2, r3, #3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	3208      	adds	r2, #8
 8000e82:	69b9      	ldr	r1, [r7, #24]
 8000e84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	2203      	movs	r2, #3
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 0203 	and.w	r2, r3, #3
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	f000 80a2 	beq.w	800100e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	4b57      	ldr	r3, [pc, #348]	@ (800102c <HAL_GPIO_Init+0x2e8>)
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed2:	4a56      	ldr	r2, [pc, #344]	@ (800102c <HAL_GPIO_Init+0x2e8>)
 8000ed4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ed8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eda:	4b54      	ldr	r3, [pc, #336]	@ (800102c <HAL_GPIO_Init+0x2e8>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ede:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ee6:	4a52      	ldr	r2, [pc, #328]	@ (8001030 <HAL_GPIO_Init+0x2ec>)
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	089b      	lsrs	r3, r3, #2
 8000eec:	3302      	adds	r3, #2
 8000eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	f003 0303 	and.w	r3, r3, #3
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	220f      	movs	r2, #15
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43db      	mvns	r3, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4013      	ands	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a49      	ldr	r2, [pc, #292]	@ (8001034 <HAL_GPIO_Init+0x2f0>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d019      	beq.n	8000f46 <HAL_GPIO_Init+0x202>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a48      	ldr	r2, [pc, #288]	@ (8001038 <HAL_GPIO_Init+0x2f4>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d013      	beq.n	8000f42 <HAL_GPIO_Init+0x1fe>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a47      	ldr	r2, [pc, #284]	@ (800103c <HAL_GPIO_Init+0x2f8>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d00d      	beq.n	8000f3e <HAL_GPIO_Init+0x1fa>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a46      	ldr	r2, [pc, #280]	@ (8001040 <HAL_GPIO_Init+0x2fc>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d007      	beq.n	8000f3a <HAL_GPIO_Init+0x1f6>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a45      	ldr	r2, [pc, #276]	@ (8001044 <HAL_GPIO_Init+0x300>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d101      	bne.n	8000f36 <HAL_GPIO_Init+0x1f2>
 8000f32:	2304      	movs	r3, #4
 8000f34:	e008      	b.n	8000f48 <HAL_GPIO_Init+0x204>
 8000f36:	2307      	movs	r3, #7
 8000f38:	e006      	b.n	8000f48 <HAL_GPIO_Init+0x204>
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e004      	b.n	8000f48 <HAL_GPIO_Init+0x204>
 8000f3e:	2302      	movs	r3, #2
 8000f40:	e002      	b.n	8000f48 <HAL_GPIO_Init+0x204>
 8000f42:	2301      	movs	r3, #1
 8000f44:	e000      	b.n	8000f48 <HAL_GPIO_Init+0x204>
 8000f46:	2300      	movs	r3, #0
 8000f48:	69fa      	ldr	r2, [r7, #28]
 8000f4a:	f002 0203 	and.w	r2, r2, #3
 8000f4e:	0092      	lsls	r2, r2, #2
 8000f50:	4093      	lsls	r3, r2
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f58:	4935      	ldr	r1, [pc, #212]	@ (8001030 <HAL_GPIO_Init+0x2ec>)
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	089b      	lsrs	r3, r3, #2
 8000f5e:	3302      	adds	r3, #2
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f66:	4b38      	ldr	r3, [pc, #224]	@ (8001048 <HAL_GPIO_Init+0x304>)
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4013      	ands	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d003      	beq.n	8000f8a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f8a:	4a2f      	ldr	r2, [pc, #188]	@ (8001048 <HAL_GPIO_Init+0x304>)
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f90:	4b2d      	ldr	r3, [pc, #180]	@ (8001048 <HAL_GPIO_Init+0x304>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d003      	beq.n	8000fb4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fb4:	4a24      	ldr	r2, [pc, #144]	@ (8001048 <HAL_GPIO_Init+0x304>)
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fba:	4b23      	ldr	r3, [pc, #140]	@ (8001048 <HAL_GPIO_Init+0x304>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fde:	4a1a      	ldr	r2, [pc, #104]	@ (8001048 <HAL_GPIO_Init+0x304>)
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fe4:	4b18      	ldr	r3, [pc, #96]	@ (8001048 <HAL_GPIO_Init+0x304>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d003      	beq.n	8001008 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001008:	4a0f      	ldr	r2, [pc, #60]	@ (8001048 <HAL_GPIO_Init+0x304>)
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3301      	adds	r3, #1
 8001012:	61fb      	str	r3, [r7, #28]
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	2b0f      	cmp	r3, #15
 8001018:	f67f aea2 	bls.w	8000d60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800101c:	bf00      	nop
 800101e:	bf00      	nop
 8001020:	3724      	adds	r7, #36	@ 0x24
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	40023800 	.word	0x40023800
 8001030:	40013800 	.word	0x40013800
 8001034:	40020000 	.word	0x40020000
 8001038:	40020400 	.word	0x40020400
 800103c:	40020800 	.word	0x40020800
 8001040:	40020c00 	.word	0x40020c00
 8001044:	40021000 	.word	0x40021000
 8001048:	40013c00 	.word	0x40013c00

0800104c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	807b      	strh	r3, [r7, #2]
 8001058:	4613      	mov	r3, r2
 800105a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800105c:	787b      	ldrb	r3, [r7, #1]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001062:	887a      	ldrh	r2, [r7, #2]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001068:	e003      	b.n	8001072 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800106a:	887b      	ldrh	r3, [r7, #2]
 800106c:	041a      	lsls	r2, r3, #16
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	619a      	str	r2, [r3, #24]
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800107e:	b480      	push	{r7}
 8001080:	b085      	sub	sp, #20
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
 8001086:	460b      	mov	r3, r1
 8001088:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001090:	887a      	ldrh	r2, [r7, #2]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	4013      	ands	r3, r2
 8001096:	041a      	lsls	r2, r3, #16
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	43d9      	mvns	r1, r3
 800109c:	887b      	ldrh	r3, [r7, #2]
 800109e:	400b      	ands	r3, r1
 80010a0:	431a      	orrs	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	619a      	str	r2, [r3, #24]
}
 80010a6:	bf00      	nop
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
	...

080010b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e267      	b.n	8001596 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d075      	beq.n	80011be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010d2:	4b88      	ldr	r3, [pc, #544]	@ (80012f4 <HAL_RCC_OscConfig+0x240>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	f003 030c 	and.w	r3, r3, #12
 80010da:	2b04      	cmp	r3, #4
 80010dc:	d00c      	beq.n	80010f8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010de:	4b85      	ldr	r3, [pc, #532]	@ (80012f4 <HAL_RCC_OscConfig+0x240>)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010e6:	2b08      	cmp	r3, #8
 80010e8:	d112      	bne.n	8001110 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ea:	4b82      	ldr	r3, [pc, #520]	@ (80012f4 <HAL_RCC_OscConfig+0x240>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80010f6:	d10b      	bne.n	8001110 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f8:	4b7e      	ldr	r3, [pc, #504]	@ (80012f4 <HAL_RCC_OscConfig+0x240>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d05b      	beq.n	80011bc <HAL_RCC_OscConfig+0x108>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d157      	bne.n	80011bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e242      	b.n	8001596 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001118:	d106      	bne.n	8001128 <HAL_RCC_OscConfig+0x74>
 800111a:	4b76      	ldr	r3, [pc, #472]	@ (80012f4 <HAL_RCC_OscConfig+0x240>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a75      	ldr	r2, [pc, #468]	@ (80012f4 <HAL_RCC_OscConfig+0x240>)
 8001120:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	e01d      	b.n	8001164 <HAL_RCC_OscConfig+0xb0>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001130:	d10c      	bne.n	800114c <HAL_RCC_OscConfig+0x98>
 8001132:	4b70      	ldr	r3, [pc, #448]	@ (80012f4 <HAL_RCC_OscConfig+0x240>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a6f      	ldr	r2, [pc, #444]	@ (80012f4 <HAL_RCC_OscConfig+0x240>)
 8001138:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	4b6d      	ldr	r3, [pc, #436]	@ (80012f4 <HAL_RCC_OscConfig+0x240>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a6c      	ldr	r2, [pc, #432]	@ (80012f4 <HAL_RCC_OscConfig+0x240>)
 8001144:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	e00b      	b.n	8001164 <HAL_RCC_OscConfig+0xb0>
 800114c:	4b69      	ldr	r3, [pc, #420]	@ (80012f4 <HAL_RCC_OscConfig+0x240>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a68      	ldr	r2, [pc, #416]	@ (80012f4 <HAL_RCC_OscConfig+0x240>)
 8001152:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001156:	6013      	str	r3, [r2, #0]
 8001158:	4b66      	ldr	r3, [pc, #408]	@ (80012f4 <HAL_RCC_OscConfig+0x240>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a65      	ldr	r2, [pc, #404]	@ (80012f4 <HAL_RCC_OscConfig+0x240>)
 800115e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001162:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d013      	beq.n	8001194 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800116c:	f7ff fcd8 	bl	8000b20 <HAL_GetTick>
 8001170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001172:	e008      	b.n	8001186 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001174:	f7ff fcd4 	bl	8000b20 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	2b64      	cmp	r3, #100	@ 0x64
 8001180:	d901      	bls.n	8001186 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e207      	b.n	8001596 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001186:	4b5b      	ldr	r3, [pc, #364]	@ (80012f4 <HAL_RCC_OscConfig+0x240>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0f0      	beq.n	8001174 <HAL_RCC_OscConfig+0xc0>
 8001192:	e014      	b.n	80011be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001194:	f7ff fcc4 	bl	8000b20 <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800119c:	f7ff fcc0 	bl	8000b20 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b64      	cmp	r3, #100	@ 0x64
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e1f3      	b.n	8001596 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ae:	4b51      	ldr	r3, [pc, #324]	@ (80012f4 <HAL_RCC_OscConfig+0x240>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f0      	bne.n	800119c <HAL_RCC_OscConfig+0xe8>
 80011ba:	e000      	b.n	80011be <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d063      	beq.n	8001292 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011ca:	4b4a      	ldr	r3, [pc, #296]	@ (80012f4 <HAL_RCC_OscConfig+0x240>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f003 030c 	and.w	r3, r3, #12
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00b      	beq.n	80011ee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011d6:	4b47      	ldr	r3, [pc, #284]	@ (80012f4 <HAL_RCC_OscConfig+0x240>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011de:	2b08      	cmp	r3, #8
 80011e0:	d11c      	bne.n	800121c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011e2:	4b44      	ldr	r3, [pc, #272]	@ (80012f4 <HAL_RCC_OscConfig+0x240>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d116      	bne.n	800121c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ee:	4b41      	ldr	r3, [pc, #260]	@ (80012f4 <HAL_RCC_OscConfig+0x240>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d005      	beq.n	8001206 <HAL_RCC_OscConfig+0x152>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d001      	beq.n	8001206 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e1c7      	b.n	8001596 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001206:	4b3b      	ldr	r3, [pc, #236]	@ (80012f4 <HAL_RCC_OscConfig+0x240>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	4937      	ldr	r1, [pc, #220]	@ (80012f4 <HAL_RCC_OscConfig+0x240>)
 8001216:	4313      	orrs	r3, r2
 8001218:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800121a:	e03a      	b.n	8001292 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d020      	beq.n	8001266 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001224:	4b34      	ldr	r3, [pc, #208]	@ (80012f8 <HAL_RCC_OscConfig+0x244>)
 8001226:	2201      	movs	r2, #1
 8001228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800122a:	f7ff fc79 	bl	8000b20 <HAL_GetTick>
 800122e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001230:	e008      	b.n	8001244 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001232:	f7ff fc75 	bl	8000b20 <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d901      	bls.n	8001244 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e1a8      	b.n	8001596 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001244:	4b2b      	ldr	r3, [pc, #172]	@ (80012f4 <HAL_RCC_OscConfig+0x240>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0f0      	beq.n	8001232 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001250:	4b28      	ldr	r3, [pc, #160]	@ (80012f4 <HAL_RCC_OscConfig+0x240>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	00db      	lsls	r3, r3, #3
 800125e:	4925      	ldr	r1, [pc, #148]	@ (80012f4 <HAL_RCC_OscConfig+0x240>)
 8001260:	4313      	orrs	r3, r2
 8001262:	600b      	str	r3, [r1, #0]
 8001264:	e015      	b.n	8001292 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001266:	4b24      	ldr	r3, [pc, #144]	@ (80012f8 <HAL_RCC_OscConfig+0x244>)
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800126c:	f7ff fc58 	bl	8000b20 <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001272:	e008      	b.n	8001286 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001274:	f7ff fc54 	bl	8000b20 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e187      	b.n	8001596 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001286:	4b1b      	ldr	r3, [pc, #108]	@ (80012f4 <HAL_RCC_OscConfig+0x240>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1f0      	bne.n	8001274 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0308 	and.w	r3, r3, #8
 800129a:	2b00      	cmp	r3, #0
 800129c:	d036      	beq.n	800130c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d016      	beq.n	80012d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012a6:	4b15      	ldr	r3, [pc, #84]	@ (80012fc <HAL_RCC_OscConfig+0x248>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ac:	f7ff fc38 	bl	8000b20 <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012b4:	f7ff fc34 	bl	8000b20 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e167      	b.n	8001596 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012c6:	4b0b      	ldr	r3, [pc, #44]	@ (80012f4 <HAL_RCC_OscConfig+0x240>)
 80012c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0f0      	beq.n	80012b4 <HAL_RCC_OscConfig+0x200>
 80012d2:	e01b      	b.n	800130c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012d4:	4b09      	ldr	r3, [pc, #36]	@ (80012fc <HAL_RCC_OscConfig+0x248>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012da:	f7ff fc21 	bl	8000b20 <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012e0:	e00e      	b.n	8001300 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012e2:	f7ff fc1d 	bl	8000b20 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d907      	bls.n	8001300 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e150      	b.n	8001596 <HAL_RCC_OscConfig+0x4e2>
 80012f4:	40023800 	.word	0x40023800
 80012f8:	42470000 	.word	0x42470000
 80012fc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001300:	4b88      	ldr	r3, [pc, #544]	@ (8001524 <HAL_RCC_OscConfig+0x470>)
 8001302:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d1ea      	bne.n	80012e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0304 	and.w	r3, r3, #4
 8001314:	2b00      	cmp	r3, #0
 8001316:	f000 8097 	beq.w	8001448 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800131a:	2300      	movs	r3, #0
 800131c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800131e:	4b81      	ldr	r3, [pc, #516]	@ (8001524 <HAL_RCC_OscConfig+0x470>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d10f      	bne.n	800134a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	4b7d      	ldr	r3, [pc, #500]	@ (8001524 <HAL_RCC_OscConfig+0x470>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001332:	4a7c      	ldr	r2, [pc, #496]	@ (8001524 <HAL_RCC_OscConfig+0x470>)
 8001334:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001338:	6413      	str	r3, [r2, #64]	@ 0x40
 800133a:	4b7a      	ldr	r3, [pc, #488]	@ (8001524 <HAL_RCC_OscConfig+0x470>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001346:	2301      	movs	r3, #1
 8001348:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800134a:	4b77      	ldr	r3, [pc, #476]	@ (8001528 <HAL_RCC_OscConfig+0x474>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001352:	2b00      	cmp	r3, #0
 8001354:	d118      	bne.n	8001388 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001356:	4b74      	ldr	r3, [pc, #464]	@ (8001528 <HAL_RCC_OscConfig+0x474>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a73      	ldr	r2, [pc, #460]	@ (8001528 <HAL_RCC_OscConfig+0x474>)
 800135c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001360:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001362:	f7ff fbdd 	bl	8000b20 <HAL_GetTick>
 8001366:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001368:	e008      	b.n	800137c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800136a:	f7ff fbd9 	bl	8000b20 <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d901      	bls.n	800137c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e10c      	b.n	8001596 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800137c:	4b6a      	ldr	r3, [pc, #424]	@ (8001528 <HAL_RCC_OscConfig+0x474>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001384:	2b00      	cmp	r3, #0
 8001386:	d0f0      	beq.n	800136a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d106      	bne.n	800139e <HAL_RCC_OscConfig+0x2ea>
 8001390:	4b64      	ldr	r3, [pc, #400]	@ (8001524 <HAL_RCC_OscConfig+0x470>)
 8001392:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001394:	4a63      	ldr	r2, [pc, #396]	@ (8001524 <HAL_RCC_OscConfig+0x470>)
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	6713      	str	r3, [r2, #112]	@ 0x70
 800139c:	e01c      	b.n	80013d8 <HAL_RCC_OscConfig+0x324>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	2b05      	cmp	r3, #5
 80013a4:	d10c      	bne.n	80013c0 <HAL_RCC_OscConfig+0x30c>
 80013a6:	4b5f      	ldr	r3, [pc, #380]	@ (8001524 <HAL_RCC_OscConfig+0x470>)
 80013a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013aa:	4a5e      	ldr	r2, [pc, #376]	@ (8001524 <HAL_RCC_OscConfig+0x470>)
 80013ac:	f043 0304 	orr.w	r3, r3, #4
 80013b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80013b2:	4b5c      	ldr	r3, [pc, #368]	@ (8001524 <HAL_RCC_OscConfig+0x470>)
 80013b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013b6:	4a5b      	ldr	r2, [pc, #364]	@ (8001524 <HAL_RCC_OscConfig+0x470>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80013be:	e00b      	b.n	80013d8 <HAL_RCC_OscConfig+0x324>
 80013c0:	4b58      	ldr	r3, [pc, #352]	@ (8001524 <HAL_RCC_OscConfig+0x470>)
 80013c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013c4:	4a57      	ldr	r2, [pc, #348]	@ (8001524 <HAL_RCC_OscConfig+0x470>)
 80013c6:	f023 0301 	bic.w	r3, r3, #1
 80013ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80013cc:	4b55      	ldr	r3, [pc, #340]	@ (8001524 <HAL_RCC_OscConfig+0x470>)
 80013ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013d0:	4a54      	ldr	r2, [pc, #336]	@ (8001524 <HAL_RCC_OscConfig+0x470>)
 80013d2:	f023 0304 	bic.w	r3, r3, #4
 80013d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d015      	beq.n	800140c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013e0:	f7ff fb9e 	bl	8000b20 <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e6:	e00a      	b.n	80013fe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013e8:	f7ff fb9a 	bl	8000b20 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e0cb      	b.n	8001596 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013fe:	4b49      	ldr	r3, [pc, #292]	@ (8001524 <HAL_RCC_OscConfig+0x470>)
 8001400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d0ee      	beq.n	80013e8 <HAL_RCC_OscConfig+0x334>
 800140a:	e014      	b.n	8001436 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800140c:	f7ff fb88 	bl	8000b20 <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001412:	e00a      	b.n	800142a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001414:	f7ff fb84 	bl	8000b20 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001422:	4293      	cmp	r3, r2
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e0b5      	b.n	8001596 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800142a:	4b3e      	ldr	r3, [pc, #248]	@ (8001524 <HAL_RCC_OscConfig+0x470>)
 800142c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1ee      	bne.n	8001414 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001436:	7dfb      	ldrb	r3, [r7, #23]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d105      	bne.n	8001448 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800143c:	4b39      	ldr	r3, [pc, #228]	@ (8001524 <HAL_RCC_OscConfig+0x470>)
 800143e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001440:	4a38      	ldr	r2, [pc, #224]	@ (8001524 <HAL_RCC_OscConfig+0x470>)
 8001442:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001446:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	2b00      	cmp	r3, #0
 800144e:	f000 80a1 	beq.w	8001594 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001452:	4b34      	ldr	r3, [pc, #208]	@ (8001524 <HAL_RCC_OscConfig+0x470>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 030c 	and.w	r3, r3, #12
 800145a:	2b08      	cmp	r3, #8
 800145c:	d05c      	beq.n	8001518 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	2b02      	cmp	r3, #2
 8001464:	d141      	bne.n	80014ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001466:	4b31      	ldr	r3, [pc, #196]	@ (800152c <HAL_RCC_OscConfig+0x478>)
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146c:	f7ff fb58 	bl	8000b20 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001474:	f7ff fb54 	bl	8000b20 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e087      	b.n	8001596 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001486:	4b27      	ldr	r3, [pc, #156]	@ (8001524 <HAL_RCC_OscConfig+0x470>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1f0      	bne.n	8001474 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	69da      	ldr	r2, [r3, #28]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a1b      	ldr	r3, [r3, #32]
 800149a:	431a      	orrs	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a0:	019b      	lsls	r3, r3, #6
 80014a2:	431a      	orrs	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014a8:	085b      	lsrs	r3, r3, #1
 80014aa:	3b01      	subs	r3, #1
 80014ac:	041b      	lsls	r3, r3, #16
 80014ae:	431a      	orrs	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014b4:	061b      	lsls	r3, r3, #24
 80014b6:	491b      	ldr	r1, [pc, #108]	@ (8001524 <HAL_RCC_OscConfig+0x470>)
 80014b8:	4313      	orrs	r3, r2
 80014ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014bc:	4b1b      	ldr	r3, [pc, #108]	@ (800152c <HAL_RCC_OscConfig+0x478>)
 80014be:	2201      	movs	r2, #1
 80014c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c2:	f7ff fb2d 	bl	8000b20 <HAL_GetTick>
 80014c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c8:	e008      	b.n	80014dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ca:	f7ff fb29 	bl	8000b20 <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e05c      	b.n	8001596 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014dc:	4b11      	ldr	r3, [pc, #68]	@ (8001524 <HAL_RCC_OscConfig+0x470>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0f0      	beq.n	80014ca <HAL_RCC_OscConfig+0x416>
 80014e8:	e054      	b.n	8001594 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ea:	4b10      	ldr	r3, [pc, #64]	@ (800152c <HAL_RCC_OscConfig+0x478>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f0:	f7ff fb16 	bl	8000b20 <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014f8:	f7ff fb12 	bl	8000b20 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e045      	b.n	8001596 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800150a:	4b06      	ldr	r3, [pc, #24]	@ (8001524 <HAL_RCC_OscConfig+0x470>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1f0      	bne.n	80014f8 <HAL_RCC_OscConfig+0x444>
 8001516:	e03d      	b.n	8001594 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d107      	bne.n	8001530 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e038      	b.n	8001596 <HAL_RCC_OscConfig+0x4e2>
 8001524:	40023800 	.word	0x40023800
 8001528:	40007000 	.word	0x40007000
 800152c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001530:	4b1b      	ldr	r3, [pc, #108]	@ (80015a0 <HAL_RCC_OscConfig+0x4ec>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d028      	beq.n	8001590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001548:	429a      	cmp	r2, r3
 800154a:	d121      	bne.n	8001590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001556:	429a      	cmp	r2, r3
 8001558:	d11a      	bne.n	8001590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001560:	4013      	ands	r3, r2
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001566:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001568:	4293      	cmp	r3, r2
 800156a:	d111      	bne.n	8001590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001576:	085b      	lsrs	r3, r3, #1
 8001578:	3b01      	subs	r3, #1
 800157a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800157c:	429a      	cmp	r2, r3
 800157e:	d107      	bne.n	8001590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800158a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800158c:	429a      	cmp	r2, r3
 800158e:	d001      	beq.n	8001594 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e000      	b.n	8001596 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40023800 	.word	0x40023800

080015a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e0cc      	b.n	8001752 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015b8:	4b68      	ldr	r3, [pc, #416]	@ (800175c <HAL_RCC_ClockConfig+0x1b8>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0307 	and.w	r3, r3, #7
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d90c      	bls.n	80015e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c6:	4b65      	ldr	r3, [pc, #404]	@ (800175c <HAL_RCC_ClockConfig+0x1b8>)
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ce:	4b63      	ldr	r3, [pc, #396]	@ (800175c <HAL_RCC_ClockConfig+0x1b8>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	683a      	ldr	r2, [r7, #0]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d001      	beq.n	80015e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e0b8      	b.n	8001752 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d020      	beq.n	800162e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d005      	beq.n	8001604 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015f8:	4b59      	ldr	r3, [pc, #356]	@ (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	4a58      	ldr	r2, [pc, #352]	@ (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 80015fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001602:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0308 	and.w	r3, r3, #8
 800160c:	2b00      	cmp	r3, #0
 800160e:	d005      	beq.n	800161c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001610:	4b53      	ldr	r3, [pc, #332]	@ (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	4a52      	ldr	r2, [pc, #328]	@ (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001616:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800161a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800161c:	4b50      	ldr	r3, [pc, #320]	@ (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	494d      	ldr	r1, [pc, #308]	@ (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 800162a:	4313      	orrs	r3, r2
 800162c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	2b00      	cmp	r3, #0
 8001638:	d044      	beq.n	80016c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d107      	bne.n	8001652 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001642:	4b47      	ldr	r3, [pc, #284]	@ (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d119      	bne.n	8001682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e07f      	b.n	8001752 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2b02      	cmp	r3, #2
 8001658:	d003      	beq.n	8001662 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800165e:	2b03      	cmp	r3, #3
 8001660:	d107      	bne.n	8001672 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001662:	4b3f      	ldr	r3, [pc, #252]	@ (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d109      	bne.n	8001682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e06f      	b.n	8001752 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001672:	4b3b      	ldr	r3, [pc, #236]	@ (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e067      	b.n	8001752 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001682:	4b37      	ldr	r3, [pc, #220]	@ (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f023 0203 	bic.w	r2, r3, #3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	4934      	ldr	r1, [pc, #208]	@ (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001690:	4313      	orrs	r3, r2
 8001692:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001694:	f7ff fa44 	bl	8000b20 <HAL_GetTick>
 8001698:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800169a:	e00a      	b.n	80016b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800169c:	f7ff fa40 	bl	8000b20 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e04f      	b.n	8001752 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f003 020c 	and.w	r2, r3, #12
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d1eb      	bne.n	800169c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016c4:	4b25      	ldr	r3, [pc, #148]	@ (800175c <HAL_RCC_ClockConfig+0x1b8>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0307 	and.w	r3, r3, #7
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d20c      	bcs.n	80016ec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016d2:	4b22      	ldr	r3, [pc, #136]	@ (800175c <HAL_RCC_ClockConfig+0x1b8>)
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016da:	4b20      	ldr	r3, [pc, #128]	@ (800175c <HAL_RCC_ClockConfig+0x1b8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d001      	beq.n	80016ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e032      	b.n	8001752 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d008      	beq.n	800170a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016f8:	4b19      	ldr	r3, [pc, #100]	@ (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	4916      	ldr	r1, [pc, #88]	@ (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001706:	4313      	orrs	r3, r2
 8001708:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0308 	and.w	r3, r3, #8
 8001712:	2b00      	cmp	r3, #0
 8001714:	d009      	beq.n	800172a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001716:	4b12      	ldr	r3, [pc, #72]	@ (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	490e      	ldr	r1, [pc, #56]	@ (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001726:	4313      	orrs	r3, r2
 8001728:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800172a:	f000 f821 	bl	8001770 <HAL_RCC_GetSysClockFreq>
 800172e:	4602      	mov	r2, r0
 8001730:	4b0b      	ldr	r3, [pc, #44]	@ (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	091b      	lsrs	r3, r3, #4
 8001736:	f003 030f 	and.w	r3, r3, #15
 800173a:	490a      	ldr	r1, [pc, #40]	@ (8001764 <HAL_RCC_ClockConfig+0x1c0>)
 800173c:	5ccb      	ldrb	r3, [r1, r3]
 800173e:	fa22 f303 	lsr.w	r3, r2, r3
 8001742:	4a09      	ldr	r2, [pc, #36]	@ (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001744:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001746:	4b09      	ldr	r3, [pc, #36]	@ (800176c <HAL_RCC_ClockConfig+0x1c8>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff f8de 	bl	800090c <HAL_InitTick>

  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40023c00 	.word	0x40023c00
 8001760:	40023800 	.word	0x40023800
 8001764:	0800368c 	.word	0x0800368c
 8001768:	20000000 	.word	0x20000000
 800176c:	20000004 	.word	0x20000004

08001770 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001774:	b094      	sub	sp, #80	@ 0x50
 8001776:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001778:	2300      	movs	r3, #0
 800177a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800177c:	2300      	movs	r3, #0
 800177e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001780:	2300      	movs	r3, #0
 8001782:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001784:	2300      	movs	r3, #0
 8001786:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001788:	4b79      	ldr	r3, [pc, #484]	@ (8001970 <HAL_RCC_GetSysClockFreq+0x200>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f003 030c 	and.w	r3, r3, #12
 8001790:	2b08      	cmp	r3, #8
 8001792:	d00d      	beq.n	80017b0 <HAL_RCC_GetSysClockFreq+0x40>
 8001794:	2b08      	cmp	r3, #8
 8001796:	f200 80e1 	bhi.w	800195c <HAL_RCC_GetSysClockFreq+0x1ec>
 800179a:	2b00      	cmp	r3, #0
 800179c:	d002      	beq.n	80017a4 <HAL_RCC_GetSysClockFreq+0x34>
 800179e:	2b04      	cmp	r3, #4
 80017a0:	d003      	beq.n	80017aa <HAL_RCC_GetSysClockFreq+0x3a>
 80017a2:	e0db      	b.n	800195c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017a4:	4b73      	ldr	r3, [pc, #460]	@ (8001974 <HAL_RCC_GetSysClockFreq+0x204>)
 80017a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017a8:	e0db      	b.n	8001962 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017aa:	4b73      	ldr	r3, [pc, #460]	@ (8001978 <HAL_RCC_GetSysClockFreq+0x208>)
 80017ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017ae:	e0d8      	b.n	8001962 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017b0:	4b6f      	ldr	r3, [pc, #444]	@ (8001970 <HAL_RCC_GetSysClockFreq+0x200>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017b8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017ba:	4b6d      	ldr	r3, [pc, #436]	@ (8001970 <HAL_RCC_GetSysClockFreq+0x200>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d063      	beq.n	800188e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017c6:	4b6a      	ldr	r3, [pc, #424]	@ (8001970 <HAL_RCC_GetSysClockFreq+0x200>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	099b      	lsrs	r3, r3, #6
 80017cc:	2200      	movs	r2, #0
 80017ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80017d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80017d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80017da:	2300      	movs	r3, #0
 80017dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80017de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80017e2:	4622      	mov	r2, r4
 80017e4:	462b      	mov	r3, r5
 80017e6:	f04f 0000 	mov.w	r0, #0
 80017ea:	f04f 0100 	mov.w	r1, #0
 80017ee:	0159      	lsls	r1, r3, #5
 80017f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017f4:	0150      	lsls	r0, r2, #5
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4621      	mov	r1, r4
 80017fc:	1a51      	subs	r1, r2, r1
 80017fe:	6139      	str	r1, [r7, #16]
 8001800:	4629      	mov	r1, r5
 8001802:	eb63 0301 	sbc.w	r3, r3, r1
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	f04f 0300 	mov.w	r3, #0
 8001810:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001814:	4659      	mov	r1, fp
 8001816:	018b      	lsls	r3, r1, #6
 8001818:	4651      	mov	r1, sl
 800181a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800181e:	4651      	mov	r1, sl
 8001820:	018a      	lsls	r2, r1, #6
 8001822:	4651      	mov	r1, sl
 8001824:	ebb2 0801 	subs.w	r8, r2, r1
 8001828:	4659      	mov	r1, fp
 800182a:	eb63 0901 	sbc.w	r9, r3, r1
 800182e:	f04f 0200 	mov.w	r2, #0
 8001832:	f04f 0300 	mov.w	r3, #0
 8001836:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800183a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800183e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001842:	4690      	mov	r8, r2
 8001844:	4699      	mov	r9, r3
 8001846:	4623      	mov	r3, r4
 8001848:	eb18 0303 	adds.w	r3, r8, r3
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	462b      	mov	r3, r5
 8001850:	eb49 0303 	adc.w	r3, r9, r3
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	f04f 0300 	mov.w	r3, #0
 800185e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001862:	4629      	mov	r1, r5
 8001864:	024b      	lsls	r3, r1, #9
 8001866:	4621      	mov	r1, r4
 8001868:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800186c:	4621      	mov	r1, r4
 800186e:	024a      	lsls	r2, r1, #9
 8001870:	4610      	mov	r0, r2
 8001872:	4619      	mov	r1, r3
 8001874:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001876:	2200      	movs	r2, #0
 8001878:	62bb      	str	r3, [r7, #40]	@ 0x28
 800187a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800187c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001880:	f7fe fcae 	bl	80001e0 <__aeabi_uldivmod>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4613      	mov	r3, r2
 800188a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800188c:	e058      	b.n	8001940 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800188e:	4b38      	ldr	r3, [pc, #224]	@ (8001970 <HAL_RCC_GetSysClockFreq+0x200>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	099b      	lsrs	r3, r3, #6
 8001894:	2200      	movs	r2, #0
 8001896:	4618      	mov	r0, r3
 8001898:	4611      	mov	r1, r2
 800189a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800189e:	623b      	str	r3, [r7, #32]
 80018a0:	2300      	movs	r3, #0
 80018a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80018a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018a8:	4642      	mov	r2, r8
 80018aa:	464b      	mov	r3, r9
 80018ac:	f04f 0000 	mov.w	r0, #0
 80018b0:	f04f 0100 	mov.w	r1, #0
 80018b4:	0159      	lsls	r1, r3, #5
 80018b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018ba:	0150      	lsls	r0, r2, #5
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4641      	mov	r1, r8
 80018c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80018c6:	4649      	mov	r1, r9
 80018c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	f04f 0300 	mov.w	r3, #0
 80018d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018e0:	ebb2 040a 	subs.w	r4, r2, sl
 80018e4:	eb63 050b 	sbc.w	r5, r3, fp
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	f04f 0300 	mov.w	r3, #0
 80018f0:	00eb      	lsls	r3, r5, #3
 80018f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018f6:	00e2      	lsls	r2, r4, #3
 80018f8:	4614      	mov	r4, r2
 80018fa:	461d      	mov	r5, r3
 80018fc:	4643      	mov	r3, r8
 80018fe:	18e3      	adds	r3, r4, r3
 8001900:	603b      	str	r3, [r7, #0]
 8001902:	464b      	mov	r3, r9
 8001904:	eb45 0303 	adc.w	r3, r5, r3
 8001908:	607b      	str	r3, [r7, #4]
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	f04f 0300 	mov.w	r3, #0
 8001912:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001916:	4629      	mov	r1, r5
 8001918:	028b      	lsls	r3, r1, #10
 800191a:	4621      	mov	r1, r4
 800191c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001920:	4621      	mov	r1, r4
 8001922:	028a      	lsls	r2, r1, #10
 8001924:	4610      	mov	r0, r2
 8001926:	4619      	mov	r1, r3
 8001928:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800192a:	2200      	movs	r2, #0
 800192c:	61bb      	str	r3, [r7, #24]
 800192e:	61fa      	str	r2, [r7, #28]
 8001930:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001934:	f7fe fc54 	bl	80001e0 <__aeabi_uldivmod>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4613      	mov	r3, r2
 800193e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001940:	4b0b      	ldr	r3, [pc, #44]	@ (8001970 <HAL_RCC_GetSysClockFreq+0x200>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	0c1b      	lsrs	r3, r3, #16
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	3301      	adds	r3, #1
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001950:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001952:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001954:	fbb2 f3f3 	udiv	r3, r2, r3
 8001958:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800195a:	e002      	b.n	8001962 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800195c:	4b05      	ldr	r3, [pc, #20]	@ (8001974 <HAL_RCC_GetSysClockFreq+0x204>)
 800195e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001960:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001962:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001964:	4618      	mov	r0, r3
 8001966:	3750      	adds	r7, #80	@ 0x50
 8001968:	46bd      	mov	sp, r7
 800196a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800196e:	bf00      	nop
 8001970:	40023800 	.word	0x40023800
 8001974:	00f42400 	.word	0x00f42400
 8001978:	007a1200 	.word	0x007a1200

0800197c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001980:	4b03      	ldr	r3, [pc, #12]	@ (8001990 <HAL_RCC_GetHCLKFreq+0x14>)
 8001982:	681b      	ldr	r3, [r3, #0]
}
 8001984:	4618      	mov	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	20000000 	.word	0x20000000

08001994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001998:	f7ff fff0 	bl	800197c <HAL_RCC_GetHCLKFreq>
 800199c:	4602      	mov	r2, r0
 800199e:	4b05      	ldr	r3, [pc, #20]	@ (80019b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	0b5b      	lsrs	r3, r3, #13
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	4903      	ldr	r1, [pc, #12]	@ (80019b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019aa:	5ccb      	ldrb	r3, [r1, r3]
 80019ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40023800 	.word	0x40023800
 80019b8:	0800369c 	.word	0x0800369c

080019bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	220f      	movs	r2, #15
 80019ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019cc:	4b12      	ldr	r3, [pc, #72]	@ (8001a18 <HAL_RCC_GetClockConfig+0x5c>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 0203 	and.w	r2, r3, #3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a18 <HAL_RCC_GetClockConfig+0x5c>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a18 <HAL_RCC_GetClockConfig+0x5c>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019f0:	4b09      	ldr	r3, [pc, #36]	@ (8001a18 <HAL_RCC_GetClockConfig+0x5c>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	08db      	lsrs	r3, r3, #3
 80019f6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019fe:	4b07      	ldr	r3, [pc, #28]	@ (8001a1c <HAL_RCC_GetClockConfig+0x60>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0207 	and.w	r2, r3, #7
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	601a      	str	r2, [r3, #0]
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40023c00 	.word	0x40023c00

08001a20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e041      	b.n	8001ab6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d106      	bne.n	8001a4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 f839 	bl	8001abe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2202      	movs	r2, #2
 8001a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3304      	adds	r3, #4
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4610      	mov	r0, r2
 8001a60:	f000 f9b2 	bl	8001dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
	...

08001ad4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d001      	beq.n	8001aec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e044      	b.n	8001b76 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2202      	movs	r2, #2
 8001af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68da      	ldr	r2, [r3, #12]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 0201 	orr.w	r2, r2, #1
 8001b02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a1e      	ldr	r2, [pc, #120]	@ (8001b84 <HAL_TIM_Base_Start_IT+0xb0>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d018      	beq.n	8001b40 <HAL_TIM_Base_Start_IT+0x6c>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b16:	d013      	beq.n	8001b40 <HAL_TIM_Base_Start_IT+0x6c>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a1a      	ldr	r2, [pc, #104]	@ (8001b88 <HAL_TIM_Base_Start_IT+0xb4>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d00e      	beq.n	8001b40 <HAL_TIM_Base_Start_IT+0x6c>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a19      	ldr	r2, [pc, #100]	@ (8001b8c <HAL_TIM_Base_Start_IT+0xb8>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d009      	beq.n	8001b40 <HAL_TIM_Base_Start_IT+0x6c>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a17      	ldr	r2, [pc, #92]	@ (8001b90 <HAL_TIM_Base_Start_IT+0xbc>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d004      	beq.n	8001b40 <HAL_TIM_Base_Start_IT+0x6c>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a16      	ldr	r2, [pc, #88]	@ (8001b94 <HAL_TIM_Base_Start_IT+0xc0>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d111      	bne.n	8001b64 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2b06      	cmp	r3, #6
 8001b50:	d010      	beq.n	8001b74 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f042 0201 	orr.w	r2, r2, #1
 8001b60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b62:	e007      	b.n	8001b74 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 0201 	orr.w	r2, r2, #1
 8001b72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	40010000 	.word	0x40010000
 8001b88:	40000400 	.word	0x40000400
 8001b8c:	40000800 	.word	0x40000800
 8001b90:	40000c00 	.word	0x40000c00
 8001b94:	40014000 	.word	0x40014000

08001b98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d020      	beq.n	8001bfc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d01b      	beq.n	8001bfc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f06f 0202 	mvn.w	r2, #2
 8001bcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f8d2 	bl	8001d8c <HAL_TIM_IC_CaptureCallback>
 8001be8:	e005      	b.n	8001bf6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 f8c4 	bl	8001d78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 f8d5 	bl	8001da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d020      	beq.n	8001c48 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d01b      	beq.n	8001c48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f06f 0204 	mvn.w	r2, #4
 8001c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f8ac 	bl	8001d8c <HAL_TIM_IC_CaptureCallback>
 8001c34:	e005      	b.n	8001c42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f89e 	bl	8001d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f8af 	bl	8001da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d020      	beq.n	8001c94 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f003 0308 	and.w	r3, r3, #8
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d01b      	beq.n	8001c94 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f06f 0208 	mvn.w	r2, #8
 8001c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2204      	movs	r2, #4
 8001c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f886 	bl	8001d8c <HAL_TIM_IC_CaptureCallback>
 8001c80:	e005      	b.n	8001c8e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f878 	bl	8001d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 f889 	bl	8001da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	f003 0310 	and.w	r3, r3, #16
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d020      	beq.n	8001ce0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f003 0310 	and.w	r3, r3, #16
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d01b      	beq.n	8001ce0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f06f 0210 	mvn.w	r2, #16
 8001cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2208      	movs	r2, #8
 8001cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f860 	bl	8001d8c <HAL_TIM_IC_CaptureCallback>
 8001ccc:	e005      	b.n	8001cda <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f852 	bl	8001d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f863 	bl	8001da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00c      	beq.n	8001d04 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d007      	beq.n	8001d04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f06f 0201 	mvn.w	r2, #1
 8001cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7fe fdc0 	bl	8000884 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00c      	beq.n	8001d28 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d007      	beq.n	8001d28 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f8e0 	bl	8001ee8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00c      	beq.n	8001d4c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d007      	beq.n	8001d4c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f834 	bl	8001db4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	f003 0320 	and.w	r3, r3, #32
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00c      	beq.n	8001d70 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f003 0320 	and.w	r3, r3, #32
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d007      	beq.n	8001d70 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f06f 0220 	mvn.w	r2, #32
 8001d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f8b2 	bl	8001ed4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d70:	bf00      	nop
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a37      	ldr	r2, [pc, #220]	@ (8001eb8 <TIM_Base_SetConfig+0xf0>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d00f      	beq.n	8001e00 <TIM_Base_SetConfig+0x38>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001de6:	d00b      	beq.n	8001e00 <TIM_Base_SetConfig+0x38>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a34      	ldr	r2, [pc, #208]	@ (8001ebc <TIM_Base_SetConfig+0xf4>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d007      	beq.n	8001e00 <TIM_Base_SetConfig+0x38>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a33      	ldr	r2, [pc, #204]	@ (8001ec0 <TIM_Base_SetConfig+0xf8>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d003      	beq.n	8001e00 <TIM_Base_SetConfig+0x38>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a32      	ldr	r2, [pc, #200]	@ (8001ec4 <TIM_Base_SetConfig+0xfc>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d108      	bne.n	8001e12 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a28      	ldr	r2, [pc, #160]	@ (8001eb8 <TIM_Base_SetConfig+0xf0>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d01b      	beq.n	8001e52 <TIM_Base_SetConfig+0x8a>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e20:	d017      	beq.n	8001e52 <TIM_Base_SetConfig+0x8a>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a25      	ldr	r2, [pc, #148]	@ (8001ebc <TIM_Base_SetConfig+0xf4>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d013      	beq.n	8001e52 <TIM_Base_SetConfig+0x8a>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a24      	ldr	r2, [pc, #144]	@ (8001ec0 <TIM_Base_SetConfig+0xf8>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d00f      	beq.n	8001e52 <TIM_Base_SetConfig+0x8a>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a23      	ldr	r2, [pc, #140]	@ (8001ec4 <TIM_Base_SetConfig+0xfc>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d00b      	beq.n	8001e52 <TIM_Base_SetConfig+0x8a>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a22      	ldr	r2, [pc, #136]	@ (8001ec8 <TIM_Base_SetConfig+0x100>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d007      	beq.n	8001e52 <TIM_Base_SetConfig+0x8a>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a21      	ldr	r2, [pc, #132]	@ (8001ecc <TIM_Base_SetConfig+0x104>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d003      	beq.n	8001e52 <TIM_Base_SetConfig+0x8a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a20      	ldr	r2, [pc, #128]	@ (8001ed0 <TIM_Base_SetConfig+0x108>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d108      	bne.n	8001e64 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	689a      	ldr	r2, [r3, #8]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a0c      	ldr	r2, [pc, #48]	@ (8001eb8 <TIM_Base_SetConfig+0xf0>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d103      	bne.n	8001e92 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	691a      	ldr	r2, [r3, #16]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f043 0204 	orr.w	r2, r3, #4
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	601a      	str	r2, [r3, #0]
}
 8001eaa:	bf00      	nop
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	40010000 	.word	0x40010000
 8001ebc:	40000400 	.word	0x40000400
 8001ec0:	40000800 	.word	0x40000800
 8001ec4:	40000c00 	.word	0x40000c00
 8001ec8:	40014000 	.word	0x40014000
 8001ecc:	40014400 	.word	0x40014400
 8001ed0:	40014800 	.word	0x40014800

08001ed4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001f06:	2300      	movs	r3, #0
 8001f08:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001f0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f0e:	2b84      	cmp	r3, #132	@ 0x84
 8001f10:	d005      	beq.n	8001f1e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001f12:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	4413      	add	r3, r2
 8001f1a:	3303      	adds	r3, #3
 8001f1c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001f30:	f000 fafc 	bl	800252c <vTaskStartScheduler>
  
  return osOK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001f3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f3c:	b089      	sub	sp, #36	@ 0x24
 8001f3e:	af04      	add	r7, sp, #16
 8001f40:	6078      	str	r0, [r7, #4]
 8001f42:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d020      	beq.n	8001f8e <osThreadCreate+0x54>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d01c      	beq.n	8001f8e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685c      	ldr	r4, [r3, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691e      	ldr	r6, [r3, #16]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff ffc8 	bl	8001efc <makeFreeRtosPriority>
 8001f6c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f76:	9202      	str	r2, [sp, #8]
 8001f78:	9301      	str	r3, [sp, #4]
 8001f7a:	9100      	str	r1, [sp, #0]
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	4632      	mov	r2, r6
 8001f80:	4629      	mov	r1, r5
 8001f82:	4620      	mov	r0, r4
 8001f84:	f000 f8ed 	bl	8002162 <xTaskCreateStatic>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	e01c      	b.n	8001fc8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685c      	ldr	r4, [r3, #4]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f9a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff ffaa 	bl	8001efc <makeFreeRtosPriority>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	f107 030c 	add.w	r3, r7, #12
 8001fae:	9301      	str	r3, [sp, #4]
 8001fb0:	9200      	str	r2, [sp, #0]
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	4632      	mov	r2, r6
 8001fb6:	4629      	mov	r1, r5
 8001fb8:	4620      	mov	r0, r4
 8001fba:	f000 f932 	bl	8002222 <xTaskCreate>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d001      	beq.n	8001fc8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	e000      	b.n	8001fca <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001fd2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b084      	sub	sp, #16
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <osDelay+0x16>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	e000      	b.n	8001fea <osDelay+0x18>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	4618      	mov	r0, r3
 8001fec:	f000 fa68 	bl	80024c0 <vTaskDelay>
  
  return osOK;
 8001ff0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f103 0208 	add.w	r2, r3, #8
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f04f 32ff 	mov.w	r2, #4294967295
 8002012:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f103 0208 	add.w	r2, r3, #8
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f103 0208 	add.w	r2, r3, #8
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	1c5a      	adds	r2, r3, #1
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	601a      	str	r2, [r3, #0]
}
 8002090:	bf00      	nop
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b2:	d103      	bne.n	80020bc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	e00c      	b.n	80020d6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3308      	adds	r3, #8
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	e002      	b.n	80020ca <vListInsert+0x2e>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d2f6      	bcs.n	80020c4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	1c5a      	adds	r2, r3, #1
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	601a      	str	r2, [r3, #0]
}
 8002102:	bf00      	nop
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800210e:	b480      	push	{r7}
 8002110:	b085      	sub	sp, #20
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6892      	ldr	r2, [r2, #8]
 8002124:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6852      	ldr	r2, [r2, #4]
 800212e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	429a      	cmp	r2, r3
 8002138:	d103      	bne.n	8002142 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	1e5a      	subs	r2, r3, #1
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002162:	b580      	push	{r7, lr}
 8002164:	b08e      	sub	sp, #56	@ 0x38
 8002166:	af04      	add	r7, sp, #16
 8002168:	60f8      	str	r0, [r7, #12]
 800216a:	60b9      	str	r1, [r7, #8]
 800216c:	607a      	str	r2, [r7, #4]
 800216e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10b      	bne.n	800218e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800217a:	f383 8811 	msr	BASEPRI, r3
 800217e:	f3bf 8f6f 	isb	sy
 8002182:	f3bf 8f4f 	dsb	sy
 8002186:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002188:	bf00      	nop
 800218a:	bf00      	nop
 800218c:	e7fd      	b.n	800218a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800218e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10b      	bne.n	80021ac <xTaskCreateStatic+0x4a>
	__asm volatile
 8002194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002198:	f383 8811 	msr	BASEPRI, r3
 800219c:	f3bf 8f6f 	isb	sy
 80021a0:	f3bf 8f4f 	dsb	sy
 80021a4:	61fb      	str	r3, [r7, #28]
}
 80021a6:	bf00      	nop
 80021a8:	bf00      	nop
 80021aa:	e7fd      	b.n	80021a8 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80021ac:	23a0      	movs	r3, #160	@ 0xa0
 80021ae:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	2ba0      	cmp	r3, #160	@ 0xa0
 80021b4:	d00b      	beq.n	80021ce <xTaskCreateStatic+0x6c>
	__asm volatile
 80021b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021ba:	f383 8811 	msr	BASEPRI, r3
 80021be:	f3bf 8f6f 	isb	sy
 80021c2:	f3bf 8f4f 	dsb	sy
 80021c6:	61bb      	str	r3, [r7, #24]
}
 80021c8:	bf00      	nop
 80021ca:	bf00      	nop
 80021cc:	e7fd      	b.n	80021ca <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80021ce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80021d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d01e      	beq.n	8002214 <xTaskCreateStatic+0xb2>
 80021d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d01b      	beq.n	8002214 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80021dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021de:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80021e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80021e4:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80021e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e8:	2202      	movs	r2, #2
 80021ea:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80021ee:	2300      	movs	r3, #0
 80021f0:	9303      	str	r3, [sp, #12]
 80021f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f4:	9302      	str	r3, [sp, #8]
 80021f6:	f107 0314 	add.w	r3, r7, #20
 80021fa:	9301      	str	r3, [sp, #4]
 80021fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	68b9      	ldr	r1, [r7, #8]
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f000 f850 	bl	80022ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800220c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800220e:	f000 f8ed 	bl	80023ec <prvAddNewTaskToReadyList>
 8002212:	e001      	b.n	8002218 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002214:	2300      	movs	r3, #0
 8002216:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002218:	697b      	ldr	r3, [r7, #20]
	}
 800221a:	4618      	mov	r0, r3
 800221c:	3728      	adds	r7, #40	@ 0x28
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002222:	b580      	push	{r7, lr}
 8002224:	b08c      	sub	sp, #48	@ 0x30
 8002226:	af04      	add	r7, sp, #16
 8002228:	60f8      	str	r0, [r7, #12]
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	603b      	str	r3, [r7, #0]
 800222e:	4613      	mov	r3, r2
 8002230:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002232:	88fb      	ldrh	r3, [r7, #6]
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4618      	mov	r0, r3
 8002238:	f000 fefe 	bl	8003038 <pvPortMalloc>
 800223c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00e      	beq.n	8002262 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002244:	20a0      	movs	r0, #160	@ 0xa0
 8002246:	f000 fef7 	bl	8003038 <pvPortMalloc>
 800224a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	631a      	str	r2, [r3, #48]	@ 0x30
 8002258:	e005      	b.n	8002266 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800225a:	6978      	ldr	r0, [r7, #20]
 800225c:	f000 ffba 	bl	80031d4 <vPortFree>
 8002260:	e001      	b.n	8002266 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002262:	2300      	movs	r3, #0
 8002264:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d017      	beq.n	800229c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002274:	88fa      	ldrh	r2, [r7, #6]
 8002276:	2300      	movs	r3, #0
 8002278:	9303      	str	r3, [sp, #12]
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	9302      	str	r3, [sp, #8]
 800227e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002280:	9301      	str	r3, [sp, #4]
 8002282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	68b9      	ldr	r1, [r7, #8]
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 f80e 	bl	80022ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002290:	69f8      	ldr	r0, [r7, #28]
 8002292:	f000 f8ab 	bl	80023ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002296:	2301      	movs	r3, #1
 8002298:	61bb      	str	r3, [r7, #24]
 800229a:	e002      	b.n	80022a2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800229c:	f04f 33ff 	mov.w	r3, #4294967295
 80022a0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80022a2:	69bb      	ldr	r3, [r7, #24]
	}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3720      	adds	r7, #32
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b088      	sub	sp, #32
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
 80022b8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80022ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80022c4:	3b01      	subs	r3, #1
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4413      	add	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	f023 0307 	bic.w	r3, r3, #7
 80022d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00b      	beq.n	80022f6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80022de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022e2:	f383 8811 	msr	BASEPRI, r3
 80022e6:	f3bf 8f6f 	isb	sy
 80022ea:	f3bf 8f4f 	dsb	sy
 80022ee:	617b      	str	r3, [r7, #20]
}
 80022f0:	bf00      	nop
 80022f2:	bf00      	nop
 80022f4:	e7fd      	b.n	80022f2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d01f      	beq.n	800233c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022fc:	2300      	movs	r3, #0
 80022fe:	61fb      	str	r3, [r7, #28]
 8002300:	e012      	b.n	8002328 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	4413      	add	r3, r2
 8002308:	7819      	ldrb	r1, [r3, #0]
 800230a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	4413      	add	r3, r2
 8002310:	3334      	adds	r3, #52	@ 0x34
 8002312:	460a      	mov	r2, r1
 8002314:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	4413      	add	r3, r2
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d006      	beq.n	8002330 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	3301      	adds	r3, #1
 8002326:	61fb      	str	r3, [r7, #28]
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	2b0f      	cmp	r3, #15
 800232c:	d9e9      	bls.n	8002302 <prvInitialiseNewTask+0x56>
 800232e:	e000      	b.n	8002332 <prvInitialiseNewTask+0x86>
			{
				break;
 8002330:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800233a:	e003      	b.n	8002344 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800233c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002346:	2b06      	cmp	r3, #6
 8002348:	d901      	bls.n	800234e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800234a:	2306      	movs	r3, #6
 800234c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800234e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002350:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002352:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002356:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002358:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800235a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800235c:	2200      	movs	r2, #0
 800235e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002362:	3304      	adds	r3, #4
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff fe68 	bl	800203a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800236a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800236c:	3318      	adds	r3, #24
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff fe63 	bl	800203a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002376:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002378:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800237a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800237c:	f1c3 0207 	rsb	r2, r3, #7
 8002380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002382:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002386:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002388:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800238a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800238c:	2200      	movs	r2, #0
 800238e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002394:	2200      	movs	r2, #0
 8002396:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800239a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800239c:	334c      	adds	r3, #76	@ 0x4c
 800239e:	224c      	movs	r2, #76	@ 0x4c
 80023a0:	2100      	movs	r1, #0
 80023a2:	4618      	mov	r0, r3
 80023a4:	f001 f836 	bl	8003414 <memset>
 80023a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023aa:	4a0d      	ldr	r2, [pc, #52]	@ (80023e0 <prvInitialiseNewTask+0x134>)
 80023ac:	651a      	str	r2, [r3, #80]	@ 0x50
 80023ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023b0:	4a0c      	ldr	r2, [pc, #48]	@ (80023e4 <prvInitialiseNewTask+0x138>)
 80023b2:	655a      	str	r2, [r3, #84]	@ 0x54
 80023b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023b6:	4a0c      	ldr	r2, [pc, #48]	@ (80023e8 <prvInitialiseNewTask+0x13c>)
 80023b8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	68f9      	ldr	r1, [r7, #12]
 80023be:	69b8      	ldr	r0, [r7, #24]
 80023c0:	f000 fc2a 	bl	8002c18 <pxPortInitialiseStack>
 80023c4:	4602      	mov	r2, r0
 80023c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80023ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d002      	beq.n	80023d6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80023d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80023d6:	bf00      	nop
 80023d8:	3720      	adds	r7, #32
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	200040cc 	.word	0x200040cc
 80023e4:	20004134 	.word	0x20004134
 80023e8:	2000419c 	.word	0x2000419c

080023ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80023f4:	f000 fd40 	bl	8002e78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80023f8:	4b2a      	ldr	r3, [pc, #168]	@ (80024a4 <prvAddNewTaskToReadyList+0xb8>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	3301      	adds	r3, #1
 80023fe:	4a29      	ldr	r2, [pc, #164]	@ (80024a4 <prvAddNewTaskToReadyList+0xb8>)
 8002400:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002402:	4b29      	ldr	r3, [pc, #164]	@ (80024a8 <prvAddNewTaskToReadyList+0xbc>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d109      	bne.n	800241e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800240a:	4a27      	ldr	r2, [pc, #156]	@ (80024a8 <prvAddNewTaskToReadyList+0xbc>)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002410:	4b24      	ldr	r3, [pc, #144]	@ (80024a4 <prvAddNewTaskToReadyList+0xb8>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d110      	bne.n	800243a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002418:	f000 fad4 	bl	80029c4 <prvInitialiseTaskLists>
 800241c:	e00d      	b.n	800243a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800241e:	4b23      	ldr	r3, [pc, #140]	@ (80024ac <prvAddNewTaskToReadyList+0xc0>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d109      	bne.n	800243a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002426:	4b20      	ldr	r3, [pc, #128]	@ (80024a8 <prvAddNewTaskToReadyList+0xbc>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002430:	429a      	cmp	r2, r3
 8002432:	d802      	bhi.n	800243a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002434:	4a1c      	ldr	r2, [pc, #112]	@ (80024a8 <prvAddNewTaskToReadyList+0xbc>)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800243a:	4b1d      	ldr	r3, [pc, #116]	@ (80024b0 <prvAddNewTaskToReadyList+0xc4>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	3301      	adds	r3, #1
 8002440:	4a1b      	ldr	r2, [pc, #108]	@ (80024b0 <prvAddNewTaskToReadyList+0xc4>)
 8002442:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002448:	2201      	movs	r2, #1
 800244a:	409a      	lsls	r2, r3
 800244c:	4b19      	ldr	r3, [pc, #100]	@ (80024b4 <prvAddNewTaskToReadyList+0xc8>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4313      	orrs	r3, r2
 8002452:	4a18      	ldr	r2, [pc, #96]	@ (80024b4 <prvAddNewTaskToReadyList+0xc8>)
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800245a:	4613      	mov	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4a15      	ldr	r2, [pc, #84]	@ (80024b8 <prvAddNewTaskToReadyList+0xcc>)
 8002464:	441a      	add	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	3304      	adds	r3, #4
 800246a:	4619      	mov	r1, r3
 800246c:	4610      	mov	r0, r2
 800246e:	f7ff fdf1 	bl	8002054 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002472:	f000 fd33 	bl	8002edc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002476:	4b0d      	ldr	r3, [pc, #52]	@ (80024ac <prvAddNewTaskToReadyList+0xc0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00e      	beq.n	800249c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800247e:	4b0a      	ldr	r3, [pc, #40]	@ (80024a8 <prvAddNewTaskToReadyList+0xbc>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002488:	429a      	cmp	r2, r3
 800248a:	d207      	bcs.n	800249c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800248c:	4b0b      	ldr	r3, [pc, #44]	@ (80024bc <prvAddNewTaskToReadyList+0xd0>)
 800248e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	f3bf 8f4f 	dsb	sy
 8002498:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800249c:	bf00      	nop
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	20000478 	.word	0x20000478
 80024a8:	20000378 	.word	0x20000378
 80024ac:	20000484 	.word	0x20000484
 80024b0:	20000494 	.word	0x20000494
 80024b4:	20000480 	.word	0x20000480
 80024b8:	2000037c 	.word	0x2000037c
 80024bc:	e000ed04 	.word	0xe000ed04

080024c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80024c8:	2300      	movs	r3, #0
 80024ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d018      	beq.n	8002504 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80024d2:	4b14      	ldr	r3, [pc, #80]	@ (8002524 <vTaskDelay+0x64>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00b      	beq.n	80024f2 <vTaskDelay+0x32>
	__asm volatile
 80024da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024de:	f383 8811 	msr	BASEPRI, r3
 80024e2:	f3bf 8f6f 	isb	sy
 80024e6:	f3bf 8f4f 	dsb	sy
 80024ea:	60bb      	str	r3, [r7, #8]
}
 80024ec:	bf00      	nop
 80024ee:	bf00      	nop
 80024f0:	e7fd      	b.n	80024ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80024f2:	f000 f885 	bl	8002600 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80024f6:	2100      	movs	r1, #0
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 fb27 	bl	8002b4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80024fe:	f000 f88d 	bl	800261c <xTaskResumeAll>
 8002502:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d107      	bne.n	800251a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800250a:	4b07      	ldr	r3, [pc, #28]	@ (8002528 <vTaskDelay+0x68>)
 800250c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	f3bf 8f4f 	dsb	sy
 8002516:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800251a:	bf00      	nop
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	200004a0 	.word	0x200004a0
 8002528:	e000ed04 	.word	0xe000ed04

0800252c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08a      	sub	sp, #40	@ 0x28
 8002530:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002532:	2300      	movs	r3, #0
 8002534:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002536:	2300      	movs	r3, #0
 8002538:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800253a:	463a      	mov	r2, r7
 800253c:	1d39      	adds	r1, r7, #4
 800253e:	f107 0308 	add.w	r3, r7, #8
 8002542:	4618      	mov	r0, r3
 8002544:	f7fd ffe2 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002548:	6839      	ldr	r1, [r7, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	9202      	str	r2, [sp, #8]
 8002550:	9301      	str	r3, [sp, #4]
 8002552:	2300      	movs	r3, #0
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	2300      	movs	r3, #0
 8002558:	460a      	mov	r2, r1
 800255a:	4921      	ldr	r1, [pc, #132]	@ (80025e0 <vTaskStartScheduler+0xb4>)
 800255c:	4821      	ldr	r0, [pc, #132]	@ (80025e4 <vTaskStartScheduler+0xb8>)
 800255e:	f7ff fe00 	bl	8002162 <xTaskCreateStatic>
 8002562:	4603      	mov	r3, r0
 8002564:	4a20      	ldr	r2, [pc, #128]	@ (80025e8 <vTaskStartScheduler+0xbc>)
 8002566:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002568:	4b1f      	ldr	r3, [pc, #124]	@ (80025e8 <vTaskStartScheduler+0xbc>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d002      	beq.n	8002576 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002570:	2301      	movs	r3, #1
 8002572:	617b      	str	r3, [r7, #20]
 8002574:	e001      	b.n	800257a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002576:	2300      	movs	r3, #0
 8002578:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d11b      	bne.n	80025b8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8002580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002584:	f383 8811 	msr	BASEPRI, r3
 8002588:	f3bf 8f6f 	isb	sy
 800258c:	f3bf 8f4f 	dsb	sy
 8002590:	613b      	str	r3, [r7, #16]
}
 8002592:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002594:	4b15      	ldr	r3, [pc, #84]	@ (80025ec <vTaskStartScheduler+0xc0>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	334c      	adds	r3, #76	@ 0x4c
 800259a:	4a15      	ldr	r2, [pc, #84]	@ (80025f0 <vTaskStartScheduler+0xc4>)
 800259c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800259e:	4b15      	ldr	r3, [pc, #84]	@ (80025f4 <vTaskStartScheduler+0xc8>)
 80025a0:	f04f 32ff 	mov.w	r2, #4294967295
 80025a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80025a6:	4b14      	ldr	r3, [pc, #80]	@ (80025f8 <vTaskStartScheduler+0xcc>)
 80025a8:	2201      	movs	r2, #1
 80025aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80025ac:	4b13      	ldr	r3, [pc, #76]	@ (80025fc <vTaskStartScheduler+0xd0>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80025b2:	f000 fbbd 	bl	8002d30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80025b6:	e00f      	b.n	80025d8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025be:	d10b      	bne.n	80025d8 <vTaskStartScheduler+0xac>
	__asm volatile
 80025c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025c4:	f383 8811 	msr	BASEPRI, r3
 80025c8:	f3bf 8f6f 	isb	sy
 80025cc:	f3bf 8f4f 	dsb	sy
 80025d0:	60fb      	str	r3, [r7, #12]
}
 80025d2:	bf00      	nop
 80025d4:	bf00      	nop
 80025d6:	e7fd      	b.n	80025d4 <vTaskStartScheduler+0xa8>
}
 80025d8:	bf00      	nop
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	08003684 	.word	0x08003684
 80025e4:	08002995 	.word	0x08002995
 80025e8:	2000049c 	.word	0x2000049c
 80025ec:	20000378 	.word	0x20000378
 80025f0:	20000010 	.word	0x20000010
 80025f4:	20000498 	.word	0x20000498
 80025f8:	20000484 	.word	0x20000484
 80025fc:	2000047c 	.word	0x2000047c

08002600 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002604:	4b04      	ldr	r3, [pc, #16]	@ (8002618 <vTaskSuspendAll+0x18>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	3301      	adds	r3, #1
 800260a:	4a03      	ldr	r2, [pc, #12]	@ (8002618 <vTaskSuspendAll+0x18>)
 800260c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800260e:	bf00      	nop
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	200004a0 	.word	0x200004a0

0800261c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002622:	2300      	movs	r3, #0
 8002624:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002626:	2300      	movs	r3, #0
 8002628:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800262a:	4b42      	ldr	r3, [pc, #264]	@ (8002734 <xTaskResumeAll+0x118>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10b      	bne.n	800264a <xTaskResumeAll+0x2e>
	__asm volatile
 8002632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002636:	f383 8811 	msr	BASEPRI, r3
 800263a:	f3bf 8f6f 	isb	sy
 800263e:	f3bf 8f4f 	dsb	sy
 8002642:	603b      	str	r3, [r7, #0]
}
 8002644:	bf00      	nop
 8002646:	bf00      	nop
 8002648:	e7fd      	b.n	8002646 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800264a:	f000 fc15 	bl	8002e78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800264e:	4b39      	ldr	r3, [pc, #228]	@ (8002734 <xTaskResumeAll+0x118>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	3b01      	subs	r3, #1
 8002654:	4a37      	ldr	r2, [pc, #220]	@ (8002734 <xTaskResumeAll+0x118>)
 8002656:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002658:	4b36      	ldr	r3, [pc, #216]	@ (8002734 <xTaskResumeAll+0x118>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d161      	bne.n	8002724 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002660:	4b35      	ldr	r3, [pc, #212]	@ (8002738 <xTaskResumeAll+0x11c>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d05d      	beq.n	8002724 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002668:	e02e      	b.n	80026c8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800266a:	4b34      	ldr	r3, [pc, #208]	@ (800273c <xTaskResumeAll+0x120>)
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	3318      	adds	r3, #24
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff fd49 	bl	800210e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	3304      	adds	r3, #4
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff fd44 	bl	800210e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800268a:	2201      	movs	r2, #1
 800268c:	409a      	lsls	r2, r3
 800268e:	4b2c      	ldr	r3, [pc, #176]	@ (8002740 <xTaskResumeAll+0x124>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4313      	orrs	r3, r2
 8002694:	4a2a      	ldr	r2, [pc, #168]	@ (8002740 <xTaskResumeAll+0x124>)
 8002696:	6013      	str	r3, [r2, #0]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800269c:	4613      	mov	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4a27      	ldr	r2, [pc, #156]	@ (8002744 <xTaskResumeAll+0x128>)
 80026a6:	441a      	add	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	3304      	adds	r3, #4
 80026ac:	4619      	mov	r1, r3
 80026ae:	4610      	mov	r0, r2
 80026b0:	f7ff fcd0 	bl	8002054 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026b8:	4b23      	ldr	r3, [pc, #140]	@ (8002748 <xTaskResumeAll+0x12c>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026be:	429a      	cmp	r2, r3
 80026c0:	d302      	bcc.n	80026c8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80026c2:	4b22      	ldr	r3, [pc, #136]	@ (800274c <xTaskResumeAll+0x130>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026c8:	4b1c      	ldr	r3, [pc, #112]	@ (800273c <xTaskResumeAll+0x120>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1cc      	bne.n	800266a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80026d6:	f000 fa19 	bl	8002b0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80026da:	4b1d      	ldr	r3, [pc, #116]	@ (8002750 <xTaskResumeAll+0x134>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d010      	beq.n	8002708 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80026e6:	f000 f837 	bl	8002758 <xTaskIncrementTick>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d002      	beq.n	80026f6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80026f0:	4b16      	ldr	r3, [pc, #88]	@ (800274c <xTaskResumeAll+0x130>)
 80026f2:	2201      	movs	r2, #1
 80026f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	3b01      	subs	r3, #1
 80026fa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1f1      	bne.n	80026e6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002702:	4b13      	ldr	r3, [pc, #76]	@ (8002750 <xTaskResumeAll+0x134>)
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002708:	4b10      	ldr	r3, [pc, #64]	@ (800274c <xTaskResumeAll+0x130>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d009      	beq.n	8002724 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002710:	2301      	movs	r3, #1
 8002712:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002714:	4b0f      	ldr	r3, [pc, #60]	@ (8002754 <xTaskResumeAll+0x138>)
 8002716:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	f3bf 8f4f 	dsb	sy
 8002720:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002724:	f000 fbda 	bl	8002edc <vPortExitCritical>

	return xAlreadyYielded;
 8002728:	68bb      	ldr	r3, [r7, #8]
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	200004a0 	.word	0x200004a0
 8002738:	20000478 	.word	0x20000478
 800273c:	20000438 	.word	0x20000438
 8002740:	20000480 	.word	0x20000480
 8002744:	2000037c 	.word	0x2000037c
 8002748:	20000378 	.word	0x20000378
 800274c:	2000048c 	.word	0x2000048c
 8002750:	20000488 	.word	0x20000488
 8002754:	e000ed04 	.word	0xe000ed04

08002758 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002762:	4b4f      	ldr	r3, [pc, #316]	@ (80028a0 <xTaskIncrementTick+0x148>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2b00      	cmp	r3, #0
 8002768:	f040 808f 	bne.w	800288a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800276c:	4b4d      	ldr	r3, [pc, #308]	@ (80028a4 <xTaskIncrementTick+0x14c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	3301      	adds	r3, #1
 8002772:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002774:	4a4b      	ldr	r2, [pc, #300]	@ (80028a4 <xTaskIncrementTick+0x14c>)
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d121      	bne.n	80027c4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002780:	4b49      	ldr	r3, [pc, #292]	@ (80028a8 <xTaskIncrementTick+0x150>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00b      	beq.n	80027a2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800278a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800278e:	f383 8811 	msr	BASEPRI, r3
 8002792:	f3bf 8f6f 	isb	sy
 8002796:	f3bf 8f4f 	dsb	sy
 800279a:	603b      	str	r3, [r7, #0]
}
 800279c:	bf00      	nop
 800279e:	bf00      	nop
 80027a0:	e7fd      	b.n	800279e <xTaskIncrementTick+0x46>
 80027a2:	4b41      	ldr	r3, [pc, #260]	@ (80028a8 <xTaskIncrementTick+0x150>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	4b40      	ldr	r3, [pc, #256]	@ (80028ac <xTaskIncrementTick+0x154>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a3e      	ldr	r2, [pc, #248]	@ (80028a8 <xTaskIncrementTick+0x150>)
 80027ae:	6013      	str	r3, [r2, #0]
 80027b0:	4a3e      	ldr	r2, [pc, #248]	@ (80028ac <xTaskIncrementTick+0x154>)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	4b3e      	ldr	r3, [pc, #248]	@ (80028b0 <xTaskIncrementTick+0x158>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	3301      	adds	r3, #1
 80027bc:	4a3c      	ldr	r2, [pc, #240]	@ (80028b0 <xTaskIncrementTick+0x158>)
 80027be:	6013      	str	r3, [r2, #0]
 80027c0:	f000 f9a4 	bl	8002b0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80027c4:	4b3b      	ldr	r3, [pc, #236]	@ (80028b4 <xTaskIncrementTick+0x15c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d348      	bcc.n	8002860 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027ce:	4b36      	ldr	r3, [pc, #216]	@ (80028a8 <xTaskIncrementTick+0x150>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d104      	bne.n	80027e2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027d8:	4b36      	ldr	r3, [pc, #216]	@ (80028b4 <xTaskIncrementTick+0x15c>)
 80027da:	f04f 32ff 	mov.w	r2, #4294967295
 80027de:	601a      	str	r2, [r3, #0]
					break;
 80027e0:	e03e      	b.n	8002860 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027e2:	4b31      	ldr	r3, [pc, #196]	@ (80028a8 <xTaskIncrementTick+0x150>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d203      	bcs.n	8002802 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80027fa:	4a2e      	ldr	r2, [pc, #184]	@ (80028b4 <xTaskIncrementTick+0x15c>)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002800:	e02e      	b.n	8002860 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	3304      	adds	r3, #4
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff fc81 	bl	800210e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002810:	2b00      	cmp	r3, #0
 8002812:	d004      	beq.n	800281e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	3318      	adds	r3, #24
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff fc78 	bl	800210e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002822:	2201      	movs	r2, #1
 8002824:	409a      	lsls	r2, r3
 8002826:	4b24      	ldr	r3, [pc, #144]	@ (80028b8 <xTaskIncrementTick+0x160>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4313      	orrs	r3, r2
 800282c:	4a22      	ldr	r2, [pc, #136]	@ (80028b8 <xTaskIncrementTick+0x160>)
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4a1f      	ldr	r2, [pc, #124]	@ (80028bc <xTaskIncrementTick+0x164>)
 800283e:	441a      	add	r2, r3
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	3304      	adds	r3, #4
 8002844:	4619      	mov	r1, r3
 8002846:	4610      	mov	r0, r2
 8002848:	f7ff fc04 	bl	8002054 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002850:	4b1b      	ldr	r3, [pc, #108]	@ (80028c0 <xTaskIncrementTick+0x168>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002856:	429a      	cmp	r2, r3
 8002858:	d3b9      	bcc.n	80027ce <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800285a:	2301      	movs	r3, #1
 800285c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800285e:	e7b6      	b.n	80027ce <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002860:	4b17      	ldr	r3, [pc, #92]	@ (80028c0 <xTaskIncrementTick+0x168>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002866:	4915      	ldr	r1, [pc, #84]	@ (80028bc <xTaskIncrementTick+0x164>)
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d901      	bls.n	800287c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8002878:	2301      	movs	r3, #1
 800287a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800287c:	4b11      	ldr	r3, [pc, #68]	@ (80028c4 <xTaskIncrementTick+0x16c>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d007      	beq.n	8002894 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002884:	2301      	movs	r3, #1
 8002886:	617b      	str	r3, [r7, #20]
 8002888:	e004      	b.n	8002894 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800288a:	4b0f      	ldr	r3, [pc, #60]	@ (80028c8 <xTaskIncrementTick+0x170>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	3301      	adds	r3, #1
 8002890:	4a0d      	ldr	r2, [pc, #52]	@ (80028c8 <xTaskIncrementTick+0x170>)
 8002892:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002894:	697b      	ldr	r3, [r7, #20]
}
 8002896:	4618      	mov	r0, r3
 8002898:	3718      	adds	r7, #24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	200004a0 	.word	0x200004a0
 80028a4:	2000047c 	.word	0x2000047c
 80028a8:	20000430 	.word	0x20000430
 80028ac:	20000434 	.word	0x20000434
 80028b0:	20000490 	.word	0x20000490
 80028b4:	20000498 	.word	0x20000498
 80028b8:	20000480 	.word	0x20000480
 80028bc:	2000037c 	.word	0x2000037c
 80028c0:	20000378 	.word	0x20000378
 80028c4:	2000048c 	.word	0x2000048c
 80028c8:	20000488 	.word	0x20000488

080028cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80028cc:	b480      	push	{r7}
 80028ce:	b087      	sub	sp, #28
 80028d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80028d2:	4b2a      	ldr	r3, [pc, #168]	@ (800297c <vTaskSwitchContext+0xb0>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80028da:	4b29      	ldr	r3, [pc, #164]	@ (8002980 <vTaskSwitchContext+0xb4>)
 80028dc:	2201      	movs	r2, #1
 80028de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80028e0:	e045      	b.n	800296e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80028e2:	4b27      	ldr	r3, [pc, #156]	@ (8002980 <vTaskSwitchContext+0xb4>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028e8:	4b26      	ldr	r3, [pc, #152]	@ (8002984 <vTaskSwitchContext+0xb8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	fab3 f383 	clz	r3, r3
 80028f4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80028f6:	7afb      	ldrb	r3, [r7, #11]
 80028f8:	f1c3 031f 	rsb	r3, r3, #31
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	4922      	ldr	r1, [pc, #136]	@ (8002988 <vTaskSwitchContext+0xbc>)
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	4613      	mov	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10b      	bne.n	800292a <vTaskSwitchContext+0x5e>
	__asm volatile
 8002912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002916:	f383 8811 	msr	BASEPRI, r3
 800291a:	f3bf 8f6f 	isb	sy
 800291e:	f3bf 8f4f 	dsb	sy
 8002922:	607b      	str	r3, [r7, #4]
}
 8002924:	bf00      	nop
 8002926:	bf00      	nop
 8002928:	e7fd      	b.n	8002926 <vTaskSwitchContext+0x5a>
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	4613      	mov	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4a14      	ldr	r2, [pc, #80]	@ (8002988 <vTaskSwitchContext+0xbc>)
 8002936:	4413      	add	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	605a      	str	r2, [r3, #4]
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	3308      	adds	r3, #8
 800294c:	429a      	cmp	r2, r3
 800294e:	d104      	bne.n	800295a <vTaskSwitchContext+0x8e>
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	4a0a      	ldr	r2, [pc, #40]	@ (800298c <vTaskSwitchContext+0xc0>)
 8002962:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002964:	4b09      	ldr	r3, [pc, #36]	@ (800298c <vTaskSwitchContext+0xc0>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	334c      	adds	r3, #76	@ 0x4c
 800296a:	4a09      	ldr	r2, [pc, #36]	@ (8002990 <vTaskSwitchContext+0xc4>)
 800296c:	6013      	str	r3, [r2, #0]
}
 800296e:	bf00      	nop
 8002970:	371c      	adds	r7, #28
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	200004a0 	.word	0x200004a0
 8002980:	2000048c 	.word	0x2000048c
 8002984:	20000480 	.word	0x20000480
 8002988:	2000037c 	.word	0x2000037c
 800298c:	20000378 	.word	0x20000378
 8002990:	20000010 	.word	0x20000010

08002994 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800299c:	f000 f852 	bl	8002a44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80029a0:	4b06      	ldr	r3, [pc, #24]	@ (80029bc <prvIdleTask+0x28>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d9f9      	bls.n	800299c <prvIdleTask+0x8>
			{
				taskYIELD();
 80029a8:	4b05      	ldr	r3, [pc, #20]	@ (80029c0 <prvIdleTask+0x2c>)
 80029aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	f3bf 8f4f 	dsb	sy
 80029b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80029b8:	e7f0      	b.n	800299c <prvIdleTask+0x8>
 80029ba:	bf00      	nop
 80029bc:	2000037c 	.word	0x2000037c
 80029c0:	e000ed04 	.word	0xe000ed04

080029c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80029ca:	2300      	movs	r3, #0
 80029cc:	607b      	str	r3, [r7, #4]
 80029ce:	e00c      	b.n	80029ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	4613      	mov	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4a12      	ldr	r2, [pc, #72]	@ (8002a24 <prvInitialiseTaskLists+0x60>)
 80029dc:	4413      	add	r3, r2
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff fb0b 	bl	8001ffa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3301      	adds	r3, #1
 80029e8:	607b      	str	r3, [r7, #4]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b06      	cmp	r3, #6
 80029ee:	d9ef      	bls.n	80029d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80029f0:	480d      	ldr	r0, [pc, #52]	@ (8002a28 <prvInitialiseTaskLists+0x64>)
 80029f2:	f7ff fb02 	bl	8001ffa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80029f6:	480d      	ldr	r0, [pc, #52]	@ (8002a2c <prvInitialiseTaskLists+0x68>)
 80029f8:	f7ff faff 	bl	8001ffa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80029fc:	480c      	ldr	r0, [pc, #48]	@ (8002a30 <prvInitialiseTaskLists+0x6c>)
 80029fe:	f7ff fafc 	bl	8001ffa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002a02:	480c      	ldr	r0, [pc, #48]	@ (8002a34 <prvInitialiseTaskLists+0x70>)
 8002a04:	f7ff faf9 	bl	8001ffa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002a08:	480b      	ldr	r0, [pc, #44]	@ (8002a38 <prvInitialiseTaskLists+0x74>)
 8002a0a:	f7ff faf6 	bl	8001ffa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a3c <prvInitialiseTaskLists+0x78>)
 8002a10:	4a05      	ldr	r2, [pc, #20]	@ (8002a28 <prvInitialiseTaskLists+0x64>)
 8002a12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002a14:	4b0a      	ldr	r3, [pc, #40]	@ (8002a40 <prvInitialiseTaskLists+0x7c>)
 8002a16:	4a05      	ldr	r2, [pc, #20]	@ (8002a2c <prvInitialiseTaskLists+0x68>)
 8002a18:	601a      	str	r2, [r3, #0]
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	2000037c 	.word	0x2000037c
 8002a28:	20000408 	.word	0x20000408
 8002a2c:	2000041c 	.word	0x2000041c
 8002a30:	20000438 	.word	0x20000438
 8002a34:	2000044c 	.word	0x2000044c
 8002a38:	20000464 	.word	0x20000464
 8002a3c:	20000430 	.word	0x20000430
 8002a40:	20000434 	.word	0x20000434

08002a44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a4a:	e019      	b.n	8002a80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002a4c:	f000 fa14 	bl	8002e78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a50:	4b10      	ldr	r3, [pc, #64]	@ (8002a94 <prvCheckTasksWaitingTermination+0x50>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3304      	adds	r3, #4
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff fb56 	bl	800210e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002a62:	4b0d      	ldr	r3, [pc, #52]	@ (8002a98 <prvCheckTasksWaitingTermination+0x54>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	4a0b      	ldr	r2, [pc, #44]	@ (8002a98 <prvCheckTasksWaitingTermination+0x54>)
 8002a6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a9c <prvCheckTasksWaitingTermination+0x58>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	3b01      	subs	r3, #1
 8002a72:	4a0a      	ldr	r2, [pc, #40]	@ (8002a9c <prvCheckTasksWaitingTermination+0x58>)
 8002a74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002a76:	f000 fa31 	bl	8002edc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f810 	bl	8002aa0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a80:	4b06      	ldr	r3, [pc, #24]	@ (8002a9c <prvCheckTasksWaitingTermination+0x58>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1e1      	bne.n	8002a4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002a88:	bf00      	nop
 8002a8a:	bf00      	nop
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	2000044c 	.word	0x2000044c
 8002a98:	20000478 	.word	0x20000478
 8002a9c:	20000460 	.word	0x20000460

08002aa0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	334c      	adds	r3, #76	@ 0x4c
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 fcb9 	bl	8003424 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d108      	bne.n	8002ace <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f000 fb87 	bl	80031d4 <vPortFree>
				vPortFree( pxTCB );
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 fb84 	bl	80031d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002acc:	e019      	b.n	8002b02 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d103      	bne.n	8002ae0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 fb7b 	bl	80031d4 <vPortFree>
	}
 8002ade:	e010      	b.n	8002b02 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d00b      	beq.n	8002b02 <prvDeleteTCB+0x62>
	__asm volatile
 8002aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aee:	f383 8811 	msr	BASEPRI, r3
 8002af2:	f3bf 8f6f 	isb	sy
 8002af6:	f3bf 8f4f 	dsb	sy
 8002afa:	60fb      	str	r3, [r7, #12]
}
 8002afc:	bf00      	nop
 8002afe:	bf00      	nop
 8002b00:	e7fd      	b.n	8002afe <prvDeleteTCB+0x5e>
	}
 8002b02:	bf00      	nop
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
	...

08002b0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b12:	4b0c      	ldr	r3, [pc, #48]	@ (8002b44 <prvResetNextTaskUnblockTime+0x38>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d104      	bne.n	8002b26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b48 <prvResetNextTaskUnblockTime+0x3c>)
 8002b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8002b22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002b24:	e008      	b.n	8002b38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b26:	4b07      	ldr	r3, [pc, #28]	@ (8002b44 <prvResetNextTaskUnblockTime+0x38>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	4a04      	ldr	r2, [pc, #16]	@ (8002b48 <prvResetNextTaskUnblockTime+0x3c>)
 8002b36:	6013      	str	r3, [r2, #0]
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	20000430 	.word	0x20000430
 8002b48:	20000498 	.word	0x20000498

08002b4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002b56:	4b29      	ldr	r3, [pc, #164]	@ (8002bfc <prvAddCurrentTaskToDelayedList+0xb0>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002b5c:	4b28      	ldr	r3, [pc, #160]	@ (8002c00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	3304      	adds	r3, #4
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff fad3 	bl	800210e <uxListRemove>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10b      	bne.n	8002b86 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002b6e:	4b24      	ldr	r3, [pc, #144]	@ (8002c00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b74:	2201      	movs	r2, #1
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	43da      	mvns	r2, r3
 8002b7c:	4b21      	ldr	r3, [pc, #132]	@ (8002c04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4013      	ands	r3, r2
 8002b82:	4a20      	ldr	r2, [pc, #128]	@ (8002c04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002b84:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8c:	d10a      	bne.n	8002ba4 <prvAddCurrentTaskToDelayedList+0x58>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d007      	beq.n	8002ba4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002b94:	4b1a      	ldr	r3, [pc, #104]	@ (8002c00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	3304      	adds	r3, #4
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	481a      	ldr	r0, [pc, #104]	@ (8002c08 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002b9e:	f7ff fa59 	bl	8002054 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002ba2:	e026      	b.n	8002bf2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4413      	add	r3, r2
 8002baa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002bac:	4b14      	ldr	r3, [pc, #80]	@ (8002c00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68ba      	ldr	r2, [r7, #8]
 8002bb2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002bb4:	68ba      	ldr	r2, [r7, #8]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d209      	bcs.n	8002bd0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002bbc:	4b13      	ldr	r3, [pc, #76]	@ (8002c0c <prvAddCurrentTaskToDelayedList+0xc0>)
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8002c00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4610      	mov	r0, r2
 8002bca:	f7ff fa67 	bl	800209c <vListInsert>
}
 8002bce:	e010      	b.n	8002bf2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8002c10 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8002c00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	3304      	adds	r3, #4
 8002bda:	4619      	mov	r1, r3
 8002bdc:	4610      	mov	r0, r2
 8002bde:	f7ff fa5d 	bl	800209c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002be2:	4b0c      	ldr	r3, [pc, #48]	@ (8002c14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68ba      	ldr	r2, [r7, #8]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d202      	bcs.n	8002bf2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002bec:	4a09      	ldr	r2, [pc, #36]	@ (8002c14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	6013      	str	r3, [r2, #0]
}
 8002bf2:	bf00      	nop
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	2000047c 	.word	0x2000047c
 8002c00:	20000378 	.word	0x20000378
 8002c04:	20000480 	.word	0x20000480
 8002c08:	20000464 	.word	0x20000464
 8002c0c:	20000434 	.word	0x20000434
 8002c10:	20000430 	.word	0x20000430
 8002c14:	20000498 	.word	0x20000498

08002c18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	3b04      	subs	r3, #4
 8002c28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002c30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	3b04      	subs	r3, #4
 8002c36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	f023 0201 	bic.w	r2, r3, #1
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	3b04      	subs	r3, #4
 8002c46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002c48:	4a0c      	ldr	r2, [pc, #48]	@ (8002c7c <pxPortInitialiseStack+0x64>)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	3b14      	subs	r3, #20
 8002c52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	3b04      	subs	r3, #4
 8002c5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f06f 0202 	mvn.w	r2, #2
 8002c66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	3b20      	subs	r3, #32
 8002c6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr
 8002c7c:	08002c81 	.word	0x08002c81

08002c80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002c86:	2300      	movs	r3, #0
 8002c88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002c8a:	4b13      	ldr	r3, [pc, #76]	@ (8002cd8 <prvTaskExitError+0x58>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c92:	d00b      	beq.n	8002cac <prvTaskExitError+0x2c>
	__asm volatile
 8002c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c98:	f383 8811 	msr	BASEPRI, r3
 8002c9c:	f3bf 8f6f 	isb	sy
 8002ca0:	f3bf 8f4f 	dsb	sy
 8002ca4:	60fb      	str	r3, [r7, #12]
}
 8002ca6:	bf00      	nop
 8002ca8:	bf00      	nop
 8002caa:	e7fd      	b.n	8002ca8 <prvTaskExitError+0x28>
	__asm volatile
 8002cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cb0:	f383 8811 	msr	BASEPRI, r3
 8002cb4:	f3bf 8f6f 	isb	sy
 8002cb8:	f3bf 8f4f 	dsb	sy
 8002cbc:	60bb      	str	r3, [r7, #8]
}
 8002cbe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002cc0:	bf00      	nop
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0fc      	beq.n	8002cc2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002cc8:	bf00      	nop
 8002cca:	bf00      	nop
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	2000000c 	.word	0x2000000c
 8002cdc:	00000000 	.word	0x00000000

08002ce0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002ce0:	4b07      	ldr	r3, [pc, #28]	@ (8002d00 <pxCurrentTCBConst2>)
 8002ce2:	6819      	ldr	r1, [r3, #0]
 8002ce4:	6808      	ldr	r0, [r1, #0]
 8002ce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cea:	f380 8809 	msr	PSP, r0
 8002cee:	f3bf 8f6f 	isb	sy
 8002cf2:	f04f 0000 	mov.w	r0, #0
 8002cf6:	f380 8811 	msr	BASEPRI, r0
 8002cfa:	4770      	bx	lr
 8002cfc:	f3af 8000 	nop.w

08002d00 <pxCurrentTCBConst2>:
 8002d00:	20000378 	.word	0x20000378
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002d04:	bf00      	nop
 8002d06:	bf00      	nop

08002d08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002d08:	4808      	ldr	r0, [pc, #32]	@ (8002d2c <prvPortStartFirstTask+0x24>)
 8002d0a:	6800      	ldr	r0, [r0, #0]
 8002d0c:	6800      	ldr	r0, [r0, #0]
 8002d0e:	f380 8808 	msr	MSP, r0
 8002d12:	f04f 0000 	mov.w	r0, #0
 8002d16:	f380 8814 	msr	CONTROL, r0
 8002d1a:	b662      	cpsie	i
 8002d1c:	b661      	cpsie	f
 8002d1e:	f3bf 8f4f 	dsb	sy
 8002d22:	f3bf 8f6f 	isb	sy
 8002d26:	df00      	svc	0
 8002d28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002d2a:	bf00      	nop
 8002d2c:	e000ed08 	.word	0xe000ed08

08002d30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002d36:	4b47      	ldr	r3, [pc, #284]	@ (8002e54 <xPortStartScheduler+0x124>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a47      	ldr	r2, [pc, #284]	@ (8002e58 <xPortStartScheduler+0x128>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d10b      	bne.n	8002d58 <xPortStartScheduler+0x28>
	__asm volatile
 8002d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d44:	f383 8811 	msr	BASEPRI, r3
 8002d48:	f3bf 8f6f 	isb	sy
 8002d4c:	f3bf 8f4f 	dsb	sy
 8002d50:	60fb      	str	r3, [r7, #12]
}
 8002d52:	bf00      	nop
 8002d54:	bf00      	nop
 8002d56:	e7fd      	b.n	8002d54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002d58:	4b3e      	ldr	r3, [pc, #248]	@ (8002e54 <xPortStartScheduler+0x124>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a3f      	ldr	r2, [pc, #252]	@ (8002e5c <xPortStartScheduler+0x12c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d10b      	bne.n	8002d7a <xPortStartScheduler+0x4a>
	__asm volatile
 8002d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d66:	f383 8811 	msr	BASEPRI, r3
 8002d6a:	f3bf 8f6f 	isb	sy
 8002d6e:	f3bf 8f4f 	dsb	sy
 8002d72:	613b      	str	r3, [r7, #16]
}
 8002d74:	bf00      	nop
 8002d76:	bf00      	nop
 8002d78:	e7fd      	b.n	8002d76 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002d7a:	4b39      	ldr	r3, [pc, #228]	@ (8002e60 <xPortStartScheduler+0x130>)
 8002d7c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	22ff      	movs	r2, #255	@ 0xff
 8002d8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002d94:	78fb      	ldrb	r3, [r7, #3]
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	4b31      	ldr	r3, [pc, #196]	@ (8002e64 <xPortStartScheduler+0x134>)
 8002da0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002da2:	4b31      	ldr	r3, [pc, #196]	@ (8002e68 <xPortStartScheduler+0x138>)
 8002da4:	2207      	movs	r2, #7
 8002da6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002da8:	e009      	b.n	8002dbe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8002daa:	4b2f      	ldr	r3, [pc, #188]	@ (8002e68 <xPortStartScheduler+0x138>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	3b01      	subs	r3, #1
 8002db0:	4a2d      	ldr	r2, [pc, #180]	@ (8002e68 <xPortStartScheduler+0x138>)
 8002db2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002db4:	78fb      	ldrb	r3, [r7, #3]
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002dbe:	78fb      	ldrb	r3, [r7, #3]
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dc6:	2b80      	cmp	r3, #128	@ 0x80
 8002dc8:	d0ef      	beq.n	8002daa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002dca:	4b27      	ldr	r3, [pc, #156]	@ (8002e68 <xPortStartScheduler+0x138>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f1c3 0307 	rsb	r3, r3, #7
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d00b      	beq.n	8002dee <xPortStartScheduler+0xbe>
	__asm volatile
 8002dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dda:	f383 8811 	msr	BASEPRI, r3
 8002dde:	f3bf 8f6f 	isb	sy
 8002de2:	f3bf 8f4f 	dsb	sy
 8002de6:	60bb      	str	r3, [r7, #8]
}
 8002de8:	bf00      	nop
 8002dea:	bf00      	nop
 8002dec:	e7fd      	b.n	8002dea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002dee:	4b1e      	ldr	r3, [pc, #120]	@ (8002e68 <xPortStartScheduler+0x138>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	021b      	lsls	r3, r3, #8
 8002df4:	4a1c      	ldr	r2, [pc, #112]	@ (8002e68 <xPortStartScheduler+0x138>)
 8002df6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002df8:	4b1b      	ldr	r3, [pc, #108]	@ (8002e68 <xPortStartScheduler+0x138>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e00:	4a19      	ldr	r2, [pc, #100]	@ (8002e68 <xPortStartScheduler+0x138>)
 8002e02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002e0c:	4b17      	ldr	r3, [pc, #92]	@ (8002e6c <xPortStartScheduler+0x13c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a16      	ldr	r2, [pc, #88]	@ (8002e6c <xPortStartScheduler+0x13c>)
 8002e12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002e18:	4b14      	ldr	r3, [pc, #80]	@ (8002e6c <xPortStartScheduler+0x13c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a13      	ldr	r2, [pc, #76]	@ (8002e6c <xPortStartScheduler+0x13c>)
 8002e1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002e22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002e24:	f000 f8da 	bl	8002fdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002e28:	4b11      	ldr	r3, [pc, #68]	@ (8002e70 <xPortStartScheduler+0x140>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002e2e:	f000 f8f9 	bl	8003024 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002e32:	4b10      	ldr	r3, [pc, #64]	@ (8002e74 <xPortStartScheduler+0x144>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a0f      	ldr	r2, [pc, #60]	@ (8002e74 <xPortStartScheduler+0x144>)
 8002e38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002e3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002e3e:	f7ff ff63 	bl	8002d08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002e42:	f7ff fd43 	bl	80028cc <vTaskSwitchContext>
	prvTaskExitError();
 8002e46:	f7ff ff1b 	bl	8002c80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3718      	adds	r7, #24
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	e000ed00 	.word	0xe000ed00
 8002e58:	410fc271 	.word	0x410fc271
 8002e5c:	410fc270 	.word	0x410fc270
 8002e60:	e000e400 	.word	0xe000e400
 8002e64:	200004a4 	.word	0x200004a4
 8002e68:	200004a8 	.word	0x200004a8
 8002e6c:	e000ed20 	.word	0xe000ed20
 8002e70:	2000000c 	.word	0x2000000c
 8002e74:	e000ef34 	.word	0xe000ef34

08002e78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
	__asm volatile
 8002e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e82:	f383 8811 	msr	BASEPRI, r3
 8002e86:	f3bf 8f6f 	isb	sy
 8002e8a:	f3bf 8f4f 	dsb	sy
 8002e8e:	607b      	str	r3, [r7, #4]
}
 8002e90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002e92:	4b10      	ldr	r3, [pc, #64]	@ (8002ed4 <vPortEnterCritical+0x5c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	3301      	adds	r3, #1
 8002e98:	4a0e      	ldr	r2, [pc, #56]	@ (8002ed4 <vPortEnterCritical+0x5c>)
 8002e9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8002ed4 <vPortEnterCritical+0x5c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d110      	bne.n	8002ec6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed8 <vPortEnterCritical+0x60>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00b      	beq.n	8002ec6 <vPortEnterCritical+0x4e>
	__asm volatile
 8002eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eb2:	f383 8811 	msr	BASEPRI, r3
 8002eb6:	f3bf 8f6f 	isb	sy
 8002eba:	f3bf 8f4f 	dsb	sy
 8002ebe:	603b      	str	r3, [r7, #0]
}
 8002ec0:	bf00      	nop
 8002ec2:	bf00      	nop
 8002ec4:	e7fd      	b.n	8002ec2 <vPortEnterCritical+0x4a>
	}
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	2000000c 	.word	0x2000000c
 8002ed8:	e000ed04 	.word	0xe000ed04

08002edc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002ee2:	4b12      	ldr	r3, [pc, #72]	@ (8002f2c <vPortExitCritical+0x50>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10b      	bne.n	8002f02 <vPortExitCritical+0x26>
	__asm volatile
 8002eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eee:	f383 8811 	msr	BASEPRI, r3
 8002ef2:	f3bf 8f6f 	isb	sy
 8002ef6:	f3bf 8f4f 	dsb	sy
 8002efa:	607b      	str	r3, [r7, #4]
}
 8002efc:	bf00      	nop
 8002efe:	bf00      	nop
 8002f00:	e7fd      	b.n	8002efe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002f02:	4b0a      	ldr	r3, [pc, #40]	@ (8002f2c <vPortExitCritical+0x50>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	4a08      	ldr	r2, [pc, #32]	@ (8002f2c <vPortExitCritical+0x50>)
 8002f0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002f0c:	4b07      	ldr	r3, [pc, #28]	@ (8002f2c <vPortExitCritical+0x50>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d105      	bne.n	8002f20 <vPortExitCritical+0x44>
 8002f14:	2300      	movs	r3, #0
 8002f16:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002f1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr
 8002f2c:	2000000c 	.word	0x2000000c

08002f30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002f30:	f3ef 8009 	mrs	r0, PSP
 8002f34:	f3bf 8f6f 	isb	sy
 8002f38:	4b15      	ldr	r3, [pc, #84]	@ (8002f90 <pxCurrentTCBConst>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	f01e 0f10 	tst.w	lr, #16
 8002f40:	bf08      	it	eq
 8002f42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002f46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f4a:	6010      	str	r0, [r2, #0]
 8002f4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002f50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002f54:	f380 8811 	msr	BASEPRI, r0
 8002f58:	f3bf 8f4f 	dsb	sy
 8002f5c:	f3bf 8f6f 	isb	sy
 8002f60:	f7ff fcb4 	bl	80028cc <vTaskSwitchContext>
 8002f64:	f04f 0000 	mov.w	r0, #0
 8002f68:	f380 8811 	msr	BASEPRI, r0
 8002f6c:	bc09      	pop	{r0, r3}
 8002f6e:	6819      	ldr	r1, [r3, #0]
 8002f70:	6808      	ldr	r0, [r1, #0]
 8002f72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f76:	f01e 0f10 	tst.w	lr, #16
 8002f7a:	bf08      	it	eq
 8002f7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002f80:	f380 8809 	msr	PSP, r0
 8002f84:	f3bf 8f6f 	isb	sy
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	f3af 8000 	nop.w

08002f90 <pxCurrentTCBConst>:
 8002f90:	20000378 	.word	0x20000378
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002f94:	bf00      	nop
 8002f96:	bf00      	nop

08002f98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
	__asm volatile
 8002f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fa2:	f383 8811 	msr	BASEPRI, r3
 8002fa6:	f3bf 8f6f 	isb	sy
 8002faa:	f3bf 8f4f 	dsb	sy
 8002fae:	607b      	str	r3, [r7, #4]
}
 8002fb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002fb2:	f7ff fbd1 	bl	8002758 <xTaskIncrementTick>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d003      	beq.n	8002fc4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002fbc:	4b06      	ldr	r3, [pc, #24]	@ (8002fd8 <SysTick_Handler+0x40>)
 8002fbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	f383 8811 	msr	BASEPRI, r3
}
 8002fce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002fd0:	bf00      	nop
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	e000ed04 	.word	0xe000ed04

08002fdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8003010 <vPortSetupTimerInterrupt+0x34>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8003014 <vPortSetupTimerInterrupt+0x38>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002fec:	4b0a      	ldr	r3, [pc, #40]	@ (8003018 <vPortSetupTimerInterrupt+0x3c>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a0a      	ldr	r2, [pc, #40]	@ (800301c <vPortSetupTimerInterrupt+0x40>)
 8002ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff6:	099b      	lsrs	r3, r3, #6
 8002ff8:	4a09      	ldr	r2, [pc, #36]	@ (8003020 <vPortSetupTimerInterrupt+0x44>)
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002ffe:	4b04      	ldr	r3, [pc, #16]	@ (8003010 <vPortSetupTimerInterrupt+0x34>)
 8003000:	2207      	movs	r2, #7
 8003002:	601a      	str	r2, [r3, #0]
}
 8003004:	bf00      	nop
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	e000e010 	.word	0xe000e010
 8003014:	e000e018 	.word	0xe000e018
 8003018:	20000000 	.word	0x20000000
 800301c:	10624dd3 	.word	0x10624dd3
 8003020:	e000e014 	.word	0xe000e014

08003024 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003024:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003034 <vPortEnableVFP+0x10>
 8003028:	6801      	ldr	r1, [r0, #0]
 800302a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800302e:	6001      	str	r1, [r0, #0]
 8003030:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003032:	bf00      	nop
 8003034:	e000ed88 	.word	0xe000ed88

08003038 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b08a      	sub	sp, #40	@ 0x28
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003040:	2300      	movs	r3, #0
 8003042:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003044:	f7ff fadc 	bl	8002600 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003048:	4b5c      	ldr	r3, [pc, #368]	@ (80031bc <pvPortMalloc+0x184>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003050:	f000 f924 	bl	800329c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003054:	4b5a      	ldr	r3, [pc, #360]	@ (80031c0 <pvPortMalloc+0x188>)
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4013      	ands	r3, r2
 800305c:	2b00      	cmp	r3, #0
 800305e:	f040 8095 	bne.w	800318c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d01e      	beq.n	80030a6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003068:	2208      	movs	r2, #8
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4413      	add	r3, r2
 800306e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	2b00      	cmp	r3, #0
 8003078:	d015      	beq.n	80030a6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f023 0307 	bic.w	r3, r3, #7
 8003080:	3308      	adds	r3, #8
 8003082:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00b      	beq.n	80030a6 <pvPortMalloc+0x6e>
	__asm volatile
 800308e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003092:	f383 8811 	msr	BASEPRI, r3
 8003096:	f3bf 8f6f 	isb	sy
 800309a:	f3bf 8f4f 	dsb	sy
 800309e:	617b      	str	r3, [r7, #20]
}
 80030a0:	bf00      	nop
 80030a2:	bf00      	nop
 80030a4:	e7fd      	b.n	80030a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d06f      	beq.n	800318c <pvPortMalloc+0x154>
 80030ac:	4b45      	ldr	r3, [pc, #276]	@ (80031c4 <pvPortMalloc+0x18c>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d86a      	bhi.n	800318c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80030b6:	4b44      	ldr	r3, [pc, #272]	@ (80031c8 <pvPortMalloc+0x190>)
 80030b8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80030ba:	4b43      	ldr	r3, [pc, #268]	@ (80031c8 <pvPortMalloc+0x190>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80030c0:	e004      	b.n	80030cc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80030c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80030c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80030cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d903      	bls.n	80030de <pvPortMalloc+0xa6>
 80030d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1f1      	bne.n	80030c2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80030de:	4b37      	ldr	r3, [pc, #220]	@ (80031bc <pvPortMalloc+0x184>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d051      	beq.n	800318c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80030e8:	6a3b      	ldr	r3, [r7, #32]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2208      	movs	r2, #8
 80030ee:	4413      	add	r3, r2
 80030f0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80030f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	6a3b      	ldr	r3, [r7, #32]
 80030f8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80030fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	1ad2      	subs	r2, r2, r3
 8003102:	2308      	movs	r3, #8
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	429a      	cmp	r2, r3
 8003108:	d920      	bls.n	800314c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800310a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4413      	add	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00b      	beq.n	8003134 <pvPortMalloc+0xfc>
	__asm volatile
 800311c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003120:	f383 8811 	msr	BASEPRI, r3
 8003124:	f3bf 8f6f 	isb	sy
 8003128:	f3bf 8f4f 	dsb	sy
 800312c:	613b      	str	r3, [r7, #16]
}
 800312e:	bf00      	nop
 8003130:	bf00      	nop
 8003132:	e7fd      	b.n	8003130 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	1ad2      	subs	r2, r2, r3
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003146:	69b8      	ldr	r0, [r7, #24]
 8003148:	f000 f90a 	bl	8003360 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800314c:	4b1d      	ldr	r3, [pc, #116]	@ (80031c4 <pvPortMalloc+0x18c>)
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	4a1b      	ldr	r2, [pc, #108]	@ (80031c4 <pvPortMalloc+0x18c>)
 8003158:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800315a:	4b1a      	ldr	r3, [pc, #104]	@ (80031c4 <pvPortMalloc+0x18c>)
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	4b1b      	ldr	r3, [pc, #108]	@ (80031cc <pvPortMalloc+0x194>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	429a      	cmp	r2, r3
 8003164:	d203      	bcs.n	800316e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003166:	4b17      	ldr	r3, [pc, #92]	@ (80031c4 <pvPortMalloc+0x18c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a18      	ldr	r2, [pc, #96]	@ (80031cc <pvPortMalloc+0x194>)
 800316c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800316e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	4b13      	ldr	r3, [pc, #76]	@ (80031c0 <pvPortMalloc+0x188>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	431a      	orrs	r2, r3
 8003178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800317c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317e:	2200      	movs	r2, #0
 8003180:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003182:	4b13      	ldr	r3, [pc, #76]	@ (80031d0 <pvPortMalloc+0x198>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	3301      	adds	r3, #1
 8003188:	4a11      	ldr	r2, [pc, #68]	@ (80031d0 <pvPortMalloc+0x198>)
 800318a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800318c:	f7ff fa46 	bl	800261c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	f003 0307 	and.w	r3, r3, #7
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00b      	beq.n	80031b2 <pvPortMalloc+0x17a>
	__asm volatile
 800319a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800319e:	f383 8811 	msr	BASEPRI, r3
 80031a2:	f3bf 8f6f 	isb	sy
 80031a6:	f3bf 8f4f 	dsb	sy
 80031aa:	60fb      	str	r3, [r7, #12]
}
 80031ac:	bf00      	nop
 80031ae:	bf00      	nop
 80031b0:	e7fd      	b.n	80031ae <pvPortMalloc+0x176>
	return pvReturn;
 80031b2:	69fb      	ldr	r3, [r7, #28]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3728      	adds	r7, #40	@ 0x28
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	200040b4 	.word	0x200040b4
 80031c0:	200040c8 	.word	0x200040c8
 80031c4:	200040b8 	.word	0x200040b8
 80031c8:	200040ac 	.word	0x200040ac
 80031cc:	200040bc 	.word	0x200040bc
 80031d0:	200040c0 	.word	0x200040c0

080031d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d04f      	beq.n	8003286 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80031e6:	2308      	movs	r3, #8
 80031e8:	425b      	negs	r3, r3
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	4413      	add	r3, r2
 80031ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	4b25      	ldr	r3, [pc, #148]	@ (8003290 <vPortFree+0xbc>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4013      	ands	r3, r2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10b      	bne.n	800321a <vPortFree+0x46>
	__asm volatile
 8003202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003206:	f383 8811 	msr	BASEPRI, r3
 800320a:	f3bf 8f6f 	isb	sy
 800320e:	f3bf 8f4f 	dsb	sy
 8003212:	60fb      	str	r3, [r7, #12]
}
 8003214:	bf00      	nop
 8003216:	bf00      	nop
 8003218:	e7fd      	b.n	8003216 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00b      	beq.n	800323a <vPortFree+0x66>
	__asm volatile
 8003222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003226:	f383 8811 	msr	BASEPRI, r3
 800322a:	f3bf 8f6f 	isb	sy
 800322e:	f3bf 8f4f 	dsb	sy
 8003232:	60bb      	str	r3, [r7, #8]
}
 8003234:	bf00      	nop
 8003236:	bf00      	nop
 8003238:	e7fd      	b.n	8003236 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	4b14      	ldr	r3, [pc, #80]	@ (8003290 <vPortFree+0xbc>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4013      	ands	r3, r2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d01e      	beq.n	8003286 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d11a      	bne.n	8003286 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	4b0e      	ldr	r3, [pc, #56]	@ (8003290 <vPortFree+0xbc>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	43db      	mvns	r3, r3
 800325a:	401a      	ands	r2, r3
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003260:	f7ff f9ce 	bl	8002600 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	685a      	ldr	r2, [r3, #4]
 8003268:	4b0a      	ldr	r3, [pc, #40]	@ (8003294 <vPortFree+0xc0>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4413      	add	r3, r2
 800326e:	4a09      	ldr	r2, [pc, #36]	@ (8003294 <vPortFree+0xc0>)
 8003270:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003272:	6938      	ldr	r0, [r7, #16]
 8003274:	f000 f874 	bl	8003360 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003278:	4b07      	ldr	r3, [pc, #28]	@ (8003298 <vPortFree+0xc4>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	3301      	adds	r3, #1
 800327e:	4a06      	ldr	r2, [pc, #24]	@ (8003298 <vPortFree+0xc4>)
 8003280:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003282:	f7ff f9cb 	bl	800261c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003286:	bf00      	nop
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	200040c8 	.word	0x200040c8
 8003294:	200040b8 	.word	0x200040b8
 8003298:	200040c4 	.word	0x200040c4

0800329c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80032a2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80032a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80032a8:	4b27      	ldr	r3, [pc, #156]	@ (8003348 <prvHeapInit+0xac>)
 80032aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00c      	beq.n	80032d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	3307      	adds	r3, #7
 80032ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f023 0307 	bic.w	r3, r3, #7
 80032c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80032c4:	68ba      	ldr	r2, [r7, #8]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	4a1f      	ldr	r2, [pc, #124]	@ (8003348 <prvHeapInit+0xac>)
 80032cc:	4413      	add	r3, r2
 80032ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80032d4:	4a1d      	ldr	r2, [pc, #116]	@ (800334c <prvHeapInit+0xb0>)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80032da:	4b1c      	ldr	r3, [pc, #112]	@ (800334c <prvHeapInit+0xb0>)
 80032dc:	2200      	movs	r2, #0
 80032de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	4413      	add	r3, r2
 80032e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80032e8:	2208      	movs	r2, #8
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	1a9b      	subs	r3, r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f023 0307 	bic.w	r3, r3, #7
 80032f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4a15      	ldr	r2, [pc, #84]	@ (8003350 <prvHeapInit+0xb4>)
 80032fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80032fe:	4b14      	ldr	r3, [pc, #80]	@ (8003350 <prvHeapInit+0xb4>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2200      	movs	r2, #0
 8003304:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003306:	4b12      	ldr	r3, [pc, #72]	@ (8003350 <prvHeapInit+0xb4>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	1ad2      	subs	r2, r2, r3
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800331c:	4b0c      	ldr	r3, [pc, #48]	@ (8003350 <prvHeapInit+0xb4>)
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	4a0a      	ldr	r2, [pc, #40]	@ (8003354 <prvHeapInit+0xb8>)
 800332a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	4a09      	ldr	r2, [pc, #36]	@ (8003358 <prvHeapInit+0xbc>)
 8003332:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003334:	4b09      	ldr	r3, [pc, #36]	@ (800335c <prvHeapInit+0xc0>)
 8003336:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800333a:	601a      	str	r2, [r3, #0]
}
 800333c:	bf00      	nop
 800333e:	3714      	adds	r7, #20
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	200004ac 	.word	0x200004ac
 800334c:	200040ac 	.word	0x200040ac
 8003350:	200040b4 	.word	0x200040b4
 8003354:	200040bc 	.word	0x200040bc
 8003358:	200040b8 	.word	0x200040b8
 800335c:	200040c8 	.word	0x200040c8

08003360 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003368:	4b28      	ldr	r3, [pc, #160]	@ (800340c <prvInsertBlockIntoFreeList+0xac>)
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	e002      	b.n	8003374 <prvInsertBlockIntoFreeList+0x14>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	429a      	cmp	r2, r3
 800337c:	d8f7      	bhi.n	800336e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	4413      	add	r3, r2
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	429a      	cmp	r2, r3
 800338e:	d108      	bne.n	80033a2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	441a      	add	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	441a      	add	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d118      	bne.n	80033e8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	4b15      	ldr	r3, [pc, #84]	@ (8003410 <prvInsertBlockIntoFreeList+0xb0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d00d      	beq.n	80033de <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	441a      	add	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	e008      	b.n	80033f0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80033de:	4b0c      	ldr	r3, [pc, #48]	@ (8003410 <prvInsertBlockIntoFreeList+0xb0>)
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	e003      	b.n	80033f0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d002      	beq.n	80033fe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80033fe:	bf00      	nop
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	200040ac 	.word	0x200040ac
 8003410:	200040b4 	.word	0x200040b4

08003414 <memset>:
 8003414:	4402      	add	r2, r0
 8003416:	4603      	mov	r3, r0
 8003418:	4293      	cmp	r3, r2
 800341a:	d100      	bne.n	800341e <memset+0xa>
 800341c:	4770      	bx	lr
 800341e:	f803 1b01 	strb.w	r1, [r3], #1
 8003422:	e7f9      	b.n	8003418 <memset+0x4>

08003424 <_reclaim_reent>:
 8003424:	4b2d      	ldr	r3, [pc, #180]	@ (80034dc <_reclaim_reent+0xb8>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4283      	cmp	r3, r0
 800342a:	b570      	push	{r4, r5, r6, lr}
 800342c:	4604      	mov	r4, r0
 800342e:	d053      	beq.n	80034d8 <_reclaim_reent+0xb4>
 8003430:	69c3      	ldr	r3, [r0, #28]
 8003432:	b31b      	cbz	r3, 800347c <_reclaim_reent+0x58>
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	b163      	cbz	r3, 8003452 <_reclaim_reent+0x2e>
 8003438:	2500      	movs	r5, #0
 800343a:	69e3      	ldr	r3, [r4, #28]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	5959      	ldr	r1, [r3, r5]
 8003440:	b9b1      	cbnz	r1, 8003470 <_reclaim_reent+0x4c>
 8003442:	3504      	adds	r5, #4
 8003444:	2d80      	cmp	r5, #128	@ 0x80
 8003446:	d1f8      	bne.n	800343a <_reclaim_reent+0x16>
 8003448:	69e3      	ldr	r3, [r4, #28]
 800344a:	4620      	mov	r0, r4
 800344c:	68d9      	ldr	r1, [r3, #12]
 800344e:	f000 f86d 	bl	800352c <_free_r>
 8003452:	69e3      	ldr	r3, [r4, #28]
 8003454:	6819      	ldr	r1, [r3, #0]
 8003456:	b111      	cbz	r1, 800345e <_reclaim_reent+0x3a>
 8003458:	4620      	mov	r0, r4
 800345a:	f000 f867 	bl	800352c <_free_r>
 800345e:	69e3      	ldr	r3, [r4, #28]
 8003460:	689d      	ldr	r5, [r3, #8]
 8003462:	b15d      	cbz	r5, 800347c <_reclaim_reent+0x58>
 8003464:	4629      	mov	r1, r5
 8003466:	4620      	mov	r0, r4
 8003468:	682d      	ldr	r5, [r5, #0]
 800346a:	f000 f85f 	bl	800352c <_free_r>
 800346e:	e7f8      	b.n	8003462 <_reclaim_reent+0x3e>
 8003470:	680e      	ldr	r6, [r1, #0]
 8003472:	4620      	mov	r0, r4
 8003474:	f000 f85a 	bl	800352c <_free_r>
 8003478:	4631      	mov	r1, r6
 800347a:	e7e1      	b.n	8003440 <_reclaim_reent+0x1c>
 800347c:	6961      	ldr	r1, [r4, #20]
 800347e:	b111      	cbz	r1, 8003486 <_reclaim_reent+0x62>
 8003480:	4620      	mov	r0, r4
 8003482:	f000 f853 	bl	800352c <_free_r>
 8003486:	69e1      	ldr	r1, [r4, #28]
 8003488:	b111      	cbz	r1, 8003490 <_reclaim_reent+0x6c>
 800348a:	4620      	mov	r0, r4
 800348c:	f000 f84e 	bl	800352c <_free_r>
 8003490:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003492:	b111      	cbz	r1, 800349a <_reclaim_reent+0x76>
 8003494:	4620      	mov	r0, r4
 8003496:	f000 f849 	bl	800352c <_free_r>
 800349a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800349c:	b111      	cbz	r1, 80034a4 <_reclaim_reent+0x80>
 800349e:	4620      	mov	r0, r4
 80034a0:	f000 f844 	bl	800352c <_free_r>
 80034a4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80034a6:	b111      	cbz	r1, 80034ae <_reclaim_reent+0x8a>
 80034a8:	4620      	mov	r0, r4
 80034aa:	f000 f83f 	bl	800352c <_free_r>
 80034ae:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80034b0:	b111      	cbz	r1, 80034b8 <_reclaim_reent+0x94>
 80034b2:	4620      	mov	r0, r4
 80034b4:	f000 f83a 	bl	800352c <_free_r>
 80034b8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80034ba:	b111      	cbz	r1, 80034c2 <_reclaim_reent+0x9e>
 80034bc:	4620      	mov	r0, r4
 80034be:	f000 f835 	bl	800352c <_free_r>
 80034c2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80034c4:	b111      	cbz	r1, 80034cc <_reclaim_reent+0xa8>
 80034c6:	4620      	mov	r0, r4
 80034c8:	f000 f830 	bl	800352c <_free_r>
 80034cc:	6a23      	ldr	r3, [r4, #32]
 80034ce:	b11b      	cbz	r3, 80034d8 <_reclaim_reent+0xb4>
 80034d0:	4620      	mov	r0, r4
 80034d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80034d6:	4718      	bx	r3
 80034d8:	bd70      	pop	{r4, r5, r6, pc}
 80034da:	bf00      	nop
 80034dc:	20000010 	.word	0x20000010

080034e0 <__libc_init_array>:
 80034e0:	b570      	push	{r4, r5, r6, lr}
 80034e2:	4d0d      	ldr	r5, [pc, #52]	@ (8003518 <__libc_init_array+0x38>)
 80034e4:	4c0d      	ldr	r4, [pc, #52]	@ (800351c <__libc_init_array+0x3c>)
 80034e6:	1b64      	subs	r4, r4, r5
 80034e8:	10a4      	asrs	r4, r4, #2
 80034ea:	2600      	movs	r6, #0
 80034ec:	42a6      	cmp	r6, r4
 80034ee:	d109      	bne.n	8003504 <__libc_init_array+0x24>
 80034f0:	4d0b      	ldr	r5, [pc, #44]	@ (8003520 <__libc_init_array+0x40>)
 80034f2:	4c0c      	ldr	r4, [pc, #48]	@ (8003524 <__libc_init_array+0x44>)
 80034f4:	f000 f870 	bl	80035d8 <_init>
 80034f8:	1b64      	subs	r4, r4, r5
 80034fa:	10a4      	asrs	r4, r4, #2
 80034fc:	2600      	movs	r6, #0
 80034fe:	42a6      	cmp	r6, r4
 8003500:	d105      	bne.n	800350e <__libc_init_array+0x2e>
 8003502:	bd70      	pop	{r4, r5, r6, pc}
 8003504:	f855 3b04 	ldr.w	r3, [r5], #4
 8003508:	4798      	blx	r3
 800350a:	3601      	adds	r6, #1
 800350c:	e7ee      	b.n	80034ec <__libc_init_array+0xc>
 800350e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003512:	4798      	blx	r3
 8003514:	3601      	adds	r6, #1
 8003516:	e7f2      	b.n	80034fe <__libc_init_array+0x1e>
 8003518:	080036ac 	.word	0x080036ac
 800351c:	080036ac 	.word	0x080036ac
 8003520:	080036ac 	.word	0x080036ac
 8003524:	080036b0 	.word	0x080036b0

08003528 <__retarget_lock_acquire_recursive>:
 8003528:	4770      	bx	lr

0800352a <__retarget_lock_release_recursive>:
 800352a:	4770      	bx	lr

0800352c <_free_r>:
 800352c:	b538      	push	{r3, r4, r5, lr}
 800352e:	4605      	mov	r5, r0
 8003530:	2900      	cmp	r1, #0
 8003532:	d041      	beq.n	80035b8 <_free_r+0x8c>
 8003534:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003538:	1f0c      	subs	r4, r1, #4
 800353a:	2b00      	cmp	r3, #0
 800353c:	bfb8      	it	lt
 800353e:	18e4      	addlt	r4, r4, r3
 8003540:	f000 f83e 	bl	80035c0 <__malloc_lock>
 8003544:	4a1d      	ldr	r2, [pc, #116]	@ (80035bc <_free_r+0x90>)
 8003546:	6813      	ldr	r3, [r2, #0]
 8003548:	b933      	cbnz	r3, 8003558 <_free_r+0x2c>
 800354a:	6063      	str	r3, [r4, #4]
 800354c:	6014      	str	r4, [r2, #0]
 800354e:	4628      	mov	r0, r5
 8003550:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003554:	f000 b83a 	b.w	80035cc <__malloc_unlock>
 8003558:	42a3      	cmp	r3, r4
 800355a:	d908      	bls.n	800356e <_free_r+0x42>
 800355c:	6820      	ldr	r0, [r4, #0]
 800355e:	1821      	adds	r1, r4, r0
 8003560:	428b      	cmp	r3, r1
 8003562:	bf01      	itttt	eq
 8003564:	6819      	ldreq	r1, [r3, #0]
 8003566:	685b      	ldreq	r3, [r3, #4]
 8003568:	1809      	addeq	r1, r1, r0
 800356a:	6021      	streq	r1, [r4, #0]
 800356c:	e7ed      	b.n	800354a <_free_r+0x1e>
 800356e:	461a      	mov	r2, r3
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	b10b      	cbz	r3, 8003578 <_free_r+0x4c>
 8003574:	42a3      	cmp	r3, r4
 8003576:	d9fa      	bls.n	800356e <_free_r+0x42>
 8003578:	6811      	ldr	r1, [r2, #0]
 800357a:	1850      	adds	r0, r2, r1
 800357c:	42a0      	cmp	r0, r4
 800357e:	d10b      	bne.n	8003598 <_free_r+0x6c>
 8003580:	6820      	ldr	r0, [r4, #0]
 8003582:	4401      	add	r1, r0
 8003584:	1850      	adds	r0, r2, r1
 8003586:	4283      	cmp	r3, r0
 8003588:	6011      	str	r1, [r2, #0]
 800358a:	d1e0      	bne.n	800354e <_free_r+0x22>
 800358c:	6818      	ldr	r0, [r3, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	6053      	str	r3, [r2, #4]
 8003592:	4408      	add	r0, r1
 8003594:	6010      	str	r0, [r2, #0]
 8003596:	e7da      	b.n	800354e <_free_r+0x22>
 8003598:	d902      	bls.n	80035a0 <_free_r+0x74>
 800359a:	230c      	movs	r3, #12
 800359c:	602b      	str	r3, [r5, #0]
 800359e:	e7d6      	b.n	800354e <_free_r+0x22>
 80035a0:	6820      	ldr	r0, [r4, #0]
 80035a2:	1821      	adds	r1, r4, r0
 80035a4:	428b      	cmp	r3, r1
 80035a6:	bf04      	itt	eq
 80035a8:	6819      	ldreq	r1, [r3, #0]
 80035aa:	685b      	ldreq	r3, [r3, #4]
 80035ac:	6063      	str	r3, [r4, #4]
 80035ae:	bf04      	itt	eq
 80035b0:	1809      	addeq	r1, r1, r0
 80035b2:	6021      	streq	r1, [r4, #0]
 80035b4:	6054      	str	r4, [r2, #4]
 80035b6:	e7ca      	b.n	800354e <_free_r+0x22>
 80035b8:	bd38      	pop	{r3, r4, r5, pc}
 80035ba:	bf00      	nop
 80035bc:	20004208 	.word	0x20004208

080035c0 <__malloc_lock>:
 80035c0:	4801      	ldr	r0, [pc, #4]	@ (80035c8 <__malloc_lock+0x8>)
 80035c2:	f7ff bfb1 	b.w	8003528 <__retarget_lock_acquire_recursive>
 80035c6:	bf00      	nop
 80035c8:	20004204 	.word	0x20004204

080035cc <__malloc_unlock>:
 80035cc:	4801      	ldr	r0, [pc, #4]	@ (80035d4 <__malloc_unlock+0x8>)
 80035ce:	f7ff bfac 	b.w	800352a <__retarget_lock_release_recursive>
 80035d2:	bf00      	nop
 80035d4:	20004204 	.word	0x20004204

080035d8 <_init>:
 80035d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035da:	bf00      	nop
 80035dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035de:	bc08      	pop	{r3}
 80035e0:	469e      	mov	lr, r3
 80035e2:	4770      	bx	lr

080035e4 <_fini>:
 80035e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035e6:	bf00      	nop
 80035e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ea:	bc08      	pop	{r3}
 80035ec:	469e      	mov	lr, r3
 80035ee:	4770      	bx	lr
