
250626_Treadmill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068e4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08006a84  08006a84  00007a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b58  08006b58  00008104  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006b58  08006b58  00007b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b60  08006b60  00008104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b60  08006b60  00007b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006b64  08006b64  00007b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000104  20000000  08006b68  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000424  20000104  08006c6c  00008104  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000528  08006c6c  00008528  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008104  2**0
                  CONTENTS, READONLY
 12 .debug_info   000168ee  00000000  00000000  00008134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fe3  00000000  00000000  0001ea22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001338  00000000  00000000  00022a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ecb  00000000  00000000  00023d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018af8  00000000  00000000  00024c0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bc33  00000000  00000000  0003d703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000919cb  00000000  00000000  00059336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ead01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051b4  00000000  00000000  000ead44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000efef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000104 	.word	0x20000104
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006a6c 	.word	0x08006a6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000108 	.word	0x20000108
 80001dc:	08006a6c 	.word	0x08006a6c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	@ 0x28
 80005b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	613b      	str	r3, [r7, #16]
 80005c6:	4b49      	ldr	r3, [pc, #292]	@ (80006ec <MX_GPIO_Init+0x140>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	4a48      	ldr	r2, [pc, #288]	@ (80006ec <MX_GPIO_Init+0x140>)
 80005cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d2:	4b46      	ldr	r3, [pc, #280]	@ (80006ec <MX_GPIO_Init+0x140>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005da:	613b      	str	r3, [r7, #16]
 80005dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	4b42      	ldr	r3, [pc, #264]	@ (80006ec <MX_GPIO_Init+0x140>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	4a41      	ldr	r2, [pc, #260]	@ (80006ec <MX_GPIO_Init+0x140>)
 80005e8:	f043 0304 	orr.w	r3, r3, #4
 80005ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ee:	4b3f      	ldr	r3, [pc, #252]	@ (80006ec <MX_GPIO_Init+0x140>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	f003 0304 	and.w	r3, r3, #4
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	4b3b      	ldr	r3, [pc, #236]	@ (80006ec <MX_GPIO_Init+0x140>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	4a3a      	ldr	r2, [pc, #232]	@ (80006ec <MX_GPIO_Init+0x140>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	6313      	str	r3, [r2, #48]	@ 0x30
 800060a:	4b38      	ldr	r3, [pc, #224]	@ (80006ec <MX_GPIO_Init+0x140>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	4b34      	ldr	r3, [pc, #208]	@ (80006ec <MX_GPIO_Init+0x140>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	4a33      	ldr	r2, [pc, #204]	@ (80006ec <MX_GPIO_Init+0x140>)
 8000620:	f043 0302 	orr.w	r3, r3, #2
 8000624:	6313      	str	r3, [r2, #48]	@ 0x30
 8000626:	4b31      	ldr	r3, [pc, #196]	@ (80006ec <MX_GPIO_Init+0x140>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	f003 0302 	and.w	r3, r3, #2
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000632:	2200      	movs	r2, #0
 8000634:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8000638:	482d      	ldr	r0, [pc, #180]	@ (80006f0 <MX_GPIO_Init+0x144>)
 800063a:	f002 fbb5 	bl	8002da8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_11
 800063e:	2200      	movs	r2, #0
 8000640:	f641 0113 	movw	r1, #6163	@ 0x1813
 8000644:	482b      	ldr	r0, [pc, #172]	@ (80006f4 <MX_GPIO_Init+0x148>)
 8000646:	f002 fbaf 	bl	8002da8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 800064a:	2200      	movs	r2, #0
 800064c:	f24f 0107 	movw	r1, #61447	@ 0xf007
 8000650:	4829      	ldr	r0, [pc, #164]	@ (80006f8 <MX_GPIO_Init+0x14c>)
 8000652:	f002 fba9 	bl	8002da8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000656:	f240 13ff 	movw	r3, #511	@ 0x1ff
 800065a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	2301      	movs	r3, #1
 800065e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2300      	movs	r3, #0
 8000666:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	4619      	mov	r1, r3
 800066e:	4820      	ldr	r0, [pc, #128]	@ (80006f0 <MX_GPIO_Init+0x144>)
 8000670:	f002 f9fe 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_11
 8000674:	f641 0313 	movw	r3, #6163	@ 0x1813
 8000678:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067a:	2301      	movs	r3, #1
 800067c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000682:	2300      	movs	r3, #0
 8000684:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	4619      	mov	r1, r3
 800068c:	4819      	ldr	r0, [pc, #100]	@ (80006f4 <MX_GPIO_Init+0x148>)
 800068e:	f002 f9ef 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8000692:	f24f 0307 	movw	r3, #61447	@ 0xf007
 8000696:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000698:	2301      	movs	r3, #1
 800069a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a0:	2300      	movs	r3, #0
 80006a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a4:	f107 0314 	add.w	r3, r7, #20
 80006a8:	4619      	mov	r1, r3
 80006aa:	4813      	ldr	r0, [pc, #76]	@ (80006f8 <MX_GPIO_Init+0x14c>)
 80006ac:	f002 f9e0 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80006b0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80006b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	4619      	mov	r1, r3
 80006c4:	480b      	ldr	r0, [pc, #44]	@ (80006f4 <MX_GPIO_Init+0x148>)
 80006c6:	f002 f9d3 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6;
 80006ca:	2368      	movs	r3, #104	@ 0x68
 80006cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	4619      	mov	r1, r3
 80006dc:	4806      	ldr	r0, [pc, #24]	@ (80006f8 <MX_GPIO_Init+0x14c>)
 80006de:	f002 f9c7 	bl	8002a70 <HAL_GPIO_Init>

}
 80006e2:	bf00      	nop
 80006e4:	3728      	adds	r7, #40	@ 0x28
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40020800 	.word	0x40020800
 80006f4:	40020000 	.word	0x40020000
 80006f8:	40020400 	.word	0x40020400

080006fc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000700:	4b12      	ldr	r3, [pc, #72]	@ (800074c <MX_I2C1_Init+0x50>)
 8000702:	4a13      	ldr	r2, [pc, #76]	@ (8000750 <MX_I2C1_Init+0x54>)
 8000704:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000706:	4b11      	ldr	r3, [pc, #68]	@ (800074c <MX_I2C1_Init+0x50>)
 8000708:	4a12      	ldr	r2, [pc, #72]	@ (8000754 <MX_I2C1_Init+0x58>)
 800070a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800070c:	4b0f      	ldr	r3, [pc, #60]	@ (800074c <MX_I2C1_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000712:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <MX_I2C1_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000718:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <MX_I2C1_Init+0x50>)
 800071a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800071e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000720:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <MX_I2C1_Init+0x50>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000726:	4b09      	ldr	r3, [pc, #36]	@ (800074c <MX_I2C1_Init+0x50>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800072c:	4b07      	ldr	r3, [pc, #28]	@ (800074c <MX_I2C1_Init+0x50>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000732:	4b06      	ldr	r3, [pc, #24]	@ (800074c <MX_I2C1_Init+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	@ (800074c <MX_I2C1_Init+0x50>)
 800073a:	f002 fb4f 	bl	8002ddc <HAL_I2C_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000744:	f000 f8d4 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000120 	.word	0x20000120
 8000750:	40005400 	.word	0x40005400
 8000754:	000186a0 	.word	0x000186a0

08000758 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	@ 0x28
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a19      	ldr	r2, [pc, #100]	@ (80007dc <HAL_I2C_MspInit+0x84>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d12c      	bne.n	80007d4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <HAL_I2C_MspInit+0x88>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a17      	ldr	r2, [pc, #92]	@ (80007e0 <HAL_I2C_MspInit+0x88>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b15      	ldr	r3, [pc, #84]	@ (80007e0 <HAL_I2C_MspInit+0x88>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000796:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800079a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800079c:	2312      	movs	r3, #18
 800079e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a4:	2303      	movs	r3, #3
 80007a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007a8:	2304      	movs	r3, #4
 80007aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	4619      	mov	r1, r3
 80007b2:	480c      	ldr	r0, [pc, #48]	@ (80007e4 <HAL_I2C_MspInit+0x8c>)
 80007b4:	f002 f95c 	bl	8002a70 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <HAL_I2C_MspInit+0x88>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c0:	4a07      	ldr	r2, [pc, #28]	@ (80007e0 <HAL_I2C_MspInit+0x88>)
 80007c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80007c8:	4b05      	ldr	r3, [pc, #20]	@ (80007e0 <HAL_I2C_MspInit+0x88>)
 80007ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007d4:	bf00      	nop
 80007d6:	3728      	adds	r7, #40	@ 0x28
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40005400 	.word	0x40005400
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40020400 	.word	0x40020400

080007e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ec:	f001 ff06 	bl	80025fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f0:	f000 f816 	bl	8000820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f4:	f7ff feda 	bl	80005ac <MX_GPIO_Init>
  MX_TIM2_Init();
 80007f8:	f000 f9d4 	bl	8000ba4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80007fc:	f000 fc12 	bl	8001024 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000800:	f7ff ff7c 	bl	80006fc <MX_I2C1_Init>
  MX_TIM3_Init();
 8000804:	f000 fa1a 	bl	8000c3c <MX_TIM3_Init>
  MX_TIM1_Init();
 8000808:	f000 f92c 	bl	8000a64 <MX_TIM1_Init>
  MX_TIM4_Init();
 800080c:	f000 fa8e 	bl	8000d2c <MX_TIM4_Init>
  MX_TIM5_Init();
 8000810:	f000 fada 	bl	8000dc8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  ap_init();
 8000814:	f000 feea 	bl	80015ec <ap_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ap_main();
 8000818:	f000 feb2 	bl	8001580 <ap_main>
 800081c:	e7fc      	b.n	8000818 <main+0x30>
	...

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b094      	sub	sp, #80	@ 0x50
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	f107 0320 	add.w	r3, r7, #32
 800082a:	2230      	movs	r2, #48	@ 0x30
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f005 fc9e 	bl	8006170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	4b27      	ldr	r3, [pc, #156]	@ (80008e8 <SystemClock_Config+0xc8>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084c:	4a26      	ldr	r2, [pc, #152]	@ (80008e8 <SystemClock_Config+0xc8>)
 800084e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000852:	6413      	str	r3, [r2, #64]	@ 0x40
 8000854:	4b24      	ldr	r3, [pc, #144]	@ (80008e8 <SystemClock_Config+0xc8>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000858:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000860:	2300      	movs	r3, #0
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	4b21      	ldr	r3, [pc, #132]	@ (80008ec <SystemClock_Config+0xcc>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a20      	ldr	r2, [pc, #128]	@ (80008ec <SystemClock_Config+0xcc>)
 800086a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800086e:	6013      	str	r3, [r2, #0]
 8000870:	4b1e      	ldr	r3, [pc, #120]	@ (80008ec <SystemClock_Config+0xcc>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800087c:	2301      	movs	r3, #1
 800087e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000880:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000884:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000886:	2302      	movs	r3, #2
 8000888:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800088a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800088e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000890:	2304      	movs	r3, #4
 8000892:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000894:	2364      	movs	r3, #100	@ 0x64
 8000896:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000898:	2302      	movs	r3, #2
 800089a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800089c:	2304      	movs	r3, #4
 800089e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a0:	f107 0320 	add.w	r3, r7, #32
 80008a4:	4618      	mov	r0, r3
 80008a6:	f002 ff37 	bl	8003718 <HAL_RCC_OscConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008b0:	f000 f81e 	bl	80008f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b4:	230f      	movs	r3, #15
 80008b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b8:	2302      	movs	r3, #2
 80008ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	2103      	movs	r1, #3
 80008d0:	4618      	mov	r0, r3
 80008d2:	f003 f999 	bl	8003c08 <HAL_RCC_ClockConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008dc:	f000 f808 	bl	80008f0 <Error_Handler>
  }
}
 80008e0:	bf00      	nop
 80008e2:	3750      	adds	r7, #80	@ 0x50
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40007000 	.word	0x40007000

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <Error_Handler+0x8>

080008fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	4b10      	ldr	r3, [pc, #64]	@ (8000948 <HAL_MspInit+0x4c>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800090a:	4a0f      	ldr	r2, [pc, #60]	@ (8000948 <HAL_MspInit+0x4c>)
 800090c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000910:	6453      	str	r3, [r2, #68]	@ 0x44
 8000912:	4b0d      	ldr	r3, [pc, #52]	@ (8000948 <HAL_MspInit+0x4c>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000916:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	603b      	str	r3, [r7, #0]
 8000922:	4b09      	ldr	r3, [pc, #36]	@ (8000948 <HAL_MspInit+0x4c>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000926:	4a08      	ldr	r2, [pc, #32]	@ (8000948 <HAL_MspInit+0x4c>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800092c:	6413      	str	r3, [r2, #64]	@ 0x40
 800092e:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <HAL_MspInit+0x4c>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800

0800094c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <NMI_Handler+0x4>

08000954 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <HardFault_Handler+0x4>

0800095c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <MemManage_Handler+0x4>

08000964 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <BusFault_Handler+0x4>

0800096c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <UsageFault_Handler+0x4>

08000974 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a2:	f001 fe7d 	bl	80026a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
	...

080009ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009b0:	4802      	ldr	r0, [pc, #8]	@ (80009bc <TIM2_IRQHandler+0x10>)
 80009b2:	f003 fdeb 	bl	800458c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	200001c0 	.word	0x200001c0

080009c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009c4:	4802      	ldr	r0, [pc, #8]	@ (80009d0 <USART2_IRQHandler+0x10>)
 80009c6:	f004 fc9f 	bl	8005308 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200002e0 	.word	0x200002e0

080009d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009dc:	4a14      	ldr	r2, [pc, #80]	@ (8000a30 <_sbrk+0x5c>)
 80009de:	4b15      	ldr	r3, [pc, #84]	@ (8000a34 <_sbrk+0x60>)
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009e8:	4b13      	ldr	r3, [pc, #76]	@ (8000a38 <_sbrk+0x64>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d102      	bne.n	80009f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009f0:	4b11      	ldr	r3, [pc, #68]	@ (8000a38 <_sbrk+0x64>)
 80009f2:	4a12      	ldr	r2, [pc, #72]	@ (8000a3c <_sbrk+0x68>)
 80009f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009f6:	4b10      	ldr	r3, [pc, #64]	@ (8000a38 <_sbrk+0x64>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4413      	add	r3, r2
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d207      	bcs.n	8000a14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a04:	f005 fbbc 	bl	8006180 <__errno>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a12:	e009      	b.n	8000a28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a14:	4b08      	ldr	r3, [pc, #32]	@ (8000a38 <_sbrk+0x64>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a1a:	4b07      	ldr	r3, [pc, #28]	@ (8000a38 <_sbrk+0x64>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	4a05      	ldr	r2, [pc, #20]	@ (8000a38 <_sbrk+0x64>)
 8000a24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a26:	68fb      	ldr	r3, [r7, #12]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3718      	adds	r7, #24
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20020000 	.word	0x20020000
 8000a34:	00000400 	.word	0x00000400
 8000a38:	20000174 	.word	0x20000174
 8000a3c:	20000528 	.word	0x20000528

08000a40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a44:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <SystemInit+0x20>)
 8000a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a4a:	4a05      	ldr	r2, [pc, #20]	@ (8000a60 <SystemInit+0x20>)
 8000a4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b096      	sub	sp, #88	@ 0x58
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a6a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a78:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]
 8000a92:	615a      	str	r2, [r3, #20]
 8000a94:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	2220      	movs	r2, #32
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f005 fb67 	bl	8006170 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000aa2:	4b3e      	ldr	r3, [pc, #248]	@ (8000b9c <MX_TIM1_Init+0x138>)
 8000aa4:	4a3e      	ldr	r2, [pc, #248]	@ (8000ba0 <MX_TIM1_Init+0x13c>)
 8000aa6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8000aa8:	4b3c      	ldr	r3, [pc, #240]	@ (8000b9c <MX_TIM1_Init+0x138>)
 8000aaa:	2263      	movs	r2, #99	@ 0x63
 8000aac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aae:	4b3b      	ldr	r3, [pc, #236]	@ (8000b9c <MX_TIM1_Init+0x138>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000ab4:	4b39      	ldr	r3, [pc, #228]	@ (8000b9c <MX_TIM1_Init+0x138>)
 8000ab6:	2263      	movs	r2, #99	@ 0x63
 8000ab8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aba:	4b38      	ldr	r3, [pc, #224]	@ (8000b9c <MX_TIM1_Init+0x138>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ac0:	4b36      	ldr	r3, [pc, #216]	@ (8000b9c <MX_TIM1_Init+0x138>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ac6:	4b35      	ldr	r3, [pc, #212]	@ (8000b9c <MX_TIM1_Init+0x138>)
 8000ac8:	2280      	movs	r2, #128	@ 0x80
 8000aca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000acc:	4833      	ldr	r0, [pc, #204]	@ (8000b9c <MX_TIM1_Init+0x138>)
 8000ace:	f003 fabb 	bl	8004048 <HAL_TIM_Base_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000ad8:	f7ff ff0a 	bl	80008f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000adc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ae0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ae2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	482c      	ldr	r0, [pc, #176]	@ (8000b9c <MX_TIM1_Init+0x138>)
 8000aea:	f003 ff01 	bl	80048f0 <HAL_TIM_ConfigClockSource>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000af4:	f7ff fefc 	bl	80008f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000af8:	4828      	ldr	r0, [pc, #160]	@ (8000b9c <MX_TIM1_Init+0x138>)
 8000afa:	f003 fbd9 	bl	80042b0 <HAL_TIM_PWM_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000b04:	f7ff fef4 	bl	80008f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b10:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b14:	4619      	mov	r1, r3
 8000b16:	4821      	ldr	r0, [pc, #132]	@ (8000b9c <MX_TIM1_Init+0x138>)
 8000b18:	f004 faac 	bl	8005074 <HAL_TIMEx_MasterConfigSynchronization>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000b22:	f7ff fee5 	bl	80008f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b26:	2360      	movs	r3, #96	@ 0x60
 8000b28:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 50;
 8000b2a:	2332      	movs	r3, #50	@ 0x32
 8000b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b32:	2300      	movs	r3, #0
 8000b34:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b46:	2200      	movs	r2, #0
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4814      	ldr	r0, [pc, #80]	@ (8000b9c <MX_TIM1_Init+0x138>)
 8000b4c:	f003 fe0e 	bl	800476c <HAL_TIM_PWM_ConfigChannel>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000b56:	f7ff fecb 	bl	80008f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b72:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4807      	ldr	r0, [pc, #28]	@ (8000b9c <MX_TIM1_Init+0x138>)
 8000b7e:	f004 fae7 	bl	8005150 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000b88:	f7ff feb2 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b8c:	4803      	ldr	r0, [pc, #12]	@ (8000b9c <MX_TIM1_Init+0x138>)
 8000b8e:	f000 f9e7 	bl	8000f60 <HAL_TIM_MspPostInit>

}
 8000b92:	bf00      	nop
 8000b94:	3758      	adds	r7, #88	@ 0x58
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000178 	.word	0x20000178
 8000ba0:	40010000 	.word	0x40010000

08000ba4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000baa:	f107 0308 	add.w	r3, r7, #8
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb8:	463b      	mov	r3, r7
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c38 <MX_TIM2_Init+0x94>)
 8000bc2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bc6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8000bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c38 <MX_TIM2_Init+0x94>)
 8000bca:	2263      	movs	r2, #99	@ 0x63
 8000bcc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bce:	4b1a      	ldr	r3, [pc, #104]	@ (8000c38 <MX_TIM2_Init+0x94>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000bd4:	4b18      	ldr	r3, [pc, #96]	@ (8000c38 <MX_TIM2_Init+0x94>)
 8000bd6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bda:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bdc:	4b16      	ldr	r3, [pc, #88]	@ (8000c38 <MX_TIM2_Init+0x94>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be2:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <MX_TIM2_Init+0x94>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000be8:	4813      	ldr	r0, [pc, #76]	@ (8000c38 <MX_TIM2_Init+0x94>)
 8000bea:	f003 fa2d 	bl	8004048 <HAL_TIM_Base_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000bf4:	f7ff fe7c 	bl	80008f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bfc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bfe:	f107 0308 	add.w	r3, r7, #8
 8000c02:	4619      	mov	r1, r3
 8000c04:	480c      	ldr	r0, [pc, #48]	@ (8000c38 <MX_TIM2_Init+0x94>)
 8000c06:	f003 fe73 	bl	80048f0 <HAL_TIM_ConfigClockSource>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c10:	f7ff fe6e 	bl	80008f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c14:	2300      	movs	r3, #0
 8000c16:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c1c:	463b      	mov	r3, r7
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4805      	ldr	r0, [pc, #20]	@ (8000c38 <MX_TIM2_Init+0x94>)
 8000c22:	f004 fa27 	bl	8005074 <HAL_TIMEx_MasterConfigSynchronization>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c2c:	f7ff fe60 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	3718      	adds	r7, #24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	200001c0 	.word	0x200001c0

08000c3c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08e      	sub	sp, #56	@ 0x38
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c50:	f107 0320 	add.w	r3, r7, #32
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
 8000c68:	615a      	str	r2, [r3, #20]
 8000c6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c6c:	4b2d      	ldr	r3, [pc, #180]	@ (8000d24 <MX_TIM3_Init+0xe8>)
 8000c6e:	4a2e      	ldr	r2, [pc, #184]	@ (8000d28 <MX_TIM3_Init+0xec>)
 8000c70:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8000c72:	4b2c      	ldr	r3, [pc, #176]	@ (8000d24 <MX_TIM3_Init+0xe8>)
 8000c74:	2263      	movs	r2, #99	@ 0x63
 8000c76:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c78:	4b2a      	ldr	r3, [pc, #168]	@ (8000d24 <MX_TIM3_Init+0xe8>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000c7e:	4b29      	ldr	r3, [pc, #164]	@ (8000d24 <MX_TIM3_Init+0xe8>)
 8000c80:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c84:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c86:	4b27      	ldr	r3, [pc, #156]	@ (8000d24 <MX_TIM3_Init+0xe8>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c8c:	4b25      	ldr	r3, [pc, #148]	@ (8000d24 <MX_TIM3_Init+0xe8>)
 8000c8e:	2280      	movs	r2, #128	@ 0x80
 8000c90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c92:	4824      	ldr	r0, [pc, #144]	@ (8000d24 <MX_TIM3_Init+0xe8>)
 8000c94:	f003 f9d8 	bl	8004048 <HAL_TIM_Base_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000c9e:	f7ff fe27 	bl	80008f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ca8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cac:	4619      	mov	r1, r3
 8000cae:	481d      	ldr	r0, [pc, #116]	@ (8000d24 <MX_TIM3_Init+0xe8>)
 8000cb0:	f003 fe1e 	bl	80048f0 <HAL_TIM_ConfigClockSource>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000cba:	f7ff fe19 	bl	80008f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000cbe:	4819      	ldr	r0, [pc, #100]	@ (8000d24 <MX_TIM3_Init+0xe8>)
 8000cc0:	f003 faf6 	bl	80042b0 <HAL_TIM_PWM_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000cca:	f7ff fe11 	bl	80008f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cd6:	f107 0320 	add.w	r3, r7, #32
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4811      	ldr	r0, [pc, #68]	@ (8000d24 <MX_TIM3_Init+0xe8>)
 8000cde:	f004 f9c9 	bl	8005074 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000ce8:	f7ff fe02 	bl	80008f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cec:	2360      	movs	r3, #96	@ 0x60
 8000cee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8000cf0:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8000cf4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	2200      	movs	r2, #0
 8000d02:	4619      	mov	r1, r3
 8000d04:	4807      	ldr	r0, [pc, #28]	@ (8000d24 <MX_TIM3_Init+0xe8>)
 8000d06:	f003 fd31 	bl	800476c <HAL_TIM_PWM_ConfigChannel>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000d10:	f7ff fdee 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d14:	4803      	ldr	r0, [pc, #12]	@ (8000d24 <MX_TIM3_Init+0xe8>)
 8000d16:	f000 f923 	bl	8000f60 <HAL_TIM_MspPostInit>

}
 8000d1a:	bf00      	nop
 8000d1c:	3738      	adds	r7, #56	@ 0x38
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000208 	.word	0x20000208
 8000d28:	40000400 	.word	0x40000400

08000d2c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d32:	f107 0308 	add.w	r3, r7, #8
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d40:	463b      	mov	r3, r7
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d48:	4b1d      	ldr	r3, [pc, #116]	@ (8000dc0 <MX_TIM4_Init+0x94>)
 8000d4a:	4a1e      	ldr	r2, [pc, #120]	@ (8000dc4 <MX_TIM4_Init+0x98>)
 8000d4c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8000d4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc0 <MX_TIM4_Init+0x94>)
 8000d50:	2263      	movs	r2, #99	@ 0x63
 8000d52:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d54:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc0 <MX_TIM4_Init+0x94>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 30000;
 8000d5a:	4b19      	ldr	r3, [pc, #100]	@ (8000dc0 <MX_TIM4_Init+0x94>)
 8000d5c:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000d60:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d62:	4b17      	ldr	r3, [pc, #92]	@ (8000dc0 <MX_TIM4_Init+0x94>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d68:	4b15      	ldr	r3, [pc, #84]	@ (8000dc0 <MX_TIM4_Init+0x94>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d6e:	4814      	ldr	r0, [pc, #80]	@ (8000dc0 <MX_TIM4_Init+0x94>)
 8000d70:	f003 f96a 	bl	8004048 <HAL_TIM_Base_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000d7a:	f7ff fdb9 	bl	80008f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d84:	f107 0308 	add.w	r3, r7, #8
 8000d88:	4619      	mov	r1, r3
 8000d8a:	480d      	ldr	r0, [pc, #52]	@ (8000dc0 <MX_TIM4_Init+0x94>)
 8000d8c:	f003 fdb0 	bl	80048f0 <HAL_TIM_ConfigClockSource>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000d96:	f7ff fdab 	bl	80008f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000da2:	463b      	mov	r3, r7
 8000da4:	4619      	mov	r1, r3
 8000da6:	4806      	ldr	r0, [pc, #24]	@ (8000dc0 <MX_TIM4_Init+0x94>)
 8000da8:	f004 f964 	bl	8005074 <HAL_TIMEx_MasterConfigSynchronization>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000db2:	f7ff fd9d 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000db6:	bf00      	nop
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000250 	.word	0x20000250
 8000dc4:	40000800 	.word	0x40000800

08000dc8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dce:	f107 0308 	add.w	r3, r7, #8
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]
 8000dda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ddc:	463b      	mov	r3, r7
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000de4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e5c <MX_TIM5_Init+0x94>)
 8000de6:	4a1e      	ldr	r2, [pc, #120]	@ (8000e60 <MX_TIM5_Init+0x98>)
 8000de8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100-1;
 8000dea:	4b1c      	ldr	r3, [pc, #112]	@ (8000e5c <MX_TIM5_Init+0x94>)
 8000dec:	2263      	movs	r2, #99	@ 0x63
 8000dee:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e5c <MX_TIM5_Init+0x94>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000df6:	4b19      	ldr	r3, [pc, #100]	@ (8000e5c <MX_TIM5_Init+0x94>)
 8000df8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dfc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dfe:	4b17      	ldr	r3, [pc, #92]	@ (8000e5c <MX_TIM5_Init+0x94>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e04:	4b15      	ldr	r3, [pc, #84]	@ (8000e5c <MX_TIM5_Init+0x94>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000e0a:	4814      	ldr	r0, [pc, #80]	@ (8000e5c <MX_TIM5_Init+0x94>)
 8000e0c:	f003 f91c 	bl	8004048 <HAL_TIM_Base_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8000e16:	f7ff fd6b 	bl	80008f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000e20:	f107 0308 	add.w	r3, r7, #8
 8000e24:	4619      	mov	r1, r3
 8000e26:	480d      	ldr	r0, [pc, #52]	@ (8000e5c <MX_TIM5_Init+0x94>)
 8000e28:	f003 fd62 	bl	80048f0 <HAL_TIM_ConfigClockSource>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8000e32:	f7ff fd5d 	bl	80008f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e36:	2300      	movs	r3, #0
 8000e38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e3e:	463b      	mov	r3, r7
 8000e40:	4619      	mov	r1, r3
 8000e42:	4806      	ldr	r0, [pc, #24]	@ (8000e5c <MX_TIM5_Init+0x94>)
 8000e44:	f004 f916 	bl	8005074 <HAL_TIMEx_MasterConfigSynchronization>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8000e4e:	f7ff fd4f 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000e52:	bf00      	nop
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000298 	.word	0x20000298
 8000e60:	40000c00 	.word	0x40000c00

08000e64 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b088      	sub	sp, #32
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a36      	ldr	r2, [pc, #216]	@ (8000f4c <HAL_TIM_Base_MspInit+0xe8>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d10e      	bne.n	8000e94 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
 8000e7a:	4b35      	ldr	r3, [pc, #212]	@ (8000f50 <HAL_TIM_Base_MspInit+0xec>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e7e:	4a34      	ldr	r2, [pc, #208]	@ (8000f50 <HAL_TIM_Base_MspInit+0xec>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e86:	4b32      	ldr	r3, [pc, #200]	@ (8000f50 <HAL_TIM_Base_MspInit+0xec>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	61fb      	str	r3, [r7, #28]
 8000e90:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8000e92:	e056      	b.n	8000f42 <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM2)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e9c:	d116      	bne.n	8000ecc <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61bb      	str	r3, [r7, #24]
 8000ea2:	4b2b      	ldr	r3, [pc, #172]	@ (8000f50 <HAL_TIM_Base_MspInit+0xec>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea6:	4a2a      	ldr	r2, [pc, #168]	@ (8000f50 <HAL_TIM_Base_MspInit+0xec>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eae:	4b28      	ldr	r3, [pc, #160]	@ (8000f50 <HAL_TIM_Base_MspInit+0xec>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	61bb      	str	r3, [r7, #24]
 8000eb8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	201c      	movs	r0, #28
 8000ec0:	f001 fd0d 	bl	80028de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ec4:	201c      	movs	r0, #28
 8000ec6:	f001 fd26 	bl	8002916 <HAL_NVIC_EnableIRQ>
}
 8000eca:	e03a      	b.n	8000f42 <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM3)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a20      	ldr	r2, [pc, #128]	@ (8000f54 <HAL_TIM_Base_MspInit+0xf0>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d10e      	bne.n	8000ef4 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	4b1d      	ldr	r3, [pc, #116]	@ (8000f50 <HAL_TIM_Base_MspInit+0xec>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ede:	4a1c      	ldr	r2, [pc, #112]	@ (8000f50 <HAL_TIM_Base_MspInit+0xec>)
 8000ee0:	f043 0302 	orr.w	r3, r3, #2
 8000ee4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ee6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f50 <HAL_TIM_Base_MspInit+0xec>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	697b      	ldr	r3, [r7, #20]
}
 8000ef2:	e026      	b.n	8000f42 <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM4)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a17      	ldr	r2, [pc, #92]	@ (8000f58 <HAL_TIM_Base_MspInit+0xf4>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d10e      	bne.n	8000f1c <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	4b13      	ldr	r3, [pc, #76]	@ (8000f50 <HAL_TIM_Base_MspInit+0xec>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f06:	4a12      	ldr	r2, [pc, #72]	@ (8000f50 <HAL_TIM_Base_MspInit+0xec>)
 8000f08:	f043 0304 	orr.w	r3, r3, #4
 8000f0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f0e:	4b10      	ldr	r3, [pc, #64]	@ (8000f50 <HAL_TIM_Base_MspInit+0xec>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f12:	f003 0304 	and.w	r3, r3, #4
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]
}
 8000f1a:	e012      	b.n	8000f42 <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM5)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0e      	ldr	r2, [pc, #56]	@ (8000f5c <HAL_TIM_Base_MspInit+0xf8>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d10d      	bne.n	8000f42 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	4b09      	ldr	r3, [pc, #36]	@ (8000f50 <HAL_TIM_Base_MspInit+0xec>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2e:	4a08      	ldr	r2, [pc, #32]	@ (8000f50 <HAL_TIM_Base_MspInit+0xec>)
 8000f30:	f043 0308 	orr.w	r3, r3, #8
 8000f34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f36:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <HAL_TIM_Base_MspInit+0xec>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3a:	f003 0308 	and.w	r3, r3, #8
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
}
 8000f42:	bf00      	nop
 8000f44:	3720      	adds	r7, #32
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40010000 	.word	0x40010000
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40000400 	.word	0x40000400
 8000f58:	40000800 	.word	0x40000800
 8000f5c:	40000c00 	.word	0x40000c00

08000f60 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08a      	sub	sp, #40	@ 0x28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a24      	ldr	r2, [pc, #144]	@ (8001010 <HAL_TIM_MspPostInit+0xb0>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d11f      	bne.n	8000fc2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	4b23      	ldr	r3, [pc, #140]	@ (8001014 <HAL_TIM_MspPostInit+0xb4>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	4a22      	ldr	r2, [pc, #136]	@ (8001014 <HAL_TIM_MspPostInit+0xb4>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f92:	4b20      	ldr	r3, [pc, #128]	@ (8001014 <HAL_TIM_MspPostInit+0xb4>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4817      	ldr	r0, [pc, #92]	@ (8001018 <HAL_TIM_MspPostInit+0xb8>)
 8000fbc:	f001 fd58 	bl	8002a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000fc0:	e022      	b.n	8001008 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a15      	ldr	r2, [pc, #84]	@ (800101c <HAL_TIM_MspPostInit+0xbc>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d11d      	bne.n	8001008 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	4b10      	ldr	r3, [pc, #64]	@ (8001014 <HAL_TIM_MspPostInit+0xb4>)
 8000fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd4:	4a0f      	ldr	r2, [pc, #60]	@ (8001014 <HAL_TIM_MspPostInit+0xb4>)
 8000fd6:	f043 0302 	orr.w	r3, r3, #2
 8000fda:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fdc:	4b0d      	ldr	r3, [pc, #52]	@ (8001014 <HAL_TIM_MspPostInit+0xb4>)
 8000fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe0:	f003 0302 	and.w	r3, r3, #2
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fe8:	2310      	movs	r3, #16
 8000fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4619      	mov	r1, r3
 8001002:	4807      	ldr	r0, [pc, #28]	@ (8001020 <HAL_TIM_MspPostInit+0xc0>)
 8001004:	f001 fd34 	bl	8002a70 <HAL_GPIO_Init>
}
 8001008:	bf00      	nop
 800100a:	3728      	adds	r7, #40	@ 0x28
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40010000 	.word	0x40010000
 8001014:	40023800 	.word	0x40023800
 8001018:	40020000 	.word	0x40020000
 800101c:	40000400 	.word	0x40000400
 8001020:	40020400 	.word	0x40020400

08001024 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001028:	4b11      	ldr	r3, [pc, #68]	@ (8001070 <MX_USART2_UART_Init+0x4c>)
 800102a:	4a12      	ldr	r2, [pc, #72]	@ (8001074 <MX_USART2_UART_Init+0x50>)
 800102c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800102e:	4b10      	ldr	r3, [pc, #64]	@ (8001070 <MX_USART2_UART_Init+0x4c>)
 8001030:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001034:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001036:	4b0e      	ldr	r3, [pc, #56]	@ (8001070 <MX_USART2_UART_Init+0x4c>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800103c:	4b0c      	ldr	r3, [pc, #48]	@ (8001070 <MX_USART2_UART_Init+0x4c>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001042:	4b0b      	ldr	r3, [pc, #44]	@ (8001070 <MX_USART2_UART_Init+0x4c>)
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001048:	4b09      	ldr	r3, [pc, #36]	@ (8001070 <MX_USART2_UART_Init+0x4c>)
 800104a:	220c      	movs	r2, #12
 800104c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800104e:	4b08      	ldr	r3, [pc, #32]	@ (8001070 <MX_USART2_UART_Init+0x4c>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001054:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <MX_USART2_UART_Init+0x4c>)
 8001056:	2200      	movs	r2, #0
 8001058:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800105a:	4805      	ldr	r0, [pc, #20]	@ (8001070 <MX_USART2_UART_Init+0x4c>)
 800105c:	f004 f8de 	bl	800521c <HAL_UART_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001066:	f7ff fc43 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200002e0 	.word	0x200002e0
 8001074:	40004400 	.word	0x40004400

08001078 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	@ 0x28
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a1d      	ldr	r2, [pc, #116]	@ (800110c <HAL_UART_MspInit+0x94>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d133      	bne.n	8001102 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	4b1c      	ldr	r3, [pc, #112]	@ (8001110 <HAL_UART_MspInit+0x98>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a2:	4a1b      	ldr	r2, [pc, #108]	@ (8001110 <HAL_UART_MspInit+0x98>)
 80010a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010aa:	4b19      	ldr	r3, [pc, #100]	@ (8001110 <HAL_UART_MspInit+0x98>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4b15      	ldr	r3, [pc, #84]	@ (8001110 <HAL_UART_MspInit+0x98>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	4a14      	ldr	r2, [pc, #80]	@ (8001110 <HAL_UART_MspInit+0x98>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c6:	4b12      	ldr	r3, [pc, #72]	@ (8001110 <HAL_UART_MspInit+0x98>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010d2:	230c      	movs	r3, #12
 80010d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010de:	2303      	movs	r3, #3
 80010e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010e2:	2307      	movs	r3, #7
 80010e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	4619      	mov	r1, r3
 80010ec:	4809      	ldr	r0, [pc, #36]	@ (8001114 <HAL_UART_MspInit+0x9c>)
 80010ee:	f001 fcbf 	bl	8002a70 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2100      	movs	r1, #0
 80010f6:	2026      	movs	r0, #38	@ 0x26
 80010f8:	f001 fbf1 	bl	80028de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010fc:	2026      	movs	r0, #38	@ 0x26
 80010fe:	f001 fc0a 	bl	8002916 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001102:	bf00      	nop
 8001104:	3728      	adds	r7, #40	@ 0x28
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40004400 	.word	0x40004400
 8001110:	40023800 	.word	0x40023800
 8001114:	40020000 	.word	0x40020000

08001118 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001118:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001150 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800111c:	f7ff fc90 	bl	8000a40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001120:	480c      	ldr	r0, [pc, #48]	@ (8001154 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001122:	490d      	ldr	r1, [pc, #52]	@ (8001158 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001124:	4a0d      	ldr	r2, [pc, #52]	@ (800115c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001126:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001128:	e002      	b.n	8001130 <LoopCopyDataInit>

0800112a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800112c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800112e:	3304      	adds	r3, #4

08001130 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001130:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001132:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001134:	d3f9      	bcc.n	800112a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001136:	4a0a      	ldr	r2, [pc, #40]	@ (8001160 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001138:	4c0a      	ldr	r4, [pc, #40]	@ (8001164 <LoopFillZerobss+0x22>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800113c:	e001      	b.n	8001142 <LoopFillZerobss>

0800113e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800113e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001140:	3204      	adds	r2, #4

08001142 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001142:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001144:	d3fb      	bcc.n	800113e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001146:	f005 f821 	bl	800618c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800114a:	f7ff fb4d 	bl	80007e8 <main>
  bx  lr    
 800114e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001150:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001154:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001158:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 800115c:	08006b68 	.word	0x08006b68
  ldr r2, =_sbss
 8001160:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8001164:	20000528 	.word	0x20000528

08001168 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001168:	e7fe      	b.n	8001168 <ADC_IRQHandler>
	...

0800116c <Listener_Init>:
static Que_TypeDef uartRxQue;
UltraSonic_TypeDef sensor;
inputData_TypeDef inputData;

void Listener_Init()
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af02      	add	r7, sp, #8
	Button_Init(&hBtnUP, GPIOB, GPIO_PIN_5);
 8001172:	2220      	movs	r2, #32
 8001174:	4914      	ldr	r1, [pc, #80]	@ (80011c8 <Listener_Init+0x5c>)
 8001176:	4815      	ldr	r0, [pc, #84]	@ (80011cc <Listener_Init+0x60>)
 8001178:	f000 fbd0 	bl	800191c <Button_Init>
	Button_Init(&hBtnDOWN, GPIOB, GPIO_PIN_3);
 800117c:	2208      	movs	r2, #8
 800117e:	4912      	ldr	r1, [pc, #72]	@ (80011c8 <Listener_Init+0x5c>)
 8001180:	4813      	ldr	r0, [pc, #76]	@ (80011d0 <Listener_Init+0x64>)
 8001182:	f000 fbcb 	bl	800191c <Button_Init>
	Button_Init(&hBtnSTOP, GPIOA, GPIO_PIN_10);
 8001186:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800118a:	4912      	ldr	r1, [pc, #72]	@ (80011d4 <Listener_Init+0x68>)
 800118c:	4812      	ldr	r0, [pc, #72]	@ (80011d8 <Listener_Init+0x6c>)
 800118e:	f000 fbc5 	bl	800191c <Button_Init>
	Button_Init(&hBtnSTART, GPIOC, GPIO_PIN_13);
 8001192:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001196:	4911      	ldr	r1, [pc, #68]	@ (80011dc <Listener_Init+0x70>)
 8001198:	4811      	ldr	r0, [pc, #68]	@ (80011e0 <Listener_Init+0x74>)
 800119a:	f000 fbbf 	bl	800191c <Button_Init>
	UltraSonic_Init(&sensor, GPIOC, GPIO_PIN_7, GPIOA, GPIO_PIN_9);
 800119e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <Listener_Init+0x68>)
 80011a6:	2280      	movs	r2, #128	@ 0x80
 80011a8:	490c      	ldr	r1, [pc, #48]	@ (80011dc <Listener_Init+0x70>)
 80011aa:	480e      	ldr	r0, [pc, #56]	@ (80011e4 <Listener_Init+0x78>)
 80011ac:	f001 f9a4 	bl	80024f8 <UltraSonic_Init>

	Que_Init(&uartRxQue);
 80011b0:	480d      	ldr	r0, [pc, #52]	@ (80011e8 <Listener_Init+0x7c>)
 80011b2:	f000 fa35 	bl	8001620 <Que_Init>
	HAL_UART_Receive_IT(&huart2, &rcvData, 1); // uart recv interrupt enable
 80011b6:	2201      	movs	r2, #1
 80011b8:	490c      	ldr	r1, [pc, #48]	@ (80011ec <Listener_Init+0x80>)
 80011ba:	480d      	ldr	r0, [pc, #52]	@ (80011f0 <Listener_Init+0x84>)
 80011bc:	f004 f87e 	bl	80052bc <HAL_UART_Receive_IT>
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40020400 	.word	0x40020400
 80011cc:	2000038c 	.word	0x2000038c
 80011d0:	20000398 	.word	0x20000398
 80011d4:	40020000 	.word	0x40020000
 80011d8:	200003a4 	.word	0x200003a4
 80011dc:	40020800 	.word	0x40020800
 80011e0:	200003b0 	.word	0x200003b0
 80011e4:	20000344 	.word	0x20000344
 80011e8:	2000032c 	.word	0x2000032c
 80011ec:	20000328 	.word	0x20000328
 80011f0:	200002e0 	.word	0x200002e0

080011f4 <Presenter_Init>:

static watch_t dispData = {TIME_WATCH, 12, 0, 0, 0};
extern DHT11_TypeDef hdht11;

void Presenter_Init()
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	LCD_Init(&hi2c1);
 80011f8:	4802      	ldr	r0, [pc, #8]	@ (8001204 <Presenter_Init+0x10>)
 80011fa:	f000 ffb9 	bl	8002170 <LCD_Init>
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000120 	.word	0x20000120

08001208 <Presenter_Excute>:
{
	memcpy(&dispData, &watchData, sizeof(watch_t));
}

void Presenter_Excute()
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
	Presenter_DispLcdTreadmill(state);
 800120c:	4b09      	ldr	r3, [pc, #36]	@ (8001234 <Presenter_Excute+0x2c>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f000 f813 	bl	800123c <Presenter_DispLcdTreadmill>
	display_speed(speed, state);
 8001216:	4b08      	ldr	r3, [pc, #32]	@ (8001238 <Presenter_Excute+0x30>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a06      	ldr	r2, [pc, #24]	@ (8001234 <Presenter_Excute+0x2c>)
 800121c:	7812      	ldrb	r2, [r2, #0]
 800121e:	4611      	mov	r1, r2
 8001220:	4618      	mov	r0, r3
 8001222:	f000 f8d3 	bl	80013cc <display_speed>
	Presenter_DispFndRunTime(state);
 8001226:	4b03      	ldr	r3, [pc, #12]	@ (8001234 <Presenter_Excute+0x2c>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f000 f92e 	bl	800148c <Presenter_DispFndRunTime>
}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000005 	.word	0x20000005
 8001238:	20000008 	.word	0x20000008

0800123c <Presenter_DispLcdTreadmill>:
//		prevState = state;
//	}
//}

void Presenter_DispLcdTreadmill(TreadmillState_t state)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b0aa      	sub	sp, #168	@ 0xa8
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	71fb      	strb	r3, [r7, #7]
    static TreadmillState_t prevState = -1;
    static uint32_t stopDisplayStartTime = 0;
    static uint8_t isStopDisplayed = 0;

	char str[50] = {0};
 8001246:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800124a:	2232      	movs	r2, #50	@ 0x32
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f004 ff8e 	bl	8006170 <memset>
    char dhtStr[50] = {0};
 8001254:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001258:	2232      	movs	r2, #50	@ 0x32
 800125a:	2100      	movs	r1, #0
 800125c:	4618      	mov	r0, r3
 800125e:	f004 ff87 	bl	8006170 <memset>
	uint8_t temp = 0, humi = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8001268:	2300      	movs	r3, #0
 800126a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	uint8_t dhtResult = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

	if (DHT11_Read(&hdht11, &temp, &humi) == 0) {
 8001274:	f107 023e 	add.w	r2, r7, #62	@ 0x3e
 8001278:	f107 033f 	add.w	r3, r7, #63	@ 0x3f
 800127c:	4619      	mov	r1, r3
 800127e:	484b      	ldr	r0, [pc, #300]	@ (80013ac <Presenter_DispLcdTreadmill+0x170>)
 8001280:	f000 fcdd 	bl	8001c3e <DHT11_Read>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d109      	bne.n	800129e <Presenter_DispLcdTreadmill+0x62>
		sprintf(dhtStr, "TEMP:%03d HUM:%03d", temp, humi);
 800128a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800128e:	461a      	mov	r2, r3
 8001290:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001294:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8001298:	4945      	ldr	r1, [pc, #276]	@ (80013b0 <Presenter_DispLcdTreadmill+0x174>)
 800129a:	f004 ff47 	bl	800612c <siprintf>
	}
	// DHT11 데이터 읽기
	dhtResult = DHT11_Read(&hdht11, &temp, &humi);
 800129e:	f107 023e 	add.w	r2, r7, #62	@ 0x3e
 80012a2:	f107 033f 	add.w	r3, r7, #63	@ 0x3f
 80012a6:	4619      	mov	r1, r3
 80012a8:	4840      	ldr	r0, [pc, #256]	@ (80013ac <Presenter_DispLcdTreadmill+0x170>)
 80012aa:	f000 fcc8 	bl	8001c3e <DHT11_Read>
 80012ae:	4603      	mov	r3, r0
 80012b0:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    if (state == NO_RUNNING && isStopDisplayed == 0)
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d125      	bne.n	8001306 <Presenter_DispLcdTreadmill+0xca>
 80012ba:	4b3e      	ldr	r3, [pc, #248]	@ (80013b4 <Presenter_DispLcdTreadmill+0x178>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d121      	bne.n	8001306 <Presenter_DispLcdTreadmill+0xca>
    {
        sprintf(str, "Stop");
 80012c2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80012c6:	493c      	ldr	r1, [pc, #240]	@ (80013b8 <Presenter_DispLcdTreadmill+0x17c>)
 80012c8:	4618      	mov	r0, r3
 80012ca:	f004 ff2f 	bl	800612c <siprintf>

        LCD_clear();
 80012ce:	f001 f8b3 	bl	8002438 <LCD_clear>
        LCD_writeStringXY(0, 0, str);
 80012d2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80012d6:	461a      	mov	r2, r3
 80012d8:	2100      	movs	r1, #0
 80012da:	2000      	movs	r0, #0
 80012dc:	f001 f897 	bl	800240e <LCD_writeStringXY>
		LCD_writeStringXY(1, 0, dhtStr);
 80012e0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012e4:	461a      	mov	r2, r3
 80012e6:	2100      	movs	r1, #0
 80012e8:	2001      	movs	r0, #1
 80012ea:	f001 f890 	bl	800240e <LCD_writeStringXY>

        stopDisplayStartTime = HAL_GetTick(); // 현재 시간 저장
 80012ee:	f001 f9eb 	bl	80026c8 <HAL_GetTick>
 80012f2:	4603      	mov	r3, r0
 80012f4:	4a31      	ldr	r2, [pc, #196]	@ (80013bc <Presenter_DispLcdTreadmill+0x180>)
 80012f6:	6013      	str	r3, [r2, #0]
        isStopDisplayed = 1; // 표시 시작
 80012f8:	4b2e      	ldr	r3, [pc, #184]	@ (80013b4 <Presenter_DispLcdTreadmill+0x178>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	701a      	strb	r2, [r3, #0]
        prevState = state;
 80012fe:	4a30      	ldr	r2, [pc, #192]	@ (80013c0 <Presenter_DispLcdTreadmill+0x184>)
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	7013      	strb	r3, [r2, #0]
        LCD_clear();
        LCD_writeStringXY(0, 0, str);
        LCD_writeStringXY(1, 0, dhtStr);
        prevState = state;
    }
}
 8001304:	e04e      	b.n	80013a4 <Presenter_DispLcdTreadmill+0x168>
    else if (isStopDisplayed == 1)
 8001306:	4b2b      	ldr	r3, [pc, #172]	@ (80013b4 <Presenter_DispLcdTreadmill+0x178>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d10e      	bne.n	800132c <Presenter_DispLcdTreadmill+0xf0>
        if (HAL_GetTick() - stopDisplayStartTime >= 2000) // 2000ms = 2초
 800130e:	f001 f9db 	bl	80026c8 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	4b29      	ldr	r3, [pc, #164]	@ (80013bc <Presenter_DispLcdTreadmill+0x180>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800131e:	d341      	bcc.n	80013a4 <Presenter_DispLcdTreadmill+0x168>
            isStopDisplayed = 0; // 표시 종료
 8001320:	4b24      	ldr	r3, [pc, #144]	@ (80013b4 <Presenter_DispLcdTreadmill+0x178>)
 8001322:	2200      	movs	r2, #0
 8001324:	701a      	strb	r2, [r3, #0]
            LCD_clear();
 8001326:	f001 f887 	bl	8002438 <LCD_clear>
}
 800132a:	e03b      	b.n	80013a4 <Presenter_DispLcdTreadmill+0x168>
    else if (state != prevState && state != NO_RUNNING)
 800132c:	4b24      	ldr	r3, [pc, #144]	@ (80013c0 <Presenter_DispLcdTreadmill+0x184>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	79fa      	ldrb	r2, [r7, #7]
 8001332:	429a      	cmp	r2, r3
 8001334:	d036      	beq.n	80013a4 <Presenter_DispLcdTreadmill+0x168>
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	2b02      	cmp	r3, #2
 800133a:	d033      	beq.n	80013a4 <Presenter_DispLcdTreadmill+0x168>
        if (dhtResult == 0) {
 800133c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8001340:	2b00      	cmp	r3, #0
 8001342:	d109      	bne.n	8001358 <Presenter_DispLcdTreadmill+0x11c>
			sprintf(dhtStr, "TEMP:%03d HUM:%03d", temp, humi);
 8001344:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001348:	461a      	mov	r2, r3
 800134a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800134e:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8001352:	4917      	ldr	r1, [pc, #92]	@ (80013b0 <Presenter_DispLcdTreadmill+0x174>)
 8001354:	f004 feea 	bl	800612c <siprintf>
        if (state == RUNNING) {
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d106      	bne.n	800136c <Presenter_DispLcdTreadmill+0x130>
            sprintf(str, "Running");
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	4918      	ldr	r1, [pc, #96]	@ (80013c4 <Presenter_DispLcdTreadmill+0x188>)
 8001364:	4618      	mov	r0, r3
 8001366:	f004 fee1 	bl	800612c <siprintf>
 800136a:	e008      	b.n	800137e <Presenter_DispLcdTreadmill+0x142>
        else if (state == IDLE) {
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d105      	bne.n	800137e <Presenter_DispLcdTreadmill+0x142>
            sprintf(str, "Press Button");
 8001372:	f107 030c 	add.w	r3, r7, #12
 8001376:	4914      	ldr	r1, [pc, #80]	@ (80013c8 <Presenter_DispLcdTreadmill+0x18c>)
 8001378:	4618      	mov	r0, r3
 800137a:	f004 fed7 	bl	800612c <siprintf>
        LCD_clear();
 800137e:	f001 f85b 	bl	8002438 <LCD_clear>
        LCD_writeStringXY(0, 0, str);
 8001382:	f107 030c 	add.w	r3, r7, #12
 8001386:	461a      	mov	r2, r3
 8001388:	2100      	movs	r1, #0
 800138a:	2000      	movs	r0, #0
 800138c:	f001 f83f 	bl	800240e <LCD_writeStringXY>
        LCD_writeStringXY(1, 0, dhtStr);
 8001390:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001394:	461a      	mov	r2, r3
 8001396:	2100      	movs	r1, #0
 8001398:	2001      	movs	r0, #1
 800139a:	f001 f838 	bl	800240e <LCD_writeStringXY>
        prevState = state;
 800139e:	4a08      	ldr	r2, [pc, #32]	@ (80013c0 <Presenter_DispLcdTreadmill+0x184>)
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	7013      	strb	r3, [r2, #0]
}
 80013a4:	bf00      	nop
 80013a6:	37a8      	adds	r7, #168	@ 0xa8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000368 	.word	0x20000368
 80013b0:	08006acc 	.word	0x08006acc
 80013b4:	20000354 	.word	0x20000354
 80013b8:	08006ae0 	.word	0x08006ae0
 80013bc:	20000358 	.word	0x20000358
 80013c0:	20000004 	.word	0x20000004
 80013c4:	08006ae8 	.word	0x08006ae8
 80013c8:	08006af0 	.word	0x08006af0

080013cc <display_speed>:

void display_speed(int speed, TreadmillState_t state)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	460b      	mov	r3, r1
 80013d6:	70fb      	strb	r3, [r7, #3]
	int led = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]

	if ((speed >= 1) && (speed <= 5)) {
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	dd05      	ble.n	80013ee <display_speed+0x22>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2b05      	cmp	r3, #5
 80013e6:	dc02      	bgt.n	80013ee <display_speed+0x22>
		led = 0b00000001;
 80013e8:	2301      	movs	r3, #1
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	e03d      	b.n	800146a <display_speed+0x9e>
	}
	else if ((speed >= 6) && (speed <= 10)) {
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b05      	cmp	r3, #5
 80013f2:	dd05      	ble.n	8001400 <display_speed+0x34>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b0a      	cmp	r3, #10
 80013f8:	dc02      	bgt.n	8001400 <display_speed+0x34>
		led = 0b00000011;
 80013fa:	2303      	movs	r3, #3
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	e034      	b.n	800146a <display_speed+0x9e>
	}
	else if ((speed >= 11) && (speed <= 15)) {
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b0a      	cmp	r3, #10
 8001404:	dd05      	ble.n	8001412 <display_speed+0x46>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b0f      	cmp	r3, #15
 800140a:	dc02      	bgt.n	8001412 <display_speed+0x46>
		led = 0b00000111;
 800140c:	2307      	movs	r3, #7
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	e02b      	b.n	800146a <display_speed+0x9e>
	}
	else if ((speed >= 15) && (speed <= 20)) {
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b0e      	cmp	r3, #14
 8001416:	dd05      	ble.n	8001424 <display_speed+0x58>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b14      	cmp	r3, #20
 800141c:	dc02      	bgt.n	8001424 <display_speed+0x58>
		led = 0b00001111;
 800141e:	230f      	movs	r3, #15
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	e022      	b.n	800146a <display_speed+0x9e>
	}
	else if ((speed >= 21) && (speed <= 25)) {
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b14      	cmp	r3, #20
 8001428:	dd05      	ble.n	8001436 <display_speed+0x6a>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b19      	cmp	r3, #25
 800142e:	dc02      	bgt.n	8001436 <display_speed+0x6a>
		led = 0b00011111;
 8001430:	231f      	movs	r3, #31
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	e019      	b.n	800146a <display_speed+0x9e>
	}
	else if ((speed >= 26) && (speed <= 30)) {
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b19      	cmp	r3, #25
 800143a:	dd05      	ble.n	8001448 <display_speed+0x7c>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b1e      	cmp	r3, #30
 8001440:	dc02      	bgt.n	8001448 <display_speed+0x7c>
		led = 0b00111111;
 8001442:	233f      	movs	r3, #63	@ 0x3f
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	e010      	b.n	800146a <display_speed+0x9e>
	}
	else if ((speed >= 31) && (speed <= 36)) {
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b1e      	cmp	r3, #30
 800144c:	dd05      	ble.n	800145a <display_speed+0x8e>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2b24      	cmp	r3, #36	@ 0x24
 8001452:	dc02      	bgt.n	800145a <display_speed+0x8e>
		led = 0b01111111;
 8001454:	237f      	movs	r3, #127	@ 0x7f
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	e007      	b.n	800146a <display_speed+0x9e>
	}
	else if ((speed >= 37) && (speed <= 42)) {
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b24      	cmp	r3, #36	@ 0x24
 800145e:	dd04      	ble.n	800146a <display_speed+0x9e>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b2a      	cmp	r3, #42	@ 0x2a
 8001464:	dc01      	bgt.n	800146a <display_speed+0x9e>
		led = 0b11111111;
 8001466:	23ff      	movs	r3, #255	@ 0xff
 8001468:	60fb      	str	r3, [r7, #12]
	}

	if (state == RUNNING) {
 800146a:	78fb      	ldrb	r3, [r7, #3]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d105      	bne.n	800147c <display_speed+0xb0>
		LedBar_Write(led);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	b2db      	uxtb	r3, r3
 8001474:	4618      	mov	r0, r3
 8001476:	f000 ffe9 	bl	800244c <LedBar_Write>
	} else {
		LedBar_Write(0x00);
	}
}
 800147a:	e002      	b.n	8001482 <display_speed+0xb6>
		LedBar_Write(0x00);
 800147c:	2000      	movs	r0, #0
 800147e:	f000 ffe5 	bl	800244c <LedBar_Write>
}
 8001482:	bf00      	nop
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <Presenter_DispFndRunTime>:

void Presenter_DispFndRunTime(TreadmillState_t state)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b088      	sub	sp, #32
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
   static uint32_t startTime = 0;
   static uint32_t accumulatedTime = 0;
   static uint8_t runningFlag = 0;

   if (state == RUNNING)
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d14f      	bne.n	800153c <Presenter_DispFndRunTime+0xb0>
   {
      if (runningFlag == 0)
 800149c:	4b2b      	ldr	r3, [pc, #172]	@ (800154c <Presenter_DispFndRunTime+0xc0>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d107      	bne.n	80014b4 <Presenter_DispFndRunTime+0x28>
      {
         startTime = HAL_GetTick();
 80014a4:	f001 f910 	bl	80026c8 <HAL_GetTick>
 80014a8:	4603      	mov	r3, r0
 80014aa:	4a29      	ldr	r2, [pc, #164]	@ (8001550 <Presenter_DispFndRunTime+0xc4>)
 80014ac:	6013      	str	r3, [r2, #0]
         runningFlag = 1;
 80014ae:	4b27      	ldr	r3, [pc, #156]	@ (800154c <Presenter_DispFndRunTime+0xc0>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	701a      	strb	r2, [r3, #0]
      }

      uint32_t elapsedTime = accumulatedTime + (HAL_GetTick() - startTime);
 80014b4:	f001 f908 	bl	80026c8 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	4b25      	ldr	r3, [pc, #148]	@ (8001550 <Presenter_DispFndRunTime+0xc4>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	1ad2      	subs	r2, r2, r3
 80014c0:	4b24      	ldr	r3, [pc, #144]	@ (8001554 <Presenter_DispFndRunTime+0xc8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4413      	add	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
      uint32_t elapsedSeconds = elapsedTime / 1000;
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	4a23      	ldr	r2, [pc, #140]	@ (8001558 <Presenter_DispFndRunTime+0xcc>)
 80014cc:	fba2 2303 	umull	r2, r3, r2, r3
 80014d0:	099b      	lsrs	r3, r3, #6
 80014d2:	617b      	str	r3, [r7, #20]

      uint32_t minutes = elapsedSeconds / 60;
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	4a21      	ldr	r2, [pc, #132]	@ (800155c <Presenter_DispFndRunTime+0xd0>)
 80014d8:	fba2 2303 	umull	r2, r3, r2, r3
 80014dc:	095b      	lsrs	r3, r3, #5
 80014de:	613b      	str	r3, [r7, #16]
      uint32_t seconds = elapsedSeconds % 60;
 80014e0:	697a      	ldr	r2, [r7, #20]
 80014e2:	4b1e      	ldr	r3, [pc, #120]	@ (800155c <Presenter_DispFndRunTime+0xd0>)
 80014e4:	fba3 1302 	umull	r1, r3, r3, r2
 80014e8:	0959      	lsrs	r1, r3, #5
 80014ea:	460b      	mov	r3, r1
 80014ec:	011b      	lsls	r3, r3, #4
 80014ee:	1a5b      	subs	r3, r3, r1
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	60fb      	str	r3, [r7, #12]

      uint32_t displayData = minutes * 100 + seconds;
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	2264      	movs	r2, #100	@ 0x64
 80014fa:	fb02 f303 	mul.w	r3, r2, r3
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	4413      	add	r3, r2
 8001502:	61fb      	str	r3, [r7, #28]

      if (seconds%2 == 0) FND_WriteDp(0x04, FND_DP_ON);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	2b00      	cmp	r3, #0
 800150c:	d104      	bne.n	8001518 <Presenter_DispFndRunTime+0x8c>
 800150e:	2101      	movs	r1, #1
 8001510:	2004      	movs	r0, #4
 8001512:	f000 fc63 	bl	8001ddc <FND_WriteDp>
 8001516:	e003      	b.n	8001520 <Presenter_DispFndRunTime+0x94>
      else FND_WriteDp(0x04, FND_DP_OFF);
 8001518:	2100      	movs	r1, #0
 800151a:	2004      	movs	r0, #4
 800151c:	f000 fc5e 	bl	8001ddc <FND_WriteDp>

      if (displayData > 9999) displayData = 9999;
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001526:	4293      	cmp	r3, r2
 8001528:	d902      	bls.n	8001530 <Presenter_DispFndRunTime+0xa4>
 800152a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800152e:	61fb      	str	r3, [r7, #28]

      FND_WriteData(displayData);
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	b29b      	uxth	r3, r3
 8001534:	4618      	mov	r0, r3
 8001536:	f000 fc79 	bl	8001e2c <FND_WriteData>
   }
   else
   {
      runningFlag = 0;
   }
}
 800153a:	e002      	b.n	8001542 <Presenter_DispFndRunTime+0xb6>
      runningFlag = 0;
 800153c:	4b03      	ldr	r3, [pc, #12]	@ (800154c <Presenter_DispFndRunTime+0xc0>)
 800153e:	2200      	movs	r2, #0
 8001540:	701a      	strb	r2, [r3, #0]
}
 8001542:	bf00      	nop
 8001544:	3720      	adds	r7, #32
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	2000035c 	.word	0x2000035c
 8001550:	20000360 	.word	0x20000360
 8001554:	20000364 	.word	0x20000364
 8001558:	10624dd3 	.word	0x10624dd3
 800155c:	88888889 	.word	0x88888889

08001560 <HAL_TIM_PeriodElapsedCallback>:
//static uint8_t rcvData = 0;

DHT11_TypeDef hdht11;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2) {
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001570:	d101      	bne.n	8001576 <HAL_TIM_PeriodElapsedCallback+0x16>
		FND_DispDataCallBack();
 8001572:	f000 fc6b 	bl	8001e4c <FND_DispDataCallBack>
	}
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
	...

08001580 <ap_main>:




int ap_main()
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0

   HAL_TIM_Base_Start_IT(&htim2);
 8001584:	480b      	ldr	r0, [pc, #44]	@ (80015b4 <ap_main+0x34>)
 8001586:	f002 fe31 	bl	80041ec <HAL_TIM_Base_Start_IT>
   HAL_TIM_Base_Start(&htim4);
 800158a:	480b      	ldr	r0, [pc, #44]	@ (80015b8 <ap_main+0x38>)
 800158c:	f002 fdac 	bl	80040e8 <HAL_TIM_Base_Start>
   HAL_TIM_Base_Start(&htim5);
 8001590:	480a      	ldr	r0, [pc, #40]	@ (80015bc <ap_main+0x3c>)
 8001592:	f002 fda9 	bl	80040e8 <HAL_TIM_Base_Start>
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001596:	2100      	movs	r1, #0
 8001598:	4809      	ldr	r0, [pc, #36]	@ (80015c0 <ap_main+0x40>)
 800159a:	f002 fee3 	bl	8004364 <HAL_TIM_PWM_Start>
   HAL_TIM_Base_Start(&htim3);
 800159e:	4809      	ldr	r0, [pc, #36]	@ (80015c4 <ap_main+0x44>)
 80015a0:	f002 fda2 	bl	80040e8 <HAL_TIM_Base_Start>
   //HAL_UART_Receive_IT(&huart2, &rcvData, 1);
//   int prevTick = 0;
    while (1)
    {
        treadmill_run();
 80015a4:	f000 f900 	bl	80017a8 <treadmill_run>
        treadmill_emergency();
 80015a8:	f000 f982 	bl	80018b0 <treadmill_emergency>
//
//            int dist = UltraSonic_GetDistance(&sensor);
//            FND_WriteData(dist);
//        }

        Presenter_Excute();
 80015ac:	f7ff fe2c 	bl	8001208 <Presenter_Excute>
        treadmill_run();
 80015b0:	bf00      	nop
 80015b2:	e7f7      	b.n	80015a4 <ap_main+0x24>
 80015b4:	200001c0 	.word	0x200001c0
 80015b8:	20000250 	.word	0x20000250
 80015bc:	20000298 	.word	0x20000298
 80015c0:	20000178 	.word	0x20000178
 80015c4:	20000208 	.word	0x20000208

080015c8 <HAL_UART_RxCpltCallback>:

    return 0;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a04      	ldr	r2, [pc, #16]	@ (80015e8 <HAL_UART_RxCpltCallback+0x20>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d101      	bne.n	80015de <HAL_UART_RxCpltCallback+0x16>
		Listener_UartCallBack();
 80015da:	f000 f989 	bl	80018f0 <Listener_UartCallBack>
	}
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40004400 	.word	0x40004400

080015ec <ap_init>:


void ap_init()
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
	Listener_Init();
 80015f0:	f7ff fdbc 	bl	800116c <Listener_Init>
	Presenter_Init();
 80015f4:	f7ff fdfe 	bl	80011f4 <Presenter_Init>
	Sound_Init();
 80015f8:	f000 f898 	bl	800172c <Sound_Init>
	DC_Motor_Init(&htim1, TIM_CHANNEL_1);
 80015fc:	2100      	movs	r1, #0
 80015fe:	4805      	ldr	r0, [pc, #20]	@ (8001614 <ap_init+0x28>)
 8001600:	f000 fa40 	bl	8001a84 <DC_Motor_Init>
	DHT11_Init(&hdht11, GPIOB, GPIO_PIN_6);
 8001604:	2240      	movs	r2, #64	@ 0x40
 8001606:	4904      	ldr	r1, [pc, #16]	@ (8001618 <ap_init+0x2c>)
 8001608:	4804      	ldr	r0, [pc, #16]	@ (800161c <ap_init+0x30>)
 800160a:	f000 fb05 	bl	8001c18 <DHT11_Init>
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000178 	.word	0x20000178
 8001618:	40020400 	.word	0x40020400
 800161c:	20000368 	.word	0x20000368

08001620 <Que_Init>:
#include "queue.h"



void Que_Init(Que_TypeDef *q)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	q->front = 0;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
	q->rear = 0;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	605a      	str	r2, [r3, #4]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <isQueFull>:

int isQueFull(Que_TypeDef *q)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	return q->front == ((q->rear+1) % QUE_SIZE);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	3301      	adds	r3, #1
 8001652:	4259      	negs	r1, r3
 8001654:	f003 0303 	and.w	r3, r3, #3
 8001658:	f001 0103 	and.w	r1, r1, #3
 800165c:	bf58      	it	pl
 800165e:	424b      	negpl	r3, r1
 8001660:	429a      	cmp	r2, r3
 8001662:	bf0c      	ite	eq
 8001664:	2301      	moveq	r3, #1
 8001666:	2300      	movne	r3, #0
 8001668:	b2db      	uxtb	r3, r3
}
 800166a:	4618      	mov	r0, r3
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <isQueEmpty>:

int isQueEmpty(Que_TypeDef *q)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
	return q->front == q->rear;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	429a      	cmp	r2, r3
 8001688:	bf0c      	ite	eq
 800168a:	2301      	moveq	r3, #1
 800168c:	2300      	movne	r3, #0
 800168e:	b2db      	uxtb	r3, r3
}
 8001690:	4618      	mov	r0, r3
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <enQue>:

void enQue(Que_TypeDef *q, int data)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
	if (isQueFull(q)) {
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff ffca 	bl	8001640 <isQueFull>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d113      	bne.n	80016da <enQue+0x3e>
		return;
	}
	q->queData[q->rear] = data;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685a      	ldr	r2, [r3, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	3202      	adds	r2, #2
 80016ba:	6839      	ldr	r1, [r7, #0]
 80016bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	q->rear = (q->rear+1) % QUE_SIZE;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	3301      	adds	r3, #1
 80016c6:	425a      	negs	r2, r3
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	f002 0203 	and.w	r2, r2, #3
 80016d0:	bf58      	it	pl
 80016d2:	4253      	negpl	r3, r2
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	6053      	str	r3, [r2, #4]
 80016d8:	e000      	b.n	80016dc <enQue+0x40>
		return;
 80016da:	bf00      	nop
}
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <deQue>:

int deQue(Que_TypeDef *q)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b084      	sub	sp, #16
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
	if (isQueEmpty(q)) {
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff ffc3 	bl	8001676 <isQueEmpty>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d114      	bne.n	8001720 <deQue+0x3e>
		return;
	}
	int data = q->queData[q->front];
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3202      	adds	r2, #2
 80016fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001702:	60fb      	str	r3, [r7, #12]
	q->front = (q->front+1) % QUE_SIZE;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	3301      	adds	r3, #1
 800170a:	425a      	negs	r2, r3
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	f002 0203 	and.w	r2, r2, #3
 8001714:	bf58      	it	pl
 8001716:	4253      	negpl	r3, r2
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	6013      	str	r3, [r2, #0]
	return data;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	e001      	b.n	8001724 <deQue+0x42>
		return;
 8001720:	bf00      	nop
 8001722:	bf00      	nop
}
 8001724:	4618      	mov	r0, r3
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <Sound_Init>:
 *      Author: kccistc
 */
#include "sound.h"

void Sound_Init()
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
   Buzzer_Init(&htim3, TIM_CHANNEL_1);
 8001730:	2100      	movs	r1, #0
 8001732:	4802      	ldr	r0, [pc, #8]	@ (800173c <Sound_Init+0x10>)
 8001734:	f000 f93a 	bl	80019ac <Buzzer_Init>
}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000208 	.word	0x20000208

08001740 <Sound_PowerOn>:

void Sound_PowerOn()
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
    for (int i = 0; i < 5; i++)
 8001746:	2300      	movs	r3, #0
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	e01e      	b.n	800178a <Sound_PowerOn+0x4a>
    {
        Buzzer_SetFreq(2000);
 800174c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001750:	f000 f942 	bl	80019d8 <Buzzer_SetFreq>
        Buzzer_Start();
 8001754:	f000 f976 	bl	8001a44 <Buzzer_Start>
        HAL_Delay(80);
 8001758:	2050      	movs	r0, #80	@ 0x50
 800175a:	f000 ffc1 	bl	80026e0 <HAL_Delay>

        Buzzer_Stop();
 800175e:	f000 f981 	bl	8001a64 <Buzzer_Stop>
        HAL_Delay(50);
 8001762:	2032      	movs	r0, #50	@ 0x32
 8001764:	f000 ffbc 	bl	80026e0 <HAL_Delay>

        Buzzer_SetFreq(1200);
 8001768:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 800176c:	f000 f934 	bl	80019d8 <Buzzer_SetFreq>
        Buzzer_Start();
 8001770:	f000 f968 	bl	8001a44 <Buzzer_Start>
        HAL_Delay(80);
 8001774:	2050      	movs	r0, #80	@ 0x50
 8001776:	f000 ffb3 	bl	80026e0 <HAL_Delay>

        Buzzer_Stop();
 800177a:	f000 f973 	bl	8001a64 <Buzzer_Stop>
        HAL_Delay(50);
 800177e:	2032      	movs	r0, #50	@ 0x32
 8001780:	f000 ffae 	bl	80026e0 <HAL_Delay>
    for (int i = 0; i < 5; i++)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3301      	adds	r3, #1
 8001788:	607b      	str	r3, [r7, #4]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b04      	cmp	r3, #4
 800178e:	dddd      	ble.n	800174c <Sound_PowerOn+0xc>
    }
}
 8001790:	bf00      	nop
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <Sound_PowerOff>:

void Sound_PowerOff()
{
 800179a:	b580      	push	{r7, lr}
 800179c:	af00      	add	r7, sp, #0
   Buzzer_Stop();
 800179e:	f000 f961 	bl	8001a64 <Buzzer_Stop>
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <treadmill_run>:
	}
	return 0;
}

void treadmill_run()
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
	int uartRxData = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	607b      	str	r3, [r7, #4]

	if (!isQueEmpty(&uartRxQue)) {
 80017b2:	4838      	ldr	r0, [pc, #224]	@ (8001894 <treadmill_run+0xec>)
 80017b4:	f7ff ff5f 	bl	8001676 <isQueEmpty>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d103      	bne.n	80017c6 <treadmill_run+0x1e>
		uartRxData = deQue(&uartRxQue);
 80017be:	4835      	ldr	r0, [pc, #212]	@ (8001894 <treadmill_run+0xec>)
 80017c0:	f7ff ff8f 	bl	80016e2 <deQue>
 80017c4:	6078      	str	r0, [r7, #4]
	}

    switch (state)
 80017c6:	4b34      	ldr	r3, [pc, #208]	@ (8001898 <treadmill_run+0xf0>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d055      	beq.n	800187a <treadmill_run+0xd2>
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	dc5c      	bgt.n	800188c <treadmill_run+0xe4>
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d002      	beq.n	80017dc <treadmill_run+0x34>
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d00d      	beq.n	80017f6 <treadmill_run+0x4e>

        case NO_RUNNING:
            DC_Motor_Stop();
        	state = IDLE;
    }
}
 80017da:	e057      	b.n	800188c <treadmill_run+0xe4>
			if (Button_GetState(&hBtnSTART) == ACT_PUSHED || uartRxData == 'R') {
 80017dc:	482f      	ldr	r0, [pc, #188]	@ (800189c <treadmill_run+0xf4>)
 80017de:	f000 f8b3 	bl	8001948 <Button_GetState>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d002      	beq.n	80017ee <treadmill_run+0x46>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b52      	cmp	r3, #82	@ 0x52
 80017ec:	d14b      	bne.n	8001886 <treadmill_run+0xde>
				state = RUNNING;
 80017ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001898 <treadmill_run+0xf0>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	701a      	strb	r2, [r3, #0]
			break;
 80017f4:	e047      	b.n	8001886 <treadmill_run+0xde>
			DC_Motor_SetFreq(10, speed);
 80017f6:	4b2a      	ldr	r3, [pc, #168]	@ (80018a0 <treadmill_run+0xf8>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4619      	mov	r1, r3
 80017fc:	200a      	movs	r0, #10
 80017fe:	f000 f957 	bl	8001ab0 <DC_Motor_SetFreq>
			DC_Motor_Start();
 8001802:	f000 f98d 	bl	8001b20 <DC_Motor_Start>
			if (Button_GetState(&hBtnSTOP) == ACT_PUSHED || uartRxData == 'S') {
 8001806:	4827      	ldr	r0, [pc, #156]	@ (80018a4 <treadmill_run+0xfc>)
 8001808:	f000 f89e 	bl	8001948 <Button_GetState>
 800180c:	4603      	mov	r3, r0
 800180e:	2b01      	cmp	r3, #1
 8001810:	d002      	beq.n	8001818 <treadmill_run+0x70>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b53      	cmp	r3, #83	@ 0x53
 8001816:	d103      	bne.n	8001820 <treadmill_run+0x78>
				state = NO_RUNNING;
 8001818:	4b1f      	ldr	r3, [pc, #124]	@ (8001898 <treadmill_run+0xf0>)
 800181a:	2202      	movs	r2, #2
 800181c:	701a      	strb	r2, [r3, #0]
 800181e:	e02b      	b.n	8001878 <treadmill_run+0xd0>
			else if (Button_GetState(&hBtnUP) == ACT_PUSHED || uartRxData == 'U') {
 8001820:	4821      	ldr	r0, [pc, #132]	@ (80018a8 <treadmill_run+0x100>)
 8001822:	f000 f891 	bl	8001948 <Button_GetState>
 8001826:	4603      	mov	r3, r0
 8001828:	2b01      	cmp	r3, #1
 800182a:	d002      	beq.n	8001832 <treadmill_run+0x8a>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b55      	cmp	r3, #85	@ 0x55
 8001830:	d10c      	bne.n	800184c <treadmill_run+0xa4>
				speed += 2;
 8001832:	4b1b      	ldr	r3, [pc, #108]	@ (80018a0 <treadmill_run+0xf8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	3302      	adds	r3, #2
 8001838:	4a19      	ldr	r2, [pc, #100]	@ (80018a0 <treadmill_run+0xf8>)
 800183a:	6013      	str	r3, [r2, #0]
				if (speed > MAX_SPEED) speed = MAX_SPEED;
 800183c:	4b18      	ldr	r3, [pc, #96]	@ (80018a0 <treadmill_run+0xf8>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b64      	cmp	r3, #100	@ 0x64
 8001842:	dd19      	ble.n	8001878 <treadmill_run+0xd0>
 8001844:	4b16      	ldr	r3, [pc, #88]	@ (80018a0 <treadmill_run+0xf8>)
 8001846:	2264      	movs	r2, #100	@ 0x64
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	e015      	b.n	8001878 <treadmill_run+0xd0>
			else if (Button_GetState(&hBtnDOWN) == ACT_PUSHED || uartRxData == 'D') {
 800184c:	4817      	ldr	r0, [pc, #92]	@ (80018ac <treadmill_run+0x104>)
 800184e:	f000 f87b 	bl	8001948 <Button_GetState>
 8001852:	4603      	mov	r3, r0
 8001854:	2b01      	cmp	r3, #1
 8001856:	d002      	beq.n	800185e <treadmill_run+0xb6>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b44      	cmp	r3, #68	@ 0x44
 800185c:	d115      	bne.n	800188a <treadmill_run+0xe2>
				speed -= 2;
 800185e:	4b10      	ldr	r3, [pc, #64]	@ (80018a0 <treadmill_run+0xf8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	3b02      	subs	r3, #2
 8001864:	4a0e      	ldr	r2, [pc, #56]	@ (80018a0 <treadmill_run+0xf8>)
 8001866:	6013      	str	r3, [r2, #0]
				if (speed < MIN_SPEED) speed = MIN_SPEED;
 8001868:	4b0d      	ldr	r3, [pc, #52]	@ (80018a0 <treadmill_run+0xf8>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	da0c      	bge.n	800188a <treadmill_run+0xe2>
 8001870:	4b0b      	ldr	r3, [pc, #44]	@ (80018a0 <treadmill_run+0xf8>)
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
			break;
 8001876:	e008      	b.n	800188a <treadmill_run+0xe2>
 8001878:	e007      	b.n	800188a <treadmill_run+0xe2>
            DC_Motor_Stop();
 800187a:	f000 f961 	bl	8001b40 <DC_Motor_Stop>
        	state = IDLE;
 800187e:	4b06      	ldr	r3, [pc, #24]	@ (8001898 <treadmill_run+0xf0>)
 8001880:	2200      	movs	r2, #0
 8001882:	701a      	strb	r2, [r3, #0]
}
 8001884:	e002      	b.n	800188c <treadmill_run+0xe4>
			break;
 8001886:	bf00      	nop
 8001888:	e000      	b.n	800188c <treadmill_run+0xe4>
			break;
 800188a:	bf00      	nop
}
 800188c:	bf00      	nop
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000374 	.word	0x20000374
 8001898:	20000005 	.word	0x20000005
 800189c:	200003b0 	.word	0x200003b0
 80018a0:	20000008 	.word	0x20000008
 80018a4:	200003a4 	.word	0x200003a4
 80018a8:	2000038c 	.word	0x2000038c
 80018ac:	20000398 	.word	0x20000398

080018b0 <treadmill_emergency>:

void treadmill_emergency()
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
    int dist = UltraSonic_GetDistance(&sensor);
 80018b6:	480c      	ldr	r0, [pc, #48]	@ (80018e8 <treadmill_emergency+0x38>)
 80018b8:	f000 fe38 	bl	800252c <UltraSonic_GetDistance>
 80018bc:	6078      	str	r0, [r7, #4]

    if ((dist <= 5) && (dist >= 1) && (state == RUNNING)) {
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b05      	cmp	r3, #5
 80018c2:	dc09      	bgt.n	80018d8 <treadmill_emergency+0x28>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	dd06      	ble.n	80018d8 <treadmill_emergency+0x28>
 80018ca:	4b08      	ldr	r3, [pc, #32]	@ (80018ec <treadmill_emergency+0x3c>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d102      	bne.n	80018d8 <treadmill_emergency+0x28>
    	Sound_PowerOn();
 80018d2:	f7ff ff35 	bl	8001740 <Sound_PowerOn>
 80018d6:	e002      	b.n	80018de <treadmill_emergency+0x2e>
    } else {
    	Sound_PowerOff();
 80018d8:	f7ff ff5f 	bl	800179a <Sound_PowerOff>
    }
}
 80018dc:	bf00      	nop
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000344 	.word	0x20000344
 80018ec:	20000005 	.word	0x20000005

080018f0 <Listener_UartCallBack>:

void Listener_UartCallBack()
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
	enQue(&uartRxQue, rcvData);
 80018f4:	4b06      	ldr	r3, [pc, #24]	@ (8001910 <Listener_UartCallBack+0x20>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	4619      	mov	r1, r3
 80018fa:	4806      	ldr	r0, [pc, #24]	@ (8001914 <Listener_UartCallBack+0x24>)
 80018fc:	f7ff fece 	bl	800169c <enQue>
	HAL_UART_Receive_IT(&huart2, &rcvData, 1); // interrupt enable
 8001900:	2201      	movs	r2, #1
 8001902:	4903      	ldr	r1, [pc, #12]	@ (8001910 <Listener_UartCallBack+0x20>)
 8001904:	4804      	ldr	r0, [pc, #16]	@ (8001918 <Listener_UartCallBack+0x28>)
 8001906:	f003 fcd9 	bl	80052bc <HAL_UART_Receive_IT>
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000370 	.word	0x20000370
 8001914:	20000374 	.word	0x20000374
 8001918:	200002e0 	.word	0x200002e0

0800191c <Button_Init>:
Button_Handler_t hBtnSTOP;
Button_Handler_t hBtnSTART;


void Button_Init(Button_Handler_t *hbtn, GPIO_TypeDef *GPIOx, uint16_t pinNum)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	4613      	mov	r3, r2
 8001928:	80fb      	strh	r3, [r7, #6]
	hbtn->GPIOx = GPIOx;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	68ba      	ldr	r2, [r7, #8]
 800192e:	601a      	str	r2, [r3, #0]
	hbtn->pinNum = pinNum;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	88fa      	ldrh	r2, [r7, #6]
 8001934:	809a      	strh	r2, [r3, #4]
	hbtn->prevState = RELEASED;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2201      	movs	r2, #1
 800193a:	609a      	str	r2, [r3, #8]
}
 800193c:	bf00      	nop
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <Button_GetState>:

button_state_t Button_GetState(Button_Handler_t *hbtn)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
	uint32_t curState;
	curState = HAL_GPIO_ReadPin(hbtn->GPIOx, hbtn->pinNum); // normal state is high.
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	889b      	ldrh	r3, [r3, #4]
 8001958:	4619      	mov	r1, r3
 800195a:	4610      	mov	r0, r2
 800195c:	f001 fa0c 	bl	8002d78 <HAL_GPIO_ReadPin>
 8001960:	4603      	mov	r3, r0
 8001962:	60fb      	str	r3, [r7, #12]

	if ((hbtn->prevState == RELEASED) && (curState == PUSHED)) { // button released -> pushed
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d10a      	bne.n	8001982 <Button_GetState+0x3a>
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d107      	bne.n	8001982 <Button_GetState+0x3a>
		HAL_Delay(2); // debounce
 8001972:	2002      	movs	r0, #2
 8001974:	f000 feb4 	bl	80026e0 <HAL_Delay>
		hbtn->prevState = PUSHED;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
		return ACT_PUSHED;
 800197e:	2301      	movs	r3, #1
 8001980:	e00f      	b.n	80019a2 <Button_GetState+0x5a>
	}
	else if ((hbtn->prevState == PUSHED) && (curState == RELEASED)) { // button pushed -> released
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d10a      	bne.n	80019a0 <Button_GetState+0x58>
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d107      	bne.n	80019a0 <Button_GetState+0x58>
		HAL_Delay(2); // debounce
 8001990:	2002      	movs	r0, #2
 8001992:	f000 fea5 	bl	80026e0 <HAL_Delay>
		hbtn->prevState = RELEASED;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2201      	movs	r2, #1
 800199a:	609a      	str	r2, [r3, #8]
		return ACT_RELEASED;
 800199c:	2302      	movs	r3, #2
 800199e:	e000      	b.n	80019a2 <Button_GetState+0x5a>
	}
	return NO_ACT;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
	...

080019ac <Buzzer_Init>:

static TIM_HandleTypeDef *hbuzzerTim;
static uint32_t buzzerTimChannel;

void Buzzer_Init(TIM_HandleTypeDef *htim, uint32_t channel)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
	hbuzzerTim = htim;
 80019b6:	4a06      	ldr	r2, [pc, #24]	@ (80019d0 <Buzzer_Init+0x24>)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6013      	str	r3, [r2, #0]
	buzzerTimChannel = channel;
 80019bc:	4a05      	ldr	r2, [pc, #20]	@ (80019d4 <Buzzer_Init+0x28>)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	6013      	str	r3, [r2, #0]
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	200003bc 	.word	0x200003bc
 80019d4:	200003c0 	.word	0x200003c0

080019d8 <Buzzer_SetFreq>:

void Buzzer_SetFreq(uint32_t freq)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	if (freq < 100) freq = 100;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b63      	cmp	r3, #99	@ 0x63
 80019e4:	d802      	bhi.n	80019ec <Buzzer_SetFreq+0x14>
 80019e6:	2364      	movs	r3, #100	@ 0x64
 80019e8:	607b      	str	r3, [r7, #4]
 80019ea:	e007      	b.n	80019fc <Buzzer_SetFreq+0x24>
	else if (freq > 10000) freq = 10000;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f242 7210 	movw	r2, #10000	@ 0x2710
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d902      	bls.n	80019fc <Buzzer_SetFreq+0x24>
 80019f6:	f242 7310 	movw	r3, #10000	@ 0x2710
 80019fa:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_AUTORELOAD(&htim3, 1000000/freq - 1);
 80019fc:	4a0e      	ldr	r2, [pc, #56]	@ (8001a38 <Buzzer_SetFreq+0x60>)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a04:	4b0d      	ldr	r3, [pc, #52]	@ (8001a3c <Buzzer_SetFreq+0x64>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	3a01      	subs	r2, #1
 8001a0a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001a0c:	4a0a      	ldr	r2, [pc, #40]	@ (8001a38 <Buzzer_SetFreq+0x60>)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a14:	3b01      	subs	r3, #1
 8001a16:	4a09      	ldr	r2, [pc, #36]	@ (8001a3c <Buzzer_SetFreq+0x64>)
 8001a18:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1000000/freq/2 - 1); // duty cycle 50%
 8001a1a:	4a09      	ldr	r2, [pc, #36]	@ (8001a40 <Buzzer_SetFreq+0x68>)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a22:	4b06      	ldr	r3, [pc, #24]	@ (8001a3c <Buzzer_SetFreq+0x64>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	3a01      	subs	r2, #1
 8001a28:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	000f4240 	.word	0x000f4240
 8001a3c:	20000208 	.word	0x20000208
 8001a40:	0007a120 	.word	0x0007a120

08001a44 <Buzzer_Start>:

void Buzzer_Start()
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(hbuzzerTim, buzzerTimChannel);
 8001a48:	4b04      	ldr	r3, [pc, #16]	@ (8001a5c <Buzzer_Start+0x18>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a04      	ldr	r2, [pc, #16]	@ (8001a60 <Buzzer_Start+0x1c>)
 8001a4e:	6812      	ldr	r2, [r2, #0]
 8001a50:	4611      	mov	r1, r2
 8001a52:	4618      	mov	r0, r3
 8001a54:	f002 fc86 	bl	8004364 <HAL_TIM_PWM_Start>
}
 8001a58:	bf00      	nop
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	200003bc 	.word	0x200003bc
 8001a60:	200003c0 	.word	0x200003c0

08001a64 <Buzzer_Stop>:

void Buzzer_Stop()
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(hbuzzerTim, buzzerTimChannel);
 8001a68:	4b04      	ldr	r3, [pc, #16]	@ (8001a7c <Buzzer_Stop+0x18>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a04      	ldr	r2, [pc, #16]	@ (8001a80 <Buzzer_Stop+0x1c>)
 8001a6e:	6812      	ldr	r2, [r2, #0]
 8001a70:	4611      	mov	r1, r2
 8001a72:	4618      	mov	r0, r3
 8001a74:	f002 fd26 	bl	80044c4 <HAL_TIM_PWM_Stop>
}
 8001a78:	bf00      	nop
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	200003bc 	.word	0x200003bc
 8001a80:	200003c0 	.word	0x200003c0

08001a84 <DC_Motor_Init>:

static TIM_HandleTypeDef *hmotorTim;
static uint32_t motorTimChannel;

void DC_Motor_Init(TIM_HandleTypeDef *htim, uint32_t channel)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
	hmotorTim = htim;
 8001a8e:	4a06      	ldr	r2, [pc, #24]	@ (8001aa8 <DC_Motor_Init+0x24>)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6013      	str	r3, [r2, #0]
	motorTimChannel = channel;
 8001a94:	4a05      	ldr	r2, [pc, #20]	@ (8001aac <DC_Motor_Init+0x28>)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	6013      	str	r3, [r2, #0]
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	200003c4 	.word	0x200003c4
 8001aac:	200003c8 	.word	0x200003c8

08001ab0 <DC_Motor_SetFreq>:

void DC_Motor_SetFreq(uint32_t freq, int duty)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
	if (duty < 0) duty = 0;
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	da02      	bge.n	8001ac6 <DC_Motor_SetFreq+0x16>
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	e004      	b.n	8001ad0 <DC_Motor_SetFreq+0x20>
	else if (duty > 100) duty = 100;
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	2b64      	cmp	r3, #100	@ 0x64
 8001aca:	dd01      	ble.n	8001ad0 <DC_Motor_SetFreq+0x20>
 8001acc:	2364      	movs	r3, #100	@ 0x64
 8001ace:	603b      	str	r3, [r7, #0]

    uint32_t arr = 1000000 / freq - 1;  // 주기 설정
 8001ad0:	4a10      	ldr	r2, [pc, #64]	@ (8001b14 <DC_Motor_SetFreq+0x64>)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	60fb      	str	r3, [r7, #12]
    uint32_t ccr = (arr + 1) * duty / 100;  // 듀티비 비율 설정
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	fb02 f303 	mul.w	r3, r2, r3
 8001ae6:	4a0c      	ldr	r2, [pc, #48]	@ (8001b18 <DC_Motor_SetFreq+0x68>)
 8001ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8001aec:	095b      	lsrs	r3, r3, #5
 8001aee:	60bb      	str	r3, [r7, #8]

	__HAL_TIM_SET_AUTORELOAD(&htim1, arr);
 8001af0:	4b0a      	ldr	r3, [pc, #40]	@ (8001b1c <DC_Motor_SetFreq+0x6c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001af8:	4a08      	ldr	r2, [pc, #32]	@ (8001b1c <DC_Motor_SetFreq+0x6c>)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ccr);
 8001afe:	4b07      	ldr	r3, [pc, #28]	@ (8001b1c <DC_Motor_SetFreq+0x6c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68ba      	ldr	r2, [r7, #8]
 8001b04:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001b06:	bf00      	nop
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	000f4240 	.word	0x000f4240
 8001b18:	51eb851f 	.word	0x51eb851f
 8001b1c:	20000178 	.word	0x20000178

08001b20 <DC_Motor_Start>:

void DC_Motor_Start()
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(hmotorTim, motorTimChannel);
 8001b24:	4b04      	ldr	r3, [pc, #16]	@ (8001b38 <DC_Motor_Start+0x18>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a04      	ldr	r2, [pc, #16]	@ (8001b3c <DC_Motor_Start+0x1c>)
 8001b2a:	6812      	ldr	r2, [r2, #0]
 8001b2c:	4611      	mov	r1, r2
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f002 fc18 	bl	8004364 <HAL_TIM_PWM_Start>
}
 8001b34:	bf00      	nop
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	200003c4 	.word	0x200003c4
 8001b3c:	200003c8 	.word	0x200003c8

08001b40 <DC_Motor_Stop>:

void DC_Motor_Stop()
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(hmotorTim, motorTimChannel);
 8001b44:	4b04      	ldr	r3, [pc, #16]	@ (8001b58 <DC_Motor_Stop+0x18>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a04      	ldr	r2, [pc, #16]	@ (8001b5c <DC_Motor_Stop+0x1c>)
 8001b4a:	6812      	ldr	r2, [r2, #0]
 8001b4c:	4611      	mov	r1, r2
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f002 fcb8 	bl	80044c4 <HAL_TIM_PWM_Stop>
}
 8001b54:	bf00      	nop
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	200003c4 	.word	0x200003c4
 8001b5c:	200003c8 	.word	0x200003c8

08001b60 <Set_Pin_Output>:

#include "DHT11.h"

extern TIM_HandleTypeDef htim5;

static void Set_Pin_Output(DHT11_TypeDef *dht) {
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b088      	sub	sp, #32
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	f107 030c 	add.w	r3, r7, #12
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = dht->data_pinNum;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	889b      	ldrh	r3, [r3, #4]
 8001b7c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(dht->data_GPIOx, &GPIO_InitStruct);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f107 020c 	add.w	r2, r7, #12
 8001b92:	4611      	mov	r1, r2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f000 ff6b 	bl	8002a70 <HAL_GPIO_Init>
}
 8001b9a:	bf00      	nop
 8001b9c:	3720      	adds	r7, #32
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <Set_Pin_Input>:

static void Set_Pin_Input(DHT11_TypeDef *dht) {
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b088      	sub	sp, #32
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001baa:	f107 030c 	add.w	r3, r7, #12
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	60da      	str	r2, [r3, #12]
 8001bb8:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = dht->data_pinNum;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	889b      	ldrh	r3, [r3, #4]
 8001bbe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(dht->data_GPIOx, &GPIO_InitStruct);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f107 020c 	add.w	r2, r7, #12
 8001bd0:	4611      	mov	r1, r2
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f000 ff4c 	bl	8002a70 <HAL_GPIO_Init>
}
 8001bd8:	bf00      	nop
 8001bda:	3720      	adds	r7, #32
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <delay_us_dht>:

void delay_us_dht(uint16_t us)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim5, 0);
 8001bea:	4b0a      	ldr	r3, [pc, #40]	@ (8001c14 <delay_us_dht+0x34>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Start(&htim5);
 8001bf2:	4808      	ldr	r0, [pc, #32]	@ (8001c14 <delay_us_dht+0x34>)
 8001bf4:	f002 fa78 	bl	80040e8 <HAL_TIM_Base_Start>
    while (__HAL_TIM_GET_COUNTER(&htim5) < us);
 8001bf8:	bf00      	nop
 8001bfa:	4b06      	ldr	r3, [pc, #24]	@ (8001c14 <delay_us_dht+0x34>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c00:	88fb      	ldrh	r3, [r7, #6]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d3f9      	bcc.n	8001bfa <delay_us_dht+0x1a>
    HAL_TIM_Base_Stop(&htim5);
 8001c06:	4803      	ldr	r0, [pc, #12]	@ (8001c14 <delay_us_dht+0x34>)
 8001c08:	f002 fac8 	bl	800419c <HAL_TIM_Base_Stop>
}
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000298 	.word	0x20000298

08001c18 <DHT11_Init>:

void DHT11_Init(DHT11_TypeDef *dht, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	4613      	mov	r3, r2
 8001c24:	80fb      	strh	r3, [r7, #6]
    dht->data_GPIOx = GPIOx;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	68ba      	ldr	r2, [r7, #8]
 8001c2a:	601a      	str	r2, [r3, #0]
    dht->data_pinNum = GPIO_Pin;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	88fa      	ldrh	r2, [r7, #6]
 8001c30:	809a      	strh	r2, [r3, #4]
}
 8001c32:	bf00      	nop
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <DHT11_Read>:

uint8_t DHT11_Read(DHT11_TypeDef *dht, uint8_t *temp, uint8_t *humi) {
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b088      	sub	sp, #32
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	60f8      	str	r0, [r7, #12]
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	607a      	str	r2, [r7, #4]
    uint8_t data[5] = {0};
 8001c4a:	f107 0310 	add.w	r3, r7, #16
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	711a      	strb	r2, [r3, #4]

    // Start signal
    Set_Pin_Output(dht);
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f7ff ff83 	bl	8001b60 <Set_Pin_Output>
    HAL_GPIO_WritePin(dht->data_GPIOx, dht->data_pinNum, GPIO_PIN_RESET);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6818      	ldr	r0, [r3, #0]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	889b      	ldrh	r3, [r3, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	4619      	mov	r1, r3
 8001c66:	f001 f89f 	bl	8002da8 <HAL_GPIO_WritePin>
    delay_us_dht(18000);
 8001c6a:	f244 6050 	movw	r0, #18000	@ 0x4650
 8001c6e:	f7ff ffb7 	bl	8001be0 <delay_us_dht>
    HAL_GPIO_WritePin(dht->data_GPIOx, dht->data_pinNum, GPIO_PIN_SET);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6818      	ldr	r0, [r3, #0]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	889b      	ldrh	r3, [r3, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	f001 f893 	bl	8002da8 <HAL_GPIO_WritePin>
    delay_us_dht(30);
 8001c82:	201e      	movs	r0, #30
 8001c84:	f7ff ffac 	bl	8001be0 <delay_us_dht>

    Set_Pin_Input(dht);
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f7ff ff8a 	bl	8001ba2 <Set_Pin_Input>

    // 응답 신호 대기
    uint32_t timeout = 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
    while (HAL_GPIO_ReadPin(dht->data_GPIOx, dht->data_pinNum) == GPIO_PIN_SET)
 8001c92:	e009      	b.n	8001ca8 <DHT11_Read+0x6a>
        if (++timeout > 10000) return 1;
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	3301      	adds	r3, #1
 8001c98:	61fb      	str	r3, [r7, #28]
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d901      	bls.n	8001ca8 <DHT11_Read+0x6a>
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e094      	b.n	8001dd2 <DHT11_Read+0x194>
    while (HAL_GPIO_ReadPin(dht->data_GPIOx, dht->data_pinNum) == GPIO_PIN_SET)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	889b      	ldrh	r3, [r3, #4]
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	f001 f860 	bl	8002d78 <HAL_GPIO_ReadPin>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d0ea      	beq.n	8001c94 <DHT11_Read+0x56>

    while (HAL_GPIO_ReadPin(dht->data_GPIOx, dht->data_pinNum) == GPIO_PIN_RESET);
 8001cbe:	bf00      	nop
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	889b      	ldrh	r3, [r3, #4]
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4610      	mov	r0, r2
 8001ccc:	f001 f854 	bl	8002d78 <HAL_GPIO_ReadPin>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d0f4      	beq.n	8001cc0 <DHT11_Read+0x82>
    while (HAL_GPIO_ReadPin(dht->data_GPIOx, dht->data_pinNum) == GPIO_PIN_SET);
 8001cd6:	bf00      	nop
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	889b      	ldrh	r3, [r3, #4]
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4610      	mov	r0, r2
 8001ce4:	f001 f848 	bl	8002d78 <HAL_GPIO_ReadPin>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d0f4      	beq.n	8001cd8 <DHT11_Read+0x9a>

    // 40bit 데이터 수신
    for (int i = 0; i < 40; i++) {
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61bb      	str	r3, [r7, #24]
 8001cf2:	e056      	b.n	8001da2 <DHT11_Read+0x164>
        while (HAL_GPIO_ReadPin(dht->data_GPIOx, dht->data_pinNum) == GPIO_PIN_RESET);
 8001cf4:	bf00      	nop
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	889b      	ldrh	r3, [r3, #4]
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4610      	mov	r0, r2
 8001d02:	f001 f839 	bl	8002d78 <HAL_GPIO_ReadPin>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0f4      	beq.n	8001cf6 <DHT11_Read+0xb8>
        delay_us_dht(40);
 8001d0c:	2028      	movs	r0, #40	@ 0x28
 8001d0e:	f7ff ff67 	bl	8001be0 <delay_us_dht>

        if (HAL_GPIO_ReadPin(dht->data_GPIOx, dht->data_pinNum) == GPIO_PIN_SET)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	889b      	ldrh	r3, [r3, #4]
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	f001 f82b 	bl	8002d78 <HAL_GPIO_ReadPin>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d119      	bne.n	8001d5c <DHT11_Read+0x11e>
            data[i/8] = (data[i/8] << 1) | 1;
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	da00      	bge.n	8001d30 <DHT11_Read+0xf2>
 8001d2e:	3307      	adds	r3, #7
 8001d30:	10db      	asrs	r3, r3, #3
 8001d32:	3320      	adds	r3, #32
 8001d34:	443b      	add	r3, r7
 8001d36:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001d3a:	b25b      	sxtb	r3, r3
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	b25b      	sxtb	r3, r3
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	b25a      	sxtb	r2, r3
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	da00      	bge.n	8001d4e <DHT11_Read+0x110>
 8001d4c:	3307      	adds	r3, #7
 8001d4e:	10db      	asrs	r3, r3, #3
 8001d50:	b2d2      	uxtb	r2, r2
 8001d52:	3320      	adds	r3, #32
 8001d54:	443b      	add	r3, r7
 8001d56:	f803 2c10 	strb.w	r2, [r3, #-16]
 8001d5a:	e013      	b.n	8001d84 <DHT11_Read+0x146>
        else
            data[i/8] = (data[i/8] << 1);
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	da00      	bge.n	8001d64 <DHT11_Read+0x126>
 8001d62:	3307      	adds	r3, #7
 8001d64:	10db      	asrs	r3, r3, #3
 8001d66:	3320      	adds	r3, #32
 8001d68:	443b      	add	r3, r7
 8001d6a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	da00      	bge.n	8001d76 <DHT11_Read+0x138>
 8001d74:	3307      	adds	r3, #7
 8001d76:	10db      	asrs	r3, r3, #3
 8001d78:	0052      	lsls	r2, r2, #1
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	3320      	adds	r3, #32
 8001d7e:	443b      	add	r3, r7
 8001d80:	f803 2c10 	strb.w	r2, [r3, #-16]

        while (HAL_GPIO_ReadPin(dht->data_GPIOx, dht->data_pinNum) == GPIO_PIN_SET);
 8001d84:	bf00      	nop
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	889b      	ldrh	r3, [r3, #4]
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4610      	mov	r0, r2
 8001d92:	f000 fff1 	bl	8002d78 <HAL_GPIO_ReadPin>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d0f4      	beq.n	8001d86 <DHT11_Read+0x148>
    for (int i = 0; i < 40; i++) {
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	61bb      	str	r3, [r7, #24]
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	2b27      	cmp	r3, #39	@ 0x27
 8001da6:	dda5      	ble.n	8001cf4 <DHT11_Read+0xb6>
    }

    // 체크섬 검증
    if (data[4] == (data[0] + data[1] + data[2] + data[3])) {
 8001da8:	7d3b      	ldrb	r3, [r7, #20]
 8001daa:	461a      	mov	r2, r3
 8001dac:	7c3b      	ldrb	r3, [r7, #16]
 8001dae:	4619      	mov	r1, r3
 8001db0:	7c7b      	ldrb	r3, [r7, #17]
 8001db2:	440b      	add	r3, r1
 8001db4:	7cb9      	ldrb	r1, [r7, #18]
 8001db6:	440b      	add	r3, r1
 8001db8:	7cf9      	ldrb	r1, [r7, #19]
 8001dba:	440b      	add	r3, r1
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d107      	bne.n	8001dd0 <DHT11_Read+0x192>
        *humi = data[0];
 8001dc0:	7c3a      	ldrb	r2, [r7, #16]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	701a      	strb	r2, [r3, #0]
        *temp = data[2];
 8001dc6:	7cba      	ldrb	r2, [r7, #18]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	701a      	strb	r2, [r3, #0]
        return 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	e000      	b.n	8001dd2 <DHT11_Read+0x194>
    }

    return 2;
 8001dd0:	2302      	movs	r3, #2
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3720      	adds	r7, #32
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <FND_WriteDp>:

static uint16_t fndDispNum = 0; // fnd main data
static uint8_t fndDispDp = 0; // fnd dp data, xxxx1111

void FND_WriteDp(uint8_t dpData, uint8_t dpState)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	460a      	mov	r2, r1
 8001de6:	71fb      	strb	r3, [r7, #7]
 8001de8:	4613      	mov	r3, r2
 8001dea:	71bb      	strb	r3, [r7, #6]
	if (dpState == FND_DP_ON)
 8001dec:	79bb      	ldrb	r3, [r7, #6]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d107      	bne.n	8001e02 <FND_WriteDp+0x26>
		fndDispDp |= dpData;
 8001df2:	4b0d      	ldr	r3, [pc, #52]	@ (8001e28 <FND_WriteDp+0x4c>)
 8001df4:	781a      	ldrb	r2, [r3, #0]
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8001e28 <FND_WriteDp+0x4c>)
 8001dfe:	701a      	strb	r2, [r3, #0]
	else
		fndDispDp &= ~dpData;
}
 8001e00:	e00b      	b.n	8001e1a <FND_WriteDp+0x3e>
		fndDispDp &= ~dpData;
 8001e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e06:	43db      	mvns	r3, r3
 8001e08:	b25a      	sxtb	r2, r3
 8001e0a:	4b07      	ldr	r3, [pc, #28]	@ (8001e28 <FND_WriteDp+0x4c>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	b25b      	sxtb	r3, r3
 8001e10:	4013      	ands	r3, r2
 8001e12:	b25b      	sxtb	r3, r3
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	4b04      	ldr	r3, [pc, #16]	@ (8001e28 <FND_WriteDp+0x4c>)
 8001e18:	701a      	strb	r2, [r3, #0]
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	200003ce 	.word	0x200003ce

08001e2c <FND_WriteData>:

void FND_WriteData(uint16_t data)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	80fb      	strh	r3, [r7, #6]
	fndDispNum = data;
 8001e36:	4a04      	ldr	r2, [pc, #16]	@ (8001e48 <FND_WriteData+0x1c>)
 8001e38:	88fb      	ldrh	r3, [r7, #6]
 8001e3a:	8013      	strh	r3, [r2, #0]
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	200003cc 	.word	0x200003cc

08001e4c <FND_DispDataCallBack>:
	return fndDispNum;
}

// display fndDispNum
void FND_DispDataCallBack()
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
	static int digitPos = 0;
	// 인터럽트가 발생하면 한 자리씩 출력한다.
	digitPos = (digitPos+1) % 8;
 8001e50:	4b80      	ldr	r3, [pc, #512]	@ (8002054 <FND_DispDataCallBack+0x208>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	3301      	adds	r3, #1
 8001e56:	425a      	negs	r2, r3
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	f002 0207 	and.w	r2, r2, #7
 8001e60:	bf58      	it	pl
 8001e62:	4253      	negpl	r3, r2
 8001e64:	4a7b      	ldr	r2, [pc, #492]	@ (8002054 <FND_DispDataCallBack+0x208>)
 8001e66:	6013      	str	r3, [r2, #0]
	switch(digitPos)
 8001e68:	4b7a      	ldr	r3, [pc, #488]	@ (8002054 <FND_DispDataCallBack+0x208>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2b07      	cmp	r3, #7
 8001e6e:	f200 80ee 	bhi.w	800204e <FND_DispDataCallBack+0x202>
 8001e72:	a201      	add	r2, pc, #4	@ (adr r2, 8001e78 <FND_DispDataCallBack+0x2c>)
 8001e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e78:	08001e99 	.word	0x08001e99
 8001e7c:	08001ec7 	.word	0x08001ec7
 8001e80:	08001eff 	.word	0x08001eff
 8001e84:	08001f37 	.word	0x08001f37
 8001e88:	08001f6f 	.word	0x08001f6f
 8001e8c:	08001fa7 	.word	0x08001fa7
 8001e90:	08001fdf 	.word	0x08001fdf
 8001e94:	08002017 	.word	0x08002017
	{
	case DIGIT_1:
		FND_DispOffAll();
 8001e98:	f000 f8e8 	bl	800206c <FND_DispOffAll>
		FND_DispDigit(fndDispNum % 10);
 8001e9c:	4b6e      	ldr	r3, [pc, #440]	@ (8002058 <FND_DispDataCallBack+0x20c>)
 8001e9e:	881a      	ldrh	r2, [r3, #0]
 8001ea0:	4b6e      	ldr	r3, [pc, #440]	@ (800205c <FND_DispDataCallBack+0x210>)
 8001ea2:	fba3 1302 	umull	r1, r3, r3, r2
 8001ea6:	08d9      	lsrs	r1, r3, #3
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	440b      	add	r3, r1
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f000 f913 	bl	80020e0 <FND_DispDigit>
		FND_DispOn(digitPos);
 8001eba:	4b66      	ldr	r3, [pc, #408]	@ (8002054 <FND_DispDataCallBack+0x208>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 f8f6 	bl	80020b0 <FND_DispOn>
		break;
 8001ec4:	e0c3      	b.n	800204e <FND_DispDataCallBack+0x202>
	case DIGIT_10:
		FND_DispOffAll();
 8001ec6:	f000 f8d1 	bl	800206c <FND_DispOffAll>
		FND_DispDigit(fndDispNum /10 % 10);
 8001eca:	4b63      	ldr	r3, [pc, #396]	@ (8002058 <FND_DispDataCallBack+0x20c>)
 8001ecc:	881b      	ldrh	r3, [r3, #0]
 8001ece:	4a63      	ldr	r2, [pc, #396]	@ (800205c <FND_DispDataCallBack+0x210>)
 8001ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed4:	08db      	lsrs	r3, r3, #3
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	4b60      	ldr	r3, [pc, #384]	@ (800205c <FND_DispDataCallBack+0x210>)
 8001eda:	fba3 1302 	umull	r1, r3, r3, r2
 8001ede:	08d9      	lsrs	r1, r3, #3
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	4618      	mov	r0, r3
 8001eee:	f000 f8f7 	bl	80020e0 <FND_DispDigit>
		FND_DispOn(digitPos);
 8001ef2:	4b58      	ldr	r3, [pc, #352]	@ (8002054 <FND_DispDataCallBack+0x208>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 f8da 	bl	80020b0 <FND_DispOn>
		break;
 8001efc:	e0a7      	b.n	800204e <FND_DispDataCallBack+0x202>
	case DIGIT_100:
		FND_DispOffAll();
 8001efe:	f000 f8b5 	bl	800206c <FND_DispOffAll>
		FND_DispDigit(fndDispNum /100 % 10);
 8001f02:	4b55      	ldr	r3, [pc, #340]	@ (8002058 <FND_DispDataCallBack+0x20c>)
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	4a56      	ldr	r2, [pc, #344]	@ (8002060 <FND_DispDataCallBack+0x214>)
 8001f08:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0c:	095b      	lsrs	r3, r3, #5
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	4b52      	ldr	r3, [pc, #328]	@ (800205c <FND_DispDataCallBack+0x210>)
 8001f12:	fba3 1302 	umull	r1, r3, r3, r2
 8001f16:	08d9      	lsrs	r1, r3, #3
 8001f18:	460b      	mov	r3, r1
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	4618      	mov	r0, r3
 8001f26:	f000 f8db 	bl	80020e0 <FND_DispDigit>
		FND_DispOn(digitPos);
 8001f2a:	4b4a      	ldr	r3, [pc, #296]	@ (8002054 <FND_DispDataCallBack+0x208>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f000 f8be 	bl	80020b0 <FND_DispOn>
		break;
 8001f34:	e08b      	b.n	800204e <FND_DispDataCallBack+0x202>
	case DIGIT_1000:
		FND_DispOffAll();
 8001f36:	f000 f899 	bl	800206c <FND_DispOffAll>
		FND_DispDigit(fndDispNum /1000 % 10);
 8001f3a:	4b47      	ldr	r3, [pc, #284]	@ (8002058 <FND_DispDataCallBack+0x20c>)
 8001f3c:	881b      	ldrh	r3, [r3, #0]
 8001f3e:	4a49      	ldr	r2, [pc, #292]	@ (8002064 <FND_DispDataCallBack+0x218>)
 8001f40:	fba2 2303 	umull	r2, r3, r2, r3
 8001f44:	099b      	lsrs	r3, r3, #6
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	4b44      	ldr	r3, [pc, #272]	@ (800205c <FND_DispDataCallBack+0x210>)
 8001f4a:	fba3 1302 	umull	r1, r3, r3, r2
 8001f4e:	08d9      	lsrs	r1, r3, #3
 8001f50:	460b      	mov	r3, r1
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	440b      	add	r3, r1
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f000 f8bf 	bl	80020e0 <FND_DispDigit>
		FND_DispOn(digitPos);
 8001f62:	4b3c      	ldr	r3, [pc, #240]	@ (8002054 <FND_DispDataCallBack+0x208>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 f8a2 	bl	80020b0 <FND_DispOn>
		break;
 8001f6c:	e06f      	b.n	800204e <FND_DispDataCallBack+0x202>
	case DIGIT_DP_1:
		FND_DispOffAll();
 8001f6e:	f000 f87d 	bl	800206c <FND_DispOffAll>
		if (fndDispDp & (1<<0)) {
 8001f72:	4b3d      	ldr	r3, [pc, #244]	@ (8002068 <FND_DispDataCallBack+0x21c>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <FND_DispDataCallBack+0x13a>
			FND_DispDigit(10); // DP ON
 8001f7e:	200a      	movs	r0, #10
 8001f80:	f000 f8ae 	bl	80020e0 <FND_DispDigit>
 8001f84:	e002      	b.n	8001f8c <FND_DispDataCallBack+0x140>
		} else {
			FND_DispDigit(11); // ALL OFF
 8001f86:	200b      	movs	r0, #11
 8001f88:	f000 f8aa 	bl	80020e0 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8001f8c:	4b31      	ldr	r3, [pc, #196]	@ (8002054 <FND_DispDataCallBack+0x208>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	425a      	negs	r2, r3
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	f002 0203 	and.w	r2, r2, #3
 8001f9a:	bf58      	it	pl
 8001f9c:	4253      	negpl	r3, r2
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f000 f886 	bl	80020b0 <FND_DispOn>
		break;
 8001fa4:	e053      	b.n	800204e <FND_DispDataCallBack+0x202>
	case DIGIT_DP_10:
		FND_DispOffAll();
 8001fa6:	f000 f861 	bl	800206c <FND_DispOffAll>
		if (fndDispDp & (1<<1)) {
 8001faa:	4b2f      	ldr	r3, [pc, #188]	@ (8002068 <FND_DispDataCallBack+0x21c>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <FND_DispDataCallBack+0x172>
			FND_DispDigit(10); // DP ON
 8001fb6:	200a      	movs	r0, #10
 8001fb8:	f000 f892 	bl	80020e0 <FND_DispDigit>
 8001fbc:	e002      	b.n	8001fc4 <FND_DispDataCallBack+0x178>
		} else {
			FND_DispDigit(11); // ALL OFF
 8001fbe:	200b      	movs	r0, #11
 8001fc0:	f000 f88e 	bl	80020e0 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8001fc4:	4b23      	ldr	r3, [pc, #140]	@ (8002054 <FND_DispDataCallBack+0x208>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	425a      	negs	r2, r3
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	f002 0203 	and.w	r2, r2, #3
 8001fd2:	bf58      	it	pl
 8001fd4:	4253      	negpl	r3, r2
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 f86a 	bl	80020b0 <FND_DispOn>
		break;
 8001fdc:	e037      	b.n	800204e <FND_DispDataCallBack+0x202>
	case DIGIT_DP_100:
		FND_DispOffAll();
 8001fde:	f000 f845 	bl	800206c <FND_DispOffAll>
		if (fndDispDp & (1<<2)) {
 8001fe2:	4b21      	ldr	r3, [pc, #132]	@ (8002068 <FND_DispDataCallBack+0x21c>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	f003 0304 	and.w	r3, r3, #4
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <FND_DispDataCallBack+0x1aa>
			FND_DispDigit(10); // DP ON
 8001fee:	200a      	movs	r0, #10
 8001ff0:	f000 f876 	bl	80020e0 <FND_DispDigit>
 8001ff4:	e002      	b.n	8001ffc <FND_DispDataCallBack+0x1b0>
		} else {
			FND_DispDigit(11); // ALL OFF
 8001ff6:	200b      	movs	r0, #11
 8001ff8:	f000 f872 	bl	80020e0 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8001ffc:	4b15      	ldr	r3, [pc, #84]	@ (8002054 <FND_DispDataCallBack+0x208>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	425a      	negs	r2, r3
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	f002 0203 	and.w	r2, r2, #3
 800200a:	bf58      	it	pl
 800200c:	4253      	negpl	r3, r2
 800200e:	4618      	mov	r0, r3
 8002010:	f000 f84e 	bl	80020b0 <FND_DispOn>
		break;
 8002014:	e01b      	b.n	800204e <FND_DispDataCallBack+0x202>
	case DIGIT_DP_1000:
		FND_DispOffAll();
 8002016:	f000 f829 	bl	800206c <FND_DispOffAll>
		if (fndDispDp & (1<<3)) {
 800201a:	4b13      	ldr	r3, [pc, #76]	@ (8002068 <FND_DispDataCallBack+0x21c>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <FND_DispDataCallBack+0x1e2>
			FND_DispDigit(10); // DP ON
 8002026:	200a      	movs	r0, #10
 8002028:	f000 f85a 	bl	80020e0 <FND_DispDigit>
 800202c:	e002      	b.n	8002034 <FND_DispDataCallBack+0x1e8>
		} else {
			FND_DispDigit(11); // ALL OFF
 800202e:	200b      	movs	r0, #11
 8002030:	f000 f856 	bl	80020e0 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8002034:	4b07      	ldr	r3, [pc, #28]	@ (8002054 <FND_DispDataCallBack+0x208>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	425a      	negs	r2, r3
 800203a:	f003 0303 	and.w	r3, r3, #3
 800203e:	f002 0203 	and.w	r2, r2, #3
 8002042:	bf58      	it	pl
 8002044:	4253      	negpl	r3, r2
 8002046:	4618      	mov	r0, r3
 8002048:	f000 f832 	bl	80020b0 <FND_DispOn>
		break;
 800204c:	bf00      	nop
	}
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	200003d0 	.word	0x200003d0
 8002058:	200003cc 	.word	0x200003cc
 800205c:	cccccccd 	.word	0xcccccccd
 8002060:	51eb851f 	.word	0x51eb851f
 8002064:	10624dd3 	.word	0x10624dd3
 8002068:	200003ce 	.word	0x200003ce

0800206c <FND_DispOffAll>:
//		}
//	}
//}

void FND_DispOffAll()
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
	// GPIO_Write(GPIOx, Pin, RESET);
	for (int i=0; i<4; i++) {
 8002072:	2300      	movs	r3, #0
 8002074:	607b      	str	r3, [r7, #4]
 8002076:	e010      	b.n	800209a <FND_DispOffAll+0x2e>
		HAL_GPIO_WritePin(fndDigitCom[i].GPIOx, fndDigitCom[i].pinNum, RESET);
 8002078:	4a0c      	ldr	r2, [pc, #48]	@ (80020ac <FND_DispOffAll+0x40>)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002080:	4a0a      	ldr	r2, [pc, #40]	@ (80020ac <FND_DispOffAll+0x40>)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	4413      	add	r3, r2
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	b29b      	uxth	r3, r3
 800208c:	2200      	movs	r2, #0
 800208e:	4619      	mov	r1, r3
 8002090:	f000 fe8a 	bl	8002da8 <HAL_GPIO_WritePin>
	for (int i=0; i<4; i++) {
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3301      	adds	r3, #1
 8002098:	607b      	str	r3, [r7, #4]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b03      	cmp	r3, #3
 800209e:	ddeb      	ble.n	8002078 <FND_DispOffAll+0xc>
	}
}
 80020a0:	bf00      	nop
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	2000000c 	.word	0x2000000c

080020b0 <FND_DispOn>:

void FND_DispOn(int fndPos)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
	// GPIO_Write(GPIOx, Pin, SET);
	HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, SET);
 80020b8:	4a08      	ldr	r2, [pc, #32]	@ (80020dc <FND_DispOn+0x2c>)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80020c0:	4a06      	ldr	r2, [pc, #24]	@ (80020dc <FND_DispOn+0x2c>)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	4413      	add	r3, r2
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	2201      	movs	r2, #1
 80020ce:	4619      	mov	r1, r3
 80020d0:	f000 fe6a 	bl	8002da8 <HAL_GPIO_WritePin>
}
 80020d4:	bf00      	nop
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	2000000c 	.word	0x2000000c

080020e0 <FND_DispDigit>:


void FND_DispDigit(uint16_t digit)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	80fb      	strh	r3, [r7, #6]
	const uint8_t segFont[12] = {
 80020ea:	4a1f      	ldr	r2, [pc, #124]	@ (8002168 <FND_DispDigit+0x88>)
 80020ec:	f107 0308 	add.w	r3, r7, #8
 80020f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80020f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		    0x90,  // 9
			0x7F,  // dot
			0xFF  // all off
	};

	for (int i=0; i<8; i++) {
 80020f6:	2300      	movs	r3, #0
 80020f8:	617b      	str	r3, [r7, #20]
 80020fa:	e02c      	b.n	8002156 <FND_DispDigit+0x76>
		if (!(segFont[digit] & (1<<i))) {
 80020fc:	88fb      	ldrh	r3, [r7, #6]
 80020fe:	3318      	adds	r3, #24
 8002100:	443b      	add	r3, r7
 8002102:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002106:	461a      	mov	r2, r3
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	fa42 f303 	asr.w	r3, r2, r3
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10e      	bne.n	8002134 <FND_DispDigit+0x54>
			HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, RESET); // 0 -> on
 8002116:	4a15      	ldr	r2, [pc, #84]	@ (800216c <FND_DispDigit+0x8c>)
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800211e:	4a13      	ldr	r2, [pc, #76]	@ (800216c <FND_DispDigit+0x8c>)
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	4413      	add	r3, r2
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	b29b      	uxth	r3, r3
 800212a:	2200      	movs	r2, #0
 800212c:	4619      	mov	r1, r3
 800212e:	f000 fe3b 	bl	8002da8 <HAL_GPIO_WritePin>
 8002132:	e00d      	b.n	8002150 <FND_DispDigit+0x70>
		}
		else {
			HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, SET); // 1 -> off
 8002134:	4a0d      	ldr	r2, [pc, #52]	@ (800216c <FND_DispDigit+0x8c>)
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800213c:	4a0b      	ldr	r2, [pc, #44]	@ (800216c <FND_DispDigit+0x8c>)
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	4413      	add	r3, r2
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	b29b      	uxth	r3, r3
 8002148:	2201      	movs	r2, #1
 800214a:	4619      	mov	r1, r3
 800214c:	f000 fe2c 	bl	8002da8 <HAL_GPIO_WritePin>
	for (int i=0; i<8; i++) {
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	3301      	adds	r3, #1
 8002154:	617b      	str	r3, [r7, #20]
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	2b07      	cmp	r3, #7
 800215a:	ddcf      	ble.n	80020fc <FND_DispDigit+0x1c>
		}
	}
}
 800215c:	bf00      	nop
 800215e:	bf00      	nop
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	08006b00 	.word	0x08006b00
 800216c:	2000002c 	.word	0x2000002c

08002170 <LCD_Init>:

static uint8_t lcdData = 0;
static I2C_HandleTypeDef *hLcdI2C;

void LCD_Init(I2C_HandleTypeDef *hI2C)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
	hLcdI2C = hI2C;
 8002178:	4a18      	ldr	r2, [pc, #96]	@ (80021dc <LCD_Init+0x6c>)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6013      	str	r3, [r2, #0]
	HAL_Delay(50);
 800217e:	2032      	movs	r0, #50	@ 0x32
 8002180:	f000 faae 	bl	80026e0 <HAL_Delay>
	LCD_cmdMode();
 8002184:	f000 f852 	bl	800222c <LCD_cmdMode>
	LCD_writeMode();
 8002188:	f000 f874 	bl	8002274 <LCD_writeMode>
	LCD_sendNibbleData(0x30);
 800218c:	2030      	movs	r0, #48	@ 0x30
 800218e:	f000 f8a7 	bl	80022e0 <LCD_sendNibbleData>
	HAL_Delay(5);
 8002192:	2005      	movs	r0, #5
 8002194:	f000 faa4 	bl	80026e0 <HAL_Delay>
	LCD_sendNibbleData(0x30);
 8002198:	2030      	movs	r0, #48	@ 0x30
 800219a:	f000 f8a1 	bl	80022e0 <LCD_sendNibbleData>
	HAL_Delay(1);
 800219e:	2001      	movs	r0, #1
 80021a0:	f000 fa9e 	bl	80026e0 <HAL_Delay>
	LCD_sendNibbleData(0x30);
 80021a4:	2030      	movs	r0, #48	@ 0x30
 80021a6:	f000 f89b 	bl	80022e0 <LCD_sendNibbleData>
	LCD_sendNibbleData(0x20);
 80021aa:	2020      	movs	r0, #32
 80021ac:	f000 f898 	bl	80022e0 <LCD_sendNibbleData>
	LCD_sendData(LCD_4BIT_FUNC_SET);
 80021b0:	2028      	movs	r0, #40	@ 0x28
 80021b2:	f000 f8b9 	bl	8002328 <LCD_sendData>
	LCD_sendData(LCD_DISP_OFF);
 80021b6:	2008      	movs	r0, #8
 80021b8:	f000 f8b6 	bl	8002328 <LCD_sendData>
	LCD_sendData(LCD_DISP_CLEAR);
 80021bc:	2001      	movs	r0, #1
 80021be:	f000 f8b3 	bl	8002328 <LCD_sendData>
	LCD_sendData(LCD_ENTRY_MODE_SET);
 80021c2:	2006      	movs	r0, #6
 80021c4:	f000 f8b0 	bl	8002328 <LCD_sendData>
	LCD_sendData(LCD_DISP_ON);
 80021c8:	200c      	movs	r0, #12
 80021ca:	f000 f8ad 	bl	8002328 <LCD_sendData>
	LCD_backLightOn();
 80021ce:	f000 f81d 	bl	800220c <LCD_backLightOn>
}
 80021d2:	bf00      	nop
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	200003d8 	.word	0x200003d8

080021e0 <LCD_sendI2C>:

void LCD_sendI2C(uint8_t data)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af02      	add	r7, sp, #8
 80021e6:	4603      	mov	r3, r0
 80021e8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(hLcdI2C, LCD_DEV_ADDR<<1, &data, 1, 1000);
 80021ea:	4b07      	ldr	r3, [pc, #28]	@ (8002208 <LCD_sendI2C+0x28>)
 80021ec:	6818      	ldr	r0, [r3, #0]
 80021ee:	1dfa      	adds	r2, r7, #7
 80021f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	2301      	movs	r3, #1
 80021f8:	214e      	movs	r1, #78	@ 0x4e
 80021fa:	f000 ff33 	bl	8003064 <HAL_I2C_Master_Transmit>
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	200003d8 	.word	0x200003d8

0800220c <LCD_backLightOn>:

void LCD_backLightOn()
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_BL);
 8002210:	4b05      	ldr	r3, [pc, #20]	@ (8002228 <LCD_backLightOn+0x1c>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	f043 0308 	orr.w	r3, r3, #8
 8002218:	b2da      	uxtb	r2, r3
 800221a:	4b03      	ldr	r3, [pc, #12]	@ (8002228 <LCD_backLightOn+0x1c>)
 800221c:	701a      	strb	r2, [r3, #0]
}
 800221e:	bf00      	nop
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	200003d4 	.word	0x200003d4

0800222c <LCD_cmdMode>:
{
	lcdData &= ~(1<<LCD_BL);
}

void LCD_cmdMode()
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RS);
 8002230:	4b06      	ldr	r3, [pc, #24]	@ (800224c <LCD_cmdMode+0x20>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	f023 0301 	bic.w	r3, r3, #1
 8002238:	b2da      	uxtb	r2, r3
 800223a:	4b04      	ldr	r3, [pc, #16]	@ (800224c <LCD_cmdMode+0x20>)
 800223c:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 800223e:	4b03      	ldr	r3, [pc, #12]	@ (800224c <LCD_cmdMode+0x20>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff ffcc 	bl	80021e0 <LCD_sendI2C>
}
 8002248:	bf00      	nop
 800224a:	bd80      	pop	{r7, pc}
 800224c:	200003d4 	.word	0x200003d4

08002250 <LCD_charMode>:

void LCD_charMode()
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_RS);
 8002254:	4b06      	ldr	r3, [pc, #24]	@ (8002270 <LCD_charMode+0x20>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	b2da      	uxtb	r2, r3
 800225e:	4b04      	ldr	r3, [pc, #16]	@ (8002270 <LCD_charMode+0x20>)
 8002260:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8002262:	4b03      	ldr	r3, [pc, #12]	@ (8002270 <LCD_charMode+0x20>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff ffba 	bl	80021e0 <LCD_sendI2C>
}
 800226c:	bf00      	nop
 800226e:	bd80      	pop	{r7, pc}
 8002270:	200003d4 	.word	0x200003d4

08002274 <LCD_writeMode>:

void LCD_writeMode()
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RW);
 8002278:	4b06      	ldr	r3, [pc, #24]	@ (8002294 <LCD_writeMode+0x20>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	f023 0302 	bic.w	r3, r3, #2
 8002280:	b2da      	uxtb	r2, r3
 8002282:	4b04      	ldr	r3, [pc, #16]	@ (8002294 <LCD_writeMode+0x20>)
 8002284:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8002286:	4b03      	ldr	r3, [pc, #12]	@ (8002294 <LCD_writeMode+0x20>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff ffa8 	bl	80021e0 <LCD_sendI2C>
}
 8002290:	bf00      	nop
 8002292:	bd80      	pop	{r7, pc}
 8002294:	200003d4 	.word	0x200003d4

08002298 <LCD_E_High>:

void LCD_E_High()
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_E);
 800229c:	4b06      	ldr	r3, [pc, #24]	@ (80022b8 <LCD_E_High+0x20>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	f043 0304 	orr.w	r3, r3, #4
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	4b04      	ldr	r3, [pc, #16]	@ (80022b8 <LCD_E_High+0x20>)
 80022a8:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 80022aa:	4b03      	ldr	r3, [pc, #12]	@ (80022b8 <LCD_E_High+0x20>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff ff96 	bl	80021e0 <LCD_sendI2C>
}
 80022b4:	bf00      	nop
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	200003d4 	.word	0x200003d4

080022bc <LCD_E_Low>:

void LCD_E_Low()
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_E);
 80022c0:	4b06      	ldr	r3, [pc, #24]	@ (80022dc <LCD_E_Low+0x20>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	f023 0304 	bic.w	r3, r3, #4
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	4b04      	ldr	r3, [pc, #16]	@ (80022dc <LCD_E_Low+0x20>)
 80022cc:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 80022ce:	4b03      	ldr	r3, [pc, #12]	@ (80022dc <LCD_E_Low+0x20>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff ff84 	bl	80021e0 <LCD_sendI2C>
}
 80022d8:	bf00      	nop
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	200003d4 	.word	0x200003d4

080022e0 <LCD_sendNibbleData>:

void LCD_sendNibbleData(uint8_t data)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	71fb      	strb	r3, [r7, #7]
	LCD_E_High();
 80022ea:	f7ff ffd5 	bl	8002298 <LCD_E_High>
	lcdData = (data & 0xf0) | (lcdData & 0x0f);
 80022ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f2:	f023 030f 	bic.w	r3, r3, #15
 80022f6:	b25a      	sxtb	r2, r3
 80022f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002324 <LCD_sendNibbleData+0x44>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	b25b      	sxtb	r3, r3
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	b25b      	sxtb	r3, r3
 8002304:	4313      	orrs	r3, r2
 8002306:	b25b      	sxtb	r3, r3
 8002308:	b2da      	uxtb	r2, r3
 800230a:	4b06      	ldr	r3, [pc, #24]	@ (8002324 <LCD_sendNibbleData+0x44>)
 800230c:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 800230e:	4b05      	ldr	r3, [pc, #20]	@ (8002324 <LCD_sendNibbleData+0x44>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff ff64 	bl	80021e0 <LCD_sendI2C>
	LCD_E_Low();
 8002318:	f7ff ffd0 	bl	80022bc <LCD_E_Low>
}
 800231c:	bf00      	nop
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	200003d4 	.word	0x200003d4

08002328 <LCD_sendData>:

void LCD_sendData(uint8_t data)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	71fb      	strb	r3, [r7, #7]
	// High 4bit
	LCD_sendNibbleData(data);
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff ffd3 	bl	80022e0 <LCD_sendNibbleData>

	data = data << 4;
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	011b      	lsls	r3, r3, #4
 800233e:	71fb      	strb	r3, [r7, #7]
	// Low 4bit
	LCD_sendNibbleData(data);
 8002340:	79fb      	ldrb	r3, [r7, #7]
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff ffcc 	bl	80022e0 <LCD_sendNibbleData>
}
 8002348:	bf00      	nop
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <LCD_writeCmdData>:

void LCD_writeCmdData(uint8_t data)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	71fb      	strb	r3, [r7, #7]
	LCD_writeMode();
 800235a:	f7ff ff8b 	bl	8002274 <LCD_writeMode>
	LCD_cmdMode();
 800235e:	f7ff ff65 	bl	800222c <LCD_cmdMode>
	LCD_sendData(data);
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff ffdf 	bl	8002328 <LCD_sendData>
}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <LCD_writeCharData>:

void LCD_writeCharData(uint8_t data)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	4603      	mov	r3, r0
 800237a:	71fb      	strb	r3, [r7, #7]
	LCD_writeMode();
 800237c:	f7ff ff7a 	bl	8002274 <LCD_writeMode>
	LCD_charMode();
 8002380:	f7ff ff66 	bl	8002250 <LCD_charMode>
	LCD_sendData(data);
 8002384:	79fb      	ldrb	r3, [r7, #7]
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff ffce 	bl	8002328 <LCD_sendData>
}
 800238c:	bf00      	nop
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <LCD_writeString>:

void LCD_writeString(char *str)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
	for (int i=0; str[i]; i++) {
 800239c:	2300      	movs	r3, #0
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	e009      	b.n	80023b6 <LCD_writeString+0x22>
		LCD_writeCharData(str[i]);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	4413      	add	r3, r2
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff ffe1 	bl	8002372 <LCD_writeCharData>
	for (int i=0; str[i]; i++) {
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	3301      	adds	r3, #1
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	4413      	add	r3, r2
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1ef      	bne.n	80023a2 <LCD_writeString+0xe>
	}
}
 80023c2:	bf00      	nop
 80023c4:	bf00      	nop
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	460a      	mov	r2, r1
 80023d6:	71fb      	strb	r3, [r7, #7]
 80023d8:	4613      	mov	r3, r2
 80023da:	71bb      	strb	r3, [r7, #6]
	col %= 16;
 80023dc:	79bb      	ldrb	r3, [r7, #6]
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	71bb      	strb	r3, [r7, #6]
	row %= 2;
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	71fb      	strb	r3, [r7, #7]

	uint8_t lcdRegAddr = (0x40 * row) +col;
 80023ec:	79fb      	ldrb	r3, [r7, #7]
 80023ee:	019b      	lsls	r3, r3, #6
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	79bb      	ldrb	r3, [r7, #6]
 80023f4:	4413      	add	r3, r2
 80023f6:	73fb      	strb	r3, [r7, #15]
	uint8_t command = 0x80 + lcdRegAddr;
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
 80023fa:	3b80      	subs	r3, #128	@ 0x80
 80023fc:	73bb      	strb	r3, [r7, #14]
	LCD_writeCmdData(command);
 80023fe:	7bbb      	ldrb	r3, [r7, #14]
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff ffa5 	bl	8002350 <LCD_writeCmdData>
}
 8002406:	bf00      	nop
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <LCD_writeStringXY>:

void LCD_writeStringXY(uint8_t row, uint8_t col, char *str)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b082      	sub	sp, #8
 8002412:	af00      	add	r7, sp, #0
 8002414:	4603      	mov	r3, r0
 8002416:	603a      	str	r2, [r7, #0]
 8002418:	71fb      	strb	r3, [r7, #7]
 800241a:	460b      	mov	r3, r1
 800241c:	71bb      	strb	r3, [r7, #6]
	LCD_gotoXY(row, col);
 800241e:	79ba      	ldrb	r2, [r7, #6]
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	4611      	mov	r1, r2
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff ffd1 	bl	80023cc <LCD_gotoXY>
	LCD_writeString(str);
 800242a:	6838      	ldr	r0, [r7, #0]
 800242c:	f7ff ffb2 	bl	8002394 <LCD_writeString>
}
 8002430:	bf00      	nop
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <LCD_clear>:

void LCD_clear()
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
    LCD_writeCmdData(LCD_DISP_CLEAR);
 800243c:	2001      	movs	r0, #1
 800243e:	f7ff ff87 	bl	8002350 <LCD_writeCmdData>
    HAL_Delay(2);
 8002442:	2002      	movs	r0, #2
 8002444:	f000 f94c 	bl	80026e0 <HAL_Delay>
}
 8002448:	bf00      	nop
 800244a:	bd80      	pop	{r7, pc}

0800244c <LedBar_Write>:
		{GPIOC, GPIO_PIN_2},
		{GPIOC, GPIO_PIN_3}
};

void LedBar_Write(uint8_t data)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	71fb      	strb	r3, [r7, #7]
	for (int i=0; i<8; i++) {
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	e027      	b.n	80024ac <LedBar_Write+0x60>
		if ((data & (1<<i)) == 0) {
 800245c:	79fa      	ldrb	r2, [r7, #7]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	fa42 f303 	asr.w	r3, r2, r3
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10e      	bne.n	800248a <LedBar_Write+0x3e>
			HAL_GPIO_WritePin(ledBar[i].GPIOx, ledBar[i].pinNum, RESET);
 800246c:	4a13      	ldr	r2, [pc, #76]	@ (80024bc <LedBar_Write+0x70>)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002474:	4a11      	ldr	r2, [pc, #68]	@ (80024bc <LedBar_Write+0x70>)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	4413      	add	r3, r2
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	b29b      	uxth	r3, r3
 8002480:	2200      	movs	r2, #0
 8002482:	4619      	mov	r1, r3
 8002484:	f000 fc90 	bl	8002da8 <HAL_GPIO_WritePin>
 8002488:	e00d      	b.n	80024a6 <LedBar_Write+0x5a>
		}
		else {
			HAL_GPIO_WritePin(ledBar[i].GPIOx, ledBar[i].pinNum, SET);
 800248a:	4a0c      	ldr	r2, [pc, #48]	@ (80024bc <LedBar_Write+0x70>)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002492:	4a0a      	ldr	r2, [pc, #40]	@ (80024bc <LedBar_Write+0x70>)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4413      	add	r3, r2
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	b29b      	uxth	r3, r3
 800249e:	2201      	movs	r2, #1
 80024a0:	4619      	mov	r1, r3
 80024a2:	f000 fc81 	bl	8002da8 <HAL_GPIO_WritePin>
	for (int i=0; i<8; i++) {
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	3301      	adds	r3, #1
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2b07      	cmp	r3, #7
 80024b0:	ddd4      	ble.n	800245c <LedBar_Write+0x10>
		}
	}
}
 80024b2:	bf00      	nop
 80024b4:	bf00      	nop
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	2000006c 	.word	0x2000006c

080024c0 <delay_us>:
#include "UltraSonic.h"
#define FILTER_SIZE 5


void delay_us(uint16_t us)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 80024ca:	4b0a      	ldr	r3, [pc, #40]	@ (80024f4 <delay_us+0x34>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2200      	movs	r2, #0
 80024d0:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start(&htim4);
 80024d2:	4808      	ldr	r0, [pc, #32]	@ (80024f4 <delay_us+0x34>)
 80024d4:	f001 fe08 	bl	80040e8 <HAL_TIM_Base_Start>

	while(__HAL_TIM_GET_COUNTER(&htim4) < us);
 80024d8:	bf00      	nop
 80024da:	4b06      	ldr	r3, [pc, #24]	@ (80024f4 <delay_us+0x34>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024e0:	88fb      	ldrh	r3, [r7, #6]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d3f9      	bcc.n	80024da <delay_us+0x1a>
	HAL_TIM_Base_Stop(&htim4);
 80024e6:	4803      	ldr	r0, [pc, #12]	@ (80024f4 <delay_us+0x34>)
 80024e8:	f001 fe58 	bl	800419c <HAL_TIM_Base_Stop>
}
 80024ec:	bf00      	nop
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	20000250 	.word	0x20000250

080024f8 <UltraSonic_Init>:

void UltraSonic_Init(UltraSonic_TypeDef *hultra, GPIO_TypeDef *Trig_GPIOx, uint16_t Trig_pinNum,  GPIO_TypeDef *Echo_GPIOx, uint16_t Echo_pinNum) {
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	603b      	str	r3, [r7, #0]
 8002504:	4613      	mov	r3, r2
 8002506:	80fb      	strh	r3, [r7, #6]
	hultra->Trig_GPIOx = Trig_GPIOx;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	601a      	str	r2, [r3, #0]
	hultra->Trig_pinNum = Trig_pinNum;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	88fa      	ldrh	r2, [r7, #6]
 8002512:	809a      	strh	r2, [r3, #4]
	hultra->Echo_GPIOx = Echo_GPIOx;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	609a      	str	r2, [r3, #8]
	hultra->Echo_pinNum = Echo_pinNum;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8b3a      	ldrh	r2, [r7, #24]
 800251e:	819a      	strh	r2, [r3, #12]
}
 8002520:	bf00      	nop
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <UltraSonic_GetDistance>:

int UltraSonic_GetDistance (UltraSonic_TypeDef *hultra)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
	uint32_t count = 0;
 8002534:	2300      	movs	r3, #0
 8002536:	613b      	str	r3, [r7, #16]
	int distance = 0;
 8002538:	2300      	movs	r3, #0
 800253a:	60fb      	str	r3, [r7, #12]

	// trig
	HAL_GPIO_WritePin(hultra->Trig_GPIOx, hultra->Trig_pinNum, GPIO_PIN_SET);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6818      	ldr	r0, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	889b      	ldrh	r3, [r3, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	4619      	mov	r1, r3
 8002548:	f000 fc2e 	bl	8002da8 <HAL_GPIO_WritePin>
	delay_us(10);
 800254c:	200a      	movs	r0, #10
 800254e:	f7ff ffb7 	bl	80024c0 <delay_us>
	HAL_GPIO_WritePin(hultra->Trig_GPIOx, hultra->Trig_pinNum, GPIO_PIN_RESET);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6818      	ldr	r0, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	889b      	ldrh	r3, [r3, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	4619      	mov	r1, r3
 800255e:	f000 fc23 	bl	8002da8 <HAL_GPIO_WritePin>

	// wait echo -> high
	uint32_t timeout = 30000;
 8002562:	f247 5330 	movw	r3, #30000	@ 0x7530
 8002566:	617b      	str	r3, [r7, #20]
	while(!(HAL_GPIO_ReadPin(hultra->Echo_GPIOx, hultra->Echo_pinNum)))
 8002568:	e008      	b.n	800257c <UltraSonic_GetDistance+0x50>
	{
		if (--timeout == 0)
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	3b01      	subs	r3, #1
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d102      	bne.n	800257c <UltraSonic_GetDistance+0x50>
			return -1;
 8002576:	f04f 33ff 	mov.w	r3, #4294967295
 800257a:	e037      	b.n	80025ec <UltraSonic_GetDistance+0xc0>
	while(!(HAL_GPIO_ReadPin(hultra->Echo_GPIOx, hultra->Echo_pinNum)))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	899b      	ldrh	r3, [r3, #12]
 8002584:	4619      	mov	r1, r3
 8002586:	4610      	mov	r0, r2
 8002588:	f000 fbf6 	bl	8002d78 <HAL_GPIO_ReadPin>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0eb      	beq.n	800256a <UltraSonic_GetDistance+0x3e>
	}

	// timer start
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8002592:	4b18      	ldr	r3, [pc, #96]	@ (80025f4 <UltraSonic_GetDistance+0xc8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2200      	movs	r2, #0
 8002598:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start(&htim4);
 800259a:	4816      	ldr	r0, [pc, #88]	@ (80025f4 <UltraSonic_GetDistance+0xc8>)
 800259c:	f001 fda4 	bl	80040e8 <HAL_TIM_Base_Start>

	// wait echo -> low
	timeout = 30000;
 80025a0:	f247 5330 	movw	r3, #30000	@ 0x7530
 80025a4:	617b      	str	r3, [r7, #20]
	while(HAL_GPIO_ReadPin(hultra->Echo_GPIOx, hultra->Echo_pinNum))
 80025a6:	e008      	b.n	80025ba <UltraSonic_GetDistance+0x8e>
	{
		if (--timeout == 0)
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	3b01      	subs	r3, #1
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d102      	bne.n	80025ba <UltraSonic_GetDistance+0x8e>
			return -1;
 80025b4:	f04f 33ff 	mov.w	r3, #4294967295
 80025b8:	e018      	b.n	80025ec <UltraSonic_GetDistance+0xc0>
	while(HAL_GPIO_ReadPin(hultra->Echo_GPIOx, hultra->Echo_pinNum))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	899b      	ldrh	r3, [r3, #12]
 80025c2:	4619      	mov	r1, r3
 80025c4:	4610      	mov	r0, r2
 80025c6:	f000 fbd7 	bl	8002d78 <HAL_GPIO_ReadPin>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1eb      	bne.n	80025a8 <UltraSonic_GetDistance+0x7c>
	}

	// timer stop
	HAL_TIM_Base_Stop(&htim4);
 80025d0:	4808      	ldr	r0, [pc, #32]	@ (80025f4 <UltraSonic_GetDistance+0xc8>)
 80025d2:	f001 fde3 	bl	800419c <HAL_TIM_Base_Stop>
	count = __HAL_TIM_GET_COUNTER(&htim4);
 80025d6:	4b07      	ldr	r3, [pc, #28]	@ (80025f4 <UltraSonic_GetDistance+0xc8>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025dc:	613b      	str	r3, [r7, #16]

	distance = count / 58;
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	4a05      	ldr	r2, [pc, #20]	@ (80025f8 <UltraSonic_GetDistance+0xcc>)
 80025e2:	fba2 2303 	umull	r2, r3, r2, r3
 80025e6:	095b      	lsrs	r3, r3, #5
 80025e8:	60fb      	str	r3, [r7, #12]

	return distance;
 80025ea:	68fb      	ldr	r3, [r7, #12]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	20000250 	.word	0x20000250
 80025f8:	8d3dcb09 	.word	0x8d3dcb09

080025fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002600:	4b0e      	ldr	r3, [pc, #56]	@ (800263c <HAL_Init+0x40>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a0d      	ldr	r2, [pc, #52]	@ (800263c <HAL_Init+0x40>)
 8002606:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800260a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800260c:	4b0b      	ldr	r3, [pc, #44]	@ (800263c <HAL_Init+0x40>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a0a      	ldr	r2, [pc, #40]	@ (800263c <HAL_Init+0x40>)
 8002612:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002616:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002618:	4b08      	ldr	r3, [pc, #32]	@ (800263c <HAL_Init+0x40>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a07      	ldr	r2, [pc, #28]	@ (800263c <HAL_Init+0x40>)
 800261e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002622:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002624:	2003      	movs	r0, #3
 8002626:	f000 f94f 	bl	80028c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800262a:	200f      	movs	r0, #15
 800262c:	f000 f808 	bl	8002640 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002630:	f7fe f964 	bl	80008fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40023c00 	.word	0x40023c00

08002640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002648:	4b12      	ldr	r3, [pc, #72]	@ (8002694 <HAL_InitTick+0x54>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	4b12      	ldr	r3, [pc, #72]	@ (8002698 <HAL_InitTick+0x58>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	4619      	mov	r1, r3
 8002652:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002656:	fbb3 f3f1 	udiv	r3, r3, r1
 800265a:	fbb2 f3f3 	udiv	r3, r2, r3
 800265e:	4618      	mov	r0, r3
 8002660:	f000 f967 	bl	8002932 <HAL_SYSTICK_Config>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e00e      	b.n	800268c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b0f      	cmp	r3, #15
 8002672:	d80a      	bhi.n	800268a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002674:	2200      	movs	r2, #0
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	f04f 30ff 	mov.w	r0, #4294967295
 800267c:	f000 f92f 	bl	80028de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002680:	4a06      	ldr	r2, [pc, #24]	@ (800269c <HAL_InitTick+0x5c>)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	e000      	b.n	800268c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
}
 800268c:	4618      	mov	r0, r3
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	20000000 	.word	0x20000000
 8002698:	200000b0 	.word	0x200000b0
 800269c:	200000ac 	.word	0x200000ac

080026a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026a4:	4b06      	ldr	r3, [pc, #24]	@ (80026c0 <HAL_IncTick+0x20>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	461a      	mov	r2, r3
 80026aa:	4b06      	ldr	r3, [pc, #24]	@ (80026c4 <HAL_IncTick+0x24>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4413      	add	r3, r2
 80026b0:	4a04      	ldr	r2, [pc, #16]	@ (80026c4 <HAL_IncTick+0x24>)
 80026b2:	6013      	str	r3, [r2, #0]
}
 80026b4:	bf00      	nop
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	200000b0 	.word	0x200000b0
 80026c4:	200003dc 	.word	0x200003dc

080026c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return uwTick;
 80026cc:	4b03      	ldr	r3, [pc, #12]	@ (80026dc <HAL_GetTick+0x14>)
 80026ce:	681b      	ldr	r3, [r3, #0]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	200003dc 	.word	0x200003dc

080026e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026e8:	f7ff ffee 	bl	80026c8 <HAL_GetTick>
 80026ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f8:	d005      	beq.n	8002706 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002724 <HAL_Delay+0x44>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	461a      	mov	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4413      	add	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002706:	bf00      	nop
 8002708:	f7ff ffde 	bl	80026c8 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	429a      	cmp	r2, r3
 8002716:	d8f7      	bhi.n	8002708 <HAL_Delay+0x28>
  {
  }
}
 8002718:	bf00      	nop
 800271a:	bf00      	nop
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	200000b0 	.word	0x200000b0

08002728 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002738:	4b0c      	ldr	r3, [pc, #48]	@ (800276c <__NVIC_SetPriorityGrouping+0x44>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002744:	4013      	ands	r3, r2
 8002746:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002750:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002754:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800275a:	4a04      	ldr	r2, [pc, #16]	@ (800276c <__NVIC_SetPriorityGrouping+0x44>)
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	60d3      	str	r3, [r2, #12]
}
 8002760:	bf00      	nop
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	e000ed00 	.word	0xe000ed00

08002770 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002774:	4b04      	ldr	r3, [pc, #16]	@ (8002788 <__NVIC_GetPriorityGrouping+0x18>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	0a1b      	lsrs	r3, r3, #8
 800277a:	f003 0307 	and.w	r3, r3, #7
}
 800277e:	4618      	mov	r0, r3
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	e000ed00 	.word	0xe000ed00

0800278c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279a:	2b00      	cmp	r3, #0
 800279c:	db0b      	blt.n	80027b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800279e:	79fb      	ldrb	r3, [r7, #7]
 80027a0:	f003 021f 	and.w	r2, r3, #31
 80027a4:	4907      	ldr	r1, [pc, #28]	@ (80027c4 <__NVIC_EnableIRQ+0x38>)
 80027a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027aa:	095b      	lsrs	r3, r3, #5
 80027ac:	2001      	movs	r0, #1
 80027ae:	fa00 f202 	lsl.w	r2, r0, r2
 80027b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	e000e100 	.word	0xe000e100

080027c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	6039      	str	r1, [r7, #0]
 80027d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	db0a      	blt.n	80027f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	490c      	ldr	r1, [pc, #48]	@ (8002814 <__NVIC_SetPriority+0x4c>)
 80027e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e6:	0112      	lsls	r2, r2, #4
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	440b      	add	r3, r1
 80027ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027f0:	e00a      	b.n	8002808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	4908      	ldr	r1, [pc, #32]	@ (8002818 <__NVIC_SetPriority+0x50>)
 80027f8:	79fb      	ldrb	r3, [r7, #7]
 80027fa:	f003 030f 	and.w	r3, r3, #15
 80027fe:	3b04      	subs	r3, #4
 8002800:	0112      	lsls	r2, r2, #4
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	440b      	add	r3, r1
 8002806:	761a      	strb	r2, [r3, #24]
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	e000e100 	.word	0xe000e100
 8002818:	e000ed00 	.word	0xe000ed00

0800281c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800281c:	b480      	push	{r7}
 800281e:	b089      	sub	sp, #36	@ 0x24
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	f1c3 0307 	rsb	r3, r3, #7
 8002836:	2b04      	cmp	r3, #4
 8002838:	bf28      	it	cs
 800283a:	2304      	movcs	r3, #4
 800283c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	3304      	adds	r3, #4
 8002842:	2b06      	cmp	r3, #6
 8002844:	d902      	bls.n	800284c <NVIC_EncodePriority+0x30>
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	3b03      	subs	r3, #3
 800284a:	e000      	b.n	800284e <NVIC_EncodePriority+0x32>
 800284c:	2300      	movs	r3, #0
 800284e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002850:	f04f 32ff 	mov.w	r2, #4294967295
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	43da      	mvns	r2, r3
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	401a      	ands	r2, r3
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002864:	f04f 31ff 	mov.w	r1, #4294967295
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	fa01 f303 	lsl.w	r3, r1, r3
 800286e:	43d9      	mvns	r1, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002874:	4313      	orrs	r3, r2
         );
}
 8002876:	4618      	mov	r0, r3
 8002878:	3724      	adds	r7, #36	@ 0x24
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
	...

08002884 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3b01      	subs	r3, #1
 8002890:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002894:	d301      	bcc.n	800289a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002896:	2301      	movs	r3, #1
 8002898:	e00f      	b.n	80028ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800289a:	4a0a      	ldr	r2, [pc, #40]	@ (80028c4 <SysTick_Config+0x40>)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3b01      	subs	r3, #1
 80028a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028a2:	210f      	movs	r1, #15
 80028a4:	f04f 30ff 	mov.w	r0, #4294967295
 80028a8:	f7ff ff8e 	bl	80027c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028ac:	4b05      	ldr	r3, [pc, #20]	@ (80028c4 <SysTick_Config+0x40>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028b2:	4b04      	ldr	r3, [pc, #16]	@ (80028c4 <SysTick_Config+0x40>)
 80028b4:	2207      	movs	r2, #7
 80028b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	e000e010 	.word	0xe000e010

080028c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f7ff ff29 	bl	8002728 <__NVIC_SetPriorityGrouping>
}
 80028d6:	bf00      	nop
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028de:	b580      	push	{r7, lr}
 80028e0:	b086      	sub	sp, #24
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	4603      	mov	r3, r0
 80028e6:	60b9      	str	r1, [r7, #8]
 80028e8:	607a      	str	r2, [r7, #4]
 80028ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028f0:	f7ff ff3e 	bl	8002770 <__NVIC_GetPriorityGrouping>
 80028f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	68b9      	ldr	r1, [r7, #8]
 80028fa:	6978      	ldr	r0, [r7, #20]
 80028fc:	f7ff ff8e 	bl	800281c <NVIC_EncodePriority>
 8002900:	4602      	mov	r2, r0
 8002902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002906:	4611      	mov	r1, r2
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff ff5d 	bl	80027c8 <__NVIC_SetPriority>
}
 800290e:	bf00      	nop
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
 800291c:	4603      	mov	r3, r0
 800291e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff ff31 	bl	800278c <__NVIC_EnableIRQ>
}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b082      	sub	sp, #8
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7ff ffa2 	bl	8002884 <SysTick_Config>
 8002940:	4603      	mov	r3, r0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b084      	sub	sp, #16
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002956:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002958:	f7ff feb6 	bl	80026c8 <HAL_GetTick>
 800295c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d008      	beq.n	800297c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2280      	movs	r2, #128	@ 0x80
 800296e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e052      	b.n	8002a22 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0216 	bic.w	r2, r2, #22
 800298a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	695a      	ldr	r2, [r3, #20]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800299a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d103      	bne.n	80029ac <HAL_DMA_Abort+0x62>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d007      	beq.n	80029bc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0208 	bic.w	r2, r2, #8
 80029ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0201 	bic.w	r2, r2, #1
 80029ca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029cc:	e013      	b.n	80029f6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029ce:	f7ff fe7b 	bl	80026c8 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b05      	cmp	r3, #5
 80029da:	d90c      	bls.n	80029f6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2220      	movs	r2, #32
 80029e0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2203      	movs	r2, #3
 80029e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e015      	b.n	8002a22 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1e4      	bne.n	80029ce <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a08:	223f      	movs	r2, #63	@ 0x3f
 8002a0a:	409a      	lsls	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d004      	beq.n	8002a48 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2280      	movs	r2, #128	@ 0x80
 8002a42:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e00c      	b.n	8002a62 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2205      	movs	r2, #5
 8002a4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0201 	bic.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
	...

08002a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b089      	sub	sp, #36	@ 0x24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a86:	2300      	movs	r3, #0
 8002a88:	61fb      	str	r3, [r7, #28]
 8002a8a:	e159      	b.n	8002d40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	f040 8148 	bne.w	8002d3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d005      	beq.n	8002ac2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d130      	bne.n	8002b24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	2203      	movs	r2, #3
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	68da      	ldr	r2, [r3, #12]
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002af8:	2201      	movs	r2, #1
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	43db      	mvns	r3, r3
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4013      	ands	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	091b      	lsrs	r3, r3, #4
 8002b0e:	f003 0201 	and.w	r2, r3, #1
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 0303 	and.w	r3, r3, #3
 8002b2c:	2b03      	cmp	r3, #3
 8002b2e:	d017      	beq.n	8002b60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	2203      	movs	r2, #3
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	43db      	mvns	r3, r3
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4013      	ands	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 0303 	and.w	r3, r3, #3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d123      	bne.n	8002bb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	08da      	lsrs	r2, r3, #3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3208      	adds	r2, #8
 8002b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	220f      	movs	r2, #15
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	691a      	ldr	r2, [r3, #16]
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	08da      	lsrs	r2, r3, #3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	3208      	adds	r2, #8
 8002bae:	69b9      	ldr	r1, [r7, #24]
 8002bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 0203 	and.w	r2, r3, #3
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 80a2 	beq.w	8002d3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	4b57      	ldr	r3, [pc, #348]	@ (8002d58 <HAL_GPIO_Init+0x2e8>)
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfe:	4a56      	ldr	r2, [pc, #344]	@ (8002d58 <HAL_GPIO_Init+0x2e8>)
 8002c00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c04:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c06:	4b54      	ldr	r3, [pc, #336]	@ (8002d58 <HAL_GPIO_Init+0x2e8>)
 8002c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c12:	4a52      	ldr	r2, [pc, #328]	@ (8002d5c <HAL_GPIO_Init+0x2ec>)
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	089b      	lsrs	r3, r3, #2
 8002c18:	3302      	adds	r3, #2
 8002c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	f003 0303 	and.w	r3, r3, #3
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	220f      	movs	r2, #15
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4013      	ands	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a49      	ldr	r2, [pc, #292]	@ (8002d60 <HAL_GPIO_Init+0x2f0>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d019      	beq.n	8002c72 <HAL_GPIO_Init+0x202>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a48      	ldr	r2, [pc, #288]	@ (8002d64 <HAL_GPIO_Init+0x2f4>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d013      	beq.n	8002c6e <HAL_GPIO_Init+0x1fe>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a47      	ldr	r2, [pc, #284]	@ (8002d68 <HAL_GPIO_Init+0x2f8>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d00d      	beq.n	8002c6a <HAL_GPIO_Init+0x1fa>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a46      	ldr	r2, [pc, #280]	@ (8002d6c <HAL_GPIO_Init+0x2fc>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d007      	beq.n	8002c66 <HAL_GPIO_Init+0x1f6>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a45      	ldr	r2, [pc, #276]	@ (8002d70 <HAL_GPIO_Init+0x300>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d101      	bne.n	8002c62 <HAL_GPIO_Init+0x1f2>
 8002c5e:	2304      	movs	r3, #4
 8002c60:	e008      	b.n	8002c74 <HAL_GPIO_Init+0x204>
 8002c62:	2307      	movs	r3, #7
 8002c64:	e006      	b.n	8002c74 <HAL_GPIO_Init+0x204>
 8002c66:	2303      	movs	r3, #3
 8002c68:	e004      	b.n	8002c74 <HAL_GPIO_Init+0x204>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	e002      	b.n	8002c74 <HAL_GPIO_Init+0x204>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <HAL_GPIO_Init+0x204>
 8002c72:	2300      	movs	r3, #0
 8002c74:	69fa      	ldr	r2, [r7, #28]
 8002c76:	f002 0203 	and.w	r2, r2, #3
 8002c7a:	0092      	lsls	r2, r2, #2
 8002c7c:	4093      	lsls	r3, r2
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c84:	4935      	ldr	r1, [pc, #212]	@ (8002d5c <HAL_GPIO_Init+0x2ec>)
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	089b      	lsrs	r3, r3, #2
 8002c8a:	3302      	adds	r3, #2
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c92:	4b38      	ldr	r3, [pc, #224]	@ (8002d74 <HAL_GPIO_Init+0x304>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cb6:	4a2f      	ldr	r2, [pc, #188]	@ (8002d74 <HAL_GPIO_Init+0x304>)
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cbc:	4b2d      	ldr	r3, [pc, #180]	@ (8002d74 <HAL_GPIO_Init+0x304>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ce0:	4a24      	ldr	r2, [pc, #144]	@ (8002d74 <HAL_GPIO_Init+0x304>)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ce6:	4b23      	ldr	r3, [pc, #140]	@ (8002d74 <HAL_GPIO_Init+0x304>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d0a:	4a1a      	ldr	r2, [pc, #104]	@ (8002d74 <HAL_GPIO_Init+0x304>)
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d10:	4b18      	ldr	r3, [pc, #96]	@ (8002d74 <HAL_GPIO_Init+0x304>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d34:	4a0f      	ldr	r2, [pc, #60]	@ (8002d74 <HAL_GPIO_Init+0x304>)
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	61fb      	str	r3, [r7, #28]
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	2b0f      	cmp	r3, #15
 8002d44:	f67f aea2 	bls.w	8002a8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d48:	bf00      	nop
 8002d4a:	bf00      	nop
 8002d4c:	3724      	adds	r7, #36	@ 0x24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	40013800 	.word	0x40013800
 8002d60:	40020000 	.word	0x40020000
 8002d64:	40020400 	.word	0x40020400
 8002d68:	40020800 	.word	0x40020800
 8002d6c:	40020c00 	.word	0x40020c00
 8002d70:	40021000 	.word	0x40021000
 8002d74:	40013c00 	.word	0x40013c00

08002d78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	460b      	mov	r3, r1
 8002d82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691a      	ldr	r2, [r3, #16]
 8002d88:	887b      	ldrh	r3, [r7, #2]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d002      	beq.n	8002d96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d90:	2301      	movs	r3, #1
 8002d92:	73fb      	strb	r3, [r7, #15]
 8002d94:	e001      	b.n	8002d9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d96:	2300      	movs	r3, #0
 8002d98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	460b      	mov	r3, r1
 8002db2:	807b      	strh	r3, [r7, #2]
 8002db4:	4613      	mov	r3, r2
 8002db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002db8:	787b      	ldrb	r3, [r7, #1]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dbe:	887a      	ldrh	r2, [r7, #2]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002dc4:	e003      	b.n	8002dce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dc6:	887b      	ldrh	r3, [r7, #2]
 8002dc8:	041a      	lsls	r2, r3, #16
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	619a      	str	r2, [r3, #24]
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
	...

08002ddc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e12b      	b.n	8003046 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d106      	bne.n	8002e08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7fd fca8 	bl	8000758 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2224      	movs	r2, #36	@ 0x24
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0201 	bic.w	r2, r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e40:	f001 f8da 	bl	8003ff8 <HAL_RCC_GetPCLK1Freq>
 8002e44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	4a81      	ldr	r2, [pc, #516]	@ (8003050 <HAL_I2C_Init+0x274>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d807      	bhi.n	8002e60 <HAL_I2C_Init+0x84>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4a80      	ldr	r2, [pc, #512]	@ (8003054 <HAL_I2C_Init+0x278>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	bf94      	ite	ls
 8002e58:	2301      	movls	r3, #1
 8002e5a:	2300      	movhi	r3, #0
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	e006      	b.n	8002e6e <HAL_I2C_Init+0x92>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4a7d      	ldr	r2, [pc, #500]	@ (8003058 <HAL_I2C_Init+0x27c>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	bf94      	ite	ls
 8002e68:	2301      	movls	r3, #1
 8002e6a:	2300      	movhi	r3, #0
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e0e7      	b.n	8003046 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	4a78      	ldr	r2, [pc, #480]	@ (800305c <HAL_I2C_Init+0x280>)
 8002e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7e:	0c9b      	lsrs	r3, r3, #18
 8002e80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	4a6a      	ldr	r2, [pc, #424]	@ (8003050 <HAL_I2C_Init+0x274>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d802      	bhi.n	8002eb0 <HAL_I2C_Init+0xd4>
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	3301      	adds	r3, #1
 8002eae:	e009      	b.n	8002ec4 <HAL_I2C_Init+0xe8>
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002eb6:	fb02 f303 	mul.w	r3, r2, r3
 8002eba:	4a69      	ldr	r2, [pc, #420]	@ (8003060 <HAL_I2C_Init+0x284>)
 8002ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec0:	099b      	lsrs	r3, r3, #6
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6812      	ldr	r2, [r2, #0]
 8002ec8:	430b      	orrs	r3, r1
 8002eca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002ed6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	495c      	ldr	r1, [pc, #368]	@ (8003050 <HAL_I2C_Init+0x274>)
 8002ee0:	428b      	cmp	r3, r1
 8002ee2:	d819      	bhi.n	8002f18 <HAL_I2C_Init+0x13c>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	1e59      	subs	r1, r3, #1
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ef2:	1c59      	adds	r1, r3, #1
 8002ef4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002ef8:	400b      	ands	r3, r1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00a      	beq.n	8002f14 <HAL_I2C_Init+0x138>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	1e59      	subs	r1, r3, #1
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f12:	e051      	b.n	8002fb8 <HAL_I2C_Init+0x1dc>
 8002f14:	2304      	movs	r3, #4
 8002f16:	e04f      	b.n	8002fb8 <HAL_I2C_Init+0x1dc>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d111      	bne.n	8002f44 <HAL_I2C_Init+0x168>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	1e58      	subs	r0, r3, #1
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6859      	ldr	r1, [r3, #4]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	440b      	add	r3, r1
 8002f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f32:	3301      	adds	r3, #1
 8002f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	bf0c      	ite	eq
 8002f3c:	2301      	moveq	r3, #1
 8002f3e:	2300      	movne	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	e012      	b.n	8002f6a <HAL_I2C_Init+0x18e>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	1e58      	subs	r0, r3, #1
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6859      	ldr	r1, [r3, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	0099      	lsls	r1, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	bf0c      	ite	eq
 8002f64:	2301      	moveq	r3, #1
 8002f66:	2300      	movne	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_I2C_Init+0x196>
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e022      	b.n	8002fb8 <HAL_I2C_Init+0x1dc>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10e      	bne.n	8002f98 <HAL_I2C_Init+0x1bc>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	1e58      	subs	r0, r3, #1
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6859      	ldr	r1, [r3, #4]
 8002f82:	460b      	mov	r3, r1
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	440b      	add	r3, r1
 8002f88:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f96:	e00f      	b.n	8002fb8 <HAL_I2C_Init+0x1dc>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	1e58      	subs	r0, r3, #1
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6859      	ldr	r1, [r3, #4]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	0099      	lsls	r1, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fae:	3301      	adds	r3, #1
 8002fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	6809      	ldr	r1, [r1, #0]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69da      	ldr	r2, [r3, #28]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002fe6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	6911      	ldr	r1, [r2, #16]
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	68d2      	ldr	r2, [r2, #12]
 8002ff2:	4311      	orrs	r1, r2
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6812      	ldr	r2, [r2, #0]
 8002ff8:	430b      	orrs	r3, r1
 8002ffa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	695a      	ldr	r2, [r3, #20]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 0201 	orr.w	r2, r2, #1
 8003026:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2220      	movs	r2, #32
 8003032:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	000186a0 	.word	0x000186a0
 8003054:	001e847f 	.word	0x001e847f
 8003058:	003d08ff 	.word	0x003d08ff
 800305c:	431bde83 	.word	0x431bde83
 8003060:	10624dd3 	.word	0x10624dd3

08003064 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b088      	sub	sp, #32
 8003068:	af02      	add	r7, sp, #8
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	607a      	str	r2, [r7, #4]
 800306e:	461a      	mov	r2, r3
 8003070:	460b      	mov	r3, r1
 8003072:	817b      	strh	r3, [r7, #10]
 8003074:	4613      	mov	r3, r2
 8003076:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003078:	f7ff fb26 	bl	80026c8 <HAL_GetTick>
 800307c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b20      	cmp	r3, #32
 8003088:	f040 80e0 	bne.w	800324c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	2319      	movs	r3, #25
 8003092:	2201      	movs	r2, #1
 8003094:	4970      	ldr	r1, [pc, #448]	@ (8003258 <HAL_I2C_Master_Transmit+0x1f4>)
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f000 f964 	bl	8003364 <I2C_WaitOnFlagUntilTimeout>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80030a2:	2302      	movs	r3, #2
 80030a4:	e0d3      	b.n	800324e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <HAL_I2C_Master_Transmit+0x50>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e0cc      	b.n	800324e <HAL_I2C_Master_Transmit+0x1ea>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d007      	beq.n	80030da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f042 0201 	orr.w	r2, r2, #1
 80030d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2221      	movs	r2, #33	@ 0x21
 80030ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2210      	movs	r2, #16
 80030f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	893a      	ldrh	r2, [r7, #8]
 800310a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003110:	b29a      	uxth	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	4a50      	ldr	r2, [pc, #320]	@ (800325c <HAL_I2C_Master_Transmit+0x1f8>)
 800311a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800311c:	8979      	ldrh	r1, [r7, #10]
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	6a3a      	ldr	r2, [r7, #32]
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 f89c 	bl	8003260 <I2C_MasterRequestWrite>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e08d      	b.n	800324e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003132:	2300      	movs	r3, #0
 8003134:	613b      	str	r3, [r7, #16]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	613b      	str	r3, [r7, #16]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	613b      	str	r3, [r7, #16]
 8003146:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003148:	e066      	b.n	8003218 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	6a39      	ldr	r1, [r7, #32]
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 fa22 	bl	8003598 <I2C_WaitOnTXEFlagUntilTimeout>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00d      	beq.n	8003176 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315e:	2b04      	cmp	r3, #4
 8003160:	d107      	bne.n	8003172 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003170:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e06b      	b.n	800324e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317a:	781a      	ldrb	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003190:	b29b      	uxth	r3, r3
 8003192:	3b01      	subs	r3, #1
 8003194:	b29a      	uxth	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800319e:	3b01      	subs	r3, #1
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d11b      	bne.n	80031ec <HAL_I2C_Master_Transmit+0x188>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d017      	beq.n	80031ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c0:	781a      	ldrb	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031cc:	1c5a      	adds	r2, r3, #1
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	3b01      	subs	r3, #1
 80031da:	b29a      	uxth	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031e4:	3b01      	subs	r3, #1
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	6a39      	ldr	r1, [r7, #32]
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f000 fa19 	bl	8003628 <I2C_WaitOnBTFFlagUntilTimeout>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00d      	beq.n	8003218 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003200:	2b04      	cmp	r3, #4
 8003202:	d107      	bne.n	8003214 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003212:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e01a      	b.n	800324e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800321c:	2b00      	cmp	r3, #0
 800321e:	d194      	bne.n	800314a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800322e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2220      	movs	r2, #32
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003248:	2300      	movs	r3, #0
 800324a:	e000      	b.n	800324e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800324c:	2302      	movs	r3, #2
  }
}
 800324e:	4618      	mov	r0, r3
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	00100002 	.word	0x00100002
 800325c:	ffff0000 	.word	0xffff0000

08003260 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b088      	sub	sp, #32
 8003264:	af02      	add	r7, sp, #8
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	607a      	str	r2, [r7, #4]
 800326a:	603b      	str	r3, [r7, #0]
 800326c:	460b      	mov	r3, r1
 800326e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003274:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	2b08      	cmp	r3, #8
 800327a:	d006      	beq.n	800328a <I2C_MasterRequestWrite+0x2a>
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d003      	beq.n	800328a <I2C_MasterRequestWrite+0x2a>
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003288:	d108      	bne.n	800329c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	e00b      	b.n	80032b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a0:	2b12      	cmp	r3, #18
 80032a2:	d107      	bne.n	80032b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 f84f 	bl	8003364 <I2C_WaitOnFlagUntilTimeout>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00d      	beq.n	80032e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032da:	d103      	bne.n	80032e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e035      	b.n	8003354 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032f0:	d108      	bne.n	8003304 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032f2:	897b      	ldrh	r3, [r7, #10]
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	461a      	mov	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003300:	611a      	str	r2, [r3, #16]
 8003302:	e01b      	b.n	800333c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003304:	897b      	ldrh	r3, [r7, #10]
 8003306:	11db      	asrs	r3, r3, #7
 8003308:	b2db      	uxtb	r3, r3
 800330a:	f003 0306 	and.w	r3, r3, #6
 800330e:	b2db      	uxtb	r3, r3
 8003310:	f063 030f 	orn	r3, r3, #15
 8003314:	b2da      	uxtb	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	490e      	ldr	r1, [pc, #56]	@ (800335c <I2C_MasterRequestWrite+0xfc>)
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 f898 	bl	8003458 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e010      	b.n	8003354 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003332:	897b      	ldrh	r3, [r7, #10]
 8003334:	b2da      	uxtb	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	4907      	ldr	r1, [pc, #28]	@ (8003360 <I2C_MasterRequestWrite+0x100>)
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 f888 	bl	8003458 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e000      	b.n	8003354 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3718      	adds	r7, #24
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	00010008 	.word	0x00010008
 8003360:	00010002 	.word	0x00010002

08003364 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	603b      	str	r3, [r7, #0]
 8003370:	4613      	mov	r3, r2
 8003372:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003374:	e048      	b.n	8003408 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337c:	d044      	beq.n	8003408 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800337e:	f7ff f9a3 	bl	80026c8 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d302      	bcc.n	8003394 <I2C_WaitOnFlagUntilTimeout+0x30>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d139      	bne.n	8003408 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	0c1b      	lsrs	r3, r3, #16
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b01      	cmp	r3, #1
 800339c:	d10d      	bne.n	80033ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	43da      	mvns	r2, r3
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	4013      	ands	r3, r2
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	bf0c      	ite	eq
 80033b0:	2301      	moveq	r3, #1
 80033b2:	2300      	movne	r3, #0
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	461a      	mov	r2, r3
 80033b8:	e00c      	b.n	80033d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	43da      	mvns	r2, r3
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	4013      	ands	r3, r2
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	bf0c      	ite	eq
 80033cc:	2301      	moveq	r3, #1
 80033ce:	2300      	movne	r3, #0
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	461a      	mov	r2, r3
 80033d4:	79fb      	ldrb	r3, [r7, #7]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d116      	bne.n	8003408 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f4:	f043 0220 	orr.w	r2, r3, #32
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e023      	b.n	8003450 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	0c1b      	lsrs	r3, r3, #16
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b01      	cmp	r3, #1
 8003410:	d10d      	bne.n	800342e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	43da      	mvns	r2, r3
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	4013      	ands	r3, r2
 800341e:	b29b      	uxth	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	bf0c      	ite	eq
 8003424:	2301      	moveq	r3, #1
 8003426:	2300      	movne	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	461a      	mov	r2, r3
 800342c:	e00c      	b.n	8003448 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	43da      	mvns	r2, r3
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	4013      	ands	r3, r2
 800343a:	b29b      	uxth	r3, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	bf0c      	ite	eq
 8003440:	2301      	moveq	r3, #1
 8003442:	2300      	movne	r3, #0
 8003444:	b2db      	uxtb	r3, r3
 8003446:	461a      	mov	r2, r3
 8003448:	79fb      	ldrb	r3, [r7, #7]
 800344a:	429a      	cmp	r2, r3
 800344c:	d093      	beq.n	8003376 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
 8003464:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003466:	e071      	b.n	800354c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003472:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003476:	d123      	bne.n	80034c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003486:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003490:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2220      	movs	r2, #32
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ac:	f043 0204 	orr.w	r2, r3, #4
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e067      	b.n	8003590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c6:	d041      	beq.n	800354c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034c8:	f7ff f8fe 	bl	80026c8 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d302      	bcc.n	80034de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d136      	bne.n	800354c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	0c1b      	lsrs	r3, r3, #16
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d10c      	bne.n	8003502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	43da      	mvns	r2, r3
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	4013      	ands	r3, r2
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	bf14      	ite	ne
 80034fa:	2301      	movne	r3, #1
 80034fc:	2300      	moveq	r3, #0
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	e00b      	b.n	800351a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	43da      	mvns	r2, r3
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	4013      	ands	r3, r2
 800350e:	b29b      	uxth	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	bf14      	ite	ne
 8003514:	2301      	movne	r3, #1
 8003516:	2300      	moveq	r3, #0
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d016      	beq.n	800354c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2220      	movs	r2, #32
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003538:	f043 0220 	orr.w	r2, r3, #32
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e021      	b.n	8003590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	0c1b      	lsrs	r3, r3, #16
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b01      	cmp	r3, #1
 8003554:	d10c      	bne.n	8003570 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	43da      	mvns	r2, r3
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	4013      	ands	r3, r2
 8003562:	b29b      	uxth	r3, r3
 8003564:	2b00      	cmp	r3, #0
 8003566:	bf14      	ite	ne
 8003568:	2301      	movne	r3, #1
 800356a:	2300      	moveq	r3, #0
 800356c:	b2db      	uxtb	r3, r3
 800356e:	e00b      	b.n	8003588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	43da      	mvns	r2, r3
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	4013      	ands	r3, r2
 800357c:	b29b      	uxth	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	bf14      	ite	ne
 8003582:	2301      	movne	r3, #1
 8003584:	2300      	moveq	r3, #0
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	f47f af6d 	bne.w	8003468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035a4:	e034      	b.n	8003610 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f000 f886 	bl	80036b8 <I2C_IsAcknowledgeFailed>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e034      	b.n	8003620 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035bc:	d028      	beq.n	8003610 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035be:	f7ff f883 	bl	80026c8 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d302      	bcc.n	80035d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d11d      	bne.n	8003610 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035de:	2b80      	cmp	r3, #128	@ 0x80
 80035e0:	d016      	beq.n	8003610 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2220      	movs	r2, #32
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fc:	f043 0220 	orr.w	r2, r3, #32
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e007      	b.n	8003620 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800361a:	2b80      	cmp	r3, #128	@ 0x80
 800361c:	d1c3      	bne.n	80035a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003634:	e034      	b.n	80036a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 f83e 	bl	80036b8 <I2C_IsAcknowledgeFailed>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e034      	b.n	80036b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800364c:	d028      	beq.n	80036a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800364e:	f7ff f83b 	bl	80026c8 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	429a      	cmp	r2, r3
 800365c:	d302      	bcc.n	8003664 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d11d      	bne.n	80036a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	f003 0304 	and.w	r3, r3, #4
 800366e:	2b04      	cmp	r3, #4
 8003670:	d016      	beq.n	80036a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2220      	movs	r2, #32
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368c:	f043 0220 	orr.w	r2, r3, #32
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e007      	b.n	80036b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	f003 0304 	and.w	r3, r3, #4
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	d1c3      	bne.n	8003636 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036ce:	d11b      	bne.n	8003708 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036d8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f4:	f043 0204 	orr.w	r2, r3, #4
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e000      	b.n	800370a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
	...

08003718 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e267      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d075      	beq.n	8003822 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003736:	4b88      	ldr	r3, [pc, #544]	@ (8003958 <HAL_RCC_OscConfig+0x240>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 030c 	and.w	r3, r3, #12
 800373e:	2b04      	cmp	r3, #4
 8003740:	d00c      	beq.n	800375c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003742:	4b85      	ldr	r3, [pc, #532]	@ (8003958 <HAL_RCC_OscConfig+0x240>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800374a:	2b08      	cmp	r3, #8
 800374c:	d112      	bne.n	8003774 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800374e:	4b82      	ldr	r3, [pc, #520]	@ (8003958 <HAL_RCC_OscConfig+0x240>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003756:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800375a:	d10b      	bne.n	8003774 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800375c:	4b7e      	ldr	r3, [pc, #504]	@ (8003958 <HAL_RCC_OscConfig+0x240>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d05b      	beq.n	8003820 <HAL_RCC_OscConfig+0x108>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d157      	bne.n	8003820 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e242      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800377c:	d106      	bne.n	800378c <HAL_RCC_OscConfig+0x74>
 800377e:	4b76      	ldr	r3, [pc, #472]	@ (8003958 <HAL_RCC_OscConfig+0x240>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a75      	ldr	r2, [pc, #468]	@ (8003958 <HAL_RCC_OscConfig+0x240>)
 8003784:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003788:	6013      	str	r3, [r2, #0]
 800378a:	e01d      	b.n	80037c8 <HAL_RCC_OscConfig+0xb0>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003794:	d10c      	bne.n	80037b0 <HAL_RCC_OscConfig+0x98>
 8003796:	4b70      	ldr	r3, [pc, #448]	@ (8003958 <HAL_RCC_OscConfig+0x240>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a6f      	ldr	r2, [pc, #444]	@ (8003958 <HAL_RCC_OscConfig+0x240>)
 800379c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037a0:	6013      	str	r3, [r2, #0]
 80037a2:	4b6d      	ldr	r3, [pc, #436]	@ (8003958 <HAL_RCC_OscConfig+0x240>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a6c      	ldr	r2, [pc, #432]	@ (8003958 <HAL_RCC_OscConfig+0x240>)
 80037a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037ac:	6013      	str	r3, [r2, #0]
 80037ae:	e00b      	b.n	80037c8 <HAL_RCC_OscConfig+0xb0>
 80037b0:	4b69      	ldr	r3, [pc, #420]	@ (8003958 <HAL_RCC_OscConfig+0x240>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a68      	ldr	r2, [pc, #416]	@ (8003958 <HAL_RCC_OscConfig+0x240>)
 80037b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037ba:	6013      	str	r3, [r2, #0]
 80037bc:	4b66      	ldr	r3, [pc, #408]	@ (8003958 <HAL_RCC_OscConfig+0x240>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a65      	ldr	r2, [pc, #404]	@ (8003958 <HAL_RCC_OscConfig+0x240>)
 80037c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d013      	beq.n	80037f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d0:	f7fe ff7a 	bl	80026c8 <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037d8:	f7fe ff76 	bl	80026c8 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b64      	cmp	r3, #100	@ 0x64
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e207      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ea:	4b5b      	ldr	r3, [pc, #364]	@ (8003958 <HAL_RCC_OscConfig+0x240>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0f0      	beq.n	80037d8 <HAL_RCC_OscConfig+0xc0>
 80037f6:	e014      	b.n	8003822 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f8:	f7fe ff66 	bl	80026c8 <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003800:	f7fe ff62 	bl	80026c8 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b64      	cmp	r3, #100	@ 0x64
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e1f3      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003812:	4b51      	ldr	r3, [pc, #324]	@ (8003958 <HAL_RCC_OscConfig+0x240>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1f0      	bne.n	8003800 <HAL_RCC_OscConfig+0xe8>
 800381e:	e000      	b.n	8003822 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d063      	beq.n	80038f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800382e:	4b4a      	ldr	r3, [pc, #296]	@ (8003958 <HAL_RCC_OscConfig+0x240>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 030c 	and.w	r3, r3, #12
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00b      	beq.n	8003852 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800383a:	4b47      	ldr	r3, [pc, #284]	@ (8003958 <HAL_RCC_OscConfig+0x240>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003842:	2b08      	cmp	r3, #8
 8003844:	d11c      	bne.n	8003880 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003846:	4b44      	ldr	r3, [pc, #272]	@ (8003958 <HAL_RCC_OscConfig+0x240>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d116      	bne.n	8003880 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003852:	4b41      	ldr	r3, [pc, #260]	@ (8003958 <HAL_RCC_OscConfig+0x240>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d005      	beq.n	800386a <HAL_RCC_OscConfig+0x152>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d001      	beq.n	800386a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e1c7      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800386a:	4b3b      	ldr	r3, [pc, #236]	@ (8003958 <HAL_RCC_OscConfig+0x240>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	4937      	ldr	r1, [pc, #220]	@ (8003958 <HAL_RCC_OscConfig+0x240>)
 800387a:	4313      	orrs	r3, r2
 800387c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800387e:	e03a      	b.n	80038f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d020      	beq.n	80038ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003888:	4b34      	ldr	r3, [pc, #208]	@ (800395c <HAL_RCC_OscConfig+0x244>)
 800388a:	2201      	movs	r2, #1
 800388c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388e:	f7fe ff1b 	bl	80026c8 <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003894:	e008      	b.n	80038a8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003896:	f7fe ff17 	bl	80026c8 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e1a8      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a8:	4b2b      	ldr	r3, [pc, #172]	@ (8003958 <HAL_RCC_OscConfig+0x240>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d0f0      	beq.n	8003896 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b4:	4b28      	ldr	r3, [pc, #160]	@ (8003958 <HAL_RCC_OscConfig+0x240>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	4925      	ldr	r1, [pc, #148]	@ (8003958 <HAL_RCC_OscConfig+0x240>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	600b      	str	r3, [r1, #0]
 80038c8:	e015      	b.n	80038f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ca:	4b24      	ldr	r3, [pc, #144]	@ (800395c <HAL_RCC_OscConfig+0x244>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d0:	f7fe fefa 	bl	80026c8 <HAL_GetTick>
 80038d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038d6:	e008      	b.n	80038ea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038d8:	f7fe fef6 	bl	80026c8 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e187      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003958 <HAL_RCC_OscConfig+0x240>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1f0      	bne.n	80038d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d036      	beq.n	8003970 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d016      	beq.n	8003938 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800390a:	4b15      	ldr	r3, [pc, #84]	@ (8003960 <HAL_RCC_OscConfig+0x248>)
 800390c:	2201      	movs	r2, #1
 800390e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003910:	f7fe feda 	bl	80026c8 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003918:	f7fe fed6 	bl	80026c8 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e167      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800392a:	4b0b      	ldr	r3, [pc, #44]	@ (8003958 <HAL_RCC_OscConfig+0x240>)
 800392c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0f0      	beq.n	8003918 <HAL_RCC_OscConfig+0x200>
 8003936:	e01b      	b.n	8003970 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003938:	4b09      	ldr	r3, [pc, #36]	@ (8003960 <HAL_RCC_OscConfig+0x248>)
 800393a:	2200      	movs	r2, #0
 800393c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800393e:	f7fe fec3 	bl	80026c8 <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003944:	e00e      	b.n	8003964 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003946:	f7fe febf 	bl	80026c8 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d907      	bls.n	8003964 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e150      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
 8003958:	40023800 	.word	0x40023800
 800395c:	42470000 	.word	0x42470000
 8003960:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003964:	4b88      	ldr	r3, [pc, #544]	@ (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003966:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1ea      	bne.n	8003946 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 8097 	beq.w	8003aac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800397e:	2300      	movs	r3, #0
 8003980:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003982:	4b81      	ldr	r3, [pc, #516]	@ (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10f      	bne.n	80039ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800398e:	2300      	movs	r3, #0
 8003990:	60bb      	str	r3, [r7, #8]
 8003992:	4b7d      	ldr	r3, [pc, #500]	@ (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003996:	4a7c      	ldr	r2, [pc, #496]	@ (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003998:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800399c:	6413      	str	r3, [r2, #64]	@ 0x40
 800399e:	4b7a      	ldr	r3, [pc, #488]	@ (8003b88 <HAL_RCC_OscConfig+0x470>)
 80039a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039a6:	60bb      	str	r3, [r7, #8]
 80039a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039aa:	2301      	movs	r3, #1
 80039ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ae:	4b77      	ldr	r3, [pc, #476]	@ (8003b8c <HAL_RCC_OscConfig+0x474>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d118      	bne.n	80039ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ba:	4b74      	ldr	r3, [pc, #464]	@ (8003b8c <HAL_RCC_OscConfig+0x474>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a73      	ldr	r2, [pc, #460]	@ (8003b8c <HAL_RCC_OscConfig+0x474>)
 80039c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039c6:	f7fe fe7f 	bl	80026c8 <HAL_GetTick>
 80039ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039cc:	e008      	b.n	80039e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ce:	f7fe fe7b 	bl	80026c8 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e10c      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e0:	4b6a      	ldr	r3, [pc, #424]	@ (8003b8c <HAL_RCC_OscConfig+0x474>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d0f0      	beq.n	80039ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d106      	bne.n	8003a02 <HAL_RCC_OscConfig+0x2ea>
 80039f4:	4b64      	ldr	r3, [pc, #400]	@ (8003b88 <HAL_RCC_OscConfig+0x470>)
 80039f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039f8:	4a63      	ldr	r2, [pc, #396]	@ (8003b88 <HAL_RCC_OscConfig+0x470>)
 80039fa:	f043 0301 	orr.w	r3, r3, #1
 80039fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a00:	e01c      	b.n	8003a3c <HAL_RCC_OscConfig+0x324>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	2b05      	cmp	r3, #5
 8003a08:	d10c      	bne.n	8003a24 <HAL_RCC_OscConfig+0x30c>
 8003a0a:	4b5f      	ldr	r3, [pc, #380]	@ (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a0e:	4a5e      	ldr	r2, [pc, #376]	@ (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003a10:	f043 0304 	orr.w	r3, r3, #4
 8003a14:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a16:	4b5c      	ldr	r3, [pc, #368]	@ (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a1a:	4a5b      	ldr	r2, [pc, #364]	@ (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003a1c:	f043 0301 	orr.w	r3, r3, #1
 8003a20:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a22:	e00b      	b.n	8003a3c <HAL_RCC_OscConfig+0x324>
 8003a24:	4b58      	ldr	r3, [pc, #352]	@ (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a28:	4a57      	ldr	r2, [pc, #348]	@ (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003a2a:	f023 0301 	bic.w	r3, r3, #1
 8003a2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a30:	4b55      	ldr	r3, [pc, #340]	@ (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003a32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a34:	4a54      	ldr	r2, [pc, #336]	@ (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003a36:	f023 0304 	bic.w	r3, r3, #4
 8003a3a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d015      	beq.n	8003a70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a44:	f7fe fe40 	bl	80026c8 <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a4a:	e00a      	b.n	8003a62 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a4c:	f7fe fe3c 	bl	80026c8 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e0cb      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a62:	4b49      	ldr	r3, [pc, #292]	@ (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d0ee      	beq.n	8003a4c <HAL_RCC_OscConfig+0x334>
 8003a6e:	e014      	b.n	8003a9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a70:	f7fe fe2a 	bl	80026c8 <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a76:	e00a      	b.n	8003a8e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a78:	f7fe fe26 	bl	80026c8 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e0b5      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a8e:	4b3e      	ldr	r3, [pc, #248]	@ (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003a90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1ee      	bne.n	8003a78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a9a:	7dfb      	ldrb	r3, [r7, #23]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d105      	bne.n	8003aac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aa0:	4b39      	ldr	r3, [pc, #228]	@ (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa4:	4a38      	ldr	r2, [pc, #224]	@ (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003aa6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003aaa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 80a1 	beq.w	8003bf8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ab6:	4b34      	ldr	r3, [pc, #208]	@ (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 030c 	and.w	r3, r3, #12
 8003abe:	2b08      	cmp	r3, #8
 8003ac0:	d05c      	beq.n	8003b7c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d141      	bne.n	8003b4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aca:	4b31      	ldr	r3, [pc, #196]	@ (8003b90 <HAL_RCC_OscConfig+0x478>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad0:	f7fe fdfa 	bl	80026c8 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad8:	f7fe fdf6 	bl	80026c8 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e087      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aea:	4b27      	ldr	r3, [pc, #156]	@ (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1f0      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69da      	ldr	r2, [r3, #28]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	431a      	orrs	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b04:	019b      	lsls	r3, r3, #6
 8003b06:	431a      	orrs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b0c:	085b      	lsrs	r3, r3, #1
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	041b      	lsls	r3, r3, #16
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b18:	061b      	lsls	r3, r3, #24
 8003b1a:	491b      	ldr	r1, [pc, #108]	@ (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b20:	4b1b      	ldr	r3, [pc, #108]	@ (8003b90 <HAL_RCC_OscConfig+0x478>)
 8003b22:	2201      	movs	r2, #1
 8003b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b26:	f7fe fdcf 	bl	80026c8 <HAL_GetTick>
 8003b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b2c:	e008      	b.n	8003b40 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b2e:	f7fe fdcb 	bl	80026c8 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e05c      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b40:	4b11      	ldr	r3, [pc, #68]	@ (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0f0      	beq.n	8003b2e <HAL_RCC_OscConfig+0x416>
 8003b4c:	e054      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b4e:	4b10      	ldr	r3, [pc, #64]	@ (8003b90 <HAL_RCC_OscConfig+0x478>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b54:	f7fe fdb8 	bl	80026c8 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b5c:	f7fe fdb4 	bl	80026c8 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e045      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b6e:	4b06      	ldr	r3, [pc, #24]	@ (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1f0      	bne.n	8003b5c <HAL_RCC_OscConfig+0x444>
 8003b7a:	e03d      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d107      	bne.n	8003b94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e038      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	40007000 	.word	0x40007000
 8003b90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b94:	4b1b      	ldr	r3, [pc, #108]	@ (8003c04 <HAL_RCC_OscConfig+0x4ec>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d028      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d121      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d11a      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003bca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d111      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bda:	085b      	lsrs	r3, r3, #1
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d107      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d001      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e000      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3718      	adds	r7, #24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40023800 	.word	0x40023800

08003c08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e0cc      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c1c:	4b68      	ldr	r3, [pc, #416]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d90c      	bls.n	8003c44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c2a:	4b65      	ldr	r3, [pc, #404]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c32:	4b63      	ldr	r3, [pc, #396]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d001      	beq.n	8003c44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e0b8      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d020      	beq.n	8003c92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0304 	and.w	r3, r3, #4
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d005      	beq.n	8003c68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c5c:	4b59      	ldr	r3, [pc, #356]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	4a58      	ldr	r2, [pc, #352]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c62:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003c66:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0308 	and.w	r3, r3, #8
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d005      	beq.n	8003c80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c74:	4b53      	ldr	r3, [pc, #332]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	4a52      	ldr	r2, [pc, #328]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003c7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c80:	4b50      	ldr	r3, [pc, #320]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	494d      	ldr	r1, [pc, #308]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d044      	beq.n	8003d28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d107      	bne.n	8003cb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ca6:	4b47      	ldr	r3, [pc, #284]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d119      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e07f      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d003      	beq.n	8003cc6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cc2:	2b03      	cmp	r3, #3
 8003cc4:	d107      	bne.n	8003cd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cc6:	4b3f      	ldr	r3, [pc, #252]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d109      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e06f      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd6:	4b3b      	ldr	r3, [pc, #236]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e067      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ce6:	4b37      	ldr	r3, [pc, #220]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f023 0203 	bic.w	r2, r3, #3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	4934      	ldr	r1, [pc, #208]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cf8:	f7fe fce6 	bl	80026c8 <HAL_GetTick>
 8003cfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cfe:	e00a      	b.n	8003d16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d00:	f7fe fce2 	bl	80026c8 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e04f      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d16:	4b2b      	ldr	r3, [pc, #172]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 020c 	and.w	r2, r3, #12
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d1eb      	bne.n	8003d00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d28:	4b25      	ldr	r3, [pc, #148]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d20c      	bcs.n	8003d50 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d36:	4b22      	ldr	r3, [pc, #136]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	b2d2      	uxtb	r2, r2
 8003d3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d3e:	4b20      	ldr	r3, [pc, #128]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d001      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e032      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d008      	beq.n	8003d6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d5c:	4b19      	ldr	r3, [pc, #100]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	4916      	ldr	r1, [pc, #88]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0308 	and.w	r3, r3, #8
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d009      	beq.n	8003d8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d7a:	4b12      	ldr	r3, [pc, #72]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	490e      	ldr	r1, [pc, #56]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d8e:	f000 f821 	bl	8003dd4 <HAL_RCC_GetSysClockFreq>
 8003d92:	4602      	mov	r2, r0
 8003d94:	4b0b      	ldr	r3, [pc, #44]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	091b      	lsrs	r3, r3, #4
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	490a      	ldr	r1, [pc, #40]	@ (8003dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8003da0:	5ccb      	ldrb	r3, [r1, r3]
 8003da2:	fa22 f303 	lsr.w	r3, r2, r3
 8003da6:	4a09      	ldr	r2, [pc, #36]	@ (8003dcc <HAL_RCC_ClockConfig+0x1c4>)
 8003da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003daa:	4b09      	ldr	r3, [pc, #36]	@ (8003dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fe fc46 	bl	8002640 <HAL_InitTick>

  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	40023c00 	.word	0x40023c00
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	08006b0c 	.word	0x08006b0c
 8003dcc:	20000000 	.word	0x20000000
 8003dd0:	200000ac 	.word	0x200000ac

08003dd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dd8:	b094      	sub	sp, #80	@ 0x50
 8003dda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003de0:	2300      	movs	r3, #0
 8003de2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003de4:	2300      	movs	r3, #0
 8003de6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dec:	4b79      	ldr	r3, [pc, #484]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f003 030c 	and.w	r3, r3, #12
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d00d      	beq.n	8003e14 <HAL_RCC_GetSysClockFreq+0x40>
 8003df8:	2b08      	cmp	r3, #8
 8003dfa:	f200 80e1 	bhi.w	8003fc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d002      	beq.n	8003e08 <HAL_RCC_GetSysClockFreq+0x34>
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	d003      	beq.n	8003e0e <HAL_RCC_GetSysClockFreq+0x3a>
 8003e06:	e0db      	b.n	8003fc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e08:	4b73      	ldr	r3, [pc, #460]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e0a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e0c:	e0db      	b.n	8003fc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e0e:	4b73      	ldr	r3, [pc, #460]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x208>)
 8003e10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e12:	e0d8      	b.n	8003fc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e14:	4b6f      	ldr	r3, [pc, #444]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e1c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e1e:	4b6d      	ldr	r3, [pc, #436]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d063      	beq.n	8003ef2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e2a:	4b6a      	ldr	r3, [pc, #424]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	099b      	lsrs	r3, r3, #6
 8003e30:	2200      	movs	r2, #0
 8003e32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e34:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e3e:	2300      	movs	r3, #0
 8003e40:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003e46:	4622      	mov	r2, r4
 8003e48:	462b      	mov	r3, r5
 8003e4a:	f04f 0000 	mov.w	r0, #0
 8003e4e:	f04f 0100 	mov.w	r1, #0
 8003e52:	0159      	lsls	r1, r3, #5
 8003e54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e58:	0150      	lsls	r0, r2, #5
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	4621      	mov	r1, r4
 8003e60:	1a51      	subs	r1, r2, r1
 8003e62:	6139      	str	r1, [r7, #16]
 8003e64:	4629      	mov	r1, r5
 8003e66:	eb63 0301 	sbc.w	r3, r3, r1
 8003e6a:	617b      	str	r3, [r7, #20]
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	f04f 0300 	mov.w	r3, #0
 8003e74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e78:	4659      	mov	r1, fp
 8003e7a:	018b      	lsls	r3, r1, #6
 8003e7c:	4651      	mov	r1, sl
 8003e7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e82:	4651      	mov	r1, sl
 8003e84:	018a      	lsls	r2, r1, #6
 8003e86:	4651      	mov	r1, sl
 8003e88:	ebb2 0801 	subs.w	r8, r2, r1
 8003e8c:	4659      	mov	r1, fp
 8003e8e:	eb63 0901 	sbc.w	r9, r3, r1
 8003e92:	f04f 0200 	mov.w	r2, #0
 8003e96:	f04f 0300 	mov.w	r3, #0
 8003e9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ea2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ea6:	4690      	mov	r8, r2
 8003ea8:	4699      	mov	r9, r3
 8003eaa:	4623      	mov	r3, r4
 8003eac:	eb18 0303 	adds.w	r3, r8, r3
 8003eb0:	60bb      	str	r3, [r7, #8]
 8003eb2:	462b      	mov	r3, r5
 8003eb4:	eb49 0303 	adc.w	r3, r9, r3
 8003eb8:	60fb      	str	r3, [r7, #12]
 8003eba:	f04f 0200 	mov.w	r2, #0
 8003ebe:	f04f 0300 	mov.w	r3, #0
 8003ec2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ec6:	4629      	mov	r1, r5
 8003ec8:	024b      	lsls	r3, r1, #9
 8003eca:	4621      	mov	r1, r4
 8003ecc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ed0:	4621      	mov	r1, r4
 8003ed2:	024a      	lsls	r2, r1, #9
 8003ed4:	4610      	mov	r0, r2
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003eda:	2200      	movs	r2, #0
 8003edc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ede:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ee0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003ee4:	f7fc f9cc 	bl	8000280 <__aeabi_uldivmod>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	460b      	mov	r3, r1
 8003eec:	4613      	mov	r3, r2
 8003eee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ef0:	e058      	b.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ef2:	4b38      	ldr	r3, [pc, #224]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	099b      	lsrs	r3, r3, #6
 8003ef8:	2200      	movs	r2, #0
 8003efa:	4618      	mov	r0, r3
 8003efc:	4611      	mov	r1, r2
 8003efe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f02:	623b      	str	r3, [r7, #32]
 8003f04:	2300      	movs	r3, #0
 8003f06:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f0c:	4642      	mov	r2, r8
 8003f0e:	464b      	mov	r3, r9
 8003f10:	f04f 0000 	mov.w	r0, #0
 8003f14:	f04f 0100 	mov.w	r1, #0
 8003f18:	0159      	lsls	r1, r3, #5
 8003f1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f1e:	0150      	lsls	r0, r2, #5
 8003f20:	4602      	mov	r2, r0
 8003f22:	460b      	mov	r3, r1
 8003f24:	4641      	mov	r1, r8
 8003f26:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f2a:	4649      	mov	r1, r9
 8003f2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f30:	f04f 0200 	mov.w	r2, #0
 8003f34:	f04f 0300 	mov.w	r3, #0
 8003f38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f44:	ebb2 040a 	subs.w	r4, r2, sl
 8003f48:	eb63 050b 	sbc.w	r5, r3, fp
 8003f4c:	f04f 0200 	mov.w	r2, #0
 8003f50:	f04f 0300 	mov.w	r3, #0
 8003f54:	00eb      	lsls	r3, r5, #3
 8003f56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f5a:	00e2      	lsls	r2, r4, #3
 8003f5c:	4614      	mov	r4, r2
 8003f5e:	461d      	mov	r5, r3
 8003f60:	4643      	mov	r3, r8
 8003f62:	18e3      	adds	r3, r4, r3
 8003f64:	603b      	str	r3, [r7, #0]
 8003f66:	464b      	mov	r3, r9
 8003f68:	eb45 0303 	adc.w	r3, r5, r3
 8003f6c:	607b      	str	r3, [r7, #4]
 8003f6e:	f04f 0200 	mov.w	r2, #0
 8003f72:	f04f 0300 	mov.w	r3, #0
 8003f76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f7a:	4629      	mov	r1, r5
 8003f7c:	028b      	lsls	r3, r1, #10
 8003f7e:	4621      	mov	r1, r4
 8003f80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f84:	4621      	mov	r1, r4
 8003f86:	028a      	lsls	r2, r1, #10
 8003f88:	4610      	mov	r0, r2
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f8e:	2200      	movs	r2, #0
 8003f90:	61bb      	str	r3, [r7, #24]
 8003f92:	61fa      	str	r2, [r7, #28]
 8003f94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f98:	f7fc f972 	bl	8000280 <__aeabi_uldivmod>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	0c1b      	lsrs	r3, r3, #16
 8003faa:	f003 0303 	and.w	r3, r3, #3
 8003fae:	3301      	adds	r3, #1
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003fb4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003fb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fbc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003fbe:	e002      	b.n	8003fc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fc0:	4b05      	ldr	r3, [pc, #20]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003fc2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003fc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3750      	adds	r7, #80	@ 0x50
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fd2:	bf00      	nop
 8003fd4:	40023800 	.word	0x40023800
 8003fd8:	00f42400 	.word	0x00f42400
 8003fdc:	007a1200 	.word	0x007a1200

08003fe0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fe4:	4b03      	ldr	r3, [pc, #12]	@ (8003ff4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	20000000 	.word	0x20000000

08003ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ffc:	f7ff fff0 	bl	8003fe0 <HAL_RCC_GetHCLKFreq>
 8004000:	4602      	mov	r2, r0
 8004002:	4b05      	ldr	r3, [pc, #20]	@ (8004018 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	0a9b      	lsrs	r3, r3, #10
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	4903      	ldr	r1, [pc, #12]	@ (800401c <HAL_RCC_GetPCLK1Freq+0x24>)
 800400e:	5ccb      	ldrb	r3, [r1, r3]
 8004010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004014:	4618      	mov	r0, r3
 8004016:	bd80      	pop	{r7, pc}
 8004018:	40023800 	.word	0x40023800
 800401c:	08006b1c 	.word	0x08006b1c

08004020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004024:	f7ff ffdc 	bl	8003fe0 <HAL_RCC_GetHCLKFreq>
 8004028:	4602      	mov	r2, r0
 800402a:	4b05      	ldr	r3, [pc, #20]	@ (8004040 <HAL_RCC_GetPCLK2Freq+0x20>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	0b5b      	lsrs	r3, r3, #13
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	4903      	ldr	r1, [pc, #12]	@ (8004044 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004036:	5ccb      	ldrb	r3, [r1, r3]
 8004038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800403c:	4618      	mov	r0, r3
 800403e:	bd80      	pop	{r7, pc}
 8004040:	40023800 	.word	0x40023800
 8004044:	08006b1c 	.word	0x08006b1c

08004048 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e041      	b.n	80040de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d106      	bne.n	8004074 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7fc fef8 	bl	8000e64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2202      	movs	r2, #2
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3304      	adds	r3, #4
 8004084:	4619      	mov	r1, r3
 8004086:	4610      	mov	r0, r2
 8004088:	f000 fd22 	bl	8004ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
	...

080040e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d001      	beq.n	8004100 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e03c      	b.n	800417a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2202      	movs	r2, #2
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a1e      	ldr	r2, [pc, #120]	@ (8004188 <HAL_TIM_Base_Start+0xa0>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d018      	beq.n	8004144 <HAL_TIM_Base_Start+0x5c>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800411a:	d013      	beq.n	8004144 <HAL_TIM_Base_Start+0x5c>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a1a      	ldr	r2, [pc, #104]	@ (800418c <HAL_TIM_Base_Start+0xa4>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d00e      	beq.n	8004144 <HAL_TIM_Base_Start+0x5c>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a19      	ldr	r2, [pc, #100]	@ (8004190 <HAL_TIM_Base_Start+0xa8>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d009      	beq.n	8004144 <HAL_TIM_Base_Start+0x5c>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a17      	ldr	r2, [pc, #92]	@ (8004194 <HAL_TIM_Base_Start+0xac>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d004      	beq.n	8004144 <HAL_TIM_Base_Start+0x5c>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a16      	ldr	r2, [pc, #88]	@ (8004198 <HAL_TIM_Base_Start+0xb0>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d111      	bne.n	8004168 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f003 0307 	and.w	r3, r3, #7
 800414e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2b06      	cmp	r3, #6
 8004154:	d010      	beq.n	8004178 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f042 0201 	orr.w	r2, r2, #1
 8004164:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004166:	e007      	b.n	8004178 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 0201 	orr.w	r2, r2, #1
 8004176:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	40010000 	.word	0x40010000
 800418c:	40000400 	.word	0x40000400
 8004190:	40000800 	.word	0x40000800
 8004194:	40000c00 	.word	0x40000c00
 8004198:	40014000 	.word	0x40014000

0800419c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6a1a      	ldr	r2, [r3, #32]
 80041aa:	f241 1311 	movw	r3, #4369	@ 0x1111
 80041ae:	4013      	ands	r3, r2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10f      	bne.n	80041d4 <HAL_TIM_Base_Stop+0x38>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6a1a      	ldr	r2, [r3, #32]
 80041ba:	f240 4344 	movw	r3, #1092	@ 0x444
 80041be:	4013      	ands	r3, r2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d107      	bne.n	80041d4 <HAL_TIM_Base_Stop+0x38>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f022 0201 	bic.w	r2, r2, #1
 80041d2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
	...

080041ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d001      	beq.n	8004204 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e044      	b.n	800428e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2202      	movs	r2, #2
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f042 0201 	orr.w	r2, r2, #1
 800421a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a1e      	ldr	r2, [pc, #120]	@ (800429c <HAL_TIM_Base_Start_IT+0xb0>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d018      	beq.n	8004258 <HAL_TIM_Base_Start_IT+0x6c>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800422e:	d013      	beq.n	8004258 <HAL_TIM_Base_Start_IT+0x6c>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a1a      	ldr	r2, [pc, #104]	@ (80042a0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d00e      	beq.n	8004258 <HAL_TIM_Base_Start_IT+0x6c>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a19      	ldr	r2, [pc, #100]	@ (80042a4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d009      	beq.n	8004258 <HAL_TIM_Base_Start_IT+0x6c>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a17      	ldr	r2, [pc, #92]	@ (80042a8 <HAL_TIM_Base_Start_IT+0xbc>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d004      	beq.n	8004258 <HAL_TIM_Base_Start_IT+0x6c>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a16      	ldr	r2, [pc, #88]	@ (80042ac <HAL_TIM_Base_Start_IT+0xc0>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d111      	bne.n	800427c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 0307 	and.w	r3, r3, #7
 8004262:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2b06      	cmp	r3, #6
 8004268:	d010      	beq.n	800428c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f042 0201 	orr.w	r2, r2, #1
 8004278:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800427a:	e007      	b.n	800428c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 0201 	orr.w	r2, r2, #1
 800428a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	40010000 	.word	0x40010000
 80042a0:	40000400 	.word	0x40000400
 80042a4:	40000800 	.word	0x40000800
 80042a8:	40000c00 	.word	0x40000c00
 80042ac:	40014000 	.word	0x40014000

080042b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e041      	b.n	8004346 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d106      	bne.n	80042dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f839 	bl	800434e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2202      	movs	r2, #2
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3304      	adds	r3, #4
 80042ec:	4619      	mov	r1, r3
 80042ee:	4610      	mov	r0, r2
 80042f0:	f000 fbee 	bl	8004ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3708      	adds	r7, #8
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800434e:	b480      	push	{r7}
 8004350:	b083      	sub	sp, #12
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004356:	bf00      	nop
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
	...

08004364 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d109      	bne.n	8004388 <HAL_TIM_PWM_Start+0x24>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b01      	cmp	r3, #1
 800437e:	bf14      	ite	ne
 8004380:	2301      	movne	r3, #1
 8004382:	2300      	moveq	r3, #0
 8004384:	b2db      	uxtb	r3, r3
 8004386:	e022      	b.n	80043ce <HAL_TIM_PWM_Start+0x6a>
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	2b04      	cmp	r3, #4
 800438c:	d109      	bne.n	80043a2 <HAL_TIM_PWM_Start+0x3e>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b01      	cmp	r3, #1
 8004398:	bf14      	ite	ne
 800439a:	2301      	movne	r3, #1
 800439c:	2300      	moveq	r3, #0
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	e015      	b.n	80043ce <HAL_TIM_PWM_Start+0x6a>
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	d109      	bne.n	80043bc <HAL_TIM_PWM_Start+0x58>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	bf14      	ite	ne
 80043b4:	2301      	movne	r3, #1
 80043b6:	2300      	moveq	r3, #0
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	e008      	b.n	80043ce <HAL_TIM_PWM_Start+0x6a>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	bf14      	ite	ne
 80043c8:	2301      	movne	r3, #1
 80043ca:	2300      	moveq	r3, #0
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e068      	b.n	80044a8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d104      	bne.n	80043e6 <HAL_TIM_PWM_Start+0x82>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2202      	movs	r2, #2
 80043e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043e4:	e013      	b.n	800440e <HAL_TIM_PWM_Start+0xaa>
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b04      	cmp	r3, #4
 80043ea:	d104      	bne.n	80043f6 <HAL_TIM_PWM_Start+0x92>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2202      	movs	r2, #2
 80043f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043f4:	e00b      	b.n	800440e <HAL_TIM_PWM_Start+0xaa>
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b08      	cmp	r3, #8
 80043fa:	d104      	bne.n	8004406 <HAL_TIM_PWM_Start+0xa2>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004404:	e003      	b.n	800440e <HAL_TIM_PWM_Start+0xaa>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2202      	movs	r2, #2
 800440a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2201      	movs	r2, #1
 8004414:	6839      	ldr	r1, [r7, #0]
 8004416:	4618      	mov	r0, r3
 8004418:	f000 fe06 	bl	8005028 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a23      	ldr	r2, [pc, #140]	@ (80044b0 <HAL_TIM_PWM_Start+0x14c>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d107      	bne.n	8004436 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004434:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a1d      	ldr	r2, [pc, #116]	@ (80044b0 <HAL_TIM_PWM_Start+0x14c>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d018      	beq.n	8004472 <HAL_TIM_PWM_Start+0x10e>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004448:	d013      	beq.n	8004472 <HAL_TIM_PWM_Start+0x10e>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a19      	ldr	r2, [pc, #100]	@ (80044b4 <HAL_TIM_PWM_Start+0x150>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d00e      	beq.n	8004472 <HAL_TIM_PWM_Start+0x10e>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a17      	ldr	r2, [pc, #92]	@ (80044b8 <HAL_TIM_PWM_Start+0x154>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d009      	beq.n	8004472 <HAL_TIM_PWM_Start+0x10e>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a16      	ldr	r2, [pc, #88]	@ (80044bc <HAL_TIM_PWM_Start+0x158>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d004      	beq.n	8004472 <HAL_TIM_PWM_Start+0x10e>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a14      	ldr	r2, [pc, #80]	@ (80044c0 <HAL_TIM_PWM_Start+0x15c>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d111      	bne.n	8004496 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 0307 	and.w	r3, r3, #7
 800447c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2b06      	cmp	r3, #6
 8004482:	d010      	beq.n	80044a6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f042 0201 	orr.w	r2, r2, #1
 8004492:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004494:	e007      	b.n	80044a6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f042 0201 	orr.w	r2, r2, #1
 80044a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	40010000 	.word	0x40010000
 80044b4:	40000400 	.word	0x40000400
 80044b8:	40000800 	.word	0x40000800
 80044bc:	40000c00 	.word	0x40000c00
 80044c0:	40014000 	.word	0x40014000

080044c4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2200      	movs	r2, #0
 80044d4:	6839      	ldr	r1, [r7, #0]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 fda6 	bl	8005028 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a29      	ldr	r2, [pc, #164]	@ (8004588 <HAL_TIM_PWM_Stop+0xc4>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d117      	bne.n	8004516 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	6a1a      	ldr	r2, [r3, #32]
 80044ec:	f241 1311 	movw	r3, #4369	@ 0x1111
 80044f0:	4013      	ands	r3, r2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10f      	bne.n	8004516 <HAL_TIM_PWM_Stop+0x52>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6a1a      	ldr	r2, [r3, #32]
 80044fc:	f240 4344 	movw	r3, #1092	@ 0x444
 8004500:	4013      	ands	r3, r2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d107      	bne.n	8004516 <HAL_TIM_PWM_Stop+0x52>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004514:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6a1a      	ldr	r2, [r3, #32]
 800451c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004520:	4013      	ands	r3, r2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10f      	bne.n	8004546 <HAL_TIM_PWM_Stop+0x82>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6a1a      	ldr	r2, [r3, #32]
 800452c:	f240 4344 	movw	r3, #1092	@ 0x444
 8004530:	4013      	ands	r3, r2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d107      	bne.n	8004546 <HAL_TIM_PWM_Stop+0x82>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f022 0201 	bic.w	r2, r2, #1
 8004544:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d104      	bne.n	8004556 <HAL_TIM_PWM_Stop+0x92>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004554:	e013      	b.n	800457e <HAL_TIM_PWM_Stop+0xba>
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	2b04      	cmp	r3, #4
 800455a:	d104      	bne.n	8004566 <HAL_TIM_PWM_Stop+0xa2>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004564:	e00b      	b.n	800457e <HAL_TIM_PWM_Stop+0xba>
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	2b08      	cmp	r3, #8
 800456a:	d104      	bne.n	8004576 <HAL_TIM_PWM_Stop+0xb2>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004574:	e003      	b.n	800457e <HAL_TIM_PWM_Stop+0xba>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3708      	adds	r7, #8
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	40010000 	.word	0x40010000

0800458c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d020      	beq.n	80045f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d01b      	beq.n	80045f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f06f 0202 	mvn.w	r2, #2
 80045c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	f003 0303 	and.w	r3, r3, #3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 fa5b 	bl	8004a92 <HAL_TIM_IC_CaptureCallback>
 80045dc:	e005      	b.n	80045ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 fa4d 	bl	8004a7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 fa5e 	bl	8004aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	f003 0304 	and.w	r3, r3, #4
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d020      	beq.n	800463c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b00      	cmp	r3, #0
 8004602:	d01b      	beq.n	800463c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f06f 0204 	mvn.w	r2, #4
 800460c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2202      	movs	r2, #2
 8004612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 fa35 	bl	8004a92 <HAL_TIM_IC_CaptureCallback>
 8004628:	e005      	b.n	8004636 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 fa27 	bl	8004a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 fa38 	bl	8004aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f003 0308 	and.w	r3, r3, #8
 8004642:	2b00      	cmp	r3, #0
 8004644:	d020      	beq.n	8004688 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f003 0308 	and.w	r3, r3, #8
 800464c:	2b00      	cmp	r3, #0
 800464e:	d01b      	beq.n	8004688 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f06f 0208 	mvn.w	r2, #8
 8004658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2204      	movs	r2, #4
 800465e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	69db      	ldr	r3, [r3, #28]
 8004666:	f003 0303 	and.w	r3, r3, #3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 fa0f 	bl	8004a92 <HAL_TIM_IC_CaptureCallback>
 8004674:	e005      	b.n	8004682 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 fa01 	bl	8004a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 fa12 	bl	8004aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	f003 0310 	and.w	r3, r3, #16
 800468e:	2b00      	cmp	r3, #0
 8004690:	d020      	beq.n	80046d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f003 0310 	and.w	r3, r3, #16
 8004698:	2b00      	cmp	r3, #0
 800469a:	d01b      	beq.n	80046d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f06f 0210 	mvn.w	r2, #16
 80046a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2208      	movs	r2, #8
 80046aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f9e9 	bl	8004a92 <HAL_TIM_IC_CaptureCallback>
 80046c0:	e005      	b.n	80046ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f9db 	bl	8004a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 f9ec 	bl	8004aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00c      	beq.n	80046f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d007      	beq.n	80046f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f06f 0201 	mvn.w	r2, #1
 80046f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7fc ff34 	bl	8001560 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00c      	beq.n	800471c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004708:	2b00      	cmp	r3, #0
 800470a:	d007      	beq.n	800471c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 fd76 	bl	8005208 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00c      	beq.n	8004740 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800472c:	2b00      	cmp	r3, #0
 800472e:	d007      	beq.n	8004740 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f9bd 	bl	8004aba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	f003 0320 	and.w	r3, r3, #32
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00c      	beq.n	8004764 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f003 0320 	and.w	r3, r3, #32
 8004750:	2b00      	cmp	r3, #0
 8004752:	d007      	beq.n	8004764 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f06f 0220 	mvn.w	r2, #32
 800475c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 fd48 	bl	80051f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004764:	bf00      	nop
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004778:	2300      	movs	r3, #0
 800477a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004782:	2b01      	cmp	r3, #1
 8004784:	d101      	bne.n	800478a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004786:	2302      	movs	r3, #2
 8004788:	e0ae      	b.n	80048e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b0c      	cmp	r3, #12
 8004796:	f200 809f 	bhi.w	80048d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800479a:	a201      	add	r2, pc, #4	@ (adr r2, 80047a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800479c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a0:	080047d5 	.word	0x080047d5
 80047a4:	080048d9 	.word	0x080048d9
 80047a8:	080048d9 	.word	0x080048d9
 80047ac:	080048d9 	.word	0x080048d9
 80047b0:	08004815 	.word	0x08004815
 80047b4:	080048d9 	.word	0x080048d9
 80047b8:	080048d9 	.word	0x080048d9
 80047bc:	080048d9 	.word	0x080048d9
 80047c0:	08004857 	.word	0x08004857
 80047c4:	080048d9 	.word	0x080048d9
 80047c8:	080048d9 	.word	0x080048d9
 80047cc:	080048d9 	.word	0x080048d9
 80047d0:	08004897 	.word	0x08004897
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68b9      	ldr	r1, [r7, #8]
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 f9fe 	bl	8004bdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699a      	ldr	r2, [r3, #24]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f042 0208 	orr.w	r2, r2, #8
 80047ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	699a      	ldr	r2, [r3, #24]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0204 	bic.w	r2, r2, #4
 80047fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6999      	ldr	r1, [r3, #24]
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	691a      	ldr	r2, [r3, #16]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	430a      	orrs	r2, r1
 8004810:	619a      	str	r2, [r3, #24]
      break;
 8004812:	e064      	b.n	80048de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68b9      	ldr	r1, [r7, #8]
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fa44 	bl	8004ca8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	699a      	ldr	r2, [r3, #24]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800482e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	699a      	ldr	r2, [r3, #24]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800483e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6999      	ldr	r1, [r3, #24]
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	021a      	lsls	r2, r3, #8
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	430a      	orrs	r2, r1
 8004852:	619a      	str	r2, [r3, #24]
      break;
 8004854:	e043      	b.n	80048de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68b9      	ldr	r1, [r7, #8]
 800485c:	4618      	mov	r0, r3
 800485e:	f000 fa8f 	bl	8004d80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69da      	ldr	r2, [r3, #28]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f042 0208 	orr.w	r2, r2, #8
 8004870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	69da      	ldr	r2, [r3, #28]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 0204 	bic.w	r2, r2, #4
 8004880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	69d9      	ldr	r1, [r3, #28]
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	691a      	ldr	r2, [r3, #16]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	430a      	orrs	r2, r1
 8004892:	61da      	str	r2, [r3, #28]
      break;
 8004894:	e023      	b.n	80048de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68b9      	ldr	r1, [r7, #8]
 800489c:	4618      	mov	r0, r3
 800489e:	f000 fad9 	bl	8004e54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	69da      	ldr	r2, [r3, #28]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	69da      	ldr	r2, [r3, #28]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	69d9      	ldr	r1, [r3, #28]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	021a      	lsls	r2, r3, #8
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	61da      	str	r2, [r3, #28]
      break;
 80048d6:	e002      	b.n	80048de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	75fb      	strb	r3, [r7, #23]
      break;
 80048dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3718      	adds	r7, #24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048fa:	2300      	movs	r3, #0
 80048fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004904:	2b01      	cmp	r3, #1
 8004906:	d101      	bne.n	800490c <HAL_TIM_ConfigClockSource+0x1c>
 8004908:	2302      	movs	r3, #2
 800490a:	e0b4      	b.n	8004a76 <HAL_TIM_ConfigClockSource+0x186>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2202      	movs	r2, #2
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800492a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004932:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004944:	d03e      	beq.n	80049c4 <HAL_TIM_ConfigClockSource+0xd4>
 8004946:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800494a:	f200 8087 	bhi.w	8004a5c <HAL_TIM_ConfigClockSource+0x16c>
 800494e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004952:	f000 8086 	beq.w	8004a62 <HAL_TIM_ConfigClockSource+0x172>
 8004956:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800495a:	d87f      	bhi.n	8004a5c <HAL_TIM_ConfigClockSource+0x16c>
 800495c:	2b70      	cmp	r3, #112	@ 0x70
 800495e:	d01a      	beq.n	8004996 <HAL_TIM_ConfigClockSource+0xa6>
 8004960:	2b70      	cmp	r3, #112	@ 0x70
 8004962:	d87b      	bhi.n	8004a5c <HAL_TIM_ConfigClockSource+0x16c>
 8004964:	2b60      	cmp	r3, #96	@ 0x60
 8004966:	d050      	beq.n	8004a0a <HAL_TIM_ConfigClockSource+0x11a>
 8004968:	2b60      	cmp	r3, #96	@ 0x60
 800496a:	d877      	bhi.n	8004a5c <HAL_TIM_ConfigClockSource+0x16c>
 800496c:	2b50      	cmp	r3, #80	@ 0x50
 800496e:	d03c      	beq.n	80049ea <HAL_TIM_ConfigClockSource+0xfa>
 8004970:	2b50      	cmp	r3, #80	@ 0x50
 8004972:	d873      	bhi.n	8004a5c <HAL_TIM_ConfigClockSource+0x16c>
 8004974:	2b40      	cmp	r3, #64	@ 0x40
 8004976:	d058      	beq.n	8004a2a <HAL_TIM_ConfigClockSource+0x13a>
 8004978:	2b40      	cmp	r3, #64	@ 0x40
 800497a:	d86f      	bhi.n	8004a5c <HAL_TIM_ConfigClockSource+0x16c>
 800497c:	2b30      	cmp	r3, #48	@ 0x30
 800497e:	d064      	beq.n	8004a4a <HAL_TIM_ConfigClockSource+0x15a>
 8004980:	2b30      	cmp	r3, #48	@ 0x30
 8004982:	d86b      	bhi.n	8004a5c <HAL_TIM_ConfigClockSource+0x16c>
 8004984:	2b20      	cmp	r3, #32
 8004986:	d060      	beq.n	8004a4a <HAL_TIM_ConfigClockSource+0x15a>
 8004988:	2b20      	cmp	r3, #32
 800498a:	d867      	bhi.n	8004a5c <HAL_TIM_ConfigClockSource+0x16c>
 800498c:	2b00      	cmp	r3, #0
 800498e:	d05c      	beq.n	8004a4a <HAL_TIM_ConfigClockSource+0x15a>
 8004990:	2b10      	cmp	r3, #16
 8004992:	d05a      	beq.n	8004a4a <HAL_TIM_ConfigClockSource+0x15a>
 8004994:	e062      	b.n	8004a5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049a6:	f000 fb1f 	bl	8004fe8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80049b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	609a      	str	r2, [r3, #8]
      break;
 80049c2:	e04f      	b.n	8004a64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049d4:	f000 fb08 	bl	8004fe8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689a      	ldr	r2, [r3, #8]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049e6:	609a      	str	r2, [r3, #8]
      break;
 80049e8:	e03c      	b.n	8004a64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049f6:	461a      	mov	r2, r3
 80049f8:	f000 fa7c 	bl	8004ef4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2150      	movs	r1, #80	@ 0x50
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 fad5 	bl	8004fb2 <TIM_ITRx_SetConfig>
      break;
 8004a08:	e02c      	b.n	8004a64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a16:	461a      	mov	r2, r3
 8004a18:	f000 fa9b 	bl	8004f52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2160      	movs	r1, #96	@ 0x60
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 fac5 	bl	8004fb2 <TIM_ITRx_SetConfig>
      break;
 8004a28:	e01c      	b.n	8004a64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a36:	461a      	mov	r2, r3
 8004a38:	f000 fa5c 	bl	8004ef4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2140      	movs	r1, #64	@ 0x40
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 fab5 	bl	8004fb2 <TIM_ITRx_SetConfig>
      break;
 8004a48:	e00c      	b.n	8004a64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4619      	mov	r1, r3
 8004a54:	4610      	mov	r0, r2
 8004a56:	f000 faac 	bl	8004fb2 <TIM_ITRx_SetConfig>
      break;
 8004a5a:	e003      	b.n	8004a64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a60:	e000      	b.n	8004a64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a86:	bf00      	nop
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b083      	sub	sp, #12
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a9a:	bf00      	nop
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b083      	sub	sp, #12
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004aba:	b480      	push	{r7}
 8004abc:	b083      	sub	sp, #12
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ac2:	bf00      	nop
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
	...

08004ad0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a37      	ldr	r2, [pc, #220]	@ (8004bc0 <TIM_Base_SetConfig+0xf0>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d00f      	beq.n	8004b08 <TIM_Base_SetConfig+0x38>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aee:	d00b      	beq.n	8004b08 <TIM_Base_SetConfig+0x38>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a34      	ldr	r2, [pc, #208]	@ (8004bc4 <TIM_Base_SetConfig+0xf4>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d007      	beq.n	8004b08 <TIM_Base_SetConfig+0x38>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a33      	ldr	r2, [pc, #204]	@ (8004bc8 <TIM_Base_SetConfig+0xf8>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d003      	beq.n	8004b08 <TIM_Base_SetConfig+0x38>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a32      	ldr	r2, [pc, #200]	@ (8004bcc <TIM_Base_SetConfig+0xfc>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d108      	bne.n	8004b1a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a28      	ldr	r2, [pc, #160]	@ (8004bc0 <TIM_Base_SetConfig+0xf0>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d01b      	beq.n	8004b5a <TIM_Base_SetConfig+0x8a>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b28:	d017      	beq.n	8004b5a <TIM_Base_SetConfig+0x8a>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a25      	ldr	r2, [pc, #148]	@ (8004bc4 <TIM_Base_SetConfig+0xf4>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d013      	beq.n	8004b5a <TIM_Base_SetConfig+0x8a>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a24      	ldr	r2, [pc, #144]	@ (8004bc8 <TIM_Base_SetConfig+0xf8>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d00f      	beq.n	8004b5a <TIM_Base_SetConfig+0x8a>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a23      	ldr	r2, [pc, #140]	@ (8004bcc <TIM_Base_SetConfig+0xfc>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d00b      	beq.n	8004b5a <TIM_Base_SetConfig+0x8a>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a22      	ldr	r2, [pc, #136]	@ (8004bd0 <TIM_Base_SetConfig+0x100>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d007      	beq.n	8004b5a <TIM_Base_SetConfig+0x8a>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a21      	ldr	r2, [pc, #132]	@ (8004bd4 <TIM_Base_SetConfig+0x104>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d003      	beq.n	8004b5a <TIM_Base_SetConfig+0x8a>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a20      	ldr	r2, [pc, #128]	@ (8004bd8 <TIM_Base_SetConfig+0x108>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d108      	bne.n	8004b6c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	689a      	ldr	r2, [r3, #8]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a0c      	ldr	r2, [pc, #48]	@ (8004bc0 <TIM_Base_SetConfig+0xf0>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d103      	bne.n	8004b9a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	691a      	ldr	r2, [r3, #16]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f043 0204 	orr.w	r2, r3, #4
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	601a      	str	r2, [r3, #0]
}
 8004bb2:	bf00      	nop
 8004bb4:	3714      	adds	r7, #20
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	40010000 	.word	0x40010000
 8004bc4:	40000400 	.word	0x40000400
 8004bc8:	40000800 	.word	0x40000800
 8004bcc:	40000c00 	.word	0x40000c00
 8004bd0:	40014000 	.word	0x40014000
 8004bd4:	40014400 	.word	0x40014400
 8004bd8:	40014800 	.word	0x40014800

08004bdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b087      	sub	sp, #28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	f023 0201 	bic.w	r2, r3, #1
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 0303 	bic.w	r3, r3, #3
 8004c12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f023 0302 	bic.w	r3, r3, #2
 8004c24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a1c      	ldr	r2, [pc, #112]	@ (8004ca4 <TIM_OC1_SetConfig+0xc8>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d10c      	bne.n	8004c52 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	f023 0308 	bic.w	r3, r3, #8
 8004c3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f023 0304 	bic.w	r3, r3, #4
 8004c50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a13      	ldr	r2, [pc, #76]	@ (8004ca4 <TIM_OC1_SetConfig+0xc8>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d111      	bne.n	8004c7e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	621a      	str	r2, [r3, #32]
}
 8004c98:	bf00      	nop
 8004c9a:	371c      	adds	r7, #28
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr
 8004ca4:	40010000 	.word	0x40010000

08004ca8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b087      	sub	sp, #28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a1b      	ldr	r3, [r3, #32]
 8004cbc:	f023 0210 	bic.w	r2, r3, #16
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	021b      	lsls	r3, r3, #8
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	f023 0320 	bic.w	r3, r3, #32
 8004cf2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	011b      	lsls	r3, r3, #4
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a1e      	ldr	r2, [pc, #120]	@ (8004d7c <TIM_OC2_SetConfig+0xd4>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d10d      	bne.n	8004d24 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	011b      	lsls	r3, r3, #4
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a15      	ldr	r2, [pc, #84]	@ (8004d7c <TIM_OC2_SetConfig+0xd4>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d113      	bne.n	8004d54 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	695b      	ldr	r3, [r3, #20]
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	621a      	str	r2, [r3, #32]
}
 8004d6e:	bf00      	nop
 8004d70:	371c      	adds	r7, #28
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	40010000 	.word	0x40010000

08004d80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b087      	sub	sp, #28
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f023 0303 	bic.w	r3, r3, #3
 8004db6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004dc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	021b      	lsls	r3, r3, #8
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a1d      	ldr	r2, [pc, #116]	@ (8004e50 <TIM_OC3_SetConfig+0xd0>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d10d      	bne.n	8004dfa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004de4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	021b      	lsls	r3, r3, #8
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004df8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a14      	ldr	r2, [pc, #80]	@ (8004e50 <TIM_OC3_SetConfig+0xd0>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d113      	bne.n	8004e2a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	011b      	lsls	r3, r3, #4
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	011b      	lsls	r3, r3, #4
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685a      	ldr	r2, [r3, #4]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	621a      	str	r2, [r3, #32]
}
 8004e44:	bf00      	nop
 8004e46:	371c      	adds	r7, #28
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr
 8004e50:	40010000 	.word	0x40010000

08004e54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b087      	sub	sp, #28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	69db      	ldr	r3, [r3, #28]
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	021b      	lsls	r3, r3, #8
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	031b      	lsls	r3, r3, #12
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a10      	ldr	r2, [pc, #64]	@ (8004ef0 <TIM_OC4_SetConfig+0x9c>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d109      	bne.n	8004ec8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004eba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	695b      	ldr	r3, [r3, #20]
 8004ec0:	019b      	lsls	r3, r3, #6
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	685a      	ldr	r2, [r3, #4]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	621a      	str	r2, [r3, #32]
}
 8004ee2:	bf00      	nop
 8004ee4:	371c      	adds	r7, #28
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	40010000 	.word	0x40010000

08004ef4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b087      	sub	sp, #28
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	f023 0201 	bic.w	r2, r3, #1
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	011b      	lsls	r3, r3, #4
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f023 030a 	bic.w	r3, r3, #10
 8004f30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	621a      	str	r2, [r3, #32]
}
 8004f46:	bf00      	nop
 8004f48:	371c      	adds	r7, #28
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f52:	b480      	push	{r7}
 8004f54:	b087      	sub	sp, #28
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	60f8      	str	r0, [r7, #12]
 8004f5a:	60b9      	str	r1, [r7, #8]
 8004f5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	f023 0210 	bic.w	r2, r3, #16
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	031b      	lsls	r3, r3, #12
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004f8e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	011b      	lsls	r3, r3, #4
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	621a      	str	r2, [r3, #32]
}
 8004fa6:	bf00      	nop
 8004fa8:	371c      	adds	r7, #28
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b085      	sub	sp, #20
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
 8004fba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fca:	683a      	ldr	r2, [r7, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	f043 0307 	orr.w	r3, r3, #7
 8004fd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	609a      	str	r2, [r3, #8]
}
 8004fdc:	bf00      	nop
 8004fde:	3714      	adds	r7, #20
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b087      	sub	sp, #28
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
 8004ff4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005002:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	021a      	lsls	r2, r3, #8
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	431a      	orrs	r2, r3
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	4313      	orrs	r3, r2
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	4313      	orrs	r3, r2
 8005014:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	609a      	str	r2, [r3, #8]
}
 800501c:	bf00      	nop
 800501e:	371c      	adds	r7, #28
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005028:	b480      	push	{r7}
 800502a:	b087      	sub	sp, #28
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	f003 031f 	and.w	r3, r3, #31
 800503a:	2201      	movs	r2, #1
 800503c:	fa02 f303 	lsl.w	r3, r2, r3
 8005040:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6a1a      	ldr	r2, [r3, #32]
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	43db      	mvns	r3, r3
 800504a:	401a      	ands	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6a1a      	ldr	r2, [r3, #32]
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	f003 031f 	and.w	r3, r3, #31
 800505a:	6879      	ldr	r1, [r7, #4]
 800505c:	fa01 f303 	lsl.w	r3, r1, r3
 8005060:	431a      	orrs	r2, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	621a      	str	r2, [r3, #32]
}
 8005066:	bf00      	nop
 8005068:	371c      	adds	r7, #28
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
	...

08005074 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005084:	2b01      	cmp	r3, #1
 8005086:	d101      	bne.n	800508c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005088:	2302      	movs	r3, #2
 800508a:	e050      	b.n	800512e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2202      	movs	r2, #2
 8005098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a1c      	ldr	r2, [pc, #112]	@ (800513c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d018      	beq.n	8005102 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050d8:	d013      	beq.n	8005102 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a18      	ldr	r2, [pc, #96]	@ (8005140 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d00e      	beq.n	8005102 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a16      	ldr	r2, [pc, #88]	@ (8005144 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d009      	beq.n	8005102 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a15      	ldr	r2, [pc, #84]	@ (8005148 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d004      	beq.n	8005102 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a13      	ldr	r2, [pc, #76]	@ (800514c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d10c      	bne.n	800511c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005108:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	4313      	orrs	r3, r2
 8005112:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	40010000 	.word	0x40010000
 8005140:	40000400 	.word	0x40000400
 8005144:	40000800 	.word	0x40000800
 8005148:	40000c00 	.word	0x40000c00
 800514c:	40014000 	.word	0x40014000

08005150 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800515a:	2300      	movs	r3, #0
 800515c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005164:	2b01      	cmp	r3, #1
 8005166:	d101      	bne.n	800516c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005168:	2302      	movs	r3, #2
 800516a:	e03d      	b.n	80051e8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	4313      	orrs	r3, r2
 8005180:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	4313      	orrs	r3, r2
 800518e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	4313      	orrs	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	695b      	ldr	r3, [r3, #20]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3714      	adds	r7, #20
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d101      	bne.n	800522e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e042      	b.n	80052b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d106      	bne.n	8005248 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7fb ff18 	bl	8001078 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2224      	movs	r2, #36	@ 0x24
 800524c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68da      	ldr	r2, [r3, #12]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800525e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 fcef 	bl	8005c44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	691a      	ldr	r2, [r3, #16]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005274:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	695a      	ldr	r2, [r3, #20]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005284:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68da      	ldr	r2, [r3, #12]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005294:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2220      	movs	r2, #32
 80052a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2220      	movs	r2, #32
 80052a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3708      	adds	r7, #8
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	4613      	mov	r3, r2
 80052c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b20      	cmp	r3, #32
 80052d4:	d112      	bne.n	80052fc <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d002      	beq.n	80052e2 <HAL_UART_Receive_IT+0x26>
 80052dc:	88fb      	ldrh	r3, [r7, #6]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e00b      	b.n	80052fe <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80052ec:	88fb      	ldrh	r3, [r7, #6]
 80052ee:	461a      	mov	r2, r3
 80052f0:	68b9      	ldr	r1, [r7, #8]
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f000 fad2 	bl	800589c <UART_Start_Receive_IT>
 80052f8:	4603      	mov	r3, r0
 80052fa:	e000      	b.n	80052fe <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80052fc:	2302      	movs	r3, #2
  }
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
	...

08005308 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b0ba      	sub	sp, #232	@ 0xe8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800532e:	2300      	movs	r3, #0
 8005330:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005334:	2300      	movs	r3, #0
 8005336:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800533a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800533e:	f003 030f 	and.w	r3, r3, #15
 8005342:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005346:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10f      	bne.n	800536e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800534e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005352:	f003 0320 	and.w	r3, r3, #32
 8005356:	2b00      	cmp	r3, #0
 8005358:	d009      	beq.n	800536e <HAL_UART_IRQHandler+0x66>
 800535a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800535e:	f003 0320 	and.w	r3, r3, #32
 8005362:	2b00      	cmp	r3, #0
 8005364:	d003      	beq.n	800536e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 fbae 	bl	8005ac8 <UART_Receive_IT>
      return;
 800536c:	e273      	b.n	8005856 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800536e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005372:	2b00      	cmp	r3, #0
 8005374:	f000 80de 	beq.w	8005534 <HAL_UART_IRQHandler+0x22c>
 8005378:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800537c:	f003 0301 	and.w	r3, r3, #1
 8005380:	2b00      	cmp	r3, #0
 8005382:	d106      	bne.n	8005392 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005388:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800538c:	2b00      	cmp	r3, #0
 800538e:	f000 80d1 	beq.w	8005534 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00b      	beq.n	80053b6 <HAL_UART_IRQHandler+0xae>
 800539e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d005      	beq.n	80053b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ae:	f043 0201 	orr.w	r2, r3, #1
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053ba:	f003 0304 	and.w	r3, r3, #4
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00b      	beq.n	80053da <HAL_UART_IRQHandler+0xd2>
 80053c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d005      	beq.n	80053da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053d2:	f043 0202 	orr.w	r2, r3, #2
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053de:	f003 0302 	and.w	r3, r3, #2
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00b      	beq.n	80053fe <HAL_UART_IRQHandler+0xf6>
 80053e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d005      	beq.n	80053fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053f6:	f043 0204 	orr.w	r2, r3, #4
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80053fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005402:	f003 0308 	and.w	r3, r3, #8
 8005406:	2b00      	cmp	r3, #0
 8005408:	d011      	beq.n	800542e <HAL_UART_IRQHandler+0x126>
 800540a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800540e:	f003 0320 	and.w	r3, r3, #32
 8005412:	2b00      	cmp	r3, #0
 8005414:	d105      	bne.n	8005422 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005416:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b00      	cmp	r3, #0
 8005420:	d005      	beq.n	800542e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005426:	f043 0208 	orr.w	r2, r3, #8
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 820a 	beq.w	800584c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800543c:	f003 0320 	and.w	r3, r3, #32
 8005440:	2b00      	cmp	r3, #0
 8005442:	d008      	beq.n	8005456 <HAL_UART_IRQHandler+0x14e>
 8005444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005448:	f003 0320 	and.w	r3, r3, #32
 800544c:	2b00      	cmp	r3, #0
 800544e:	d002      	beq.n	8005456 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 fb39 	bl	8005ac8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	695b      	ldr	r3, [r3, #20]
 800545c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005460:	2b40      	cmp	r3, #64	@ 0x40
 8005462:	bf0c      	ite	eq
 8005464:	2301      	moveq	r3, #1
 8005466:	2300      	movne	r3, #0
 8005468:	b2db      	uxtb	r3, r3
 800546a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005472:	f003 0308 	and.w	r3, r3, #8
 8005476:	2b00      	cmp	r3, #0
 8005478:	d103      	bne.n	8005482 <HAL_UART_IRQHandler+0x17a>
 800547a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800547e:	2b00      	cmp	r3, #0
 8005480:	d04f      	beq.n	8005522 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 fa44 	bl	8005910 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005492:	2b40      	cmp	r3, #64	@ 0x40
 8005494:	d141      	bne.n	800551a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	3314      	adds	r3, #20
 800549c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80054a4:	e853 3f00 	ldrex	r3, [r3]
 80054a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80054ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80054b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	3314      	adds	r3, #20
 80054be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80054c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80054c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80054ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80054d2:	e841 2300 	strex	r3, r2, [r1]
 80054d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80054da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1d9      	bne.n	8005496 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d013      	beq.n	8005512 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ee:	4a8a      	ldr	r2, [pc, #552]	@ (8005718 <HAL_UART_IRQHandler+0x410>)
 80054f0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7fd fa97 	bl	8002a2a <HAL_DMA_Abort_IT>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d016      	beq.n	8005530 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005506:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800550c:	4610      	mov	r0, r2
 800550e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005510:	e00e      	b.n	8005530 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f9ac 	bl	8005870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005518:	e00a      	b.n	8005530 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f9a8 	bl	8005870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005520:	e006      	b.n	8005530 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f9a4 	bl	8005870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800552e:	e18d      	b.n	800584c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005530:	bf00      	nop
    return;
 8005532:	e18b      	b.n	800584c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005538:	2b01      	cmp	r3, #1
 800553a:	f040 8167 	bne.w	800580c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800553e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005542:	f003 0310 	and.w	r3, r3, #16
 8005546:	2b00      	cmp	r3, #0
 8005548:	f000 8160 	beq.w	800580c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800554c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005550:	f003 0310 	and.w	r3, r3, #16
 8005554:	2b00      	cmp	r3, #0
 8005556:	f000 8159 	beq.w	800580c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800555a:	2300      	movs	r3, #0
 800555c:	60bb      	str	r3, [r7, #8]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	60bb      	str	r3, [r7, #8]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	60bb      	str	r3, [r7, #8]
 800556e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800557a:	2b40      	cmp	r3, #64	@ 0x40
 800557c:	f040 80ce 	bne.w	800571c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800558c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005590:	2b00      	cmp	r3, #0
 8005592:	f000 80a9 	beq.w	80056e8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800559a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800559e:	429a      	cmp	r2, r3
 80055a0:	f080 80a2 	bcs.w	80056e8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80055aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055b0:	69db      	ldr	r3, [r3, #28]
 80055b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055b6:	f000 8088 	beq.w	80056ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	330c      	adds	r3, #12
 80055c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80055c8:	e853 3f00 	ldrex	r3, [r3]
 80055cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80055d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80055d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	330c      	adds	r3, #12
 80055e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80055e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80055ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80055f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80055f6:	e841 2300 	strex	r3, r2, [r1]
 80055fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80055fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1d9      	bne.n	80055ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	3314      	adds	r3, #20
 800560c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005610:	e853 3f00 	ldrex	r3, [r3]
 8005614:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005616:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005618:	f023 0301 	bic.w	r3, r3, #1
 800561c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3314      	adds	r3, #20
 8005626:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800562a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800562e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005630:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005632:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005636:	e841 2300 	strex	r3, r2, [r1]
 800563a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800563c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1e1      	bne.n	8005606 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	3314      	adds	r3, #20
 8005648:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800564c:	e853 3f00 	ldrex	r3, [r3]
 8005650:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005652:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005654:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005658:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	3314      	adds	r3, #20
 8005662:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005666:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005668:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800566c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800566e:	e841 2300 	strex	r3, r2, [r1]
 8005672:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005674:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1e3      	bne.n	8005642 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2220      	movs	r2, #32
 800567e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	330c      	adds	r3, #12
 800568e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005690:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005692:	e853 3f00 	ldrex	r3, [r3]
 8005696:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005698:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800569a:	f023 0310 	bic.w	r3, r3, #16
 800569e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	330c      	adds	r3, #12
 80056a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80056ac:	65ba      	str	r2, [r7, #88]	@ 0x58
 80056ae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80056b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80056b4:	e841 2300 	strex	r3, r2, [r1]
 80056b8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80056ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1e3      	bne.n	8005688 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7fd f940 	bl	800294a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2202      	movs	r2, #2
 80056ce:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80056d8:	b29b      	uxth	r3, r3
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	b29b      	uxth	r3, r3
 80056de:	4619      	mov	r1, r3
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 f8cf 	bl	8005884 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80056e6:	e0b3      	b.n	8005850 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80056ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80056f0:	429a      	cmp	r2, r3
 80056f2:	f040 80ad 	bne.w	8005850 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056fa:	69db      	ldr	r3, [r3, #28]
 80056fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005700:	f040 80a6 	bne.w	8005850 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2202      	movs	r2, #2
 8005708:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800570e:	4619      	mov	r1, r3
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 f8b7 	bl	8005884 <HAL_UARTEx_RxEventCallback>
      return;
 8005716:	e09b      	b.n	8005850 <HAL_UART_IRQHandler+0x548>
 8005718:	080059d7 	.word	0x080059d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005724:	b29b      	uxth	r3, r3
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005730:	b29b      	uxth	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	f000 808e 	beq.w	8005854 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005738:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800573c:	2b00      	cmp	r3, #0
 800573e:	f000 8089 	beq.w	8005854 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	330c      	adds	r3, #12
 8005748:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800574c:	e853 3f00 	ldrex	r3, [r3]
 8005750:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005754:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005758:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	330c      	adds	r3, #12
 8005762:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005766:	647a      	str	r2, [r7, #68]	@ 0x44
 8005768:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800576c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800576e:	e841 2300 	strex	r3, r2, [r1]
 8005772:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1e3      	bne.n	8005742 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	3314      	adds	r3, #20
 8005780:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005784:	e853 3f00 	ldrex	r3, [r3]
 8005788:	623b      	str	r3, [r7, #32]
   return(result);
 800578a:	6a3b      	ldr	r3, [r7, #32]
 800578c:	f023 0301 	bic.w	r3, r3, #1
 8005790:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	3314      	adds	r3, #20
 800579a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800579e:	633a      	str	r2, [r7, #48]	@ 0x30
 80057a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057a6:	e841 2300 	strex	r3, r2, [r1]
 80057aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1e3      	bne.n	800577a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2220      	movs	r2, #32
 80057b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	330c      	adds	r3, #12
 80057c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	e853 3f00 	ldrex	r3, [r3]
 80057ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f023 0310 	bic.w	r3, r3, #16
 80057d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	330c      	adds	r3, #12
 80057e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80057e4:	61fa      	str	r2, [r7, #28]
 80057e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e8:	69b9      	ldr	r1, [r7, #24]
 80057ea:	69fa      	ldr	r2, [r7, #28]
 80057ec:	e841 2300 	strex	r3, r2, [r1]
 80057f0:	617b      	str	r3, [r7, #20]
   return(result);
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1e3      	bne.n	80057c0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2202      	movs	r2, #2
 80057fc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005802:	4619      	mov	r1, r3
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 f83d 	bl	8005884 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800580a:	e023      	b.n	8005854 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800580c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005810:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005814:	2b00      	cmp	r3, #0
 8005816:	d009      	beq.n	800582c <HAL_UART_IRQHandler+0x524>
 8005818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800581c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005820:	2b00      	cmp	r3, #0
 8005822:	d003      	beq.n	800582c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 f8e7 	bl	80059f8 <UART_Transmit_IT>
    return;
 800582a:	e014      	b.n	8005856 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800582c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00e      	beq.n	8005856 <HAL_UART_IRQHandler+0x54e>
 8005838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800583c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005840:	2b00      	cmp	r3, #0
 8005842:	d008      	beq.n	8005856 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 f927 	bl	8005a98 <UART_EndTransmit_IT>
    return;
 800584a:	e004      	b.n	8005856 <HAL_UART_IRQHandler+0x54e>
    return;
 800584c:	bf00      	nop
 800584e:	e002      	b.n	8005856 <HAL_UART_IRQHandler+0x54e>
      return;
 8005850:	bf00      	nop
 8005852:	e000      	b.n	8005856 <HAL_UART_IRQHandler+0x54e>
      return;
 8005854:	bf00      	nop
  }
}
 8005856:	37e8      	adds	r7, #232	@ 0xe8
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005878:	bf00      	nop
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	460b      	mov	r3, r1
 800588e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	4613      	mov	r3, r2
 80058a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	68ba      	ldr	r2, [r7, #8]
 80058ae:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	88fa      	ldrh	r2, [r7, #6]
 80058b4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	88fa      	ldrh	r2, [r7, #6]
 80058ba:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2222      	movs	r2, #34	@ 0x22
 80058c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d007      	beq.n	80058e2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68da      	ldr	r2, [r3, #12]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058e0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	695a      	ldr	r2, [r3, #20]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f042 0201 	orr.w	r2, r2, #1
 80058f0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68da      	ldr	r2, [r3, #12]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f042 0220 	orr.w	r2, r2, #32
 8005900:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3714      	adds	r7, #20
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005910:	b480      	push	{r7}
 8005912:	b095      	sub	sp, #84	@ 0x54
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	330c      	adds	r3, #12
 800591e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005922:	e853 3f00 	ldrex	r3, [r3]
 8005926:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800592a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800592e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	330c      	adds	r3, #12
 8005936:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005938:	643a      	str	r2, [r7, #64]	@ 0x40
 800593a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800593e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005940:	e841 2300 	strex	r3, r2, [r1]
 8005944:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1e5      	bne.n	8005918 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	3314      	adds	r3, #20
 8005952:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005954:	6a3b      	ldr	r3, [r7, #32]
 8005956:	e853 3f00 	ldrex	r3, [r3]
 800595a:	61fb      	str	r3, [r7, #28]
   return(result);
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	f023 0301 	bic.w	r3, r3, #1
 8005962:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	3314      	adds	r3, #20
 800596a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800596c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800596e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005970:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005972:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005974:	e841 2300 	strex	r3, r2, [r1]
 8005978:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800597a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1e5      	bne.n	800594c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005984:	2b01      	cmp	r3, #1
 8005986:	d119      	bne.n	80059bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	330c      	adds	r3, #12
 800598e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	e853 3f00 	ldrex	r3, [r3]
 8005996:	60bb      	str	r3, [r7, #8]
   return(result);
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	f023 0310 	bic.w	r3, r3, #16
 800599e:	647b      	str	r3, [r7, #68]	@ 0x44
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	330c      	adds	r3, #12
 80059a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059a8:	61ba      	str	r2, [r7, #24]
 80059aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ac:	6979      	ldr	r1, [r7, #20]
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	e841 2300 	strex	r3, r2, [r1]
 80059b4:	613b      	str	r3, [r7, #16]
   return(result);
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1e5      	bne.n	8005988 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2220      	movs	r2, #32
 80059c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80059ca:	bf00      	nop
 80059cc:	3754      	adds	r7, #84	@ 0x54
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr

080059d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b084      	sub	sp, #16
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	f7ff ff40 	bl	8005870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059f0:	bf00      	nop
 80059f2:	3710      	adds	r7, #16
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	2b21      	cmp	r3, #33	@ 0x21
 8005a0a:	d13e      	bne.n	8005a8a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a14:	d114      	bne.n	8005a40 <UART_Transmit_IT+0x48>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d110      	bne.n	8005a40 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a1b      	ldr	r3, [r3, #32]
 8005a22:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	881b      	ldrh	r3, [r3, #0]
 8005a28:	461a      	mov	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a32:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a1b      	ldr	r3, [r3, #32]
 8005a38:	1c9a      	adds	r2, r3, #2
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	621a      	str	r2, [r3, #32]
 8005a3e:	e008      	b.n	8005a52 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	1c59      	adds	r1, r3, #1
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	6211      	str	r1, [r2, #32]
 8005a4a:	781a      	ldrb	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	4619      	mov	r1, r3
 8005a60:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10f      	bne.n	8005a86 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68da      	ldr	r2, [r3, #12]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a74:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68da      	ldr	r2, [r3, #12]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a84:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a86:	2300      	movs	r3, #0
 8005a88:	e000      	b.n	8005a8c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a8a:	2302      	movs	r3, #2
  }
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68da      	ldr	r2, [r3, #12]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005aae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2220      	movs	r2, #32
 8005ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f7ff fecf 	bl	800585c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3708      	adds	r7, #8
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b08c      	sub	sp, #48	@ 0x30
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	2b22      	cmp	r3, #34	@ 0x22
 8005ae2:	f040 80aa 	bne.w	8005c3a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aee:	d115      	bne.n	8005b1c <UART_Receive_IT+0x54>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d111      	bne.n	8005b1c <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005afc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b0e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b14:	1c9a      	adds	r2, r3, #2
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b1a:	e024      	b.n	8005b66 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b2a:	d007      	beq.n	8005b3c <UART_Receive_IT+0x74>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10a      	bne.n	8005b4a <UART_Receive_IT+0x82>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d106      	bne.n	8005b4a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	b2da      	uxtb	r2, r3
 8005b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b46:	701a      	strb	r2, [r3, #0]
 8005b48:	e008      	b.n	8005b5c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b5a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b60:	1c5a      	adds	r2, r3, #1
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	4619      	mov	r1, r3
 8005b74:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d15d      	bne.n	8005c36 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68da      	ldr	r2, [r3, #12]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f022 0220 	bic.w	r2, r2, #32
 8005b88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68da      	ldr	r2, [r3, #12]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	695a      	ldr	r2, [r3, #20]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f022 0201 	bic.w	r2, r2, #1
 8005ba8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2220      	movs	r2, #32
 8005bae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d135      	bne.n	8005c2c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	330c      	adds	r3, #12
 8005bcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	e853 3f00 	ldrex	r3, [r3]
 8005bd4:	613b      	str	r3, [r7, #16]
   return(result);
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	f023 0310 	bic.w	r3, r3, #16
 8005bdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	330c      	adds	r3, #12
 8005be4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005be6:	623a      	str	r2, [r7, #32]
 8005be8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bea:	69f9      	ldr	r1, [r7, #28]
 8005bec:	6a3a      	ldr	r2, [r7, #32]
 8005bee:	e841 2300 	strex	r3, r2, [r1]
 8005bf2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1e5      	bne.n	8005bc6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0310 	and.w	r3, r3, #16
 8005c04:	2b10      	cmp	r3, #16
 8005c06:	d10a      	bne.n	8005c1e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c08:	2300      	movs	r3, #0
 8005c0a:	60fb      	str	r3, [r7, #12]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	60fb      	str	r3, [r7, #12]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	60fb      	str	r3, [r7, #12]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005c22:	4619      	mov	r1, r3
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f7ff fe2d 	bl	8005884 <HAL_UARTEx_RxEventCallback>
 8005c2a:	e002      	b.n	8005c32 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f7fb fccb 	bl	80015c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005c32:	2300      	movs	r3, #0
 8005c34:	e002      	b.n	8005c3c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005c36:	2300      	movs	r3, #0
 8005c38:	e000      	b.n	8005c3c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005c3a:	2302      	movs	r3, #2
  }
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3730      	adds	r7, #48	@ 0x30
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c48:	b0c0      	sub	sp, #256	@ 0x100
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c60:	68d9      	ldr	r1, [r3, #12]
 8005c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	ea40 0301 	orr.w	r3, r0, r1
 8005c6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c72:	689a      	ldr	r2, [r3, #8]
 8005c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	431a      	orrs	r2, r3
 8005c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	431a      	orrs	r2, r3
 8005c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005c9c:	f021 010c 	bic.w	r1, r1, #12
 8005ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005caa:	430b      	orrs	r3, r1
 8005cac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cbe:	6999      	ldr	r1, [r3, #24]
 8005cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	ea40 0301 	orr.w	r3, r0, r1
 8005cca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	4b8f      	ldr	r3, [pc, #572]	@ (8005f10 <UART_SetConfig+0x2cc>)
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d005      	beq.n	8005ce4 <UART_SetConfig+0xa0>
 8005cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	4b8d      	ldr	r3, [pc, #564]	@ (8005f14 <UART_SetConfig+0x2d0>)
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d104      	bne.n	8005cee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ce4:	f7fe f99c 	bl	8004020 <HAL_RCC_GetPCLK2Freq>
 8005ce8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005cec:	e003      	b.n	8005cf6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005cee:	f7fe f983 	bl	8003ff8 <HAL_RCC_GetPCLK1Freq>
 8005cf2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cfa:	69db      	ldr	r3, [r3, #28]
 8005cfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d00:	f040 810c 	bne.w	8005f1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005d0e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005d12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005d16:	4622      	mov	r2, r4
 8005d18:	462b      	mov	r3, r5
 8005d1a:	1891      	adds	r1, r2, r2
 8005d1c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005d1e:	415b      	adcs	r3, r3
 8005d20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005d26:	4621      	mov	r1, r4
 8005d28:	eb12 0801 	adds.w	r8, r2, r1
 8005d2c:	4629      	mov	r1, r5
 8005d2e:	eb43 0901 	adc.w	r9, r3, r1
 8005d32:	f04f 0200 	mov.w	r2, #0
 8005d36:	f04f 0300 	mov.w	r3, #0
 8005d3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d46:	4690      	mov	r8, r2
 8005d48:	4699      	mov	r9, r3
 8005d4a:	4623      	mov	r3, r4
 8005d4c:	eb18 0303 	adds.w	r3, r8, r3
 8005d50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005d54:	462b      	mov	r3, r5
 8005d56:	eb49 0303 	adc.w	r3, r9, r3
 8005d5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005d6a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005d6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005d72:	460b      	mov	r3, r1
 8005d74:	18db      	adds	r3, r3, r3
 8005d76:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d78:	4613      	mov	r3, r2
 8005d7a:	eb42 0303 	adc.w	r3, r2, r3
 8005d7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005d84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005d88:	f7fa fa7a 	bl	8000280 <__aeabi_uldivmod>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	460b      	mov	r3, r1
 8005d90:	4b61      	ldr	r3, [pc, #388]	@ (8005f18 <UART_SetConfig+0x2d4>)
 8005d92:	fba3 2302 	umull	r2, r3, r3, r2
 8005d96:	095b      	lsrs	r3, r3, #5
 8005d98:	011c      	lsls	r4, r3, #4
 8005d9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005da4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005da8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005dac:	4642      	mov	r2, r8
 8005dae:	464b      	mov	r3, r9
 8005db0:	1891      	adds	r1, r2, r2
 8005db2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005db4:	415b      	adcs	r3, r3
 8005db6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005db8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005dbc:	4641      	mov	r1, r8
 8005dbe:	eb12 0a01 	adds.w	sl, r2, r1
 8005dc2:	4649      	mov	r1, r9
 8005dc4:	eb43 0b01 	adc.w	fp, r3, r1
 8005dc8:	f04f 0200 	mov.w	r2, #0
 8005dcc:	f04f 0300 	mov.w	r3, #0
 8005dd0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005dd4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005dd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ddc:	4692      	mov	sl, r2
 8005dde:	469b      	mov	fp, r3
 8005de0:	4643      	mov	r3, r8
 8005de2:	eb1a 0303 	adds.w	r3, sl, r3
 8005de6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005dea:	464b      	mov	r3, r9
 8005dec:	eb4b 0303 	adc.w	r3, fp, r3
 8005df0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e00:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005e04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005e08:	460b      	mov	r3, r1
 8005e0a:	18db      	adds	r3, r3, r3
 8005e0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e0e:	4613      	mov	r3, r2
 8005e10:	eb42 0303 	adc.w	r3, r2, r3
 8005e14:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005e1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005e1e:	f7fa fa2f 	bl	8000280 <__aeabi_uldivmod>
 8005e22:	4602      	mov	r2, r0
 8005e24:	460b      	mov	r3, r1
 8005e26:	4611      	mov	r1, r2
 8005e28:	4b3b      	ldr	r3, [pc, #236]	@ (8005f18 <UART_SetConfig+0x2d4>)
 8005e2a:	fba3 2301 	umull	r2, r3, r3, r1
 8005e2e:	095b      	lsrs	r3, r3, #5
 8005e30:	2264      	movs	r2, #100	@ 0x64
 8005e32:	fb02 f303 	mul.w	r3, r2, r3
 8005e36:	1acb      	subs	r3, r1, r3
 8005e38:	00db      	lsls	r3, r3, #3
 8005e3a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005e3e:	4b36      	ldr	r3, [pc, #216]	@ (8005f18 <UART_SetConfig+0x2d4>)
 8005e40:	fba3 2302 	umull	r2, r3, r3, r2
 8005e44:	095b      	lsrs	r3, r3, #5
 8005e46:	005b      	lsls	r3, r3, #1
 8005e48:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005e4c:	441c      	add	r4, r3
 8005e4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e52:	2200      	movs	r2, #0
 8005e54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e58:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005e5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005e60:	4642      	mov	r2, r8
 8005e62:	464b      	mov	r3, r9
 8005e64:	1891      	adds	r1, r2, r2
 8005e66:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005e68:	415b      	adcs	r3, r3
 8005e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005e70:	4641      	mov	r1, r8
 8005e72:	1851      	adds	r1, r2, r1
 8005e74:	6339      	str	r1, [r7, #48]	@ 0x30
 8005e76:	4649      	mov	r1, r9
 8005e78:	414b      	adcs	r3, r1
 8005e7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e7c:	f04f 0200 	mov.w	r2, #0
 8005e80:	f04f 0300 	mov.w	r3, #0
 8005e84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005e88:	4659      	mov	r1, fp
 8005e8a:	00cb      	lsls	r3, r1, #3
 8005e8c:	4651      	mov	r1, sl
 8005e8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e92:	4651      	mov	r1, sl
 8005e94:	00ca      	lsls	r2, r1, #3
 8005e96:	4610      	mov	r0, r2
 8005e98:	4619      	mov	r1, r3
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	4642      	mov	r2, r8
 8005e9e:	189b      	adds	r3, r3, r2
 8005ea0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ea4:	464b      	mov	r3, r9
 8005ea6:	460a      	mov	r2, r1
 8005ea8:	eb42 0303 	adc.w	r3, r2, r3
 8005eac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005ebc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005ec0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	18db      	adds	r3, r3, r3
 8005ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005eca:	4613      	mov	r3, r2
 8005ecc:	eb42 0303 	adc.w	r3, r2, r3
 8005ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ed2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005ed6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005eda:	f7fa f9d1 	bl	8000280 <__aeabi_uldivmod>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8005f18 <UART_SetConfig+0x2d4>)
 8005ee4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ee8:	095b      	lsrs	r3, r3, #5
 8005eea:	2164      	movs	r1, #100	@ 0x64
 8005eec:	fb01 f303 	mul.w	r3, r1, r3
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	00db      	lsls	r3, r3, #3
 8005ef4:	3332      	adds	r3, #50	@ 0x32
 8005ef6:	4a08      	ldr	r2, [pc, #32]	@ (8005f18 <UART_SetConfig+0x2d4>)
 8005ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8005efc:	095b      	lsrs	r3, r3, #5
 8005efe:	f003 0207 	and.w	r2, r3, #7
 8005f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4422      	add	r2, r4
 8005f0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f0c:	e106      	b.n	800611c <UART_SetConfig+0x4d8>
 8005f0e:	bf00      	nop
 8005f10:	40011000 	.word	0x40011000
 8005f14:	40011400 	.word	0x40011400
 8005f18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f20:	2200      	movs	r2, #0
 8005f22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005f26:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005f2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005f2e:	4642      	mov	r2, r8
 8005f30:	464b      	mov	r3, r9
 8005f32:	1891      	adds	r1, r2, r2
 8005f34:	6239      	str	r1, [r7, #32]
 8005f36:	415b      	adcs	r3, r3
 8005f38:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f3e:	4641      	mov	r1, r8
 8005f40:	1854      	adds	r4, r2, r1
 8005f42:	4649      	mov	r1, r9
 8005f44:	eb43 0501 	adc.w	r5, r3, r1
 8005f48:	f04f 0200 	mov.w	r2, #0
 8005f4c:	f04f 0300 	mov.w	r3, #0
 8005f50:	00eb      	lsls	r3, r5, #3
 8005f52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f56:	00e2      	lsls	r2, r4, #3
 8005f58:	4614      	mov	r4, r2
 8005f5a:	461d      	mov	r5, r3
 8005f5c:	4643      	mov	r3, r8
 8005f5e:	18e3      	adds	r3, r4, r3
 8005f60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005f64:	464b      	mov	r3, r9
 8005f66:	eb45 0303 	adc.w	r3, r5, r3
 8005f6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005f7a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005f7e:	f04f 0200 	mov.w	r2, #0
 8005f82:	f04f 0300 	mov.w	r3, #0
 8005f86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005f8a:	4629      	mov	r1, r5
 8005f8c:	008b      	lsls	r3, r1, #2
 8005f8e:	4621      	mov	r1, r4
 8005f90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f94:	4621      	mov	r1, r4
 8005f96:	008a      	lsls	r2, r1, #2
 8005f98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005f9c:	f7fa f970 	bl	8000280 <__aeabi_uldivmod>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	4b60      	ldr	r3, [pc, #384]	@ (8006128 <UART_SetConfig+0x4e4>)
 8005fa6:	fba3 2302 	umull	r2, r3, r3, r2
 8005faa:	095b      	lsrs	r3, r3, #5
 8005fac:	011c      	lsls	r4, r3, #4
 8005fae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005fb8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005fbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005fc0:	4642      	mov	r2, r8
 8005fc2:	464b      	mov	r3, r9
 8005fc4:	1891      	adds	r1, r2, r2
 8005fc6:	61b9      	str	r1, [r7, #24]
 8005fc8:	415b      	adcs	r3, r3
 8005fca:	61fb      	str	r3, [r7, #28]
 8005fcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fd0:	4641      	mov	r1, r8
 8005fd2:	1851      	adds	r1, r2, r1
 8005fd4:	6139      	str	r1, [r7, #16]
 8005fd6:	4649      	mov	r1, r9
 8005fd8:	414b      	adcs	r3, r1
 8005fda:	617b      	str	r3, [r7, #20]
 8005fdc:	f04f 0200 	mov.w	r2, #0
 8005fe0:	f04f 0300 	mov.w	r3, #0
 8005fe4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005fe8:	4659      	mov	r1, fp
 8005fea:	00cb      	lsls	r3, r1, #3
 8005fec:	4651      	mov	r1, sl
 8005fee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ff2:	4651      	mov	r1, sl
 8005ff4:	00ca      	lsls	r2, r1, #3
 8005ff6:	4610      	mov	r0, r2
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	4642      	mov	r2, r8
 8005ffe:	189b      	adds	r3, r3, r2
 8006000:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006004:	464b      	mov	r3, r9
 8006006:	460a      	mov	r2, r1
 8006008:	eb42 0303 	adc.w	r3, r2, r3
 800600c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	67bb      	str	r3, [r7, #120]	@ 0x78
 800601a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800601c:	f04f 0200 	mov.w	r2, #0
 8006020:	f04f 0300 	mov.w	r3, #0
 8006024:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006028:	4649      	mov	r1, r9
 800602a:	008b      	lsls	r3, r1, #2
 800602c:	4641      	mov	r1, r8
 800602e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006032:	4641      	mov	r1, r8
 8006034:	008a      	lsls	r2, r1, #2
 8006036:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800603a:	f7fa f921 	bl	8000280 <__aeabi_uldivmod>
 800603e:	4602      	mov	r2, r0
 8006040:	460b      	mov	r3, r1
 8006042:	4611      	mov	r1, r2
 8006044:	4b38      	ldr	r3, [pc, #224]	@ (8006128 <UART_SetConfig+0x4e4>)
 8006046:	fba3 2301 	umull	r2, r3, r3, r1
 800604a:	095b      	lsrs	r3, r3, #5
 800604c:	2264      	movs	r2, #100	@ 0x64
 800604e:	fb02 f303 	mul.w	r3, r2, r3
 8006052:	1acb      	subs	r3, r1, r3
 8006054:	011b      	lsls	r3, r3, #4
 8006056:	3332      	adds	r3, #50	@ 0x32
 8006058:	4a33      	ldr	r2, [pc, #204]	@ (8006128 <UART_SetConfig+0x4e4>)
 800605a:	fba2 2303 	umull	r2, r3, r2, r3
 800605e:	095b      	lsrs	r3, r3, #5
 8006060:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006064:	441c      	add	r4, r3
 8006066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800606a:	2200      	movs	r2, #0
 800606c:	673b      	str	r3, [r7, #112]	@ 0x70
 800606e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006070:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006074:	4642      	mov	r2, r8
 8006076:	464b      	mov	r3, r9
 8006078:	1891      	adds	r1, r2, r2
 800607a:	60b9      	str	r1, [r7, #8]
 800607c:	415b      	adcs	r3, r3
 800607e:	60fb      	str	r3, [r7, #12]
 8006080:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006084:	4641      	mov	r1, r8
 8006086:	1851      	adds	r1, r2, r1
 8006088:	6039      	str	r1, [r7, #0]
 800608a:	4649      	mov	r1, r9
 800608c:	414b      	adcs	r3, r1
 800608e:	607b      	str	r3, [r7, #4]
 8006090:	f04f 0200 	mov.w	r2, #0
 8006094:	f04f 0300 	mov.w	r3, #0
 8006098:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800609c:	4659      	mov	r1, fp
 800609e:	00cb      	lsls	r3, r1, #3
 80060a0:	4651      	mov	r1, sl
 80060a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060a6:	4651      	mov	r1, sl
 80060a8:	00ca      	lsls	r2, r1, #3
 80060aa:	4610      	mov	r0, r2
 80060ac:	4619      	mov	r1, r3
 80060ae:	4603      	mov	r3, r0
 80060b0:	4642      	mov	r2, r8
 80060b2:	189b      	adds	r3, r3, r2
 80060b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060b6:	464b      	mov	r3, r9
 80060b8:	460a      	mov	r2, r1
 80060ba:	eb42 0303 	adc.w	r3, r2, r3
 80060be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80060c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80060ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80060cc:	f04f 0200 	mov.w	r2, #0
 80060d0:	f04f 0300 	mov.w	r3, #0
 80060d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80060d8:	4649      	mov	r1, r9
 80060da:	008b      	lsls	r3, r1, #2
 80060dc:	4641      	mov	r1, r8
 80060de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060e2:	4641      	mov	r1, r8
 80060e4:	008a      	lsls	r2, r1, #2
 80060e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80060ea:	f7fa f8c9 	bl	8000280 <__aeabi_uldivmod>
 80060ee:	4602      	mov	r2, r0
 80060f0:	460b      	mov	r3, r1
 80060f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006128 <UART_SetConfig+0x4e4>)
 80060f4:	fba3 1302 	umull	r1, r3, r3, r2
 80060f8:	095b      	lsrs	r3, r3, #5
 80060fa:	2164      	movs	r1, #100	@ 0x64
 80060fc:	fb01 f303 	mul.w	r3, r1, r3
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	011b      	lsls	r3, r3, #4
 8006104:	3332      	adds	r3, #50	@ 0x32
 8006106:	4a08      	ldr	r2, [pc, #32]	@ (8006128 <UART_SetConfig+0x4e4>)
 8006108:	fba2 2303 	umull	r2, r3, r2, r3
 800610c:	095b      	lsrs	r3, r3, #5
 800610e:	f003 020f 	and.w	r2, r3, #15
 8006112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4422      	add	r2, r4
 800611a:	609a      	str	r2, [r3, #8]
}
 800611c:	bf00      	nop
 800611e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006122:	46bd      	mov	sp, r7
 8006124:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006128:	51eb851f 	.word	0x51eb851f

0800612c <siprintf>:
 800612c:	b40e      	push	{r1, r2, r3}
 800612e:	b510      	push	{r4, lr}
 8006130:	b09d      	sub	sp, #116	@ 0x74
 8006132:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006134:	9002      	str	r0, [sp, #8]
 8006136:	9006      	str	r0, [sp, #24]
 8006138:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800613c:	480a      	ldr	r0, [pc, #40]	@ (8006168 <siprintf+0x3c>)
 800613e:	9107      	str	r1, [sp, #28]
 8006140:	9104      	str	r1, [sp, #16]
 8006142:	490a      	ldr	r1, [pc, #40]	@ (800616c <siprintf+0x40>)
 8006144:	f853 2b04 	ldr.w	r2, [r3], #4
 8006148:	9105      	str	r1, [sp, #20]
 800614a:	2400      	movs	r4, #0
 800614c:	a902      	add	r1, sp, #8
 800614e:	6800      	ldr	r0, [r0, #0]
 8006150:	9301      	str	r3, [sp, #4]
 8006152:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006154:	f000 f994 	bl	8006480 <_svfiprintf_r>
 8006158:	9b02      	ldr	r3, [sp, #8]
 800615a:	701c      	strb	r4, [r3, #0]
 800615c:	b01d      	add	sp, #116	@ 0x74
 800615e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006162:	b003      	add	sp, #12
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	200000b4 	.word	0x200000b4
 800616c:	ffff0208 	.word	0xffff0208

08006170 <memset>:
 8006170:	4402      	add	r2, r0
 8006172:	4603      	mov	r3, r0
 8006174:	4293      	cmp	r3, r2
 8006176:	d100      	bne.n	800617a <memset+0xa>
 8006178:	4770      	bx	lr
 800617a:	f803 1b01 	strb.w	r1, [r3], #1
 800617e:	e7f9      	b.n	8006174 <memset+0x4>

08006180 <__errno>:
 8006180:	4b01      	ldr	r3, [pc, #4]	@ (8006188 <__errno+0x8>)
 8006182:	6818      	ldr	r0, [r3, #0]
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	200000b4 	.word	0x200000b4

0800618c <__libc_init_array>:
 800618c:	b570      	push	{r4, r5, r6, lr}
 800618e:	4d0d      	ldr	r5, [pc, #52]	@ (80061c4 <__libc_init_array+0x38>)
 8006190:	4c0d      	ldr	r4, [pc, #52]	@ (80061c8 <__libc_init_array+0x3c>)
 8006192:	1b64      	subs	r4, r4, r5
 8006194:	10a4      	asrs	r4, r4, #2
 8006196:	2600      	movs	r6, #0
 8006198:	42a6      	cmp	r6, r4
 800619a:	d109      	bne.n	80061b0 <__libc_init_array+0x24>
 800619c:	4d0b      	ldr	r5, [pc, #44]	@ (80061cc <__libc_init_array+0x40>)
 800619e:	4c0c      	ldr	r4, [pc, #48]	@ (80061d0 <__libc_init_array+0x44>)
 80061a0:	f000 fc64 	bl	8006a6c <_init>
 80061a4:	1b64      	subs	r4, r4, r5
 80061a6:	10a4      	asrs	r4, r4, #2
 80061a8:	2600      	movs	r6, #0
 80061aa:	42a6      	cmp	r6, r4
 80061ac:	d105      	bne.n	80061ba <__libc_init_array+0x2e>
 80061ae:	bd70      	pop	{r4, r5, r6, pc}
 80061b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80061b4:	4798      	blx	r3
 80061b6:	3601      	adds	r6, #1
 80061b8:	e7ee      	b.n	8006198 <__libc_init_array+0xc>
 80061ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80061be:	4798      	blx	r3
 80061c0:	3601      	adds	r6, #1
 80061c2:	e7f2      	b.n	80061aa <__libc_init_array+0x1e>
 80061c4:	08006b60 	.word	0x08006b60
 80061c8:	08006b60 	.word	0x08006b60
 80061cc:	08006b60 	.word	0x08006b60
 80061d0:	08006b64 	.word	0x08006b64

080061d4 <__retarget_lock_acquire_recursive>:
 80061d4:	4770      	bx	lr

080061d6 <__retarget_lock_release_recursive>:
 80061d6:	4770      	bx	lr

080061d8 <_free_r>:
 80061d8:	b538      	push	{r3, r4, r5, lr}
 80061da:	4605      	mov	r5, r0
 80061dc:	2900      	cmp	r1, #0
 80061de:	d041      	beq.n	8006264 <_free_r+0x8c>
 80061e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061e4:	1f0c      	subs	r4, r1, #4
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	bfb8      	it	lt
 80061ea:	18e4      	addlt	r4, r4, r3
 80061ec:	f000 f8e0 	bl	80063b0 <__malloc_lock>
 80061f0:	4a1d      	ldr	r2, [pc, #116]	@ (8006268 <_free_r+0x90>)
 80061f2:	6813      	ldr	r3, [r2, #0]
 80061f4:	b933      	cbnz	r3, 8006204 <_free_r+0x2c>
 80061f6:	6063      	str	r3, [r4, #4]
 80061f8:	6014      	str	r4, [r2, #0]
 80061fa:	4628      	mov	r0, r5
 80061fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006200:	f000 b8dc 	b.w	80063bc <__malloc_unlock>
 8006204:	42a3      	cmp	r3, r4
 8006206:	d908      	bls.n	800621a <_free_r+0x42>
 8006208:	6820      	ldr	r0, [r4, #0]
 800620a:	1821      	adds	r1, r4, r0
 800620c:	428b      	cmp	r3, r1
 800620e:	bf01      	itttt	eq
 8006210:	6819      	ldreq	r1, [r3, #0]
 8006212:	685b      	ldreq	r3, [r3, #4]
 8006214:	1809      	addeq	r1, r1, r0
 8006216:	6021      	streq	r1, [r4, #0]
 8006218:	e7ed      	b.n	80061f6 <_free_r+0x1e>
 800621a:	461a      	mov	r2, r3
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	b10b      	cbz	r3, 8006224 <_free_r+0x4c>
 8006220:	42a3      	cmp	r3, r4
 8006222:	d9fa      	bls.n	800621a <_free_r+0x42>
 8006224:	6811      	ldr	r1, [r2, #0]
 8006226:	1850      	adds	r0, r2, r1
 8006228:	42a0      	cmp	r0, r4
 800622a:	d10b      	bne.n	8006244 <_free_r+0x6c>
 800622c:	6820      	ldr	r0, [r4, #0]
 800622e:	4401      	add	r1, r0
 8006230:	1850      	adds	r0, r2, r1
 8006232:	4283      	cmp	r3, r0
 8006234:	6011      	str	r1, [r2, #0]
 8006236:	d1e0      	bne.n	80061fa <_free_r+0x22>
 8006238:	6818      	ldr	r0, [r3, #0]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	6053      	str	r3, [r2, #4]
 800623e:	4408      	add	r0, r1
 8006240:	6010      	str	r0, [r2, #0]
 8006242:	e7da      	b.n	80061fa <_free_r+0x22>
 8006244:	d902      	bls.n	800624c <_free_r+0x74>
 8006246:	230c      	movs	r3, #12
 8006248:	602b      	str	r3, [r5, #0]
 800624a:	e7d6      	b.n	80061fa <_free_r+0x22>
 800624c:	6820      	ldr	r0, [r4, #0]
 800624e:	1821      	adds	r1, r4, r0
 8006250:	428b      	cmp	r3, r1
 8006252:	bf04      	itt	eq
 8006254:	6819      	ldreq	r1, [r3, #0]
 8006256:	685b      	ldreq	r3, [r3, #4]
 8006258:	6063      	str	r3, [r4, #4]
 800625a:	bf04      	itt	eq
 800625c:	1809      	addeq	r1, r1, r0
 800625e:	6021      	streq	r1, [r4, #0]
 8006260:	6054      	str	r4, [r2, #4]
 8006262:	e7ca      	b.n	80061fa <_free_r+0x22>
 8006264:	bd38      	pop	{r3, r4, r5, pc}
 8006266:	bf00      	nop
 8006268:	20000524 	.word	0x20000524

0800626c <sbrk_aligned>:
 800626c:	b570      	push	{r4, r5, r6, lr}
 800626e:	4e0f      	ldr	r6, [pc, #60]	@ (80062ac <sbrk_aligned+0x40>)
 8006270:	460c      	mov	r4, r1
 8006272:	6831      	ldr	r1, [r6, #0]
 8006274:	4605      	mov	r5, r0
 8006276:	b911      	cbnz	r1, 800627e <sbrk_aligned+0x12>
 8006278:	f000 fba4 	bl	80069c4 <_sbrk_r>
 800627c:	6030      	str	r0, [r6, #0]
 800627e:	4621      	mov	r1, r4
 8006280:	4628      	mov	r0, r5
 8006282:	f000 fb9f 	bl	80069c4 <_sbrk_r>
 8006286:	1c43      	adds	r3, r0, #1
 8006288:	d103      	bne.n	8006292 <sbrk_aligned+0x26>
 800628a:	f04f 34ff 	mov.w	r4, #4294967295
 800628e:	4620      	mov	r0, r4
 8006290:	bd70      	pop	{r4, r5, r6, pc}
 8006292:	1cc4      	adds	r4, r0, #3
 8006294:	f024 0403 	bic.w	r4, r4, #3
 8006298:	42a0      	cmp	r0, r4
 800629a:	d0f8      	beq.n	800628e <sbrk_aligned+0x22>
 800629c:	1a21      	subs	r1, r4, r0
 800629e:	4628      	mov	r0, r5
 80062a0:	f000 fb90 	bl	80069c4 <_sbrk_r>
 80062a4:	3001      	adds	r0, #1
 80062a6:	d1f2      	bne.n	800628e <sbrk_aligned+0x22>
 80062a8:	e7ef      	b.n	800628a <sbrk_aligned+0x1e>
 80062aa:	bf00      	nop
 80062ac:	20000520 	.word	0x20000520

080062b0 <_malloc_r>:
 80062b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062b4:	1ccd      	adds	r5, r1, #3
 80062b6:	f025 0503 	bic.w	r5, r5, #3
 80062ba:	3508      	adds	r5, #8
 80062bc:	2d0c      	cmp	r5, #12
 80062be:	bf38      	it	cc
 80062c0:	250c      	movcc	r5, #12
 80062c2:	2d00      	cmp	r5, #0
 80062c4:	4606      	mov	r6, r0
 80062c6:	db01      	blt.n	80062cc <_malloc_r+0x1c>
 80062c8:	42a9      	cmp	r1, r5
 80062ca:	d904      	bls.n	80062d6 <_malloc_r+0x26>
 80062cc:	230c      	movs	r3, #12
 80062ce:	6033      	str	r3, [r6, #0]
 80062d0:	2000      	movs	r0, #0
 80062d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80063ac <_malloc_r+0xfc>
 80062da:	f000 f869 	bl	80063b0 <__malloc_lock>
 80062de:	f8d8 3000 	ldr.w	r3, [r8]
 80062e2:	461c      	mov	r4, r3
 80062e4:	bb44      	cbnz	r4, 8006338 <_malloc_r+0x88>
 80062e6:	4629      	mov	r1, r5
 80062e8:	4630      	mov	r0, r6
 80062ea:	f7ff ffbf 	bl	800626c <sbrk_aligned>
 80062ee:	1c43      	adds	r3, r0, #1
 80062f0:	4604      	mov	r4, r0
 80062f2:	d158      	bne.n	80063a6 <_malloc_r+0xf6>
 80062f4:	f8d8 4000 	ldr.w	r4, [r8]
 80062f8:	4627      	mov	r7, r4
 80062fa:	2f00      	cmp	r7, #0
 80062fc:	d143      	bne.n	8006386 <_malloc_r+0xd6>
 80062fe:	2c00      	cmp	r4, #0
 8006300:	d04b      	beq.n	800639a <_malloc_r+0xea>
 8006302:	6823      	ldr	r3, [r4, #0]
 8006304:	4639      	mov	r1, r7
 8006306:	4630      	mov	r0, r6
 8006308:	eb04 0903 	add.w	r9, r4, r3
 800630c:	f000 fb5a 	bl	80069c4 <_sbrk_r>
 8006310:	4581      	cmp	r9, r0
 8006312:	d142      	bne.n	800639a <_malloc_r+0xea>
 8006314:	6821      	ldr	r1, [r4, #0]
 8006316:	1a6d      	subs	r5, r5, r1
 8006318:	4629      	mov	r1, r5
 800631a:	4630      	mov	r0, r6
 800631c:	f7ff ffa6 	bl	800626c <sbrk_aligned>
 8006320:	3001      	adds	r0, #1
 8006322:	d03a      	beq.n	800639a <_malloc_r+0xea>
 8006324:	6823      	ldr	r3, [r4, #0]
 8006326:	442b      	add	r3, r5
 8006328:	6023      	str	r3, [r4, #0]
 800632a:	f8d8 3000 	ldr.w	r3, [r8]
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	bb62      	cbnz	r2, 800638c <_malloc_r+0xdc>
 8006332:	f8c8 7000 	str.w	r7, [r8]
 8006336:	e00f      	b.n	8006358 <_malloc_r+0xa8>
 8006338:	6822      	ldr	r2, [r4, #0]
 800633a:	1b52      	subs	r2, r2, r5
 800633c:	d420      	bmi.n	8006380 <_malloc_r+0xd0>
 800633e:	2a0b      	cmp	r2, #11
 8006340:	d917      	bls.n	8006372 <_malloc_r+0xc2>
 8006342:	1961      	adds	r1, r4, r5
 8006344:	42a3      	cmp	r3, r4
 8006346:	6025      	str	r5, [r4, #0]
 8006348:	bf18      	it	ne
 800634a:	6059      	strne	r1, [r3, #4]
 800634c:	6863      	ldr	r3, [r4, #4]
 800634e:	bf08      	it	eq
 8006350:	f8c8 1000 	streq.w	r1, [r8]
 8006354:	5162      	str	r2, [r4, r5]
 8006356:	604b      	str	r3, [r1, #4]
 8006358:	4630      	mov	r0, r6
 800635a:	f000 f82f 	bl	80063bc <__malloc_unlock>
 800635e:	f104 000b 	add.w	r0, r4, #11
 8006362:	1d23      	adds	r3, r4, #4
 8006364:	f020 0007 	bic.w	r0, r0, #7
 8006368:	1ac2      	subs	r2, r0, r3
 800636a:	bf1c      	itt	ne
 800636c:	1a1b      	subne	r3, r3, r0
 800636e:	50a3      	strne	r3, [r4, r2]
 8006370:	e7af      	b.n	80062d2 <_malloc_r+0x22>
 8006372:	6862      	ldr	r2, [r4, #4]
 8006374:	42a3      	cmp	r3, r4
 8006376:	bf0c      	ite	eq
 8006378:	f8c8 2000 	streq.w	r2, [r8]
 800637c:	605a      	strne	r2, [r3, #4]
 800637e:	e7eb      	b.n	8006358 <_malloc_r+0xa8>
 8006380:	4623      	mov	r3, r4
 8006382:	6864      	ldr	r4, [r4, #4]
 8006384:	e7ae      	b.n	80062e4 <_malloc_r+0x34>
 8006386:	463c      	mov	r4, r7
 8006388:	687f      	ldr	r7, [r7, #4]
 800638a:	e7b6      	b.n	80062fa <_malloc_r+0x4a>
 800638c:	461a      	mov	r2, r3
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	42a3      	cmp	r3, r4
 8006392:	d1fb      	bne.n	800638c <_malloc_r+0xdc>
 8006394:	2300      	movs	r3, #0
 8006396:	6053      	str	r3, [r2, #4]
 8006398:	e7de      	b.n	8006358 <_malloc_r+0xa8>
 800639a:	230c      	movs	r3, #12
 800639c:	6033      	str	r3, [r6, #0]
 800639e:	4630      	mov	r0, r6
 80063a0:	f000 f80c 	bl	80063bc <__malloc_unlock>
 80063a4:	e794      	b.n	80062d0 <_malloc_r+0x20>
 80063a6:	6005      	str	r5, [r0, #0]
 80063a8:	e7d6      	b.n	8006358 <_malloc_r+0xa8>
 80063aa:	bf00      	nop
 80063ac:	20000524 	.word	0x20000524

080063b0 <__malloc_lock>:
 80063b0:	4801      	ldr	r0, [pc, #4]	@ (80063b8 <__malloc_lock+0x8>)
 80063b2:	f7ff bf0f 	b.w	80061d4 <__retarget_lock_acquire_recursive>
 80063b6:	bf00      	nop
 80063b8:	2000051c 	.word	0x2000051c

080063bc <__malloc_unlock>:
 80063bc:	4801      	ldr	r0, [pc, #4]	@ (80063c4 <__malloc_unlock+0x8>)
 80063be:	f7ff bf0a 	b.w	80061d6 <__retarget_lock_release_recursive>
 80063c2:	bf00      	nop
 80063c4:	2000051c 	.word	0x2000051c

080063c8 <__ssputs_r>:
 80063c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063cc:	688e      	ldr	r6, [r1, #8]
 80063ce:	461f      	mov	r7, r3
 80063d0:	42be      	cmp	r6, r7
 80063d2:	680b      	ldr	r3, [r1, #0]
 80063d4:	4682      	mov	sl, r0
 80063d6:	460c      	mov	r4, r1
 80063d8:	4690      	mov	r8, r2
 80063da:	d82d      	bhi.n	8006438 <__ssputs_r+0x70>
 80063dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80063e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80063e4:	d026      	beq.n	8006434 <__ssputs_r+0x6c>
 80063e6:	6965      	ldr	r5, [r4, #20]
 80063e8:	6909      	ldr	r1, [r1, #16]
 80063ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063ee:	eba3 0901 	sub.w	r9, r3, r1
 80063f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80063f6:	1c7b      	adds	r3, r7, #1
 80063f8:	444b      	add	r3, r9
 80063fa:	106d      	asrs	r5, r5, #1
 80063fc:	429d      	cmp	r5, r3
 80063fe:	bf38      	it	cc
 8006400:	461d      	movcc	r5, r3
 8006402:	0553      	lsls	r3, r2, #21
 8006404:	d527      	bpl.n	8006456 <__ssputs_r+0x8e>
 8006406:	4629      	mov	r1, r5
 8006408:	f7ff ff52 	bl	80062b0 <_malloc_r>
 800640c:	4606      	mov	r6, r0
 800640e:	b360      	cbz	r0, 800646a <__ssputs_r+0xa2>
 8006410:	6921      	ldr	r1, [r4, #16]
 8006412:	464a      	mov	r2, r9
 8006414:	f000 fae6 	bl	80069e4 <memcpy>
 8006418:	89a3      	ldrh	r3, [r4, #12]
 800641a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800641e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006422:	81a3      	strh	r3, [r4, #12]
 8006424:	6126      	str	r6, [r4, #16]
 8006426:	6165      	str	r5, [r4, #20]
 8006428:	444e      	add	r6, r9
 800642a:	eba5 0509 	sub.w	r5, r5, r9
 800642e:	6026      	str	r6, [r4, #0]
 8006430:	60a5      	str	r5, [r4, #8]
 8006432:	463e      	mov	r6, r7
 8006434:	42be      	cmp	r6, r7
 8006436:	d900      	bls.n	800643a <__ssputs_r+0x72>
 8006438:	463e      	mov	r6, r7
 800643a:	6820      	ldr	r0, [r4, #0]
 800643c:	4632      	mov	r2, r6
 800643e:	4641      	mov	r1, r8
 8006440:	f000 faa6 	bl	8006990 <memmove>
 8006444:	68a3      	ldr	r3, [r4, #8]
 8006446:	1b9b      	subs	r3, r3, r6
 8006448:	60a3      	str	r3, [r4, #8]
 800644a:	6823      	ldr	r3, [r4, #0]
 800644c:	4433      	add	r3, r6
 800644e:	6023      	str	r3, [r4, #0]
 8006450:	2000      	movs	r0, #0
 8006452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006456:	462a      	mov	r2, r5
 8006458:	f000 fad2 	bl	8006a00 <_realloc_r>
 800645c:	4606      	mov	r6, r0
 800645e:	2800      	cmp	r0, #0
 8006460:	d1e0      	bne.n	8006424 <__ssputs_r+0x5c>
 8006462:	6921      	ldr	r1, [r4, #16]
 8006464:	4650      	mov	r0, sl
 8006466:	f7ff feb7 	bl	80061d8 <_free_r>
 800646a:	230c      	movs	r3, #12
 800646c:	f8ca 3000 	str.w	r3, [sl]
 8006470:	89a3      	ldrh	r3, [r4, #12]
 8006472:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006476:	81a3      	strh	r3, [r4, #12]
 8006478:	f04f 30ff 	mov.w	r0, #4294967295
 800647c:	e7e9      	b.n	8006452 <__ssputs_r+0x8a>
	...

08006480 <_svfiprintf_r>:
 8006480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006484:	4698      	mov	r8, r3
 8006486:	898b      	ldrh	r3, [r1, #12]
 8006488:	061b      	lsls	r3, r3, #24
 800648a:	b09d      	sub	sp, #116	@ 0x74
 800648c:	4607      	mov	r7, r0
 800648e:	460d      	mov	r5, r1
 8006490:	4614      	mov	r4, r2
 8006492:	d510      	bpl.n	80064b6 <_svfiprintf_r+0x36>
 8006494:	690b      	ldr	r3, [r1, #16]
 8006496:	b973      	cbnz	r3, 80064b6 <_svfiprintf_r+0x36>
 8006498:	2140      	movs	r1, #64	@ 0x40
 800649a:	f7ff ff09 	bl	80062b0 <_malloc_r>
 800649e:	6028      	str	r0, [r5, #0]
 80064a0:	6128      	str	r0, [r5, #16]
 80064a2:	b930      	cbnz	r0, 80064b2 <_svfiprintf_r+0x32>
 80064a4:	230c      	movs	r3, #12
 80064a6:	603b      	str	r3, [r7, #0]
 80064a8:	f04f 30ff 	mov.w	r0, #4294967295
 80064ac:	b01d      	add	sp, #116	@ 0x74
 80064ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064b2:	2340      	movs	r3, #64	@ 0x40
 80064b4:	616b      	str	r3, [r5, #20]
 80064b6:	2300      	movs	r3, #0
 80064b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80064ba:	2320      	movs	r3, #32
 80064bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80064c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80064c4:	2330      	movs	r3, #48	@ 0x30
 80064c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006664 <_svfiprintf_r+0x1e4>
 80064ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80064ce:	f04f 0901 	mov.w	r9, #1
 80064d2:	4623      	mov	r3, r4
 80064d4:	469a      	mov	sl, r3
 80064d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064da:	b10a      	cbz	r2, 80064e0 <_svfiprintf_r+0x60>
 80064dc:	2a25      	cmp	r2, #37	@ 0x25
 80064de:	d1f9      	bne.n	80064d4 <_svfiprintf_r+0x54>
 80064e0:	ebba 0b04 	subs.w	fp, sl, r4
 80064e4:	d00b      	beq.n	80064fe <_svfiprintf_r+0x7e>
 80064e6:	465b      	mov	r3, fp
 80064e8:	4622      	mov	r2, r4
 80064ea:	4629      	mov	r1, r5
 80064ec:	4638      	mov	r0, r7
 80064ee:	f7ff ff6b 	bl	80063c8 <__ssputs_r>
 80064f2:	3001      	adds	r0, #1
 80064f4:	f000 80a7 	beq.w	8006646 <_svfiprintf_r+0x1c6>
 80064f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064fa:	445a      	add	r2, fp
 80064fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80064fe:	f89a 3000 	ldrb.w	r3, [sl]
 8006502:	2b00      	cmp	r3, #0
 8006504:	f000 809f 	beq.w	8006646 <_svfiprintf_r+0x1c6>
 8006508:	2300      	movs	r3, #0
 800650a:	f04f 32ff 	mov.w	r2, #4294967295
 800650e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006512:	f10a 0a01 	add.w	sl, sl, #1
 8006516:	9304      	str	r3, [sp, #16]
 8006518:	9307      	str	r3, [sp, #28]
 800651a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800651e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006520:	4654      	mov	r4, sl
 8006522:	2205      	movs	r2, #5
 8006524:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006528:	484e      	ldr	r0, [pc, #312]	@ (8006664 <_svfiprintf_r+0x1e4>)
 800652a:	f7f9 fe59 	bl	80001e0 <memchr>
 800652e:	9a04      	ldr	r2, [sp, #16]
 8006530:	b9d8      	cbnz	r0, 800656a <_svfiprintf_r+0xea>
 8006532:	06d0      	lsls	r0, r2, #27
 8006534:	bf44      	itt	mi
 8006536:	2320      	movmi	r3, #32
 8006538:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800653c:	0711      	lsls	r1, r2, #28
 800653e:	bf44      	itt	mi
 8006540:	232b      	movmi	r3, #43	@ 0x2b
 8006542:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006546:	f89a 3000 	ldrb.w	r3, [sl]
 800654a:	2b2a      	cmp	r3, #42	@ 0x2a
 800654c:	d015      	beq.n	800657a <_svfiprintf_r+0xfa>
 800654e:	9a07      	ldr	r2, [sp, #28]
 8006550:	4654      	mov	r4, sl
 8006552:	2000      	movs	r0, #0
 8006554:	f04f 0c0a 	mov.w	ip, #10
 8006558:	4621      	mov	r1, r4
 800655a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800655e:	3b30      	subs	r3, #48	@ 0x30
 8006560:	2b09      	cmp	r3, #9
 8006562:	d94b      	bls.n	80065fc <_svfiprintf_r+0x17c>
 8006564:	b1b0      	cbz	r0, 8006594 <_svfiprintf_r+0x114>
 8006566:	9207      	str	r2, [sp, #28]
 8006568:	e014      	b.n	8006594 <_svfiprintf_r+0x114>
 800656a:	eba0 0308 	sub.w	r3, r0, r8
 800656e:	fa09 f303 	lsl.w	r3, r9, r3
 8006572:	4313      	orrs	r3, r2
 8006574:	9304      	str	r3, [sp, #16]
 8006576:	46a2      	mov	sl, r4
 8006578:	e7d2      	b.n	8006520 <_svfiprintf_r+0xa0>
 800657a:	9b03      	ldr	r3, [sp, #12]
 800657c:	1d19      	adds	r1, r3, #4
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	9103      	str	r1, [sp, #12]
 8006582:	2b00      	cmp	r3, #0
 8006584:	bfbb      	ittet	lt
 8006586:	425b      	neglt	r3, r3
 8006588:	f042 0202 	orrlt.w	r2, r2, #2
 800658c:	9307      	strge	r3, [sp, #28]
 800658e:	9307      	strlt	r3, [sp, #28]
 8006590:	bfb8      	it	lt
 8006592:	9204      	strlt	r2, [sp, #16]
 8006594:	7823      	ldrb	r3, [r4, #0]
 8006596:	2b2e      	cmp	r3, #46	@ 0x2e
 8006598:	d10a      	bne.n	80065b0 <_svfiprintf_r+0x130>
 800659a:	7863      	ldrb	r3, [r4, #1]
 800659c:	2b2a      	cmp	r3, #42	@ 0x2a
 800659e:	d132      	bne.n	8006606 <_svfiprintf_r+0x186>
 80065a0:	9b03      	ldr	r3, [sp, #12]
 80065a2:	1d1a      	adds	r2, r3, #4
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	9203      	str	r2, [sp, #12]
 80065a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80065ac:	3402      	adds	r4, #2
 80065ae:	9305      	str	r3, [sp, #20]
 80065b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006674 <_svfiprintf_r+0x1f4>
 80065b4:	7821      	ldrb	r1, [r4, #0]
 80065b6:	2203      	movs	r2, #3
 80065b8:	4650      	mov	r0, sl
 80065ba:	f7f9 fe11 	bl	80001e0 <memchr>
 80065be:	b138      	cbz	r0, 80065d0 <_svfiprintf_r+0x150>
 80065c0:	9b04      	ldr	r3, [sp, #16]
 80065c2:	eba0 000a 	sub.w	r0, r0, sl
 80065c6:	2240      	movs	r2, #64	@ 0x40
 80065c8:	4082      	lsls	r2, r0
 80065ca:	4313      	orrs	r3, r2
 80065cc:	3401      	adds	r4, #1
 80065ce:	9304      	str	r3, [sp, #16]
 80065d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065d4:	4824      	ldr	r0, [pc, #144]	@ (8006668 <_svfiprintf_r+0x1e8>)
 80065d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80065da:	2206      	movs	r2, #6
 80065dc:	f7f9 fe00 	bl	80001e0 <memchr>
 80065e0:	2800      	cmp	r0, #0
 80065e2:	d036      	beq.n	8006652 <_svfiprintf_r+0x1d2>
 80065e4:	4b21      	ldr	r3, [pc, #132]	@ (800666c <_svfiprintf_r+0x1ec>)
 80065e6:	bb1b      	cbnz	r3, 8006630 <_svfiprintf_r+0x1b0>
 80065e8:	9b03      	ldr	r3, [sp, #12]
 80065ea:	3307      	adds	r3, #7
 80065ec:	f023 0307 	bic.w	r3, r3, #7
 80065f0:	3308      	adds	r3, #8
 80065f2:	9303      	str	r3, [sp, #12]
 80065f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065f6:	4433      	add	r3, r6
 80065f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80065fa:	e76a      	b.n	80064d2 <_svfiprintf_r+0x52>
 80065fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006600:	460c      	mov	r4, r1
 8006602:	2001      	movs	r0, #1
 8006604:	e7a8      	b.n	8006558 <_svfiprintf_r+0xd8>
 8006606:	2300      	movs	r3, #0
 8006608:	3401      	adds	r4, #1
 800660a:	9305      	str	r3, [sp, #20]
 800660c:	4619      	mov	r1, r3
 800660e:	f04f 0c0a 	mov.w	ip, #10
 8006612:	4620      	mov	r0, r4
 8006614:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006618:	3a30      	subs	r2, #48	@ 0x30
 800661a:	2a09      	cmp	r2, #9
 800661c:	d903      	bls.n	8006626 <_svfiprintf_r+0x1a6>
 800661e:	2b00      	cmp	r3, #0
 8006620:	d0c6      	beq.n	80065b0 <_svfiprintf_r+0x130>
 8006622:	9105      	str	r1, [sp, #20]
 8006624:	e7c4      	b.n	80065b0 <_svfiprintf_r+0x130>
 8006626:	fb0c 2101 	mla	r1, ip, r1, r2
 800662a:	4604      	mov	r4, r0
 800662c:	2301      	movs	r3, #1
 800662e:	e7f0      	b.n	8006612 <_svfiprintf_r+0x192>
 8006630:	ab03      	add	r3, sp, #12
 8006632:	9300      	str	r3, [sp, #0]
 8006634:	462a      	mov	r2, r5
 8006636:	4b0e      	ldr	r3, [pc, #56]	@ (8006670 <_svfiprintf_r+0x1f0>)
 8006638:	a904      	add	r1, sp, #16
 800663a:	4638      	mov	r0, r7
 800663c:	f3af 8000 	nop.w
 8006640:	1c42      	adds	r2, r0, #1
 8006642:	4606      	mov	r6, r0
 8006644:	d1d6      	bne.n	80065f4 <_svfiprintf_r+0x174>
 8006646:	89ab      	ldrh	r3, [r5, #12]
 8006648:	065b      	lsls	r3, r3, #25
 800664a:	f53f af2d 	bmi.w	80064a8 <_svfiprintf_r+0x28>
 800664e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006650:	e72c      	b.n	80064ac <_svfiprintf_r+0x2c>
 8006652:	ab03      	add	r3, sp, #12
 8006654:	9300      	str	r3, [sp, #0]
 8006656:	462a      	mov	r2, r5
 8006658:	4b05      	ldr	r3, [pc, #20]	@ (8006670 <_svfiprintf_r+0x1f0>)
 800665a:	a904      	add	r1, sp, #16
 800665c:	4638      	mov	r0, r7
 800665e:	f000 f879 	bl	8006754 <_printf_i>
 8006662:	e7ed      	b.n	8006640 <_svfiprintf_r+0x1c0>
 8006664:	08006b24 	.word	0x08006b24
 8006668:	08006b2e 	.word	0x08006b2e
 800666c:	00000000 	.word	0x00000000
 8006670:	080063c9 	.word	0x080063c9
 8006674:	08006b2a 	.word	0x08006b2a

08006678 <_printf_common>:
 8006678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800667c:	4616      	mov	r6, r2
 800667e:	4698      	mov	r8, r3
 8006680:	688a      	ldr	r2, [r1, #8]
 8006682:	690b      	ldr	r3, [r1, #16]
 8006684:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006688:	4293      	cmp	r3, r2
 800668a:	bfb8      	it	lt
 800668c:	4613      	movlt	r3, r2
 800668e:	6033      	str	r3, [r6, #0]
 8006690:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006694:	4607      	mov	r7, r0
 8006696:	460c      	mov	r4, r1
 8006698:	b10a      	cbz	r2, 800669e <_printf_common+0x26>
 800669a:	3301      	adds	r3, #1
 800669c:	6033      	str	r3, [r6, #0]
 800669e:	6823      	ldr	r3, [r4, #0]
 80066a0:	0699      	lsls	r1, r3, #26
 80066a2:	bf42      	ittt	mi
 80066a4:	6833      	ldrmi	r3, [r6, #0]
 80066a6:	3302      	addmi	r3, #2
 80066a8:	6033      	strmi	r3, [r6, #0]
 80066aa:	6825      	ldr	r5, [r4, #0]
 80066ac:	f015 0506 	ands.w	r5, r5, #6
 80066b0:	d106      	bne.n	80066c0 <_printf_common+0x48>
 80066b2:	f104 0a19 	add.w	sl, r4, #25
 80066b6:	68e3      	ldr	r3, [r4, #12]
 80066b8:	6832      	ldr	r2, [r6, #0]
 80066ba:	1a9b      	subs	r3, r3, r2
 80066bc:	42ab      	cmp	r3, r5
 80066be:	dc26      	bgt.n	800670e <_printf_common+0x96>
 80066c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80066c4:	6822      	ldr	r2, [r4, #0]
 80066c6:	3b00      	subs	r3, #0
 80066c8:	bf18      	it	ne
 80066ca:	2301      	movne	r3, #1
 80066cc:	0692      	lsls	r2, r2, #26
 80066ce:	d42b      	bmi.n	8006728 <_printf_common+0xb0>
 80066d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80066d4:	4641      	mov	r1, r8
 80066d6:	4638      	mov	r0, r7
 80066d8:	47c8      	blx	r9
 80066da:	3001      	adds	r0, #1
 80066dc:	d01e      	beq.n	800671c <_printf_common+0xa4>
 80066de:	6823      	ldr	r3, [r4, #0]
 80066e0:	6922      	ldr	r2, [r4, #16]
 80066e2:	f003 0306 	and.w	r3, r3, #6
 80066e6:	2b04      	cmp	r3, #4
 80066e8:	bf02      	ittt	eq
 80066ea:	68e5      	ldreq	r5, [r4, #12]
 80066ec:	6833      	ldreq	r3, [r6, #0]
 80066ee:	1aed      	subeq	r5, r5, r3
 80066f0:	68a3      	ldr	r3, [r4, #8]
 80066f2:	bf0c      	ite	eq
 80066f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066f8:	2500      	movne	r5, #0
 80066fa:	4293      	cmp	r3, r2
 80066fc:	bfc4      	itt	gt
 80066fe:	1a9b      	subgt	r3, r3, r2
 8006700:	18ed      	addgt	r5, r5, r3
 8006702:	2600      	movs	r6, #0
 8006704:	341a      	adds	r4, #26
 8006706:	42b5      	cmp	r5, r6
 8006708:	d11a      	bne.n	8006740 <_printf_common+0xc8>
 800670a:	2000      	movs	r0, #0
 800670c:	e008      	b.n	8006720 <_printf_common+0xa8>
 800670e:	2301      	movs	r3, #1
 8006710:	4652      	mov	r2, sl
 8006712:	4641      	mov	r1, r8
 8006714:	4638      	mov	r0, r7
 8006716:	47c8      	blx	r9
 8006718:	3001      	adds	r0, #1
 800671a:	d103      	bne.n	8006724 <_printf_common+0xac>
 800671c:	f04f 30ff 	mov.w	r0, #4294967295
 8006720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006724:	3501      	adds	r5, #1
 8006726:	e7c6      	b.n	80066b6 <_printf_common+0x3e>
 8006728:	18e1      	adds	r1, r4, r3
 800672a:	1c5a      	adds	r2, r3, #1
 800672c:	2030      	movs	r0, #48	@ 0x30
 800672e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006732:	4422      	add	r2, r4
 8006734:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006738:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800673c:	3302      	adds	r3, #2
 800673e:	e7c7      	b.n	80066d0 <_printf_common+0x58>
 8006740:	2301      	movs	r3, #1
 8006742:	4622      	mov	r2, r4
 8006744:	4641      	mov	r1, r8
 8006746:	4638      	mov	r0, r7
 8006748:	47c8      	blx	r9
 800674a:	3001      	adds	r0, #1
 800674c:	d0e6      	beq.n	800671c <_printf_common+0xa4>
 800674e:	3601      	adds	r6, #1
 8006750:	e7d9      	b.n	8006706 <_printf_common+0x8e>
	...

08006754 <_printf_i>:
 8006754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006758:	7e0f      	ldrb	r7, [r1, #24]
 800675a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800675c:	2f78      	cmp	r7, #120	@ 0x78
 800675e:	4691      	mov	r9, r2
 8006760:	4680      	mov	r8, r0
 8006762:	460c      	mov	r4, r1
 8006764:	469a      	mov	sl, r3
 8006766:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800676a:	d807      	bhi.n	800677c <_printf_i+0x28>
 800676c:	2f62      	cmp	r7, #98	@ 0x62
 800676e:	d80a      	bhi.n	8006786 <_printf_i+0x32>
 8006770:	2f00      	cmp	r7, #0
 8006772:	f000 80d1 	beq.w	8006918 <_printf_i+0x1c4>
 8006776:	2f58      	cmp	r7, #88	@ 0x58
 8006778:	f000 80b8 	beq.w	80068ec <_printf_i+0x198>
 800677c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006780:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006784:	e03a      	b.n	80067fc <_printf_i+0xa8>
 8006786:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800678a:	2b15      	cmp	r3, #21
 800678c:	d8f6      	bhi.n	800677c <_printf_i+0x28>
 800678e:	a101      	add	r1, pc, #4	@ (adr r1, 8006794 <_printf_i+0x40>)
 8006790:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006794:	080067ed 	.word	0x080067ed
 8006798:	08006801 	.word	0x08006801
 800679c:	0800677d 	.word	0x0800677d
 80067a0:	0800677d 	.word	0x0800677d
 80067a4:	0800677d 	.word	0x0800677d
 80067a8:	0800677d 	.word	0x0800677d
 80067ac:	08006801 	.word	0x08006801
 80067b0:	0800677d 	.word	0x0800677d
 80067b4:	0800677d 	.word	0x0800677d
 80067b8:	0800677d 	.word	0x0800677d
 80067bc:	0800677d 	.word	0x0800677d
 80067c0:	080068ff 	.word	0x080068ff
 80067c4:	0800682b 	.word	0x0800682b
 80067c8:	080068b9 	.word	0x080068b9
 80067cc:	0800677d 	.word	0x0800677d
 80067d0:	0800677d 	.word	0x0800677d
 80067d4:	08006921 	.word	0x08006921
 80067d8:	0800677d 	.word	0x0800677d
 80067dc:	0800682b 	.word	0x0800682b
 80067e0:	0800677d 	.word	0x0800677d
 80067e4:	0800677d 	.word	0x0800677d
 80067e8:	080068c1 	.word	0x080068c1
 80067ec:	6833      	ldr	r3, [r6, #0]
 80067ee:	1d1a      	adds	r2, r3, #4
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	6032      	str	r2, [r6, #0]
 80067f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80067fc:	2301      	movs	r3, #1
 80067fe:	e09c      	b.n	800693a <_printf_i+0x1e6>
 8006800:	6833      	ldr	r3, [r6, #0]
 8006802:	6820      	ldr	r0, [r4, #0]
 8006804:	1d19      	adds	r1, r3, #4
 8006806:	6031      	str	r1, [r6, #0]
 8006808:	0606      	lsls	r6, r0, #24
 800680a:	d501      	bpl.n	8006810 <_printf_i+0xbc>
 800680c:	681d      	ldr	r5, [r3, #0]
 800680e:	e003      	b.n	8006818 <_printf_i+0xc4>
 8006810:	0645      	lsls	r5, r0, #25
 8006812:	d5fb      	bpl.n	800680c <_printf_i+0xb8>
 8006814:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006818:	2d00      	cmp	r5, #0
 800681a:	da03      	bge.n	8006824 <_printf_i+0xd0>
 800681c:	232d      	movs	r3, #45	@ 0x2d
 800681e:	426d      	negs	r5, r5
 8006820:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006824:	4858      	ldr	r0, [pc, #352]	@ (8006988 <_printf_i+0x234>)
 8006826:	230a      	movs	r3, #10
 8006828:	e011      	b.n	800684e <_printf_i+0xfa>
 800682a:	6821      	ldr	r1, [r4, #0]
 800682c:	6833      	ldr	r3, [r6, #0]
 800682e:	0608      	lsls	r0, r1, #24
 8006830:	f853 5b04 	ldr.w	r5, [r3], #4
 8006834:	d402      	bmi.n	800683c <_printf_i+0xe8>
 8006836:	0649      	lsls	r1, r1, #25
 8006838:	bf48      	it	mi
 800683a:	b2ad      	uxthmi	r5, r5
 800683c:	2f6f      	cmp	r7, #111	@ 0x6f
 800683e:	4852      	ldr	r0, [pc, #328]	@ (8006988 <_printf_i+0x234>)
 8006840:	6033      	str	r3, [r6, #0]
 8006842:	bf14      	ite	ne
 8006844:	230a      	movne	r3, #10
 8006846:	2308      	moveq	r3, #8
 8006848:	2100      	movs	r1, #0
 800684a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800684e:	6866      	ldr	r6, [r4, #4]
 8006850:	60a6      	str	r6, [r4, #8]
 8006852:	2e00      	cmp	r6, #0
 8006854:	db05      	blt.n	8006862 <_printf_i+0x10e>
 8006856:	6821      	ldr	r1, [r4, #0]
 8006858:	432e      	orrs	r6, r5
 800685a:	f021 0104 	bic.w	r1, r1, #4
 800685e:	6021      	str	r1, [r4, #0]
 8006860:	d04b      	beq.n	80068fa <_printf_i+0x1a6>
 8006862:	4616      	mov	r6, r2
 8006864:	fbb5 f1f3 	udiv	r1, r5, r3
 8006868:	fb03 5711 	mls	r7, r3, r1, r5
 800686c:	5dc7      	ldrb	r7, [r0, r7]
 800686e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006872:	462f      	mov	r7, r5
 8006874:	42bb      	cmp	r3, r7
 8006876:	460d      	mov	r5, r1
 8006878:	d9f4      	bls.n	8006864 <_printf_i+0x110>
 800687a:	2b08      	cmp	r3, #8
 800687c:	d10b      	bne.n	8006896 <_printf_i+0x142>
 800687e:	6823      	ldr	r3, [r4, #0]
 8006880:	07df      	lsls	r7, r3, #31
 8006882:	d508      	bpl.n	8006896 <_printf_i+0x142>
 8006884:	6923      	ldr	r3, [r4, #16]
 8006886:	6861      	ldr	r1, [r4, #4]
 8006888:	4299      	cmp	r1, r3
 800688a:	bfde      	ittt	le
 800688c:	2330      	movle	r3, #48	@ 0x30
 800688e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006892:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006896:	1b92      	subs	r2, r2, r6
 8006898:	6122      	str	r2, [r4, #16]
 800689a:	f8cd a000 	str.w	sl, [sp]
 800689e:	464b      	mov	r3, r9
 80068a0:	aa03      	add	r2, sp, #12
 80068a2:	4621      	mov	r1, r4
 80068a4:	4640      	mov	r0, r8
 80068a6:	f7ff fee7 	bl	8006678 <_printf_common>
 80068aa:	3001      	adds	r0, #1
 80068ac:	d14a      	bne.n	8006944 <_printf_i+0x1f0>
 80068ae:	f04f 30ff 	mov.w	r0, #4294967295
 80068b2:	b004      	add	sp, #16
 80068b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068b8:	6823      	ldr	r3, [r4, #0]
 80068ba:	f043 0320 	orr.w	r3, r3, #32
 80068be:	6023      	str	r3, [r4, #0]
 80068c0:	4832      	ldr	r0, [pc, #200]	@ (800698c <_printf_i+0x238>)
 80068c2:	2778      	movs	r7, #120	@ 0x78
 80068c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80068c8:	6823      	ldr	r3, [r4, #0]
 80068ca:	6831      	ldr	r1, [r6, #0]
 80068cc:	061f      	lsls	r7, r3, #24
 80068ce:	f851 5b04 	ldr.w	r5, [r1], #4
 80068d2:	d402      	bmi.n	80068da <_printf_i+0x186>
 80068d4:	065f      	lsls	r7, r3, #25
 80068d6:	bf48      	it	mi
 80068d8:	b2ad      	uxthmi	r5, r5
 80068da:	6031      	str	r1, [r6, #0]
 80068dc:	07d9      	lsls	r1, r3, #31
 80068de:	bf44      	itt	mi
 80068e0:	f043 0320 	orrmi.w	r3, r3, #32
 80068e4:	6023      	strmi	r3, [r4, #0]
 80068e6:	b11d      	cbz	r5, 80068f0 <_printf_i+0x19c>
 80068e8:	2310      	movs	r3, #16
 80068ea:	e7ad      	b.n	8006848 <_printf_i+0xf4>
 80068ec:	4826      	ldr	r0, [pc, #152]	@ (8006988 <_printf_i+0x234>)
 80068ee:	e7e9      	b.n	80068c4 <_printf_i+0x170>
 80068f0:	6823      	ldr	r3, [r4, #0]
 80068f2:	f023 0320 	bic.w	r3, r3, #32
 80068f6:	6023      	str	r3, [r4, #0]
 80068f8:	e7f6      	b.n	80068e8 <_printf_i+0x194>
 80068fa:	4616      	mov	r6, r2
 80068fc:	e7bd      	b.n	800687a <_printf_i+0x126>
 80068fe:	6833      	ldr	r3, [r6, #0]
 8006900:	6825      	ldr	r5, [r4, #0]
 8006902:	6961      	ldr	r1, [r4, #20]
 8006904:	1d18      	adds	r0, r3, #4
 8006906:	6030      	str	r0, [r6, #0]
 8006908:	062e      	lsls	r6, r5, #24
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	d501      	bpl.n	8006912 <_printf_i+0x1be>
 800690e:	6019      	str	r1, [r3, #0]
 8006910:	e002      	b.n	8006918 <_printf_i+0x1c4>
 8006912:	0668      	lsls	r0, r5, #25
 8006914:	d5fb      	bpl.n	800690e <_printf_i+0x1ba>
 8006916:	8019      	strh	r1, [r3, #0]
 8006918:	2300      	movs	r3, #0
 800691a:	6123      	str	r3, [r4, #16]
 800691c:	4616      	mov	r6, r2
 800691e:	e7bc      	b.n	800689a <_printf_i+0x146>
 8006920:	6833      	ldr	r3, [r6, #0]
 8006922:	1d1a      	adds	r2, r3, #4
 8006924:	6032      	str	r2, [r6, #0]
 8006926:	681e      	ldr	r6, [r3, #0]
 8006928:	6862      	ldr	r2, [r4, #4]
 800692a:	2100      	movs	r1, #0
 800692c:	4630      	mov	r0, r6
 800692e:	f7f9 fc57 	bl	80001e0 <memchr>
 8006932:	b108      	cbz	r0, 8006938 <_printf_i+0x1e4>
 8006934:	1b80      	subs	r0, r0, r6
 8006936:	6060      	str	r0, [r4, #4]
 8006938:	6863      	ldr	r3, [r4, #4]
 800693a:	6123      	str	r3, [r4, #16]
 800693c:	2300      	movs	r3, #0
 800693e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006942:	e7aa      	b.n	800689a <_printf_i+0x146>
 8006944:	6923      	ldr	r3, [r4, #16]
 8006946:	4632      	mov	r2, r6
 8006948:	4649      	mov	r1, r9
 800694a:	4640      	mov	r0, r8
 800694c:	47d0      	blx	sl
 800694e:	3001      	adds	r0, #1
 8006950:	d0ad      	beq.n	80068ae <_printf_i+0x15a>
 8006952:	6823      	ldr	r3, [r4, #0]
 8006954:	079b      	lsls	r3, r3, #30
 8006956:	d413      	bmi.n	8006980 <_printf_i+0x22c>
 8006958:	68e0      	ldr	r0, [r4, #12]
 800695a:	9b03      	ldr	r3, [sp, #12]
 800695c:	4298      	cmp	r0, r3
 800695e:	bfb8      	it	lt
 8006960:	4618      	movlt	r0, r3
 8006962:	e7a6      	b.n	80068b2 <_printf_i+0x15e>
 8006964:	2301      	movs	r3, #1
 8006966:	4632      	mov	r2, r6
 8006968:	4649      	mov	r1, r9
 800696a:	4640      	mov	r0, r8
 800696c:	47d0      	blx	sl
 800696e:	3001      	adds	r0, #1
 8006970:	d09d      	beq.n	80068ae <_printf_i+0x15a>
 8006972:	3501      	adds	r5, #1
 8006974:	68e3      	ldr	r3, [r4, #12]
 8006976:	9903      	ldr	r1, [sp, #12]
 8006978:	1a5b      	subs	r3, r3, r1
 800697a:	42ab      	cmp	r3, r5
 800697c:	dcf2      	bgt.n	8006964 <_printf_i+0x210>
 800697e:	e7eb      	b.n	8006958 <_printf_i+0x204>
 8006980:	2500      	movs	r5, #0
 8006982:	f104 0619 	add.w	r6, r4, #25
 8006986:	e7f5      	b.n	8006974 <_printf_i+0x220>
 8006988:	08006b35 	.word	0x08006b35
 800698c:	08006b46 	.word	0x08006b46

08006990 <memmove>:
 8006990:	4288      	cmp	r0, r1
 8006992:	b510      	push	{r4, lr}
 8006994:	eb01 0402 	add.w	r4, r1, r2
 8006998:	d902      	bls.n	80069a0 <memmove+0x10>
 800699a:	4284      	cmp	r4, r0
 800699c:	4623      	mov	r3, r4
 800699e:	d807      	bhi.n	80069b0 <memmove+0x20>
 80069a0:	1e43      	subs	r3, r0, #1
 80069a2:	42a1      	cmp	r1, r4
 80069a4:	d008      	beq.n	80069b8 <memmove+0x28>
 80069a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069ae:	e7f8      	b.n	80069a2 <memmove+0x12>
 80069b0:	4402      	add	r2, r0
 80069b2:	4601      	mov	r1, r0
 80069b4:	428a      	cmp	r2, r1
 80069b6:	d100      	bne.n	80069ba <memmove+0x2a>
 80069b8:	bd10      	pop	{r4, pc}
 80069ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80069c2:	e7f7      	b.n	80069b4 <memmove+0x24>

080069c4 <_sbrk_r>:
 80069c4:	b538      	push	{r3, r4, r5, lr}
 80069c6:	4d06      	ldr	r5, [pc, #24]	@ (80069e0 <_sbrk_r+0x1c>)
 80069c8:	2300      	movs	r3, #0
 80069ca:	4604      	mov	r4, r0
 80069cc:	4608      	mov	r0, r1
 80069ce:	602b      	str	r3, [r5, #0]
 80069d0:	f7fa f800 	bl	80009d4 <_sbrk>
 80069d4:	1c43      	adds	r3, r0, #1
 80069d6:	d102      	bne.n	80069de <_sbrk_r+0x1a>
 80069d8:	682b      	ldr	r3, [r5, #0]
 80069da:	b103      	cbz	r3, 80069de <_sbrk_r+0x1a>
 80069dc:	6023      	str	r3, [r4, #0]
 80069de:	bd38      	pop	{r3, r4, r5, pc}
 80069e0:	20000518 	.word	0x20000518

080069e4 <memcpy>:
 80069e4:	440a      	add	r2, r1
 80069e6:	4291      	cmp	r1, r2
 80069e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80069ec:	d100      	bne.n	80069f0 <memcpy+0xc>
 80069ee:	4770      	bx	lr
 80069f0:	b510      	push	{r4, lr}
 80069f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069fa:	4291      	cmp	r1, r2
 80069fc:	d1f9      	bne.n	80069f2 <memcpy+0xe>
 80069fe:	bd10      	pop	{r4, pc}

08006a00 <_realloc_r>:
 8006a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a04:	4607      	mov	r7, r0
 8006a06:	4614      	mov	r4, r2
 8006a08:	460d      	mov	r5, r1
 8006a0a:	b921      	cbnz	r1, 8006a16 <_realloc_r+0x16>
 8006a0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a10:	4611      	mov	r1, r2
 8006a12:	f7ff bc4d 	b.w	80062b0 <_malloc_r>
 8006a16:	b92a      	cbnz	r2, 8006a24 <_realloc_r+0x24>
 8006a18:	f7ff fbde 	bl	80061d8 <_free_r>
 8006a1c:	4625      	mov	r5, r4
 8006a1e:	4628      	mov	r0, r5
 8006a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a24:	f000 f81a 	bl	8006a5c <_malloc_usable_size_r>
 8006a28:	4284      	cmp	r4, r0
 8006a2a:	4606      	mov	r6, r0
 8006a2c:	d802      	bhi.n	8006a34 <_realloc_r+0x34>
 8006a2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006a32:	d8f4      	bhi.n	8006a1e <_realloc_r+0x1e>
 8006a34:	4621      	mov	r1, r4
 8006a36:	4638      	mov	r0, r7
 8006a38:	f7ff fc3a 	bl	80062b0 <_malloc_r>
 8006a3c:	4680      	mov	r8, r0
 8006a3e:	b908      	cbnz	r0, 8006a44 <_realloc_r+0x44>
 8006a40:	4645      	mov	r5, r8
 8006a42:	e7ec      	b.n	8006a1e <_realloc_r+0x1e>
 8006a44:	42b4      	cmp	r4, r6
 8006a46:	4622      	mov	r2, r4
 8006a48:	4629      	mov	r1, r5
 8006a4a:	bf28      	it	cs
 8006a4c:	4632      	movcs	r2, r6
 8006a4e:	f7ff ffc9 	bl	80069e4 <memcpy>
 8006a52:	4629      	mov	r1, r5
 8006a54:	4638      	mov	r0, r7
 8006a56:	f7ff fbbf 	bl	80061d8 <_free_r>
 8006a5a:	e7f1      	b.n	8006a40 <_realloc_r+0x40>

08006a5c <_malloc_usable_size_r>:
 8006a5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a60:	1f18      	subs	r0, r3, #4
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	bfbc      	itt	lt
 8006a66:	580b      	ldrlt	r3, [r1, r0]
 8006a68:	18c0      	addlt	r0, r0, r3
 8006a6a:	4770      	bx	lr

08006a6c <_init>:
 8006a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a6e:	bf00      	nop
 8006a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a72:	bc08      	pop	{r3}
 8006a74:	469e      	mov	lr, r3
 8006a76:	4770      	bx	lr

08006a78 <_fini>:
 8006a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a7a:	bf00      	nop
 8006a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a7e:	bc08      	pop	{r3}
 8006a80:	469e      	mov	lr, r3
 8006a82:	4770      	bx	lr
