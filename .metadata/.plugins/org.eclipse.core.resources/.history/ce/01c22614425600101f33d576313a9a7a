
250624_TimeWatch_StopWatch_in_Proc_out_Struc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e78  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08004018  08004018  00005018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040b8  080040b8  000060d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080040b8  080040b8  000050b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040c0  080040c0  000060d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040c0  080040c0  000050c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080040c4  080040c4  000050c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d4  20000000  080040c8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  200000d4  0800419c  000060d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  0800419c  00006308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000060d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dfe4  00000000  00000000  00006104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a3b  00000000  00000000  000140e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  00016b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a84  00000000  00000000  000178e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f95  00000000  00000000  0001836c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001222b  00000000  00000000  0002f301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e8be  00000000  00000000  0004152c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cfdea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b74  00000000  00000000  000cfe30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000d39a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d4 	.word	0x200000d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004000 	.word	0x08004000

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000d8 	.word	0x200000d8
 80001dc:	08004000 	.word	0x08004000

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08a      	sub	sp, #40	@ 0x28
 80005c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
 80005d6:	4b49      	ldr	r3, [pc, #292]	@ (80006fc <MX_GPIO_Init+0x140>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	4a48      	ldr	r2, [pc, #288]	@ (80006fc <MX_GPIO_Init+0x140>)
 80005dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e2:	4b46      	ldr	r3, [pc, #280]	@ (80006fc <MX_GPIO_Init+0x140>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005ea:	613b      	str	r3, [r7, #16]
 80005ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	4b42      	ldr	r3, [pc, #264]	@ (80006fc <MX_GPIO_Init+0x140>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	4a41      	ldr	r2, [pc, #260]	@ (80006fc <MX_GPIO_Init+0x140>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fe:	4b3f      	ldr	r3, [pc, #252]	@ (80006fc <MX_GPIO_Init+0x140>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	4b3b      	ldr	r3, [pc, #236]	@ (80006fc <MX_GPIO_Init+0x140>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	4a3a      	ldr	r2, [pc, #232]	@ (80006fc <MX_GPIO_Init+0x140>)
 8000614:	f043 0304 	orr.w	r3, r3, #4
 8000618:	6313      	str	r3, [r2, #48]	@ 0x30
 800061a:	4b38      	ldr	r3, [pc, #224]	@ (80006fc <MX_GPIO_Init+0x140>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	f003 0304 	and.w	r3, r3, #4
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	4b34      	ldr	r3, [pc, #208]	@ (80006fc <MX_GPIO_Init+0x140>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	4a33      	ldr	r2, [pc, #204]	@ (80006fc <MX_GPIO_Init+0x140>)
 8000630:	f043 0302 	orr.w	r3, r3, #2
 8000634:	6313      	str	r3, [r2, #48]	@ 0x30
 8000636:	4b31      	ldr	r3, [pc, #196]	@ (80006fc <MX_GPIO_Init+0x140>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	f003 0302 	and.w	r3, r3, #2
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 8000648:	482d      	ldr	r0, [pc, #180]	@ (8000700 <MX_GPIO_Init+0x144>)
 800064a:	f001 fb47 	bl	8001cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 800064e:	2200      	movs	r2, #0
 8000650:	f24f 0106 	movw	r1, #61446	@ 0xf006
 8000654:	482b      	ldr	r0, [pc, #172]	@ (8000704 <MX_GPIO_Init+0x148>)
 8000656:	f001 fb41 	bl	8001cdc <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8000660:	4829      	ldr	r0, [pc, #164]	@ (8000708 <MX_GPIO_Init+0x14c>)
 8000662:	f001 fb3b 	bl	8001cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC4 PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 8000666:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 800066a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066c:	2301      	movs	r3, #1
 800066e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000674:	2300      	movs	r3, #0
 8000676:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	4619      	mov	r1, r3
 800067e:	4820      	ldr	r0, [pc, #128]	@ (8000700 <MX_GPIO_Init+0x144>)
 8000680:	f001 f990 	bl	80019a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8000684:	f24f 0306 	movw	r3, #61446	@ 0xf006
 8000688:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068a:	2301      	movs	r3, #1
 800068c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000692:	2300      	movs	r3, #0
 8000694:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	4819      	ldr	r0, [pc, #100]	@ (8000704 <MX_GPIO_Init+0x148>)
 800069e:	f001 f981 	bl	80019a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	4619      	mov	r1, r3
 80006b6:	4814      	ldr	r0, [pc, #80]	@ (8000708 <MX_GPIO_Init+0x14c>)
 80006b8:	f001 f974 	bl	80019a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80006bc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80006c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c2:	2301      	movs	r3, #1
 80006c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ca:	2300      	movs	r3, #0
 80006cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	4619      	mov	r1, r3
 80006d4:	480c      	ldr	r0, [pc, #48]	@ (8000708 <MX_GPIO_Init+0x14c>)
 80006d6:	f001 f965 	bl	80019a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80006da:	2328      	movs	r3, #40	@ 0x28
 80006dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006de:	2300      	movs	r3, #0
 80006e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	4619      	mov	r1, r3
 80006ec:	4805      	ldr	r0, [pc, #20]	@ (8000704 <MX_GPIO_Init+0x148>)
 80006ee:	f001 f959 	bl	80019a4 <HAL_GPIO_Init>

}
 80006f2:	bf00      	nop
 80006f4:	3728      	adds	r7, #40	@ 0x28
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40020800 	.word	0x40020800
 8000704:	40020400 	.word	0x40020400
 8000708:	40020000 	.word	0x40020000

0800070c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000710:	f000 ffa0 	bl	8001654 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000714:	f000 f80c 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000718:	f7ff ff50 	bl	80005bc <MX_GPIO_Init>
  MX_TIM2_Init();
 800071c:	f000 f920 	bl	8000960 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000720:	f000 f990 	bl	8000a44 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ap_init();
 8000724:	f000 fc3c 	bl	8000fa0 <ap_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ap_main();
 8000728:	f000 fc2a 	bl	8000f80 <ap_main>
 800072c:	e7fc      	b.n	8000728 <main+0x1c>
	...

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b094      	sub	sp, #80	@ 0x50
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 0320 	add.w	r3, r7, #32
 800073a:	2230      	movs	r2, #48	@ 0x30
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f002 ffe0 	bl	8003704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	4b27      	ldr	r3, [pc, #156]	@ (80007f8 <SystemClock_Config+0xc8>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800075c:	4a26      	ldr	r2, [pc, #152]	@ (80007f8 <SystemClock_Config+0xc8>)
 800075e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000762:	6413      	str	r3, [r2, #64]	@ 0x40
 8000764:	4b24      	ldr	r3, [pc, #144]	@ (80007f8 <SystemClock_Config+0xc8>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000768:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000770:	2300      	movs	r3, #0
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	4b21      	ldr	r3, [pc, #132]	@ (80007fc <SystemClock_Config+0xcc>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a20      	ldr	r2, [pc, #128]	@ (80007fc <SystemClock_Config+0xcc>)
 800077a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800077e:	6013      	str	r3, [r2, #0]
 8000780:	4b1e      	ldr	r3, [pc, #120]	@ (80007fc <SystemClock_Config+0xcc>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800078c:	2301      	movs	r3, #1
 800078e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000790:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000794:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000796:	2302      	movs	r3, #2
 8000798:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800079e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007a0:	2304      	movs	r3, #4
 80007a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80007a4:	2364      	movs	r3, #100	@ 0x64
 80007a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a8:	2302      	movs	r3, #2
 80007aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007ac:	2304      	movs	r3, #4
 80007ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b0:	f107 0320 	add.w	r3, r7, #32
 80007b4:	4618      	mov	r0, r3
 80007b6:	f001 faab 	bl	8001d10 <HAL_RCC_OscConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007c0:	f000 f81e 	bl	8000800 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c4:	230f      	movs	r3, #15
 80007c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c8:	2302      	movs	r3, #2
 80007ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007da:	f107 030c 	add.w	r3, r7, #12
 80007de:	2103      	movs	r1, #3
 80007e0:	4618      	mov	r0, r3
 80007e2:	f001 fd0d 	bl	8002200 <HAL_RCC_ClockConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007ec:	f000 f808 	bl	8000800 <Error_Handler>
  }
}
 80007f0:	bf00      	nop
 80007f2:	3750      	adds	r7, #80	@ 0x50
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40007000 	.word	0x40007000

08000800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000804:	b672      	cpsid	i
}
 8000806:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <Error_Handler+0x8>

0800080c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b10      	ldr	r3, [pc, #64]	@ (8000858 <HAL_MspInit+0x4c>)
 8000818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800081a:	4a0f      	ldr	r2, [pc, #60]	@ (8000858 <HAL_MspInit+0x4c>)
 800081c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000820:	6453      	str	r3, [r2, #68]	@ 0x44
 8000822:	4b0d      	ldr	r3, [pc, #52]	@ (8000858 <HAL_MspInit+0x4c>)
 8000824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000826:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <HAL_MspInit+0x4c>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000836:	4a08      	ldr	r2, [pc, #32]	@ (8000858 <HAL_MspInit+0x4c>)
 8000838:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800083c:	6413      	str	r3, [r2, #64]	@ 0x40
 800083e:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <HAL_MspInit+0x4c>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	40023800 	.word	0x40023800

0800085c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <NMI_Handler+0x4>

08000864 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <HardFault_Handler+0x4>

0800086c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <MemManage_Handler+0x4>

08000874 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <BusFault_Handler+0x4>

0800087c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <UsageFault_Handler+0x4>

08000884 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr

080008ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b2:	f000 ff21 	bl	80016f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008c0:	4802      	ldr	r0, [pc, #8]	@ (80008cc <TIM2_IRQHandler+0x10>)
 80008c2:	f001 ff6f 	bl	80027a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200000f4 	.word	0x200000f4

080008d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008d8:	4a14      	ldr	r2, [pc, #80]	@ (800092c <_sbrk+0x5c>)
 80008da:	4b15      	ldr	r3, [pc, #84]	@ (8000930 <_sbrk+0x60>)
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008e4:	4b13      	ldr	r3, [pc, #76]	@ (8000934 <_sbrk+0x64>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d102      	bne.n	80008f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008ec:	4b11      	ldr	r3, [pc, #68]	@ (8000934 <_sbrk+0x64>)
 80008ee:	4a12      	ldr	r2, [pc, #72]	@ (8000938 <_sbrk+0x68>)
 80008f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008f2:	4b10      	ldr	r3, [pc, #64]	@ (8000934 <_sbrk+0x64>)
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4413      	add	r3, r2
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d207      	bcs.n	8000910 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000900:	f002 ff08 	bl	8003714 <__errno>
 8000904:	4603      	mov	r3, r0
 8000906:	220c      	movs	r2, #12
 8000908:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800090a:	f04f 33ff 	mov.w	r3, #4294967295
 800090e:	e009      	b.n	8000924 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000910:	4b08      	ldr	r3, [pc, #32]	@ (8000934 <_sbrk+0x64>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000916:	4b07      	ldr	r3, [pc, #28]	@ (8000934 <_sbrk+0x64>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	4a05      	ldr	r2, [pc, #20]	@ (8000934 <_sbrk+0x64>)
 8000920:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000922:	68fb      	ldr	r3, [r7, #12]
}
 8000924:	4618      	mov	r0, r3
 8000926:	3718      	adds	r7, #24
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20020000 	.word	0x20020000
 8000930:	00000400 	.word	0x00000400
 8000934:	200000f0 	.word	0x200000f0
 8000938:	20000308 	.word	0x20000308

0800093c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000940:	4b06      	ldr	r3, [pc, #24]	@ (800095c <SystemInit+0x20>)
 8000942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000946:	4a05      	ldr	r2, [pc, #20]	@ (800095c <SystemInit+0x20>)
 8000948:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800094c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000966:	f107 0308 	add.w	r3, r7, #8
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000974:	463b      	mov	r3, r7
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800097c:	4b1d      	ldr	r3, [pc, #116]	@ (80009f4 <MX_TIM2_Init+0x94>)
 800097e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000982:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8000984:	4b1b      	ldr	r3, [pc, #108]	@ (80009f4 <MX_TIM2_Init+0x94>)
 8000986:	2263      	movs	r2, #99	@ 0x63
 8000988:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098a:	4b1a      	ldr	r3, [pc, #104]	@ (80009f4 <MX_TIM2_Init+0x94>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000990:	4b18      	ldr	r3, [pc, #96]	@ (80009f4 <MX_TIM2_Init+0x94>)
 8000992:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000996:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000998:	4b16      	ldr	r3, [pc, #88]	@ (80009f4 <MX_TIM2_Init+0x94>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099e:	4b15      	ldr	r3, [pc, #84]	@ (80009f4 <MX_TIM2_Init+0x94>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009a4:	4813      	ldr	r0, [pc, #76]	@ (80009f4 <MX_TIM2_Init+0x94>)
 80009a6:	f001 fe4b 	bl	8002640 <HAL_TIM_Base_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80009b0:	f7ff ff26 	bl	8000800 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009ba:	f107 0308 	add.w	r3, r7, #8
 80009be:	4619      	mov	r1, r3
 80009c0:	480c      	ldr	r0, [pc, #48]	@ (80009f4 <MX_TIM2_Init+0x94>)
 80009c2:	f001 ffdf 	bl	8002984 <HAL_TIM_ConfigClockSource>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80009cc:	f7ff ff18 	bl	8000800 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d0:	2300      	movs	r3, #0
 80009d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009d8:	463b      	mov	r3, r7
 80009da:	4619      	mov	r1, r3
 80009dc:	4805      	ldr	r0, [pc, #20]	@ (80009f4 <MX_TIM2_Init+0x94>)
 80009de:	f002 f9e1 	bl	8002da4 <HAL_TIMEx_MasterConfigSynchronization>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80009e8:	f7ff ff0a 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	3718      	adds	r7, #24
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	200000f4 	.word	0x200000f4

080009f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a08:	d115      	bne.n	8000a36 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a40 <HAL_TIM_Base_MspInit+0x48>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a12:	4a0b      	ldr	r2, [pc, #44]	@ (8000a40 <HAL_TIM_Base_MspInit+0x48>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a1a:	4b09      	ldr	r3, [pc, #36]	@ (8000a40 <HAL_TIM_Base_MspInit+0x48>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2100      	movs	r1, #0
 8000a2a:	201c      	movs	r0, #28
 8000a2c:	f000 ff83 	bl	8001936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a30:	201c      	movs	r0, #28
 8000a32:	f000 ff9c 	bl	800196e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000a36:	bf00      	nop
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800

08000a44 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a48:	4b11      	ldr	r3, [pc, #68]	@ (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a4a:	4a12      	ldr	r2, [pc, #72]	@ (8000a94 <MX_USART2_UART_Init+0x50>)
 8000a4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a4e:	4b10      	ldr	r3, [pc, #64]	@ (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	@ (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a62:	4b0b      	ldr	r3, [pc, #44]	@ (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a68:	4b09      	ldr	r3, [pc, #36]	@ (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a6a:	220c      	movs	r2, #12
 8000a6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6e:	4b08      	ldr	r3, [pc, #32]	@ (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a74:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a7a:	4805      	ldr	r0, [pc, #20]	@ (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a7c:	f002 fa14 	bl	8002ea8 <HAL_UART_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a86:	f7ff febb 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	2000013c 	.word	0x2000013c
 8000a94:	40004400 	.word	0x40004400

08000a98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	@ 0x28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a19      	ldr	r2, [pc, #100]	@ (8000b1c <HAL_UART_MspInit+0x84>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d12b      	bne.n	8000b12 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	4b18      	ldr	r3, [pc, #96]	@ (8000b20 <HAL_UART_MspInit+0x88>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac2:	4a17      	ldr	r2, [pc, #92]	@ (8000b20 <HAL_UART_MspInit+0x88>)
 8000ac4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ac8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aca:	4b15      	ldr	r3, [pc, #84]	@ (8000b20 <HAL_UART_MspInit+0x88>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	4b11      	ldr	r3, [pc, #68]	@ (8000b20 <HAL_UART_MspInit+0x88>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	4a10      	ldr	r2, [pc, #64]	@ (8000b20 <HAL_UART_MspInit+0x88>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b20 <HAL_UART_MspInit+0x88>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000af2:	230c      	movs	r3, #12
 8000af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af6:	2302      	movs	r3, #2
 8000af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afe:	2303      	movs	r3, #3
 8000b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b02:	2307      	movs	r3, #7
 8000b04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4805      	ldr	r0, [pc, #20]	@ (8000b24 <HAL_UART_MspInit+0x8c>)
 8000b0e:	f000 ff49 	bl	80019a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b12:	bf00      	nop
 8000b14:	3728      	adds	r7, #40	@ 0x28
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40004400 	.word	0x40004400
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40020000 	.word	0x40020000

08000b28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b60 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b2c:	f7ff ff06 	bl	800093c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b30:	480c      	ldr	r0, [pc, #48]	@ (8000b64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b32:	490d      	ldr	r1, [pc, #52]	@ (8000b68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b34:	4a0d      	ldr	r2, [pc, #52]	@ (8000b6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b38:	e002      	b.n	8000b40 <LoopCopyDataInit>

08000b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3e:	3304      	adds	r3, #4

08000b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b44:	d3f9      	bcc.n	8000b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b46:	4a0a      	ldr	r2, [pc, #40]	@ (8000b70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b48:	4c0a      	ldr	r4, [pc, #40]	@ (8000b74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b4c:	e001      	b.n	8000b52 <LoopFillZerobss>

08000b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b50:	3204      	adds	r2, #4

08000b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b54:	d3fb      	bcc.n	8000b4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b56:	f002 fde3 	bl	8003720 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b5a:	f7ff fdd7 	bl	800070c <main>
  bx  lr    
 8000b5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b68:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8000b6c:	080040c8 	.word	0x080040c8
  ldr r2, =_sbss
 8000b70:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 8000b74:	20000308 	.word	0x20000308

08000b78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b78:	e7fe      	b.n	8000b78 <ADC_IRQHandler>

08000b7a <Controller_Excute>:

inputData_TypeDef controlData = {0};
static watchModeState_t modeState = TIME_WATCH;

void Controller_Excute()
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	af00      	add	r7, sp, #0
	Controller_Mode();
 8000b7e:	f000 f82f 	bl	8000be0 <Controller_Mode>
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <Controller_SetInputData>:

void Controller_SetInputData(inputData_TypeDef inputData)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	463b      	mov	r3, r7
 8000b90:	e883 0003 	stmia.w	r3, {r0, r1}
	if (inputData.id == MODE) {
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d106      	bne.n	8000ba8 <Controller_SetInputData+0x20>
		controlData.id = MODE;
 8000b9a:	4b10      	ldr	r3, [pc, #64]	@ (8000bdc <Controller_SetInputData+0x54>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	601a      	str	r2, [r3, #0]
		controlData.data = MODE_ACT;
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8000bdc <Controller_SetInputData+0x54>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	605a      	str	r2, [r3, #4]
	}
	else if (inputData.id == STOPWATCH_CLEAR) {
		controlData.id = STOPWATCH_CLEAR;
		controlData.data = MODE_ACT;
	}
}
 8000ba6:	e012      	b.n	8000bce <Controller_SetInputData+0x46>
	else if (inputData.id == STOPWATCH_RUN_STOP) {
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	d106      	bne.n	8000bbc <Controller_SetInputData+0x34>
		controlData.id = STOPWATCH_RUN_STOP;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	@ (8000bdc <Controller_SetInputData+0x54>)
 8000bb0:	2202      	movs	r2, #2
 8000bb2:	601a      	str	r2, [r3, #0]
		controlData.data = MODE_ACT;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	@ (8000bdc <Controller_SetInputData+0x54>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	605a      	str	r2, [r3, #4]
}
 8000bba:	e008      	b.n	8000bce <Controller_SetInputData+0x46>
	else if (inputData.id == STOPWATCH_CLEAR) {
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	2b03      	cmp	r3, #3
 8000bc0:	d105      	bne.n	8000bce <Controller_SetInputData+0x46>
		controlData.id = STOPWATCH_CLEAR;
 8000bc2:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <Controller_SetInputData+0x54>)
 8000bc4:	2203      	movs	r2, #3
 8000bc6:	601a      	str	r2, [r3, #0]
		controlData.data = MODE_ACT;
 8000bc8:	4b04      	ldr	r3, [pc, #16]	@ (8000bdc <Controller_SetInputData+0x54>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	605a      	str	r2, [r3, #4]
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	20000184 	.word	0x20000184

08000be0 <Controller_Mode>:

void Controller_Mode()
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
	switch(modeState)
 8000be4:	4b11      	ldr	r3, [pc, #68]	@ (8000c2c <Controller_Mode+0x4c>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d002      	beq.n	8000bf2 <Controller_Mode+0x12>
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d00d      	beq.n	8000c0c <Controller_Mode+0x2c>
			//FND_WriteDp(FND_DP_1000|FND_DP_100|FND_DP_10|FND_DP_1, FND_DP_OFF);
		}
		StopWatch_Excute();
		break;
	}
}
 8000bf0:	e019      	b.n	8000c26 <Controller_Mode+0x46>
		if (controlData.id == MODE) {
 8000bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c30 <Controller_Mode+0x50>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d105      	bne.n	8000c06 <Controller_Mode+0x26>
			controlData.id = NO_CONTROL;
 8000bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000c30 <Controller_Mode+0x50>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
			modeState = STOP_WATCH;
 8000c00:	4b0a      	ldr	r3, [pc, #40]	@ (8000c2c <Controller_Mode+0x4c>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	701a      	strb	r2, [r3, #0]
		TimeWatch_Excute();
 8000c06:	f000 fad3 	bl	80011b0 <TimeWatch_Excute>
		break;
 8000c0a:	e00c      	b.n	8000c26 <Controller_Mode+0x46>
		if (controlData.id == MODE) {
 8000c0c:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <Controller_Mode+0x50>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d105      	bne.n	8000c20 <Controller_Mode+0x40>
			controlData.id = NO_CONTROL;
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <Controller_Mode+0x50>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
			modeState = TIME_WATCH;
 8000c1a:	4b04      	ldr	r3, [pc, #16]	@ (8000c2c <Controller_Mode+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	701a      	strb	r2, [r3, #0]
		StopWatch_Excute();
 8000c20:	f000 fa12 	bl	8001048 <StopWatch_Excute>
		break;
 8000c24:	bf00      	nop
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	2000018c 	.word	0x2000018c
 8000c30:	20000184 	.word	0x20000184

08000c34 <Listener_Init>:
#include "Listener.h"

static void Listener_CheckButton(); // 외부 호출 x

void Listener_Init()
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
	Button_Init(&hBtnMode, GPIOB, GPIO_PIN_5);
 8000c38:	2220      	movs	r2, #32
 8000c3a:	4908      	ldr	r1, [pc, #32]	@ (8000c5c <Listener_Init+0x28>)
 8000c3c:	4808      	ldr	r0, [pc, #32]	@ (8000c60 <Listener_Init+0x2c>)
 8000c3e:	f000 fac3 	bl	80011c8 <Button_Init>
	Button_Init(&hBtnRunStop, GPIOB, GPIO_PIN_3);
 8000c42:	2208      	movs	r2, #8
 8000c44:	4905      	ldr	r1, [pc, #20]	@ (8000c5c <Listener_Init+0x28>)
 8000c46:	4807      	ldr	r0, [pc, #28]	@ (8000c64 <Listener_Init+0x30>)
 8000c48:	f000 fabe 	bl	80011c8 <Button_Init>
	Button_Init(&hBtnClear, GPIOA, GPIO_PIN_10);
 8000c4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c50:	4905      	ldr	r1, [pc, #20]	@ (8000c68 <Listener_Init+0x34>)
 8000c52:	4806      	ldr	r0, [pc, #24]	@ (8000c6c <Listener_Init+0x38>)
 8000c54:	f000 fab8 	bl	80011c8 <Button_Init>
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40020400 	.word	0x40020400
 8000c60:	20000190 	.word	0x20000190
 8000c64:	2000019c 	.word	0x2000019c
 8000c68:	40020000 	.word	0x40020000
 8000c6c:	200001a8 	.word	0x200001a8

08000c70 <Listener_Excute>:

void Listener_Excute()
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
	Listener_CheckButton();
 8000c74:	f000 f802 	bl	8000c7c <Listener_CheckButton>
}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <Listener_CheckButton>:

void Listener_CheckButton()
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
	inputData_TypeDef inputData;

	if (Button_GetState(&hBtnMode) == ACT_RELEASED) {
 8000c82:	4819      	ldr	r0, [pc, #100]	@ (8000ce8 <Listener_CheckButton+0x6c>)
 8000c84:	f000 fab6 	bl	80011f4 <Button_GetState>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d109      	bne.n	8000ca2 <Listener_CheckButton+0x26>
		inputData.id = MODE;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	603b      	str	r3, [r7, #0]
		inputData.data = MODE_ACT;
 8000c92:	2301      	movs	r3, #1
 8000c94:	607b      	str	r3, [r7, #4]
		Controller_SetInputData(inputData);
 8000c96:	463b      	mov	r3, r7
 8000c98:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c9c:	f7ff ff74 	bl	8000b88 <Controller_SetInputData>
	else if (Button_GetState(&hBtnClear) == ACT_PUSHED) {
		inputData.id = STOPWATCH_CLEAR;
		inputData.data = MODE_ACT;
		Controller_SetInputData(inputData);
	}
}
 8000ca0:	e01e      	b.n	8000ce0 <Listener_CheckButton+0x64>
	else if (Button_GetState(&hBtnRunStop) == ACT_PUSHED) {
 8000ca2:	4812      	ldr	r0, [pc, #72]	@ (8000cec <Listener_CheckButton+0x70>)
 8000ca4:	f000 faa6 	bl	80011f4 <Button_GetState>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d109      	bne.n	8000cc2 <Listener_CheckButton+0x46>
		inputData.id = STOPWATCH_RUN_STOP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	603b      	str	r3, [r7, #0]
		inputData.data = MODE_ACT;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	607b      	str	r3, [r7, #4]
		Controller_SetInputData(inputData);
 8000cb6:	463b      	mov	r3, r7
 8000cb8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000cbc:	f7ff ff64 	bl	8000b88 <Controller_SetInputData>
}
 8000cc0:	e00e      	b.n	8000ce0 <Listener_CheckButton+0x64>
	else if (Button_GetState(&hBtnClear) == ACT_PUSHED) {
 8000cc2:	480b      	ldr	r0, [pc, #44]	@ (8000cf0 <Listener_CheckButton+0x74>)
 8000cc4:	f000 fa96 	bl	80011f4 <Button_GetState>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d108      	bne.n	8000ce0 <Listener_CheckButton+0x64>
		inputData.id = STOPWATCH_CLEAR;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	603b      	str	r3, [r7, #0]
		inputData.data = MODE_ACT;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	607b      	str	r3, [r7, #4]
		Controller_SetInputData(inputData);
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000cdc:	f7ff ff54 	bl	8000b88 <Controller_SetInputData>
}
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000190 	.word	0x20000190
 8000cec:	2000019c 	.word	0x2000019c
 8000cf0:	200001a8 	.word	0x200001a8

08000cf4 <Presenter_OutData>:
static void Presenter_DispMonitorStopWatch(watch_t watchData);

static watch_t dispData = {TIME_WATCH,12,0,0,0};

void Presenter_OutData(watch_t watchData)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	463b      	mov	r3, r7
 8000cfc:	e883 0003 	stmia.w	r3, {r0, r1}
   memcpy(&dispData, &watchData, sizeof(watch_t)); // data copy (watchData -> dispData)
 8000d00:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <Presenter_OutData+0x28>)
 8000d02:	463a      	mov	r2, r7
 8000d04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d08:	6018      	str	r0, [r3, #0]
 8000d0a:	3304      	adds	r3, #4
 8000d0c:	8019      	strh	r1, [r3, #0]
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	20000004 	.word	0x20000004

08000d20 <Presenter_Excute>:

void Presenter_Excute()
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
   if (dispData.id == TIME_WATCH) {
 8000d24:	4b08      	ldr	r3, [pc, #32]	@ (8000d48 <Presenter_Excute+0x28>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d105      	bne.n	8000d38 <Presenter_Excute+0x18>
      Presenter_DispTimeWatch(dispData);
 8000d2c:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <Presenter_Excute+0x28>)
 8000d2e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d32:	f000 f80b 	bl	8000d4c <Presenter_DispTimeWatch>
   } else {
      Presenter_DispStopWatch(dispData);
   }
}
 8000d36:	e004      	b.n	8000d42 <Presenter_Excute+0x22>
      Presenter_DispStopWatch(dispData);
 8000d38:	4b03      	ldr	r3, [pc, #12]	@ (8000d48 <Presenter_Excute+0x28>)
 8000d3a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d3e:	f000 f819 	bl	8000d74 <Presenter_DispStopWatch>
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000004 	.word	0x20000004

08000d4c <Presenter_DispTimeWatch>:

void Presenter_DispTimeWatch(watch_t watchData)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	463b      	mov	r3, r7
 8000d54:	e883 0003 	stmia.w	r3, {r0, r1}
   Presenter_DispFndTimeWatch(watchData);
 8000d58:	463b      	mov	r3, r7
 8000d5a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d5e:	f000 f81d 	bl	8000d9c <Presenter_DispFndTimeWatch>
   Presenter_DispMonitorTimeWatch(watchData);
 8000d62:	463b      	mov	r3, r7
 8000d64:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d68:	f000 f89e 	bl	8000ea8 <Presenter_DispMonitorTimeWatch>
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <Presenter_DispStopWatch>:

void Presenter_DispStopWatch(watch_t watchData)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	e883 0003 	stmia.w	r3, {r0, r1}
   Presenter_DispFndStopWatch(watchData);
 8000d80:	463b      	mov	r3, r7
 8000d82:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d86:	f000 f835 	bl	8000df4 <Presenter_DispFndStopWatch>
   Presenter_DispMonitorStopWatch(watchData);
 8000d8a:	463b      	mov	r3, r7
 8000d8c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d90:	f000 f8b6 	bl	8000f00 <Presenter_DispMonitorStopWatch>
}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <Presenter_DispFndTimeWatch>:

void Presenter_DispFndTimeWatch(watch_t watchData)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	463b      	mov	r3, r7
 8000da4:	e883 0003 	stmia.w	r3, {r0, r1}
   FND_WriteData(watchData.hour*100 + watchData.min);
 8000da8:	787b      	ldrb	r3, [r7, #1]
 8000daa:	461a      	mov	r2, r3
 8000dac:	0092      	lsls	r2, r2, #2
 8000dae:	4413      	add	r3, r2
 8000db0:	461a      	mov	r2, r3
 8000db2:	0091      	lsls	r1, r2, #2
 8000db4:	461a      	mov	r2, r3
 8000db6:	460b      	mov	r3, r1
 8000db8:	4413      	add	r3, r2
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	78ba      	ldrb	r2, [r7, #2]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f000 fa71 	bl	80012ac <FND_WriteData>

   FND_WriteDp(FND_DP_1000|FND_DP_1|FND_DP_10, FND_DP_OFF);
 8000dca:	2100      	movs	r1, #0
 8000dcc:	200b      	movs	r0, #11
 8000dce:	f000 fa43 	bl	8001258 <FND_WriteDp>

   if(watchData.msec < 500){
 8000dd2:	88bb      	ldrh	r3, [r7, #4]
 8000dd4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000dd8:	d204      	bcs.n	8000de4 <Presenter_DispFndTimeWatch+0x48>
      FND_WriteDp(FND_DP_100, FND_DP_ON);
 8000dda:	2101      	movs	r1, #1
 8000ddc:	2004      	movs	r0, #4
 8000dde:	f000 fa3b 	bl	8001258 <FND_WriteDp>
   } else {
       FND_WriteDp(FND_DP_100, FND_DP_OFF);
   }
}
 8000de2:	e003      	b.n	8000dec <Presenter_DispFndTimeWatch+0x50>
       FND_WriteDp(FND_DP_100, FND_DP_OFF);
 8000de4:	2100      	movs	r1, #0
 8000de6:	2004      	movs	r0, #4
 8000de8:	f000 fa36 	bl	8001258 <FND_WriteDp>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <Presenter_DispFndStopWatch>:

void Presenter_DispFndStopWatch(watch_t watchData)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	e883 0003 	stmia.w	r3, {r0, r1}
   FND_WriteData((watchData.min %10 * 1000) + (watchData.sec*10)+(watchData.msec/100));
 8000e00:	78ba      	ldrb	r2, [r7, #2]
 8000e02:	4b27      	ldr	r3, [pc, #156]	@ (8000ea0 <Presenter_DispFndStopWatch+0xac>)
 8000e04:	fba3 1302 	umull	r1, r3, r3, r2
 8000e08:	08d9      	lsrs	r1, r3, #3
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	440b      	add	r3, r1
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	461a      	mov	r2, r3
 8000e18:	0152      	lsls	r2, r2, #5
 8000e1a:	1ad2      	subs	r2, r2, r3
 8000e1c:	0092      	lsls	r2, r2, #2
 8000e1e:	4413      	add	r3, r2
 8000e20:	00db      	lsls	r3, r3, #3
 8000e22:	b29a      	uxth	r2, r3
 8000e24:	78fb      	ldrb	r3, [r7, #3]
 8000e26:	4619      	mov	r1, r3
 8000e28:	0089      	lsls	r1, r1, #2
 8000e2a:	440b      	add	r3, r1
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	4413      	add	r3, r2
 8000e32:	b29a      	uxth	r2, r3
 8000e34:	88bb      	ldrh	r3, [r7, #4]
 8000e36:	491b      	ldr	r1, [pc, #108]	@ (8000ea4 <Presenter_DispFndStopWatch+0xb0>)
 8000e38:	fba1 1303 	umull	r1, r3, r1, r3
 8000e3c:	095b      	lsrs	r3, r3, #5
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	4413      	add	r3, r2
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 fa31 	bl	80012ac <FND_WriteData>

   FND_WriteDp(FND_DP_100|FND_DP_1, FND_DP_OFF);
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	2005      	movs	r0, #5
 8000e4e:	f000 fa03 	bl	8001258 <FND_WriteDp>

   if (watchData.msec%100 < 50){            //
 8000e52:	88bb      	ldrh	r3, [r7, #4]
 8000e54:	4a13      	ldr	r2, [pc, #76]	@ (8000ea4 <Presenter_DispFndStopWatch+0xb0>)
 8000e56:	fba2 1203 	umull	r1, r2, r2, r3
 8000e5a:	0952      	lsrs	r2, r2, #5
 8000e5c:	2164      	movs	r1, #100	@ 0x64
 8000e5e:	fb01 f202 	mul.w	r2, r1, r2
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	2b31      	cmp	r3, #49	@ 0x31
 8000e68:	d804      	bhi.n	8000e74 <Presenter_DispFndStopWatch+0x80>
      FND_WriteDp(FND_DP_10, FND_DP_ON);
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	2002      	movs	r0, #2
 8000e6e:	f000 f9f3 	bl	8001258 <FND_WriteDp>
 8000e72:	e003      	b.n	8000e7c <Presenter_DispFndStopWatch+0x88>
   } else {
      FND_WriteDp(FND_DP_10, FND_DP_OFF);
 8000e74:	2100      	movs	r1, #0
 8000e76:	2002      	movs	r0, #2
 8000e78:	f000 f9ee 	bl	8001258 <FND_WriteDp>
   }

   if (watchData.msec < 500){
 8000e7c:	88bb      	ldrh	r3, [r7, #4]
 8000e7e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000e82:	d204      	bcs.n	8000e8e <Presenter_DispFndStopWatch+0x9a>
      FND_WriteDp(FND_DP_1000, FND_DP_ON);
 8000e84:	2101      	movs	r1, #1
 8000e86:	2008      	movs	r0, #8
 8000e88:	f000 f9e6 	bl	8001258 <FND_WriteDp>
   } else {
      FND_WriteDp(FND_DP_1000, FND_DP_OFF);
   }
}
 8000e8c:	e003      	b.n	8000e96 <Presenter_DispFndStopWatch+0xa2>
      FND_WriteDp(FND_DP_1000, FND_DP_OFF);
 8000e8e:	2100      	movs	r1, #0
 8000e90:	2008      	movs	r0, #8
 8000e92:	f000 f9e1 	bl	8001258 <FND_WriteDp>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	cccccccd 	.word	0xcccccccd
 8000ea4:	51eb851f 	.word	0x51eb851f

08000ea8 <Presenter_DispMonitorTimeWatch>:

void Presenter_DispMonitorTimeWatch(watch_t watchData)
{
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b093      	sub	sp, #76	@ 0x4c
 8000eac:	af02      	add	r7, sp, #8
 8000eae:	463b      	mov	r3, r7
 8000eb0:	e883 0003 	stmia.w	r3, {r0, r1}
   char str[50];
   sprintf(str, "Time Watch : %02d:%02d:%02d.%03d\n", watchData.hour, watchData.min, watchData.sec, watchData.msec);
 8000eb4:	787b      	ldrb	r3, [r7, #1]
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	78bb      	ldrb	r3, [r7, #2]
 8000eba:	461c      	mov	r4, r3
 8000ebc:	78fb      	ldrb	r3, [r7, #3]
 8000ebe:	88ba      	ldrh	r2, [r7, #4]
 8000ec0:	f107 000c 	add.w	r0, r7, #12
 8000ec4:	9201      	str	r2, [sp, #4]
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	4623      	mov	r3, r4
 8000eca:	460a      	mov	r2, r1
 8000ecc:	490a      	ldr	r1, [pc, #40]	@ (8000ef8 <Presenter_DispMonitorTimeWatch+0x50>)
 8000ece:	f002 fbf7 	bl	80036c0 <siprintf>
   HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8000ed2:	f107 030c 	add.w	r3, r7, #12
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff f982 	bl	80001e0 <strlen>
 8000edc:	4603      	mov	r3, r0
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	f107 010c 	add.w	r1, r7, #12
 8000ee4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ee8:	4804      	ldr	r0, [pc, #16]	@ (8000efc <Presenter_DispMonitorTimeWatch+0x54>)
 8000eea:	f002 f82d 	bl	8002f48 <HAL_UART_Transmit>
}
 8000eee:	bf00      	nop
 8000ef0:	3744      	adds	r7, #68	@ 0x44
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd90      	pop	{r4, r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	08004018 	.word	0x08004018
 8000efc:	2000013c 	.word	0x2000013c

08000f00 <Presenter_DispMonitorStopWatch>:

void Presenter_DispMonitorStopWatch(watch_t watchData)
{
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b093      	sub	sp, #76	@ 0x4c
 8000f04:	af02      	add	r7, sp, #8
 8000f06:	463b      	mov	r3, r7
 8000f08:	e883 0003 	stmia.w	r3, {r0, r1}
   char str[50];
   sprintf(str, "Stop Watch : %02d:%02d:%02d.%03d\n", watchData.hour, watchData.min, watchData.sec, watchData.msec);
 8000f0c:	787b      	ldrb	r3, [r7, #1]
 8000f0e:	4619      	mov	r1, r3
 8000f10:	78bb      	ldrb	r3, [r7, #2]
 8000f12:	461c      	mov	r4, r3
 8000f14:	78fb      	ldrb	r3, [r7, #3]
 8000f16:	88ba      	ldrh	r2, [r7, #4]
 8000f18:	f107 000c 	add.w	r0, r7, #12
 8000f1c:	9201      	str	r2, [sp, #4]
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	4623      	mov	r3, r4
 8000f22:	460a      	mov	r2, r1
 8000f24:	490a      	ldr	r1, [pc, #40]	@ (8000f50 <Presenter_DispMonitorStopWatch+0x50>)
 8000f26:	f002 fbcb 	bl	80036c0 <siprintf>
   HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8000f2a:	f107 030c 	add.w	r3, r7, #12
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff f956 	bl	80001e0 <strlen>
 8000f34:	4603      	mov	r3, r0
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	f107 010c 	add.w	r1, r7, #12
 8000f3c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f40:	4804      	ldr	r0, [pc, #16]	@ (8000f54 <Presenter_DispMonitorStopWatch+0x54>)
 8000f42:	f002 f801 	bl	8002f48 <HAL_UART_Transmit>
}
 8000f46:	bf00      	nop
 8000f48:	3744      	adds	r7, #68	@ 0x44
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd90      	pop	{r4, r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	0800403c 	.word	0x0800403c
 8000f54:	2000013c 	.word	0x2000013c

08000f58 <HAL_TIM_PeriodElapsedCallback>:

#include "ap_main.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]

  if(htim->Instance == TIM2){
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f68:	d105      	bne.n	8000f76 <HAL_TIM_PeriodElapsedCallback+0x1e>
	  FND_DispDataCallBack();
 8000f6a:	f000 f9af 	bl	80012cc <FND_DispDataCallBack>

	  TimeWatch_IncTimeCallBack();
 8000f6e:	f000 f8dd 	bl	800112c <TimeWatch_IncTimeCallBack>
	  StopWatch_IncTimeCallBack();
 8000f72:	f000 f81b 	bl	8000fac <StopWatch_IncTimeCallBack>
  }
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <ap_main>:

int ap_main()
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Start_IT(&htim2);
 8000f84:	4805      	ldr	r0, [pc, #20]	@ (8000f9c <ap_main+0x1c>)
 8000f86:	f001 fbab 	bl	80026e0 <HAL_TIM_Base_Start_IT>
	while(1)
	{
		Listener_Excute();
 8000f8a:	f7ff fe71 	bl	8000c70 <Listener_Excute>
		Controller_Excute();
 8000f8e:	f7ff fdf4 	bl	8000b7a <Controller_Excute>
		Presenter_Excute();
 8000f92:	f7ff fec5 	bl	8000d20 <Presenter_Excute>
	{
 8000f96:	bf00      	nop
 8000f98:	e7f7      	b.n	8000f8a <ap_main+0xa>
 8000f9a:	bf00      	nop
 8000f9c:	200000f4 	.word	0x200000f4

08000fa0 <ap_init>:
	return 0;
}


void ap_init()
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
	Listener_Init();
 8000fa4:	f7ff fe46 	bl	8000c34 <Listener_Init>
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}

08000fac <StopWatch_IncTimeCallBack>:
static stopWatchState_t stopWatchState = STOP;
extern inputData_TypeDef controlData;
static watch_t stopWatch = {STOP_WATCH, 0, 0, 0, 0};

void StopWatch_IncTimeCallBack()
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
   if (stopWatchState == RUN){
 8000fb0:	4b03      	ldr	r3, [pc, #12]	@ (8000fc0 <StopWatch_IncTimeCallBack+0x14>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d101      	bne.n	8000fbc <StopWatch_IncTimeCallBack+0x10>
      StopWatch_IncTime();
 8000fb8:	f000 f804 	bl	8000fc4 <StopWatch_IncTime>
   }
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	2000018d 	.word	0x2000018d

08000fc4 <StopWatch_IncTime>:

void StopWatch_IncTime()
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
   if(stopWatch.msec < 1000-1){
 8000fc8:	4b1e      	ldr	r3, [pc, #120]	@ (8001044 <StopWatch_IncTime+0x80>)
 8000fca:	889b      	ldrh	r3, [r3, #4]
 8000fcc:	f240 32e6 	movw	r2, #998	@ 0x3e6
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d806      	bhi.n	8000fe2 <StopWatch_IncTime+0x1e>
      stopWatch.msec++;
 8000fd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001044 <StopWatch_IncTime+0x80>)
 8000fd6:	889b      	ldrh	r3, [r3, #4]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	b29a      	uxth	r2, r3
 8000fdc:	4b19      	ldr	r3, [pc, #100]	@ (8001044 <StopWatch_IncTime+0x80>)
 8000fde:	809a      	strh	r2, [r3, #4]
      return;
 8000fe0:	e02c      	b.n	800103c <StopWatch_IncTime+0x78>
   }
   stopWatch.msec = 0;
 8000fe2:	4b18      	ldr	r3, [pc, #96]	@ (8001044 <StopWatch_IncTime+0x80>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	809a      	strh	r2, [r3, #4]

   if (stopWatch.sec < 60-1) {
 8000fe8:	4b16      	ldr	r3, [pc, #88]	@ (8001044 <StopWatch_IncTime+0x80>)
 8000fea:	78db      	ldrb	r3, [r3, #3]
 8000fec:	2b3a      	cmp	r3, #58	@ 0x3a
 8000fee:	d806      	bhi.n	8000ffe <StopWatch_IncTime+0x3a>
      stopWatch.sec++;
 8000ff0:	4b14      	ldr	r3, [pc, #80]	@ (8001044 <StopWatch_IncTime+0x80>)
 8000ff2:	78db      	ldrb	r3, [r3, #3]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	4b12      	ldr	r3, [pc, #72]	@ (8001044 <StopWatch_IncTime+0x80>)
 8000ffa:	70da      	strb	r2, [r3, #3]
      return;
 8000ffc:	e01e      	b.n	800103c <StopWatch_IncTime+0x78>
   }
   stopWatch.sec = 0;
 8000ffe:	4b11      	ldr	r3, [pc, #68]	@ (8001044 <StopWatch_IncTime+0x80>)
 8001000:	2200      	movs	r2, #0
 8001002:	70da      	strb	r2, [r3, #3]

   if (stopWatch.min < 60-1) {
 8001004:	4b0f      	ldr	r3, [pc, #60]	@ (8001044 <StopWatch_IncTime+0x80>)
 8001006:	789b      	ldrb	r3, [r3, #2]
 8001008:	2b3a      	cmp	r3, #58	@ 0x3a
 800100a:	d806      	bhi.n	800101a <StopWatch_IncTime+0x56>
      stopWatch.min++;
 800100c:	4b0d      	ldr	r3, [pc, #52]	@ (8001044 <StopWatch_IncTime+0x80>)
 800100e:	789b      	ldrb	r3, [r3, #2]
 8001010:	3301      	adds	r3, #1
 8001012:	b2da      	uxtb	r2, r3
 8001014:	4b0b      	ldr	r3, [pc, #44]	@ (8001044 <StopWatch_IncTime+0x80>)
 8001016:	709a      	strb	r2, [r3, #2]
      return;
 8001018:	e010      	b.n	800103c <StopWatch_IncTime+0x78>
   }
   stopWatch.min = 0;
 800101a:	4b0a      	ldr	r3, [pc, #40]	@ (8001044 <StopWatch_IncTime+0x80>)
 800101c:	2200      	movs	r2, #0
 800101e:	709a      	strb	r2, [r3, #2]

   if (stopWatch.hour < 24-1) {
 8001020:	4b08      	ldr	r3, [pc, #32]	@ (8001044 <StopWatch_IncTime+0x80>)
 8001022:	785b      	ldrb	r3, [r3, #1]
 8001024:	2b16      	cmp	r3, #22
 8001026:	d806      	bhi.n	8001036 <StopWatch_IncTime+0x72>
      stopWatch.hour++;
 8001028:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <StopWatch_IncTime+0x80>)
 800102a:	785b      	ldrb	r3, [r3, #1]
 800102c:	3301      	adds	r3, #1
 800102e:	b2da      	uxtb	r2, r3
 8001030:	4b04      	ldr	r3, [pc, #16]	@ (8001044 <StopWatch_IncTime+0x80>)
 8001032:	705a      	strb	r2, [r3, #1]
      return;
 8001034:	e002      	b.n	800103c <StopWatch_IncTime+0x78>
   }
   stopWatch.hour = 0;
 8001036:	4b03      	ldr	r3, [pc, #12]	@ (8001044 <StopWatch_IncTime+0x80>)
 8001038:	2200      	movs	r2, #0
 800103a:	705a      	strb	r2, [r3, #1]
}
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	2000000c 	.word	0x2000000c

08001048 <StopWatch_Excute>:

void StopWatch_Excute()
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
   switch (stopWatchState)
 800104c:	4b0d      	ldr	r3, [pc, #52]	@ (8001084 <StopWatch_Excute+0x3c>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b02      	cmp	r3, #2
 8001052:	d00c      	beq.n	800106e <StopWatch_Excute+0x26>
 8001054:	2b02      	cmp	r3, #2
 8001056:	dc0d      	bgt.n	8001074 <StopWatch_Excute+0x2c>
 8001058:	2b00      	cmp	r3, #0
 800105a:	d002      	beq.n	8001062 <StopWatch_Excute+0x1a>
 800105c:	2b01      	cmp	r3, #1
 800105e:	d003      	beq.n	8001068 <StopWatch_Excute+0x20>
 8001060:	e008      	b.n	8001074 <StopWatch_Excute+0x2c>
   {
   case STOP:
      StopWatch_Stop();
 8001062:	f000 f813 	bl	800108c <StopWatch_Stop>
      break;
 8001066:	e005      	b.n	8001074 <StopWatch_Excute+0x2c>
   case RUN:
      StopWatch_Run();
 8001068:	f000 f830 	bl	80010cc <StopWatch_Run>
      break;
 800106c:	e002      	b.n	8001074 <StopWatch_Excute+0x2c>
   case CLEAR:
      StopWatch_Clear();
 800106e:	f000 f843 	bl	80010f8 <StopWatch_Clear>
      break;
 8001072:	bf00      	nop
   }
   Presenter_OutData(stopWatch);
 8001074:	4b04      	ldr	r3, [pc, #16]	@ (8001088 <StopWatch_Excute+0x40>)
 8001076:	e893 0003 	ldmia.w	r3, {r0, r1}
 800107a:	f7ff fe3b 	bl	8000cf4 <Presenter_OutData>
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	2000018d 	.word	0x2000018d
 8001088:	2000000c 	.word	0x2000000c

0800108c <StopWatch_Stop>:

void StopWatch_Stop()
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
   if (controlData.id == STOPWATCH_RUN_STOP) {
 8001090:	4b0c      	ldr	r3, [pc, #48]	@ (80010c4 <StopWatch_Stop+0x38>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b02      	cmp	r3, #2
 8001096:	d106      	bne.n	80010a6 <StopWatch_Stop+0x1a>
	   controlData.id = NO_CONTROL;
 8001098:	4b0a      	ldr	r3, [pc, #40]	@ (80010c4 <StopWatch_Stop+0x38>)
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
       stopWatchState = RUN;
 800109e:	4b0a      	ldr	r3, [pc, #40]	@ (80010c8 <StopWatch_Stop+0x3c>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	701a      	strb	r2, [r3, #0]
   else if (controlData.id == STOPWATCH_CLEAR) {
	   controlData.id = NO_CONTROL;
       stopWatchState = CLEAR;
   }
   //FND_WriteData((stopWatch.min % 10 * 1000) + (stopWatch.sec * 10) + (stopWatch.msec/100));
}
 80010a4:	e009      	b.n	80010ba <StopWatch_Stop+0x2e>
   else if (controlData.id == STOPWATCH_CLEAR) {
 80010a6:	4b07      	ldr	r3, [pc, #28]	@ (80010c4 <StopWatch_Stop+0x38>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2b03      	cmp	r3, #3
 80010ac:	d105      	bne.n	80010ba <StopWatch_Stop+0x2e>
	   controlData.id = NO_CONTROL;
 80010ae:	4b05      	ldr	r3, [pc, #20]	@ (80010c4 <StopWatch_Stop+0x38>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
       stopWatchState = CLEAR;
 80010b4:	4b04      	ldr	r3, [pc, #16]	@ (80010c8 <StopWatch_Stop+0x3c>)
 80010b6:	2202      	movs	r2, #2
 80010b8:	701a      	strb	r2, [r3, #0]
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	20000184 	.word	0x20000184
 80010c8:	2000018d 	.word	0x2000018d

080010cc <StopWatch_Run>:

void StopWatch_Run()
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
	if (controlData.id == STOPWATCH_RUN_STOP) {
 80010d0:	4b07      	ldr	r3, [pc, #28]	@ (80010f0 <StopWatch_Run+0x24>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d105      	bne.n	80010e4 <StopWatch_Run+0x18>
	  controlData.id = NO_CONTROL;
 80010d8:	4b05      	ldr	r3, [pc, #20]	@ (80010f0 <StopWatch_Run+0x24>)
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
      stopWatchState = STOP;
 80010de:	4b05      	ldr	r3, [pc, #20]	@ (80010f4 <StopWatch_Run+0x28>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
   }
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000184 	.word	0x20000184
 80010f4:	2000018d 	.word	0x2000018d

080010f8 <StopWatch_Clear>:

void StopWatch_Clear()
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
   stopWatchState = STOP;
 80010fc:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <StopWatch_Clear+0x2c>)
 80010fe:	2200      	movs	r2, #0
 8001100:	701a      	strb	r2, [r3, #0]
   stopWatch.msec = 0;
 8001102:	4b09      	ldr	r3, [pc, #36]	@ (8001128 <StopWatch_Clear+0x30>)
 8001104:	2200      	movs	r2, #0
 8001106:	809a      	strh	r2, [r3, #4]
   stopWatch.sec = 0;
 8001108:	4b07      	ldr	r3, [pc, #28]	@ (8001128 <StopWatch_Clear+0x30>)
 800110a:	2200      	movs	r2, #0
 800110c:	70da      	strb	r2, [r3, #3]
   stopWatch.min = 0;
 800110e:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <StopWatch_Clear+0x30>)
 8001110:	2200      	movs	r2, #0
 8001112:	709a      	strb	r2, [r3, #2]
   stopWatch.hour = 0;
 8001114:	4b04      	ldr	r3, [pc, #16]	@ (8001128 <StopWatch_Clear+0x30>)
 8001116:	2200      	movs	r2, #0
 8001118:	705a      	strb	r2, [r3, #1]
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	2000018d 	.word	0x2000018d
 8001128:	2000000c 	.word	0x2000000c

0800112c <TimeWatch_IncTimeCallBack>:
#include "timeWatch.h"

static watch_t timeWatch = {TIME_WATCH, 12,0,0,0};

void TimeWatch_IncTimeCallBack()
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
   if(timeWatch.msec < 1000-1){
 8001130:	4b1e      	ldr	r3, [pc, #120]	@ (80011ac <TimeWatch_IncTimeCallBack+0x80>)
 8001132:	889b      	ldrh	r3, [r3, #4]
 8001134:	f240 32e6 	movw	r2, #998	@ 0x3e6
 8001138:	4293      	cmp	r3, r2
 800113a:	d806      	bhi.n	800114a <TimeWatch_IncTimeCallBack+0x1e>
      timeWatch.msec++;
 800113c:	4b1b      	ldr	r3, [pc, #108]	@ (80011ac <TimeWatch_IncTimeCallBack+0x80>)
 800113e:	889b      	ldrh	r3, [r3, #4]
 8001140:	3301      	adds	r3, #1
 8001142:	b29a      	uxth	r2, r3
 8001144:	4b19      	ldr	r3, [pc, #100]	@ (80011ac <TimeWatch_IncTimeCallBack+0x80>)
 8001146:	809a      	strh	r2, [r3, #4]
      return;
 8001148:	e02c      	b.n	80011a4 <TimeWatch_IncTimeCallBack+0x78>
   }
   timeWatch.msec = 0;
 800114a:	4b18      	ldr	r3, [pc, #96]	@ (80011ac <TimeWatch_IncTimeCallBack+0x80>)
 800114c:	2200      	movs	r2, #0
 800114e:	809a      	strh	r2, [r3, #4]

   if (timeWatch.sec < 60-1) {
 8001150:	4b16      	ldr	r3, [pc, #88]	@ (80011ac <TimeWatch_IncTimeCallBack+0x80>)
 8001152:	78db      	ldrb	r3, [r3, #3]
 8001154:	2b3a      	cmp	r3, #58	@ 0x3a
 8001156:	d806      	bhi.n	8001166 <TimeWatch_IncTimeCallBack+0x3a>
      timeWatch.sec++;
 8001158:	4b14      	ldr	r3, [pc, #80]	@ (80011ac <TimeWatch_IncTimeCallBack+0x80>)
 800115a:	78db      	ldrb	r3, [r3, #3]
 800115c:	3301      	adds	r3, #1
 800115e:	b2da      	uxtb	r2, r3
 8001160:	4b12      	ldr	r3, [pc, #72]	@ (80011ac <TimeWatch_IncTimeCallBack+0x80>)
 8001162:	70da      	strb	r2, [r3, #3]
      return;
 8001164:	e01e      	b.n	80011a4 <TimeWatch_IncTimeCallBack+0x78>
   }
   timeWatch.sec = 0;
 8001166:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <TimeWatch_IncTimeCallBack+0x80>)
 8001168:	2200      	movs	r2, #0
 800116a:	70da      	strb	r2, [r3, #3]

   if (timeWatch.min < 60-1) {
 800116c:	4b0f      	ldr	r3, [pc, #60]	@ (80011ac <TimeWatch_IncTimeCallBack+0x80>)
 800116e:	789b      	ldrb	r3, [r3, #2]
 8001170:	2b3a      	cmp	r3, #58	@ 0x3a
 8001172:	d806      	bhi.n	8001182 <TimeWatch_IncTimeCallBack+0x56>
      timeWatch.min++;
 8001174:	4b0d      	ldr	r3, [pc, #52]	@ (80011ac <TimeWatch_IncTimeCallBack+0x80>)
 8001176:	789b      	ldrb	r3, [r3, #2]
 8001178:	3301      	adds	r3, #1
 800117a:	b2da      	uxtb	r2, r3
 800117c:	4b0b      	ldr	r3, [pc, #44]	@ (80011ac <TimeWatch_IncTimeCallBack+0x80>)
 800117e:	709a      	strb	r2, [r3, #2]
      return;
 8001180:	e010      	b.n	80011a4 <TimeWatch_IncTimeCallBack+0x78>
   }
   timeWatch.min = 0;
 8001182:	4b0a      	ldr	r3, [pc, #40]	@ (80011ac <TimeWatch_IncTimeCallBack+0x80>)
 8001184:	2200      	movs	r2, #0
 8001186:	709a      	strb	r2, [r3, #2]

   if (timeWatch.hour < 24-1) {
 8001188:	4b08      	ldr	r3, [pc, #32]	@ (80011ac <TimeWatch_IncTimeCallBack+0x80>)
 800118a:	785b      	ldrb	r3, [r3, #1]
 800118c:	2b16      	cmp	r3, #22
 800118e:	d806      	bhi.n	800119e <TimeWatch_IncTimeCallBack+0x72>
      timeWatch.hour++;
 8001190:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <TimeWatch_IncTimeCallBack+0x80>)
 8001192:	785b      	ldrb	r3, [r3, #1]
 8001194:	3301      	adds	r3, #1
 8001196:	b2da      	uxtb	r2, r3
 8001198:	4b04      	ldr	r3, [pc, #16]	@ (80011ac <TimeWatch_IncTimeCallBack+0x80>)
 800119a:	705a      	strb	r2, [r3, #1]
      return;
 800119c:	e002      	b.n	80011a4 <TimeWatch_IncTimeCallBack+0x78>
   }
   timeWatch.hour = 0;
 800119e:	4b03      	ldr	r3, [pc, #12]	@ (80011ac <TimeWatch_IncTimeCallBack+0x80>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	705a      	strb	r2, [r3, #1]
}
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	20000014 	.word	0x20000014

080011b0 <TimeWatch_Excute>:

void TimeWatch_Excute()
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0

   Presenter_OutData(timeWatch);
 80011b4:	4b03      	ldr	r3, [pc, #12]	@ (80011c4 <TimeWatch_Excute+0x14>)
 80011b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011ba:	f7ff fd9b 	bl	8000cf4 <Presenter_OutData>

}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000014 	.word	0x20000014

080011c8 <Button_Init>:
Button_Handler_t hBtnMode;
Button_Handler_t hBtnRunStop;
Button_Handler_t hBtnClear;

void Button_Init(Button_Handler_t *hbtn, GPIO_TypeDef * GPIOx, uint16_t pinNum)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	4613      	mov	r3, r2
 80011d4:	80fb      	strh	r3, [r7, #6]
   hbtn->GPIOx = GPIOx;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	601a      	str	r2, [r3, #0]
   hbtn->pinNum = pinNum;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	88fa      	ldrh	r2, [r7, #6]
 80011e0:	809a      	strh	r2, [r3, #4]
   hbtn->prevState = RELEASED;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	2201      	movs	r2, #1
 80011e6:	609a      	str	r2, [r3, #8]
}
 80011e8:	bf00      	nop
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <Button_GetState>:

button_state_t Button_GetState(Button_Handler_t *hbtn)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]

   uint32_t curState;
   curState = HAL_GPIO_ReadPin(hbtn->GPIOx, hbtn->pinNum);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	889b      	ldrh	r3, [r3, #4]
 8001204:	4619      	mov	r1, r3
 8001206:	4610      	mov	r0, r2
 8001208:	f000 fd50 	bl	8001cac <HAL_GPIO_ReadPin>
 800120c:	4603      	mov	r3, r0
 800120e:	60fb      	str	r3, [r7, #12]

   if ((hbtn->prevState == RELEASED) && (curState == PUSHED)) { // button released -> pushed
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d10a      	bne.n	800122e <Button_GetState+0x3a>
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d107      	bne.n	800122e <Button_GetState+0x3a>
      HAL_Delay(2); // debounce
 800121e:	2002      	movs	r0, #2
 8001220:	f000 fa8a 	bl	8001738 <HAL_Delay>
      hbtn->prevState = PUSHED;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
      return ACT_PUSHED;
 800122a:	2301      	movs	r3, #1
 800122c:	e00f      	b.n	800124e <Button_GetState+0x5a>
   }
   else if ((hbtn->prevState == PUSHED) && (curState == RELEASED)) { // button pushed -> released
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d10a      	bne.n	800124c <Button_GetState+0x58>
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d107      	bne.n	800124c <Button_GetState+0x58>
      HAL_Delay(2); // debounce
 800123c:	2002      	movs	r0, #2
 800123e:	f000 fa7b 	bl	8001738 <HAL_Delay>
      hbtn->prevState = RELEASED;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2201      	movs	r2, #1
 8001246:	609a      	str	r2, [r3, #8]
      return ACT_RELEASED;
 8001248:	2302      	movs	r3, #2
 800124a:	e000      	b.n	800124e <Button_GetState+0x5a>
   }
   return NO_ACT;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <FND_WriteDp>:




void FND_WriteDp(uint8_t dpData, uint8_t dpState)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	460a      	mov	r2, r1
 8001262:	71fb      	strb	r3, [r7, #7]
 8001264:	4613      	mov	r3, r2
 8001266:	71bb      	strb	r3, [r7, #6]
   if(dpState == FND_DP_ON)
 8001268:	79bb      	ldrb	r3, [r7, #6]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d107      	bne.n	800127e <FND_WriteDp+0x26>
      fndDispDp |= dpData;
 800126e:	4b0e      	ldr	r3, [pc, #56]	@ (80012a8 <FND_WriteDp+0x50>)
 8001270:	781a      	ldrb	r2, [r3, #0]
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	4313      	orrs	r3, r2
 8001276:	b2da      	uxtb	r2, r3
 8001278:	4b0b      	ldr	r3, [pc, #44]	@ (80012a8 <FND_WriteDp+0x50>)
 800127a:	701a      	strb	r2, [r3, #0]
   else if(dpState == FND_DP_OFF)
      fndDispDp &= ~dpData;
}
 800127c:	e00e      	b.n	800129c <FND_WriteDp+0x44>
   else if(dpState == FND_DP_OFF)
 800127e:	79bb      	ldrb	r3, [r7, #6]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d10b      	bne.n	800129c <FND_WriteDp+0x44>
      fndDispDp &= ~dpData;
 8001284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001288:	43db      	mvns	r3, r3
 800128a:	b25a      	sxtb	r2, r3
 800128c:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <FND_WriteDp+0x50>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	b25b      	sxtb	r3, r3
 8001292:	4013      	ands	r3, r2
 8001294:	b25b      	sxtb	r3, r3
 8001296:	b2da      	uxtb	r2, r3
 8001298:	4b03      	ldr	r3, [pc, #12]	@ (80012a8 <FND_WriteDp+0x50>)
 800129a:	701a      	strb	r2, [r3, #0]
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	200001b6 	.word	0x200001b6

080012ac <FND_WriteData>:

// write fndDispNum
void FND_WriteData(uint16_t data)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	80fb      	strh	r3, [r7, #6]
   fndDispNum = data;
 80012b6:	4a04      	ldr	r2, [pc, #16]	@ (80012c8 <FND_WriteData+0x1c>)
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	8013      	strh	r3, [r2, #0]
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	200001b4 	.word	0x200001b4

080012cc <FND_DispDataCallBack>:
{
   return fndDispNum;
}
// display fndDispNum
void FND_DispDataCallBack()
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
   static int digitPos = 0;
   // 인터럽트가 발생하면 한 자리씩 출력한다.
   FND_DispOffAll();
 80012d0:	f000 f956 	bl	8001580 <FND_DispOffAll>
   digitPos = (digitPos+1) % 8; // 4에서 8로 변경 0부터 7찍을 수 있게.
 80012d4:	4b8c      	ldr	r3, [pc, #560]	@ (8001508 <FND_DispDataCallBack+0x23c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	3301      	adds	r3, #1
 80012da:	425a      	negs	r2, r3
 80012dc:	f003 0307 	and.w	r3, r3, #7
 80012e0:	f002 0207 	and.w	r2, r2, #7
 80012e4:	bf58      	it	pl
 80012e6:	4253      	negpl	r3, r2
 80012e8:	4a87      	ldr	r2, [pc, #540]	@ (8001508 <FND_DispDataCallBack+0x23c>)
 80012ea:	6013      	str	r3, [r2, #0]
   switch(digitPos)      // 1ms마다 각 자리를 찍는다?
 80012ec:	4b86      	ldr	r3, [pc, #536]	@ (8001508 <FND_DispDataCallBack+0x23c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b07      	cmp	r3, #7
 80012f2:	f200 8106 	bhi.w	8001502 <FND_DispDataCallBack+0x236>
 80012f6:	a201      	add	r2, pc, #4	@ (adr r2, 80012fc <FND_DispDataCallBack+0x30>)
 80012f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012fc:	0800131d 	.word	0x0800131d
 8001300:	08001351 	.word	0x08001351
 8001304:	0800138f 	.word	0x0800138f
 8001308:	080013cd 	.word	0x080013cd
 800130c:	0800140b 	.word	0x0800140b
 8001310:	08001449 	.word	0x08001449
 8001314:	08001487 	.word	0x08001487
 8001318:	080014c5 	.word	0x080014c5
   {
   case DIGIT_1:
      FND_DispOff(digitPos);
 800131c:	4b7a      	ldr	r3, [pc, #488]	@ (8001508 <FND_DispDataCallBack+0x23c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f000 f8fd 	bl	8001520 <FND_DispOff>
      FND_DispDigit(fndDispNum%10);
 8001326:	4b79      	ldr	r3, [pc, #484]	@ (800150c <FND_DispDataCallBack+0x240>)
 8001328:	881a      	ldrh	r2, [r3, #0]
 800132a:	4b79      	ldr	r3, [pc, #484]	@ (8001510 <FND_DispDataCallBack+0x244>)
 800132c:	fba3 1302 	umull	r1, r3, r3, r2
 8001330:	08d9      	lsrs	r1, r3, #3
 8001332:	460b      	mov	r3, r1
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	440b      	add	r3, r1
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	b29b      	uxth	r3, r3
 800133e:	4618      	mov	r0, r3
 8001340:	f000 f940 	bl	80015c4 <FND_DispDigit>
      FND_DispOn(digitPos);
 8001344:	4b70      	ldr	r3, [pc, #448]	@ (8001508 <FND_DispDataCallBack+0x23c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4618      	mov	r0, r3
 800134a:	f000 f901 	bl	8001550 <FND_DispOn>
      break;
 800134e:	e0d8      	b.n	8001502 <FND_DispDataCallBack+0x236>
   case DIGIT_10:
      FND_DispOff(digitPos);
 8001350:	4b6d      	ldr	r3, [pc, #436]	@ (8001508 <FND_DispDataCallBack+0x23c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f000 f8e3 	bl	8001520 <FND_DispOff>
      FND_DispDigit(fndDispNum/10%10);
 800135a:	4b6c      	ldr	r3, [pc, #432]	@ (800150c <FND_DispDataCallBack+0x240>)
 800135c:	881b      	ldrh	r3, [r3, #0]
 800135e:	4a6c      	ldr	r2, [pc, #432]	@ (8001510 <FND_DispDataCallBack+0x244>)
 8001360:	fba2 2303 	umull	r2, r3, r2, r3
 8001364:	08db      	lsrs	r3, r3, #3
 8001366:	b29a      	uxth	r2, r3
 8001368:	4b69      	ldr	r3, [pc, #420]	@ (8001510 <FND_DispDataCallBack+0x244>)
 800136a:	fba3 1302 	umull	r1, r3, r3, r2
 800136e:	08d9      	lsrs	r1, r3, #3
 8001370:	460b      	mov	r3, r1
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	440b      	add	r3, r1
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	b29b      	uxth	r3, r3
 800137c:	4618      	mov	r0, r3
 800137e:	f000 f921 	bl	80015c4 <FND_DispDigit>
      FND_DispOn(digitPos);
 8001382:	4b61      	ldr	r3, [pc, #388]	@ (8001508 <FND_DispDataCallBack+0x23c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f000 f8e2 	bl	8001550 <FND_DispOn>
      break;
 800138c:	e0b9      	b.n	8001502 <FND_DispDataCallBack+0x236>
   case DIGIT_100:
      FND_DispOff(digitPos);
 800138e:	4b5e      	ldr	r3, [pc, #376]	@ (8001508 <FND_DispDataCallBack+0x23c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4618      	mov	r0, r3
 8001394:	f000 f8c4 	bl	8001520 <FND_DispOff>
      FND_DispDigit(fndDispNum/100%10);
 8001398:	4b5c      	ldr	r3, [pc, #368]	@ (800150c <FND_DispDataCallBack+0x240>)
 800139a:	881b      	ldrh	r3, [r3, #0]
 800139c:	4a5d      	ldr	r2, [pc, #372]	@ (8001514 <FND_DispDataCallBack+0x248>)
 800139e:	fba2 2303 	umull	r2, r3, r2, r3
 80013a2:	095b      	lsrs	r3, r3, #5
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	4b5a      	ldr	r3, [pc, #360]	@ (8001510 <FND_DispDataCallBack+0x244>)
 80013a8:	fba3 1302 	umull	r1, r3, r3, r2
 80013ac:	08d9      	lsrs	r1, r3, #3
 80013ae:	460b      	mov	r3, r1
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	440b      	add	r3, r1
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 f902 	bl	80015c4 <FND_DispDigit>
      FND_DispOn(digitPos);
 80013c0:	4b51      	ldr	r3, [pc, #324]	@ (8001508 <FND_DispDataCallBack+0x23c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f000 f8c3 	bl	8001550 <FND_DispOn>
      break;
 80013ca:	e09a      	b.n	8001502 <FND_DispDataCallBack+0x236>
   case DIGIT_1000:
      FND_DispOff(digitPos);
 80013cc:	4b4e      	ldr	r3, [pc, #312]	@ (8001508 <FND_DispDataCallBack+0x23c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f000 f8a5 	bl	8001520 <FND_DispOff>
      FND_DispDigit(fndDispNum/1000%10);
 80013d6:	4b4d      	ldr	r3, [pc, #308]	@ (800150c <FND_DispDataCallBack+0x240>)
 80013d8:	881b      	ldrh	r3, [r3, #0]
 80013da:	4a4f      	ldr	r2, [pc, #316]	@ (8001518 <FND_DispDataCallBack+0x24c>)
 80013dc:	fba2 2303 	umull	r2, r3, r2, r3
 80013e0:	099b      	lsrs	r3, r3, #6
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	4b4a      	ldr	r3, [pc, #296]	@ (8001510 <FND_DispDataCallBack+0x244>)
 80013e6:	fba3 1302 	umull	r1, r3, r3, r2
 80013ea:	08d9      	lsrs	r1, r3, #3
 80013ec:	460b      	mov	r3, r1
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	440b      	add	r3, r1
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	4618      	mov	r0, r3
 80013fa:	f000 f8e3 	bl	80015c4 <FND_DispDigit>
      FND_DispOn(digitPos);
 80013fe:	4b42      	ldr	r3, [pc, #264]	@ (8001508 <FND_DispDataCallBack+0x23c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f000 f8a4 	bl	8001550 <FND_DispOn>
      break;
 8001408:	e07b      	b.n	8001502 <FND_DispDataCallBack+0x236>
   case DIGIT_DP_1:
      FND_DispOff(digitPos);
 800140a:	4b3f      	ldr	r3, [pc, #252]	@ (8001508 <FND_DispDataCallBack+0x23c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f000 f886 	bl	8001520 <FND_DispOff>
      if( fndDispDp & (1<<0)) {
 8001414:	4b41      	ldr	r3, [pc, #260]	@ (800151c <FND_DispDataCallBack+0x250>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <FND_DispDataCallBack+0x15c>
         FND_DispDigit(10);
 8001420:	200a      	movs	r0, #10
 8001422:	f000 f8cf 	bl	80015c4 <FND_DispDigit>
 8001426:	e002      	b.n	800142e <FND_DispDataCallBack+0x162>
      }
      else {
         FND_DispDigit(11);
 8001428:	200b      	movs	r0, #11
 800142a:	f000 f8cb 	bl	80015c4 <FND_DispDigit>
      }
      FND_DispOn(digitPos%4);
 800142e:	4b36      	ldr	r3, [pc, #216]	@ (8001508 <FND_DispDataCallBack+0x23c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	425a      	negs	r2, r3
 8001434:	f003 0303 	and.w	r3, r3, #3
 8001438:	f002 0203 	and.w	r2, r2, #3
 800143c:	bf58      	it	pl
 800143e:	4253      	negpl	r3, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f000 f885 	bl	8001550 <FND_DispOn>
      break;
 8001446:	e05c      	b.n	8001502 <FND_DispDataCallBack+0x236>
   case DIGIT_DP_10:
      FND_DispOff(digitPos);
 8001448:	4b2f      	ldr	r3, [pc, #188]	@ (8001508 <FND_DispDataCallBack+0x23c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4618      	mov	r0, r3
 800144e:	f000 f867 	bl	8001520 <FND_DispOff>
      if( fndDispDp & (1<<1)) {
 8001452:	4b32      	ldr	r3, [pc, #200]	@ (800151c <FND_DispDataCallBack+0x250>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <FND_DispDataCallBack+0x19a>
         FND_DispDigit(10);
 800145e:	200a      	movs	r0, #10
 8001460:	f000 f8b0 	bl	80015c4 <FND_DispDigit>
 8001464:	e002      	b.n	800146c <FND_DispDataCallBack+0x1a0>
      }
      else {
         FND_DispDigit(11);
 8001466:	200b      	movs	r0, #11
 8001468:	f000 f8ac 	bl	80015c4 <FND_DispDigit>
      }
      FND_DispOn(digitPos%4);
 800146c:	4b26      	ldr	r3, [pc, #152]	@ (8001508 <FND_DispDataCallBack+0x23c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	425a      	negs	r2, r3
 8001472:	f003 0303 	and.w	r3, r3, #3
 8001476:	f002 0203 	and.w	r2, r2, #3
 800147a:	bf58      	it	pl
 800147c:	4253      	negpl	r3, r2
 800147e:	4618      	mov	r0, r3
 8001480:	f000 f866 	bl	8001550 <FND_DispOn>
      break;
 8001484:	e03d      	b.n	8001502 <FND_DispDataCallBack+0x236>
   case DIGIT_DP_100:
      FND_DispOff(digitPos);
 8001486:	4b20      	ldr	r3, [pc, #128]	@ (8001508 <FND_DispDataCallBack+0x23c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f000 f848 	bl	8001520 <FND_DispOff>
      if( fndDispDp & (1<<2)) {
 8001490:	4b22      	ldr	r3, [pc, #136]	@ (800151c <FND_DispDataCallBack+0x250>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	2b00      	cmp	r3, #0
 800149a:	d003      	beq.n	80014a4 <FND_DispDataCallBack+0x1d8>
         FND_DispDigit(10);
 800149c:	200a      	movs	r0, #10
 800149e:	f000 f891 	bl	80015c4 <FND_DispDigit>
 80014a2:	e002      	b.n	80014aa <FND_DispDataCallBack+0x1de>
      }
      else {
         FND_DispDigit(11);
 80014a4:	200b      	movs	r0, #11
 80014a6:	f000 f88d 	bl	80015c4 <FND_DispDigit>
      }
      FND_DispOn(digitPos%4);
 80014aa:	4b17      	ldr	r3, [pc, #92]	@ (8001508 <FND_DispDataCallBack+0x23c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	425a      	negs	r2, r3
 80014b0:	f003 0303 	and.w	r3, r3, #3
 80014b4:	f002 0203 	and.w	r2, r2, #3
 80014b8:	bf58      	it	pl
 80014ba:	4253      	negpl	r3, r2
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 f847 	bl	8001550 <FND_DispOn>
      break;
 80014c2:	e01e      	b.n	8001502 <FND_DispDataCallBack+0x236>
   case DIGIT_DP_1000:
      FND_DispOff(digitPos);
 80014c4:	4b10      	ldr	r3, [pc, #64]	@ (8001508 <FND_DispDataCallBack+0x23c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 f829 	bl	8001520 <FND_DispOff>
      if( fndDispDp & (1<<3)) {
 80014ce:	4b13      	ldr	r3, [pc, #76]	@ (800151c <FND_DispDataCallBack+0x250>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	f003 0308 	and.w	r3, r3, #8
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <FND_DispDataCallBack+0x216>
         FND_DispDigit(10);
 80014da:	200a      	movs	r0, #10
 80014dc:	f000 f872 	bl	80015c4 <FND_DispDigit>
 80014e0:	e002      	b.n	80014e8 <FND_DispDataCallBack+0x21c>
      }
      else {
         FND_DispDigit(11);
 80014e2:	200b      	movs	r0, #11
 80014e4:	f000 f86e 	bl	80015c4 <FND_DispDigit>
      }
      FND_DispOn(digitPos%4);
 80014e8:	4b07      	ldr	r3, [pc, #28]	@ (8001508 <FND_DispDataCallBack+0x23c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	425a      	negs	r2, r3
 80014ee:	f003 0303 	and.w	r3, r3, #3
 80014f2:	f002 0203 	and.w	r2, r2, #3
 80014f6:	bf58      	it	pl
 80014f8:	4253      	negpl	r3, r2
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 f828 	bl	8001550 <FND_DispOn>
      break;
 8001500:	bf00      	nop

   }
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	200001b8 	.word	0x200001b8
 800150c:	200001b4 	.word	0x200001b4
 8001510:	cccccccd 	.word	0xcccccccd
 8001514:	51eb851f 	.word	0x51eb851f
 8001518:	10624dd3 	.word	0x10624dd3
 800151c:	200001b6 	.word	0x200001b6

08001520 <FND_DispOff>:


void FND_DispOff(int fndPos)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
   // GPIO_Write(GPIOx, PIn, SET);
   HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, SET);
 8001528:	4a08      	ldr	r2, [pc, #32]	@ (800154c <FND_DispOff+0x2c>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001530:	4a06      	ldr	r2, [pc, #24]	@ (800154c <FND_DispOff+0x2c>)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	4413      	add	r3, r2
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	b29b      	uxth	r3, r3
 800153c:	2201      	movs	r2, #1
 800153e:	4619      	mov	r1, r3
 8001540:	f000 fbcc 	bl	8001cdc <HAL_GPIO_WritePin>
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	2000001c 	.word	0x2000001c

08001550 <FND_DispOn>:
void FND_DispOn(int fndPos)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
   // GPIO_Write(GPIOx, Pin, RESET);
   HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, RESET);
 8001558:	4a08      	ldr	r2, [pc, #32]	@ (800157c <FND_DispOn+0x2c>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001560:	4a06      	ldr	r2, [pc, #24]	@ (800157c <FND_DispOn+0x2c>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	4413      	add	r3, r2
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	b29b      	uxth	r3, r3
 800156c:	2200      	movs	r2, #0
 800156e:	4619      	mov	r1, r3
 8001570:	f000 fbb4 	bl	8001cdc <HAL_GPIO_WritePin>
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	2000001c 	.word	0x2000001c

08001580 <FND_DispOffAll>:
void FND_DispOffAll()
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
   for(int i = 0;i<4;i++){
 8001586:	2300      	movs	r3, #0
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	e010      	b.n	80015ae <FND_DispOffAll+0x2e>
      HAL_GPIO_WritePin(fndDigitCom[i].GPIOx, fndDigitCom[i].pinNum, SET);
 800158c:	4a0c      	ldr	r2, [pc, #48]	@ (80015c0 <FND_DispOffAll+0x40>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001594:	4a0a      	ldr	r2, [pc, #40]	@ (80015c0 <FND_DispOffAll+0x40>)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	4413      	add	r3, r2
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	b29b      	uxth	r3, r3
 80015a0:	2201      	movs	r2, #1
 80015a2:	4619      	mov	r1, r3
 80015a4:	f000 fb9a 	bl	8001cdc <HAL_GPIO_WritePin>
   for(int i = 0;i<4;i++){
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3301      	adds	r3, #1
 80015ac:	607b      	str	r3, [r7, #4]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b03      	cmp	r3, #3
 80015b2:	ddeb      	ble.n	800158c <FND_DispOffAll+0xc>
   }
}
 80015b4:	bf00      	nop
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	2000001c 	.word	0x2000001c

080015c4 <FND_DispDigit>:

void FND_DispDigit(uint16_t digit)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	80fb      	strh	r3, [r7, #6]
   const uint8_t segFont[12] = {
 80015ce:	4a1f      	ldr	r2, [pc, #124]	@ (800164c <FND_DispDigit+0x88>)
 80015d0:	f107 0308 	add.w	r3, r7, #8
 80015d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80015d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
         0x6F,  // 9 => 01101111
         0x80,  // 10(dp) => 1000000
       0x00,  // 11(off) => 0000000
      };

   for (int i = 0; i<8;i++){
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
 80015de:	e02c      	b.n	800163a <FND_DispDigit+0x76>
      if(!(segFont[digit] & (1<<i))){
 80015e0:	88fb      	ldrh	r3, [r7, #6]
 80015e2:	3318      	adds	r3, #24
 80015e4:	443b      	add	r3, r7
 80015e6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80015ea:	461a      	mov	r2, r3
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	fa42 f303 	asr.w	r3, r2, r3
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10e      	bne.n	8001618 <FND_DispDigit+0x54>
         HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, RESET);
 80015fa:	4a15      	ldr	r2, [pc, #84]	@ (8001650 <FND_DispDigit+0x8c>)
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001602:	4a13      	ldr	r2, [pc, #76]	@ (8001650 <FND_DispDigit+0x8c>)
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	4413      	add	r3, r2
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	b29b      	uxth	r3, r3
 800160e:	2200      	movs	r2, #0
 8001610:	4619      	mov	r1, r3
 8001612:	f000 fb63 	bl	8001cdc <HAL_GPIO_WritePin>
 8001616:	e00d      	b.n	8001634 <FND_DispDigit+0x70>
      }
      else {
         HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, SET);
 8001618:	4a0d      	ldr	r2, [pc, #52]	@ (8001650 <FND_DispDigit+0x8c>)
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001620:	4a0b      	ldr	r2, [pc, #44]	@ (8001650 <FND_DispDigit+0x8c>)
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	4413      	add	r3, r2
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	b29b      	uxth	r3, r3
 800162c:	2201      	movs	r2, #1
 800162e:	4619      	mov	r1, r3
 8001630:	f000 fb54 	bl	8001cdc <HAL_GPIO_WritePin>
   for (int i = 0; i<8;i++){
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	3301      	adds	r3, #1
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	2b07      	cmp	r3, #7
 800163e:	ddcf      	ble.n	80015e0 <FND_DispDigit+0x1c>
      }
   }
}
 8001640:	bf00      	nop
 8001642:	bf00      	nop
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	08004060 	.word	0x08004060
 8001650:	2000003c 	.word	0x2000003c

08001654 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001658:	4b0e      	ldr	r3, [pc, #56]	@ (8001694 <HAL_Init+0x40>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a0d      	ldr	r2, [pc, #52]	@ (8001694 <HAL_Init+0x40>)
 800165e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001662:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001664:	4b0b      	ldr	r3, [pc, #44]	@ (8001694 <HAL_Init+0x40>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0a      	ldr	r2, [pc, #40]	@ (8001694 <HAL_Init+0x40>)
 800166a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800166e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001670:	4b08      	ldr	r3, [pc, #32]	@ (8001694 <HAL_Init+0x40>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a07      	ldr	r2, [pc, #28]	@ (8001694 <HAL_Init+0x40>)
 8001676:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800167a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800167c:	2003      	movs	r0, #3
 800167e:	f000 f94f 	bl	8001920 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001682:	200f      	movs	r0, #15
 8001684:	f000 f808 	bl	8001698 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001688:	f7ff f8c0 	bl	800080c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40023c00 	.word	0x40023c00

08001698 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016a0:	4b12      	ldr	r3, [pc, #72]	@ (80016ec <HAL_InitTick+0x54>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4b12      	ldr	r3, [pc, #72]	@ (80016f0 <HAL_InitTick+0x58>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	4619      	mov	r1, r3
 80016aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80016b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 f967 	bl	800198a <HAL_SYSTICK_Config>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e00e      	b.n	80016e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2b0f      	cmp	r3, #15
 80016ca:	d80a      	bhi.n	80016e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016cc:	2200      	movs	r2, #0
 80016ce:	6879      	ldr	r1, [r7, #4]
 80016d0:	f04f 30ff 	mov.w	r0, #4294967295
 80016d4:	f000 f92f 	bl	8001936 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016d8:	4a06      	ldr	r2, [pc, #24]	@ (80016f4 <HAL_InitTick+0x5c>)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016de:	2300      	movs	r3, #0
 80016e0:	e000      	b.n	80016e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000000 	.word	0x20000000
 80016f0:	20000080 	.word	0x20000080
 80016f4:	2000007c 	.word	0x2000007c

080016f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016fc:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <HAL_IncTick+0x20>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	461a      	mov	r2, r3
 8001702:	4b06      	ldr	r3, [pc, #24]	@ (800171c <HAL_IncTick+0x24>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4413      	add	r3, r2
 8001708:	4a04      	ldr	r2, [pc, #16]	@ (800171c <HAL_IncTick+0x24>)
 800170a:	6013      	str	r3, [r2, #0]
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	20000080 	.word	0x20000080
 800171c:	200001bc 	.word	0x200001bc

08001720 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return uwTick;
 8001724:	4b03      	ldr	r3, [pc, #12]	@ (8001734 <HAL_GetTick+0x14>)
 8001726:	681b      	ldr	r3, [r3, #0]
}
 8001728:	4618      	mov	r0, r3
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	200001bc 	.word	0x200001bc

08001738 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001740:	f7ff ffee 	bl	8001720 <HAL_GetTick>
 8001744:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001750:	d005      	beq.n	800175e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001752:	4b0a      	ldr	r3, [pc, #40]	@ (800177c <HAL_Delay+0x44>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	461a      	mov	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4413      	add	r3, r2
 800175c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800175e:	bf00      	nop
 8001760:	f7ff ffde 	bl	8001720 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	429a      	cmp	r2, r3
 800176e:	d8f7      	bhi.n	8001760 <HAL_Delay+0x28>
  {
  }
}
 8001770:	bf00      	nop
 8001772:	bf00      	nop
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000080 	.word	0x20000080

08001780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001790:	4b0c      	ldr	r3, [pc, #48]	@ (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800179c:	4013      	ands	r3, r2
 800179e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b2:	4a04      	ldr	r2, [pc, #16]	@ (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	60d3      	str	r3, [r2, #12]
}
 80017b8:	bf00      	nop
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017cc:	4b04      	ldr	r3, [pc, #16]	@ (80017e0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	0a1b      	lsrs	r3, r3, #8
 80017d2:	f003 0307 	and.w	r3, r3, #7
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	db0b      	blt.n	800180e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	f003 021f 	and.w	r2, r3, #31
 80017fc:	4907      	ldr	r1, [pc, #28]	@ (800181c <__NVIC_EnableIRQ+0x38>)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	095b      	lsrs	r3, r3, #5
 8001804:	2001      	movs	r0, #1
 8001806:	fa00 f202 	lsl.w	r2, r0, r2
 800180a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	e000e100 	.word	0xe000e100

08001820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	6039      	str	r1, [r7, #0]
 800182a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001830:	2b00      	cmp	r3, #0
 8001832:	db0a      	blt.n	800184a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	b2da      	uxtb	r2, r3
 8001838:	490c      	ldr	r1, [pc, #48]	@ (800186c <__NVIC_SetPriority+0x4c>)
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	0112      	lsls	r2, r2, #4
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	440b      	add	r3, r1
 8001844:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001848:	e00a      	b.n	8001860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4908      	ldr	r1, [pc, #32]	@ (8001870 <__NVIC_SetPriority+0x50>)
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	3b04      	subs	r3, #4
 8001858:	0112      	lsls	r2, r2, #4
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	440b      	add	r3, r1
 800185e:	761a      	strb	r2, [r3, #24]
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	e000e100 	.word	0xe000e100
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001874:	b480      	push	{r7}
 8001876:	b089      	sub	sp, #36	@ 0x24
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f1c3 0307 	rsb	r3, r3, #7
 800188e:	2b04      	cmp	r3, #4
 8001890:	bf28      	it	cs
 8001892:	2304      	movcs	r3, #4
 8001894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3304      	adds	r3, #4
 800189a:	2b06      	cmp	r3, #6
 800189c:	d902      	bls.n	80018a4 <NVIC_EncodePriority+0x30>
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3b03      	subs	r3, #3
 80018a2:	e000      	b.n	80018a6 <NVIC_EncodePriority+0x32>
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a8:	f04f 32ff 	mov.w	r2, #4294967295
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43da      	mvns	r2, r3
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	401a      	ands	r2, r3
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018bc:	f04f 31ff 	mov.w	r1, #4294967295
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	fa01 f303 	lsl.w	r3, r1, r3
 80018c6:	43d9      	mvns	r1, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	4313      	orrs	r3, r2
         );
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3724      	adds	r7, #36	@ 0x24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
	...

080018dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018ec:	d301      	bcc.n	80018f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ee:	2301      	movs	r3, #1
 80018f0:	e00f      	b.n	8001912 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018f2:	4a0a      	ldr	r2, [pc, #40]	@ (800191c <SysTick_Config+0x40>)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018fa:	210f      	movs	r1, #15
 80018fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001900:	f7ff ff8e 	bl	8001820 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001904:	4b05      	ldr	r3, [pc, #20]	@ (800191c <SysTick_Config+0x40>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800190a:	4b04      	ldr	r3, [pc, #16]	@ (800191c <SysTick_Config+0x40>)
 800190c:	2207      	movs	r2, #7
 800190e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	e000e010 	.word	0xe000e010

08001920 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7ff ff29 	bl	8001780 <__NVIC_SetPriorityGrouping>
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001936:	b580      	push	{r7, lr}
 8001938:	b086      	sub	sp, #24
 800193a:	af00      	add	r7, sp, #0
 800193c:	4603      	mov	r3, r0
 800193e:	60b9      	str	r1, [r7, #8]
 8001940:	607a      	str	r2, [r7, #4]
 8001942:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001948:	f7ff ff3e 	bl	80017c8 <__NVIC_GetPriorityGrouping>
 800194c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	68b9      	ldr	r1, [r7, #8]
 8001952:	6978      	ldr	r0, [r7, #20]
 8001954:	f7ff ff8e 	bl	8001874 <NVIC_EncodePriority>
 8001958:	4602      	mov	r2, r0
 800195a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800195e:	4611      	mov	r1, r2
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff5d 	bl	8001820 <__NVIC_SetPriority>
}
 8001966:	bf00      	nop
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	4603      	mov	r3, r0
 8001976:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff31 	bl	80017e4 <__NVIC_EnableIRQ>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff ffa2 	bl	80018dc <SysTick_Config>
 8001998:	4603      	mov	r3, r0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b089      	sub	sp, #36	@ 0x24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
 80019be:	e159      	b.n	8001c74 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019c0:	2201      	movs	r2, #1
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	4013      	ands	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	429a      	cmp	r2, r3
 80019da:	f040 8148 	bne.w	8001c6e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f003 0303 	and.w	r3, r3, #3
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d005      	beq.n	80019f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d130      	bne.n	8001a58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	2203      	movs	r2, #3
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43db      	mvns	r3, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	68da      	ldr	r2, [r3, #12]
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	091b      	lsrs	r3, r3, #4
 8001a42:	f003 0201 	and.w	r2, r3, #1
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 0303 	and.w	r3, r3, #3
 8001a60:	2b03      	cmp	r3, #3
 8001a62:	d017      	beq.n	8001a94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	2203      	movs	r2, #3
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	43db      	mvns	r3, r3
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d123      	bne.n	8001ae8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	08da      	lsrs	r2, r3, #3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3208      	adds	r2, #8
 8001aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	220f      	movs	r2, #15
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	691a      	ldr	r2, [r3, #16]
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	08da      	lsrs	r2, r3, #3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	3208      	adds	r2, #8
 8001ae2:	69b9      	ldr	r1, [r7, #24]
 8001ae4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	2203      	movs	r2, #3
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 0203 	and.w	r2, r3, #3
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f000 80a2 	beq.w	8001c6e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	4b57      	ldr	r3, [pc, #348]	@ (8001c8c <HAL_GPIO_Init+0x2e8>)
 8001b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b32:	4a56      	ldr	r2, [pc, #344]	@ (8001c8c <HAL_GPIO_Init+0x2e8>)
 8001b34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b3a:	4b54      	ldr	r3, [pc, #336]	@ (8001c8c <HAL_GPIO_Init+0x2e8>)
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b46:	4a52      	ldr	r2, [pc, #328]	@ (8001c90 <HAL_GPIO_Init+0x2ec>)
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	089b      	lsrs	r3, r3, #2
 8001b4c:	3302      	adds	r3, #2
 8001b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	220f      	movs	r2, #15
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4013      	ands	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a49      	ldr	r2, [pc, #292]	@ (8001c94 <HAL_GPIO_Init+0x2f0>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d019      	beq.n	8001ba6 <HAL_GPIO_Init+0x202>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a48      	ldr	r2, [pc, #288]	@ (8001c98 <HAL_GPIO_Init+0x2f4>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d013      	beq.n	8001ba2 <HAL_GPIO_Init+0x1fe>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a47      	ldr	r2, [pc, #284]	@ (8001c9c <HAL_GPIO_Init+0x2f8>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d00d      	beq.n	8001b9e <HAL_GPIO_Init+0x1fa>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a46      	ldr	r2, [pc, #280]	@ (8001ca0 <HAL_GPIO_Init+0x2fc>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d007      	beq.n	8001b9a <HAL_GPIO_Init+0x1f6>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a45      	ldr	r2, [pc, #276]	@ (8001ca4 <HAL_GPIO_Init+0x300>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d101      	bne.n	8001b96 <HAL_GPIO_Init+0x1f2>
 8001b92:	2304      	movs	r3, #4
 8001b94:	e008      	b.n	8001ba8 <HAL_GPIO_Init+0x204>
 8001b96:	2307      	movs	r3, #7
 8001b98:	e006      	b.n	8001ba8 <HAL_GPIO_Init+0x204>
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e004      	b.n	8001ba8 <HAL_GPIO_Init+0x204>
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	e002      	b.n	8001ba8 <HAL_GPIO_Init+0x204>
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e000      	b.n	8001ba8 <HAL_GPIO_Init+0x204>
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	69fa      	ldr	r2, [r7, #28]
 8001baa:	f002 0203 	and.w	r2, r2, #3
 8001bae:	0092      	lsls	r2, r2, #2
 8001bb0:	4093      	lsls	r3, r2
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bb8:	4935      	ldr	r1, [pc, #212]	@ (8001c90 <HAL_GPIO_Init+0x2ec>)
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	089b      	lsrs	r3, r3, #2
 8001bbe:	3302      	adds	r3, #2
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bc6:	4b38      	ldr	r3, [pc, #224]	@ (8001ca8 <HAL_GPIO_Init+0x304>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bea:	4a2f      	ldr	r2, [pc, #188]	@ (8001ca8 <HAL_GPIO_Init+0x304>)
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bf0:	4b2d      	ldr	r3, [pc, #180]	@ (8001ca8 <HAL_GPIO_Init+0x304>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c14:	4a24      	ldr	r2, [pc, #144]	@ (8001ca8 <HAL_GPIO_Init+0x304>)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c1a:	4b23      	ldr	r3, [pc, #140]	@ (8001ca8 <HAL_GPIO_Init+0x304>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4013      	ands	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c3e:	4a1a      	ldr	r2, [pc, #104]	@ (8001ca8 <HAL_GPIO_Init+0x304>)
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c44:	4b18      	ldr	r3, [pc, #96]	@ (8001ca8 <HAL_GPIO_Init+0x304>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c68:	4a0f      	ldr	r2, [pc, #60]	@ (8001ca8 <HAL_GPIO_Init+0x304>)
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3301      	adds	r3, #1
 8001c72:	61fb      	str	r3, [r7, #28]
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	2b0f      	cmp	r3, #15
 8001c78:	f67f aea2 	bls.w	80019c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c7c:	bf00      	nop
 8001c7e:	bf00      	nop
 8001c80:	3724      	adds	r7, #36	@ 0x24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40013800 	.word	0x40013800
 8001c94:	40020000 	.word	0x40020000
 8001c98:	40020400 	.word	0x40020400
 8001c9c:	40020800 	.word	0x40020800
 8001ca0:	40020c00 	.word	0x40020c00
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	40013c00 	.word	0x40013c00

08001cac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	691a      	ldr	r2, [r3, #16]
 8001cbc:	887b      	ldrh	r3, [r7, #2]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d002      	beq.n	8001cca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	73fb      	strb	r3, [r7, #15]
 8001cc8:	e001      	b.n	8001cce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	807b      	strh	r3, [r7, #2]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cec:	787b      	ldrb	r3, [r7, #1]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cf2:	887a      	ldrh	r2, [r7, #2]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cf8:	e003      	b.n	8001d02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cfa:	887b      	ldrh	r3, [r7, #2]
 8001cfc:	041a      	lsls	r2, r3, #16
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	619a      	str	r2, [r3, #24]
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
	...

08001d10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e267      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d075      	beq.n	8001e1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d2e:	4b88      	ldr	r3, [pc, #544]	@ (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 030c 	and.w	r3, r3, #12
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	d00c      	beq.n	8001d54 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d3a:	4b85      	ldr	r3, [pc, #532]	@ (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d42:	2b08      	cmp	r3, #8
 8001d44:	d112      	bne.n	8001d6c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d46:	4b82      	ldr	r3, [pc, #520]	@ (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d52:	d10b      	bne.n	8001d6c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d54:	4b7e      	ldr	r3, [pc, #504]	@ (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d05b      	beq.n	8001e18 <HAL_RCC_OscConfig+0x108>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d157      	bne.n	8001e18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e242      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d74:	d106      	bne.n	8001d84 <HAL_RCC_OscConfig+0x74>
 8001d76:	4b76      	ldr	r3, [pc, #472]	@ (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a75      	ldr	r2, [pc, #468]	@ (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001d7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	e01d      	b.n	8001dc0 <HAL_RCC_OscConfig+0xb0>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d8c:	d10c      	bne.n	8001da8 <HAL_RCC_OscConfig+0x98>
 8001d8e:	4b70      	ldr	r3, [pc, #448]	@ (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a6f      	ldr	r2, [pc, #444]	@ (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001d94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	4b6d      	ldr	r3, [pc, #436]	@ (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a6c      	ldr	r2, [pc, #432]	@ (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001da0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	e00b      	b.n	8001dc0 <HAL_RCC_OscConfig+0xb0>
 8001da8:	4b69      	ldr	r3, [pc, #420]	@ (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a68      	ldr	r2, [pc, #416]	@ (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001dae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001db2:	6013      	str	r3, [r2, #0]
 8001db4:	4b66      	ldr	r3, [pc, #408]	@ (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a65      	ldr	r2, [pc, #404]	@ (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001dba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d013      	beq.n	8001df0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc8:	f7ff fcaa 	bl	8001720 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd0:	f7ff fca6 	bl	8001720 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b64      	cmp	r3, #100	@ 0x64
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e207      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de2:	4b5b      	ldr	r3, [pc, #364]	@ (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0f0      	beq.n	8001dd0 <HAL_RCC_OscConfig+0xc0>
 8001dee:	e014      	b.n	8001e1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df0:	f7ff fc96 	bl	8001720 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001df8:	f7ff fc92 	bl	8001720 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b64      	cmp	r3, #100	@ 0x64
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e1f3      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e0a:	4b51      	ldr	r3, [pc, #324]	@ (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f0      	bne.n	8001df8 <HAL_RCC_OscConfig+0xe8>
 8001e16:	e000      	b.n	8001e1a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d063      	beq.n	8001eee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e26:	4b4a      	ldr	r3, [pc, #296]	@ (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00b      	beq.n	8001e4a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e32:	4b47      	ldr	r3, [pc, #284]	@ (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e3a:	2b08      	cmp	r3, #8
 8001e3c:	d11c      	bne.n	8001e78 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e3e:	4b44      	ldr	r3, [pc, #272]	@ (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d116      	bne.n	8001e78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e4a:	4b41      	ldr	r3, [pc, #260]	@ (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d005      	beq.n	8001e62 <HAL_RCC_OscConfig+0x152>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d001      	beq.n	8001e62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e1c7      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e62:	4b3b      	ldr	r3, [pc, #236]	@ (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	4937      	ldr	r1, [pc, #220]	@ (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e76:	e03a      	b.n	8001eee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d020      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e80:	4b34      	ldr	r3, [pc, #208]	@ (8001f54 <HAL_RCC_OscConfig+0x244>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e86:	f7ff fc4b 	bl	8001720 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e8e:	f7ff fc47 	bl	8001720 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e1a8      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea0:	4b2b      	ldr	r3, [pc, #172]	@ (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0f0      	beq.n	8001e8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eac:	4b28      	ldr	r3, [pc, #160]	@ (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	4925      	ldr	r1, [pc, #148]	@ (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	600b      	str	r3, [r1, #0]
 8001ec0:	e015      	b.n	8001eee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ec2:	4b24      	ldr	r3, [pc, #144]	@ (8001f54 <HAL_RCC_OscConfig+0x244>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec8:	f7ff fc2a 	bl	8001720 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ed0:	f7ff fc26 	bl	8001720 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e187      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d036      	beq.n	8001f68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d016      	beq.n	8001f30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f02:	4b15      	ldr	r3, [pc, #84]	@ (8001f58 <HAL_RCC_OscConfig+0x248>)
 8001f04:	2201      	movs	r2, #1
 8001f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f08:	f7ff fc0a 	bl	8001720 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f10:	f7ff fc06 	bl	8001720 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e167      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f22:	4b0b      	ldr	r3, [pc, #44]	@ (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001f24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0x200>
 8001f2e:	e01b      	b.n	8001f68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f30:	4b09      	ldr	r3, [pc, #36]	@ (8001f58 <HAL_RCC_OscConfig+0x248>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f36:	f7ff fbf3 	bl	8001720 <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f3c:	e00e      	b.n	8001f5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f3e:	f7ff fbef 	bl	8001720 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d907      	bls.n	8001f5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e150      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
 8001f50:	40023800 	.word	0x40023800
 8001f54:	42470000 	.word	0x42470000
 8001f58:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f5c:	4b88      	ldr	r3, [pc, #544]	@ (8002180 <HAL_RCC_OscConfig+0x470>)
 8001f5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1ea      	bne.n	8001f3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 8097 	beq.w	80020a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f76:	2300      	movs	r3, #0
 8001f78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f7a:	4b81      	ldr	r3, [pc, #516]	@ (8002180 <HAL_RCC_OscConfig+0x470>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10f      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	4b7d      	ldr	r3, [pc, #500]	@ (8002180 <HAL_RCC_OscConfig+0x470>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8e:	4a7c      	ldr	r2, [pc, #496]	@ (8002180 <HAL_RCC_OscConfig+0x470>)
 8001f90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f96:	4b7a      	ldr	r3, [pc, #488]	@ (8002180 <HAL_RCC_OscConfig+0x470>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa6:	4b77      	ldr	r3, [pc, #476]	@ (8002184 <HAL_RCC_OscConfig+0x474>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d118      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fb2:	4b74      	ldr	r3, [pc, #464]	@ (8002184 <HAL_RCC_OscConfig+0x474>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a73      	ldr	r2, [pc, #460]	@ (8002184 <HAL_RCC_OscConfig+0x474>)
 8001fb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fbe:	f7ff fbaf 	bl	8001720 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fc6:	f7ff fbab 	bl	8001720 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e10c      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd8:	4b6a      	ldr	r3, [pc, #424]	@ (8002184 <HAL_RCC_OscConfig+0x474>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0f0      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d106      	bne.n	8001ffa <HAL_RCC_OscConfig+0x2ea>
 8001fec:	4b64      	ldr	r3, [pc, #400]	@ (8002180 <HAL_RCC_OscConfig+0x470>)
 8001fee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ff0:	4a63      	ldr	r2, [pc, #396]	@ (8002180 <HAL_RCC_OscConfig+0x470>)
 8001ff2:	f043 0301 	orr.w	r3, r3, #1
 8001ff6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ff8:	e01c      	b.n	8002034 <HAL_RCC_OscConfig+0x324>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	2b05      	cmp	r3, #5
 8002000:	d10c      	bne.n	800201c <HAL_RCC_OscConfig+0x30c>
 8002002:	4b5f      	ldr	r3, [pc, #380]	@ (8002180 <HAL_RCC_OscConfig+0x470>)
 8002004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002006:	4a5e      	ldr	r2, [pc, #376]	@ (8002180 <HAL_RCC_OscConfig+0x470>)
 8002008:	f043 0304 	orr.w	r3, r3, #4
 800200c:	6713      	str	r3, [r2, #112]	@ 0x70
 800200e:	4b5c      	ldr	r3, [pc, #368]	@ (8002180 <HAL_RCC_OscConfig+0x470>)
 8002010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002012:	4a5b      	ldr	r2, [pc, #364]	@ (8002180 <HAL_RCC_OscConfig+0x470>)
 8002014:	f043 0301 	orr.w	r3, r3, #1
 8002018:	6713      	str	r3, [r2, #112]	@ 0x70
 800201a:	e00b      	b.n	8002034 <HAL_RCC_OscConfig+0x324>
 800201c:	4b58      	ldr	r3, [pc, #352]	@ (8002180 <HAL_RCC_OscConfig+0x470>)
 800201e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002020:	4a57      	ldr	r2, [pc, #348]	@ (8002180 <HAL_RCC_OscConfig+0x470>)
 8002022:	f023 0301 	bic.w	r3, r3, #1
 8002026:	6713      	str	r3, [r2, #112]	@ 0x70
 8002028:	4b55      	ldr	r3, [pc, #340]	@ (8002180 <HAL_RCC_OscConfig+0x470>)
 800202a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800202c:	4a54      	ldr	r2, [pc, #336]	@ (8002180 <HAL_RCC_OscConfig+0x470>)
 800202e:	f023 0304 	bic.w	r3, r3, #4
 8002032:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d015      	beq.n	8002068 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800203c:	f7ff fb70 	bl	8001720 <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002042:	e00a      	b.n	800205a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002044:	f7ff fb6c 	bl	8001720 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002052:	4293      	cmp	r3, r2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e0cb      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800205a:	4b49      	ldr	r3, [pc, #292]	@ (8002180 <HAL_RCC_OscConfig+0x470>)
 800205c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0ee      	beq.n	8002044 <HAL_RCC_OscConfig+0x334>
 8002066:	e014      	b.n	8002092 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002068:	f7ff fb5a 	bl	8001720 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800206e:	e00a      	b.n	8002086 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002070:	f7ff fb56 	bl	8001720 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800207e:	4293      	cmp	r3, r2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e0b5      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002086:	4b3e      	ldr	r3, [pc, #248]	@ (8002180 <HAL_RCC_OscConfig+0x470>)
 8002088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1ee      	bne.n	8002070 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002092:	7dfb      	ldrb	r3, [r7, #23]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d105      	bne.n	80020a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002098:	4b39      	ldr	r3, [pc, #228]	@ (8002180 <HAL_RCC_OscConfig+0x470>)
 800209a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209c:	4a38      	ldr	r2, [pc, #224]	@ (8002180 <HAL_RCC_OscConfig+0x470>)
 800209e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 80a1 	beq.w	80021f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020ae:	4b34      	ldr	r3, [pc, #208]	@ (8002180 <HAL_RCC_OscConfig+0x470>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 030c 	and.w	r3, r3, #12
 80020b6:	2b08      	cmp	r3, #8
 80020b8:	d05c      	beq.n	8002174 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d141      	bne.n	8002146 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c2:	4b31      	ldr	r3, [pc, #196]	@ (8002188 <HAL_RCC_OscConfig+0x478>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c8:	f7ff fb2a 	bl	8001720 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d0:	f7ff fb26 	bl	8001720 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e087      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e2:	4b27      	ldr	r3, [pc, #156]	@ (8002180 <HAL_RCC_OscConfig+0x470>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f0      	bne.n	80020d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69da      	ldr	r2, [r3, #28]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fc:	019b      	lsls	r3, r3, #6
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002104:	085b      	lsrs	r3, r3, #1
 8002106:	3b01      	subs	r3, #1
 8002108:	041b      	lsls	r3, r3, #16
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002110:	061b      	lsls	r3, r3, #24
 8002112:	491b      	ldr	r1, [pc, #108]	@ (8002180 <HAL_RCC_OscConfig+0x470>)
 8002114:	4313      	orrs	r3, r2
 8002116:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002118:	4b1b      	ldr	r3, [pc, #108]	@ (8002188 <HAL_RCC_OscConfig+0x478>)
 800211a:	2201      	movs	r2, #1
 800211c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211e:	f7ff faff 	bl	8001720 <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002126:	f7ff fafb 	bl	8001720 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e05c      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002138:	4b11      	ldr	r3, [pc, #68]	@ (8002180 <HAL_RCC_OscConfig+0x470>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0f0      	beq.n	8002126 <HAL_RCC_OscConfig+0x416>
 8002144:	e054      	b.n	80021f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002146:	4b10      	ldr	r3, [pc, #64]	@ (8002188 <HAL_RCC_OscConfig+0x478>)
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214c:	f7ff fae8 	bl	8001720 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002154:	f7ff fae4 	bl	8001720 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e045      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002166:	4b06      	ldr	r3, [pc, #24]	@ (8002180 <HAL_RCC_OscConfig+0x470>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f0      	bne.n	8002154 <HAL_RCC_OscConfig+0x444>
 8002172:	e03d      	b.n	80021f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d107      	bne.n	800218c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e038      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
 8002180:	40023800 	.word	0x40023800
 8002184:	40007000 	.word	0x40007000
 8002188:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800218c:	4b1b      	ldr	r3, [pc, #108]	@ (80021fc <HAL_RCC_OscConfig+0x4ec>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d028      	beq.n	80021ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d121      	bne.n	80021ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d11a      	bne.n	80021ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80021bc:	4013      	ands	r3, r2
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d111      	bne.n	80021ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d2:	085b      	lsrs	r3, r3, #1
 80021d4:	3b01      	subs	r3, #1
 80021d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021d8:	429a      	cmp	r2, r3
 80021da:	d107      	bne.n	80021ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d001      	beq.n	80021f0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e000      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40023800 	.word	0x40023800

08002200 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e0cc      	b.n	80023ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002214:	4b68      	ldr	r3, [pc, #416]	@ (80023b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	429a      	cmp	r2, r3
 8002220:	d90c      	bls.n	800223c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002222:	4b65      	ldr	r3, [pc, #404]	@ (80023b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	b2d2      	uxtb	r2, r2
 8002228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800222a:	4b63      	ldr	r3, [pc, #396]	@ (80023b8 <HAL_RCC_ClockConfig+0x1b8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d001      	beq.n	800223c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e0b8      	b.n	80023ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d020      	beq.n	800228a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b00      	cmp	r3, #0
 8002252:	d005      	beq.n	8002260 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002254:	4b59      	ldr	r3, [pc, #356]	@ (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	4a58      	ldr	r2, [pc, #352]	@ (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 800225a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800225e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0308 	and.w	r3, r3, #8
 8002268:	2b00      	cmp	r3, #0
 800226a:	d005      	beq.n	8002278 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800226c:	4b53      	ldr	r3, [pc, #332]	@ (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	4a52      	ldr	r2, [pc, #328]	@ (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 8002272:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002276:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002278:	4b50      	ldr	r3, [pc, #320]	@ (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	494d      	ldr	r1, [pc, #308]	@ (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 8002286:	4313      	orrs	r3, r2
 8002288:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d044      	beq.n	8002320 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d107      	bne.n	80022ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229e:	4b47      	ldr	r3, [pc, #284]	@ (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d119      	bne.n	80022de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e07f      	b.n	80023ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d003      	beq.n	80022be <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	d107      	bne.n	80022ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022be:	4b3f      	ldr	r3, [pc, #252]	@ (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d109      	bne.n	80022de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e06f      	b.n	80023ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ce:	4b3b      	ldr	r3, [pc, #236]	@ (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e067      	b.n	80023ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022de:	4b37      	ldr	r3, [pc, #220]	@ (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f023 0203 	bic.w	r2, r3, #3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	4934      	ldr	r1, [pc, #208]	@ (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022f0:	f7ff fa16 	bl	8001720 <HAL_GetTick>
 80022f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f6:	e00a      	b.n	800230e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f8:	f7ff fa12 	bl	8001720 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002306:	4293      	cmp	r3, r2
 8002308:	d901      	bls.n	800230e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e04f      	b.n	80023ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800230e:	4b2b      	ldr	r3, [pc, #172]	@ (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 020c 	and.w	r2, r3, #12
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	429a      	cmp	r2, r3
 800231e:	d1eb      	bne.n	80022f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002320:	4b25      	ldr	r3, [pc, #148]	@ (80023b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	429a      	cmp	r2, r3
 800232c:	d20c      	bcs.n	8002348 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800232e:	4b22      	ldr	r3, [pc, #136]	@ (80023b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002336:	4b20      	ldr	r3, [pc, #128]	@ (80023b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d001      	beq.n	8002348 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e032      	b.n	80023ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b00      	cmp	r3, #0
 8002352:	d008      	beq.n	8002366 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002354:	4b19      	ldr	r3, [pc, #100]	@ (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	4916      	ldr	r1, [pc, #88]	@ (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	4313      	orrs	r3, r2
 8002364:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	2b00      	cmp	r3, #0
 8002370:	d009      	beq.n	8002386 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002372:	4b12      	ldr	r3, [pc, #72]	@ (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	490e      	ldr	r1, [pc, #56]	@ (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 8002382:	4313      	orrs	r3, r2
 8002384:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002386:	f000 f821 	bl	80023cc <HAL_RCC_GetSysClockFreq>
 800238a:	4602      	mov	r2, r0
 800238c:	4b0b      	ldr	r3, [pc, #44]	@ (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	091b      	lsrs	r3, r3, #4
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	490a      	ldr	r1, [pc, #40]	@ (80023c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002398:	5ccb      	ldrb	r3, [r1, r3]
 800239a:	fa22 f303 	lsr.w	r3, r2, r3
 800239e:	4a09      	ldr	r2, [pc, #36]	@ (80023c4 <HAL_RCC_ClockConfig+0x1c4>)
 80023a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80023a2:	4b09      	ldr	r3, [pc, #36]	@ (80023c8 <HAL_RCC_ClockConfig+0x1c8>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff f976 	bl	8001698 <HAL_InitTick>

  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40023c00 	.word	0x40023c00
 80023bc:	40023800 	.word	0x40023800
 80023c0:	0800406c 	.word	0x0800406c
 80023c4:	20000000 	.word	0x20000000
 80023c8:	2000007c 	.word	0x2000007c

080023cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023d0:	b094      	sub	sp, #80	@ 0x50
 80023d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80023d4:	2300      	movs	r3, #0
 80023d6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80023d8:	2300      	movs	r3, #0
 80023da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80023dc:	2300      	movs	r3, #0
 80023de:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80023e0:	2300      	movs	r3, #0
 80023e2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023e4:	4b79      	ldr	r3, [pc, #484]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x200>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 030c 	and.w	r3, r3, #12
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	d00d      	beq.n	800240c <HAL_RCC_GetSysClockFreq+0x40>
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	f200 80e1 	bhi.w	80025b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d002      	beq.n	8002400 <HAL_RCC_GetSysClockFreq+0x34>
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	d003      	beq.n	8002406 <HAL_RCC_GetSysClockFreq+0x3a>
 80023fe:	e0db      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002400:	4b73      	ldr	r3, [pc, #460]	@ (80025d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002402:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002404:	e0db      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002406:	4b73      	ldr	r3, [pc, #460]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002408:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800240a:	e0d8      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800240c:	4b6f      	ldr	r3, [pc, #444]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x200>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002414:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002416:	4b6d      	ldr	r3, [pc, #436]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x200>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d063      	beq.n	80024ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002422:	4b6a      	ldr	r3, [pc, #424]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x200>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	099b      	lsrs	r3, r3, #6
 8002428:	2200      	movs	r2, #0
 800242a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800242c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800242e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002434:	633b      	str	r3, [r7, #48]	@ 0x30
 8002436:	2300      	movs	r3, #0
 8002438:	637b      	str	r3, [r7, #52]	@ 0x34
 800243a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800243e:	4622      	mov	r2, r4
 8002440:	462b      	mov	r3, r5
 8002442:	f04f 0000 	mov.w	r0, #0
 8002446:	f04f 0100 	mov.w	r1, #0
 800244a:	0159      	lsls	r1, r3, #5
 800244c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002450:	0150      	lsls	r0, r2, #5
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	4621      	mov	r1, r4
 8002458:	1a51      	subs	r1, r2, r1
 800245a:	6139      	str	r1, [r7, #16]
 800245c:	4629      	mov	r1, r5
 800245e:	eb63 0301 	sbc.w	r3, r3, r1
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	f04f 0300 	mov.w	r3, #0
 800246c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002470:	4659      	mov	r1, fp
 8002472:	018b      	lsls	r3, r1, #6
 8002474:	4651      	mov	r1, sl
 8002476:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800247a:	4651      	mov	r1, sl
 800247c:	018a      	lsls	r2, r1, #6
 800247e:	4651      	mov	r1, sl
 8002480:	ebb2 0801 	subs.w	r8, r2, r1
 8002484:	4659      	mov	r1, fp
 8002486:	eb63 0901 	sbc.w	r9, r3, r1
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	f04f 0300 	mov.w	r3, #0
 8002492:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002496:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800249a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800249e:	4690      	mov	r8, r2
 80024a0:	4699      	mov	r9, r3
 80024a2:	4623      	mov	r3, r4
 80024a4:	eb18 0303 	adds.w	r3, r8, r3
 80024a8:	60bb      	str	r3, [r7, #8]
 80024aa:	462b      	mov	r3, r5
 80024ac:	eb49 0303 	adc.w	r3, r9, r3
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	f04f 0200 	mov.w	r2, #0
 80024b6:	f04f 0300 	mov.w	r3, #0
 80024ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024be:	4629      	mov	r1, r5
 80024c0:	024b      	lsls	r3, r1, #9
 80024c2:	4621      	mov	r1, r4
 80024c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024c8:	4621      	mov	r1, r4
 80024ca:	024a      	lsls	r2, r1, #9
 80024cc:	4610      	mov	r0, r2
 80024ce:	4619      	mov	r1, r3
 80024d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024d2:	2200      	movs	r2, #0
 80024d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80024d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80024dc:	f7fd fed8 	bl	8000290 <__aeabi_uldivmod>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	4613      	mov	r3, r2
 80024e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024e8:	e058      	b.n	800259c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ea:	4b38      	ldr	r3, [pc, #224]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x200>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	099b      	lsrs	r3, r3, #6
 80024f0:	2200      	movs	r2, #0
 80024f2:	4618      	mov	r0, r3
 80024f4:	4611      	mov	r1, r2
 80024f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024fa:	623b      	str	r3, [r7, #32]
 80024fc:	2300      	movs	r3, #0
 80024fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002500:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002504:	4642      	mov	r2, r8
 8002506:	464b      	mov	r3, r9
 8002508:	f04f 0000 	mov.w	r0, #0
 800250c:	f04f 0100 	mov.w	r1, #0
 8002510:	0159      	lsls	r1, r3, #5
 8002512:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002516:	0150      	lsls	r0, r2, #5
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	4641      	mov	r1, r8
 800251e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002522:	4649      	mov	r1, r9
 8002524:	eb63 0b01 	sbc.w	fp, r3, r1
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	f04f 0300 	mov.w	r3, #0
 8002530:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002534:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002538:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800253c:	ebb2 040a 	subs.w	r4, r2, sl
 8002540:	eb63 050b 	sbc.w	r5, r3, fp
 8002544:	f04f 0200 	mov.w	r2, #0
 8002548:	f04f 0300 	mov.w	r3, #0
 800254c:	00eb      	lsls	r3, r5, #3
 800254e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002552:	00e2      	lsls	r2, r4, #3
 8002554:	4614      	mov	r4, r2
 8002556:	461d      	mov	r5, r3
 8002558:	4643      	mov	r3, r8
 800255a:	18e3      	adds	r3, r4, r3
 800255c:	603b      	str	r3, [r7, #0]
 800255e:	464b      	mov	r3, r9
 8002560:	eb45 0303 	adc.w	r3, r5, r3
 8002564:	607b      	str	r3, [r7, #4]
 8002566:	f04f 0200 	mov.w	r2, #0
 800256a:	f04f 0300 	mov.w	r3, #0
 800256e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002572:	4629      	mov	r1, r5
 8002574:	028b      	lsls	r3, r1, #10
 8002576:	4621      	mov	r1, r4
 8002578:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800257c:	4621      	mov	r1, r4
 800257e:	028a      	lsls	r2, r1, #10
 8002580:	4610      	mov	r0, r2
 8002582:	4619      	mov	r1, r3
 8002584:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002586:	2200      	movs	r2, #0
 8002588:	61bb      	str	r3, [r7, #24]
 800258a:	61fa      	str	r2, [r7, #28]
 800258c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002590:	f7fd fe7e 	bl	8000290 <__aeabi_uldivmod>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	4613      	mov	r3, r2
 800259a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800259c:	4b0b      	ldr	r3, [pc, #44]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x200>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	0c1b      	lsrs	r3, r3, #16
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	3301      	adds	r3, #1
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80025ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80025ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025b6:	e002      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025b8:	4b05      	ldr	r3, [pc, #20]	@ (80025d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80025ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3750      	adds	r7, #80	@ 0x50
 80025c4:	46bd      	mov	sp, r7
 80025c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025ca:	bf00      	nop
 80025cc:	40023800 	.word	0x40023800
 80025d0:	00f42400 	.word	0x00f42400
 80025d4:	007a1200 	.word	0x007a1200

080025d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025dc:	4b03      	ldr	r3, [pc, #12]	@ (80025ec <HAL_RCC_GetHCLKFreq+0x14>)
 80025de:	681b      	ldr	r3, [r3, #0]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	20000000 	.word	0x20000000

080025f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025f4:	f7ff fff0 	bl	80025d8 <HAL_RCC_GetHCLKFreq>
 80025f8:	4602      	mov	r2, r0
 80025fa:	4b05      	ldr	r3, [pc, #20]	@ (8002610 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	0a9b      	lsrs	r3, r3, #10
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	4903      	ldr	r1, [pc, #12]	@ (8002614 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002606:	5ccb      	ldrb	r3, [r1, r3]
 8002608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800260c:	4618      	mov	r0, r3
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40023800 	.word	0x40023800
 8002614:	0800407c 	.word	0x0800407c

08002618 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800261c:	f7ff ffdc 	bl	80025d8 <HAL_RCC_GetHCLKFreq>
 8002620:	4602      	mov	r2, r0
 8002622:	4b05      	ldr	r3, [pc, #20]	@ (8002638 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	0b5b      	lsrs	r3, r3, #13
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	4903      	ldr	r1, [pc, #12]	@ (800263c <HAL_RCC_GetPCLK2Freq+0x24>)
 800262e:	5ccb      	ldrb	r3, [r1, r3]
 8002630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002634:	4618      	mov	r0, r3
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40023800 	.word	0x40023800
 800263c:	0800407c 	.word	0x0800407c

08002640 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e041      	b.n	80026d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d106      	bne.n	800266c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7fe f9c6 	bl	80009f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2202      	movs	r2, #2
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3304      	adds	r3, #4
 800267c:	4619      	mov	r1, r3
 800267e:	4610      	mov	r0, r2
 8002680:	f000 fa70 	bl	8002b64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
	...

080026e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d001      	beq.n	80026f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e044      	b.n	8002782 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2202      	movs	r2, #2
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68da      	ldr	r2, [r3, #12]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 0201 	orr.w	r2, r2, #1
 800270e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a1e      	ldr	r2, [pc, #120]	@ (8002790 <HAL_TIM_Base_Start_IT+0xb0>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d018      	beq.n	800274c <HAL_TIM_Base_Start_IT+0x6c>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002722:	d013      	beq.n	800274c <HAL_TIM_Base_Start_IT+0x6c>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a1a      	ldr	r2, [pc, #104]	@ (8002794 <HAL_TIM_Base_Start_IT+0xb4>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d00e      	beq.n	800274c <HAL_TIM_Base_Start_IT+0x6c>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a19      	ldr	r2, [pc, #100]	@ (8002798 <HAL_TIM_Base_Start_IT+0xb8>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d009      	beq.n	800274c <HAL_TIM_Base_Start_IT+0x6c>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a17      	ldr	r2, [pc, #92]	@ (800279c <HAL_TIM_Base_Start_IT+0xbc>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d004      	beq.n	800274c <HAL_TIM_Base_Start_IT+0x6c>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a16      	ldr	r2, [pc, #88]	@ (80027a0 <HAL_TIM_Base_Start_IT+0xc0>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d111      	bne.n	8002770 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2b06      	cmp	r3, #6
 800275c:	d010      	beq.n	8002780 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f042 0201 	orr.w	r2, r2, #1
 800276c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800276e:	e007      	b.n	8002780 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 0201 	orr.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40010000 	.word	0x40010000
 8002794:	40000400 	.word	0x40000400
 8002798:	40000800 	.word	0x40000800
 800279c:	40000c00 	.word	0x40000c00
 80027a0:	40014000 	.word	0x40014000

080027a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d020      	beq.n	8002808 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d01b      	beq.n	8002808 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f06f 0202 	mvn.w	r2, #2
 80027d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f999 	bl	8002b26 <HAL_TIM_IC_CaptureCallback>
 80027f4:	e005      	b.n	8002802 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f98b 	bl	8002b12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 f99c 	bl	8002b3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	f003 0304 	and.w	r3, r3, #4
 800280e:	2b00      	cmp	r3, #0
 8002810:	d020      	beq.n	8002854 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d01b      	beq.n	8002854 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f06f 0204 	mvn.w	r2, #4
 8002824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2202      	movs	r2, #2
 800282a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f973 	bl	8002b26 <HAL_TIM_IC_CaptureCallback>
 8002840:	e005      	b.n	800284e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f965 	bl	8002b12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 f976 	bl	8002b3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	f003 0308 	and.w	r3, r3, #8
 800285a:	2b00      	cmp	r3, #0
 800285c:	d020      	beq.n	80028a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	2b00      	cmp	r3, #0
 8002866:	d01b      	beq.n	80028a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f06f 0208 	mvn.w	r2, #8
 8002870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2204      	movs	r2, #4
 8002876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f94d 	bl	8002b26 <HAL_TIM_IC_CaptureCallback>
 800288c:	e005      	b.n	800289a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f93f 	bl	8002b12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 f950 	bl	8002b3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	f003 0310 	and.w	r3, r3, #16
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d020      	beq.n	80028ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f003 0310 	and.w	r3, r3, #16
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d01b      	beq.n	80028ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f06f 0210 	mvn.w	r2, #16
 80028bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2208      	movs	r2, #8
 80028c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 f927 	bl	8002b26 <HAL_TIM_IC_CaptureCallback>
 80028d8:	e005      	b.n	80028e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f919 	bl	8002b12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 f92a 	bl	8002b3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00c      	beq.n	8002910 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d007      	beq.n	8002910 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f06f 0201 	mvn.w	r2, #1
 8002908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7fe fb24 	bl	8000f58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00c      	beq.n	8002934 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002920:	2b00      	cmp	r3, #0
 8002922:	d007      	beq.n	8002934 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800292c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 fab0 	bl	8002e94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00c      	beq.n	8002958 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002944:	2b00      	cmp	r3, #0
 8002946:	d007      	beq.n	8002958 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f8fb 	bl	8002b4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	f003 0320 	and.w	r3, r3, #32
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00c      	beq.n	800297c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f003 0320 	and.w	r3, r3, #32
 8002968:	2b00      	cmp	r3, #0
 800296a:	d007      	beq.n	800297c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f06f 0220 	mvn.w	r2, #32
 8002974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 fa82 	bl	8002e80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800297c:	bf00      	nop
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800298e:	2300      	movs	r3, #0
 8002990:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_TIM_ConfigClockSource+0x1c>
 800299c:	2302      	movs	r3, #2
 800299e:	e0b4      	b.n	8002b0a <HAL_TIM_ConfigClockSource+0x186>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2202      	movs	r2, #2
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80029be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80029c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68ba      	ldr	r2, [r7, #8]
 80029ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029d8:	d03e      	beq.n	8002a58 <HAL_TIM_ConfigClockSource+0xd4>
 80029da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029de:	f200 8087 	bhi.w	8002af0 <HAL_TIM_ConfigClockSource+0x16c>
 80029e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029e6:	f000 8086 	beq.w	8002af6 <HAL_TIM_ConfigClockSource+0x172>
 80029ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029ee:	d87f      	bhi.n	8002af0 <HAL_TIM_ConfigClockSource+0x16c>
 80029f0:	2b70      	cmp	r3, #112	@ 0x70
 80029f2:	d01a      	beq.n	8002a2a <HAL_TIM_ConfigClockSource+0xa6>
 80029f4:	2b70      	cmp	r3, #112	@ 0x70
 80029f6:	d87b      	bhi.n	8002af0 <HAL_TIM_ConfigClockSource+0x16c>
 80029f8:	2b60      	cmp	r3, #96	@ 0x60
 80029fa:	d050      	beq.n	8002a9e <HAL_TIM_ConfigClockSource+0x11a>
 80029fc:	2b60      	cmp	r3, #96	@ 0x60
 80029fe:	d877      	bhi.n	8002af0 <HAL_TIM_ConfigClockSource+0x16c>
 8002a00:	2b50      	cmp	r3, #80	@ 0x50
 8002a02:	d03c      	beq.n	8002a7e <HAL_TIM_ConfigClockSource+0xfa>
 8002a04:	2b50      	cmp	r3, #80	@ 0x50
 8002a06:	d873      	bhi.n	8002af0 <HAL_TIM_ConfigClockSource+0x16c>
 8002a08:	2b40      	cmp	r3, #64	@ 0x40
 8002a0a:	d058      	beq.n	8002abe <HAL_TIM_ConfigClockSource+0x13a>
 8002a0c:	2b40      	cmp	r3, #64	@ 0x40
 8002a0e:	d86f      	bhi.n	8002af0 <HAL_TIM_ConfigClockSource+0x16c>
 8002a10:	2b30      	cmp	r3, #48	@ 0x30
 8002a12:	d064      	beq.n	8002ade <HAL_TIM_ConfigClockSource+0x15a>
 8002a14:	2b30      	cmp	r3, #48	@ 0x30
 8002a16:	d86b      	bhi.n	8002af0 <HAL_TIM_ConfigClockSource+0x16c>
 8002a18:	2b20      	cmp	r3, #32
 8002a1a:	d060      	beq.n	8002ade <HAL_TIM_ConfigClockSource+0x15a>
 8002a1c:	2b20      	cmp	r3, #32
 8002a1e:	d867      	bhi.n	8002af0 <HAL_TIM_ConfigClockSource+0x16c>
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d05c      	beq.n	8002ade <HAL_TIM_ConfigClockSource+0x15a>
 8002a24:	2b10      	cmp	r3, #16
 8002a26:	d05a      	beq.n	8002ade <HAL_TIM_ConfigClockSource+0x15a>
 8002a28:	e062      	b.n	8002af0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a3a:	f000 f993 	bl	8002d64 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002a4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	609a      	str	r2, [r3, #8]
      break;
 8002a56:	e04f      	b.n	8002af8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a68:	f000 f97c 	bl	8002d64 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a7a:	609a      	str	r2, [r3, #8]
      break;
 8002a7c:	e03c      	b.n	8002af8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	f000 f8f0 	bl	8002c70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2150      	movs	r1, #80	@ 0x50
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 f949 	bl	8002d2e <TIM_ITRx_SetConfig>
      break;
 8002a9c:	e02c      	b.n	8002af8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002aaa:	461a      	mov	r2, r3
 8002aac:	f000 f90f 	bl	8002cce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2160      	movs	r1, #96	@ 0x60
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 f939 	bl	8002d2e <TIM_ITRx_SetConfig>
      break;
 8002abc:	e01c      	b.n	8002af8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aca:	461a      	mov	r2, r3
 8002acc:	f000 f8d0 	bl	8002c70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2140      	movs	r1, #64	@ 0x40
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 f929 	bl	8002d2e <TIM_ITRx_SetConfig>
      break;
 8002adc:	e00c      	b.n	8002af8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	4610      	mov	r0, r2
 8002aea:	f000 f920 	bl	8002d2e <TIM_ITRx_SetConfig>
      break;
 8002aee:	e003      	b.n	8002af8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	73fb      	strb	r3, [r7, #15]
      break;
 8002af4:	e000      	b.n	8002af8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002af6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
	...

08002b64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a37      	ldr	r2, [pc, #220]	@ (8002c54 <TIM_Base_SetConfig+0xf0>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d00f      	beq.n	8002b9c <TIM_Base_SetConfig+0x38>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b82:	d00b      	beq.n	8002b9c <TIM_Base_SetConfig+0x38>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a34      	ldr	r2, [pc, #208]	@ (8002c58 <TIM_Base_SetConfig+0xf4>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d007      	beq.n	8002b9c <TIM_Base_SetConfig+0x38>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a33      	ldr	r2, [pc, #204]	@ (8002c5c <TIM_Base_SetConfig+0xf8>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d003      	beq.n	8002b9c <TIM_Base_SetConfig+0x38>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a32      	ldr	r2, [pc, #200]	@ (8002c60 <TIM_Base_SetConfig+0xfc>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d108      	bne.n	8002bae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ba2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a28      	ldr	r2, [pc, #160]	@ (8002c54 <TIM_Base_SetConfig+0xf0>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d01b      	beq.n	8002bee <TIM_Base_SetConfig+0x8a>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bbc:	d017      	beq.n	8002bee <TIM_Base_SetConfig+0x8a>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a25      	ldr	r2, [pc, #148]	@ (8002c58 <TIM_Base_SetConfig+0xf4>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d013      	beq.n	8002bee <TIM_Base_SetConfig+0x8a>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a24      	ldr	r2, [pc, #144]	@ (8002c5c <TIM_Base_SetConfig+0xf8>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d00f      	beq.n	8002bee <TIM_Base_SetConfig+0x8a>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a23      	ldr	r2, [pc, #140]	@ (8002c60 <TIM_Base_SetConfig+0xfc>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d00b      	beq.n	8002bee <TIM_Base_SetConfig+0x8a>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a22      	ldr	r2, [pc, #136]	@ (8002c64 <TIM_Base_SetConfig+0x100>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d007      	beq.n	8002bee <TIM_Base_SetConfig+0x8a>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a21      	ldr	r2, [pc, #132]	@ (8002c68 <TIM_Base_SetConfig+0x104>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d003      	beq.n	8002bee <TIM_Base_SetConfig+0x8a>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a20      	ldr	r2, [pc, #128]	@ (8002c6c <TIM_Base_SetConfig+0x108>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d108      	bne.n	8002c00 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a0c      	ldr	r2, [pc, #48]	@ (8002c54 <TIM_Base_SetConfig+0xf0>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d103      	bne.n	8002c2e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	691a      	ldr	r2, [r3, #16]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f043 0204 	orr.w	r2, r3, #4
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	601a      	str	r2, [r3, #0]
}
 8002c46:	bf00      	nop
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	40010000 	.word	0x40010000
 8002c58:	40000400 	.word	0x40000400
 8002c5c:	40000800 	.word	0x40000800
 8002c60:	40000c00 	.word	0x40000c00
 8002c64:	40014000 	.word	0x40014000
 8002c68:	40014400 	.word	0x40014400
 8002c6c:	40014800 	.word	0x40014800

08002c70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b087      	sub	sp, #28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	f023 0201 	bic.w	r2, r3, #1
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	f023 030a 	bic.w	r3, r3, #10
 8002cac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	621a      	str	r2, [r3, #32]
}
 8002cc2:	bf00      	nop
 8002cc4:	371c      	adds	r7, #28
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b087      	sub	sp, #28
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	f023 0210 	bic.w	r2, r3, #16
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002cf8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	031b      	lsls	r3, r3, #12
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002d0a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	011b      	lsls	r3, r3, #4
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	621a      	str	r2, [r3, #32]
}
 8002d22:	bf00      	nop
 8002d24:	371c      	adds	r7, #28
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b085      	sub	sp, #20
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
 8002d36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	f043 0307 	orr.w	r3, r3, #7
 8002d50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	609a      	str	r2, [r3, #8]
}
 8002d58:	bf00      	nop
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b087      	sub	sp, #28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
 8002d70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	021a      	lsls	r2, r3, #8
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	431a      	orrs	r2, r3
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	609a      	str	r2, [r3, #8]
}
 8002d98:	bf00      	nop
 8002d9a:	371c      	adds	r7, #28
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d101      	bne.n	8002dbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002db8:	2302      	movs	r3, #2
 8002dba:	e050      	b.n	8002e5e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002de2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a1c      	ldr	r2, [pc, #112]	@ (8002e6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d018      	beq.n	8002e32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e08:	d013      	beq.n	8002e32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a18      	ldr	r2, [pc, #96]	@ (8002e70 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d00e      	beq.n	8002e32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a16      	ldr	r2, [pc, #88]	@ (8002e74 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d009      	beq.n	8002e32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a15      	ldr	r2, [pc, #84]	@ (8002e78 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d004      	beq.n	8002e32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a13      	ldr	r2, [pc, #76]	@ (8002e7c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d10c      	bne.n	8002e4c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68ba      	ldr	r2, [r7, #8]
 8002e4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3714      	adds	r7, #20
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	40010000 	.word	0x40010000
 8002e70:	40000400 	.word	0x40000400
 8002e74:	40000800 	.word	0x40000800
 8002e78:	40000c00 	.word	0x40000c00
 8002e7c:	40014000 	.word	0x40014000

08002e80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e042      	b.n	8002f40 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d106      	bne.n	8002ed4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f7fd fde2 	bl	8000a98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2224      	movs	r2, #36	@ 0x24
 8002ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002eea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 f973 	bl	80031d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	691a      	ldr	r2, [r3, #16]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695a      	ldr	r2, [r3, #20]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68da      	ldr	r2, [r3, #12]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2220      	movs	r2, #32
 8002f34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b08a      	sub	sp, #40	@ 0x28
 8002f4c:	af02      	add	r7, sp, #8
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	603b      	str	r3, [r7, #0]
 8002f54:	4613      	mov	r3, r2
 8002f56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b20      	cmp	r3, #32
 8002f66:	d175      	bne.n	8003054 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d002      	beq.n	8002f74 <HAL_UART_Transmit+0x2c>
 8002f6e:	88fb      	ldrh	r3, [r7, #6]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e06e      	b.n	8003056 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2221      	movs	r2, #33	@ 0x21
 8002f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f86:	f7fe fbcb 	bl	8001720 <HAL_GetTick>
 8002f8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	88fa      	ldrh	r2, [r7, #6]
 8002f90:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	88fa      	ldrh	r2, [r7, #6]
 8002f96:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fa0:	d108      	bne.n	8002fb4 <HAL_UART_Transmit+0x6c>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d104      	bne.n	8002fb4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002faa:	2300      	movs	r3, #0
 8002fac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	61bb      	str	r3, [r7, #24]
 8002fb2:	e003      	b.n	8002fbc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fbc:	e02e      	b.n	800301c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	2180      	movs	r1, #128	@ 0x80
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 f848 	bl	800305e <UART_WaitOnFlagUntilTimeout>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d005      	beq.n	8002fe0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e03a      	b.n	8003056 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10b      	bne.n	8002ffe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	881b      	ldrh	r3, [r3, #0]
 8002fea:	461a      	mov	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ff4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	3302      	adds	r3, #2
 8002ffa:	61bb      	str	r3, [r7, #24]
 8002ffc:	e007      	b.n	800300e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	781a      	ldrb	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	3301      	adds	r3, #1
 800300c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003012:	b29b      	uxth	r3, r3
 8003014:	3b01      	subs	r3, #1
 8003016:	b29a      	uxth	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003020:	b29b      	uxth	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1cb      	bne.n	8002fbe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	9300      	str	r3, [sp, #0]
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	2200      	movs	r2, #0
 800302e:	2140      	movs	r1, #64	@ 0x40
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f000 f814 	bl	800305e <UART_WaitOnFlagUntilTimeout>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d005      	beq.n	8003048 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2220      	movs	r2, #32
 8003040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e006      	b.n	8003056 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2220      	movs	r2, #32
 800304c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003050:	2300      	movs	r3, #0
 8003052:	e000      	b.n	8003056 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003054:	2302      	movs	r3, #2
  }
}
 8003056:	4618      	mov	r0, r3
 8003058:	3720      	adds	r7, #32
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b086      	sub	sp, #24
 8003062:	af00      	add	r7, sp, #0
 8003064:	60f8      	str	r0, [r7, #12]
 8003066:	60b9      	str	r1, [r7, #8]
 8003068:	603b      	str	r3, [r7, #0]
 800306a:	4613      	mov	r3, r2
 800306c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800306e:	e03b      	b.n	80030e8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003076:	d037      	beq.n	80030e8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003078:	f7fe fb52 	bl	8001720 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	6a3a      	ldr	r2, [r7, #32]
 8003084:	429a      	cmp	r2, r3
 8003086:	d302      	bcc.n	800308e <UART_WaitOnFlagUntilTimeout+0x30>
 8003088:	6a3b      	ldr	r3, [r7, #32]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e03a      	b.n	8003108 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b00      	cmp	r3, #0
 800309e:	d023      	beq.n	80030e8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2b80      	cmp	r3, #128	@ 0x80
 80030a4:	d020      	beq.n	80030e8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2b40      	cmp	r3, #64	@ 0x40
 80030aa:	d01d      	beq.n	80030e8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	d116      	bne.n	80030e8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80030ba:	2300      	movs	r3, #0
 80030bc:	617b      	str	r3, [r7, #20]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	617b      	str	r3, [r7, #20]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	617b      	str	r3, [r7, #20]
 80030ce:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f000 f81d 	bl	8003110 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2208      	movs	r2, #8
 80030da:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e00f      	b.n	8003108 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	4013      	ands	r3, r2
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	bf0c      	ite	eq
 80030f8:	2301      	moveq	r3, #1
 80030fa:	2300      	movne	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	461a      	mov	r2, r3
 8003100:	79fb      	ldrb	r3, [r7, #7]
 8003102:	429a      	cmp	r2, r3
 8003104:	d0b4      	beq.n	8003070 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003110:	b480      	push	{r7}
 8003112:	b095      	sub	sp, #84	@ 0x54
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	330c      	adds	r3, #12
 800311e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003122:	e853 3f00 	ldrex	r3, [r3]
 8003126:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800312a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800312e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	330c      	adds	r3, #12
 8003136:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003138:	643a      	str	r2, [r7, #64]	@ 0x40
 800313a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800313e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003140:	e841 2300 	strex	r3, r2, [r1]
 8003144:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1e5      	bne.n	8003118 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	3314      	adds	r3, #20
 8003152:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003154:	6a3b      	ldr	r3, [r7, #32]
 8003156:	e853 3f00 	ldrex	r3, [r3]
 800315a:	61fb      	str	r3, [r7, #28]
   return(result);
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	f023 0301 	bic.w	r3, r3, #1
 8003162:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	3314      	adds	r3, #20
 800316a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800316c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800316e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003170:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003172:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003174:	e841 2300 	strex	r3, r2, [r1]
 8003178:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800317a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1e5      	bne.n	800314c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003184:	2b01      	cmp	r3, #1
 8003186:	d119      	bne.n	80031bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	330c      	adds	r3, #12
 800318e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	e853 3f00 	ldrex	r3, [r3]
 8003196:	60bb      	str	r3, [r7, #8]
   return(result);
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	f023 0310 	bic.w	r3, r3, #16
 800319e:	647b      	str	r3, [r7, #68]	@ 0x44
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	330c      	adds	r3, #12
 80031a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031a8:	61ba      	str	r2, [r7, #24]
 80031aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ac:	6979      	ldr	r1, [r7, #20]
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	e841 2300 	strex	r3, r2, [r1]
 80031b4:	613b      	str	r3, [r7, #16]
   return(result);
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1e5      	bne.n	8003188 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2220      	movs	r2, #32
 80031c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80031ca:	bf00      	nop
 80031cc:	3754      	adds	r7, #84	@ 0x54
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
	...

080031d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031dc:	b0c0      	sub	sp, #256	@ 0x100
 80031de:	af00      	add	r7, sp, #0
 80031e0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80031f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f4:	68d9      	ldr	r1, [r3, #12]
 80031f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	ea40 0301 	orr.w	r3, r0, r1
 8003200:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	431a      	orrs	r2, r3
 8003210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	431a      	orrs	r2, r3
 8003218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	4313      	orrs	r3, r2
 8003220:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003230:	f021 010c 	bic.w	r1, r1, #12
 8003234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800323e:	430b      	orrs	r3, r1
 8003240:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800324e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003252:	6999      	ldr	r1, [r3, #24]
 8003254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	ea40 0301 	orr.w	r3, r0, r1
 800325e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	4b8f      	ldr	r3, [pc, #572]	@ (80034a4 <UART_SetConfig+0x2cc>)
 8003268:	429a      	cmp	r2, r3
 800326a:	d005      	beq.n	8003278 <UART_SetConfig+0xa0>
 800326c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	4b8d      	ldr	r3, [pc, #564]	@ (80034a8 <UART_SetConfig+0x2d0>)
 8003274:	429a      	cmp	r2, r3
 8003276:	d104      	bne.n	8003282 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003278:	f7ff f9ce 	bl	8002618 <HAL_RCC_GetPCLK2Freq>
 800327c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003280:	e003      	b.n	800328a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003282:	f7ff f9b5 	bl	80025f0 <HAL_RCC_GetPCLK1Freq>
 8003286:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800328a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003294:	f040 810c 	bne.w	80034b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003298:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800329c:	2200      	movs	r2, #0
 800329e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80032a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80032a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80032aa:	4622      	mov	r2, r4
 80032ac:	462b      	mov	r3, r5
 80032ae:	1891      	adds	r1, r2, r2
 80032b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80032b2:	415b      	adcs	r3, r3
 80032b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80032b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80032ba:	4621      	mov	r1, r4
 80032bc:	eb12 0801 	adds.w	r8, r2, r1
 80032c0:	4629      	mov	r1, r5
 80032c2:	eb43 0901 	adc.w	r9, r3, r1
 80032c6:	f04f 0200 	mov.w	r2, #0
 80032ca:	f04f 0300 	mov.w	r3, #0
 80032ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032da:	4690      	mov	r8, r2
 80032dc:	4699      	mov	r9, r3
 80032de:	4623      	mov	r3, r4
 80032e0:	eb18 0303 	adds.w	r3, r8, r3
 80032e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80032e8:	462b      	mov	r3, r5
 80032ea:	eb49 0303 	adc.w	r3, r9, r3
 80032ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80032f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80032fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003302:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003306:	460b      	mov	r3, r1
 8003308:	18db      	adds	r3, r3, r3
 800330a:	653b      	str	r3, [r7, #80]	@ 0x50
 800330c:	4613      	mov	r3, r2
 800330e:	eb42 0303 	adc.w	r3, r2, r3
 8003312:	657b      	str	r3, [r7, #84]	@ 0x54
 8003314:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003318:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800331c:	f7fc ffb8 	bl	8000290 <__aeabi_uldivmod>
 8003320:	4602      	mov	r2, r0
 8003322:	460b      	mov	r3, r1
 8003324:	4b61      	ldr	r3, [pc, #388]	@ (80034ac <UART_SetConfig+0x2d4>)
 8003326:	fba3 2302 	umull	r2, r3, r3, r2
 800332a:	095b      	lsrs	r3, r3, #5
 800332c:	011c      	lsls	r4, r3, #4
 800332e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003332:	2200      	movs	r2, #0
 8003334:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003338:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800333c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003340:	4642      	mov	r2, r8
 8003342:	464b      	mov	r3, r9
 8003344:	1891      	adds	r1, r2, r2
 8003346:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003348:	415b      	adcs	r3, r3
 800334a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800334c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003350:	4641      	mov	r1, r8
 8003352:	eb12 0a01 	adds.w	sl, r2, r1
 8003356:	4649      	mov	r1, r9
 8003358:	eb43 0b01 	adc.w	fp, r3, r1
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	f04f 0300 	mov.w	r3, #0
 8003364:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003368:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800336c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003370:	4692      	mov	sl, r2
 8003372:	469b      	mov	fp, r3
 8003374:	4643      	mov	r3, r8
 8003376:	eb1a 0303 	adds.w	r3, sl, r3
 800337a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800337e:	464b      	mov	r3, r9
 8003380:	eb4b 0303 	adc.w	r3, fp, r3
 8003384:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003394:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003398:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800339c:	460b      	mov	r3, r1
 800339e:	18db      	adds	r3, r3, r3
 80033a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80033a2:	4613      	mov	r3, r2
 80033a4:	eb42 0303 	adc.w	r3, r2, r3
 80033a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80033aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80033ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80033b2:	f7fc ff6d 	bl	8000290 <__aeabi_uldivmod>
 80033b6:	4602      	mov	r2, r0
 80033b8:	460b      	mov	r3, r1
 80033ba:	4611      	mov	r1, r2
 80033bc:	4b3b      	ldr	r3, [pc, #236]	@ (80034ac <UART_SetConfig+0x2d4>)
 80033be:	fba3 2301 	umull	r2, r3, r3, r1
 80033c2:	095b      	lsrs	r3, r3, #5
 80033c4:	2264      	movs	r2, #100	@ 0x64
 80033c6:	fb02 f303 	mul.w	r3, r2, r3
 80033ca:	1acb      	subs	r3, r1, r3
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80033d2:	4b36      	ldr	r3, [pc, #216]	@ (80034ac <UART_SetConfig+0x2d4>)
 80033d4:	fba3 2302 	umull	r2, r3, r3, r2
 80033d8:	095b      	lsrs	r3, r3, #5
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80033e0:	441c      	add	r4, r3
 80033e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033e6:	2200      	movs	r2, #0
 80033e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033ec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80033f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80033f4:	4642      	mov	r2, r8
 80033f6:	464b      	mov	r3, r9
 80033f8:	1891      	adds	r1, r2, r2
 80033fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80033fc:	415b      	adcs	r3, r3
 80033fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003400:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003404:	4641      	mov	r1, r8
 8003406:	1851      	adds	r1, r2, r1
 8003408:	6339      	str	r1, [r7, #48]	@ 0x30
 800340a:	4649      	mov	r1, r9
 800340c:	414b      	adcs	r3, r1
 800340e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003410:	f04f 0200 	mov.w	r2, #0
 8003414:	f04f 0300 	mov.w	r3, #0
 8003418:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800341c:	4659      	mov	r1, fp
 800341e:	00cb      	lsls	r3, r1, #3
 8003420:	4651      	mov	r1, sl
 8003422:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003426:	4651      	mov	r1, sl
 8003428:	00ca      	lsls	r2, r1, #3
 800342a:	4610      	mov	r0, r2
 800342c:	4619      	mov	r1, r3
 800342e:	4603      	mov	r3, r0
 8003430:	4642      	mov	r2, r8
 8003432:	189b      	adds	r3, r3, r2
 8003434:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003438:	464b      	mov	r3, r9
 800343a:	460a      	mov	r2, r1
 800343c:	eb42 0303 	adc.w	r3, r2, r3
 8003440:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003450:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003454:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003458:	460b      	mov	r3, r1
 800345a:	18db      	adds	r3, r3, r3
 800345c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800345e:	4613      	mov	r3, r2
 8003460:	eb42 0303 	adc.w	r3, r2, r3
 8003464:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003466:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800346a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800346e:	f7fc ff0f 	bl	8000290 <__aeabi_uldivmod>
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	4b0d      	ldr	r3, [pc, #52]	@ (80034ac <UART_SetConfig+0x2d4>)
 8003478:	fba3 1302 	umull	r1, r3, r3, r2
 800347c:	095b      	lsrs	r3, r3, #5
 800347e:	2164      	movs	r1, #100	@ 0x64
 8003480:	fb01 f303 	mul.w	r3, r1, r3
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	3332      	adds	r3, #50	@ 0x32
 800348a:	4a08      	ldr	r2, [pc, #32]	@ (80034ac <UART_SetConfig+0x2d4>)
 800348c:	fba2 2303 	umull	r2, r3, r2, r3
 8003490:	095b      	lsrs	r3, r3, #5
 8003492:	f003 0207 	and.w	r2, r3, #7
 8003496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4422      	add	r2, r4
 800349e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80034a0:	e106      	b.n	80036b0 <UART_SetConfig+0x4d8>
 80034a2:	bf00      	nop
 80034a4:	40011000 	.word	0x40011000
 80034a8:	40011400 	.word	0x40011400
 80034ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034b4:	2200      	movs	r2, #0
 80034b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80034ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80034be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80034c2:	4642      	mov	r2, r8
 80034c4:	464b      	mov	r3, r9
 80034c6:	1891      	adds	r1, r2, r2
 80034c8:	6239      	str	r1, [r7, #32]
 80034ca:	415b      	adcs	r3, r3
 80034cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80034ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034d2:	4641      	mov	r1, r8
 80034d4:	1854      	adds	r4, r2, r1
 80034d6:	4649      	mov	r1, r9
 80034d8:	eb43 0501 	adc.w	r5, r3, r1
 80034dc:	f04f 0200 	mov.w	r2, #0
 80034e0:	f04f 0300 	mov.w	r3, #0
 80034e4:	00eb      	lsls	r3, r5, #3
 80034e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034ea:	00e2      	lsls	r2, r4, #3
 80034ec:	4614      	mov	r4, r2
 80034ee:	461d      	mov	r5, r3
 80034f0:	4643      	mov	r3, r8
 80034f2:	18e3      	adds	r3, r4, r3
 80034f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80034f8:	464b      	mov	r3, r9
 80034fa:	eb45 0303 	adc.w	r3, r5, r3
 80034fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800350e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003512:	f04f 0200 	mov.w	r2, #0
 8003516:	f04f 0300 	mov.w	r3, #0
 800351a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800351e:	4629      	mov	r1, r5
 8003520:	008b      	lsls	r3, r1, #2
 8003522:	4621      	mov	r1, r4
 8003524:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003528:	4621      	mov	r1, r4
 800352a:	008a      	lsls	r2, r1, #2
 800352c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003530:	f7fc feae 	bl	8000290 <__aeabi_uldivmod>
 8003534:	4602      	mov	r2, r0
 8003536:	460b      	mov	r3, r1
 8003538:	4b60      	ldr	r3, [pc, #384]	@ (80036bc <UART_SetConfig+0x4e4>)
 800353a:	fba3 2302 	umull	r2, r3, r3, r2
 800353e:	095b      	lsrs	r3, r3, #5
 8003540:	011c      	lsls	r4, r3, #4
 8003542:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003546:	2200      	movs	r2, #0
 8003548:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800354c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003550:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003554:	4642      	mov	r2, r8
 8003556:	464b      	mov	r3, r9
 8003558:	1891      	adds	r1, r2, r2
 800355a:	61b9      	str	r1, [r7, #24]
 800355c:	415b      	adcs	r3, r3
 800355e:	61fb      	str	r3, [r7, #28]
 8003560:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003564:	4641      	mov	r1, r8
 8003566:	1851      	adds	r1, r2, r1
 8003568:	6139      	str	r1, [r7, #16]
 800356a:	4649      	mov	r1, r9
 800356c:	414b      	adcs	r3, r1
 800356e:	617b      	str	r3, [r7, #20]
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800357c:	4659      	mov	r1, fp
 800357e:	00cb      	lsls	r3, r1, #3
 8003580:	4651      	mov	r1, sl
 8003582:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003586:	4651      	mov	r1, sl
 8003588:	00ca      	lsls	r2, r1, #3
 800358a:	4610      	mov	r0, r2
 800358c:	4619      	mov	r1, r3
 800358e:	4603      	mov	r3, r0
 8003590:	4642      	mov	r2, r8
 8003592:	189b      	adds	r3, r3, r2
 8003594:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003598:	464b      	mov	r3, r9
 800359a:	460a      	mov	r2, r1
 800359c:	eb42 0303 	adc.w	r3, r2, r3
 80035a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80035a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80035ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80035b0:	f04f 0200 	mov.w	r2, #0
 80035b4:	f04f 0300 	mov.w	r3, #0
 80035b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80035bc:	4649      	mov	r1, r9
 80035be:	008b      	lsls	r3, r1, #2
 80035c0:	4641      	mov	r1, r8
 80035c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035c6:	4641      	mov	r1, r8
 80035c8:	008a      	lsls	r2, r1, #2
 80035ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80035ce:	f7fc fe5f 	bl	8000290 <__aeabi_uldivmod>
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	4611      	mov	r1, r2
 80035d8:	4b38      	ldr	r3, [pc, #224]	@ (80036bc <UART_SetConfig+0x4e4>)
 80035da:	fba3 2301 	umull	r2, r3, r3, r1
 80035de:	095b      	lsrs	r3, r3, #5
 80035e0:	2264      	movs	r2, #100	@ 0x64
 80035e2:	fb02 f303 	mul.w	r3, r2, r3
 80035e6:	1acb      	subs	r3, r1, r3
 80035e8:	011b      	lsls	r3, r3, #4
 80035ea:	3332      	adds	r3, #50	@ 0x32
 80035ec:	4a33      	ldr	r2, [pc, #204]	@ (80036bc <UART_SetConfig+0x4e4>)
 80035ee:	fba2 2303 	umull	r2, r3, r2, r3
 80035f2:	095b      	lsrs	r3, r3, #5
 80035f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035f8:	441c      	add	r4, r3
 80035fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035fe:	2200      	movs	r2, #0
 8003600:	673b      	str	r3, [r7, #112]	@ 0x70
 8003602:	677a      	str	r2, [r7, #116]	@ 0x74
 8003604:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003608:	4642      	mov	r2, r8
 800360a:	464b      	mov	r3, r9
 800360c:	1891      	adds	r1, r2, r2
 800360e:	60b9      	str	r1, [r7, #8]
 8003610:	415b      	adcs	r3, r3
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003618:	4641      	mov	r1, r8
 800361a:	1851      	adds	r1, r2, r1
 800361c:	6039      	str	r1, [r7, #0]
 800361e:	4649      	mov	r1, r9
 8003620:	414b      	adcs	r3, r1
 8003622:	607b      	str	r3, [r7, #4]
 8003624:	f04f 0200 	mov.w	r2, #0
 8003628:	f04f 0300 	mov.w	r3, #0
 800362c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003630:	4659      	mov	r1, fp
 8003632:	00cb      	lsls	r3, r1, #3
 8003634:	4651      	mov	r1, sl
 8003636:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800363a:	4651      	mov	r1, sl
 800363c:	00ca      	lsls	r2, r1, #3
 800363e:	4610      	mov	r0, r2
 8003640:	4619      	mov	r1, r3
 8003642:	4603      	mov	r3, r0
 8003644:	4642      	mov	r2, r8
 8003646:	189b      	adds	r3, r3, r2
 8003648:	66bb      	str	r3, [r7, #104]	@ 0x68
 800364a:	464b      	mov	r3, r9
 800364c:	460a      	mov	r2, r1
 800364e:	eb42 0303 	adc.w	r3, r2, r3
 8003652:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	663b      	str	r3, [r7, #96]	@ 0x60
 800365e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003660:	f04f 0200 	mov.w	r2, #0
 8003664:	f04f 0300 	mov.w	r3, #0
 8003668:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800366c:	4649      	mov	r1, r9
 800366e:	008b      	lsls	r3, r1, #2
 8003670:	4641      	mov	r1, r8
 8003672:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003676:	4641      	mov	r1, r8
 8003678:	008a      	lsls	r2, r1, #2
 800367a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800367e:	f7fc fe07 	bl	8000290 <__aeabi_uldivmod>
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	4b0d      	ldr	r3, [pc, #52]	@ (80036bc <UART_SetConfig+0x4e4>)
 8003688:	fba3 1302 	umull	r1, r3, r3, r2
 800368c:	095b      	lsrs	r3, r3, #5
 800368e:	2164      	movs	r1, #100	@ 0x64
 8003690:	fb01 f303 	mul.w	r3, r1, r3
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	3332      	adds	r3, #50	@ 0x32
 800369a:	4a08      	ldr	r2, [pc, #32]	@ (80036bc <UART_SetConfig+0x4e4>)
 800369c:	fba2 2303 	umull	r2, r3, r2, r3
 80036a0:	095b      	lsrs	r3, r3, #5
 80036a2:	f003 020f 	and.w	r2, r3, #15
 80036a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4422      	add	r2, r4
 80036ae:	609a      	str	r2, [r3, #8]
}
 80036b0:	bf00      	nop
 80036b2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80036b6:	46bd      	mov	sp, r7
 80036b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036bc:	51eb851f 	.word	0x51eb851f

080036c0 <siprintf>:
 80036c0:	b40e      	push	{r1, r2, r3}
 80036c2:	b510      	push	{r4, lr}
 80036c4:	b09d      	sub	sp, #116	@ 0x74
 80036c6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80036c8:	9002      	str	r0, [sp, #8]
 80036ca:	9006      	str	r0, [sp, #24]
 80036cc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80036d0:	480a      	ldr	r0, [pc, #40]	@ (80036fc <siprintf+0x3c>)
 80036d2:	9107      	str	r1, [sp, #28]
 80036d4:	9104      	str	r1, [sp, #16]
 80036d6:	490a      	ldr	r1, [pc, #40]	@ (8003700 <siprintf+0x40>)
 80036d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80036dc:	9105      	str	r1, [sp, #20]
 80036de:	2400      	movs	r4, #0
 80036e0:	a902      	add	r1, sp, #8
 80036e2:	6800      	ldr	r0, [r0, #0]
 80036e4:	9301      	str	r3, [sp, #4]
 80036e6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80036e8:	f000 f994 	bl	8003a14 <_svfiprintf_r>
 80036ec:	9b02      	ldr	r3, [sp, #8]
 80036ee:	701c      	strb	r4, [r3, #0]
 80036f0:	b01d      	add	sp, #116	@ 0x74
 80036f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036f6:	b003      	add	sp, #12
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	20000084 	.word	0x20000084
 8003700:	ffff0208 	.word	0xffff0208

08003704 <memset>:
 8003704:	4402      	add	r2, r0
 8003706:	4603      	mov	r3, r0
 8003708:	4293      	cmp	r3, r2
 800370a:	d100      	bne.n	800370e <memset+0xa>
 800370c:	4770      	bx	lr
 800370e:	f803 1b01 	strb.w	r1, [r3], #1
 8003712:	e7f9      	b.n	8003708 <memset+0x4>

08003714 <__errno>:
 8003714:	4b01      	ldr	r3, [pc, #4]	@ (800371c <__errno+0x8>)
 8003716:	6818      	ldr	r0, [r3, #0]
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	20000084 	.word	0x20000084

08003720 <__libc_init_array>:
 8003720:	b570      	push	{r4, r5, r6, lr}
 8003722:	4d0d      	ldr	r5, [pc, #52]	@ (8003758 <__libc_init_array+0x38>)
 8003724:	4c0d      	ldr	r4, [pc, #52]	@ (800375c <__libc_init_array+0x3c>)
 8003726:	1b64      	subs	r4, r4, r5
 8003728:	10a4      	asrs	r4, r4, #2
 800372a:	2600      	movs	r6, #0
 800372c:	42a6      	cmp	r6, r4
 800372e:	d109      	bne.n	8003744 <__libc_init_array+0x24>
 8003730:	4d0b      	ldr	r5, [pc, #44]	@ (8003760 <__libc_init_array+0x40>)
 8003732:	4c0c      	ldr	r4, [pc, #48]	@ (8003764 <__libc_init_array+0x44>)
 8003734:	f000 fc64 	bl	8004000 <_init>
 8003738:	1b64      	subs	r4, r4, r5
 800373a:	10a4      	asrs	r4, r4, #2
 800373c:	2600      	movs	r6, #0
 800373e:	42a6      	cmp	r6, r4
 8003740:	d105      	bne.n	800374e <__libc_init_array+0x2e>
 8003742:	bd70      	pop	{r4, r5, r6, pc}
 8003744:	f855 3b04 	ldr.w	r3, [r5], #4
 8003748:	4798      	blx	r3
 800374a:	3601      	adds	r6, #1
 800374c:	e7ee      	b.n	800372c <__libc_init_array+0xc>
 800374e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003752:	4798      	blx	r3
 8003754:	3601      	adds	r6, #1
 8003756:	e7f2      	b.n	800373e <__libc_init_array+0x1e>
 8003758:	080040c0 	.word	0x080040c0
 800375c:	080040c0 	.word	0x080040c0
 8003760:	080040c0 	.word	0x080040c0
 8003764:	080040c4 	.word	0x080040c4

08003768 <__retarget_lock_acquire_recursive>:
 8003768:	4770      	bx	lr

0800376a <__retarget_lock_release_recursive>:
 800376a:	4770      	bx	lr

0800376c <_free_r>:
 800376c:	b538      	push	{r3, r4, r5, lr}
 800376e:	4605      	mov	r5, r0
 8003770:	2900      	cmp	r1, #0
 8003772:	d041      	beq.n	80037f8 <_free_r+0x8c>
 8003774:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003778:	1f0c      	subs	r4, r1, #4
 800377a:	2b00      	cmp	r3, #0
 800377c:	bfb8      	it	lt
 800377e:	18e4      	addlt	r4, r4, r3
 8003780:	f000 f8e0 	bl	8003944 <__malloc_lock>
 8003784:	4a1d      	ldr	r2, [pc, #116]	@ (80037fc <_free_r+0x90>)
 8003786:	6813      	ldr	r3, [r2, #0]
 8003788:	b933      	cbnz	r3, 8003798 <_free_r+0x2c>
 800378a:	6063      	str	r3, [r4, #4]
 800378c:	6014      	str	r4, [r2, #0]
 800378e:	4628      	mov	r0, r5
 8003790:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003794:	f000 b8dc 	b.w	8003950 <__malloc_unlock>
 8003798:	42a3      	cmp	r3, r4
 800379a:	d908      	bls.n	80037ae <_free_r+0x42>
 800379c:	6820      	ldr	r0, [r4, #0]
 800379e:	1821      	adds	r1, r4, r0
 80037a0:	428b      	cmp	r3, r1
 80037a2:	bf01      	itttt	eq
 80037a4:	6819      	ldreq	r1, [r3, #0]
 80037a6:	685b      	ldreq	r3, [r3, #4]
 80037a8:	1809      	addeq	r1, r1, r0
 80037aa:	6021      	streq	r1, [r4, #0]
 80037ac:	e7ed      	b.n	800378a <_free_r+0x1e>
 80037ae:	461a      	mov	r2, r3
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	b10b      	cbz	r3, 80037b8 <_free_r+0x4c>
 80037b4:	42a3      	cmp	r3, r4
 80037b6:	d9fa      	bls.n	80037ae <_free_r+0x42>
 80037b8:	6811      	ldr	r1, [r2, #0]
 80037ba:	1850      	adds	r0, r2, r1
 80037bc:	42a0      	cmp	r0, r4
 80037be:	d10b      	bne.n	80037d8 <_free_r+0x6c>
 80037c0:	6820      	ldr	r0, [r4, #0]
 80037c2:	4401      	add	r1, r0
 80037c4:	1850      	adds	r0, r2, r1
 80037c6:	4283      	cmp	r3, r0
 80037c8:	6011      	str	r1, [r2, #0]
 80037ca:	d1e0      	bne.n	800378e <_free_r+0x22>
 80037cc:	6818      	ldr	r0, [r3, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	6053      	str	r3, [r2, #4]
 80037d2:	4408      	add	r0, r1
 80037d4:	6010      	str	r0, [r2, #0]
 80037d6:	e7da      	b.n	800378e <_free_r+0x22>
 80037d8:	d902      	bls.n	80037e0 <_free_r+0x74>
 80037da:	230c      	movs	r3, #12
 80037dc:	602b      	str	r3, [r5, #0]
 80037de:	e7d6      	b.n	800378e <_free_r+0x22>
 80037e0:	6820      	ldr	r0, [r4, #0]
 80037e2:	1821      	adds	r1, r4, r0
 80037e4:	428b      	cmp	r3, r1
 80037e6:	bf04      	itt	eq
 80037e8:	6819      	ldreq	r1, [r3, #0]
 80037ea:	685b      	ldreq	r3, [r3, #4]
 80037ec:	6063      	str	r3, [r4, #4]
 80037ee:	bf04      	itt	eq
 80037f0:	1809      	addeq	r1, r1, r0
 80037f2:	6021      	streq	r1, [r4, #0]
 80037f4:	6054      	str	r4, [r2, #4]
 80037f6:	e7ca      	b.n	800378e <_free_r+0x22>
 80037f8:	bd38      	pop	{r3, r4, r5, pc}
 80037fa:	bf00      	nop
 80037fc:	20000304 	.word	0x20000304

08003800 <sbrk_aligned>:
 8003800:	b570      	push	{r4, r5, r6, lr}
 8003802:	4e0f      	ldr	r6, [pc, #60]	@ (8003840 <sbrk_aligned+0x40>)
 8003804:	460c      	mov	r4, r1
 8003806:	6831      	ldr	r1, [r6, #0]
 8003808:	4605      	mov	r5, r0
 800380a:	b911      	cbnz	r1, 8003812 <sbrk_aligned+0x12>
 800380c:	f000 fba4 	bl	8003f58 <_sbrk_r>
 8003810:	6030      	str	r0, [r6, #0]
 8003812:	4621      	mov	r1, r4
 8003814:	4628      	mov	r0, r5
 8003816:	f000 fb9f 	bl	8003f58 <_sbrk_r>
 800381a:	1c43      	adds	r3, r0, #1
 800381c:	d103      	bne.n	8003826 <sbrk_aligned+0x26>
 800381e:	f04f 34ff 	mov.w	r4, #4294967295
 8003822:	4620      	mov	r0, r4
 8003824:	bd70      	pop	{r4, r5, r6, pc}
 8003826:	1cc4      	adds	r4, r0, #3
 8003828:	f024 0403 	bic.w	r4, r4, #3
 800382c:	42a0      	cmp	r0, r4
 800382e:	d0f8      	beq.n	8003822 <sbrk_aligned+0x22>
 8003830:	1a21      	subs	r1, r4, r0
 8003832:	4628      	mov	r0, r5
 8003834:	f000 fb90 	bl	8003f58 <_sbrk_r>
 8003838:	3001      	adds	r0, #1
 800383a:	d1f2      	bne.n	8003822 <sbrk_aligned+0x22>
 800383c:	e7ef      	b.n	800381e <sbrk_aligned+0x1e>
 800383e:	bf00      	nop
 8003840:	20000300 	.word	0x20000300

08003844 <_malloc_r>:
 8003844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003848:	1ccd      	adds	r5, r1, #3
 800384a:	f025 0503 	bic.w	r5, r5, #3
 800384e:	3508      	adds	r5, #8
 8003850:	2d0c      	cmp	r5, #12
 8003852:	bf38      	it	cc
 8003854:	250c      	movcc	r5, #12
 8003856:	2d00      	cmp	r5, #0
 8003858:	4606      	mov	r6, r0
 800385a:	db01      	blt.n	8003860 <_malloc_r+0x1c>
 800385c:	42a9      	cmp	r1, r5
 800385e:	d904      	bls.n	800386a <_malloc_r+0x26>
 8003860:	230c      	movs	r3, #12
 8003862:	6033      	str	r3, [r6, #0]
 8003864:	2000      	movs	r0, #0
 8003866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800386a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003940 <_malloc_r+0xfc>
 800386e:	f000 f869 	bl	8003944 <__malloc_lock>
 8003872:	f8d8 3000 	ldr.w	r3, [r8]
 8003876:	461c      	mov	r4, r3
 8003878:	bb44      	cbnz	r4, 80038cc <_malloc_r+0x88>
 800387a:	4629      	mov	r1, r5
 800387c:	4630      	mov	r0, r6
 800387e:	f7ff ffbf 	bl	8003800 <sbrk_aligned>
 8003882:	1c43      	adds	r3, r0, #1
 8003884:	4604      	mov	r4, r0
 8003886:	d158      	bne.n	800393a <_malloc_r+0xf6>
 8003888:	f8d8 4000 	ldr.w	r4, [r8]
 800388c:	4627      	mov	r7, r4
 800388e:	2f00      	cmp	r7, #0
 8003890:	d143      	bne.n	800391a <_malloc_r+0xd6>
 8003892:	2c00      	cmp	r4, #0
 8003894:	d04b      	beq.n	800392e <_malloc_r+0xea>
 8003896:	6823      	ldr	r3, [r4, #0]
 8003898:	4639      	mov	r1, r7
 800389a:	4630      	mov	r0, r6
 800389c:	eb04 0903 	add.w	r9, r4, r3
 80038a0:	f000 fb5a 	bl	8003f58 <_sbrk_r>
 80038a4:	4581      	cmp	r9, r0
 80038a6:	d142      	bne.n	800392e <_malloc_r+0xea>
 80038a8:	6821      	ldr	r1, [r4, #0]
 80038aa:	1a6d      	subs	r5, r5, r1
 80038ac:	4629      	mov	r1, r5
 80038ae:	4630      	mov	r0, r6
 80038b0:	f7ff ffa6 	bl	8003800 <sbrk_aligned>
 80038b4:	3001      	adds	r0, #1
 80038b6:	d03a      	beq.n	800392e <_malloc_r+0xea>
 80038b8:	6823      	ldr	r3, [r4, #0]
 80038ba:	442b      	add	r3, r5
 80038bc:	6023      	str	r3, [r4, #0]
 80038be:	f8d8 3000 	ldr.w	r3, [r8]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	bb62      	cbnz	r2, 8003920 <_malloc_r+0xdc>
 80038c6:	f8c8 7000 	str.w	r7, [r8]
 80038ca:	e00f      	b.n	80038ec <_malloc_r+0xa8>
 80038cc:	6822      	ldr	r2, [r4, #0]
 80038ce:	1b52      	subs	r2, r2, r5
 80038d0:	d420      	bmi.n	8003914 <_malloc_r+0xd0>
 80038d2:	2a0b      	cmp	r2, #11
 80038d4:	d917      	bls.n	8003906 <_malloc_r+0xc2>
 80038d6:	1961      	adds	r1, r4, r5
 80038d8:	42a3      	cmp	r3, r4
 80038da:	6025      	str	r5, [r4, #0]
 80038dc:	bf18      	it	ne
 80038de:	6059      	strne	r1, [r3, #4]
 80038e0:	6863      	ldr	r3, [r4, #4]
 80038e2:	bf08      	it	eq
 80038e4:	f8c8 1000 	streq.w	r1, [r8]
 80038e8:	5162      	str	r2, [r4, r5]
 80038ea:	604b      	str	r3, [r1, #4]
 80038ec:	4630      	mov	r0, r6
 80038ee:	f000 f82f 	bl	8003950 <__malloc_unlock>
 80038f2:	f104 000b 	add.w	r0, r4, #11
 80038f6:	1d23      	adds	r3, r4, #4
 80038f8:	f020 0007 	bic.w	r0, r0, #7
 80038fc:	1ac2      	subs	r2, r0, r3
 80038fe:	bf1c      	itt	ne
 8003900:	1a1b      	subne	r3, r3, r0
 8003902:	50a3      	strne	r3, [r4, r2]
 8003904:	e7af      	b.n	8003866 <_malloc_r+0x22>
 8003906:	6862      	ldr	r2, [r4, #4]
 8003908:	42a3      	cmp	r3, r4
 800390a:	bf0c      	ite	eq
 800390c:	f8c8 2000 	streq.w	r2, [r8]
 8003910:	605a      	strne	r2, [r3, #4]
 8003912:	e7eb      	b.n	80038ec <_malloc_r+0xa8>
 8003914:	4623      	mov	r3, r4
 8003916:	6864      	ldr	r4, [r4, #4]
 8003918:	e7ae      	b.n	8003878 <_malloc_r+0x34>
 800391a:	463c      	mov	r4, r7
 800391c:	687f      	ldr	r7, [r7, #4]
 800391e:	e7b6      	b.n	800388e <_malloc_r+0x4a>
 8003920:	461a      	mov	r2, r3
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	42a3      	cmp	r3, r4
 8003926:	d1fb      	bne.n	8003920 <_malloc_r+0xdc>
 8003928:	2300      	movs	r3, #0
 800392a:	6053      	str	r3, [r2, #4]
 800392c:	e7de      	b.n	80038ec <_malloc_r+0xa8>
 800392e:	230c      	movs	r3, #12
 8003930:	6033      	str	r3, [r6, #0]
 8003932:	4630      	mov	r0, r6
 8003934:	f000 f80c 	bl	8003950 <__malloc_unlock>
 8003938:	e794      	b.n	8003864 <_malloc_r+0x20>
 800393a:	6005      	str	r5, [r0, #0]
 800393c:	e7d6      	b.n	80038ec <_malloc_r+0xa8>
 800393e:	bf00      	nop
 8003940:	20000304 	.word	0x20000304

08003944 <__malloc_lock>:
 8003944:	4801      	ldr	r0, [pc, #4]	@ (800394c <__malloc_lock+0x8>)
 8003946:	f7ff bf0f 	b.w	8003768 <__retarget_lock_acquire_recursive>
 800394a:	bf00      	nop
 800394c:	200002fc 	.word	0x200002fc

08003950 <__malloc_unlock>:
 8003950:	4801      	ldr	r0, [pc, #4]	@ (8003958 <__malloc_unlock+0x8>)
 8003952:	f7ff bf0a 	b.w	800376a <__retarget_lock_release_recursive>
 8003956:	bf00      	nop
 8003958:	200002fc 	.word	0x200002fc

0800395c <__ssputs_r>:
 800395c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003960:	688e      	ldr	r6, [r1, #8]
 8003962:	461f      	mov	r7, r3
 8003964:	42be      	cmp	r6, r7
 8003966:	680b      	ldr	r3, [r1, #0]
 8003968:	4682      	mov	sl, r0
 800396a:	460c      	mov	r4, r1
 800396c:	4690      	mov	r8, r2
 800396e:	d82d      	bhi.n	80039cc <__ssputs_r+0x70>
 8003970:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003974:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003978:	d026      	beq.n	80039c8 <__ssputs_r+0x6c>
 800397a:	6965      	ldr	r5, [r4, #20]
 800397c:	6909      	ldr	r1, [r1, #16]
 800397e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003982:	eba3 0901 	sub.w	r9, r3, r1
 8003986:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800398a:	1c7b      	adds	r3, r7, #1
 800398c:	444b      	add	r3, r9
 800398e:	106d      	asrs	r5, r5, #1
 8003990:	429d      	cmp	r5, r3
 8003992:	bf38      	it	cc
 8003994:	461d      	movcc	r5, r3
 8003996:	0553      	lsls	r3, r2, #21
 8003998:	d527      	bpl.n	80039ea <__ssputs_r+0x8e>
 800399a:	4629      	mov	r1, r5
 800399c:	f7ff ff52 	bl	8003844 <_malloc_r>
 80039a0:	4606      	mov	r6, r0
 80039a2:	b360      	cbz	r0, 80039fe <__ssputs_r+0xa2>
 80039a4:	6921      	ldr	r1, [r4, #16]
 80039a6:	464a      	mov	r2, r9
 80039a8:	f000 fae6 	bl	8003f78 <memcpy>
 80039ac:	89a3      	ldrh	r3, [r4, #12]
 80039ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80039b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039b6:	81a3      	strh	r3, [r4, #12]
 80039b8:	6126      	str	r6, [r4, #16]
 80039ba:	6165      	str	r5, [r4, #20]
 80039bc:	444e      	add	r6, r9
 80039be:	eba5 0509 	sub.w	r5, r5, r9
 80039c2:	6026      	str	r6, [r4, #0]
 80039c4:	60a5      	str	r5, [r4, #8]
 80039c6:	463e      	mov	r6, r7
 80039c8:	42be      	cmp	r6, r7
 80039ca:	d900      	bls.n	80039ce <__ssputs_r+0x72>
 80039cc:	463e      	mov	r6, r7
 80039ce:	6820      	ldr	r0, [r4, #0]
 80039d0:	4632      	mov	r2, r6
 80039d2:	4641      	mov	r1, r8
 80039d4:	f000 faa6 	bl	8003f24 <memmove>
 80039d8:	68a3      	ldr	r3, [r4, #8]
 80039da:	1b9b      	subs	r3, r3, r6
 80039dc:	60a3      	str	r3, [r4, #8]
 80039de:	6823      	ldr	r3, [r4, #0]
 80039e0:	4433      	add	r3, r6
 80039e2:	6023      	str	r3, [r4, #0]
 80039e4:	2000      	movs	r0, #0
 80039e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039ea:	462a      	mov	r2, r5
 80039ec:	f000 fad2 	bl	8003f94 <_realloc_r>
 80039f0:	4606      	mov	r6, r0
 80039f2:	2800      	cmp	r0, #0
 80039f4:	d1e0      	bne.n	80039b8 <__ssputs_r+0x5c>
 80039f6:	6921      	ldr	r1, [r4, #16]
 80039f8:	4650      	mov	r0, sl
 80039fa:	f7ff feb7 	bl	800376c <_free_r>
 80039fe:	230c      	movs	r3, #12
 8003a00:	f8ca 3000 	str.w	r3, [sl]
 8003a04:	89a3      	ldrh	r3, [r4, #12]
 8003a06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a0a:	81a3      	strh	r3, [r4, #12]
 8003a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a10:	e7e9      	b.n	80039e6 <__ssputs_r+0x8a>
	...

08003a14 <_svfiprintf_r>:
 8003a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a18:	4698      	mov	r8, r3
 8003a1a:	898b      	ldrh	r3, [r1, #12]
 8003a1c:	061b      	lsls	r3, r3, #24
 8003a1e:	b09d      	sub	sp, #116	@ 0x74
 8003a20:	4607      	mov	r7, r0
 8003a22:	460d      	mov	r5, r1
 8003a24:	4614      	mov	r4, r2
 8003a26:	d510      	bpl.n	8003a4a <_svfiprintf_r+0x36>
 8003a28:	690b      	ldr	r3, [r1, #16]
 8003a2a:	b973      	cbnz	r3, 8003a4a <_svfiprintf_r+0x36>
 8003a2c:	2140      	movs	r1, #64	@ 0x40
 8003a2e:	f7ff ff09 	bl	8003844 <_malloc_r>
 8003a32:	6028      	str	r0, [r5, #0]
 8003a34:	6128      	str	r0, [r5, #16]
 8003a36:	b930      	cbnz	r0, 8003a46 <_svfiprintf_r+0x32>
 8003a38:	230c      	movs	r3, #12
 8003a3a:	603b      	str	r3, [r7, #0]
 8003a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a40:	b01d      	add	sp, #116	@ 0x74
 8003a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a46:	2340      	movs	r3, #64	@ 0x40
 8003a48:	616b      	str	r3, [r5, #20]
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a4e:	2320      	movs	r3, #32
 8003a50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003a54:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a58:	2330      	movs	r3, #48	@ 0x30
 8003a5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003bf8 <_svfiprintf_r+0x1e4>
 8003a5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003a62:	f04f 0901 	mov.w	r9, #1
 8003a66:	4623      	mov	r3, r4
 8003a68:	469a      	mov	sl, r3
 8003a6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a6e:	b10a      	cbz	r2, 8003a74 <_svfiprintf_r+0x60>
 8003a70:	2a25      	cmp	r2, #37	@ 0x25
 8003a72:	d1f9      	bne.n	8003a68 <_svfiprintf_r+0x54>
 8003a74:	ebba 0b04 	subs.w	fp, sl, r4
 8003a78:	d00b      	beq.n	8003a92 <_svfiprintf_r+0x7e>
 8003a7a:	465b      	mov	r3, fp
 8003a7c:	4622      	mov	r2, r4
 8003a7e:	4629      	mov	r1, r5
 8003a80:	4638      	mov	r0, r7
 8003a82:	f7ff ff6b 	bl	800395c <__ssputs_r>
 8003a86:	3001      	adds	r0, #1
 8003a88:	f000 80a7 	beq.w	8003bda <_svfiprintf_r+0x1c6>
 8003a8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003a8e:	445a      	add	r2, fp
 8003a90:	9209      	str	r2, [sp, #36]	@ 0x24
 8003a92:	f89a 3000 	ldrb.w	r3, [sl]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 809f 	beq.w	8003bda <_svfiprintf_r+0x1c6>
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8003aa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003aa6:	f10a 0a01 	add.w	sl, sl, #1
 8003aaa:	9304      	str	r3, [sp, #16]
 8003aac:	9307      	str	r3, [sp, #28]
 8003aae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003ab2:	931a      	str	r3, [sp, #104]	@ 0x68
 8003ab4:	4654      	mov	r4, sl
 8003ab6:	2205      	movs	r2, #5
 8003ab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003abc:	484e      	ldr	r0, [pc, #312]	@ (8003bf8 <_svfiprintf_r+0x1e4>)
 8003abe:	f7fc fb97 	bl	80001f0 <memchr>
 8003ac2:	9a04      	ldr	r2, [sp, #16]
 8003ac4:	b9d8      	cbnz	r0, 8003afe <_svfiprintf_r+0xea>
 8003ac6:	06d0      	lsls	r0, r2, #27
 8003ac8:	bf44      	itt	mi
 8003aca:	2320      	movmi	r3, #32
 8003acc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ad0:	0711      	lsls	r1, r2, #28
 8003ad2:	bf44      	itt	mi
 8003ad4:	232b      	movmi	r3, #43	@ 0x2b
 8003ad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ada:	f89a 3000 	ldrb.w	r3, [sl]
 8003ade:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ae0:	d015      	beq.n	8003b0e <_svfiprintf_r+0xfa>
 8003ae2:	9a07      	ldr	r2, [sp, #28]
 8003ae4:	4654      	mov	r4, sl
 8003ae6:	2000      	movs	r0, #0
 8003ae8:	f04f 0c0a 	mov.w	ip, #10
 8003aec:	4621      	mov	r1, r4
 8003aee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003af2:	3b30      	subs	r3, #48	@ 0x30
 8003af4:	2b09      	cmp	r3, #9
 8003af6:	d94b      	bls.n	8003b90 <_svfiprintf_r+0x17c>
 8003af8:	b1b0      	cbz	r0, 8003b28 <_svfiprintf_r+0x114>
 8003afa:	9207      	str	r2, [sp, #28]
 8003afc:	e014      	b.n	8003b28 <_svfiprintf_r+0x114>
 8003afe:	eba0 0308 	sub.w	r3, r0, r8
 8003b02:	fa09 f303 	lsl.w	r3, r9, r3
 8003b06:	4313      	orrs	r3, r2
 8003b08:	9304      	str	r3, [sp, #16]
 8003b0a:	46a2      	mov	sl, r4
 8003b0c:	e7d2      	b.n	8003ab4 <_svfiprintf_r+0xa0>
 8003b0e:	9b03      	ldr	r3, [sp, #12]
 8003b10:	1d19      	adds	r1, r3, #4
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	9103      	str	r1, [sp, #12]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	bfbb      	ittet	lt
 8003b1a:	425b      	neglt	r3, r3
 8003b1c:	f042 0202 	orrlt.w	r2, r2, #2
 8003b20:	9307      	strge	r3, [sp, #28]
 8003b22:	9307      	strlt	r3, [sp, #28]
 8003b24:	bfb8      	it	lt
 8003b26:	9204      	strlt	r2, [sp, #16]
 8003b28:	7823      	ldrb	r3, [r4, #0]
 8003b2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8003b2c:	d10a      	bne.n	8003b44 <_svfiprintf_r+0x130>
 8003b2e:	7863      	ldrb	r3, [r4, #1]
 8003b30:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b32:	d132      	bne.n	8003b9a <_svfiprintf_r+0x186>
 8003b34:	9b03      	ldr	r3, [sp, #12]
 8003b36:	1d1a      	adds	r2, r3, #4
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	9203      	str	r2, [sp, #12]
 8003b3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003b40:	3402      	adds	r4, #2
 8003b42:	9305      	str	r3, [sp, #20]
 8003b44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003c08 <_svfiprintf_r+0x1f4>
 8003b48:	7821      	ldrb	r1, [r4, #0]
 8003b4a:	2203      	movs	r2, #3
 8003b4c:	4650      	mov	r0, sl
 8003b4e:	f7fc fb4f 	bl	80001f0 <memchr>
 8003b52:	b138      	cbz	r0, 8003b64 <_svfiprintf_r+0x150>
 8003b54:	9b04      	ldr	r3, [sp, #16]
 8003b56:	eba0 000a 	sub.w	r0, r0, sl
 8003b5a:	2240      	movs	r2, #64	@ 0x40
 8003b5c:	4082      	lsls	r2, r0
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	3401      	adds	r4, #1
 8003b62:	9304      	str	r3, [sp, #16]
 8003b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b68:	4824      	ldr	r0, [pc, #144]	@ (8003bfc <_svfiprintf_r+0x1e8>)
 8003b6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003b6e:	2206      	movs	r2, #6
 8003b70:	f7fc fb3e 	bl	80001f0 <memchr>
 8003b74:	2800      	cmp	r0, #0
 8003b76:	d036      	beq.n	8003be6 <_svfiprintf_r+0x1d2>
 8003b78:	4b21      	ldr	r3, [pc, #132]	@ (8003c00 <_svfiprintf_r+0x1ec>)
 8003b7a:	bb1b      	cbnz	r3, 8003bc4 <_svfiprintf_r+0x1b0>
 8003b7c:	9b03      	ldr	r3, [sp, #12]
 8003b7e:	3307      	adds	r3, #7
 8003b80:	f023 0307 	bic.w	r3, r3, #7
 8003b84:	3308      	adds	r3, #8
 8003b86:	9303      	str	r3, [sp, #12]
 8003b88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b8a:	4433      	add	r3, r6
 8003b8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b8e:	e76a      	b.n	8003a66 <_svfiprintf_r+0x52>
 8003b90:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b94:	460c      	mov	r4, r1
 8003b96:	2001      	movs	r0, #1
 8003b98:	e7a8      	b.n	8003aec <_svfiprintf_r+0xd8>
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	3401      	adds	r4, #1
 8003b9e:	9305      	str	r3, [sp, #20]
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	f04f 0c0a 	mov.w	ip, #10
 8003ba6:	4620      	mov	r0, r4
 8003ba8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bac:	3a30      	subs	r2, #48	@ 0x30
 8003bae:	2a09      	cmp	r2, #9
 8003bb0:	d903      	bls.n	8003bba <_svfiprintf_r+0x1a6>
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d0c6      	beq.n	8003b44 <_svfiprintf_r+0x130>
 8003bb6:	9105      	str	r1, [sp, #20]
 8003bb8:	e7c4      	b.n	8003b44 <_svfiprintf_r+0x130>
 8003bba:	fb0c 2101 	mla	r1, ip, r1, r2
 8003bbe:	4604      	mov	r4, r0
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e7f0      	b.n	8003ba6 <_svfiprintf_r+0x192>
 8003bc4:	ab03      	add	r3, sp, #12
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	462a      	mov	r2, r5
 8003bca:	4b0e      	ldr	r3, [pc, #56]	@ (8003c04 <_svfiprintf_r+0x1f0>)
 8003bcc:	a904      	add	r1, sp, #16
 8003bce:	4638      	mov	r0, r7
 8003bd0:	f3af 8000 	nop.w
 8003bd4:	1c42      	adds	r2, r0, #1
 8003bd6:	4606      	mov	r6, r0
 8003bd8:	d1d6      	bne.n	8003b88 <_svfiprintf_r+0x174>
 8003bda:	89ab      	ldrh	r3, [r5, #12]
 8003bdc:	065b      	lsls	r3, r3, #25
 8003bde:	f53f af2d 	bmi.w	8003a3c <_svfiprintf_r+0x28>
 8003be2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003be4:	e72c      	b.n	8003a40 <_svfiprintf_r+0x2c>
 8003be6:	ab03      	add	r3, sp, #12
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	462a      	mov	r2, r5
 8003bec:	4b05      	ldr	r3, [pc, #20]	@ (8003c04 <_svfiprintf_r+0x1f0>)
 8003bee:	a904      	add	r1, sp, #16
 8003bf0:	4638      	mov	r0, r7
 8003bf2:	f000 f879 	bl	8003ce8 <_printf_i>
 8003bf6:	e7ed      	b.n	8003bd4 <_svfiprintf_r+0x1c0>
 8003bf8:	08004084 	.word	0x08004084
 8003bfc:	0800408e 	.word	0x0800408e
 8003c00:	00000000 	.word	0x00000000
 8003c04:	0800395d 	.word	0x0800395d
 8003c08:	0800408a 	.word	0x0800408a

08003c0c <_printf_common>:
 8003c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c10:	4616      	mov	r6, r2
 8003c12:	4698      	mov	r8, r3
 8003c14:	688a      	ldr	r2, [r1, #8]
 8003c16:	690b      	ldr	r3, [r1, #16]
 8003c18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	bfb8      	it	lt
 8003c20:	4613      	movlt	r3, r2
 8003c22:	6033      	str	r3, [r6, #0]
 8003c24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003c28:	4607      	mov	r7, r0
 8003c2a:	460c      	mov	r4, r1
 8003c2c:	b10a      	cbz	r2, 8003c32 <_printf_common+0x26>
 8003c2e:	3301      	adds	r3, #1
 8003c30:	6033      	str	r3, [r6, #0]
 8003c32:	6823      	ldr	r3, [r4, #0]
 8003c34:	0699      	lsls	r1, r3, #26
 8003c36:	bf42      	ittt	mi
 8003c38:	6833      	ldrmi	r3, [r6, #0]
 8003c3a:	3302      	addmi	r3, #2
 8003c3c:	6033      	strmi	r3, [r6, #0]
 8003c3e:	6825      	ldr	r5, [r4, #0]
 8003c40:	f015 0506 	ands.w	r5, r5, #6
 8003c44:	d106      	bne.n	8003c54 <_printf_common+0x48>
 8003c46:	f104 0a19 	add.w	sl, r4, #25
 8003c4a:	68e3      	ldr	r3, [r4, #12]
 8003c4c:	6832      	ldr	r2, [r6, #0]
 8003c4e:	1a9b      	subs	r3, r3, r2
 8003c50:	42ab      	cmp	r3, r5
 8003c52:	dc26      	bgt.n	8003ca2 <_printf_common+0x96>
 8003c54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003c58:	6822      	ldr	r2, [r4, #0]
 8003c5a:	3b00      	subs	r3, #0
 8003c5c:	bf18      	it	ne
 8003c5e:	2301      	movne	r3, #1
 8003c60:	0692      	lsls	r2, r2, #26
 8003c62:	d42b      	bmi.n	8003cbc <_printf_common+0xb0>
 8003c64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003c68:	4641      	mov	r1, r8
 8003c6a:	4638      	mov	r0, r7
 8003c6c:	47c8      	blx	r9
 8003c6e:	3001      	adds	r0, #1
 8003c70:	d01e      	beq.n	8003cb0 <_printf_common+0xa4>
 8003c72:	6823      	ldr	r3, [r4, #0]
 8003c74:	6922      	ldr	r2, [r4, #16]
 8003c76:	f003 0306 	and.w	r3, r3, #6
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	bf02      	ittt	eq
 8003c7e:	68e5      	ldreq	r5, [r4, #12]
 8003c80:	6833      	ldreq	r3, [r6, #0]
 8003c82:	1aed      	subeq	r5, r5, r3
 8003c84:	68a3      	ldr	r3, [r4, #8]
 8003c86:	bf0c      	ite	eq
 8003c88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c8c:	2500      	movne	r5, #0
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	bfc4      	itt	gt
 8003c92:	1a9b      	subgt	r3, r3, r2
 8003c94:	18ed      	addgt	r5, r5, r3
 8003c96:	2600      	movs	r6, #0
 8003c98:	341a      	adds	r4, #26
 8003c9a:	42b5      	cmp	r5, r6
 8003c9c:	d11a      	bne.n	8003cd4 <_printf_common+0xc8>
 8003c9e:	2000      	movs	r0, #0
 8003ca0:	e008      	b.n	8003cb4 <_printf_common+0xa8>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	4652      	mov	r2, sl
 8003ca6:	4641      	mov	r1, r8
 8003ca8:	4638      	mov	r0, r7
 8003caa:	47c8      	blx	r9
 8003cac:	3001      	adds	r0, #1
 8003cae:	d103      	bne.n	8003cb8 <_printf_common+0xac>
 8003cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cb8:	3501      	adds	r5, #1
 8003cba:	e7c6      	b.n	8003c4a <_printf_common+0x3e>
 8003cbc:	18e1      	adds	r1, r4, r3
 8003cbe:	1c5a      	adds	r2, r3, #1
 8003cc0:	2030      	movs	r0, #48	@ 0x30
 8003cc2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003cc6:	4422      	add	r2, r4
 8003cc8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003ccc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003cd0:	3302      	adds	r3, #2
 8003cd2:	e7c7      	b.n	8003c64 <_printf_common+0x58>
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	4622      	mov	r2, r4
 8003cd8:	4641      	mov	r1, r8
 8003cda:	4638      	mov	r0, r7
 8003cdc:	47c8      	blx	r9
 8003cde:	3001      	adds	r0, #1
 8003ce0:	d0e6      	beq.n	8003cb0 <_printf_common+0xa4>
 8003ce2:	3601      	adds	r6, #1
 8003ce4:	e7d9      	b.n	8003c9a <_printf_common+0x8e>
	...

08003ce8 <_printf_i>:
 8003ce8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cec:	7e0f      	ldrb	r7, [r1, #24]
 8003cee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003cf0:	2f78      	cmp	r7, #120	@ 0x78
 8003cf2:	4691      	mov	r9, r2
 8003cf4:	4680      	mov	r8, r0
 8003cf6:	460c      	mov	r4, r1
 8003cf8:	469a      	mov	sl, r3
 8003cfa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003cfe:	d807      	bhi.n	8003d10 <_printf_i+0x28>
 8003d00:	2f62      	cmp	r7, #98	@ 0x62
 8003d02:	d80a      	bhi.n	8003d1a <_printf_i+0x32>
 8003d04:	2f00      	cmp	r7, #0
 8003d06:	f000 80d1 	beq.w	8003eac <_printf_i+0x1c4>
 8003d0a:	2f58      	cmp	r7, #88	@ 0x58
 8003d0c:	f000 80b8 	beq.w	8003e80 <_printf_i+0x198>
 8003d10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003d18:	e03a      	b.n	8003d90 <_printf_i+0xa8>
 8003d1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003d1e:	2b15      	cmp	r3, #21
 8003d20:	d8f6      	bhi.n	8003d10 <_printf_i+0x28>
 8003d22:	a101      	add	r1, pc, #4	@ (adr r1, 8003d28 <_printf_i+0x40>)
 8003d24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d28:	08003d81 	.word	0x08003d81
 8003d2c:	08003d95 	.word	0x08003d95
 8003d30:	08003d11 	.word	0x08003d11
 8003d34:	08003d11 	.word	0x08003d11
 8003d38:	08003d11 	.word	0x08003d11
 8003d3c:	08003d11 	.word	0x08003d11
 8003d40:	08003d95 	.word	0x08003d95
 8003d44:	08003d11 	.word	0x08003d11
 8003d48:	08003d11 	.word	0x08003d11
 8003d4c:	08003d11 	.word	0x08003d11
 8003d50:	08003d11 	.word	0x08003d11
 8003d54:	08003e93 	.word	0x08003e93
 8003d58:	08003dbf 	.word	0x08003dbf
 8003d5c:	08003e4d 	.word	0x08003e4d
 8003d60:	08003d11 	.word	0x08003d11
 8003d64:	08003d11 	.word	0x08003d11
 8003d68:	08003eb5 	.word	0x08003eb5
 8003d6c:	08003d11 	.word	0x08003d11
 8003d70:	08003dbf 	.word	0x08003dbf
 8003d74:	08003d11 	.word	0x08003d11
 8003d78:	08003d11 	.word	0x08003d11
 8003d7c:	08003e55 	.word	0x08003e55
 8003d80:	6833      	ldr	r3, [r6, #0]
 8003d82:	1d1a      	adds	r2, r3, #4
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6032      	str	r2, [r6, #0]
 8003d88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003d90:	2301      	movs	r3, #1
 8003d92:	e09c      	b.n	8003ece <_printf_i+0x1e6>
 8003d94:	6833      	ldr	r3, [r6, #0]
 8003d96:	6820      	ldr	r0, [r4, #0]
 8003d98:	1d19      	adds	r1, r3, #4
 8003d9a:	6031      	str	r1, [r6, #0]
 8003d9c:	0606      	lsls	r6, r0, #24
 8003d9e:	d501      	bpl.n	8003da4 <_printf_i+0xbc>
 8003da0:	681d      	ldr	r5, [r3, #0]
 8003da2:	e003      	b.n	8003dac <_printf_i+0xc4>
 8003da4:	0645      	lsls	r5, r0, #25
 8003da6:	d5fb      	bpl.n	8003da0 <_printf_i+0xb8>
 8003da8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003dac:	2d00      	cmp	r5, #0
 8003dae:	da03      	bge.n	8003db8 <_printf_i+0xd0>
 8003db0:	232d      	movs	r3, #45	@ 0x2d
 8003db2:	426d      	negs	r5, r5
 8003db4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003db8:	4858      	ldr	r0, [pc, #352]	@ (8003f1c <_printf_i+0x234>)
 8003dba:	230a      	movs	r3, #10
 8003dbc:	e011      	b.n	8003de2 <_printf_i+0xfa>
 8003dbe:	6821      	ldr	r1, [r4, #0]
 8003dc0:	6833      	ldr	r3, [r6, #0]
 8003dc2:	0608      	lsls	r0, r1, #24
 8003dc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8003dc8:	d402      	bmi.n	8003dd0 <_printf_i+0xe8>
 8003dca:	0649      	lsls	r1, r1, #25
 8003dcc:	bf48      	it	mi
 8003dce:	b2ad      	uxthmi	r5, r5
 8003dd0:	2f6f      	cmp	r7, #111	@ 0x6f
 8003dd2:	4852      	ldr	r0, [pc, #328]	@ (8003f1c <_printf_i+0x234>)
 8003dd4:	6033      	str	r3, [r6, #0]
 8003dd6:	bf14      	ite	ne
 8003dd8:	230a      	movne	r3, #10
 8003dda:	2308      	moveq	r3, #8
 8003ddc:	2100      	movs	r1, #0
 8003dde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003de2:	6866      	ldr	r6, [r4, #4]
 8003de4:	60a6      	str	r6, [r4, #8]
 8003de6:	2e00      	cmp	r6, #0
 8003de8:	db05      	blt.n	8003df6 <_printf_i+0x10e>
 8003dea:	6821      	ldr	r1, [r4, #0]
 8003dec:	432e      	orrs	r6, r5
 8003dee:	f021 0104 	bic.w	r1, r1, #4
 8003df2:	6021      	str	r1, [r4, #0]
 8003df4:	d04b      	beq.n	8003e8e <_printf_i+0x1a6>
 8003df6:	4616      	mov	r6, r2
 8003df8:	fbb5 f1f3 	udiv	r1, r5, r3
 8003dfc:	fb03 5711 	mls	r7, r3, r1, r5
 8003e00:	5dc7      	ldrb	r7, [r0, r7]
 8003e02:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003e06:	462f      	mov	r7, r5
 8003e08:	42bb      	cmp	r3, r7
 8003e0a:	460d      	mov	r5, r1
 8003e0c:	d9f4      	bls.n	8003df8 <_printf_i+0x110>
 8003e0e:	2b08      	cmp	r3, #8
 8003e10:	d10b      	bne.n	8003e2a <_printf_i+0x142>
 8003e12:	6823      	ldr	r3, [r4, #0]
 8003e14:	07df      	lsls	r7, r3, #31
 8003e16:	d508      	bpl.n	8003e2a <_printf_i+0x142>
 8003e18:	6923      	ldr	r3, [r4, #16]
 8003e1a:	6861      	ldr	r1, [r4, #4]
 8003e1c:	4299      	cmp	r1, r3
 8003e1e:	bfde      	ittt	le
 8003e20:	2330      	movle	r3, #48	@ 0x30
 8003e22:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e26:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003e2a:	1b92      	subs	r2, r2, r6
 8003e2c:	6122      	str	r2, [r4, #16]
 8003e2e:	f8cd a000 	str.w	sl, [sp]
 8003e32:	464b      	mov	r3, r9
 8003e34:	aa03      	add	r2, sp, #12
 8003e36:	4621      	mov	r1, r4
 8003e38:	4640      	mov	r0, r8
 8003e3a:	f7ff fee7 	bl	8003c0c <_printf_common>
 8003e3e:	3001      	adds	r0, #1
 8003e40:	d14a      	bne.n	8003ed8 <_printf_i+0x1f0>
 8003e42:	f04f 30ff 	mov.w	r0, #4294967295
 8003e46:	b004      	add	sp, #16
 8003e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e4c:	6823      	ldr	r3, [r4, #0]
 8003e4e:	f043 0320 	orr.w	r3, r3, #32
 8003e52:	6023      	str	r3, [r4, #0]
 8003e54:	4832      	ldr	r0, [pc, #200]	@ (8003f20 <_printf_i+0x238>)
 8003e56:	2778      	movs	r7, #120	@ 0x78
 8003e58:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003e5c:	6823      	ldr	r3, [r4, #0]
 8003e5e:	6831      	ldr	r1, [r6, #0]
 8003e60:	061f      	lsls	r7, r3, #24
 8003e62:	f851 5b04 	ldr.w	r5, [r1], #4
 8003e66:	d402      	bmi.n	8003e6e <_printf_i+0x186>
 8003e68:	065f      	lsls	r7, r3, #25
 8003e6a:	bf48      	it	mi
 8003e6c:	b2ad      	uxthmi	r5, r5
 8003e6e:	6031      	str	r1, [r6, #0]
 8003e70:	07d9      	lsls	r1, r3, #31
 8003e72:	bf44      	itt	mi
 8003e74:	f043 0320 	orrmi.w	r3, r3, #32
 8003e78:	6023      	strmi	r3, [r4, #0]
 8003e7a:	b11d      	cbz	r5, 8003e84 <_printf_i+0x19c>
 8003e7c:	2310      	movs	r3, #16
 8003e7e:	e7ad      	b.n	8003ddc <_printf_i+0xf4>
 8003e80:	4826      	ldr	r0, [pc, #152]	@ (8003f1c <_printf_i+0x234>)
 8003e82:	e7e9      	b.n	8003e58 <_printf_i+0x170>
 8003e84:	6823      	ldr	r3, [r4, #0]
 8003e86:	f023 0320 	bic.w	r3, r3, #32
 8003e8a:	6023      	str	r3, [r4, #0]
 8003e8c:	e7f6      	b.n	8003e7c <_printf_i+0x194>
 8003e8e:	4616      	mov	r6, r2
 8003e90:	e7bd      	b.n	8003e0e <_printf_i+0x126>
 8003e92:	6833      	ldr	r3, [r6, #0]
 8003e94:	6825      	ldr	r5, [r4, #0]
 8003e96:	6961      	ldr	r1, [r4, #20]
 8003e98:	1d18      	adds	r0, r3, #4
 8003e9a:	6030      	str	r0, [r6, #0]
 8003e9c:	062e      	lsls	r6, r5, #24
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	d501      	bpl.n	8003ea6 <_printf_i+0x1be>
 8003ea2:	6019      	str	r1, [r3, #0]
 8003ea4:	e002      	b.n	8003eac <_printf_i+0x1c4>
 8003ea6:	0668      	lsls	r0, r5, #25
 8003ea8:	d5fb      	bpl.n	8003ea2 <_printf_i+0x1ba>
 8003eaa:	8019      	strh	r1, [r3, #0]
 8003eac:	2300      	movs	r3, #0
 8003eae:	6123      	str	r3, [r4, #16]
 8003eb0:	4616      	mov	r6, r2
 8003eb2:	e7bc      	b.n	8003e2e <_printf_i+0x146>
 8003eb4:	6833      	ldr	r3, [r6, #0]
 8003eb6:	1d1a      	adds	r2, r3, #4
 8003eb8:	6032      	str	r2, [r6, #0]
 8003eba:	681e      	ldr	r6, [r3, #0]
 8003ebc:	6862      	ldr	r2, [r4, #4]
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	4630      	mov	r0, r6
 8003ec2:	f7fc f995 	bl	80001f0 <memchr>
 8003ec6:	b108      	cbz	r0, 8003ecc <_printf_i+0x1e4>
 8003ec8:	1b80      	subs	r0, r0, r6
 8003eca:	6060      	str	r0, [r4, #4]
 8003ecc:	6863      	ldr	r3, [r4, #4]
 8003ece:	6123      	str	r3, [r4, #16]
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ed6:	e7aa      	b.n	8003e2e <_printf_i+0x146>
 8003ed8:	6923      	ldr	r3, [r4, #16]
 8003eda:	4632      	mov	r2, r6
 8003edc:	4649      	mov	r1, r9
 8003ede:	4640      	mov	r0, r8
 8003ee0:	47d0      	blx	sl
 8003ee2:	3001      	adds	r0, #1
 8003ee4:	d0ad      	beq.n	8003e42 <_printf_i+0x15a>
 8003ee6:	6823      	ldr	r3, [r4, #0]
 8003ee8:	079b      	lsls	r3, r3, #30
 8003eea:	d413      	bmi.n	8003f14 <_printf_i+0x22c>
 8003eec:	68e0      	ldr	r0, [r4, #12]
 8003eee:	9b03      	ldr	r3, [sp, #12]
 8003ef0:	4298      	cmp	r0, r3
 8003ef2:	bfb8      	it	lt
 8003ef4:	4618      	movlt	r0, r3
 8003ef6:	e7a6      	b.n	8003e46 <_printf_i+0x15e>
 8003ef8:	2301      	movs	r3, #1
 8003efa:	4632      	mov	r2, r6
 8003efc:	4649      	mov	r1, r9
 8003efe:	4640      	mov	r0, r8
 8003f00:	47d0      	blx	sl
 8003f02:	3001      	adds	r0, #1
 8003f04:	d09d      	beq.n	8003e42 <_printf_i+0x15a>
 8003f06:	3501      	adds	r5, #1
 8003f08:	68e3      	ldr	r3, [r4, #12]
 8003f0a:	9903      	ldr	r1, [sp, #12]
 8003f0c:	1a5b      	subs	r3, r3, r1
 8003f0e:	42ab      	cmp	r3, r5
 8003f10:	dcf2      	bgt.n	8003ef8 <_printf_i+0x210>
 8003f12:	e7eb      	b.n	8003eec <_printf_i+0x204>
 8003f14:	2500      	movs	r5, #0
 8003f16:	f104 0619 	add.w	r6, r4, #25
 8003f1a:	e7f5      	b.n	8003f08 <_printf_i+0x220>
 8003f1c:	08004095 	.word	0x08004095
 8003f20:	080040a6 	.word	0x080040a6

08003f24 <memmove>:
 8003f24:	4288      	cmp	r0, r1
 8003f26:	b510      	push	{r4, lr}
 8003f28:	eb01 0402 	add.w	r4, r1, r2
 8003f2c:	d902      	bls.n	8003f34 <memmove+0x10>
 8003f2e:	4284      	cmp	r4, r0
 8003f30:	4623      	mov	r3, r4
 8003f32:	d807      	bhi.n	8003f44 <memmove+0x20>
 8003f34:	1e43      	subs	r3, r0, #1
 8003f36:	42a1      	cmp	r1, r4
 8003f38:	d008      	beq.n	8003f4c <memmove+0x28>
 8003f3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f42:	e7f8      	b.n	8003f36 <memmove+0x12>
 8003f44:	4402      	add	r2, r0
 8003f46:	4601      	mov	r1, r0
 8003f48:	428a      	cmp	r2, r1
 8003f4a:	d100      	bne.n	8003f4e <memmove+0x2a>
 8003f4c:	bd10      	pop	{r4, pc}
 8003f4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f56:	e7f7      	b.n	8003f48 <memmove+0x24>

08003f58 <_sbrk_r>:
 8003f58:	b538      	push	{r3, r4, r5, lr}
 8003f5a:	4d06      	ldr	r5, [pc, #24]	@ (8003f74 <_sbrk_r+0x1c>)
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	4604      	mov	r4, r0
 8003f60:	4608      	mov	r0, r1
 8003f62:	602b      	str	r3, [r5, #0]
 8003f64:	f7fc fcb4 	bl	80008d0 <_sbrk>
 8003f68:	1c43      	adds	r3, r0, #1
 8003f6a:	d102      	bne.n	8003f72 <_sbrk_r+0x1a>
 8003f6c:	682b      	ldr	r3, [r5, #0]
 8003f6e:	b103      	cbz	r3, 8003f72 <_sbrk_r+0x1a>
 8003f70:	6023      	str	r3, [r4, #0]
 8003f72:	bd38      	pop	{r3, r4, r5, pc}
 8003f74:	200002f8 	.word	0x200002f8

08003f78 <memcpy>:
 8003f78:	440a      	add	r2, r1
 8003f7a:	4291      	cmp	r1, r2
 8003f7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f80:	d100      	bne.n	8003f84 <memcpy+0xc>
 8003f82:	4770      	bx	lr
 8003f84:	b510      	push	{r4, lr}
 8003f86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f8e:	4291      	cmp	r1, r2
 8003f90:	d1f9      	bne.n	8003f86 <memcpy+0xe>
 8003f92:	bd10      	pop	{r4, pc}

08003f94 <_realloc_r>:
 8003f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f98:	4607      	mov	r7, r0
 8003f9a:	4614      	mov	r4, r2
 8003f9c:	460d      	mov	r5, r1
 8003f9e:	b921      	cbnz	r1, 8003faa <_realloc_r+0x16>
 8003fa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fa4:	4611      	mov	r1, r2
 8003fa6:	f7ff bc4d 	b.w	8003844 <_malloc_r>
 8003faa:	b92a      	cbnz	r2, 8003fb8 <_realloc_r+0x24>
 8003fac:	f7ff fbde 	bl	800376c <_free_r>
 8003fb0:	4625      	mov	r5, r4
 8003fb2:	4628      	mov	r0, r5
 8003fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fb8:	f000 f81a 	bl	8003ff0 <_malloc_usable_size_r>
 8003fbc:	4284      	cmp	r4, r0
 8003fbe:	4606      	mov	r6, r0
 8003fc0:	d802      	bhi.n	8003fc8 <_realloc_r+0x34>
 8003fc2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003fc6:	d8f4      	bhi.n	8003fb2 <_realloc_r+0x1e>
 8003fc8:	4621      	mov	r1, r4
 8003fca:	4638      	mov	r0, r7
 8003fcc:	f7ff fc3a 	bl	8003844 <_malloc_r>
 8003fd0:	4680      	mov	r8, r0
 8003fd2:	b908      	cbnz	r0, 8003fd8 <_realloc_r+0x44>
 8003fd4:	4645      	mov	r5, r8
 8003fd6:	e7ec      	b.n	8003fb2 <_realloc_r+0x1e>
 8003fd8:	42b4      	cmp	r4, r6
 8003fda:	4622      	mov	r2, r4
 8003fdc:	4629      	mov	r1, r5
 8003fde:	bf28      	it	cs
 8003fe0:	4632      	movcs	r2, r6
 8003fe2:	f7ff ffc9 	bl	8003f78 <memcpy>
 8003fe6:	4629      	mov	r1, r5
 8003fe8:	4638      	mov	r0, r7
 8003fea:	f7ff fbbf 	bl	800376c <_free_r>
 8003fee:	e7f1      	b.n	8003fd4 <_realloc_r+0x40>

08003ff0 <_malloc_usable_size_r>:
 8003ff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ff4:	1f18      	subs	r0, r3, #4
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	bfbc      	itt	lt
 8003ffa:	580b      	ldrlt	r3, [r1, r0]
 8003ffc:	18c0      	addlt	r0, r0, r3
 8003ffe:	4770      	bx	lr

08004000 <_init>:
 8004000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004002:	bf00      	nop
 8004004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004006:	bc08      	pop	{r3}
 8004008:	469e      	mov	lr, r3
 800400a:	4770      	bx	lr

0800400c <_fini>:
 800400c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800400e:	bf00      	nop
 8004010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004012:	bc08      	pop	{r3}
 8004014:	469e      	mov	lr, r3
 8004016:	4770      	bx	lr
