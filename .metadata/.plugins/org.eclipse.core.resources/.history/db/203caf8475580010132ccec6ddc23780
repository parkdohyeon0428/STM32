
250703_RTOS_StopWatch2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e3c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08006fdc  08006fdc  00007fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007150  08007150  000090c0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007150  08007150  00008150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007158  08007158  000090c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007158  08007158  00008158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800715c  0800715c  0000815c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c0  20000000  08007160  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000429c  200000c0  08007220  000090c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000435c  08007220  0000935c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016dc9  00000000  00000000  000090f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041d7  00000000  00000000  0001feb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001518  00000000  00000000  00024090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000101a  00000000  00000000  000255a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a788  00000000  00000000  000265c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c8c2  00000000  00000000  00040d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009813d  00000000  00000000  0005d60c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f5749  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005960  00000000  00000000  000f578c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000fb0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000c0 	.word	0x200000c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006fc4 	.word	0x08006fc4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000c4 	.word	0x200000c4
 80001dc:	08006fc4 	.word	0x08006fc4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	@ (80005d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <vApplicationGetIdleTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2280      	movs	r2, #128	@ 0x80
 80005c8:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	200000ec 	.word	0x200000ec
 80005dc:	2000018c 	.word	0x2000018c

080005e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b09c      	sub	sp, #112	@ 0x70
 80005e4:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005e6:	4b29      	ldr	r3, [pc, #164]	@ (800068c <MX_FREERTOS_Init+0xac>)
 80005e8:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80005ec:	461d      	mov	r5, r3
 80005ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005fa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f003 fb00 	bl	8003c06 <osThreadCreate>
 8000606:	4603      	mov	r3, r0
 8000608:	4a21      	ldr	r2, [pc, #132]	@ (8000690 <MX_FREERTOS_Init+0xb0>)
 800060a:	6013      	str	r3, [r2, #0]

  /* definition and creation of myListenerTask */
  osThreadDef(myListenerTask, StartListenerTask, osPriorityNormal, 0, 128);
 800060c:	4b21      	ldr	r3, [pc, #132]	@ (8000694 <MX_FREERTOS_Init+0xb4>)
 800060e:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000612:	461d      	mov	r5, r3
 8000614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000618:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800061c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myListenerTaskHandle = osThreadCreate(osThread(myListenerTask), NULL);
 8000620:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f003 faed 	bl	8003c06 <osThreadCreate>
 800062c:	4603      	mov	r3, r0
 800062e:	4a1a      	ldr	r2, [pc, #104]	@ (8000698 <MX_FREERTOS_Init+0xb8>)
 8000630:	6013      	str	r3, [r2, #0]

  /* definition and creation of myControllerTas */
  osThreadDef(myControllerTas, StartControllerTask, osPriorityNormal, 0, 128);
 8000632:	4b1a      	ldr	r3, [pc, #104]	@ (800069c <MX_FREERTOS_Init+0xbc>)
 8000634:	f107 041c 	add.w	r4, r7, #28
 8000638:	461d      	mov	r5, r3
 800063a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000642:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myControllerTasHandle = osThreadCreate(osThread(myControllerTas), NULL);
 8000646:	f107 031c 	add.w	r3, r7, #28
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f003 fada 	bl	8003c06 <osThreadCreate>
 8000652:	4603      	mov	r3, r0
 8000654:	4a12      	ldr	r2, [pc, #72]	@ (80006a0 <MX_FREERTOS_Init+0xc0>)
 8000656:	6013      	str	r3, [r2, #0]

  /* definition and creation of myPresenterTask */
  osThreadDef(myPresenterTask, StartPresenterTask, osPriorityNormal, 0, 128);
 8000658:	4b12      	ldr	r3, [pc, #72]	@ (80006a4 <MX_FREERTOS_Init+0xc4>)
 800065a:	463c      	mov	r4, r7
 800065c:	461d      	mov	r5, r3
 800065e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000660:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000662:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000666:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myPresenterTaskHandle = osThreadCreate(osThread(myPresenterTask), NULL);
 800066a:	463b      	mov	r3, r7
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f003 fac9 	bl	8003c06 <osThreadCreate>
 8000674:	4603      	mov	r3, r0
 8000676:	4a0c      	ldr	r2, [pc, #48]	@ (80006a8 <MX_FREERTOS_Init+0xc8>)
 8000678:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  Model_StopWatchInit();
 800067a:	f000 fd2f 	bl	80010dc <Model_StopWatchInit>
	HAL_TIM_Base_Start_IT(&htim2);
 800067e:	480b      	ldr	r0, [pc, #44]	@ (80006ac <MX_FREERTOS_Init+0xcc>)
 8000680:	f002 feac 	bl	80033dc <HAL_TIM_Base_Start_IT>
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000684:	bf00      	nop
 8000686:	3770      	adds	r7, #112	@ 0x70
 8000688:	46bd      	mov	sp, r7
 800068a:	bdb0      	pop	{r4, r5, r7, pc}
 800068c:	08006fe8 	.word	0x08006fe8
 8000690:	200000dc 	.word	0x200000dc
 8000694:	08007014 	.word	0x08007014
 8000698:	200000e0 	.word	0x200000e0
 800069c:	08007040 	.word	0x08007040
 80006a0:	200000e4 	.word	0x200000e4
 80006a4:	0800706c 	.word	0x0800706c
 80006a8:	200000e8 	.word	0x200000e8
 80006ac:	2000042c 	.word	0x2000042c

080006b0 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */

	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 80006b8:	2001      	movs	r0, #1
 80006ba:	f003 faf0 	bl	8003c9e <osDelay>
 80006be:	e7fb      	b.n	80006b8 <StartDefaultTask+0x8>

080006c0 <StartListenerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartListenerTask */
void StartListenerTask(void const * argument)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartListenerTask */
	Listener_Init();
 80006c8:	f000 fcb8 	bl	800103c <Listener_Init>
  /* Infinite loop */
  for(;;)
  {
	  Listener_Execute();
 80006cc:	f000 fcbc 	bl	8001048 <Listener_Execute>
    osDelay(1);
 80006d0:	2001      	movs	r0, #1
 80006d2:	f003 fae4 	bl	8003c9e <osDelay>
	  Listener_Execute();
 80006d6:	bf00      	nop
 80006d8:	e7f8      	b.n	80006cc <StartListenerTask+0xc>

080006da <StartControllerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControllerTask */
void StartControllerTask(void const * argument)
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	b082      	sub	sp, #8
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControllerTask */
	Controller_Init();
 80006e2:	f000 fb7e 	bl	8000de2 <Controller_Init>
  /* Infinite loop */
  for(;;)
  {
	  Controller_Execute();
 80006e6:	f000 fb82 	bl	8000dee <Controller_Execute>
    osDelay(1);
 80006ea:	2001      	movs	r0, #1
 80006ec:	f003 fad7 	bl	8003c9e <osDelay>
	  Controller_Execute();
 80006f0:	bf00      	nop
 80006f2:	e7f8      	b.n	80006e6 <StartControllerTask+0xc>

080006f4 <StartPresenterTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPresenterTask */
void StartPresenterTask(void const * argument)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPresenterTask */
	Presenter_Init();
 80006fc:	f000 fd24 	bl	8001148 <Presenter_Init>
  /* Infinite loop */
  for(;;)
  {
	  Presenter_Execute();
 8000700:	f000 fd28 	bl	8001154 <Presenter_Execute>
    osDelay(1);
 8000704:	2001      	movs	r0, #1
 8000706:	f003 faca 	bl	8003c9e <osDelay>
	  Presenter_Execute();
 800070a:	bf00      	nop
 800070c:	e7f8      	b.n	8000700 <StartPresenterTask+0xc>
	...

08000710 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08a      	sub	sp, #40	@ 0x28
 8000714:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	613b      	str	r3, [r7, #16]
 800072a:	4b49      	ldr	r3, [pc, #292]	@ (8000850 <MX_GPIO_Init+0x140>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	4a48      	ldr	r2, [pc, #288]	@ (8000850 <MX_GPIO_Init+0x140>)
 8000730:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000734:	6313      	str	r3, [r2, #48]	@ 0x30
 8000736:	4b46      	ldr	r3, [pc, #280]	@ (8000850 <MX_GPIO_Init+0x140>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800073e:	613b      	str	r3, [r7, #16]
 8000740:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	4b42      	ldr	r3, [pc, #264]	@ (8000850 <MX_GPIO_Init+0x140>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	4a41      	ldr	r2, [pc, #260]	@ (8000850 <MX_GPIO_Init+0x140>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	6313      	str	r3, [r2, #48]	@ 0x30
 8000752:	4b3f      	ldr	r3, [pc, #252]	@ (8000850 <MX_GPIO_Init+0x140>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	4b3b      	ldr	r3, [pc, #236]	@ (8000850 <MX_GPIO_Init+0x140>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	4a3a      	ldr	r2, [pc, #232]	@ (8000850 <MX_GPIO_Init+0x140>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6313      	str	r3, [r2, #48]	@ 0x30
 800076e:	4b38      	ldr	r3, [pc, #224]	@ (8000850 <MX_GPIO_Init+0x140>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	4b34      	ldr	r3, [pc, #208]	@ (8000850 <MX_GPIO_Init+0x140>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a33      	ldr	r2, [pc, #204]	@ (8000850 <MX_GPIO_Init+0x140>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b31      	ldr	r3, [pc, #196]	@ (8000850 <MX_GPIO_Init+0x140>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000796:	2200      	movs	r2, #0
 8000798:	f240 117f 	movw	r1, #383	@ 0x17f
 800079c:	482d      	ldr	r0, [pc, #180]	@ (8000854 <MX_GPIO_Init+0x144>)
 800079e:	f001 fc4b 	bl	8002038 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_11
 80007a2:	2200      	movs	r2, #0
 80007a4:	f641 0113 	movw	r1, #6163	@ 0x1813
 80007a8:	482b      	ldr	r0, [pc, #172]	@ (8000858 <MX_GPIO_Init+0x148>)
 80007aa:	f001 fc45 	bl	8002038 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 80007ae:	2200      	movs	r2, #0
 80007b0:	f24f 0107 	movw	r1, #61447	@ 0xf007
 80007b4:	4829      	ldr	r0, [pc, #164]	@ (800085c <MX_GPIO_Init+0x14c>)
 80007b6:	f001 fc3f 	bl	8002038 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80007ba:	f240 137f 	movw	r3, #383	@ 0x17f
 80007be:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	4619      	mov	r1, r3
 80007d2:	4820      	ldr	r0, [pc, #128]	@ (8000854 <MX_GPIO_Init+0x144>)
 80007d4:	f001 fa94 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_11
 80007d8:	f641 0313 	movw	r3, #6163	@ 0x1813
 80007dc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	4819      	ldr	r0, [pc, #100]	@ (8000858 <MX_GPIO_Init+0x148>)
 80007f2:	f001 fa85 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 80007f6:	f24f 0307 	movw	r3, #61447	@ 0xf007
 80007fa:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fc:	2301      	movs	r3, #1
 80007fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000804:	2300      	movs	r3, #0
 8000806:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	4619      	mov	r1, r3
 800080e:	4813      	ldr	r0, [pc, #76]	@ (800085c <MX_GPIO_Init+0x14c>)
 8000810:	f001 fa76 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000814:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081a:	2300      	movs	r3, #0
 800081c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	4619      	mov	r1, r3
 8000828:	480b      	ldr	r0, [pc, #44]	@ (8000858 <MX_GPIO_Init+0x148>)
 800082a:	f001 fa69 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800082e:	2328      	movs	r3, #40	@ 0x28
 8000830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000832:	2300      	movs	r3, #0
 8000834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	4619      	mov	r1, r3
 8000840:	4806      	ldr	r0, [pc, #24]	@ (800085c <MX_GPIO_Init+0x14c>)
 8000842:	f001 fa5d 	bl	8001d00 <HAL_GPIO_Init>

}
 8000846:	bf00      	nop
 8000848:	3728      	adds	r7, #40	@ 0x28
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800
 8000854:	40020800 	.word	0x40020800
 8000858:	40020000 	.word	0x40020000
 800085c:	40020400 	.word	0x40020400

08000860 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000864:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <MX_I2C1_Init+0x50>)
 8000866:	4a13      	ldr	r2, [pc, #76]	@ (80008b4 <MX_I2C1_Init+0x54>)
 8000868:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800086a:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <MX_I2C1_Init+0x50>)
 800086c:	4a12      	ldr	r2, [pc, #72]	@ (80008b8 <MX_I2C1_Init+0x58>)
 800086e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000870:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <MX_I2C1_Init+0x50>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000876:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <MX_I2C1_Init+0x50>)
 8000878:	2200      	movs	r2, #0
 800087a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800087c:	4b0c      	ldr	r3, [pc, #48]	@ (80008b0 <MX_I2C1_Init+0x50>)
 800087e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000882:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000884:	4b0a      	ldr	r3, [pc, #40]	@ (80008b0 <MX_I2C1_Init+0x50>)
 8000886:	2200      	movs	r2, #0
 8000888:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800088a:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <MX_I2C1_Init+0x50>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000890:	4b07      	ldr	r3, [pc, #28]	@ (80008b0 <MX_I2C1_Init+0x50>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000896:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <MX_I2C1_Init+0x50>)
 8000898:	2200      	movs	r2, #0
 800089a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800089c:	4804      	ldr	r0, [pc, #16]	@ (80008b0 <MX_I2C1_Init+0x50>)
 800089e:	f001 fbe5 	bl	800206c <HAL_I2C_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008a8:	f000 f8e4 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	2000038c 	.word	0x2000038c
 80008b4:	40005400 	.word	0x40005400
 80008b8:	000186a0 	.word	0x000186a0

080008bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	@ 0x28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a19      	ldr	r2, [pc, #100]	@ (8000940 <HAL_I2C_MspInit+0x84>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d12c      	bne.n	8000938 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	4b18      	ldr	r3, [pc, #96]	@ (8000944 <HAL_I2C_MspInit+0x88>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a17      	ldr	r2, [pc, #92]	@ (8000944 <HAL_I2C_MspInit+0x88>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b15      	ldr	r3, [pc, #84]	@ (8000944 <HAL_I2C_MspInit+0x88>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008fa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80008fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000900:	2312      	movs	r3, #18
 8000902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000908:	2303      	movs	r3, #3
 800090a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800090c:	2304      	movs	r3, #4
 800090e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4619      	mov	r1, r3
 8000916:	480c      	ldr	r0, [pc, #48]	@ (8000948 <HAL_I2C_MspInit+0x8c>)
 8000918:	f001 f9f2 	bl	8001d00 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	4b08      	ldr	r3, [pc, #32]	@ (8000944 <HAL_I2C_MspInit+0x88>)
 8000922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000924:	4a07      	ldr	r2, [pc, #28]	@ (8000944 <HAL_I2C_MspInit+0x88>)
 8000926:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800092a:	6413      	str	r3, [r2, #64]	@ 0x40
 800092c:	4b05      	ldr	r3, [pc, #20]	@ (8000944 <HAL_I2C_MspInit+0x88>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000930:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000938:	bf00      	nop
 800093a:	3728      	adds	r7, #40	@ 0x28
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40005400 	.word	0x40005400
 8000944:	40023800 	.word	0x40023800
 8000948:	40020400 	.word	0x40020400

0800094c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000950:	f001 f88e 	bl	8001a70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000954:	f000 f80c 	bl	8000970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000958:	f7ff feda 	bl	8000710 <MX_GPIO_Init>
  MX_I2C1_Init();
 800095c:	f7ff ff80 	bl	8000860 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000960:	f000 f9a4 	bl	8000cac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000964:	f7ff fe3c 	bl	80005e0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000968:	f003 f946 	bl	8003bf8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <main+0x20>

08000970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b094      	sub	sp, #80	@ 0x50
 8000974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000976:	f107 0320 	add.w	r3, r7, #32
 800097a:	2230      	movs	r2, #48	@ 0x30
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f005 fe44 	bl	800660c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000994:	2300      	movs	r3, #0
 8000996:	60bb      	str	r3, [r7, #8]
 8000998:	4b27      	ldr	r3, [pc, #156]	@ (8000a38 <SystemClock_Config+0xc8>)
 800099a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099c:	4a26      	ldr	r2, [pc, #152]	@ (8000a38 <SystemClock_Config+0xc8>)
 800099e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80009a4:	4b24      	ldr	r3, [pc, #144]	@ (8000a38 <SystemClock_Config+0xc8>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009b0:	2300      	movs	r3, #0
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	4b21      	ldr	r3, [pc, #132]	@ (8000a3c <SystemClock_Config+0xcc>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a20      	ldr	r2, [pc, #128]	@ (8000a3c <SystemClock_Config+0xcc>)
 80009ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009be:	6013      	str	r3, [r2, #0]
 80009c0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a3c <SystemClock_Config+0xcc>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009cc:	2301      	movs	r3, #1
 80009ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d6:	2302      	movs	r3, #2
 80009d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009e0:	2304      	movs	r3, #4
 80009e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80009e4:	2364      	movs	r3, #100	@ 0x64
 80009e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009e8:	2302      	movs	r3, #2
 80009ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009ec:	2304      	movs	r3, #4
 80009ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f0:	f107 0320 	add.w	r3, r7, #32
 80009f4:	4618      	mov	r0, r3
 80009f6:	f001 ffd7 	bl	80029a8 <HAL_RCC_OscConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a00:	f000 f838 	bl	8000a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a04:	230f      	movs	r3, #15
 8000a06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a1a:	f107 030c 	add.w	r3, r7, #12
 8000a1e:	2103      	movs	r1, #3
 8000a20:	4618      	mov	r0, r3
 8000a22:	f002 fa39 	bl	8002e98 <HAL_RCC_ClockConfig>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a2c:	f000 f822 	bl	8000a74 <Error_Handler>
  }
}
 8000a30:	bf00      	nop
 8000a32:	3750      	adds	r7, #80	@ 0x50
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40007000 	.word	0x40007000

08000a40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a08      	ldr	r2, [pc, #32]	@ (8000a70 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d101      	bne.n	8000a56 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000a52:	f001 f82f 	bl	8001ab4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM2) {
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a5e:	d103      	bne.n	8000a68 <HAL_TIM_PeriodElapsedCallback+0x28>
		FND_DispDataCallBack();
 8000a60:	f000 fd10 	bl	8001484 <FND_DispDataCallBack>
		StopWatch_IncTimeCallBack();
 8000a64:	f000 faa4 	bl	8000fb0 <StopWatch_IncTimeCallBack>
	}
  /* USER CODE END Callback 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40014800 	.word	0x40014800

08000a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a78:	b672      	cpsid	i
}
 8000a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <Error_Handler+0x8>

08000a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	4b12      	ldr	r3, [pc, #72]	@ (8000ad4 <HAL_MspInit+0x54>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a8e:	4a11      	ldr	r2, [pc, #68]	@ (8000ad4 <HAL_MspInit+0x54>)
 8000a90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a96:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad4 <HAL_MspInit+0x54>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	603b      	str	r3, [r7, #0]
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad4 <HAL_MspInit+0x54>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad4 <HAL_MspInit+0x54>)
 8000aac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ab0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ab2:	4b08      	ldr	r3, [pc, #32]	@ (8000ad4 <HAL_MspInit+0x54>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	210f      	movs	r1, #15
 8000ac2:	f06f 0001 	mvn.w	r0, #1
 8000ac6:	f001 f8f1 	bl	8001cac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800

08000ad8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08c      	sub	sp, #48	@ 0x30
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	4b2e      	ldr	r3, [pc, #184]	@ (8000ba8 <HAL_InitTick+0xd0>)
 8000aee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af0:	4a2d      	ldr	r2, [pc, #180]	@ (8000ba8 <HAL_InitTick+0xd0>)
 8000af2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000af6:	6453      	str	r3, [r2, #68]	@ 0x44
 8000af8:	4b2b      	ldr	r3, [pc, #172]	@ (8000ba8 <HAL_InitTick+0xd0>)
 8000afa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000afc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b04:	f107 020c 	add.w	r2, r7, #12
 8000b08:	f107 0310 	add.w	r3, r7, #16
 8000b0c:	4611      	mov	r1, r2
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f002 fbe2 	bl	80032d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b14:	f002 fbcc 	bl	80032b0 <HAL_RCC_GetPCLK2Freq>
 8000b18:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b1c:	4a23      	ldr	r2, [pc, #140]	@ (8000bac <HAL_InitTick+0xd4>)
 8000b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b22:	0c9b      	lsrs	r3, r3, #18
 8000b24:	3b01      	subs	r3, #1
 8000b26:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000b28:	4b21      	ldr	r3, [pc, #132]	@ (8000bb0 <HAL_InitTick+0xd8>)
 8000b2a:	4a22      	ldr	r2, [pc, #136]	@ (8000bb4 <HAL_InitTick+0xdc>)
 8000b2c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000b2e:	4b20      	ldr	r3, [pc, #128]	@ (8000bb0 <HAL_InitTick+0xd8>)
 8000b30:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b34:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000b36:	4a1e      	ldr	r2, [pc, #120]	@ (8000bb0 <HAL_InitTick+0xd8>)
 8000b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b3a:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000b3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb0 <HAL_InitTick+0xd8>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b42:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb0 <HAL_InitTick+0xd8>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b48:	4b19      	ldr	r3, [pc, #100]	@ (8000bb0 <HAL_InitTick+0xd8>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8000b4e:	4818      	ldr	r0, [pc, #96]	@ (8000bb0 <HAL_InitTick+0xd8>)
 8000b50:	f002 fbf4 	bl	800333c <HAL_TIM_Base_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000b5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d11b      	bne.n	8000b9a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8000b62:	4813      	ldr	r0, [pc, #76]	@ (8000bb0 <HAL_InitTick+0xd8>)
 8000b64:	f002 fc3a 	bl	80033dc <HAL_TIM_Base_Start_IT>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000b6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d111      	bne.n	8000b9a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000b76:	201a      	movs	r0, #26
 8000b78:	f001 f8b4 	bl	8001ce4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2b0f      	cmp	r3, #15
 8000b80:	d808      	bhi.n	8000b94 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8000b82:	2200      	movs	r2, #0
 8000b84:	6879      	ldr	r1, [r7, #4]
 8000b86:	201a      	movs	r0, #26
 8000b88:	f001 f890 	bl	8001cac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb8 <HAL_InitTick+0xe0>)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6013      	str	r3, [r2, #0]
 8000b92:	e002      	b.n	8000b9a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000b94:	2301      	movs	r3, #1
 8000b96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3730      	adds	r7, #48	@ 0x30
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	431bde83 	.word	0x431bde83
 8000bb0:	200003e0 	.word	0x200003e0
 8000bb4:	40014800 	.word	0x40014800
 8000bb8:	20000064 	.word	0x20000064

08000bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bc0:	bf00      	nop
 8000bc2:	e7fd      	b.n	8000bc0 <NMI_Handler+0x4>

08000bc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <HardFault_Handler+0x4>

08000bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <MemManage_Handler+0x4>

08000bd4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <BusFault_Handler+0x4>

08000bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <UsageFault_Handler+0x4>

08000be4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
	...

08000bf4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000bf8:	4802      	ldr	r0, [pc, #8]	@ (8000c04 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000bfa:	f002 fc51 	bl	80034a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	200003e0 	.word	0x200003e0

08000c08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c0c:	4802      	ldr	r0, [pc, #8]	@ (8000c18 <TIM2_IRQHandler+0x10>)
 8000c0e:	f002 fc47 	bl	80034a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	2000042c 	.word	0x2000042c

08000c1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c24:	4a14      	ldr	r2, [pc, #80]	@ (8000c78 <_sbrk+0x5c>)
 8000c26:	4b15      	ldr	r3, [pc, #84]	@ (8000c7c <_sbrk+0x60>)
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c30:	4b13      	ldr	r3, [pc, #76]	@ (8000c80 <_sbrk+0x64>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d102      	bne.n	8000c3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c38:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <_sbrk+0x64>)
 8000c3a:	4a12      	ldr	r2, [pc, #72]	@ (8000c84 <_sbrk+0x68>)
 8000c3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c3e:	4b10      	ldr	r3, [pc, #64]	@ (8000c80 <_sbrk+0x64>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d207      	bcs.n	8000c5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c4c:	f005 fd44 	bl	80066d8 <__errno>
 8000c50:	4603      	mov	r3, r0
 8000c52:	220c      	movs	r2, #12
 8000c54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c56:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5a:	e009      	b.n	8000c70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c5c:	4b08      	ldr	r3, [pc, #32]	@ (8000c80 <_sbrk+0x64>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c62:	4b07      	ldr	r3, [pc, #28]	@ (8000c80 <_sbrk+0x64>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	4a05      	ldr	r2, [pc, #20]	@ (8000c80 <_sbrk+0x64>)
 8000c6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3718      	adds	r7, #24
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20020000 	.word	0x20020000
 8000c7c:	00000400 	.word	0x00000400
 8000c80:	20000428 	.word	0x20000428
 8000c84:	20004360 	.word	0x20004360

08000c88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ca8 <SystemInit+0x20>)
 8000c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c92:	4a05      	ldr	r2, [pc, #20]	@ (8000ca8 <SystemInit+0x20>)
 8000c94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cb2:	f107 0308 	add.w	r3, r7, #8
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc0:	463b      	mov	r3, r7
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cc8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d40 <MX_TIM2_Init+0x94>)
 8000cca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8000cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d40 <MX_TIM2_Init+0x94>)
 8000cd2:	2263      	movs	r2, #99	@ 0x63
 8000cd4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d40 <MX_TIM2_Init+0x94>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000cdc:	4b18      	ldr	r3, [pc, #96]	@ (8000d40 <MX_TIM2_Init+0x94>)
 8000cde:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ce2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce4:	4b16      	ldr	r3, [pc, #88]	@ (8000d40 <MX_TIM2_Init+0x94>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cea:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <MX_TIM2_Init+0x94>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cf0:	4813      	ldr	r0, [pc, #76]	@ (8000d40 <MX_TIM2_Init+0x94>)
 8000cf2:	f002 fb23 	bl	800333c <HAL_TIM_Base_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000cfc:	f7ff feba 	bl	8000a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d06:	f107 0308 	add.w	r3, r7, #8
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	480c      	ldr	r0, [pc, #48]	@ (8000d40 <MX_TIM2_Init+0x94>)
 8000d0e:	f002 fcb7 	bl	8003680 <HAL_TIM_ConfigClockSource>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d18:	f7ff feac 	bl	8000a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d20:	2300      	movs	r3, #0
 8000d22:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d24:	463b      	mov	r3, r7
 8000d26:	4619      	mov	r1, r3
 8000d28:	4805      	ldr	r0, [pc, #20]	@ (8000d40 <MX_TIM2_Init+0x94>)
 8000d2a:	f002 feb9 	bl	8003aa0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d34:	f7ff fe9e 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d38:	bf00      	nop
 8000d3a:	3718      	adds	r7, #24
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	2000042c 	.word	0x2000042c

08000d44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d54:	d115      	bne.n	8000d82 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <HAL_TIM_Base_MspInit+0x48>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5e:	4a0b      	ldr	r2, [pc, #44]	@ (8000d8c <HAL_TIM_Base_MspInit+0x48>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d66:	4b09      	ldr	r3, [pc, #36]	@ (8000d8c <HAL_TIM_Base_MspInit+0x48>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2105      	movs	r1, #5
 8000d76:	201c      	movs	r0, #28
 8000d78:	f000 ff98 	bl	8001cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d7c:	201c      	movs	r0, #28
 8000d7e:	f000 ffb1 	bl	8001ce4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000d82:	bf00      	nop
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40023800 	.word	0x40023800

08000d90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dc8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d94:	f7ff ff78 	bl	8000c88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d98:	480c      	ldr	r0, [pc, #48]	@ (8000dcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d9a:	490d      	ldr	r1, [pc, #52]	@ (8000dd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da0:	e002      	b.n	8000da8 <LoopCopyDataInit>

08000da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da6:	3304      	adds	r3, #4

08000da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dac:	d3f9      	bcc.n	8000da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dae:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000db0:	4c0a      	ldr	r4, [pc, #40]	@ (8000ddc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db4:	e001      	b.n	8000dba <LoopFillZerobss>

08000db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db8:	3204      	adds	r2, #4

08000dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dbc:	d3fb      	bcc.n	8000db6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dbe:	f005 fc91 	bl	80066e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dc2:	f7ff fdc3 	bl	800094c <main>
  bx  lr    
 8000dc6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd0:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8000dd4:	08007160 	.word	0x08007160
  ldr r2, =_sbss
 8000dd8:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8000ddc:	2000435c 	.word	0x2000435c

08000de0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de0:	e7fe      	b.n	8000de0 <ADC_IRQHandler>

08000de2 <Controller_Init>:
 */

#include "Controller.h"

void Controller_Init()
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	af00      	add	r7, sp, #0
	StopWatch_Init();
 8000de6:	f000 f809 	bl	8000dfc <StopWatch_Init>
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}

08000dee <Controller_Execute>:

void Controller_Execute()
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	af00      	add	r7, sp, #0
	StopWatch_Execute();
 8000df2:	f000 f82d 	bl	8000e50 <StopWatch_Execute>
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <StopWatch_Init>:
#include <string.h>

stopWatch_t stopWatchData;

void StopWatch_Init()
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
	stopWatchData.hour = 0;
 8000e02:	4b11      	ldr	r3, [pc, #68]	@ (8000e48 <StopWatch_Init+0x4c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	701a      	strb	r2, [r3, #0]
	stopWatchData.min = 0;
 8000e08:	4b0f      	ldr	r3, [pc, #60]	@ (8000e48 <StopWatch_Init+0x4c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	705a      	strb	r2, [r3, #1]
	stopWatchData.sec = 0;
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e48 <StopWatch_Init+0x4c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	709a      	strb	r2, [r3, #2]
	stopWatchData.msec = 0;
 8000e14:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <StopWatch_Init+0x4c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	809a      	strh	r2, [r3, #4]

	stopWatch_t *pStopWatchData = osMailAlloc(stopWatchDataMailBox, 0);
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e4c <StopWatch_Init+0x50>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4618      	mov	r0, r3
 8000e22:	f003 f985 	bl	8004130 <osMailAlloc>
 8000e26:	6078      	str	r0, [r7, #4]
	memcpy(pStopWatchData, &stopWatchData, sizeof(stopWatch_t));
 8000e28:	2206      	movs	r2, #6
 8000e2a:	4907      	ldr	r1, [pc, #28]	@ (8000e48 <StopWatch_Init+0x4c>)
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f005 fc7f 	bl	8006730 <memcpy>
	osMailPut(stopWatchDataMailBox, pStopWatchData);
 8000e32:	4b06      	ldr	r3, [pc, #24]	@ (8000e4c <StopWatch_Init+0x50>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	6879      	ldr	r1, [r7, #4]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f003 f98f 	bl	800415c <osMailPut>
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000474 	.word	0x20000474
 8000e4c:	200004a4 	.word	0x200004a4

08000e50 <StopWatch_Execute>:

void StopWatch_Execute()
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
	eStopWatchState_t state = Model_GetStopWatchState();
 8000e56:	f000 f96b 	bl	8001130 <Model_GetStopWatchState>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]

	switch(state)
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d00c      	beq.n	8000e7e <StopWatch_Execute+0x2e>
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	dc0d      	bgt.n	8000e84 <StopWatch_Execute+0x34>
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d002      	beq.n	8000e72 <StopWatch_Execute+0x22>
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d003      	beq.n	8000e78 <StopWatch_Execute+0x28>
		break;
	case S_STOPWATCH_CLEAR:
		StopWatch_Clear();
		break;
	default:
		break;
 8000e70:	e008      	b.n	8000e84 <StopWatch_Execute+0x34>
		StopWatch_Stop();
 8000e72:	f000 f80d 	bl	8000e90 <StopWatch_Stop>
		break;
 8000e76:	e006      	b.n	8000e86 <StopWatch_Execute+0x36>
		StopWatch_Run();
 8000e78:	f000 f82c 	bl	8000ed4 <StopWatch_Run>
		break;
 8000e7c:	e003      	b.n	8000e86 <StopWatch_Execute+0x36>
		StopWatch_Clear();
 8000e7e:	f000 f86b 	bl	8000f58 <StopWatch_Clear>
		break;
 8000e82:	e000      	b.n	8000e86 <StopWatch_Execute+0x36>
		break;
 8000e84:	bf00      	nop
	}
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <StopWatch_Stop>:

void StopWatch_Stop()
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
	osEvent evt = osMessageGet(stopWatchEventMsgBox, 0);
 8000e96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed0 <StopWatch_Stop+0x40>)
 8000e98:	6819      	ldr	r1, [r3, #0]
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f003 f87a 	bl	8003f98 <osMessageGet>
	uint16_t evtState;

	if (evt.status == osEventMessage) {
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	2b10      	cmp	r3, #16
 8000ea8:	d10e      	bne.n	8000ec8 <StopWatch_Stop+0x38>
		evtState = evt.value.v; // 메세지가 들어있다면 값을 받아오겠다.
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	81fb      	strh	r3, [r7, #14]

		if (evtState == EVENT_RUN_STOP) {
 8000eae:	89fb      	ldrh	r3, [r7, #14]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d103      	bne.n	8000ebc <StopWatch_Stop+0x2c>
			Model_SetStopWatchState(S_STOPWATCH_RUN);
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	f000 f92b 	bl	8001110 <Model_SetStopWatchState>
		}
		else if (evtState == EVENT_CLEAR) {
			Model_SetStopWatchState(S_STOPWATCH_CLEAR);
		}
	}
}
 8000eba:	e005      	b.n	8000ec8 <StopWatch_Stop+0x38>
		else if (evtState == EVENT_CLEAR) {
 8000ebc:	89fb      	ldrh	r3, [r7, #14]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d102      	bne.n	8000ec8 <StopWatch_Stop+0x38>
			Model_SetStopWatchState(S_STOPWATCH_CLEAR);
 8000ec2:	2002      	movs	r0, #2
 8000ec4:	f000 f924 	bl	8001110 <Model_SetStopWatchState>
}
 8000ec8:	bf00      	nop
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	200004a0 	.word	0x200004a0

08000ed4 <StopWatch_Run>:

void StopWatch_Run()
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
	osEvent evt = osMessageGet(stopWatchEventMsgBox, 0);
 8000eda:	4b1b      	ldr	r3, [pc, #108]	@ (8000f48 <StopWatch_Run+0x74>)
 8000edc:	6819      	ldr	r1, [r3, #0]
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f003 f858 	bl	8003f98 <osMessageGet>
	uint16_t evtState;

	if (evt.status == osEventMessage) {
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2b10      	cmp	r3, #16
 8000eec:	d107      	bne.n	8000efe <StopWatch_Run+0x2a>
		evtState = evt.value.v;
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	82fb      	strh	r3, [r7, #22]

		if (evtState == EVENT_RUN_STOP) {
 8000ef2:	8afb      	ldrh	r3, [r7, #22]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d102      	bne.n	8000efe <StopWatch_Run+0x2a>
			Model_SetStopWatchState(S_STOPWATCH_STOP);
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f000 f909 	bl	8001110 <Model_SetStopWatchState>
		}
	}
	static stopWatch_t prevStopWatchData;
	// RUN은 메모리가 계속 바뀌니까 값이 바뀔때마다 읽어주기
	if (memcmp(&stopWatchData, &prevStopWatchData,sizeof(stopWatch_t))) {
 8000efe:	2206      	movs	r2, #6
 8000f00:	4912      	ldr	r1, [pc, #72]	@ (8000f4c <StopWatch_Run+0x78>)
 8000f02:	4813      	ldr	r0, [pc, #76]	@ (8000f50 <StopWatch_Run+0x7c>)
 8000f04:	f005 fb72 	bl	80065ec <memcmp>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d018      	beq.n	8000f40 <StopWatch_Run+0x6c>
		memcpy(&prevStopWatchData, &stopWatchData, sizeof(stopWatch_t));
 8000f0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f4c <StopWatch_Run+0x78>)
 8000f10:	4a0f      	ldr	r2, [pc, #60]	@ (8000f50 <StopWatch_Run+0x7c>)
 8000f12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f16:	6018      	str	r0, [r3, #0]
 8000f18:	3304      	adds	r3, #4
 8000f1a:	8019      	strh	r1, [r3, #0]
		stopWatch_t *pStopWatchData = osMailAlloc(stopWatchDataMailBox, 0);
 8000f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f54 <StopWatch_Run+0x80>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f003 f904 	bl	8004130 <osMailAlloc>
 8000f28:	6138      	str	r0, [r7, #16]
		memcpy(pStopWatchData, &stopWatchData, sizeof(stopWatch_t));
 8000f2a:	2206      	movs	r2, #6
 8000f2c:	4908      	ldr	r1, [pc, #32]	@ (8000f50 <StopWatch_Run+0x7c>)
 8000f2e:	6938      	ldr	r0, [r7, #16]
 8000f30:	f005 fbfe 	bl	8006730 <memcpy>
		osMailPut(stopWatchDataMailBox, pStopWatchData);
 8000f34:	4b07      	ldr	r3, [pc, #28]	@ (8000f54 <StopWatch_Run+0x80>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	6939      	ldr	r1, [r7, #16]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f003 f90e 	bl	800415c <osMailPut>
	}

}
 8000f40:	bf00      	nop
 8000f42:	3718      	adds	r7, #24
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	200004a0 	.word	0x200004a0
 8000f4c:	2000047c 	.word	0x2000047c
 8000f50:	20000474 	.word	0x20000474
 8000f54:	200004a4 	.word	0x200004a4

08000f58 <StopWatch_Clear>:

void StopWatch_Clear()
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
	Model_SetStopWatchState(S_STOPWATCH_STOP);
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f000 f8d6 	bl	8001110 <Model_SetStopWatchState>

	stopWatchData.hour = 0;
 8000f64:	4b10      	ldr	r3, [pc, #64]	@ (8000fa8 <StopWatch_Clear+0x50>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	701a      	strb	r2, [r3, #0]
	stopWatchData.min = 0;
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa8 <StopWatch_Clear+0x50>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	705a      	strb	r2, [r3, #1]
	stopWatchData.sec = 0;
 8000f70:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa8 <StopWatch_Clear+0x50>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	709a      	strb	r2, [r3, #2]
	stopWatchData.msec = 0;
 8000f76:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa8 <StopWatch_Clear+0x50>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	809a      	strh	r2, [r3, #4]

   stopWatch_t *pStopWatchData = osMailAlloc(stopWatchDataMailBox, 0);
 8000f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fac <StopWatch_Clear+0x54>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f003 f8d4 	bl	8004130 <osMailAlloc>
 8000f88:	6078      	str	r0, [r7, #4]
   memcpy(pStopWatchData, &stopWatchData, sizeof(stopWatch_t));
 8000f8a:	2206      	movs	r2, #6
 8000f8c:	4906      	ldr	r1, [pc, #24]	@ (8000fa8 <StopWatch_Clear+0x50>)
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f005 fbce 	bl	8006730 <memcpy>
   osMailPut(stopWatchDataMailBox, pStopWatchData);
 8000f94:	4b05      	ldr	r3, [pc, #20]	@ (8000fac <StopWatch_Clear+0x54>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	6879      	ldr	r1, [r7, #4]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f003 f8de 	bl	800415c <osMailPut>
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000474 	.word	0x20000474
 8000fac:	200004a4 	.word	0x200004a4

08000fb0 <StopWatch_IncTimeCallBack>:

void StopWatch_IncTimeCallBack()
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
	if (Model_GetStopWatchState() != S_STOPWATCH_RUN) {
 8000fb4:	f000 f8bc 	bl	8001130 <Model_GetStopWatchState>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d13a      	bne.n	8001034 <StopWatch_IncTimeCallBack+0x84>
		return;
	}

	if (stopWatchData.msec != 1000-1) {
 8000fbe:	4b1e      	ldr	r3, [pc, #120]	@ (8001038 <StopWatch_IncTimeCallBack+0x88>)
 8000fc0:	889b      	ldrh	r3, [r3, #4]
 8000fc2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d006      	beq.n	8000fd8 <StopWatch_IncTimeCallBack+0x28>
		stopWatchData.msec++;
 8000fca:	4b1b      	ldr	r3, [pc, #108]	@ (8001038 <StopWatch_IncTimeCallBack+0x88>)
 8000fcc:	889b      	ldrh	r3, [r3, #4]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	4b19      	ldr	r3, [pc, #100]	@ (8001038 <StopWatch_IncTimeCallBack+0x88>)
 8000fd4:	809a      	strh	r2, [r3, #4]
		return;
 8000fd6:	e02e      	b.n	8001036 <StopWatch_IncTimeCallBack+0x86>
	}
	stopWatchData.msec = 0;
 8000fd8:	4b17      	ldr	r3, [pc, #92]	@ (8001038 <StopWatch_IncTimeCallBack+0x88>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	809a      	strh	r2, [r3, #4]

	if (stopWatchData.sec != 60-1) {
 8000fde:	4b16      	ldr	r3, [pc, #88]	@ (8001038 <StopWatch_IncTimeCallBack+0x88>)
 8000fe0:	789b      	ldrb	r3, [r3, #2]
 8000fe2:	2b3b      	cmp	r3, #59	@ 0x3b
 8000fe4:	d006      	beq.n	8000ff4 <StopWatch_IncTimeCallBack+0x44>
		stopWatchData.sec++;
 8000fe6:	4b14      	ldr	r3, [pc, #80]	@ (8001038 <StopWatch_IncTimeCallBack+0x88>)
 8000fe8:	789b      	ldrb	r3, [r3, #2]
 8000fea:	3301      	adds	r3, #1
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <StopWatch_IncTimeCallBack+0x88>)
 8000ff0:	709a      	strb	r2, [r3, #2]
		return;
 8000ff2:	e020      	b.n	8001036 <StopWatch_IncTimeCallBack+0x86>
	}
	stopWatchData.sec = 0;
 8000ff4:	4b10      	ldr	r3, [pc, #64]	@ (8001038 <StopWatch_IncTimeCallBack+0x88>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	709a      	strb	r2, [r3, #2]

	if (stopWatchData.min != 60-1) {
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8001038 <StopWatch_IncTimeCallBack+0x88>)
 8000ffc:	785b      	ldrb	r3, [r3, #1]
 8000ffe:	2b3b      	cmp	r3, #59	@ 0x3b
 8001000:	d006      	beq.n	8001010 <StopWatch_IncTimeCallBack+0x60>
		stopWatchData.min++;
 8001002:	4b0d      	ldr	r3, [pc, #52]	@ (8001038 <StopWatch_IncTimeCallBack+0x88>)
 8001004:	785b      	ldrb	r3, [r3, #1]
 8001006:	3301      	adds	r3, #1
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4b0b      	ldr	r3, [pc, #44]	@ (8001038 <StopWatch_IncTimeCallBack+0x88>)
 800100c:	705a      	strb	r2, [r3, #1]
		return;
 800100e:	e012      	b.n	8001036 <StopWatch_IncTimeCallBack+0x86>
	}
	stopWatchData.min = 0;
 8001010:	4b09      	ldr	r3, [pc, #36]	@ (8001038 <StopWatch_IncTimeCallBack+0x88>)
 8001012:	2200      	movs	r2, #0
 8001014:	705a      	strb	r2, [r3, #1]

	if (stopWatchData.hour != 24-1) {
 8001016:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <StopWatch_IncTimeCallBack+0x88>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b17      	cmp	r3, #23
 800101c:	d006      	beq.n	800102c <StopWatch_IncTimeCallBack+0x7c>
		stopWatchData.hour++;
 800101e:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <StopWatch_IncTimeCallBack+0x88>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	3301      	adds	r3, #1
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4b04      	ldr	r3, [pc, #16]	@ (8001038 <StopWatch_IncTimeCallBack+0x88>)
 8001028:	701a      	strb	r2, [r3, #0]
		return;
 800102a:	e004      	b.n	8001036 <StopWatch_IncTimeCallBack+0x86>
	}
	stopWatchData.hour = 0;
 800102c:	4b02      	ldr	r3, [pc, #8]	@ (8001038 <StopWatch_IncTimeCallBack+0x88>)
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
 8001032:	e000      	b.n	8001036 <StopWatch_IncTimeCallBack+0x86>
		return;
 8001034:	bf00      	nop


}
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000474 	.word	0x20000474

0800103c <Listener_Init>:
 *      Author: kccistc
 */
#include "Listener.h"

void Listener_Init()
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
	Listener_StopWatchInit();
 8001040:	f000 f808 	bl	8001054 <Listener_StopWatchInit>
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}

08001048 <Listener_Execute>:

void Listener_Execute()
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
	Listener_StopWatchExecute();
 800104c:	f000 f81a 	bl	8001084 <Listener_StopWatchExecute>
}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}

08001054 <Listener_StopWatchInit>:

Button_TypeDef hbtnRunStop;
Button_TypeDef hbtnClear;

void Listener_StopWatchInit()
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	// button init
	Button_Init(&hbtnRunStop, GPIOB, GPIO_PIN_3);
 8001058:	2208      	movs	r2, #8
 800105a:	4906      	ldr	r1, [pc, #24]	@ (8001074 <Listener_StopWatchInit+0x20>)
 800105c:	4806      	ldr	r0, [pc, #24]	@ (8001078 <Listener_StopWatchInit+0x24>)
 800105e:	f000 f97b 	bl	8001358 <Button_Init>
	Button_Init(&hbtnClear, GPIOA, GPIO_PIN_10);
 8001062:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001066:	4905      	ldr	r1, [pc, #20]	@ (800107c <Listener_StopWatchInit+0x28>)
 8001068:	4805      	ldr	r0, [pc, #20]	@ (8001080 <Listener_StopWatchInit+0x2c>)
 800106a:	f000 f975 	bl	8001358 <Button_Init>
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40020400 	.word	0x40020400
 8001078:	20000484 	.word	0x20000484
 800107c:	40020000 	.word	0x40020000
 8001080:	20000490 	.word	0x20000490

08001084 <Listener_StopWatchExecute>:

void Listener_StopWatchExecute()
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
	// check button event
	Listener_StopWatch_CheckButton();
 8001088:	f000 f802 	bl	8001090 <Listener_StopWatch_CheckButton>
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}

08001090 <Listener_StopWatch_CheckButton>:

void Listener_StopWatch_CheckButton()
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	if (Button_GetState(&hbtnRunStop) == ACT_PUSHED) {
 8001094:	480e      	ldr	r0, [pc, #56]	@ (80010d0 <Listener_StopWatch_CheckButton+0x40>)
 8001096:	f000 f975 	bl	8001384 <Button_GetState>
 800109a:	4603      	mov	r3, r0
 800109c:	2b01      	cmp	r3, #1
 800109e:	d107      	bne.n	80010b0 <Listener_StopWatch_CheckButton+0x20>
		osMessagePut(stopWatchEventMsgBox, EVENT_RUN_STOP, 0);
 80010a0:	4b0c      	ldr	r3, [pc, #48]	@ (80010d4 <Listener_StopWatch_CheckButton+0x44>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2200      	movs	r2, #0
 80010a6:	2100      	movs	r1, #0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f002 ff35 	bl	8003f18 <osMessagePut>
	}
	else if (Button_GetState(&hbtnClear) == ACT_PUSHED) {
		osMessagePut(stopWatchEventMsgBox, EVENT_CLEAR, 0);
	}
}
 80010ae:	e00c      	b.n	80010ca <Listener_StopWatch_CheckButton+0x3a>
	else if (Button_GetState(&hbtnClear) == ACT_PUSHED) {
 80010b0:	4809      	ldr	r0, [pc, #36]	@ (80010d8 <Listener_StopWatch_CheckButton+0x48>)
 80010b2:	f000 f967 	bl	8001384 <Button_GetState>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d106      	bne.n	80010ca <Listener_StopWatch_CheckButton+0x3a>
		osMessagePut(stopWatchEventMsgBox, EVENT_CLEAR, 0);
 80010bc:	4b05      	ldr	r3, [pc, #20]	@ (80010d4 <Listener_StopWatch_CheckButton+0x44>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2200      	movs	r2, #0
 80010c2:	2101      	movs	r1, #1
 80010c4:	4618      	mov	r0, r3
 80010c6:	f002 ff27 	bl	8003f18 <osMessagePut>
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000484 	.word	0x20000484
 80010d4:	200004a0 	.word	0x200004a0
 80010d8:	20000490 	.word	0x20000490

080010dc <Model_StopWatchInit>:

osMailQId stopWatchDataMailBox;
osMailQDef(stopWatchDataQueue, 4, stopWatch_t);

void Model_StopWatchInit()
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	stopWatchEventMsgBox = osMessageCreate(osMessageQ(stopWatchEventQueue), NULL);
 80010e0:	2100      	movs	r1, #0
 80010e2:	4807      	ldr	r0, [pc, #28]	@ (8001100 <Model_StopWatchInit+0x24>)
 80010e4:	f002 feef 	bl	8003ec6 <osMessageCreate>
 80010e8:	4603      	mov	r3, r0
 80010ea:	4a06      	ldr	r2, [pc, #24]	@ (8001104 <Model_StopWatchInit+0x28>)
 80010ec:	6013      	str	r3, [r2, #0]
	stopWatchDataMailBox = osMailCreate(osMailQ(stopWatchDataQueue), NULL);
 80010ee:	2100      	movs	r1, #0
 80010f0:	4805      	ldr	r0, [pc, #20]	@ (8001108 <Model_StopWatchInit+0x2c>)
 80010f2:	f002 ffc5 	bl	8004080 <osMailCreate>
 80010f6:	4603      	mov	r3, r0
 80010f8:	4a04      	ldr	r2, [pc, #16]	@ (800110c <Model_StopWatchInit+0x30>)
 80010fa:	6013      	str	r3, [r2, #0]
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	08007100 	.word	0x08007100
 8001104:	200004a0 	.word	0x200004a0
 8001108:	08007110 	.word	0x08007110
 800110c:	200004a4 	.word	0x200004a4

08001110 <Model_SetStopWatchState>:

void Model_SetStopWatchState(eStopWatchState_t state)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
	stopWatchState = state;
 800111a:	4a04      	ldr	r2, [pc, #16]	@ (800112c <Model_SetStopWatchState+0x1c>)
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	7013      	strb	r3, [r2, #0]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	2000049c 	.word	0x2000049c

08001130 <Model_GetStopWatchState>:

eStopWatchState_t Model_GetStopWatchState()
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
	return stopWatchState;
 8001134:	4b03      	ldr	r3, [pc, #12]	@ (8001144 <Model_GetStopWatchState+0x14>)
 8001136:	781b      	ldrb	r3, [r3, #0]
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	2000049c 	.word	0x2000049c

08001148 <Presenter_Init>:
 *      Author: kccistc
 */
#include "Presenter.h"

void Presenter_Init()
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	Presenter_StopWatchInit();
 800114c:	f000 f808 	bl	8001160 <Presenter_StopWatchInit>
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}

08001154 <Presenter_Execute>:

void Presenter_Execute()
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
	Presenter_StopWatchExecute();
 8001158:	f000 f80c 	bl	8001174 <Presenter_StopWatchExecute>
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}

08001160 <Presenter_StopWatchInit>:
#include <stdio.h>
#include <string.h>


void Presenter_StopWatchInit()
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	LCD_Init(&hi2c1);
 8001164:	4802      	ldr	r0, [pc, #8]	@ (8001170 <Presenter_StopWatchInit+0x10>)
 8001166:	f000 fb1f 	bl	80017a8 <LCD_Init>
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	2000038c 	.word	0x2000038c

08001174 <Presenter_StopWatchExecute>:

void Presenter_StopWatchExecute()
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
	stopWatch_t *pStopWatchData;
	stopWatch_t stopWatchData;

	osEvent evt = osMailGet(stopWatchDataMailBox, osWaitForever);
 800117a:	4b15      	ldr	r3, [pc, #84]	@ (80011d0 <Presenter_StopWatchExecute+0x5c>)
 800117c:	6819      	ldr	r1, [r3, #0]
 800117e:	463b      	mov	r3, r7
 8001180:	f04f 32ff 	mov.w	r2, #4294967295
 8001184:	4618      	mov	r0, r3
 8001186:	f003 f827 	bl	80041d8 <osMailGet>
	if (evt.status == osEventMail) {
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	2b20      	cmp	r3, #32
 800118e:	d10e      	bne.n	80011ae <Presenter_StopWatchExecute+0x3a>
		pStopWatchData = evt.value.p;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	617b      	str	r3, [r7, #20]
		memcpy(&stopWatchData, pStopWatchData, sizeof(stopWatch_t));
 8001194:	f107 030c 	add.w	r3, r7, #12
 8001198:	2206      	movs	r2, #6
 800119a:	6979      	ldr	r1, [r7, #20]
 800119c:	4618      	mov	r0, r3
 800119e:	f005 fac7 	bl	8006730 <memcpy>
		osMailFree(stopWatchDataMailBox, pStopWatchData);
 80011a2:	4b0b      	ldr	r3, [pc, #44]	@ (80011d0 <Presenter_StopWatchExecute+0x5c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	6979      	ldr	r1, [r7, #20]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f003 f889 	bl	80042c0 <osMailFree>
	}
		Presenter_StopWatch_FND(stopWatchData);
 80011ae:	f107 030c 	add.w	r3, r7, #12
 80011b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011b6:	f000 f80d 	bl	80011d4 <Presenter_StopWatch_FND>
		Presenter_StopWatch_LCD(stopWatchData);
 80011ba:	f107 030c 	add.w	r3, r7, #12
 80011be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011c2:	f000 f865 	bl	8001290 <Presenter_StopWatch_LCD>
}
 80011c6:	bf00      	nop
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200004a4 	.word	0x200004a4

080011d4 <Presenter_StopWatch_FND>:

void Presenter_StopWatch_FND(stopWatch_t stopWatchData)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	463b      	mov	r3, r7
 80011dc:	e883 0003 	stmia.w	r3, {r0, r1}
	FND_WriteData(stopWatchData.min%10*1000 + stopWatchData.sec%100*10 + stopWatchData.msec/100);
 80011e0:	787a      	ldrb	r2, [r7, #1]
 80011e2:	4b29      	ldr	r3, [pc, #164]	@ (8001288 <Presenter_StopWatch_FND+0xb4>)
 80011e4:	fba3 1302 	umull	r1, r3, r3, r2
 80011e8:	08d9      	lsrs	r1, r3, #3
 80011ea:	460b      	mov	r3, r1
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	440b      	add	r3, r1
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	461a      	mov	r2, r3
 80011f8:	0152      	lsls	r2, r2, #5
 80011fa:	1ad2      	subs	r2, r2, r3
 80011fc:	0092      	lsls	r2, r2, #2
 80011fe:	4413      	add	r3, r2
 8001200:	00db      	lsls	r3, r3, #3
 8001202:	b29a      	uxth	r2, r3
 8001204:	78bb      	ldrb	r3, [r7, #2]
 8001206:	4921      	ldr	r1, [pc, #132]	@ (800128c <Presenter_StopWatch_FND+0xb8>)
 8001208:	fba1 0103 	umull	r0, r1, r1, r3
 800120c:	0949      	lsrs	r1, r1, #5
 800120e:	2064      	movs	r0, #100	@ 0x64
 8001210:	fb00 f101 	mul.w	r1, r0, r1
 8001214:	1a5b      	subs	r3, r3, r1
 8001216:	b2db      	uxtb	r3, r3
 8001218:	4619      	mov	r1, r3
 800121a:	0089      	lsls	r1, r1, #2
 800121c:	440b      	add	r3, r1
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	b29b      	uxth	r3, r3
 8001222:	4413      	add	r3, r2
 8001224:	b29a      	uxth	r2, r3
 8001226:	88bb      	ldrh	r3, [r7, #4]
 8001228:	4918      	ldr	r1, [pc, #96]	@ (800128c <Presenter_StopWatch_FND+0xb8>)
 800122a:	fba1 1303 	umull	r1, r3, r1, r3
 800122e:	095b      	lsrs	r3, r3, #5
 8001230:	b29b      	uxth	r3, r3
 8001232:	4413      	add	r3, r2
 8001234:	b29b      	uxth	r3, r3
 8001236:	4618      	mov	r0, r3
 8001238:	f000 f914 	bl	8001464 <FND_WriteData>
	if (stopWatchData.msec%100 <50) {
 800123c:	88bb      	ldrh	r3, [r7, #4]
 800123e:	4a13      	ldr	r2, [pc, #76]	@ (800128c <Presenter_StopWatch_FND+0xb8>)
 8001240:	fba2 1203 	umull	r1, r2, r2, r3
 8001244:	0952      	lsrs	r2, r2, #5
 8001246:	2164      	movs	r1, #100	@ 0x64
 8001248:	fb01 f202 	mul.w	r2, r1, r2
 800124c:	1a9b      	subs	r3, r3, r2
 800124e:	b29b      	uxth	r3, r3
 8001250:	2b31      	cmp	r3, #49	@ 0x31
 8001252:	d804      	bhi.n	800125e <Presenter_StopWatch_FND+0x8a>
		FND_WriteDp(FND_DP_10, FND_DP_ON);
 8001254:	2101      	movs	r1, #1
 8001256:	2002      	movs	r0, #2
 8001258:	f000 f8dc 	bl	8001414 <FND_WriteDp>
 800125c:	e003      	b.n	8001266 <Presenter_StopWatch_FND+0x92>
	}
	else {
		FND_WriteDp(FND_DP_10, FND_DP_OFF);
 800125e:	2100      	movs	r1, #0
 8001260:	2002      	movs	r0, #2
 8001262:	f000 f8d7 	bl	8001414 <FND_WriteDp>
	}

	if (stopWatchData.msec <500) {
 8001266:	88bb      	ldrh	r3, [r7, #4]
 8001268:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800126c:	d204      	bcs.n	8001278 <Presenter_StopWatch_FND+0xa4>
		FND_WriteDp(FND_DP_1000, FND_DP_ON);
 800126e:	2101      	movs	r1, #1
 8001270:	2008      	movs	r0, #8
 8001272:	f000 f8cf 	bl	8001414 <FND_WriteDp>
	}
	else {
		FND_WriteDp(FND_DP_1000, FND_DP_OFF);
	}
}
 8001276:	e003      	b.n	8001280 <Presenter_StopWatch_FND+0xac>
		FND_WriteDp(FND_DP_1000, FND_DP_OFF);
 8001278:	2100      	movs	r1, #0
 800127a:	2008      	movs	r0, #8
 800127c:	f000 f8ca 	bl	8001414 <FND_WriteDp>
}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	cccccccd 	.word	0xcccccccd
 800128c:	51eb851f 	.word	0x51eb851f

08001290 <Presenter_StopWatch_LCD>:

void Presenter_StopWatch_LCD(stopWatch_t stopWatchData)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b09e      	sub	sp, #120	@ 0x78
 8001294:	af02      	add	r7, sp, #8
 8001296:	463b      	mov	r3, r7
 8001298:	e883 0003 	stmia.w	r3, {r0, r1}
	char str[50];
	char str1[50];

	if (Model_GetStopWatchState() == S_STOPWATCH_CLEAR) {
 800129c:	f7ff ff48 	bl	8001130 <Model_GetStopWatchState>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d10a      	bne.n	80012bc <Presenter_StopWatch_LCD+0x2c>
		sprintf(str1, "clear");
 80012a6:	f107 0308 	add.w	r3, r7, #8
 80012aa:	4927      	ldr	r1, [pc, #156]	@ (8001348 <Presenter_StopWatch_LCD+0xb8>)
 80012ac:	4618      	mov	r0, r3
 80012ae:	f005 f97b 	bl	80065a8 <siprintf>
		HAL_Delay(1000);
 80012b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012b6:	f000 fc1d 	bl	8001af4 <HAL_Delay>
 80012ba:	e042      	b.n	8001342 <Presenter_StopWatch_LCD+0xb2>
		return;
	}
	else
	{
		if (Model_GetStopWatchState() == S_STOPWATCH_RUN){
 80012bc:	f7ff ff38 	bl	8001130 <Model_GetStopWatchState>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d10c      	bne.n	80012e0 <Presenter_StopWatch_LCD+0x50>
			sprintf(str, "RUN %02d:%02d.%03d\n", stopWatchData.min, stopWatchData.sec, stopWatchData.msec);
 80012c6:	787b      	ldrb	r3, [r7, #1]
 80012c8:	461a      	mov	r2, r3
 80012ca:	78bb      	ldrb	r3, [r7, #2]
 80012cc:	4619      	mov	r1, r3
 80012ce:	88bb      	ldrh	r3, [r7, #4]
 80012d0:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	460b      	mov	r3, r1
 80012d8:	491c      	ldr	r1, [pc, #112]	@ (800134c <Presenter_StopWatch_LCD+0xbc>)
 80012da:	f005 f965 	bl	80065a8 <siprintf>
 80012de:	e022      	b.n	8001326 <Presenter_StopWatch_LCD+0x96>
		}
		else if (Model_GetStopWatchState() == S_STOPWATCH_STOP){
 80012e0:	f7ff ff26 	bl	8001130 <Model_GetStopWatchState>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d10c      	bne.n	8001304 <Presenter_StopWatch_LCD+0x74>
			sprintf(str, "STOP %02d:%02d.%03d\n", stopWatchData.min, stopWatchData.sec, stopWatchData.msec);
 80012ea:	787b      	ldrb	r3, [r7, #1]
 80012ec:	461a      	mov	r2, r3
 80012ee:	78bb      	ldrb	r3, [r7, #2]
 80012f0:	4619      	mov	r1, r3
 80012f2:	88bb      	ldrh	r3, [r7, #4]
 80012f4:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	460b      	mov	r3, r1
 80012fc:	4914      	ldr	r1, [pc, #80]	@ (8001350 <Presenter_StopWatch_LCD+0xc0>)
 80012fe:	f005 f953 	bl	80065a8 <siprintf>
 8001302:	e010      	b.n	8001326 <Presenter_StopWatch_LCD+0x96>
		}
		else if (Model_GetStopWatchState() == S_STOPWATCH_CLEAR){
 8001304:	f7ff ff14 	bl	8001130 <Model_GetStopWatchState>
 8001308:	4603      	mov	r3, r0
 800130a:	2b02      	cmp	r3, #2
 800130c:	d10b      	bne.n	8001326 <Presenter_StopWatch_LCD+0x96>
			sprintf(str, "CLAER %02d:%02d.%03d\n", stopWatchData.min, stopWatchData.sec, stopWatchData.msec);
 800130e:	787b      	ldrb	r3, [r7, #1]
 8001310:	461a      	mov	r2, r3
 8001312:	78bb      	ldrb	r3, [r7, #2]
 8001314:	4619      	mov	r1, r3
 8001316:	88bb      	ldrh	r3, [r7, #4]
 8001318:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	460b      	mov	r3, r1
 8001320:	490c      	ldr	r1, [pc, #48]	@ (8001354 <Presenter_StopWatch_LCD+0xc4>)
 8001322:	f005 f941 	bl	80065a8 <siprintf>
		}
	}
	LCD_writeStringXY(0, 0, str);
 8001326:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800132a:	461a      	mov	r2, r3
 800132c:	2100      	movs	r1, #0
 800132e:	2000      	movs	r0, #0
 8001330:	f000 fb89 	bl	8001a46 <LCD_writeStringXY>
	LCD_writeStringXY(1, 0, str1);
 8001334:	f107 0308 	add.w	r3, r7, #8
 8001338:	461a      	mov	r2, r3
 800133a:	2100      	movs	r1, #0
 800133c:	2001      	movs	r0, #1
 800133e:	f000 fb82 	bl	8001a46 <LCD_writeStringXY>
}
 8001342:	3770      	adds	r7, #112	@ 0x70
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	08007088 	.word	0x08007088
 800134c:	08007090 	.word	0x08007090
 8001350:	080070a4 	.word	0x080070a4
 8001354:	080070bc 	.word	0x080070bc

08001358 <Button_Init>:
// 입력값이 0이면 눌린 상태 (풀업 기준)
#define BUTTON_PRESSED   0
#define BUTTON_RELEASED  1

void Button_Init(Button_TypeDef *hbtn, GPIO_TypeDef *GPIOx, uint16_t pinNum)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	4613      	mov	r3, r2
 8001364:	80fb      	strh	r3, [r7, #6]
	hbtn->GPIOx = GPIOx;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	68ba      	ldr	r2, [r7, #8]
 800136a:	601a      	str	r2, [r3, #0]
	hbtn->pinNum = pinNum;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	88fa      	ldrh	r2, [r7, #6]
 8001370:	809a      	strh	r2, [r3, #4]
	hbtn->prevState = BUTTON_RELEASED;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2201      	movs	r2, #1
 8001376:	609a      	str	r2, [r3, #8]
}
 8001378:	bf00      	nop
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <Button_GetState>:

button_state_t Button_GetState(Button_TypeDef *hbtn)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
    uint32_t curState = HAL_GPIO_ReadPin(hbtn->GPIOx, hbtn->pinNum);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	889b      	ldrh	r3, [r3, #4]
 8001394:	4619      	mov	r1, r3
 8001396:	4610      	mov	r0, r2
 8001398:	f000 fe36 	bl	8002008 <HAL_GPIO_ReadPin>
 800139c:	4603      	mov	r3, r0
 800139e:	60bb      	str	r3, [r7, #8]

    button_state_t result = NO_ACT;
 80013a0:	2300      	movs	r3, #0
 80013a2:	73fb      	strb	r3, [r7, #15]

    if (hbtn->prevState == BUTTON_RELEASED && curState == BUTTON_PRESSED) {
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d113      	bne.n	80013d4 <Button_GetState+0x50>
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d110      	bne.n	80013d4 <Button_GetState+0x50>
		HAL_Delay(2); // debounce
 80013b2:	2002      	movs	r0, #2
 80013b4:	f000 fb9e 	bl	8001af4 <HAL_Delay>
		if (HAL_GPIO_ReadPin(hbtn->GPIOx, hbtn->pinNum) == BUTTON_PRESSED) {
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	889b      	ldrh	r3, [r3, #4]
 80013c0:	4619      	mov	r1, r3
 80013c2:	4610      	mov	r0, r2
 80013c4:	f000 fe20 	bl	8002008 <HAL_GPIO_ReadPin>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d119      	bne.n	8001402 <Button_GetState+0x7e>
			result = ACT_PUSHED;
 80013ce:	2301      	movs	r3, #1
 80013d0:	73fb      	strb	r3, [r7, #15]
		if (HAL_GPIO_ReadPin(hbtn->GPIOx, hbtn->pinNum) == BUTTON_PRESSED) {
 80013d2:	e016      	b.n	8001402 <Button_GetState+0x7e>
    	}
    }
    else if (hbtn->prevState == BUTTON_PRESSED && curState == BUTTON_RELEASED) {
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d112      	bne.n	8001402 <Button_GetState+0x7e>
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d10f      	bne.n	8001402 <Button_GetState+0x7e>
    	HAL_Delay(2); // debounce
 80013e2:	2002      	movs	r0, #2
 80013e4:	f000 fb86 	bl	8001af4 <HAL_Delay>
		if (HAL_GPIO_ReadPin(hbtn->GPIOx, hbtn->pinNum) == BUTTON_RELEASED) {
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	889b      	ldrh	r3, [r3, #4]
 80013f0:	4619      	mov	r1, r3
 80013f2:	4610      	mov	r0, r2
 80013f4:	f000 fe08 	bl	8002008 <HAL_GPIO_ReadPin>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d101      	bne.n	8001402 <Button_GetState+0x7e>
			result = ACT_RELEASED;
 80013fe:	2302      	movs	r3, #2
 8001400:	73fb      	strb	r3, [r7, #15]
    	}
    }
    hbtn->prevState = curState;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	68ba      	ldr	r2, [r7, #8]
 8001406:	609a      	str	r2, [r3, #8]
    return result;
 8001408:	7bfb      	ldrb	r3, [r7, #15]
}
 800140a:	4618      	mov	r0, r3
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <FND_WriteDp>:

static uint16_t fndDispNum = 0; // fnd main data
static uint8_t fndDispDp = 0; // fnd dp data, xxxx1111

void FND_WriteDp(uint8_t dpData, uint8_t dpState)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	460a      	mov	r2, r1
 800141e:	71fb      	strb	r3, [r7, #7]
 8001420:	4613      	mov	r3, r2
 8001422:	71bb      	strb	r3, [r7, #6]
	if (dpState == FND_DP_ON)
 8001424:	79bb      	ldrb	r3, [r7, #6]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d107      	bne.n	800143a <FND_WriteDp+0x26>
		fndDispDp |= dpData;
 800142a:	4b0d      	ldr	r3, [pc, #52]	@ (8001460 <FND_WriteDp+0x4c>)
 800142c:	781a      	ldrb	r2, [r3, #0]
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	4313      	orrs	r3, r2
 8001432:	b2da      	uxtb	r2, r3
 8001434:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <FND_WriteDp+0x4c>)
 8001436:	701a      	strb	r2, [r3, #0]
	else
		fndDispDp &= ~dpData;
}
 8001438:	e00b      	b.n	8001452 <FND_WriteDp+0x3e>
		fndDispDp &= ~dpData;
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	43db      	mvns	r3, r3
 8001440:	b25a      	sxtb	r2, r3
 8001442:	4b07      	ldr	r3, [pc, #28]	@ (8001460 <FND_WriteDp+0x4c>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	b25b      	sxtb	r3, r3
 8001448:	4013      	ands	r3, r2
 800144a:	b25b      	sxtb	r3, r3
 800144c:	b2da      	uxtb	r2, r3
 800144e:	4b04      	ldr	r3, [pc, #16]	@ (8001460 <FND_WriteDp+0x4c>)
 8001450:	701a      	strb	r2, [r3, #0]
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	200004ae 	.word	0x200004ae

08001464 <FND_WriteData>:

void FND_WriteData(uint16_t data)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	80fb      	strh	r3, [r7, #6]
	fndDispNum = data;
 800146e:	4a04      	ldr	r2, [pc, #16]	@ (8001480 <FND_WriteData+0x1c>)
 8001470:	88fb      	ldrh	r3, [r7, #6]
 8001472:	8013      	strh	r3, [r2, #0]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	200004ac 	.word	0x200004ac

08001484 <FND_DispDataCallBack>:
	return fndDispNum;
}

// display fndDispNum
void FND_DispDataCallBack()
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
	static int digitPos = 0;
	// 인터럽트가 발생하면 한 자리씩 출력한다.
	digitPos = (digitPos+1) % 8;
 8001488:	4b80      	ldr	r3, [pc, #512]	@ (800168c <FND_DispDataCallBack+0x208>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	3301      	adds	r3, #1
 800148e:	425a      	negs	r2, r3
 8001490:	f003 0307 	and.w	r3, r3, #7
 8001494:	f002 0207 	and.w	r2, r2, #7
 8001498:	bf58      	it	pl
 800149a:	4253      	negpl	r3, r2
 800149c:	4a7b      	ldr	r2, [pc, #492]	@ (800168c <FND_DispDataCallBack+0x208>)
 800149e:	6013      	str	r3, [r2, #0]
	switch(digitPos)
 80014a0:	4b7a      	ldr	r3, [pc, #488]	@ (800168c <FND_DispDataCallBack+0x208>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b07      	cmp	r3, #7
 80014a6:	f200 80ee 	bhi.w	8001686 <FND_DispDataCallBack+0x202>
 80014aa:	a201      	add	r2, pc, #4	@ (adr r2, 80014b0 <FND_DispDataCallBack+0x2c>)
 80014ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b0:	080014d1 	.word	0x080014d1
 80014b4:	080014ff 	.word	0x080014ff
 80014b8:	08001537 	.word	0x08001537
 80014bc:	0800156f 	.word	0x0800156f
 80014c0:	080015a7 	.word	0x080015a7
 80014c4:	080015df 	.word	0x080015df
 80014c8:	08001617 	.word	0x08001617
 80014cc:	0800164f 	.word	0x0800164f
	{
	case DIGIT_1:
		FND_DispOffAll();
 80014d0:	f000 f8e8 	bl	80016a4 <FND_DispOffAll>
		FND_DispDigit(fndDispNum % 10);
 80014d4:	4b6e      	ldr	r3, [pc, #440]	@ (8001690 <FND_DispDataCallBack+0x20c>)
 80014d6:	881a      	ldrh	r2, [r3, #0]
 80014d8:	4b6e      	ldr	r3, [pc, #440]	@ (8001694 <FND_DispDataCallBack+0x210>)
 80014da:	fba3 1302 	umull	r1, r3, r3, r2
 80014de:	08d9      	lsrs	r1, r3, #3
 80014e0:	460b      	mov	r3, r1
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	440b      	add	r3, r1
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	4618      	mov	r0, r3
 80014ee:	f000 f913 	bl	8001718 <FND_DispDigit>
		FND_DispOn(digitPos);
 80014f2:	4b66      	ldr	r3, [pc, #408]	@ (800168c <FND_DispDataCallBack+0x208>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 f8f6 	bl	80016e8 <FND_DispOn>
		break;
 80014fc:	e0c3      	b.n	8001686 <FND_DispDataCallBack+0x202>
	case DIGIT_10:
		FND_DispOffAll();
 80014fe:	f000 f8d1 	bl	80016a4 <FND_DispOffAll>
		FND_DispDigit(fndDispNum /10 % 10);
 8001502:	4b63      	ldr	r3, [pc, #396]	@ (8001690 <FND_DispDataCallBack+0x20c>)
 8001504:	881b      	ldrh	r3, [r3, #0]
 8001506:	4a63      	ldr	r2, [pc, #396]	@ (8001694 <FND_DispDataCallBack+0x210>)
 8001508:	fba2 2303 	umull	r2, r3, r2, r3
 800150c:	08db      	lsrs	r3, r3, #3
 800150e:	b29a      	uxth	r2, r3
 8001510:	4b60      	ldr	r3, [pc, #384]	@ (8001694 <FND_DispDataCallBack+0x210>)
 8001512:	fba3 1302 	umull	r1, r3, r3, r2
 8001516:	08d9      	lsrs	r1, r3, #3
 8001518:	460b      	mov	r3, r1
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	440b      	add	r3, r1
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	b29b      	uxth	r3, r3
 8001524:	4618      	mov	r0, r3
 8001526:	f000 f8f7 	bl	8001718 <FND_DispDigit>
		FND_DispOn(digitPos);
 800152a:	4b58      	ldr	r3, [pc, #352]	@ (800168c <FND_DispDataCallBack+0x208>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f000 f8da 	bl	80016e8 <FND_DispOn>
		break;
 8001534:	e0a7      	b.n	8001686 <FND_DispDataCallBack+0x202>
	case DIGIT_100:
		FND_DispOffAll();
 8001536:	f000 f8b5 	bl	80016a4 <FND_DispOffAll>
		FND_DispDigit(fndDispNum /100 % 10);
 800153a:	4b55      	ldr	r3, [pc, #340]	@ (8001690 <FND_DispDataCallBack+0x20c>)
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	4a56      	ldr	r2, [pc, #344]	@ (8001698 <FND_DispDataCallBack+0x214>)
 8001540:	fba2 2303 	umull	r2, r3, r2, r3
 8001544:	095b      	lsrs	r3, r3, #5
 8001546:	b29a      	uxth	r2, r3
 8001548:	4b52      	ldr	r3, [pc, #328]	@ (8001694 <FND_DispDataCallBack+0x210>)
 800154a:	fba3 1302 	umull	r1, r3, r3, r2
 800154e:	08d9      	lsrs	r1, r3, #3
 8001550:	460b      	mov	r3, r1
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	440b      	add	r3, r1
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	b29b      	uxth	r3, r3
 800155c:	4618      	mov	r0, r3
 800155e:	f000 f8db 	bl	8001718 <FND_DispDigit>
		FND_DispOn(digitPos);
 8001562:	4b4a      	ldr	r3, [pc, #296]	@ (800168c <FND_DispDataCallBack+0x208>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f000 f8be 	bl	80016e8 <FND_DispOn>
		break;
 800156c:	e08b      	b.n	8001686 <FND_DispDataCallBack+0x202>
	case DIGIT_1000:
		FND_DispOffAll();
 800156e:	f000 f899 	bl	80016a4 <FND_DispOffAll>
		FND_DispDigit(fndDispNum /1000 % 10);
 8001572:	4b47      	ldr	r3, [pc, #284]	@ (8001690 <FND_DispDataCallBack+0x20c>)
 8001574:	881b      	ldrh	r3, [r3, #0]
 8001576:	4a49      	ldr	r2, [pc, #292]	@ (800169c <FND_DispDataCallBack+0x218>)
 8001578:	fba2 2303 	umull	r2, r3, r2, r3
 800157c:	099b      	lsrs	r3, r3, #6
 800157e:	b29a      	uxth	r2, r3
 8001580:	4b44      	ldr	r3, [pc, #272]	@ (8001694 <FND_DispDataCallBack+0x210>)
 8001582:	fba3 1302 	umull	r1, r3, r3, r2
 8001586:	08d9      	lsrs	r1, r3, #3
 8001588:	460b      	mov	r3, r1
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	440b      	add	r3, r1
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	b29b      	uxth	r3, r3
 8001594:	4618      	mov	r0, r3
 8001596:	f000 f8bf 	bl	8001718 <FND_DispDigit>
		FND_DispOn(digitPos);
 800159a:	4b3c      	ldr	r3, [pc, #240]	@ (800168c <FND_DispDataCallBack+0x208>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 f8a2 	bl	80016e8 <FND_DispOn>
		break;
 80015a4:	e06f      	b.n	8001686 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_1:
		FND_DispOffAll();
 80015a6:	f000 f87d 	bl	80016a4 <FND_DispOffAll>
		if (fndDispDp & (1<<0)) {
 80015aa:	4b3d      	ldr	r3, [pc, #244]	@ (80016a0 <FND_DispDataCallBack+0x21c>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <FND_DispDataCallBack+0x13a>
			FND_DispDigit(10); // DP ON
 80015b6:	200a      	movs	r0, #10
 80015b8:	f000 f8ae 	bl	8001718 <FND_DispDigit>
 80015bc:	e002      	b.n	80015c4 <FND_DispDataCallBack+0x140>
		} else {
			FND_DispDigit(11); // ALL OFF
 80015be:	200b      	movs	r0, #11
 80015c0:	f000 f8aa 	bl	8001718 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 80015c4:	4b31      	ldr	r3, [pc, #196]	@ (800168c <FND_DispDataCallBack+0x208>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	425a      	negs	r2, r3
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	f002 0203 	and.w	r2, r2, #3
 80015d2:	bf58      	it	pl
 80015d4:	4253      	negpl	r3, r2
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 f886 	bl	80016e8 <FND_DispOn>
		break;
 80015dc:	e053      	b.n	8001686 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_10:
		FND_DispOffAll();
 80015de:	f000 f861 	bl	80016a4 <FND_DispOffAll>
		if (fndDispDp & (1<<1)) {
 80015e2:	4b2f      	ldr	r3, [pc, #188]	@ (80016a0 <FND_DispDataCallBack+0x21c>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <FND_DispDataCallBack+0x172>
			FND_DispDigit(10); // DP ON
 80015ee:	200a      	movs	r0, #10
 80015f0:	f000 f892 	bl	8001718 <FND_DispDigit>
 80015f4:	e002      	b.n	80015fc <FND_DispDataCallBack+0x178>
		} else {
			FND_DispDigit(11); // ALL OFF
 80015f6:	200b      	movs	r0, #11
 80015f8:	f000 f88e 	bl	8001718 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 80015fc:	4b23      	ldr	r3, [pc, #140]	@ (800168c <FND_DispDataCallBack+0x208>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	425a      	negs	r2, r3
 8001602:	f003 0303 	and.w	r3, r3, #3
 8001606:	f002 0203 	and.w	r2, r2, #3
 800160a:	bf58      	it	pl
 800160c:	4253      	negpl	r3, r2
 800160e:	4618      	mov	r0, r3
 8001610:	f000 f86a 	bl	80016e8 <FND_DispOn>
		break;
 8001614:	e037      	b.n	8001686 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_100:
		FND_DispOffAll();
 8001616:	f000 f845 	bl	80016a4 <FND_DispOffAll>
		if (fndDispDp & (1<<2)) {
 800161a:	4b21      	ldr	r3, [pc, #132]	@ (80016a0 <FND_DispDataCallBack+0x21c>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	f003 0304 	and.w	r3, r3, #4
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <FND_DispDataCallBack+0x1aa>
			FND_DispDigit(10); // DP ON
 8001626:	200a      	movs	r0, #10
 8001628:	f000 f876 	bl	8001718 <FND_DispDigit>
 800162c:	e002      	b.n	8001634 <FND_DispDataCallBack+0x1b0>
		} else {
			FND_DispDigit(11); // ALL OFF
 800162e:	200b      	movs	r0, #11
 8001630:	f000 f872 	bl	8001718 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8001634:	4b15      	ldr	r3, [pc, #84]	@ (800168c <FND_DispDataCallBack+0x208>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	425a      	negs	r2, r3
 800163a:	f003 0303 	and.w	r3, r3, #3
 800163e:	f002 0203 	and.w	r2, r2, #3
 8001642:	bf58      	it	pl
 8001644:	4253      	negpl	r3, r2
 8001646:	4618      	mov	r0, r3
 8001648:	f000 f84e 	bl	80016e8 <FND_DispOn>
		break;
 800164c:	e01b      	b.n	8001686 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_1000:
		FND_DispOffAll();
 800164e:	f000 f829 	bl	80016a4 <FND_DispOffAll>
		if (fndDispDp & (1<<3)) {
 8001652:	4b13      	ldr	r3, [pc, #76]	@ (80016a0 <FND_DispDataCallBack+0x21c>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	f003 0308 	and.w	r3, r3, #8
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <FND_DispDataCallBack+0x1e2>
			FND_DispDigit(10); // DP ON
 800165e:	200a      	movs	r0, #10
 8001660:	f000 f85a 	bl	8001718 <FND_DispDigit>
 8001664:	e002      	b.n	800166c <FND_DispDataCallBack+0x1e8>
		} else {
			FND_DispDigit(11); // ALL OFF
 8001666:	200b      	movs	r0, #11
 8001668:	f000 f856 	bl	8001718 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 800166c:	4b07      	ldr	r3, [pc, #28]	@ (800168c <FND_DispDataCallBack+0x208>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	425a      	negs	r2, r3
 8001672:	f003 0303 	and.w	r3, r3, #3
 8001676:	f002 0203 	and.w	r2, r2, #3
 800167a:	bf58      	it	pl
 800167c:	4253      	negpl	r3, r2
 800167e:	4618      	mov	r0, r3
 8001680:	f000 f832 	bl	80016e8 <FND_DispOn>
		break;
 8001684:	bf00      	nop
	}
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200004b0 	.word	0x200004b0
 8001690:	200004ac 	.word	0x200004ac
 8001694:	cccccccd 	.word	0xcccccccd
 8001698:	51eb851f 	.word	0x51eb851f
 800169c:	10624dd3 	.word	0x10624dd3
 80016a0:	200004ae 	.word	0x200004ae

080016a4 <FND_DispOffAll>:
	// GPIO_Write(GPIOx, Pin, RESET);
	HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, SET);
}

void FND_DispOffAll()
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
	// GPIO_Write(GPIOx, Pin, RESET);
	for (int i=0; i<4; i++) {
 80016aa:	2300      	movs	r3, #0
 80016ac:	607b      	str	r3, [r7, #4]
 80016ae:	e010      	b.n	80016d2 <FND_DispOffAll+0x2e>
		HAL_GPIO_WritePin(fndDigitCom[i].GPIOx, fndDigitCom[i].pinNum, SET);
 80016b0:	4a0c      	ldr	r2, [pc, #48]	@ (80016e4 <FND_DispOffAll+0x40>)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80016b8:	4a0a      	ldr	r2, [pc, #40]	@ (80016e4 <FND_DispOffAll+0x40>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	4413      	add	r3, r2
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	2201      	movs	r2, #1
 80016c6:	4619      	mov	r1, r3
 80016c8:	f000 fcb6 	bl	8002038 <HAL_GPIO_WritePin>
	for (int i=0; i<4; i++) {
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3301      	adds	r3, #1
 80016d0:	607b      	str	r3, [r7, #4]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2b03      	cmp	r3, #3
 80016d6:	ddeb      	ble.n	80016b0 <FND_DispOffAll+0xc>
	}
}
 80016d8:	bf00      	nop
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000004 	.word	0x20000004

080016e8 <FND_DispOn>:

void FND_DispOn(int fndPos)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	// GPIO_Write(GPIOx, Pin, SET);
	HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, RESET);
 80016f0:	4a08      	ldr	r2, [pc, #32]	@ (8001714 <FND_DispOn+0x2c>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80016f8:	4a06      	ldr	r2, [pc, #24]	@ (8001714 <FND_DispOn+0x2c>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	4413      	add	r3, r2
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	b29b      	uxth	r3, r3
 8001704:	2200      	movs	r2, #0
 8001706:	4619      	mov	r1, r3
 8001708:	f000 fc96 	bl	8002038 <HAL_GPIO_WritePin>
}
 800170c:	bf00      	nop
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20000004 	.word	0x20000004

08001718 <FND_DispDigit>:


void FND_DispDigit(uint16_t digit)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	80fb      	strh	r3, [r7, #6]
	 const uint8_t segFont[12] = {
 8001722:	4a1f      	ldr	r2, [pc, #124]	@ (80017a0 <FND_DispDigit+0x88>)
 8001724:	f107 0308 	add.w	r3, r7, #8
 8001728:	ca07      	ldmia	r2, {r0, r1, r2}
 800172a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	         0x6F,  // 9 => 01101111
	         0x80,  // 10(dp) => 1000000
	       0x00,  // 11(off) => 0000000
	      };

	for (int i=0; i<8; i++) {
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	e02c      	b.n	800178e <FND_DispDigit+0x76>
		if (!(segFont[digit] & (1<<i))) {
 8001734:	88fb      	ldrh	r3, [r7, #6]
 8001736:	3318      	adds	r3, #24
 8001738:	443b      	add	r3, r7
 800173a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800173e:	461a      	mov	r2, r3
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	fa42 f303 	asr.w	r3, r2, r3
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10e      	bne.n	800176c <FND_DispDigit+0x54>
			HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, RESET); // 0 -> on
 800174e:	4a15      	ldr	r2, [pc, #84]	@ (80017a4 <FND_DispDigit+0x8c>)
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001756:	4a13      	ldr	r2, [pc, #76]	@ (80017a4 <FND_DispDigit+0x8c>)
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	4413      	add	r3, r2
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	b29b      	uxth	r3, r3
 8001762:	2200      	movs	r2, #0
 8001764:	4619      	mov	r1, r3
 8001766:	f000 fc67 	bl	8002038 <HAL_GPIO_WritePin>
 800176a:	e00d      	b.n	8001788 <FND_DispDigit+0x70>
		}
		else {
			HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, SET); // 1 -> off
 800176c:	4a0d      	ldr	r2, [pc, #52]	@ (80017a4 <FND_DispDigit+0x8c>)
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001774:	4a0b      	ldr	r2, [pc, #44]	@ (80017a4 <FND_DispDigit+0x8c>)
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	4413      	add	r3, r2
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	b29b      	uxth	r3, r3
 8001780:	2201      	movs	r2, #1
 8001782:	4619      	mov	r1, r3
 8001784:	f000 fc58 	bl	8002038 <HAL_GPIO_WritePin>
	for (int i=0; i<8; i++) {
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	3301      	adds	r3, #1
 800178c:	617b      	str	r3, [r7, #20]
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	2b07      	cmp	r3, #7
 8001792:	ddcf      	ble.n	8001734 <FND_DispDigit+0x1c>
		}
	}
}
 8001794:	bf00      	nop
 8001796:	bf00      	nop
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	080070d4 	.word	0x080070d4
 80017a4:	20000024 	.word	0x20000024

080017a8 <LCD_Init>:

static uint8_t lcdData = 0;
static I2C_HandleTypeDef *hLcdI2C;

void LCD_Init(I2C_HandleTypeDef *hI2C)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
	hLcdI2C = hI2C;
 80017b0:	4a18      	ldr	r2, [pc, #96]	@ (8001814 <LCD_Init+0x6c>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6013      	str	r3, [r2, #0]
	HAL_Delay(50);
 80017b6:	2032      	movs	r0, #50	@ 0x32
 80017b8:	f000 f99c 	bl	8001af4 <HAL_Delay>
	LCD_cmdMode();
 80017bc:	f000 f852 	bl	8001864 <LCD_cmdMode>
	LCD_writeMode();
 80017c0:	f000 f874 	bl	80018ac <LCD_writeMode>
	LCD_sendNibbleData(0x30);
 80017c4:	2030      	movs	r0, #48	@ 0x30
 80017c6:	f000 f8a7 	bl	8001918 <LCD_sendNibbleData>
	HAL_Delay(5);
 80017ca:	2005      	movs	r0, #5
 80017cc:	f000 f992 	bl	8001af4 <HAL_Delay>
	LCD_sendNibbleData(0x30);
 80017d0:	2030      	movs	r0, #48	@ 0x30
 80017d2:	f000 f8a1 	bl	8001918 <LCD_sendNibbleData>
	HAL_Delay(1);
 80017d6:	2001      	movs	r0, #1
 80017d8:	f000 f98c 	bl	8001af4 <HAL_Delay>
	LCD_sendNibbleData(0x30);
 80017dc:	2030      	movs	r0, #48	@ 0x30
 80017de:	f000 f89b 	bl	8001918 <LCD_sendNibbleData>
	LCD_sendNibbleData(0x20);
 80017e2:	2020      	movs	r0, #32
 80017e4:	f000 f898 	bl	8001918 <LCD_sendNibbleData>
	LCD_sendData(LCD_4BIT_FUNC_SET);
 80017e8:	2028      	movs	r0, #40	@ 0x28
 80017ea:	f000 f8b9 	bl	8001960 <LCD_sendData>
	LCD_sendData(LCD_DISP_OFF);
 80017ee:	2008      	movs	r0, #8
 80017f0:	f000 f8b6 	bl	8001960 <LCD_sendData>
	LCD_sendData(LCD_DISP_CLEAR);
 80017f4:	2001      	movs	r0, #1
 80017f6:	f000 f8b3 	bl	8001960 <LCD_sendData>
	LCD_sendData(LCD_ENTRY_MODE_SET);
 80017fa:	2006      	movs	r0, #6
 80017fc:	f000 f8b0 	bl	8001960 <LCD_sendData>
	LCD_sendData(LCD_DISP_ON);
 8001800:	200c      	movs	r0, #12
 8001802:	f000 f8ad 	bl	8001960 <LCD_sendData>
	LCD_backLightOn();
 8001806:	f000 f81d 	bl	8001844 <LCD_backLightOn>
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	200004b8 	.word	0x200004b8

08001818 <LCD_sendI2C>:

void LCD_sendI2C(uint8_t data)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af02      	add	r7, sp, #8
 800181e:	4603      	mov	r3, r0
 8001820:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(hLcdI2C, LCD_DEV_ADDR<<1, &data, 1, 1000);
 8001822:	4b07      	ldr	r3, [pc, #28]	@ (8001840 <LCD_sendI2C+0x28>)
 8001824:	6818      	ldr	r0, [r3, #0]
 8001826:	1dfa      	adds	r2, r7, #7
 8001828:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	2301      	movs	r3, #1
 8001830:	214e      	movs	r1, #78	@ 0x4e
 8001832:	f000 fd5f 	bl	80022f4 <HAL_I2C_Master_Transmit>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	200004b8 	.word	0x200004b8

08001844 <LCD_backLightOn>:

void LCD_backLightOn()
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_BL);
 8001848:	4b05      	ldr	r3, [pc, #20]	@ (8001860 <LCD_backLightOn+0x1c>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	f043 0308 	orr.w	r3, r3, #8
 8001850:	b2da      	uxtb	r2, r3
 8001852:	4b03      	ldr	r3, [pc, #12]	@ (8001860 <LCD_backLightOn+0x1c>)
 8001854:	701a      	strb	r2, [r3, #0]
}
 8001856:	bf00      	nop
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	200004b4 	.word	0x200004b4

08001864 <LCD_cmdMode>:
{
	lcdData &= ~(1<<LCD_BL);
}

void LCD_cmdMode()
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RS);
 8001868:	4b06      	ldr	r3, [pc, #24]	@ (8001884 <LCD_cmdMode+0x20>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	f023 0301 	bic.w	r3, r3, #1
 8001870:	b2da      	uxtb	r2, r3
 8001872:	4b04      	ldr	r3, [pc, #16]	@ (8001884 <LCD_cmdMode+0x20>)
 8001874:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001876:	4b03      	ldr	r3, [pc, #12]	@ (8001884 <LCD_cmdMode+0x20>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff ffcc 	bl	8001818 <LCD_sendI2C>
}
 8001880:	bf00      	nop
 8001882:	bd80      	pop	{r7, pc}
 8001884:	200004b4 	.word	0x200004b4

08001888 <LCD_charMode>:

void LCD_charMode()
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_RS);
 800188c:	4b06      	ldr	r3, [pc, #24]	@ (80018a8 <LCD_charMode+0x20>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4b04      	ldr	r3, [pc, #16]	@ (80018a8 <LCD_charMode+0x20>)
 8001898:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 800189a:	4b03      	ldr	r3, [pc, #12]	@ (80018a8 <LCD_charMode+0x20>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff ffba 	bl	8001818 <LCD_sendI2C>
}
 80018a4:	bf00      	nop
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	200004b4 	.word	0x200004b4

080018ac <LCD_writeMode>:

void LCD_writeMode()
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RW);
 80018b0:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <LCD_writeMode+0x20>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	f023 0302 	bic.w	r3, r3, #2
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	4b04      	ldr	r3, [pc, #16]	@ (80018cc <LCD_writeMode+0x20>)
 80018bc:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 80018be:	4b03      	ldr	r3, [pc, #12]	@ (80018cc <LCD_writeMode+0x20>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff ffa8 	bl	8001818 <LCD_sendI2C>
}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	200004b4 	.word	0x200004b4

080018d0 <LCD_E_High>:

void LCD_E_High()
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_E);
 80018d4:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <LCD_E_High+0x20>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	f043 0304 	orr.w	r3, r3, #4
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	4b04      	ldr	r3, [pc, #16]	@ (80018f0 <LCD_E_High+0x20>)
 80018e0:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 80018e2:	4b03      	ldr	r3, [pc, #12]	@ (80018f0 <LCD_E_High+0x20>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff ff96 	bl	8001818 <LCD_sendI2C>
}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	200004b4 	.word	0x200004b4

080018f4 <LCD_E_Low>:

void LCD_E_Low()
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_E);
 80018f8:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <LCD_E_Low+0x20>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	f023 0304 	bic.w	r3, r3, #4
 8001900:	b2da      	uxtb	r2, r3
 8001902:	4b04      	ldr	r3, [pc, #16]	@ (8001914 <LCD_E_Low+0x20>)
 8001904:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001906:	4b03      	ldr	r3, [pc, #12]	@ (8001914 <LCD_E_Low+0x20>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff ff84 	bl	8001818 <LCD_sendI2C>
}
 8001910:	bf00      	nop
 8001912:	bd80      	pop	{r7, pc}
 8001914:	200004b4 	.word	0x200004b4

08001918 <LCD_sendNibbleData>:

void LCD_sendNibbleData(uint8_t data)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	71fb      	strb	r3, [r7, #7]
	LCD_E_High();
 8001922:	f7ff ffd5 	bl	80018d0 <LCD_E_High>
	lcdData = (data & 0xf0) | (lcdData & 0x0f);
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	f023 030f 	bic.w	r3, r3, #15
 800192e:	b25a      	sxtb	r2, r3
 8001930:	4b0a      	ldr	r3, [pc, #40]	@ (800195c <LCD_sendNibbleData+0x44>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	b25b      	sxtb	r3, r3
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	b25b      	sxtb	r3, r3
 800193c:	4313      	orrs	r3, r2
 800193e:	b25b      	sxtb	r3, r3
 8001940:	b2da      	uxtb	r2, r3
 8001942:	4b06      	ldr	r3, [pc, #24]	@ (800195c <LCD_sendNibbleData+0x44>)
 8001944:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001946:	4b05      	ldr	r3, [pc, #20]	@ (800195c <LCD_sendNibbleData+0x44>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff ff64 	bl	8001818 <LCD_sendI2C>
	LCD_E_Low();
 8001950:	f7ff ffd0 	bl	80018f4 <LCD_E_Low>
}
 8001954:	bf00      	nop
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	200004b4 	.word	0x200004b4

08001960 <LCD_sendData>:

void LCD_sendData(uint8_t data)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
	// High 4bit
	LCD_sendNibbleData(data);
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ffd3 	bl	8001918 <LCD_sendNibbleData>

	data = data << 4;
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	011b      	lsls	r3, r3, #4
 8001976:	71fb      	strb	r3, [r7, #7]
	// Low 4bit
	LCD_sendNibbleData(data);
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff ffcc 	bl	8001918 <LCD_sendNibbleData>
}
 8001980:	bf00      	nop
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <LCD_writeCmdData>:

void LCD_writeCmdData(uint8_t data)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	71fb      	strb	r3, [r7, #7]
	LCD_writeMode();
 8001992:	f7ff ff8b 	bl	80018ac <LCD_writeMode>
	LCD_cmdMode();
 8001996:	f7ff ff65 	bl	8001864 <LCD_cmdMode>
	LCD_sendData(data);
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ffdf 	bl	8001960 <LCD_sendData>
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <LCD_writeCharData>:

void LCD_writeCharData(uint8_t data)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	4603      	mov	r3, r0
 80019b2:	71fb      	strb	r3, [r7, #7]
	LCD_writeMode();
 80019b4:	f7ff ff7a 	bl	80018ac <LCD_writeMode>
	LCD_charMode();
 80019b8:	f7ff ff66 	bl	8001888 <LCD_charMode>
	LCD_sendData(data);
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff ffce 	bl	8001960 <LCD_sendData>
}
 80019c4:	bf00      	nop
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <LCD_writeString>:

void LCD_writeString(char *str)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
	for (int i=0; str[i]; i++) {
 80019d4:	2300      	movs	r3, #0
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	e009      	b.n	80019ee <LCD_writeString+0x22>
		LCD_writeCharData(str[i]);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	4413      	add	r3, r2
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff ffe1 	bl	80019aa <LCD_writeCharData>
	for (int i=0; str[i]; i++) {
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	3301      	adds	r3, #1
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	4413      	add	r3, r2
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1ef      	bne.n	80019da <LCD_writeString+0xe>
	}
}
 80019fa:	bf00      	nop
 80019fc:	bf00      	nop
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	460a      	mov	r2, r1
 8001a0e:	71fb      	strb	r3, [r7, #7]
 8001a10:	4613      	mov	r3, r2
 8001a12:	71bb      	strb	r3, [r7, #6]
	col %= 16;
 8001a14:	79bb      	ldrb	r3, [r7, #6]
 8001a16:	f003 030f 	and.w	r3, r3, #15
 8001a1a:	71bb      	strb	r3, [r7, #6]
	row %= 2;
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	71fb      	strb	r3, [r7, #7]

	uint8_t lcdRegAddr = (0x40 * row) +col;
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	019b      	lsls	r3, r3, #6
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	79bb      	ldrb	r3, [r7, #6]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	73fb      	strb	r3, [r7, #15]
	uint8_t command = 0x80 + lcdRegAddr;
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
 8001a32:	3b80      	subs	r3, #128	@ 0x80
 8001a34:	73bb      	strb	r3, [r7, #14]
	LCD_writeCmdData(command);
 8001a36:	7bbb      	ldrb	r3, [r7, #14]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff ffa5 	bl	8001988 <LCD_writeCmdData>
}
 8001a3e:	bf00      	nop
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <LCD_writeStringXY>:

void LCD_writeStringXY(uint8_t row, uint8_t col, char *str)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	603a      	str	r2, [r7, #0]
 8001a50:	71fb      	strb	r3, [r7, #7]
 8001a52:	460b      	mov	r3, r1
 8001a54:	71bb      	strb	r3, [r7, #6]
	LCD_gotoXY(row, col);
 8001a56:	79ba      	ldrb	r2, [r7, #6]
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff ffd1 	bl	8001a04 <LCD_gotoXY>
	LCD_writeString(str);
 8001a62:	6838      	ldr	r0, [r7, #0]
 8001a64:	f7ff ffb2 	bl	80019cc <LCD_writeString>
}
 8001a68:	bf00      	nop
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a74:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab0 <HAL_Init+0x40>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a0d      	ldr	r2, [pc, #52]	@ (8001ab0 <HAL_Init+0x40>)
 8001a7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a80:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab0 <HAL_Init+0x40>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab0 <HAL_Init+0x40>)
 8001a86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a8c:	4b08      	ldr	r3, [pc, #32]	@ (8001ab0 <HAL_Init+0x40>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a07      	ldr	r2, [pc, #28]	@ (8001ab0 <HAL_Init+0x40>)
 8001a92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a98:	2003      	movs	r0, #3
 8001a9a:	f000 f8fc 	bl	8001c96 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a9e:	200f      	movs	r0, #15
 8001aa0:	f7ff f81a 	bl	8000ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa4:	f7fe ffec 	bl	8000a80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40023c00 	.word	0x40023c00

08001ab4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab8:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <HAL_IncTick+0x20>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	461a      	mov	r2, r3
 8001abe:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <HAL_IncTick+0x24>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	4a04      	ldr	r2, [pc, #16]	@ (8001ad8 <HAL_IncTick+0x24>)
 8001ac6:	6013      	str	r3, [r2, #0]
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	20000068 	.word	0x20000068
 8001ad8:	200004bc 	.word	0x200004bc

08001adc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae0:	4b03      	ldr	r3, [pc, #12]	@ (8001af0 <HAL_GetTick+0x14>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	200004bc 	.word	0x200004bc

08001af4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001afc:	f7ff ffee 	bl	8001adc <HAL_GetTick>
 8001b00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b0c:	d005      	beq.n	8001b1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b38 <HAL_Delay+0x44>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	461a      	mov	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4413      	add	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b1a:	bf00      	nop
 8001b1c:	f7ff ffde 	bl	8001adc <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d8f7      	bhi.n	8001b1c <HAL_Delay+0x28>
  {
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	bf00      	nop
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000068 	.word	0x20000068

08001b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b80 <__NVIC_SetPriorityGrouping+0x44>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b58:	4013      	ands	r3, r2
 8001b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b6e:	4a04      	ldr	r2, [pc, #16]	@ (8001b80 <__NVIC_SetPriorityGrouping+0x44>)
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	60d3      	str	r3, [r2, #12]
}
 8001b74:	bf00      	nop
 8001b76:	3714      	adds	r7, #20
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b88:	4b04      	ldr	r3, [pc, #16]	@ (8001b9c <__NVIC_GetPriorityGrouping+0x18>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	0a1b      	lsrs	r3, r3, #8
 8001b8e:	f003 0307 	and.w	r3, r3, #7
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	db0b      	blt.n	8001bca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	f003 021f 	and.w	r2, r3, #31
 8001bb8:	4907      	ldr	r1, [pc, #28]	@ (8001bd8 <__NVIC_EnableIRQ+0x38>)
 8001bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbe:	095b      	lsrs	r3, r3, #5
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	e000e100 	.word	0xe000e100

08001bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	6039      	str	r1, [r7, #0]
 8001be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	db0a      	blt.n	8001c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	490c      	ldr	r1, [pc, #48]	@ (8001c28 <__NVIC_SetPriority+0x4c>)
 8001bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfa:	0112      	lsls	r2, r2, #4
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	440b      	add	r3, r1
 8001c00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c04:	e00a      	b.n	8001c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	4908      	ldr	r1, [pc, #32]	@ (8001c2c <__NVIC_SetPriority+0x50>)
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	f003 030f 	and.w	r3, r3, #15
 8001c12:	3b04      	subs	r3, #4
 8001c14:	0112      	lsls	r2, r2, #4
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	440b      	add	r3, r1
 8001c1a:	761a      	strb	r2, [r3, #24]
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	e000e100 	.word	0xe000e100
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b089      	sub	sp, #36	@ 0x24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	f1c3 0307 	rsb	r3, r3, #7
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	bf28      	it	cs
 8001c4e:	2304      	movcs	r3, #4
 8001c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	3304      	adds	r3, #4
 8001c56:	2b06      	cmp	r3, #6
 8001c58:	d902      	bls.n	8001c60 <NVIC_EncodePriority+0x30>
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	3b03      	subs	r3, #3
 8001c5e:	e000      	b.n	8001c62 <NVIC_EncodePriority+0x32>
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c64:	f04f 32ff 	mov.w	r2, #4294967295
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43da      	mvns	r2, r3
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	401a      	ands	r2, r3
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c78:	f04f 31ff 	mov.w	r1, #4294967295
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c82:	43d9      	mvns	r1, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c88:	4313      	orrs	r3, r2
         );
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3724      	adds	r7, #36	@ 0x24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff ff4c 	bl	8001b3c <__NVIC_SetPriorityGrouping>
}
 8001ca4:	bf00      	nop
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
 8001cb8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cbe:	f7ff ff61 	bl	8001b84 <__NVIC_GetPriorityGrouping>
 8001cc2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	68b9      	ldr	r1, [r7, #8]
 8001cc8:	6978      	ldr	r0, [r7, #20]
 8001cca:	f7ff ffb1 	bl	8001c30 <NVIC_EncodePriority>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd4:	4611      	mov	r1, r2
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff ff80 	bl	8001bdc <__NVIC_SetPriority>
}
 8001cdc:	bf00      	nop
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff ff54 	bl	8001ba0 <__NVIC_EnableIRQ>
}
 8001cf8:	bf00      	nop
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b089      	sub	sp, #36	@ 0x24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d16:	2300      	movs	r3, #0
 8001d18:	61fb      	str	r3, [r7, #28]
 8001d1a:	e159      	b.n	8001fd0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	f040 8148 	bne.w	8001fca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d005      	beq.n	8001d52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d130      	bne.n	8001db4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	2203      	movs	r2, #3
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4013      	ands	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	68da      	ldr	r2, [r3, #12]
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d88:	2201      	movs	r2, #1
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4013      	ands	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	091b      	lsrs	r3, r3, #4
 8001d9e:	f003 0201 	and.w	r2, r3, #1
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 0303 	and.w	r3, r3, #3
 8001dbc:	2b03      	cmp	r3, #3
 8001dbe:	d017      	beq.n	8001df0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	2203      	movs	r2, #3
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d123      	bne.n	8001e44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	08da      	lsrs	r2, r3, #3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3208      	adds	r2, #8
 8001e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	220f      	movs	r2, #15
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	691a      	ldr	r2, [r3, #16]
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	08da      	lsrs	r2, r3, #3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3208      	adds	r2, #8
 8001e3e:	69b9      	ldr	r1, [r7, #24]
 8001e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	2203      	movs	r2, #3
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 0203 	and.w	r2, r3, #3
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f000 80a2 	beq.w	8001fca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	4b57      	ldr	r3, [pc, #348]	@ (8001fe8 <HAL_GPIO_Init+0x2e8>)
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e8e:	4a56      	ldr	r2, [pc, #344]	@ (8001fe8 <HAL_GPIO_Init+0x2e8>)
 8001e90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e96:	4b54      	ldr	r3, [pc, #336]	@ (8001fe8 <HAL_GPIO_Init+0x2e8>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ea2:	4a52      	ldr	r2, [pc, #328]	@ (8001fec <HAL_GPIO_Init+0x2ec>)
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	089b      	lsrs	r3, r3, #2
 8001ea8:	3302      	adds	r3, #2
 8001eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	220f      	movs	r2, #15
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a49      	ldr	r2, [pc, #292]	@ (8001ff0 <HAL_GPIO_Init+0x2f0>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d019      	beq.n	8001f02 <HAL_GPIO_Init+0x202>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a48      	ldr	r2, [pc, #288]	@ (8001ff4 <HAL_GPIO_Init+0x2f4>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d013      	beq.n	8001efe <HAL_GPIO_Init+0x1fe>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a47      	ldr	r2, [pc, #284]	@ (8001ff8 <HAL_GPIO_Init+0x2f8>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d00d      	beq.n	8001efa <HAL_GPIO_Init+0x1fa>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a46      	ldr	r2, [pc, #280]	@ (8001ffc <HAL_GPIO_Init+0x2fc>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d007      	beq.n	8001ef6 <HAL_GPIO_Init+0x1f6>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a45      	ldr	r2, [pc, #276]	@ (8002000 <HAL_GPIO_Init+0x300>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d101      	bne.n	8001ef2 <HAL_GPIO_Init+0x1f2>
 8001eee:	2304      	movs	r3, #4
 8001ef0:	e008      	b.n	8001f04 <HAL_GPIO_Init+0x204>
 8001ef2:	2307      	movs	r3, #7
 8001ef4:	e006      	b.n	8001f04 <HAL_GPIO_Init+0x204>
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e004      	b.n	8001f04 <HAL_GPIO_Init+0x204>
 8001efa:	2302      	movs	r3, #2
 8001efc:	e002      	b.n	8001f04 <HAL_GPIO_Init+0x204>
 8001efe:	2301      	movs	r3, #1
 8001f00:	e000      	b.n	8001f04 <HAL_GPIO_Init+0x204>
 8001f02:	2300      	movs	r3, #0
 8001f04:	69fa      	ldr	r2, [r7, #28]
 8001f06:	f002 0203 	and.w	r2, r2, #3
 8001f0a:	0092      	lsls	r2, r2, #2
 8001f0c:	4093      	lsls	r3, r2
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f14:	4935      	ldr	r1, [pc, #212]	@ (8001fec <HAL_GPIO_Init+0x2ec>)
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	089b      	lsrs	r3, r3, #2
 8001f1a:	3302      	adds	r3, #2
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f22:	4b38      	ldr	r3, [pc, #224]	@ (8002004 <HAL_GPIO_Init+0x304>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f46:	4a2f      	ldr	r2, [pc, #188]	@ (8002004 <HAL_GPIO_Init+0x304>)
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f4c:	4b2d      	ldr	r3, [pc, #180]	@ (8002004 <HAL_GPIO_Init+0x304>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	43db      	mvns	r3, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f70:	4a24      	ldr	r2, [pc, #144]	@ (8002004 <HAL_GPIO_Init+0x304>)
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f76:	4b23      	ldr	r3, [pc, #140]	@ (8002004 <HAL_GPIO_Init+0x304>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f9a:	4a1a      	ldr	r2, [pc, #104]	@ (8002004 <HAL_GPIO_Init+0x304>)
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fa0:	4b18      	ldr	r3, [pc, #96]	@ (8002004 <HAL_GPIO_Init+0x304>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4013      	ands	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fc4:	4a0f      	ldr	r2, [pc, #60]	@ (8002004 <HAL_GPIO_Init+0x304>)
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	61fb      	str	r3, [r7, #28]
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	2b0f      	cmp	r3, #15
 8001fd4:	f67f aea2 	bls.w	8001d1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fd8:	bf00      	nop
 8001fda:	bf00      	nop
 8001fdc:	3724      	adds	r7, #36	@ 0x24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40013800 	.word	0x40013800
 8001ff0:	40020000 	.word	0x40020000
 8001ff4:	40020400 	.word	0x40020400
 8001ff8:	40020800 	.word	0x40020800
 8001ffc:	40020c00 	.word	0x40020c00
 8002000:	40021000 	.word	0x40021000
 8002004:	40013c00 	.word	0x40013c00

08002008 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	460b      	mov	r3, r1
 8002012:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	691a      	ldr	r2, [r3, #16]
 8002018:	887b      	ldrh	r3, [r7, #2]
 800201a:	4013      	ands	r3, r2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d002      	beq.n	8002026 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002020:	2301      	movs	r3, #1
 8002022:	73fb      	strb	r3, [r7, #15]
 8002024:	e001      	b.n	800202a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002026:	2300      	movs	r3, #0
 8002028:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800202a:	7bfb      	ldrb	r3, [r7, #15]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	807b      	strh	r3, [r7, #2]
 8002044:	4613      	mov	r3, r2
 8002046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002048:	787b      	ldrb	r3, [r7, #1]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800204e:	887a      	ldrh	r2, [r7, #2]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002054:	e003      	b.n	800205e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002056:	887b      	ldrh	r3, [r7, #2]
 8002058:	041a      	lsls	r2, r3, #16
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	619a      	str	r2, [r3, #24]
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
	...

0800206c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e12b      	b.n	80022d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d106      	bne.n	8002098 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7fe fc12 	bl	80008bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2224      	movs	r2, #36	@ 0x24
 800209c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 0201 	bic.w	r2, r2, #1
 80020ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020d0:	f001 f8da 	bl	8003288 <HAL_RCC_GetPCLK1Freq>
 80020d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	4a81      	ldr	r2, [pc, #516]	@ (80022e0 <HAL_I2C_Init+0x274>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d807      	bhi.n	80020f0 <HAL_I2C_Init+0x84>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4a80      	ldr	r2, [pc, #512]	@ (80022e4 <HAL_I2C_Init+0x278>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	bf94      	ite	ls
 80020e8:	2301      	movls	r3, #1
 80020ea:	2300      	movhi	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	e006      	b.n	80020fe <HAL_I2C_Init+0x92>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4a7d      	ldr	r2, [pc, #500]	@ (80022e8 <HAL_I2C_Init+0x27c>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	bf94      	ite	ls
 80020f8:	2301      	movls	r3, #1
 80020fa:	2300      	movhi	r3, #0
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e0e7      	b.n	80022d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	4a78      	ldr	r2, [pc, #480]	@ (80022ec <HAL_I2C_Init+0x280>)
 800210a:	fba2 2303 	umull	r2, r3, r2, r3
 800210e:	0c9b      	lsrs	r3, r3, #18
 8002110:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68ba      	ldr	r2, [r7, #8]
 8002122:	430a      	orrs	r2, r1
 8002124:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	4a6a      	ldr	r2, [pc, #424]	@ (80022e0 <HAL_I2C_Init+0x274>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d802      	bhi.n	8002140 <HAL_I2C_Init+0xd4>
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	3301      	adds	r3, #1
 800213e:	e009      	b.n	8002154 <HAL_I2C_Init+0xe8>
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002146:	fb02 f303 	mul.w	r3, r2, r3
 800214a:	4a69      	ldr	r2, [pc, #420]	@ (80022f0 <HAL_I2C_Init+0x284>)
 800214c:	fba2 2303 	umull	r2, r3, r2, r3
 8002150:	099b      	lsrs	r3, r3, #6
 8002152:	3301      	adds	r3, #1
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6812      	ldr	r2, [r2, #0]
 8002158:	430b      	orrs	r3, r1
 800215a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002166:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	495c      	ldr	r1, [pc, #368]	@ (80022e0 <HAL_I2C_Init+0x274>)
 8002170:	428b      	cmp	r3, r1
 8002172:	d819      	bhi.n	80021a8 <HAL_I2C_Init+0x13c>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	1e59      	subs	r1, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002182:	1c59      	adds	r1, r3, #1
 8002184:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002188:	400b      	ands	r3, r1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00a      	beq.n	80021a4 <HAL_I2C_Init+0x138>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	1e59      	subs	r1, r3, #1
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	fbb1 f3f3 	udiv	r3, r1, r3
 800219c:	3301      	adds	r3, #1
 800219e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021a2:	e051      	b.n	8002248 <HAL_I2C_Init+0x1dc>
 80021a4:	2304      	movs	r3, #4
 80021a6:	e04f      	b.n	8002248 <HAL_I2C_Init+0x1dc>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d111      	bne.n	80021d4 <HAL_I2C_Init+0x168>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	1e58      	subs	r0, r3, #1
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6859      	ldr	r1, [r3, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	440b      	add	r3, r1
 80021be:	fbb0 f3f3 	udiv	r3, r0, r3
 80021c2:	3301      	adds	r3, #1
 80021c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	bf0c      	ite	eq
 80021cc:	2301      	moveq	r3, #1
 80021ce:	2300      	movne	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	e012      	b.n	80021fa <HAL_I2C_Init+0x18e>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	1e58      	subs	r0, r3, #1
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6859      	ldr	r1, [r3, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	440b      	add	r3, r1
 80021e2:	0099      	lsls	r1, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ea:	3301      	adds	r3, #1
 80021ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	bf0c      	ite	eq
 80021f4:	2301      	moveq	r3, #1
 80021f6:	2300      	movne	r3, #0
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <HAL_I2C_Init+0x196>
 80021fe:	2301      	movs	r3, #1
 8002200:	e022      	b.n	8002248 <HAL_I2C_Init+0x1dc>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d10e      	bne.n	8002228 <HAL_I2C_Init+0x1bc>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	1e58      	subs	r0, r3, #1
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6859      	ldr	r1, [r3, #4]
 8002212:	460b      	mov	r3, r1
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	440b      	add	r3, r1
 8002218:	fbb0 f3f3 	udiv	r3, r0, r3
 800221c:	3301      	adds	r3, #1
 800221e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002222:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002226:	e00f      	b.n	8002248 <HAL_I2C_Init+0x1dc>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	1e58      	subs	r0, r3, #1
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6859      	ldr	r1, [r3, #4]
 8002230:	460b      	mov	r3, r1
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	0099      	lsls	r1, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	fbb0 f3f3 	udiv	r3, r0, r3
 800223e:	3301      	adds	r3, #1
 8002240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002244:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	6809      	ldr	r1, [r1, #0]
 800224c:	4313      	orrs	r3, r2
 800224e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69da      	ldr	r2, [r3, #28]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	430a      	orrs	r2, r1
 800226a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002276:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6911      	ldr	r1, [r2, #16]
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	68d2      	ldr	r2, [r2, #12]
 8002282:	4311      	orrs	r1, r2
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6812      	ldr	r2, [r2, #0]
 8002288:	430b      	orrs	r3, r1
 800228a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	695a      	ldr	r2, [r3, #20]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0201 	orr.w	r2, r2, #1
 80022b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2220      	movs	r2, #32
 80022c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	000186a0 	.word	0x000186a0
 80022e4:	001e847f 	.word	0x001e847f
 80022e8:	003d08ff 	.word	0x003d08ff
 80022ec:	431bde83 	.word	0x431bde83
 80022f0:	10624dd3 	.word	0x10624dd3

080022f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b088      	sub	sp, #32
 80022f8:	af02      	add	r7, sp, #8
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	607a      	str	r2, [r7, #4]
 80022fe:	461a      	mov	r2, r3
 8002300:	460b      	mov	r3, r1
 8002302:	817b      	strh	r3, [r7, #10]
 8002304:	4613      	mov	r3, r2
 8002306:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002308:	f7ff fbe8 	bl	8001adc <HAL_GetTick>
 800230c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b20      	cmp	r3, #32
 8002318:	f040 80e0 	bne.w	80024dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	2319      	movs	r3, #25
 8002322:	2201      	movs	r2, #1
 8002324:	4970      	ldr	r1, [pc, #448]	@ (80024e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f000 f964 	bl	80025f4 <I2C_WaitOnFlagUntilTimeout>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002332:	2302      	movs	r3, #2
 8002334:	e0d3      	b.n	80024de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800233c:	2b01      	cmp	r3, #1
 800233e:	d101      	bne.n	8002344 <HAL_I2C_Master_Transmit+0x50>
 8002340:	2302      	movs	r3, #2
 8002342:	e0cc      	b.n	80024de <HAL_I2C_Master_Transmit+0x1ea>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b01      	cmp	r3, #1
 8002358:	d007      	beq.n	800236a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f042 0201 	orr.w	r2, r2, #1
 8002368:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002378:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2221      	movs	r2, #33	@ 0x21
 800237e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2210      	movs	r2, #16
 8002386:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	893a      	ldrh	r2, [r7, #8]
 800239a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	4a50      	ldr	r2, [pc, #320]	@ (80024ec <HAL_I2C_Master_Transmit+0x1f8>)
 80023aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80023ac:	8979      	ldrh	r1, [r7, #10]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	6a3a      	ldr	r2, [r7, #32]
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f000 f89c 	bl	80024f0 <I2C_MasterRequestWrite>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e08d      	b.n	80024de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023c2:	2300      	movs	r3, #0
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	613b      	str	r3, [r7, #16]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	613b      	str	r3, [r7, #16]
 80023d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80023d8:	e066      	b.n	80024a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	6a39      	ldr	r1, [r7, #32]
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f000 fa22 	bl	8002828 <I2C_WaitOnTXEFlagUntilTimeout>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00d      	beq.n	8002406 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	d107      	bne.n	8002402 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002400:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e06b      	b.n	80024de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240a:	781a      	ldrb	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002420:	b29b      	uxth	r3, r3
 8002422:	3b01      	subs	r3, #1
 8002424:	b29a      	uxth	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800242e:	3b01      	subs	r3, #1
 8002430:	b29a      	uxth	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	695b      	ldr	r3, [r3, #20]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b04      	cmp	r3, #4
 8002442:	d11b      	bne.n	800247c <HAL_I2C_Master_Transmit+0x188>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002448:	2b00      	cmp	r3, #0
 800244a:	d017      	beq.n	800247c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002450:	781a      	ldrb	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245c:	1c5a      	adds	r2, r3, #1
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002466:	b29b      	uxth	r3, r3
 8002468:	3b01      	subs	r3, #1
 800246a:	b29a      	uxth	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002474:	3b01      	subs	r3, #1
 8002476:	b29a      	uxth	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	6a39      	ldr	r1, [r7, #32]
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f000 fa19 	bl	80028b8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00d      	beq.n	80024a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002490:	2b04      	cmp	r3, #4
 8002492:	d107      	bne.n	80024a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e01a      	b.n	80024de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d194      	bne.n	80023da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2220      	movs	r2, #32
 80024c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80024d8:	2300      	movs	r3, #0
 80024da:	e000      	b.n	80024de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80024dc:	2302      	movs	r3, #2
  }
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	00100002 	.word	0x00100002
 80024ec:	ffff0000 	.word	0xffff0000

080024f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b088      	sub	sp, #32
 80024f4:	af02      	add	r7, sp, #8
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	607a      	str	r2, [r7, #4]
 80024fa:	603b      	str	r3, [r7, #0]
 80024fc:	460b      	mov	r3, r1
 80024fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002504:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	2b08      	cmp	r3, #8
 800250a:	d006      	beq.n	800251a <I2C_MasterRequestWrite+0x2a>
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d003      	beq.n	800251a <I2C_MasterRequestWrite+0x2a>
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002518:	d108      	bne.n	800252c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	e00b      	b.n	8002544 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002530:	2b12      	cmp	r3, #18
 8002532:	d107      	bne.n	8002544 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002542:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f000 f84f 	bl	80025f4 <I2C_WaitOnFlagUntilTimeout>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00d      	beq.n	8002578 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002566:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800256a:	d103      	bne.n	8002574 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002572:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e035      	b.n	80025e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002580:	d108      	bne.n	8002594 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002582:	897b      	ldrh	r3, [r7, #10]
 8002584:	b2db      	uxtb	r3, r3
 8002586:	461a      	mov	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002590:	611a      	str	r2, [r3, #16]
 8002592:	e01b      	b.n	80025cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002594:	897b      	ldrh	r3, [r7, #10]
 8002596:	11db      	asrs	r3, r3, #7
 8002598:	b2db      	uxtb	r3, r3
 800259a:	f003 0306 	and.w	r3, r3, #6
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	f063 030f 	orn	r3, r3, #15
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	490e      	ldr	r1, [pc, #56]	@ (80025ec <I2C_MasterRequestWrite+0xfc>)
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f000 f898 	bl	80026e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e010      	b.n	80025e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80025c2:	897b      	ldrh	r3, [r7, #10]
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	4907      	ldr	r1, [pc, #28]	@ (80025f0 <I2C_MasterRequestWrite+0x100>)
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f000 f888 	bl	80026e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e000      	b.n	80025e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	00010008 	.word	0x00010008
 80025f0:	00010002 	.word	0x00010002

080025f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	603b      	str	r3, [r7, #0]
 8002600:	4613      	mov	r3, r2
 8002602:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002604:	e048      	b.n	8002698 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260c:	d044      	beq.n	8002698 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800260e:	f7ff fa65 	bl	8001adc <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d302      	bcc.n	8002624 <I2C_WaitOnFlagUntilTimeout+0x30>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d139      	bne.n	8002698 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	0c1b      	lsrs	r3, r3, #16
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b01      	cmp	r3, #1
 800262c:	d10d      	bne.n	800264a <I2C_WaitOnFlagUntilTimeout+0x56>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	43da      	mvns	r2, r3
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	4013      	ands	r3, r2
 800263a:	b29b      	uxth	r3, r3
 800263c:	2b00      	cmp	r3, #0
 800263e:	bf0c      	ite	eq
 8002640:	2301      	moveq	r3, #1
 8002642:	2300      	movne	r3, #0
 8002644:	b2db      	uxtb	r3, r3
 8002646:	461a      	mov	r2, r3
 8002648:	e00c      	b.n	8002664 <I2C_WaitOnFlagUntilTimeout+0x70>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	43da      	mvns	r2, r3
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	4013      	ands	r3, r2
 8002656:	b29b      	uxth	r3, r3
 8002658:	2b00      	cmp	r3, #0
 800265a:	bf0c      	ite	eq
 800265c:	2301      	moveq	r3, #1
 800265e:	2300      	movne	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	461a      	mov	r2, r3
 8002664:	79fb      	ldrb	r3, [r7, #7]
 8002666:	429a      	cmp	r2, r3
 8002668:	d116      	bne.n	8002698 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2220      	movs	r2, #32
 8002674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002684:	f043 0220 	orr.w	r2, r3, #32
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e023      	b.n	80026e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	0c1b      	lsrs	r3, r3, #16
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d10d      	bne.n	80026be <I2C_WaitOnFlagUntilTimeout+0xca>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	43da      	mvns	r2, r3
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	4013      	ands	r3, r2
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	bf0c      	ite	eq
 80026b4:	2301      	moveq	r3, #1
 80026b6:	2300      	movne	r3, #0
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	461a      	mov	r2, r3
 80026bc:	e00c      	b.n	80026d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	43da      	mvns	r2, r3
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	4013      	ands	r3, r2
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	bf0c      	ite	eq
 80026d0:	2301      	moveq	r3, #1
 80026d2:	2300      	movne	r3, #0
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	461a      	mov	r2, r3
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d093      	beq.n	8002606 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
 80026f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026f6:	e071      	b.n	80027dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002702:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002706:	d123      	bne.n	8002750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002716:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002720:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2220      	movs	r2, #32
 800272c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273c:	f043 0204 	orr.w	r2, r3, #4
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e067      	b.n	8002820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002756:	d041      	beq.n	80027dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002758:	f7ff f9c0 	bl	8001adc <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	429a      	cmp	r2, r3
 8002766:	d302      	bcc.n	800276e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d136      	bne.n	80027dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	0c1b      	lsrs	r3, r3, #16
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b01      	cmp	r3, #1
 8002776:	d10c      	bne.n	8002792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	43da      	mvns	r2, r3
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	4013      	ands	r3, r2
 8002784:	b29b      	uxth	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	bf14      	ite	ne
 800278a:	2301      	movne	r3, #1
 800278c:	2300      	moveq	r3, #0
 800278e:	b2db      	uxtb	r3, r3
 8002790:	e00b      	b.n	80027aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	43da      	mvns	r2, r3
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	4013      	ands	r3, r2
 800279e:	b29b      	uxth	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	bf14      	ite	ne
 80027a4:	2301      	movne	r3, #1
 80027a6:	2300      	moveq	r3, #0
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d016      	beq.n	80027dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2220      	movs	r2, #32
 80027b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c8:	f043 0220 	orr.w	r2, r3, #32
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e021      	b.n	8002820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	0c1b      	lsrs	r3, r3, #16
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d10c      	bne.n	8002800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	43da      	mvns	r2, r3
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	4013      	ands	r3, r2
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	bf14      	ite	ne
 80027f8:	2301      	movne	r3, #1
 80027fa:	2300      	moveq	r3, #0
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	e00b      	b.n	8002818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	43da      	mvns	r2, r3
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	4013      	ands	r3, r2
 800280c:	b29b      	uxth	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	bf14      	ite	ne
 8002812:	2301      	movne	r3, #1
 8002814:	2300      	moveq	r3, #0
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	f47f af6d 	bne.w	80026f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002834:	e034      	b.n	80028a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f000 f886 	bl	8002948 <I2C_IsAcknowledgeFailed>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e034      	b.n	80028b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800284c:	d028      	beq.n	80028a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800284e:	f7ff f945 	bl	8001adc <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	68ba      	ldr	r2, [r7, #8]
 800285a:	429a      	cmp	r2, r3
 800285c:	d302      	bcc.n	8002864 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d11d      	bne.n	80028a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800286e:	2b80      	cmp	r3, #128	@ 0x80
 8002870:	d016      	beq.n	80028a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2220      	movs	r2, #32
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288c:	f043 0220 	orr.w	r2, r3, #32
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e007      	b.n	80028b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028aa:	2b80      	cmp	r3, #128	@ 0x80
 80028ac:	d1c3      	bne.n	8002836 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028c4:	e034      	b.n	8002930 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f000 f83e 	bl	8002948 <I2C_IsAcknowledgeFailed>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e034      	b.n	8002940 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028dc:	d028      	beq.n	8002930 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028de:	f7ff f8fd 	bl	8001adc <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	68ba      	ldr	r2, [r7, #8]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d302      	bcc.n	80028f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d11d      	bne.n	8002930 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	f003 0304 	and.w	r3, r3, #4
 80028fe:	2b04      	cmp	r3, #4
 8002900:	d016      	beq.n	8002930 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2220      	movs	r2, #32
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291c:	f043 0220 	orr.w	r2, r3, #32
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e007      	b.n	8002940 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	f003 0304 	and.w	r3, r3, #4
 800293a:	2b04      	cmp	r3, #4
 800293c:	d1c3      	bne.n	80028c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800295a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800295e:	d11b      	bne.n	8002998 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002968:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2220      	movs	r2, #32
 8002974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002984:	f043 0204 	orr.w	r2, r3, #4
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e000      	b.n	800299a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
	...

080029a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e267      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d075      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80029c6:	4b88      	ldr	r3, [pc, #544]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f003 030c 	and.w	r3, r3, #12
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d00c      	beq.n	80029ec <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029d2:	4b85      	ldr	r3, [pc, #532]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80029da:	2b08      	cmp	r3, #8
 80029dc:	d112      	bne.n	8002a04 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029de:	4b82      	ldr	r3, [pc, #520]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029ea:	d10b      	bne.n	8002a04 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ec:	4b7e      	ldr	r3, [pc, #504]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d05b      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x108>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d157      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e242      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a0c:	d106      	bne.n	8002a1c <HAL_RCC_OscConfig+0x74>
 8002a0e:	4b76      	ldr	r3, [pc, #472]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a75      	ldr	r2, [pc, #468]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	e01d      	b.n	8002a58 <HAL_RCC_OscConfig+0xb0>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a24:	d10c      	bne.n	8002a40 <HAL_RCC_OscConfig+0x98>
 8002a26:	4b70      	ldr	r3, [pc, #448]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a6f      	ldr	r2, [pc, #444]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	4b6d      	ldr	r3, [pc, #436]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a6c      	ldr	r2, [pc, #432]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a3c:	6013      	str	r3, [r2, #0]
 8002a3e:	e00b      	b.n	8002a58 <HAL_RCC_OscConfig+0xb0>
 8002a40:	4b69      	ldr	r3, [pc, #420]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a68      	ldr	r2, [pc, #416]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a4a:	6013      	str	r3, [r2, #0]
 8002a4c:	4b66      	ldr	r3, [pc, #408]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a65      	ldr	r2, [pc, #404]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d013      	beq.n	8002a88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a60:	f7ff f83c 	bl	8001adc <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a68:	f7ff f838 	bl	8001adc <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b64      	cmp	r3, #100	@ 0x64
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e207      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7a:	4b5b      	ldr	r3, [pc, #364]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f0      	beq.n	8002a68 <HAL_RCC_OscConfig+0xc0>
 8002a86:	e014      	b.n	8002ab2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a88:	f7ff f828 	bl	8001adc <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a90:	f7ff f824 	bl	8001adc <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b64      	cmp	r3, #100	@ 0x64
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e1f3      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aa2:	4b51      	ldr	r3, [pc, #324]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f0      	bne.n	8002a90 <HAL_RCC_OscConfig+0xe8>
 8002aae:	e000      	b.n	8002ab2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d063      	beq.n	8002b86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002abe:	4b4a      	ldr	r3, [pc, #296]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 030c 	and.w	r3, r3, #12
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00b      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aca:	4b47      	ldr	r3, [pc, #284]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	d11c      	bne.n	8002b10 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ad6:	4b44      	ldr	r3, [pc, #272]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d116      	bne.n	8002b10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ae2:	4b41      	ldr	r3, [pc, #260]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d005      	beq.n	8002afa <HAL_RCC_OscConfig+0x152>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d001      	beq.n	8002afa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e1c7      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002afa:	4b3b      	ldr	r3, [pc, #236]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	4937      	ldr	r1, [pc, #220]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0e:	e03a      	b.n	8002b86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d020      	beq.n	8002b5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b18:	4b34      	ldr	r3, [pc, #208]	@ (8002bec <HAL_RCC_OscConfig+0x244>)
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1e:	f7fe ffdd 	bl	8001adc <HAL_GetTick>
 8002b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b24:	e008      	b.n	8002b38 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b26:	f7fe ffd9 	bl	8001adc <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e1a8      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b38:	4b2b      	ldr	r3, [pc, #172]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d0f0      	beq.n	8002b26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b44:	4b28      	ldr	r3, [pc, #160]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	4925      	ldr	r1, [pc, #148]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	600b      	str	r3, [r1, #0]
 8002b58:	e015      	b.n	8002b86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b5a:	4b24      	ldr	r3, [pc, #144]	@ (8002bec <HAL_RCC_OscConfig+0x244>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b60:	f7fe ffbc 	bl	8001adc <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b68:	f7fe ffb8 	bl	8001adc <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e187      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f0      	bne.n	8002b68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0308 	and.w	r3, r3, #8
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d036      	beq.n	8002c00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d016      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b9a:	4b15      	ldr	r3, [pc, #84]	@ (8002bf0 <HAL_RCC_OscConfig+0x248>)
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba0:	f7fe ff9c 	bl	8001adc <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ba8:	f7fe ff98 	bl	8001adc <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e167      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bba:	4b0b      	ldr	r3, [pc, #44]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002bbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0f0      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x200>
 8002bc6:	e01b      	b.n	8002c00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bc8:	4b09      	ldr	r3, [pc, #36]	@ (8002bf0 <HAL_RCC_OscConfig+0x248>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bce:	f7fe ff85 	bl	8001adc <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd4:	e00e      	b.n	8002bf4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bd6:	f7fe ff81 	bl	8001adc <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d907      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e150      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
 8002be8:	40023800 	.word	0x40023800
 8002bec:	42470000 	.word	0x42470000
 8002bf0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf4:	4b88      	ldr	r3, [pc, #544]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002bf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1ea      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 8097 	beq.w	8002d3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c12:	4b81      	ldr	r3, [pc, #516]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10f      	bne.n	8002c3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60bb      	str	r3, [r7, #8]
 8002c22:	4b7d      	ldr	r3, [pc, #500]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c26:	4a7c      	ldr	r2, [pc, #496]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002c28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c2e:	4b7a      	ldr	r3, [pc, #488]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c36:	60bb      	str	r3, [r7, #8]
 8002c38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3e:	4b77      	ldr	r3, [pc, #476]	@ (8002e1c <HAL_RCC_OscConfig+0x474>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d118      	bne.n	8002c7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c4a:	4b74      	ldr	r3, [pc, #464]	@ (8002e1c <HAL_RCC_OscConfig+0x474>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a73      	ldr	r2, [pc, #460]	@ (8002e1c <HAL_RCC_OscConfig+0x474>)
 8002c50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c56:	f7fe ff41 	bl	8001adc <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c5e:	f7fe ff3d 	bl	8001adc <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e10c      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c70:	4b6a      	ldr	r3, [pc, #424]	@ (8002e1c <HAL_RCC_OscConfig+0x474>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0f0      	beq.n	8002c5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d106      	bne.n	8002c92 <HAL_RCC_OscConfig+0x2ea>
 8002c84:	4b64      	ldr	r3, [pc, #400]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c88:	4a63      	ldr	r2, [pc, #396]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002c8a:	f043 0301 	orr.w	r3, r3, #1
 8002c8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c90:	e01c      	b.n	8002ccc <HAL_RCC_OscConfig+0x324>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	2b05      	cmp	r3, #5
 8002c98:	d10c      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x30c>
 8002c9a:	4b5f      	ldr	r3, [pc, #380]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c9e:	4a5e      	ldr	r2, [pc, #376]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002ca0:	f043 0304 	orr.w	r3, r3, #4
 8002ca4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ca6:	4b5c      	ldr	r3, [pc, #368]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002caa:	4a5b      	ldr	r2, [pc, #364]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cb2:	e00b      	b.n	8002ccc <HAL_RCC_OscConfig+0x324>
 8002cb4:	4b58      	ldr	r3, [pc, #352]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb8:	4a57      	ldr	r2, [pc, #348]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002cba:	f023 0301 	bic.w	r3, r3, #1
 8002cbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cc0:	4b55      	ldr	r3, [pc, #340]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc4:	4a54      	ldr	r2, [pc, #336]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002cc6:	f023 0304 	bic.w	r3, r3, #4
 8002cca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d015      	beq.n	8002d00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd4:	f7fe ff02 	bl	8001adc <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cda:	e00a      	b.n	8002cf2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cdc:	f7fe fefe 	bl	8001adc <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e0cb      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf2:	4b49      	ldr	r3, [pc, #292]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0ee      	beq.n	8002cdc <HAL_RCC_OscConfig+0x334>
 8002cfe:	e014      	b.n	8002d2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d00:	f7fe feec 	bl	8001adc <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d06:	e00a      	b.n	8002d1e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d08:	f7fe fee8 	bl	8001adc <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e0b5      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d1e:	4b3e      	ldr	r3, [pc, #248]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1ee      	bne.n	8002d08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d2a:	7dfb      	ldrb	r3, [r7, #23]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d105      	bne.n	8002d3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d30:	4b39      	ldr	r3, [pc, #228]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d34:	4a38      	ldr	r2, [pc, #224]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002d36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d3a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 80a1 	beq.w	8002e88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d46:	4b34      	ldr	r3, [pc, #208]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 030c 	and.w	r3, r3, #12
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d05c      	beq.n	8002e0c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d141      	bne.n	8002dde <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d5a:	4b31      	ldr	r3, [pc, #196]	@ (8002e20 <HAL_RCC_OscConfig+0x478>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d60:	f7fe febc 	bl	8001adc <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d68:	f7fe feb8 	bl	8001adc <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e087      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d7a:	4b27      	ldr	r3, [pc, #156]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f0      	bne.n	8002d68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69da      	ldr	r2, [r3, #28]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d94:	019b      	lsls	r3, r3, #6
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d9c:	085b      	lsrs	r3, r3, #1
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	041b      	lsls	r3, r3, #16
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da8:	061b      	lsls	r3, r3, #24
 8002daa:	491b      	ldr	r1, [pc, #108]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002db0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e20 <HAL_RCC_OscConfig+0x478>)
 8002db2:	2201      	movs	r2, #1
 8002db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db6:	f7fe fe91 	bl	8001adc <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dbe:	f7fe fe8d 	bl	8001adc <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e05c      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd0:	4b11      	ldr	r3, [pc, #68]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0f0      	beq.n	8002dbe <HAL_RCC_OscConfig+0x416>
 8002ddc:	e054      	b.n	8002e88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dde:	4b10      	ldr	r3, [pc, #64]	@ (8002e20 <HAL_RCC_OscConfig+0x478>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de4:	f7fe fe7a 	bl	8001adc <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dec:	f7fe fe76 	bl	8001adc <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e045      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dfe:	4b06      	ldr	r3, [pc, #24]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f0      	bne.n	8002dec <HAL_RCC_OscConfig+0x444>
 8002e0a:	e03d      	b.n	8002e88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d107      	bne.n	8002e24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e038      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	40007000 	.word	0x40007000
 8002e20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e24:	4b1b      	ldr	r3, [pc, #108]	@ (8002e94 <HAL_RCC_OscConfig+0x4ec>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d028      	beq.n	8002e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d121      	bne.n	8002e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d11a      	bne.n	8002e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e54:	4013      	ands	r3, r2
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d111      	bne.n	8002e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e6a:	085b      	lsrs	r3, r3, #1
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d107      	bne.n	8002e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d001      	beq.n	8002e88 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e000      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40023800 	.word	0x40023800

08002e98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e0cc      	b.n	8003046 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002eac:	4b68      	ldr	r3, [pc, #416]	@ (8003050 <HAL_RCC_ClockConfig+0x1b8>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d90c      	bls.n	8002ed4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eba:	4b65      	ldr	r3, [pc, #404]	@ (8003050 <HAL_RCC_ClockConfig+0x1b8>)
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec2:	4b63      	ldr	r3, [pc, #396]	@ (8003050 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d001      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e0b8      	b.n	8003046 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d020      	beq.n	8002f22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d005      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002eec:	4b59      	ldr	r3, [pc, #356]	@ (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	4a58      	ldr	r2, [pc, #352]	@ (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ef6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0308 	and.w	r3, r3, #8
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d005      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f04:	4b53      	ldr	r3, [pc, #332]	@ (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	4a52      	ldr	r2, [pc, #328]	@ (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f10:	4b50      	ldr	r3, [pc, #320]	@ (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	494d      	ldr	r1, [pc, #308]	@ (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d044      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d107      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f36:	4b47      	ldr	r3, [pc, #284]	@ (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d119      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e07f      	b.n	8003046 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d003      	beq.n	8002f56 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f52:	2b03      	cmp	r3, #3
 8002f54:	d107      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f56:	4b3f      	ldr	r3, [pc, #252]	@ (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d109      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e06f      	b.n	8003046 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f66:	4b3b      	ldr	r3, [pc, #236]	@ (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e067      	b.n	8003046 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f76:	4b37      	ldr	r3, [pc, #220]	@ (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f023 0203 	bic.w	r2, r3, #3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	4934      	ldr	r1, [pc, #208]	@ (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f88:	f7fe fda8 	bl	8001adc <HAL_GetTick>
 8002f8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8e:	e00a      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f90:	f7fe fda4 	bl	8001adc <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e04f      	b.n	8003046 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa6:	4b2b      	ldr	r3, [pc, #172]	@ (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 020c 	and.w	r2, r3, #12
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d1eb      	bne.n	8002f90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb8:	4b25      	ldr	r3, [pc, #148]	@ (8003050 <HAL_RCC_ClockConfig+0x1b8>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d20c      	bcs.n	8002fe0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc6:	4b22      	ldr	r3, [pc, #136]	@ (8003050 <HAL_RCC_ClockConfig+0x1b8>)
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fce:	4b20      	ldr	r3, [pc, #128]	@ (8003050 <HAL_RCC_ClockConfig+0x1b8>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d001      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e032      	b.n	8003046 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d008      	beq.n	8002ffe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fec:	4b19      	ldr	r3, [pc, #100]	@ (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	4916      	ldr	r1, [pc, #88]	@ (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	2b00      	cmp	r3, #0
 8003008:	d009      	beq.n	800301e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800300a:	4b12      	ldr	r3, [pc, #72]	@ (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	490e      	ldr	r1, [pc, #56]	@ (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 800301a:	4313      	orrs	r3, r2
 800301c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800301e:	f000 f821 	bl	8003064 <HAL_RCC_GetSysClockFreq>
 8003022:	4602      	mov	r2, r0
 8003024:	4b0b      	ldr	r3, [pc, #44]	@ (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	091b      	lsrs	r3, r3, #4
 800302a:	f003 030f 	and.w	r3, r3, #15
 800302e:	490a      	ldr	r1, [pc, #40]	@ (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8003030:	5ccb      	ldrb	r3, [r1, r3]
 8003032:	fa22 f303 	lsr.w	r3, r2, r3
 8003036:	4a09      	ldr	r2, [pc, #36]	@ (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8003038:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800303a:	4b09      	ldr	r3, [pc, #36]	@ (8003060 <HAL_RCC_ClockConfig+0x1c8>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f7fd fd4a 	bl	8000ad8 <HAL_InitTick>

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40023c00 	.word	0x40023c00
 8003054:	40023800 	.word	0x40023800
 8003058:	080070e8 	.word	0x080070e8
 800305c:	20000000 	.word	0x20000000
 8003060:	20000064 	.word	0x20000064

08003064 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003068:	b094      	sub	sp, #80	@ 0x50
 800306a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800306c:	2300      	movs	r3, #0
 800306e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003070:	2300      	movs	r3, #0
 8003072:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003074:	2300      	movs	r3, #0
 8003076:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800307c:	4b79      	ldr	r3, [pc, #484]	@ (8003264 <HAL_RCC_GetSysClockFreq+0x200>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 030c 	and.w	r3, r3, #12
 8003084:	2b08      	cmp	r3, #8
 8003086:	d00d      	beq.n	80030a4 <HAL_RCC_GetSysClockFreq+0x40>
 8003088:	2b08      	cmp	r3, #8
 800308a:	f200 80e1 	bhi.w	8003250 <HAL_RCC_GetSysClockFreq+0x1ec>
 800308e:	2b00      	cmp	r3, #0
 8003090:	d002      	beq.n	8003098 <HAL_RCC_GetSysClockFreq+0x34>
 8003092:	2b04      	cmp	r3, #4
 8003094:	d003      	beq.n	800309e <HAL_RCC_GetSysClockFreq+0x3a>
 8003096:	e0db      	b.n	8003250 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003098:	4b73      	ldr	r3, [pc, #460]	@ (8003268 <HAL_RCC_GetSysClockFreq+0x204>)
 800309a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800309c:	e0db      	b.n	8003256 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800309e:	4b73      	ldr	r3, [pc, #460]	@ (800326c <HAL_RCC_GetSysClockFreq+0x208>)
 80030a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030a2:	e0d8      	b.n	8003256 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030a4:	4b6f      	ldr	r3, [pc, #444]	@ (8003264 <HAL_RCC_GetSysClockFreq+0x200>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030ac:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030ae:	4b6d      	ldr	r3, [pc, #436]	@ (8003264 <HAL_RCC_GetSysClockFreq+0x200>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d063      	beq.n	8003182 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ba:	4b6a      	ldr	r3, [pc, #424]	@ (8003264 <HAL_RCC_GetSysClockFreq+0x200>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	099b      	lsrs	r3, r3, #6
 80030c0:	2200      	movs	r2, #0
 80030c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80030c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80030ce:	2300      	movs	r3, #0
 80030d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80030d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80030d6:	4622      	mov	r2, r4
 80030d8:	462b      	mov	r3, r5
 80030da:	f04f 0000 	mov.w	r0, #0
 80030de:	f04f 0100 	mov.w	r1, #0
 80030e2:	0159      	lsls	r1, r3, #5
 80030e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030e8:	0150      	lsls	r0, r2, #5
 80030ea:	4602      	mov	r2, r0
 80030ec:	460b      	mov	r3, r1
 80030ee:	4621      	mov	r1, r4
 80030f0:	1a51      	subs	r1, r2, r1
 80030f2:	6139      	str	r1, [r7, #16]
 80030f4:	4629      	mov	r1, r5
 80030f6:	eb63 0301 	sbc.w	r3, r3, r1
 80030fa:	617b      	str	r3, [r7, #20]
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	f04f 0300 	mov.w	r3, #0
 8003104:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003108:	4659      	mov	r1, fp
 800310a:	018b      	lsls	r3, r1, #6
 800310c:	4651      	mov	r1, sl
 800310e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003112:	4651      	mov	r1, sl
 8003114:	018a      	lsls	r2, r1, #6
 8003116:	4651      	mov	r1, sl
 8003118:	ebb2 0801 	subs.w	r8, r2, r1
 800311c:	4659      	mov	r1, fp
 800311e:	eb63 0901 	sbc.w	r9, r3, r1
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	f04f 0300 	mov.w	r3, #0
 800312a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800312e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003132:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003136:	4690      	mov	r8, r2
 8003138:	4699      	mov	r9, r3
 800313a:	4623      	mov	r3, r4
 800313c:	eb18 0303 	adds.w	r3, r8, r3
 8003140:	60bb      	str	r3, [r7, #8]
 8003142:	462b      	mov	r3, r5
 8003144:	eb49 0303 	adc.w	r3, r9, r3
 8003148:	60fb      	str	r3, [r7, #12]
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	f04f 0300 	mov.w	r3, #0
 8003152:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003156:	4629      	mov	r1, r5
 8003158:	024b      	lsls	r3, r1, #9
 800315a:	4621      	mov	r1, r4
 800315c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003160:	4621      	mov	r1, r4
 8003162:	024a      	lsls	r2, r1, #9
 8003164:	4610      	mov	r0, r2
 8003166:	4619      	mov	r1, r3
 8003168:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800316a:	2200      	movs	r2, #0
 800316c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800316e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003170:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003174:	f7fd f884 	bl	8000280 <__aeabi_uldivmod>
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	4613      	mov	r3, r2
 800317e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003180:	e058      	b.n	8003234 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003182:	4b38      	ldr	r3, [pc, #224]	@ (8003264 <HAL_RCC_GetSysClockFreq+0x200>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	099b      	lsrs	r3, r3, #6
 8003188:	2200      	movs	r2, #0
 800318a:	4618      	mov	r0, r3
 800318c:	4611      	mov	r1, r2
 800318e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003192:	623b      	str	r3, [r7, #32]
 8003194:	2300      	movs	r3, #0
 8003196:	627b      	str	r3, [r7, #36]	@ 0x24
 8003198:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800319c:	4642      	mov	r2, r8
 800319e:	464b      	mov	r3, r9
 80031a0:	f04f 0000 	mov.w	r0, #0
 80031a4:	f04f 0100 	mov.w	r1, #0
 80031a8:	0159      	lsls	r1, r3, #5
 80031aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031ae:	0150      	lsls	r0, r2, #5
 80031b0:	4602      	mov	r2, r0
 80031b2:	460b      	mov	r3, r1
 80031b4:	4641      	mov	r1, r8
 80031b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80031ba:	4649      	mov	r1, r9
 80031bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80031c0:	f04f 0200 	mov.w	r2, #0
 80031c4:	f04f 0300 	mov.w	r3, #0
 80031c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031d4:	ebb2 040a 	subs.w	r4, r2, sl
 80031d8:	eb63 050b 	sbc.w	r5, r3, fp
 80031dc:	f04f 0200 	mov.w	r2, #0
 80031e0:	f04f 0300 	mov.w	r3, #0
 80031e4:	00eb      	lsls	r3, r5, #3
 80031e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031ea:	00e2      	lsls	r2, r4, #3
 80031ec:	4614      	mov	r4, r2
 80031ee:	461d      	mov	r5, r3
 80031f0:	4643      	mov	r3, r8
 80031f2:	18e3      	adds	r3, r4, r3
 80031f4:	603b      	str	r3, [r7, #0]
 80031f6:	464b      	mov	r3, r9
 80031f8:	eb45 0303 	adc.w	r3, r5, r3
 80031fc:	607b      	str	r3, [r7, #4]
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	f04f 0300 	mov.w	r3, #0
 8003206:	e9d7 4500 	ldrd	r4, r5, [r7]
 800320a:	4629      	mov	r1, r5
 800320c:	028b      	lsls	r3, r1, #10
 800320e:	4621      	mov	r1, r4
 8003210:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003214:	4621      	mov	r1, r4
 8003216:	028a      	lsls	r2, r1, #10
 8003218:	4610      	mov	r0, r2
 800321a:	4619      	mov	r1, r3
 800321c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800321e:	2200      	movs	r2, #0
 8003220:	61bb      	str	r3, [r7, #24]
 8003222:	61fa      	str	r2, [r7, #28]
 8003224:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003228:	f7fd f82a 	bl	8000280 <__aeabi_uldivmod>
 800322c:	4602      	mov	r2, r0
 800322e:	460b      	mov	r3, r1
 8003230:	4613      	mov	r3, r2
 8003232:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003234:	4b0b      	ldr	r3, [pc, #44]	@ (8003264 <HAL_RCC_GetSysClockFreq+0x200>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	0c1b      	lsrs	r3, r3, #16
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	3301      	adds	r3, #1
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003244:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003246:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003248:	fbb2 f3f3 	udiv	r3, r2, r3
 800324c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800324e:	e002      	b.n	8003256 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003250:	4b05      	ldr	r3, [pc, #20]	@ (8003268 <HAL_RCC_GetSysClockFreq+0x204>)
 8003252:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003254:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003256:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003258:	4618      	mov	r0, r3
 800325a:	3750      	adds	r7, #80	@ 0x50
 800325c:	46bd      	mov	sp, r7
 800325e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003262:	bf00      	nop
 8003264:	40023800 	.word	0x40023800
 8003268:	00f42400 	.word	0x00f42400
 800326c:	007a1200 	.word	0x007a1200

08003270 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003274:	4b03      	ldr	r3, [pc, #12]	@ (8003284 <HAL_RCC_GetHCLKFreq+0x14>)
 8003276:	681b      	ldr	r3, [r3, #0]
}
 8003278:	4618      	mov	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	20000000 	.word	0x20000000

08003288 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800328c:	f7ff fff0 	bl	8003270 <HAL_RCC_GetHCLKFreq>
 8003290:	4602      	mov	r2, r0
 8003292:	4b05      	ldr	r3, [pc, #20]	@ (80032a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	0a9b      	lsrs	r3, r3, #10
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	4903      	ldr	r1, [pc, #12]	@ (80032ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800329e:	5ccb      	ldrb	r3, [r1, r3]
 80032a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40023800 	.word	0x40023800
 80032ac:	080070f8 	.word	0x080070f8

080032b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032b4:	f7ff ffdc 	bl	8003270 <HAL_RCC_GetHCLKFreq>
 80032b8:	4602      	mov	r2, r0
 80032ba:	4b05      	ldr	r3, [pc, #20]	@ (80032d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	0b5b      	lsrs	r3, r3, #13
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	4903      	ldr	r1, [pc, #12]	@ (80032d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032c6:	5ccb      	ldrb	r3, [r1, r3]
 80032c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40023800 	.word	0x40023800
 80032d4:	080070f8 	.word	0x080070f8

080032d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	220f      	movs	r2, #15
 80032e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80032e8:	4b12      	ldr	r3, [pc, #72]	@ (8003334 <HAL_RCC_GetClockConfig+0x5c>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 0203 	and.w	r2, r3, #3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80032f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003334 <HAL_RCC_GetClockConfig+0x5c>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003300:	4b0c      	ldr	r3, [pc, #48]	@ (8003334 <HAL_RCC_GetClockConfig+0x5c>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800330c:	4b09      	ldr	r3, [pc, #36]	@ (8003334 <HAL_RCC_GetClockConfig+0x5c>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	08db      	lsrs	r3, r3, #3
 8003312:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800331a:	4b07      	ldr	r3, [pc, #28]	@ (8003338 <HAL_RCC_GetClockConfig+0x60>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0207 	and.w	r2, r3, #7
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	601a      	str	r2, [r3, #0]
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	40023800 	.word	0x40023800
 8003338:	40023c00 	.word	0x40023c00

0800333c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e041      	b.n	80033d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d106      	bne.n	8003368 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7fd fcee 	bl	8000d44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2202      	movs	r2, #2
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3304      	adds	r3, #4
 8003378:	4619      	mov	r1, r3
 800337a:	4610      	mov	r0, r2
 800337c:	f000 fa70 	bl	8003860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d001      	beq.n	80033f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e044      	b.n	800347e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2202      	movs	r2, #2
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68da      	ldr	r2, [r3, #12]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0201 	orr.w	r2, r2, #1
 800340a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a1e      	ldr	r2, [pc, #120]	@ (800348c <HAL_TIM_Base_Start_IT+0xb0>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d018      	beq.n	8003448 <HAL_TIM_Base_Start_IT+0x6c>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800341e:	d013      	beq.n	8003448 <HAL_TIM_Base_Start_IT+0x6c>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a1a      	ldr	r2, [pc, #104]	@ (8003490 <HAL_TIM_Base_Start_IT+0xb4>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d00e      	beq.n	8003448 <HAL_TIM_Base_Start_IT+0x6c>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a19      	ldr	r2, [pc, #100]	@ (8003494 <HAL_TIM_Base_Start_IT+0xb8>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d009      	beq.n	8003448 <HAL_TIM_Base_Start_IT+0x6c>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a17      	ldr	r2, [pc, #92]	@ (8003498 <HAL_TIM_Base_Start_IT+0xbc>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d004      	beq.n	8003448 <HAL_TIM_Base_Start_IT+0x6c>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a16      	ldr	r2, [pc, #88]	@ (800349c <HAL_TIM_Base_Start_IT+0xc0>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d111      	bne.n	800346c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2b06      	cmp	r3, #6
 8003458:	d010      	beq.n	800347c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f042 0201 	orr.w	r2, r2, #1
 8003468:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800346a:	e007      	b.n	800347c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0201 	orr.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	40010000 	.word	0x40010000
 8003490:	40000400 	.word	0x40000400
 8003494:	40000800 	.word	0x40000800
 8003498:	40000c00 	.word	0x40000c00
 800349c:	40014000 	.word	0x40014000

080034a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d020      	beq.n	8003504 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d01b      	beq.n	8003504 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f06f 0202 	mvn.w	r2, #2
 80034d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f999 	bl	8003822 <HAL_TIM_IC_CaptureCallback>
 80034f0:	e005      	b.n	80034fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f98b 	bl	800380e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f99c 	bl	8003836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	f003 0304 	and.w	r3, r3, #4
 800350a:	2b00      	cmp	r3, #0
 800350c:	d020      	beq.n	8003550 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b00      	cmp	r3, #0
 8003516:	d01b      	beq.n	8003550 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f06f 0204 	mvn.w	r2, #4
 8003520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2202      	movs	r2, #2
 8003526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f973 	bl	8003822 <HAL_TIM_IC_CaptureCallback>
 800353c:	e005      	b.n	800354a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f965 	bl	800380e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 f976 	bl	8003836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	2b00      	cmp	r3, #0
 8003558:	d020      	beq.n	800359c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f003 0308 	and.w	r3, r3, #8
 8003560:	2b00      	cmp	r3, #0
 8003562:	d01b      	beq.n	800359c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f06f 0208 	mvn.w	r2, #8
 800356c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2204      	movs	r2, #4
 8003572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f94d 	bl	8003822 <HAL_TIM_IC_CaptureCallback>
 8003588:	e005      	b.n	8003596 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f93f 	bl	800380e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f950 	bl	8003836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f003 0310 	and.w	r3, r3, #16
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d020      	beq.n	80035e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f003 0310 	and.w	r3, r3, #16
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d01b      	beq.n	80035e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f06f 0210 	mvn.w	r2, #16
 80035b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2208      	movs	r2, #8
 80035be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f927 	bl	8003822 <HAL_TIM_IC_CaptureCallback>
 80035d4:	e005      	b.n	80035e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f919 	bl	800380e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f92a 	bl	8003836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00c      	beq.n	800360c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d007      	beq.n	800360c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f06f 0201 	mvn.w	r2, #1
 8003604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7fd fa1a 	bl	8000a40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00c      	beq.n	8003630 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800361c:	2b00      	cmp	r3, #0
 800361e:	d007      	beq.n	8003630 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 fab0 	bl	8003b90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00c      	beq.n	8003654 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003640:	2b00      	cmp	r3, #0
 8003642:	d007      	beq.n	8003654 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800364c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f8fb 	bl	800384a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	f003 0320 	and.w	r3, r3, #32
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00c      	beq.n	8003678 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f003 0320 	and.w	r3, r3, #32
 8003664:	2b00      	cmp	r3, #0
 8003666:	d007      	beq.n	8003678 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f06f 0220 	mvn.w	r2, #32
 8003670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 fa82 	bl	8003b7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003678:	bf00      	nop
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800368a:	2300      	movs	r3, #0
 800368c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003694:	2b01      	cmp	r3, #1
 8003696:	d101      	bne.n	800369c <HAL_TIM_ConfigClockSource+0x1c>
 8003698:	2302      	movs	r3, #2
 800369a:	e0b4      	b.n	8003806 <HAL_TIM_ConfigClockSource+0x186>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2202      	movs	r2, #2
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80036ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036d4:	d03e      	beq.n	8003754 <HAL_TIM_ConfigClockSource+0xd4>
 80036d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036da:	f200 8087 	bhi.w	80037ec <HAL_TIM_ConfigClockSource+0x16c>
 80036de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036e2:	f000 8086 	beq.w	80037f2 <HAL_TIM_ConfigClockSource+0x172>
 80036e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036ea:	d87f      	bhi.n	80037ec <HAL_TIM_ConfigClockSource+0x16c>
 80036ec:	2b70      	cmp	r3, #112	@ 0x70
 80036ee:	d01a      	beq.n	8003726 <HAL_TIM_ConfigClockSource+0xa6>
 80036f0:	2b70      	cmp	r3, #112	@ 0x70
 80036f2:	d87b      	bhi.n	80037ec <HAL_TIM_ConfigClockSource+0x16c>
 80036f4:	2b60      	cmp	r3, #96	@ 0x60
 80036f6:	d050      	beq.n	800379a <HAL_TIM_ConfigClockSource+0x11a>
 80036f8:	2b60      	cmp	r3, #96	@ 0x60
 80036fa:	d877      	bhi.n	80037ec <HAL_TIM_ConfigClockSource+0x16c>
 80036fc:	2b50      	cmp	r3, #80	@ 0x50
 80036fe:	d03c      	beq.n	800377a <HAL_TIM_ConfigClockSource+0xfa>
 8003700:	2b50      	cmp	r3, #80	@ 0x50
 8003702:	d873      	bhi.n	80037ec <HAL_TIM_ConfigClockSource+0x16c>
 8003704:	2b40      	cmp	r3, #64	@ 0x40
 8003706:	d058      	beq.n	80037ba <HAL_TIM_ConfigClockSource+0x13a>
 8003708:	2b40      	cmp	r3, #64	@ 0x40
 800370a:	d86f      	bhi.n	80037ec <HAL_TIM_ConfigClockSource+0x16c>
 800370c:	2b30      	cmp	r3, #48	@ 0x30
 800370e:	d064      	beq.n	80037da <HAL_TIM_ConfigClockSource+0x15a>
 8003710:	2b30      	cmp	r3, #48	@ 0x30
 8003712:	d86b      	bhi.n	80037ec <HAL_TIM_ConfigClockSource+0x16c>
 8003714:	2b20      	cmp	r3, #32
 8003716:	d060      	beq.n	80037da <HAL_TIM_ConfigClockSource+0x15a>
 8003718:	2b20      	cmp	r3, #32
 800371a:	d867      	bhi.n	80037ec <HAL_TIM_ConfigClockSource+0x16c>
 800371c:	2b00      	cmp	r3, #0
 800371e:	d05c      	beq.n	80037da <HAL_TIM_ConfigClockSource+0x15a>
 8003720:	2b10      	cmp	r3, #16
 8003722:	d05a      	beq.n	80037da <HAL_TIM_ConfigClockSource+0x15a>
 8003724:	e062      	b.n	80037ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003736:	f000 f993 	bl	8003a60 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003748:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	609a      	str	r2, [r3, #8]
      break;
 8003752:	e04f      	b.n	80037f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003764:	f000 f97c 	bl	8003a60 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003776:	609a      	str	r2, [r3, #8]
      break;
 8003778:	e03c      	b.n	80037f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003786:	461a      	mov	r2, r3
 8003788:	f000 f8f0 	bl	800396c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2150      	movs	r1, #80	@ 0x50
 8003792:	4618      	mov	r0, r3
 8003794:	f000 f949 	bl	8003a2a <TIM_ITRx_SetConfig>
      break;
 8003798:	e02c      	b.n	80037f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037a6:	461a      	mov	r2, r3
 80037a8:	f000 f90f 	bl	80039ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2160      	movs	r1, #96	@ 0x60
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 f939 	bl	8003a2a <TIM_ITRx_SetConfig>
      break;
 80037b8:	e01c      	b.n	80037f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037c6:	461a      	mov	r2, r3
 80037c8:	f000 f8d0 	bl	800396c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2140      	movs	r1, #64	@ 0x40
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 f929 	bl	8003a2a <TIM_ITRx_SetConfig>
      break;
 80037d8:	e00c      	b.n	80037f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4619      	mov	r1, r3
 80037e4:	4610      	mov	r0, r2
 80037e6:	f000 f920 	bl	8003a2a <TIM_ITRx_SetConfig>
      break;
 80037ea:	e003      	b.n	80037f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	73fb      	strb	r3, [r7, #15]
      break;
 80037f0:	e000      	b.n	80037f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80037f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003804:	7bfb      	ldrb	r3, [r7, #15]
}
 8003806:	4618      	mov	r0, r3
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800380e:	b480      	push	{r7}
 8003810:	b083      	sub	sp, #12
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
	...

08003860 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a37      	ldr	r2, [pc, #220]	@ (8003950 <TIM_Base_SetConfig+0xf0>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d00f      	beq.n	8003898 <TIM_Base_SetConfig+0x38>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800387e:	d00b      	beq.n	8003898 <TIM_Base_SetConfig+0x38>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a34      	ldr	r2, [pc, #208]	@ (8003954 <TIM_Base_SetConfig+0xf4>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d007      	beq.n	8003898 <TIM_Base_SetConfig+0x38>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a33      	ldr	r2, [pc, #204]	@ (8003958 <TIM_Base_SetConfig+0xf8>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d003      	beq.n	8003898 <TIM_Base_SetConfig+0x38>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a32      	ldr	r2, [pc, #200]	@ (800395c <TIM_Base_SetConfig+0xfc>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d108      	bne.n	80038aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800389e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a28      	ldr	r2, [pc, #160]	@ (8003950 <TIM_Base_SetConfig+0xf0>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d01b      	beq.n	80038ea <TIM_Base_SetConfig+0x8a>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038b8:	d017      	beq.n	80038ea <TIM_Base_SetConfig+0x8a>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a25      	ldr	r2, [pc, #148]	@ (8003954 <TIM_Base_SetConfig+0xf4>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d013      	beq.n	80038ea <TIM_Base_SetConfig+0x8a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a24      	ldr	r2, [pc, #144]	@ (8003958 <TIM_Base_SetConfig+0xf8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d00f      	beq.n	80038ea <TIM_Base_SetConfig+0x8a>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a23      	ldr	r2, [pc, #140]	@ (800395c <TIM_Base_SetConfig+0xfc>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d00b      	beq.n	80038ea <TIM_Base_SetConfig+0x8a>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a22      	ldr	r2, [pc, #136]	@ (8003960 <TIM_Base_SetConfig+0x100>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d007      	beq.n	80038ea <TIM_Base_SetConfig+0x8a>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a21      	ldr	r2, [pc, #132]	@ (8003964 <TIM_Base_SetConfig+0x104>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d003      	beq.n	80038ea <TIM_Base_SetConfig+0x8a>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a20      	ldr	r2, [pc, #128]	@ (8003968 <TIM_Base_SetConfig+0x108>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d108      	bne.n	80038fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	4313      	orrs	r3, r2
 8003908:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	689a      	ldr	r2, [r3, #8]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a0c      	ldr	r2, [pc, #48]	@ (8003950 <TIM_Base_SetConfig+0xf0>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d103      	bne.n	800392a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	691a      	ldr	r2, [r3, #16]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f043 0204 	orr.w	r2, r3, #4
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	601a      	str	r2, [r3, #0]
}
 8003942:	bf00      	nop
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	40010000 	.word	0x40010000
 8003954:	40000400 	.word	0x40000400
 8003958:	40000800 	.word	0x40000800
 800395c:	40000c00 	.word	0x40000c00
 8003960:	40014000 	.word	0x40014000
 8003964:	40014400 	.word	0x40014400
 8003968:	40014800 	.word	0x40014800

0800396c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800396c:	b480      	push	{r7}
 800396e:	b087      	sub	sp, #28
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	f023 0201 	bic.w	r2, r3, #1
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003996:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	011b      	lsls	r3, r3, #4
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	4313      	orrs	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f023 030a 	bic.w	r3, r3, #10
 80039a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	621a      	str	r2, [r3, #32]
}
 80039be:	bf00      	nop
 80039c0:	371c      	adds	r7, #28
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b087      	sub	sp, #28
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	60f8      	str	r0, [r7, #12]
 80039d2:	60b9      	str	r1, [r7, #8]
 80039d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	f023 0210 	bic.w	r2, r3, #16
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80039f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	031b      	lsls	r3, r3, #12
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003a06:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	011b      	lsls	r3, r3, #4
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	621a      	str	r2, [r3, #32]
}
 8003a1e:	bf00      	nop
 8003a20:	371c      	adds	r7, #28
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b085      	sub	sp, #20
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
 8003a32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	f043 0307 	orr.w	r3, r3, #7
 8003a4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	609a      	str	r2, [r3, #8]
}
 8003a54:	bf00      	nop
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b087      	sub	sp, #28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
 8003a6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	021a      	lsls	r2, r3, #8
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	431a      	orrs	r2, r3
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	609a      	str	r2, [r3, #8]
}
 8003a94:	bf00      	nop
 8003a96:	371c      	adds	r7, #28
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d101      	bne.n	8003ab8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	e050      	b.n	8003b5a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ade:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a1c      	ldr	r2, [pc, #112]	@ (8003b68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d018      	beq.n	8003b2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b04:	d013      	beq.n	8003b2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a18      	ldr	r2, [pc, #96]	@ (8003b6c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d00e      	beq.n	8003b2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a16      	ldr	r2, [pc, #88]	@ (8003b70 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d009      	beq.n	8003b2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a15      	ldr	r2, [pc, #84]	@ (8003b74 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d004      	beq.n	8003b2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a13      	ldr	r2, [pc, #76]	@ (8003b78 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d10c      	bne.n	8003b48 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	40010000 	.word	0x40010000
 8003b6c:	40000400 	.word	0x40000400
 8003b70:	40000800 	.word	0x40000800
 8003b74:	40000c00 	.word	0x40000c00
 8003b78:	40014000 	.word	0x40014000

08003b7c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	4603      	mov	r3, r0
 8003bac:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003bb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bb6:	2b84      	cmp	r3, #132	@ 0x84
 8003bb8:	d005      	beq.n	8003bc6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003bba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	3303      	adds	r3, #3
 8003bc4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3714      	adds	r7, #20
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bda:	f3ef 8305 	mrs	r3, IPSR
 8003bde:	607b      	str	r3, [r7, #4]
  return(result);
 8003be0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	bf14      	ite	ne
 8003be6:	2301      	movne	r3, #1
 8003be8:	2300      	moveq	r3, #0
 8003bea:	b2db      	uxtb	r3, r3
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003bfc:	f001 fb66 	bl	80052cc <vTaskStartScheduler>
  
  return osOK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003c06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c08:	b089      	sub	sp, #36	@ 0x24
 8003c0a:	af04      	add	r7, sp, #16
 8003c0c:	6078      	str	r0, [r7, #4]
 8003c0e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d020      	beq.n	8003c5a <osThreadCreate+0x54>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d01c      	beq.n	8003c5a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685c      	ldr	r4, [r3, #4]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	691e      	ldr	r6, [r3, #16]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7ff ffb6 	bl	8003ba4 <makeFreeRtosPriority>
 8003c38:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c42:	9202      	str	r2, [sp, #8]
 8003c44:	9301      	str	r3, [sp, #4]
 8003c46:	9100      	str	r1, [sp, #0]
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	4632      	mov	r2, r6
 8003c4c:	4629      	mov	r1, r5
 8003c4e:	4620      	mov	r0, r4
 8003c50:	f001 f956 	bl	8004f00 <xTaskCreateStatic>
 8003c54:	4603      	mov	r3, r0
 8003c56:	60fb      	str	r3, [r7, #12]
 8003c58:	e01c      	b.n	8003c94 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685c      	ldr	r4, [r3, #4]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c66:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7ff ff98 	bl	8003ba4 <makeFreeRtosPriority>
 8003c74:	4602      	mov	r2, r0
 8003c76:	f107 030c 	add.w	r3, r7, #12
 8003c7a:	9301      	str	r3, [sp, #4]
 8003c7c:	9200      	str	r2, [sp, #0]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	4632      	mov	r2, r6
 8003c82:	4629      	mov	r1, r5
 8003c84:	4620      	mov	r0, r4
 8003c86:	f001 f99b 	bl	8004fc0 <xTaskCreate>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d001      	beq.n	8003c94 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003c90:	2300      	movs	r3, #0
 8003c92:	e000      	b.n	8003c96 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003c94:	68fb      	ldr	r3, [r7, #12]
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c9e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b084      	sub	sp, #16
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <osDelay+0x16>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	e000      	b.n	8003cb6 <osDelay+0x18>
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f001 fad2 	bl	8005260 <vTaskDelay>
  
  return osOK;
 8003cbc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b086      	sub	sp, #24
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	3303      	adds	r3, #3
 8003cd4:	f023 0303 	bic.w	r3, r3, #3
 8003cd8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8003cda:	2014      	movs	r0, #20
 8003cdc:	f002 fa76 	bl	80061cc <pvPortMalloc>
 8003ce0:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d046      	beq.n	8003d76 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f002 fa63 	bl	80061cc <pvPortMalloc>
 8003d06:	4602      	mov	r2, r0
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d02b      	beq.n	8003d6c <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	fb02 f303 	mul.w	r3, r2, r3
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f002 fa54 	bl	80061cc <pvPortMalloc>
 8003d24:	4602      	mov	r2, r0
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d011      	beq.n	8003d56 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8003d32:	2300      	movs	r3, #0
 8003d34:	613b      	str	r3, [r7, #16]
 8003d36:	e008      	b.n	8003d4a <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	4413      	add	r3, r2
 8003d40:	2200      	movs	r2, #0
 8003d42:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	3301      	adds	r3, #1
 8003d48:	613b      	str	r3, [r7, #16]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d3f1      	bcc.n	8003d38 <osPoolCreate+0x72>
 8003d54:	e00f      	b.n	8003d76 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f002 fb04 	bl	8006368 <vPortFree>
        vPortFree(thePool);
 8003d60:	6978      	ldr	r0, [r7, #20]
 8003d62:	f002 fb01 	bl	8006368 <vPortFree>
        thePool = NULL;
 8003d66:	2300      	movs	r3, #0
 8003d68:	617b      	str	r3, [r7, #20]
 8003d6a:	e004      	b.n	8003d76 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8003d6c:	6978      	ldr	r0, [r7, #20]
 8003d6e:	f002 fafb 	bl	8006368 <vPortFree>
      thePool = NULL;
 8003d72:	2300      	movs	r3, #0
 8003d74:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8003d76:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3718      	adds	r7, #24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b08a      	sub	sp, #40	@ 0x28
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  void *p = NULL;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8003d90:	f7ff ff20 	bl	8003bd4 <inHandlerMode>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00e      	beq.n	8003db8 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003d9a:	f3ef 8211 	mrs	r2, BASEPRI
 8003d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003da2:	f383 8811 	msr	BASEPRI, r3
 8003da6:	f3bf 8f6f 	isb	sy
 8003daa:	f3bf 8f4f 	dsb	sy
 8003dae:	617a      	str	r2, [r7, #20]
 8003db0:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003db2:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8003db4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003db6:	e001      	b.n	8003dbc <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8003db8:	f002 f8e6 	bl	8005f88 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	61fb      	str	r3, [r7, #28]
 8003dc0:	e029      	b.n	8003e16 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	691a      	ldr	r2, [r3, #16]
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	4413      	add	r3, r2
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	6892      	ldr	r2, [r2, #8]
 8003dce:	fbb3 f1f2 	udiv	r1, r3, r2
 8003dd2:	fb01 f202 	mul.w	r2, r1, r2
 8003dd6:	1a9b      	subs	r3, r3, r2
 8003dd8:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	4413      	add	r3, r2
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d113      	bne.n	8003e10 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	4413      	add	r3, r2
 8003df0:	2201      	movs	r2, #1
 8003df2:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4619      	mov	r1, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	fb02 f303 	mul.w	r3, r2, r3
 8003e04:	440b      	add	r3, r1
 8003e06:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	611a      	str	r2, [r3, #16]
      break;
 8003e0e:	e007      	b.n	8003e20 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	3301      	adds	r3, #1
 8003e14:	61fb      	str	r3, [r7, #28]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	69fa      	ldr	r2, [r7, #28]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d3d0      	bcc.n	8003dc2 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8003e20:	f7ff fed8 	bl	8003bd4 <inHandlerMode>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d005      	beq.n	8003e36 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003e34:	e001      	b.n	8003e3a <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8003e36:	f002 f8d9 	bl	8005fec <vPortExitCritical>
  }
  
  return p;
 8003e3a:	6a3b      	ldr	r3, [r7, #32]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3728      	adds	r7, #40	@ 0x28
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <osPoolFree+0x14>
    return osErrorParameter;
 8003e54:	2380      	movs	r3, #128	@ 0x80
 8003e56:	e030      	b.n	8003eba <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <osPoolFree+0x1e>
    return osErrorParameter;
 8003e5e:	2380      	movs	r3, #128	@ 0x80
 8003e60:	e02b      	b.n	8003eba <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d201      	bcs.n	8003e70 <osPoolFree+0x2c>
    return osErrorParameter;
 8003e6c:	2380      	movs	r3, #128	@ 0x80
 8003e6e:	e024      	b.n	8003eba <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6812      	ldr	r2, [r2, #0]
 8003e76:	1a9b      	subs	r3, r3, r2
 8003e78:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68da      	ldr	r2, [r3, #12]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	fbb3 f1f2 	udiv	r1, r3, r2
 8003e84:	fb01 f202 	mul.w	r2, r1, r2
 8003e88:	1a9b      	subs	r3, r3, r2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <osPoolFree+0x4e>
    return osErrorParameter;
 8003e8e:	2380      	movs	r3, #128	@ 0x80
 8003e90:	e013      	b.n	8003eba <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9c:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d301      	bcc.n	8003eac <osPoolFree+0x68>
    return osErrorParameter;
 8003ea8:	2380      	movs	r3, #128	@ 0x80
 8003eaa:	e006      	b.n	8003eba <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685a      	ldr	r2, [r3, #4]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3714      	adds	r7, #20
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8003ec6:	b590      	push	{r4, r7, lr}
 8003ec8:	b085      	sub	sp, #20
 8003eca:	af02      	add	r7, sp, #8
 8003ecc:	6078      	str	r0, [r7, #4]
 8003ece:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d011      	beq.n	8003efc <osMessageCreate+0x36>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00d      	beq.n	8003efc <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6818      	ldr	r0, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6859      	ldr	r1, [r3, #4]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	2400      	movs	r4, #0
 8003ef2:	9400      	str	r4, [sp, #0]
 8003ef4:	f000 fb18 	bl	8004528 <xQueueGenericCreateStatic>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	e008      	b.n	8003f0e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6818      	ldr	r0, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	4619      	mov	r1, r3
 8003f08:	f000 fb8b 	bl	8004622 <xQueueGenericCreate>
 8003f0c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd90      	pop	{r4, r7, pc}
	...

08003f18 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8003f24:	2300      	movs	r3, #0
 8003f26:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <osMessagePut+0x1e>
    ticks = 1;
 8003f32:	2301      	movs	r3, #1
 8003f34:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8003f36:	f7ff fe4d 	bl	8003bd4 <inHandlerMode>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d018      	beq.n	8003f72 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8003f40:	f107 0210 	add.w	r2, r7, #16
 8003f44:	f107 0108 	add.w	r1, r7, #8
 8003f48:	2300      	movs	r3, #0
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 fcc6 	bl	80048dc <xQueueGenericSendFromISR>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d001      	beq.n	8003f5a <osMessagePut+0x42>
      return osErrorOS;
 8003f56:	23ff      	movs	r3, #255	@ 0xff
 8003f58:	e018      	b.n	8003f8c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d014      	beq.n	8003f8a <osMessagePut+0x72>
 8003f60:	4b0c      	ldr	r3, [pc, #48]	@ (8003f94 <osMessagePut+0x7c>)
 8003f62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	f3bf 8f4f 	dsb	sy
 8003f6c:	f3bf 8f6f 	isb	sy
 8003f70:	e00b      	b.n	8003f8a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8003f72:	f107 0108 	add.w	r1, r7, #8
 8003f76:	2300      	movs	r3, #0
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 fbac 	bl	80046d8 <xQueueGenericSend>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d001      	beq.n	8003f8a <osMessagePut+0x72>
      return osErrorOS;
 8003f86:	23ff      	movs	r3, #255	@ 0xff
 8003f88:	e000      	b.n	8003f8c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3718      	adds	r7, #24
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	e000ed04 	.word	0xe000ed04

08003f98 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8003f98:	b590      	push	{r4, r7, lr}
 8003f9a:	b08b      	sub	sp, #44	@ 0x2c
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10a      	bne.n	8003fc8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8003fb2:	2380      	movs	r3, #128	@ 0x80
 8003fb4:	617b      	str	r3, [r7, #20]
    return event;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	461c      	mov	r4, r3
 8003fba:	f107 0314 	add.w	r3, r7, #20
 8003fbe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003fc2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003fc6:	e054      	b.n	8004072 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd6:	d103      	bne.n	8003fe0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8003fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8003fdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fde:	e009      	b.n	8003ff4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d006      	beq.n	8003ff4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8003fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <osMessageGet+0x5c>
      ticks = 1;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8003ff4:	f7ff fdee 	bl	8003bd4 <inHandlerMode>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d01c      	beq.n	8004038 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8003ffe:	f107 0220 	add.w	r2, r7, #32
 8004002:	f107 0314 	add.w	r3, r7, #20
 8004006:	3304      	adds	r3, #4
 8004008:	4619      	mov	r1, r3
 800400a:	68b8      	ldr	r0, [r7, #8]
 800400c:	f000 fde6 	bl	8004bdc <xQueueReceiveFromISR>
 8004010:	4603      	mov	r3, r0
 8004012:	2b01      	cmp	r3, #1
 8004014:	d102      	bne.n	800401c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8004016:	2310      	movs	r3, #16
 8004018:	617b      	str	r3, [r7, #20]
 800401a:	e001      	b.n	8004020 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800401c:	2300      	movs	r3, #0
 800401e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004020:	6a3b      	ldr	r3, [r7, #32]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d01d      	beq.n	8004062 <osMessageGet+0xca>
 8004026:	4b15      	ldr	r3, [pc, #84]	@ (800407c <osMessageGet+0xe4>)
 8004028:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	f3bf 8f4f 	dsb	sy
 8004032:	f3bf 8f6f 	isb	sy
 8004036:	e014      	b.n	8004062 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004038:	f107 0314 	add.w	r3, r7, #20
 800403c:	3304      	adds	r3, #4
 800403e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004040:	4619      	mov	r1, r3
 8004042:	68b8      	ldr	r0, [r7, #8]
 8004044:	f000 fce8 	bl	8004a18 <xQueueReceive>
 8004048:	4603      	mov	r3, r0
 800404a:	2b01      	cmp	r3, #1
 800404c:	d102      	bne.n	8004054 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800404e:	2310      	movs	r3, #16
 8004050:	617b      	str	r3, [r7, #20]
 8004052:	e006      	b.n	8004062 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <osMessageGet+0xc6>
 800405a:	2300      	movs	r3, #0
 800405c:	e000      	b.n	8004060 <osMessageGet+0xc8>
 800405e:	2340      	movs	r3, #64	@ 0x40
 8004060:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	461c      	mov	r4, r3
 8004066:	f107 0314 	add.w	r3, r7, #20
 800406a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800406e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	372c      	adds	r7, #44	@ 0x2c
 8004076:	46bd      	mov	sp, r7
 8004078:	bd90      	pop	{r4, r7, pc}
 800407a:	bf00      	nop
 800407c:	e000ed04 	.word	0xe000ed04

08004080 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8004080:	b590      	push	{r4, r7, lr}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	613b      	str	r3, [r7, #16]
 8004096:	2300      	movs	r3, #0
 8004098:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689c      	ldr	r4, [r3, #8]
 800409e:	200c      	movs	r0, #12
 80040a0:	f002 f894 	bl	80061cc <pvPortMalloc>
 80040a4:	4603      	mov	r3, r0
 80040a6:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <osMailCreate+0x36>
    return NULL;
 80040b2:	2300      	movs	r3, #0
 80040b4:	e038      	b.n	8004128 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6818      	ldr	r0, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	681c      	ldr	r4, [r3, #0]
 80040ca:	2200      	movs	r2, #0
 80040cc:	2104      	movs	r1, #4
 80040ce:	f000 faa8 	bl	8004622 <xQueueGenericCreate>
 80040d2:	4603      	mov	r3, r0
 80040d4:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d107      	bne.n	80040f2 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f002 f93d 	bl	8006368 <vPortFree>
    return NULL;
 80040ee:	2300      	movs	r3, #0
 80040f0:	e01a      	b.n	8004128 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	681c      	ldr	r4, [r3, #0]
 80040f8:	f107 030c 	add.w	r3, r7, #12
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7ff fde2 	bl	8003cc6 <osPoolCreate>
 8004102:	4603      	mov	r3, r0
 8004104:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d107      	bne.n	8004122 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4618      	mov	r0, r3
 800411a:	f002 f925 	bl	8006368 <vPortFree>
    return NULL;
 800411e:	2300      	movs	r3, #0
 8004120:	e002      	b.n	8004128 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8004128:	4618      	mov	r0, r3
 800412a:	371c      	adds	r7, #28
 800412c:	46bd      	mov	sp, r7
 800412e:	bd90      	pop	{r4, r7, pc}

08004130 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <osMailAlloc+0x14>
    return NULL;
 8004140:	2300      	movs	r3, #0
 8004142:	e006      	b.n	8004152 <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	4618      	mov	r0, r3
 800414a:	f7ff fe19 	bl	8003d80 <osPoolAlloc>
 800414e:	60f8      	str	r0, [r7, #12]
  
  return p;
 8004150:	68fb      	ldr	r3, [r7, #12]
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
	...

0800415c <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d101      	bne.n	8004170 <osMailPut+0x14>
    return osErrorParameter;
 800416c:	2380      	movs	r3, #128	@ 0x80
 800416e:	e02c      	b.n	80041ca <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8004170:	2300      	movs	r3, #0
 8004172:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8004174:	f7ff fd2e 	bl	8003bd4 <inHandlerMode>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d018      	beq.n	80041b0 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6858      	ldr	r0, [r3, #4]
 8004182:	f107 020c 	add.w	r2, r7, #12
 8004186:	4639      	mov	r1, r7
 8004188:	2300      	movs	r3, #0
 800418a:	f000 fba7 	bl	80048dc <xQueueGenericSendFromISR>
 800418e:	4603      	mov	r3, r0
 8004190:	2b01      	cmp	r3, #1
 8004192:	d001      	beq.n	8004198 <osMailPut+0x3c>
      return osErrorOS;
 8004194:	23ff      	movs	r3, #255	@ 0xff
 8004196:	e018      	b.n	80041ca <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d014      	beq.n	80041c8 <osMailPut+0x6c>
 800419e:	4b0d      	ldr	r3, [pc, #52]	@ (80041d4 <osMailPut+0x78>)
 80041a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	f3bf 8f4f 	dsb	sy
 80041aa:	f3bf 8f6f 	isb	sy
 80041ae:	e00b      	b.n	80041c8 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6858      	ldr	r0, [r3, #4]
 80041b4:	4639      	mov	r1, r7
 80041b6:	2300      	movs	r3, #0
 80041b8:	2200      	movs	r2, #0
 80041ba:	f000 fa8d 	bl	80046d8 <xQueueGenericSend>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d001      	beq.n	80041c8 <osMailPut+0x6c>
      return osErrorOS;
 80041c4:	23ff      	movs	r3, #255	@ 0xff
 80041c6:	e000      	b.n	80041ca <osMailPut+0x6e>
    }
  }
  
  return osOK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	e000ed04 	.word	0xe000ed04

080041d8 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 80041d8:	b590      	push	{r4, r7, lr}
 80041da:	b08b      	sub	sp, #44	@ 0x2c
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10a      	bne.n	8004204 <osMailGet+0x2c>
    event.status = osErrorParameter;
 80041ee:	2380      	movs	r3, #128	@ 0x80
 80041f0:	617b      	str	r3, [r7, #20]
    return event;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	461c      	mov	r4, r3
 80041f6:	f107 0314 	add.w	r3, r7, #20
 80041fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80041fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004202:	e056      	b.n	80042b2 <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8004204:	2300      	movs	r3, #0
 8004206:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004208:	2300      	movs	r3, #0
 800420a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004212:	d103      	bne.n	800421c <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8004214:	f04f 33ff 	mov.w	r3, #4294967295
 8004218:	627b      	str	r3, [r7, #36]	@ 0x24
 800421a:	e009      	b.n	8004230 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d006      	beq.n	8004230 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8004226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004228:	2b00      	cmp	r3, #0
 800422a:	d101      	bne.n	8004230 <osMailGet+0x58>
      ticks = 1;
 800422c:	2301      	movs	r3, #1
 800422e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004230:	f7ff fcd0 	bl	8003bd4 <inHandlerMode>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d01d      	beq.n	8004276 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	6858      	ldr	r0, [r3, #4]
 800423e:	f107 0220 	add.w	r2, r7, #32
 8004242:	f107 0314 	add.w	r3, r7, #20
 8004246:	3304      	adds	r3, #4
 8004248:	4619      	mov	r1, r3
 800424a:	f000 fcc7 	bl	8004bdc <xQueueReceiveFromISR>
 800424e:	4603      	mov	r3, r0
 8004250:	2b01      	cmp	r3, #1
 8004252:	d102      	bne.n	800425a <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8004254:	2320      	movs	r3, #32
 8004256:	617b      	str	r3, [r7, #20]
 8004258:	e001      	b.n	800425e <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 800425a:	2300      	movs	r3, #0
 800425c:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800425e:	6a3b      	ldr	r3, [r7, #32]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d01e      	beq.n	80042a2 <osMailGet+0xca>
 8004264:	4b15      	ldr	r3, [pc, #84]	@ (80042bc <osMailGet+0xe4>)
 8004266:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	f3bf 8f4f 	dsb	sy
 8004270:	f3bf 8f6f 	isb	sy
 8004274:	e015      	b.n	80042a2 <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	6858      	ldr	r0, [r3, #4]
 800427a:	f107 0314 	add.w	r3, r7, #20
 800427e:	3304      	adds	r3, #4
 8004280:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004282:	4619      	mov	r1, r3
 8004284:	f000 fbc8 	bl	8004a18 <xQueueReceive>
 8004288:	4603      	mov	r3, r0
 800428a:	2b01      	cmp	r3, #1
 800428c:	d102      	bne.n	8004294 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 800428e:	2320      	movs	r3, #32
 8004290:	617b      	str	r3, [r7, #20]
 8004292:	e006      	b.n	80042a2 <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <osMailGet+0xc6>
 800429a:	2300      	movs	r3, #0
 800429c:	e000      	b.n	80042a0 <osMailGet+0xc8>
 800429e:	2340      	movs	r3, #64	@ 0x40
 80042a0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	461c      	mov	r4, r3
 80042a6:	f107 0314 	add.w	r3, r7, #20
 80042aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80042ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	372c      	adds	r7, #44	@ 0x2c
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd90      	pop	{r4, r7, pc}
 80042ba:	bf00      	nop
 80042bc:	e000ed04 	.word	0xe000ed04

080042c0 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d101      	bne.n	80042d4 <osMailFree+0x14>
    return osErrorParameter;
 80042d0:	2380      	movs	r3, #128	@ 0x80
 80042d2:	e006      	b.n	80042e2 <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	6839      	ldr	r1, [r7, #0]
 80042da:	4618      	mov	r0, r3
 80042dc:	f7ff fdb2 	bl	8003e44 <osPoolFree>
 80042e0:	4603      	mov	r3, r0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80042ea:	b480      	push	{r7}
 80042ec:	b083      	sub	sp, #12
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f103 0208 	add.w	r2, r3, #8
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004302:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f103 0208 	add.w	r2, r3, #8
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f103 0208 	add.w	r2, r3, #8
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	689a      	ldr	r2, [r3, #8]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	1c5a      	adds	r2, r3, #1
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	601a      	str	r2, [r3, #0]
}
 8004380:	bf00      	nop
 8004382:	3714      	adds	r7, #20
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a2:	d103      	bne.n	80043ac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	60fb      	str	r3, [r7, #12]
 80043aa:	e00c      	b.n	80043c6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	3308      	adds	r3, #8
 80043b0:	60fb      	str	r3, [r7, #12]
 80043b2:	e002      	b.n	80043ba <vListInsert+0x2e>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	60fb      	str	r3, [r7, #12]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d2f6      	bcs.n	80043b4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	685a      	ldr	r2, [r3, #4]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	683a      	ldr	r2, [r7, #0]
 80043d4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	1c5a      	adds	r2, r3, #1
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	601a      	str	r2, [r3, #0]
}
 80043f2:	bf00      	nop
 80043f4:	3714      	adds	r7, #20
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80043fe:	b480      	push	{r7}
 8004400:	b085      	sub	sp, #20
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6892      	ldr	r2, [r2, #8]
 8004414:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	6852      	ldr	r2, [r2, #4]
 800441e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	429a      	cmp	r2, r3
 8004428:	d103      	bne.n	8004432 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	689a      	ldr	r2, [r3, #8]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	1e5a      	subs	r2, r3, #1
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
}
 8004446:	4618      	mov	r0, r3
 8004448:	3714      	adds	r7, #20
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
	...

08004454 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10b      	bne.n	8004480 <xQueueGenericReset+0x2c>
	__asm volatile
 8004468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800446c:	f383 8811 	msr	BASEPRI, r3
 8004470:	f3bf 8f6f 	isb	sy
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	60bb      	str	r3, [r7, #8]
}
 800447a:	bf00      	nop
 800447c:	bf00      	nop
 800447e:	e7fd      	b.n	800447c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004480:	f001 fd82 	bl	8005f88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800448c:	68f9      	ldr	r1, [r7, #12]
 800448e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004490:	fb01 f303 	mul.w	r3, r1, r3
 8004494:	441a      	add	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044b0:	3b01      	subs	r3, #1
 80044b2:	68f9      	ldr	r1, [r7, #12]
 80044b4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80044b6:	fb01 f303 	mul.w	r3, r1, r3
 80044ba:	441a      	add	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	22ff      	movs	r2, #255	@ 0xff
 80044c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	22ff      	movs	r2, #255	@ 0xff
 80044cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d114      	bne.n	8004500 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d01a      	beq.n	8004514 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	3310      	adds	r3, #16
 80044e2:	4618      	mov	r0, r3
 80044e4:	f001 f94c 	bl	8005780 <xTaskRemoveFromEventList>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d012      	beq.n	8004514 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80044ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004524 <xQueueGenericReset+0xd0>)
 80044f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	f3bf 8f4f 	dsb	sy
 80044fa:	f3bf 8f6f 	isb	sy
 80044fe:	e009      	b.n	8004514 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	3310      	adds	r3, #16
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff fef0 	bl	80042ea <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	3324      	adds	r3, #36	@ 0x24
 800450e:	4618      	mov	r0, r3
 8004510:	f7ff feeb 	bl	80042ea <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004514:	f001 fd6a 	bl	8005fec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004518:	2301      	movs	r3, #1
}
 800451a:	4618      	mov	r0, r3
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	e000ed04 	.word	0xe000ed04

08004528 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004528:	b580      	push	{r7, lr}
 800452a:	b08e      	sub	sp, #56	@ 0x38
 800452c:	af02      	add	r7, sp, #8
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
 8004534:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10b      	bne.n	8004554 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800453c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004540:	f383 8811 	msr	BASEPRI, r3
 8004544:	f3bf 8f6f 	isb	sy
 8004548:	f3bf 8f4f 	dsb	sy
 800454c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800454e:	bf00      	nop
 8004550:	bf00      	nop
 8004552:	e7fd      	b.n	8004550 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10b      	bne.n	8004572 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800455a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800455e:	f383 8811 	msr	BASEPRI, r3
 8004562:	f3bf 8f6f 	isb	sy
 8004566:	f3bf 8f4f 	dsb	sy
 800456a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800456c:	bf00      	nop
 800456e:	bf00      	nop
 8004570:	e7fd      	b.n	800456e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d002      	beq.n	800457e <xQueueGenericCreateStatic+0x56>
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <xQueueGenericCreateStatic+0x5a>
 800457e:	2301      	movs	r3, #1
 8004580:	e000      	b.n	8004584 <xQueueGenericCreateStatic+0x5c>
 8004582:	2300      	movs	r3, #0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10b      	bne.n	80045a0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800458c:	f383 8811 	msr	BASEPRI, r3
 8004590:	f3bf 8f6f 	isb	sy
 8004594:	f3bf 8f4f 	dsb	sy
 8004598:	623b      	str	r3, [r7, #32]
}
 800459a:	bf00      	nop
 800459c:	bf00      	nop
 800459e:	e7fd      	b.n	800459c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d102      	bne.n	80045ac <xQueueGenericCreateStatic+0x84>
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <xQueueGenericCreateStatic+0x88>
 80045ac:	2301      	movs	r3, #1
 80045ae:	e000      	b.n	80045b2 <xQueueGenericCreateStatic+0x8a>
 80045b0:	2300      	movs	r3, #0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10b      	bne.n	80045ce <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80045b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ba:	f383 8811 	msr	BASEPRI, r3
 80045be:	f3bf 8f6f 	isb	sy
 80045c2:	f3bf 8f4f 	dsb	sy
 80045c6:	61fb      	str	r3, [r7, #28]
}
 80045c8:	bf00      	nop
 80045ca:	bf00      	nop
 80045cc:	e7fd      	b.n	80045ca <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80045ce:	2348      	movs	r3, #72	@ 0x48
 80045d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	2b48      	cmp	r3, #72	@ 0x48
 80045d6:	d00b      	beq.n	80045f0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	61bb      	str	r3, [r7, #24]
}
 80045ea:	bf00      	nop
 80045ec:	bf00      	nop
 80045ee:	e7fd      	b.n	80045ec <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80045f0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80045f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00d      	beq.n	8004618 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80045fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004604:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	4613      	mov	r3, r2
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	68b9      	ldr	r1, [r7, #8]
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 f840 	bl	8004698 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800461a:	4618      	mov	r0, r3
 800461c:	3730      	adds	r7, #48	@ 0x30
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004622:	b580      	push	{r7, lr}
 8004624:	b08a      	sub	sp, #40	@ 0x28
 8004626:	af02      	add	r7, sp, #8
 8004628:	60f8      	str	r0, [r7, #12]
 800462a:	60b9      	str	r1, [r7, #8]
 800462c:	4613      	mov	r3, r2
 800462e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10b      	bne.n	800464e <xQueueGenericCreate+0x2c>
	__asm volatile
 8004636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800463a:	f383 8811 	msr	BASEPRI, r3
 800463e:	f3bf 8f6f 	isb	sy
 8004642:	f3bf 8f4f 	dsb	sy
 8004646:	613b      	str	r3, [r7, #16]
}
 8004648:	bf00      	nop
 800464a:	bf00      	nop
 800464c:	e7fd      	b.n	800464a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	fb02 f303 	mul.w	r3, r2, r3
 8004656:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	3348      	adds	r3, #72	@ 0x48
 800465c:	4618      	mov	r0, r3
 800465e:	f001 fdb5 	bl	80061cc <pvPortMalloc>
 8004662:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d011      	beq.n	800468e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	3348      	adds	r3, #72	@ 0x48
 8004672:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800467c:	79fa      	ldrb	r2, [r7, #7]
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	4613      	mov	r3, r2
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	68b9      	ldr	r1, [r7, #8]
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f000 f805 	bl	8004698 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800468e:	69bb      	ldr	r3, [r7, #24]
	}
 8004690:	4618      	mov	r0, r3
 8004692:	3720      	adds	r7, #32
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
 80046a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d103      	bne.n	80046b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	601a      	str	r2, [r3, #0]
 80046b2:	e002      	b.n	80046ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80046c6:	2101      	movs	r1, #1
 80046c8:	69b8      	ldr	r0, [r7, #24]
 80046ca:	f7ff fec3 	bl	8004454 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80046ce:	bf00      	nop
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
	...

080046d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b08e      	sub	sp, #56	@ 0x38
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
 80046e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80046e6:	2300      	movs	r3, #0
 80046e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80046ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10b      	bne.n	800470c <xQueueGenericSend+0x34>
	__asm volatile
 80046f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046f8:	f383 8811 	msr	BASEPRI, r3
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004706:	bf00      	nop
 8004708:	bf00      	nop
 800470a:	e7fd      	b.n	8004708 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d103      	bne.n	800471a <xQueueGenericSend+0x42>
 8004712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004716:	2b00      	cmp	r3, #0
 8004718:	d101      	bne.n	800471e <xQueueGenericSend+0x46>
 800471a:	2301      	movs	r3, #1
 800471c:	e000      	b.n	8004720 <xQueueGenericSend+0x48>
 800471e:	2300      	movs	r3, #0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10b      	bne.n	800473c <xQueueGenericSend+0x64>
	__asm volatile
 8004724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004728:	f383 8811 	msr	BASEPRI, r3
 800472c:	f3bf 8f6f 	isb	sy
 8004730:	f3bf 8f4f 	dsb	sy
 8004734:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004736:	bf00      	nop
 8004738:	bf00      	nop
 800473a:	e7fd      	b.n	8004738 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	2b02      	cmp	r3, #2
 8004740:	d103      	bne.n	800474a <xQueueGenericSend+0x72>
 8004742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004744:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004746:	2b01      	cmp	r3, #1
 8004748:	d101      	bne.n	800474e <xQueueGenericSend+0x76>
 800474a:	2301      	movs	r3, #1
 800474c:	e000      	b.n	8004750 <xQueueGenericSend+0x78>
 800474e:	2300      	movs	r3, #0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10b      	bne.n	800476c <xQueueGenericSend+0x94>
	__asm volatile
 8004754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004758:	f383 8811 	msr	BASEPRI, r3
 800475c:	f3bf 8f6f 	isb	sy
 8004760:	f3bf 8f4f 	dsb	sy
 8004764:	623b      	str	r3, [r7, #32]
}
 8004766:	bf00      	nop
 8004768:	bf00      	nop
 800476a:	e7fd      	b.n	8004768 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800476c:	f001 f9ce 	bl	8005b0c <xTaskGetSchedulerState>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d102      	bne.n	800477c <xQueueGenericSend+0xa4>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <xQueueGenericSend+0xa8>
 800477c:	2301      	movs	r3, #1
 800477e:	e000      	b.n	8004782 <xQueueGenericSend+0xaa>
 8004780:	2300      	movs	r3, #0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10b      	bne.n	800479e <xQueueGenericSend+0xc6>
	__asm volatile
 8004786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800478a:	f383 8811 	msr	BASEPRI, r3
 800478e:	f3bf 8f6f 	isb	sy
 8004792:	f3bf 8f4f 	dsb	sy
 8004796:	61fb      	str	r3, [r7, #28]
}
 8004798:	bf00      	nop
 800479a:	bf00      	nop
 800479c:	e7fd      	b.n	800479a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800479e:	f001 fbf3 	bl	8005f88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d302      	bcc.n	80047b4 <xQueueGenericSend+0xdc>
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d129      	bne.n	8004808 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	68b9      	ldr	r1, [r7, #8]
 80047b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80047ba:	f000 fa91 	bl	8004ce0 <prvCopyDataToQueue>
 80047be:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d010      	beq.n	80047ea <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ca:	3324      	adds	r3, #36	@ 0x24
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 ffd7 	bl	8005780 <xTaskRemoveFromEventList>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d013      	beq.n	8004800 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80047d8:	4b3f      	ldr	r3, [pc, #252]	@ (80048d8 <xQueueGenericSend+0x200>)
 80047da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047de:	601a      	str	r2, [r3, #0]
 80047e0:	f3bf 8f4f 	dsb	sy
 80047e4:	f3bf 8f6f 	isb	sy
 80047e8:	e00a      	b.n	8004800 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80047ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d007      	beq.n	8004800 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80047f0:	4b39      	ldr	r3, [pc, #228]	@ (80048d8 <xQueueGenericSend+0x200>)
 80047f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004800:	f001 fbf4 	bl	8005fec <vPortExitCritical>
				return pdPASS;
 8004804:	2301      	movs	r3, #1
 8004806:	e063      	b.n	80048d0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d103      	bne.n	8004816 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800480e:	f001 fbed 	bl	8005fec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004812:	2300      	movs	r3, #0
 8004814:	e05c      	b.n	80048d0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004818:	2b00      	cmp	r3, #0
 800481a:	d106      	bne.n	800482a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800481c:	f107 0314 	add.w	r3, r7, #20
 8004820:	4618      	mov	r0, r3
 8004822:	f001 f811 	bl	8005848 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004826:	2301      	movs	r3, #1
 8004828:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800482a:	f001 fbdf 	bl	8005fec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800482e:	f000 fdb7 	bl	80053a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004832:	f001 fba9 	bl	8005f88 <vPortEnterCritical>
 8004836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004838:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800483c:	b25b      	sxtb	r3, r3
 800483e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004842:	d103      	bne.n	800484c <xQueueGenericSend+0x174>
 8004844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004846:	2200      	movs	r2, #0
 8004848:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800484c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800484e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004852:	b25b      	sxtb	r3, r3
 8004854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004858:	d103      	bne.n	8004862 <xQueueGenericSend+0x18a>
 800485a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800485c:	2200      	movs	r2, #0
 800485e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004862:	f001 fbc3 	bl	8005fec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004866:	1d3a      	adds	r2, r7, #4
 8004868:	f107 0314 	add.w	r3, r7, #20
 800486c:	4611      	mov	r1, r2
 800486e:	4618      	mov	r0, r3
 8004870:	f001 f800 	bl	8005874 <xTaskCheckForTimeOut>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d124      	bne.n	80048c4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800487a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800487c:	f000 fb28 	bl	8004ed0 <prvIsQueueFull>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d018      	beq.n	80048b8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004888:	3310      	adds	r3, #16
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	4611      	mov	r1, r2
 800488e:	4618      	mov	r0, r3
 8004890:	f000 ff50 	bl	8005734 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004894:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004896:	f000 fab3 	bl	8004e00 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800489a:	f000 fd8f 	bl	80053bc <xTaskResumeAll>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f47f af7c 	bne.w	800479e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80048a6:	4b0c      	ldr	r3, [pc, #48]	@ (80048d8 <xQueueGenericSend+0x200>)
 80048a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048ac:	601a      	str	r2, [r3, #0]
 80048ae:	f3bf 8f4f 	dsb	sy
 80048b2:	f3bf 8f6f 	isb	sy
 80048b6:	e772      	b.n	800479e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80048b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80048ba:	f000 faa1 	bl	8004e00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048be:	f000 fd7d 	bl	80053bc <xTaskResumeAll>
 80048c2:	e76c      	b.n	800479e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80048c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80048c6:	f000 fa9b 	bl	8004e00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048ca:	f000 fd77 	bl	80053bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80048ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3738      	adds	r7, #56	@ 0x38
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	e000ed04 	.word	0xe000ed04

080048dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b090      	sub	sp, #64	@ 0x40
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
 80048e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80048ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10b      	bne.n	800490c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80048f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f8:	f383 8811 	msr	BASEPRI, r3
 80048fc:	f3bf 8f6f 	isb	sy
 8004900:	f3bf 8f4f 	dsb	sy
 8004904:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004906:	bf00      	nop
 8004908:	bf00      	nop
 800490a:	e7fd      	b.n	8004908 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d103      	bne.n	800491a <xQueueGenericSendFromISR+0x3e>
 8004912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <xQueueGenericSendFromISR+0x42>
 800491a:	2301      	movs	r3, #1
 800491c:	e000      	b.n	8004920 <xQueueGenericSendFromISR+0x44>
 800491e:	2300      	movs	r3, #0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10b      	bne.n	800493c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004928:	f383 8811 	msr	BASEPRI, r3
 800492c:	f3bf 8f6f 	isb	sy
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004936:	bf00      	nop
 8004938:	bf00      	nop
 800493a:	e7fd      	b.n	8004938 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	2b02      	cmp	r3, #2
 8004940:	d103      	bne.n	800494a <xQueueGenericSendFromISR+0x6e>
 8004942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004946:	2b01      	cmp	r3, #1
 8004948:	d101      	bne.n	800494e <xQueueGenericSendFromISR+0x72>
 800494a:	2301      	movs	r3, #1
 800494c:	e000      	b.n	8004950 <xQueueGenericSendFromISR+0x74>
 800494e:	2300      	movs	r3, #0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10b      	bne.n	800496c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004958:	f383 8811 	msr	BASEPRI, r3
 800495c:	f3bf 8f6f 	isb	sy
 8004960:	f3bf 8f4f 	dsb	sy
 8004964:	623b      	str	r3, [r7, #32]
}
 8004966:	bf00      	nop
 8004968:	bf00      	nop
 800496a:	e7fd      	b.n	8004968 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800496c:	f001 fbec 	bl	8006148 <vPortValidateInterruptPriority>
	__asm volatile
 8004970:	f3ef 8211 	mrs	r2, BASEPRI
 8004974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004978:	f383 8811 	msr	BASEPRI, r3
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	61fa      	str	r2, [r7, #28]
 8004986:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8004988:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800498a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800498c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800498e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004994:	429a      	cmp	r2, r3
 8004996:	d302      	bcc.n	800499e <xQueueGenericSendFromISR+0xc2>
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	2b02      	cmp	r3, #2
 800499c:	d12f      	bne.n	80049fe <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800499e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80049a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	68b9      	ldr	r1, [r7, #8]
 80049b2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80049b4:	f000 f994 	bl	8004ce0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80049b8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80049bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c0:	d112      	bne.n	80049e8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d016      	beq.n	80049f8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049cc:	3324      	adds	r3, #36	@ 0x24
 80049ce:	4618      	mov	r0, r3
 80049d0:	f000 fed6 	bl	8005780 <xTaskRemoveFromEventList>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00e      	beq.n	80049f8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00b      	beq.n	80049f8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	e007      	b.n	80049f8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80049e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80049ec:	3301      	adds	r3, #1
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	b25a      	sxtb	r2, r3
 80049f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80049f8:	2301      	movs	r3, #1
 80049fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80049fc:	e001      	b.n	8004a02 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80049fe:	2300      	movs	r3, #0
 8004a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a04:	617b      	str	r3, [r7, #20]
	__asm volatile
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f383 8811 	msr	BASEPRI, r3
}
 8004a0c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3740      	adds	r7, #64	@ 0x40
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b08c      	sub	sp, #48	@ 0x30
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a24:	2300      	movs	r3, #0
 8004a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10b      	bne.n	8004a4a <xQueueReceive+0x32>
	__asm volatile
 8004a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a36:	f383 8811 	msr	BASEPRI, r3
 8004a3a:	f3bf 8f6f 	isb	sy
 8004a3e:	f3bf 8f4f 	dsb	sy
 8004a42:	623b      	str	r3, [r7, #32]
}
 8004a44:	bf00      	nop
 8004a46:	bf00      	nop
 8004a48:	e7fd      	b.n	8004a46 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d103      	bne.n	8004a58 <xQueueReceive+0x40>
 8004a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d101      	bne.n	8004a5c <xQueueReceive+0x44>
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e000      	b.n	8004a5e <xQueueReceive+0x46>
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10b      	bne.n	8004a7a <xQueueReceive+0x62>
	__asm volatile
 8004a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a66:	f383 8811 	msr	BASEPRI, r3
 8004a6a:	f3bf 8f6f 	isb	sy
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	61fb      	str	r3, [r7, #28]
}
 8004a74:	bf00      	nop
 8004a76:	bf00      	nop
 8004a78:	e7fd      	b.n	8004a76 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a7a:	f001 f847 	bl	8005b0c <xTaskGetSchedulerState>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d102      	bne.n	8004a8a <xQueueReceive+0x72>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <xQueueReceive+0x76>
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e000      	b.n	8004a90 <xQueueReceive+0x78>
 8004a8e:	2300      	movs	r3, #0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d10b      	bne.n	8004aac <xQueueReceive+0x94>
	__asm volatile
 8004a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a98:	f383 8811 	msr	BASEPRI, r3
 8004a9c:	f3bf 8f6f 	isb	sy
 8004aa0:	f3bf 8f4f 	dsb	sy
 8004aa4:	61bb      	str	r3, [r7, #24]
}
 8004aa6:	bf00      	nop
 8004aa8:	bf00      	nop
 8004aaa:	e7fd      	b.n	8004aa8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004aac:	f001 fa6c 	bl	8005f88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d01f      	beq.n	8004afc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004abc:	68b9      	ldr	r1, [r7, #8]
 8004abe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ac0:	f000 f978 	bl	8004db4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac6:	1e5a      	subs	r2, r3, #1
 8004ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aca:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00f      	beq.n	8004af4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad6:	3310      	adds	r3, #16
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f000 fe51 	bl	8005780 <xTaskRemoveFromEventList>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d007      	beq.n	8004af4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004ae4:	4b3c      	ldr	r3, [pc, #240]	@ (8004bd8 <xQueueReceive+0x1c0>)
 8004ae6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004af4:	f001 fa7a 	bl	8005fec <vPortExitCritical>
				return pdPASS;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e069      	b.n	8004bd0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d103      	bne.n	8004b0a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b02:	f001 fa73 	bl	8005fec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b06:	2300      	movs	r3, #0
 8004b08:	e062      	b.n	8004bd0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d106      	bne.n	8004b1e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b10:	f107 0310 	add.w	r3, r7, #16
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 fe97 	bl	8005848 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b1e:	f001 fa65 	bl	8005fec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b22:	f000 fc3d 	bl	80053a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b26:	f001 fa2f 	bl	8005f88 <vPortEnterCritical>
 8004b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b30:	b25b      	sxtb	r3, r3
 8004b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b36:	d103      	bne.n	8004b40 <xQueueReceive+0x128>
 8004b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b46:	b25b      	sxtb	r3, r3
 8004b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4c:	d103      	bne.n	8004b56 <xQueueReceive+0x13e>
 8004b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b56:	f001 fa49 	bl	8005fec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b5a:	1d3a      	adds	r2, r7, #4
 8004b5c:	f107 0310 	add.w	r3, r7, #16
 8004b60:	4611      	mov	r1, r2
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 fe86 	bl	8005874 <xTaskCheckForTimeOut>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d123      	bne.n	8004bb6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b70:	f000 f998 	bl	8004ea4 <prvIsQueueEmpty>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d017      	beq.n	8004baa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b7c:	3324      	adds	r3, #36	@ 0x24
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	4611      	mov	r1, r2
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 fdd6 	bl	8005734 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b8a:	f000 f939 	bl	8004e00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b8e:	f000 fc15 	bl	80053bc <xTaskResumeAll>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d189      	bne.n	8004aac <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004b98:	4b0f      	ldr	r3, [pc, #60]	@ (8004bd8 <xQueueReceive+0x1c0>)
 8004b9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b9e:	601a      	str	r2, [r3, #0]
 8004ba0:	f3bf 8f4f 	dsb	sy
 8004ba4:	f3bf 8f6f 	isb	sy
 8004ba8:	e780      	b.n	8004aac <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004baa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bac:	f000 f928 	bl	8004e00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bb0:	f000 fc04 	bl	80053bc <xTaskResumeAll>
 8004bb4:	e77a      	b.n	8004aac <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004bb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bb8:	f000 f922 	bl	8004e00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bbc:	f000 fbfe 	bl	80053bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bc2:	f000 f96f 	bl	8004ea4 <prvIsQueueEmpty>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f43f af6f 	beq.w	8004aac <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004bce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3730      	adds	r7, #48	@ 0x30
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	e000ed04 	.word	0xe000ed04

08004bdc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b08e      	sub	sp, #56	@ 0x38
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10b      	bne.n	8004c0a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8004bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf6:	f383 8811 	msr	BASEPRI, r3
 8004bfa:	f3bf 8f6f 	isb	sy
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	623b      	str	r3, [r7, #32]
}
 8004c04:	bf00      	nop
 8004c06:	bf00      	nop
 8004c08:	e7fd      	b.n	8004c06 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d103      	bne.n	8004c18 <xQueueReceiveFromISR+0x3c>
 8004c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <xQueueReceiveFromISR+0x40>
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e000      	b.n	8004c1e <xQueueReceiveFromISR+0x42>
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10b      	bne.n	8004c3a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c26:	f383 8811 	msr	BASEPRI, r3
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	61fb      	str	r3, [r7, #28]
}
 8004c34:	bf00      	nop
 8004c36:	bf00      	nop
 8004c38:	e7fd      	b.n	8004c36 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c3a:	f001 fa85 	bl	8006148 <vPortValidateInterruptPriority>
	__asm volatile
 8004c3e:	f3ef 8211 	mrs	r2, BASEPRI
 8004c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c46:	f383 8811 	msr	BASEPRI, r3
 8004c4a:	f3bf 8f6f 	isb	sy
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	61ba      	str	r2, [r7, #24]
 8004c54:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004c56:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c5e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d02f      	beq.n	8004cc6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c70:	68b9      	ldr	r1, [r7, #8]
 8004c72:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c74:	f000 f89e 	bl	8004db4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c7a:	1e5a      	subs	r2, r3, #1
 8004c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c7e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004c80:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c88:	d112      	bne.n	8004cb0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d016      	beq.n	8004cc0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c94:	3310      	adds	r3, #16
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 fd72 	bl	8005780 <xTaskRemoveFromEventList>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00e      	beq.n	8004cc0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00b      	beq.n	8004cc0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	601a      	str	r2, [r3, #0]
 8004cae:	e007      	b.n	8004cc0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	b25a      	sxtb	r2, r3
 8004cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cc4:	e001      	b.n	8004cca <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ccc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	f383 8811 	msr	BASEPRI, r3
}
 8004cd4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3738      	adds	r7, #56	@ 0x38
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004cec:	2300      	movs	r3, #0
 8004cee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cf4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10d      	bne.n	8004d1a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d14d      	bne.n	8004da2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f000 ff1c 	bl	8005b48 <xTaskPriorityDisinherit>
 8004d10:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	609a      	str	r2, [r3, #8]
 8004d18:	e043      	b.n	8004da2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d119      	bne.n	8004d54 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6858      	ldr	r0, [r3, #4]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d28:	461a      	mov	r2, r3
 8004d2a:	68b9      	ldr	r1, [r7, #8]
 8004d2c:	f001 fd00 	bl	8006730 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d38:	441a      	add	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d32b      	bcc.n	8004da2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	605a      	str	r2, [r3, #4]
 8004d52:	e026      	b.n	8004da2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	68d8      	ldr	r0, [r3, #12]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	68b9      	ldr	r1, [r7, #8]
 8004d60:	f001 fce6 	bl	8006730 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	68da      	ldr	r2, [r3, #12]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d6c:	425b      	negs	r3, r3
 8004d6e:	441a      	add	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	68da      	ldr	r2, [r3, #12]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d207      	bcs.n	8004d90 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d88:	425b      	negs	r3, r3
 8004d8a:	441a      	add	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d105      	bne.n	8004da2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d002      	beq.n	8004da2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1c5a      	adds	r2, r3, #1
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004daa:	697b      	ldr	r3, [r7, #20]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3718      	adds	r7, #24
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d018      	beq.n	8004df8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68da      	ldr	r2, [r3, #12]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dce:	441a      	add	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	68da      	ldr	r2, [r3, #12]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d303      	bcc.n	8004de8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68d9      	ldr	r1, [r3, #12]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df0:	461a      	mov	r2, r3
 8004df2:	6838      	ldr	r0, [r7, #0]
 8004df4:	f001 fc9c 	bl	8006730 <memcpy>
	}
}
 8004df8:	bf00      	nop
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004e08:	f001 f8be 	bl	8005f88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e12:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e14:	e011      	b.n	8004e3a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d012      	beq.n	8004e44 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	3324      	adds	r3, #36	@ 0x24
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 fcac 	bl	8005780 <xTaskRemoveFromEventList>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004e2e:	f000 fd85 	bl	800593c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004e32:	7bfb      	ldrb	r3, [r7, #15]
 8004e34:	3b01      	subs	r3, #1
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	dce9      	bgt.n	8004e16 <prvUnlockQueue+0x16>
 8004e42:	e000      	b.n	8004e46 <prvUnlockQueue+0x46>
					break;
 8004e44:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	22ff      	movs	r2, #255	@ 0xff
 8004e4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004e4e:	f001 f8cd 	bl	8005fec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004e52:	f001 f899 	bl	8005f88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e5c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e5e:	e011      	b.n	8004e84 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d012      	beq.n	8004e8e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	3310      	adds	r3, #16
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f000 fc87 	bl	8005780 <xTaskRemoveFromEventList>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d001      	beq.n	8004e7c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004e78:	f000 fd60 	bl	800593c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004e7c:	7bbb      	ldrb	r3, [r7, #14]
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	dce9      	bgt.n	8004e60 <prvUnlockQueue+0x60>
 8004e8c:	e000      	b.n	8004e90 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004e8e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	22ff      	movs	r2, #255	@ 0xff
 8004e94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004e98:	f001 f8a8 	bl	8005fec <vPortExitCritical>
}
 8004e9c:	bf00      	nop
 8004e9e:	3710      	adds	r7, #16
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004eac:	f001 f86c 	bl	8005f88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d102      	bne.n	8004ebe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	60fb      	str	r3, [r7, #12]
 8004ebc:	e001      	b.n	8004ec2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ec2:	f001 f893 	bl	8005fec <vPortExitCritical>

	return xReturn;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ed8:	f001 f856 	bl	8005f88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d102      	bne.n	8004eee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	60fb      	str	r3, [r7, #12]
 8004eec:	e001      	b.n	8004ef2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ef2:	f001 f87b 	bl	8005fec <vPortExitCritical>

	return xReturn;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b08e      	sub	sp, #56	@ 0x38
 8004f04:	af04      	add	r7, sp, #16
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
 8004f0c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d10b      	bne.n	8004f2c <xTaskCreateStatic+0x2c>
	__asm volatile
 8004f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f18:	f383 8811 	msr	BASEPRI, r3
 8004f1c:	f3bf 8f6f 	isb	sy
 8004f20:	f3bf 8f4f 	dsb	sy
 8004f24:	623b      	str	r3, [r7, #32]
}
 8004f26:	bf00      	nop
 8004f28:	bf00      	nop
 8004f2a:	e7fd      	b.n	8004f28 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10b      	bne.n	8004f4a <xTaskCreateStatic+0x4a>
	__asm volatile
 8004f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f36:	f383 8811 	msr	BASEPRI, r3
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	61fb      	str	r3, [r7, #28]
}
 8004f44:	bf00      	nop
 8004f46:	bf00      	nop
 8004f48:	e7fd      	b.n	8004f46 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004f4a:	23a0      	movs	r3, #160	@ 0xa0
 8004f4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	2ba0      	cmp	r3, #160	@ 0xa0
 8004f52:	d00b      	beq.n	8004f6c <xTaskCreateStatic+0x6c>
	__asm volatile
 8004f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f58:	f383 8811 	msr	BASEPRI, r3
 8004f5c:	f3bf 8f6f 	isb	sy
 8004f60:	f3bf 8f4f 	dsb	sy
 8004f64:	61bb      	str	r3, [r7, #24]
}
 8004f66:	bf00      	nop
 8004f68:	bf00      	nop
 8004f6a:	e7fd      	b.n	8004f68 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004f6c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d01e      	beq.n	8004fb2 <xTaskCreateStatic+0xb2>
 8004f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d01b      	beq.n	8004fb2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f7c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004f82:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	9303      	str	r3, [sp, #12]
 8004f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f92:	9302      	str	r3, [sp, #8]
 8004f94:	f107 0314 	add.w	r3, r7, #20
 8004f98:	9301      	str	r3, [sp, #4]
 8004f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f9c:	9300      	str	r3, [sp, #0]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	68b9      	ldr	r1, [r7, #8]
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f000 f851 	bl	800504c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004faa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004fac:	f000 f8ee 	bl	800518c <prvAddNewTaskToReadyList>
 8004fb0:	e001      	b.n	8004fb6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004fb6:	697b      	ldr	r3, [r7, #20]
	}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3728      	adds	r7, #40	@ 0x28
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b08c      	sub	sp, #48	@ 0x30
 8004fc4:	af04      	add	r7, sp, #16
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	603b      	str	r3, [r7, #0]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004fd0:	88fb      	ldrh	r3, [r7, #6]
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f001 f8f9 	bl	80061cc <pvPortMalloc>
 8004fda:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00e      	beq.n	8005000 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004fe2:	20a0      	movs	r0, #160	@ 0xa0
 8004fe4:	f001 f8f2 	bl	80061cc <pvPortMalloc>
 8004fe8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d003      	beq.n	8004ff8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ff6:	e005      	b.n	8005004 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004ff8:	6978      	ldr	r0, [r7, #20]
 8004ffa:	f001 f9b5 	bl	8006368 <vPortFree>
 8004ffe:	e001      	b.n	8005004 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005000:	2300      	movs	r3, #0
 8005002:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d017      	beq.n	800503a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005012:	88fa      	ldrh	r2, [r7, #6]
 8005014:	2300      	movs	r3, #0
 8005016:	9303      	str	r3, [sp, #12]
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	9302      	str	r3, [sp, #8]
 800501c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800501e:	9301      	str	r3, [sp, #4]
 8005020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	68b9      	ldr	r1, [r7, #8]
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f000 f80f 	bl	800504c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800502e:	69f8      	ldr	r0, [r7, #28]
 8005030:	f000 f8ac 	bl	800518c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005034:	2301      	movs	r3, #1
 8005036:	61bb      	str	r3, [r7, #24]
 8005038:	e002      	b.n	8005040 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800503a:	f04f 33ff 	mov.w	r3, #4294967295
 800503e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005040:	69bb      	ldr	r3, [r7, #24]
	}
 8005042:	4618      	mov	r0, r3
 8005044:	3720      	adds	r7, #32
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
	...

0800504c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b088      	sub	sp, #32
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
 8005058:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800505a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800505c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005064:	3b01      	subs	r3, #1
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	f023 0307 	bic.w	r3, r3, #7
 8005072:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	f003 0307 	and.w	r3, r3, #7
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00b      	beq.n	8005096 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800507e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005082:	f383 8811 	msr	BASEPRI, r3
 8005086:	f3bf 8f6f 	isb	sy
 800508a:	f3bf 8f4f 	dsb	sy
 800508e:	617b      	str	r3, [r7, #20]
}
 8005090:	bf00      	nop
 8005092:	bf00      	nop
 8005094:	e7fd      	b.n	8005092 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d01f      	beq.n	80050dc <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800509c:	2300      	movs	r3, #0
 800509e:	61fb      	str	r3, [r7, #28]
 80050a0:	e012      	b.n	80050c8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	4413      	add	r3, r2
 80050a8:	7819      	ldrb	r1, [r3, #0]
 80050aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	4413      	add	r3, r2
 80050b0:	3334      	adds	r3, #52	@ 0x34
 80050b2:	460a      	mov	r2, r1
 80050b4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	4413      	add	r3, r2
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d006      	beq.n	80050d0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	3301      	adds	r3, #1
 80050c6:	61fb      	str	r3, [r7, #28]
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	2b0f      	cmp	r3, #15
 80050cc:	d9e9      	bls.n	80050a2 <prvInitialiseNewTask+0x56>
 80050ce:	e000      	b.n	80050d2 <prvInitialiseNewTask+0x86>
			{
				break;
 80050d0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80050d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80050da:	e003      	b.n	80050e4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80050dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80050e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e6:	2b06      	cmp	r3, #6
 80050e8:	d901      	bls.n	80050ee <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80050ea:	2306      	movs	r3, #6
 80050ec:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80050ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050f2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80050f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050f8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80050fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050fc:	2200      	movs	r2, #0
 80050fe:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005102:	3304      	adds	r3, #4
 8005104:	4618      	mov	r0, r3
 8005106:	f7ff f910 	bl	800432a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800510a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800510c:	3318      	adds	r3, #24
 800510e:	4618      	mov	r0, r3
 8005110:	f7ff f90b 	bl	800432a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005116:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005118:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800511a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800511c:	f1c3 0207 	rsb	r2, r3, #7
 8005120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005122:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005126:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005128:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800512a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800512c:	2200      	movs	r2, #0
 800512e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005134:	2200      	movs	r2, #0
 8005136:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800513a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800513c:	334c      	adds	r3, #76	@ 0x4c
 800513e:	224c      	movs	r2, #76	@ 0x4c
 8005140:	2100      	movs	r1, #0
 8005142:	4618      	mov	r0, r3
 8005144:	f001 fa62 	bl	800660c <memset>
 8005148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800514a:	4a0d      	ldr	r2, [pc, #52]	@ (8005180 <prvInitialiseNewTask+0x134>)
 800514c:	651a      	str	r2, [r3, #80]	@ 0x50
 800514e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005150:	4a0c      	ldr	r2, [pc, #48]	@ (8005184 <prvInitialiseNewTask+0x138>)
 8005152:	655a      	str	r2, [r3, #84]	@ 0x54
 8005154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005156:	4a0c      	ldr	r2, [pc, #48]	@ (8005188 <prvInitialiseNewTask+0x13c>)
 8005158:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800515a:	683a      	ldr	r2, [r7, #0]
 800515c:	68f9      	ldr	r1, [r7, #12]
 800515e:	69b8      	ldr	r0, [r7, #24]
 8005160:	f000 fde0 	bl	8005d24 <pxPortInitialiseStack>
 8005164:	4602      	mov	r2, r0
 8005166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005168:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800516a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800516c:	2b00      	cmp	r3, #0
 800516e:	d002      	beq.n	8005176 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005172:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005174:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005176:	bf00      	nop
 8005178:	3720      	adds	r7, #32
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	20004214 	.word	0x20004214
 8005184:	2000427c 	.word	0x2000427c
 8005188:	200042e4 	.word	0x200042e4

0800518c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005194:	f000 fef8 	bl	8005f88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005198:	4b2a      	ldr	r3, [pc, #168]	@ (8005244 <prvAddNewTaskToReadyList+0xb8>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	3301      	adds	r3, #1
 800519e:	4a29      	ldr	r2, [pc, #164]	@ (8005244 <prvAddNewTaskToReadyList+0xb8>)
 80051a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80051a2:	4b29      	ldr	r3, [pc, #164]	@ (8005248 <prvAddNewTaskToReadyList+0xbc>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d109      	bne.n	80051be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80051aa:	4a27      	ldr	r2, [pc, #156]	@ (8005248 <prvAddNewTaskToReadyList+0xbc>)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80051b0:	4b24      	ldr	r3, [pc, #144]	@ (8005244 <prvAddNewTaskToReadyList+0xb8>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d110      	bne.n	80051da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80051b8:	f000 fbe4 	bl	8005984 <prvInitialiseTaskLists>
 80051bc:	e00d      	b.n	80051da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80051be:	4b23      	ldr	r3, [pc, #140]	@ (800524c <prvAddNewTaskToReadyList+0xc0>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d109      	bne.n	80051da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80051c6:	4b20      	ldr	r3, [pc, #128]	@ (8005248 <prvAddNewTaskToReadyList+0xbc>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d802      	bhi.n	80051da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80051d4:	4a1c      	ldr	r2, [pc, #112]	@ (8005248 <prvAddNewTaskToReadyList+0xbc>)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80051da:	4b1d      	ldr	r3, [pc, #116]	@ (8005250 <prvAddNewTaskToReadyList+0xc4>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	3301      	adds	r3, #1
 80051e0:	4a1b      	ldr	r2, [pc, #108]	@ (8005250 <prvAddNewTaskToReadyList+0xc4>)
 80051e2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e8:	2201      	movs	r2, #1
 80051ea:	409a      	lsls	r2, r3
 80051ec:	4b19      	ldr	r3, [pc, #100]	@ (8005254 <prvAddNewTaskToReadyList+0xc8>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	4a18      	ldr	r2, [pc, #96]	@ (8005254 <prvAddNewTaskToReadyList+0xc8>)
 80051f4:	6013      	str	r3, [r2, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051fa:	4613      	mov	r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4413      	add	r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4a15      	ldr	r2, [pc, #84]	@ (8005258 <prvAddNewTaskToReadyList+0xcc>)
 8005204:	441a      	add	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	3304      	adds	r3, #4
 800520a:	4619      	mov	r1, r3
 800520c:	4610      	mov	r0, r2
 800520e:	f7ff f899 	bl	8004344 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005212:	f000 feeb 	bl	8005fec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005216:	4b0d      	ldr	r3, [pc, #52]	@ (800524c <prvAddNewTaskToReadyList+0xc0>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00e      	beq.n	800523c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800521e:	4b0a      	ldr	r3, [pc, #40]	@ (8005248 <prvAddNewTaskToReadyList+0xbc>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005228:	429a      	cmp	r2, r3
 800522a:	d207      	bcs.n	800523c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800522c:	4b0b      	ldr	r3, [pc, #44]	@ (800525c <prvAddNewTaskToReadyList+0xd0>)
 800522e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	f3bf 8f4f 	dsb	sy
 8005238:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800523c:	bf00      	nop
 800523e:	3708      	adds	r7, #8
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	200005c0 	.word	0x200005c0
 8005248:	200004c0 	.word	0x200004c0
 800524c:	200005cc 	.word	0x200005cc
 8005250:	200005dc 	.word	0x200005dc
 8005254:	200005c8 	.word	0x200005c8
 8005258:	200004c4 	.word	0x200004c4
 800525c:	e000ed04 	.word	0xe000ed04

08005260 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005268:	2300      	movs	r3, #0
 800526a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d018      	beq.n	80052a4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005272:	4b14      	ldr	r3, [pc, #80]	@ (80052c4 <vTaskDelay+0x64>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00b      	beq.n	8005292 <vTaskDelay+0x32>
	__asm volatile
 800527a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800527e:	f383 8811 	msr	BASEPRI, r3
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	60bb      	str	r3, [r7, #8]
}
 800528c:	bf00      	nop
 800528e:	bf00      	nop
 8005290:	e7fd      	b.n	800528e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005292:	f000 f885 	bl	80053a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005296:	2100      	movs	r1, #0
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 fcdd 	bl	8005c58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800529e:	f000 f88d 	bl	80053bc <xTaskResumeAll>
 80052a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d107      	bne.n	80052ba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80052aa:	4b07      	ldr	r3, [pc, #28]	@ (80052c8 <vTaskDelay+0x68>)
 80052ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052b0:	601a      	str	r2, [r3, #0]
 80052b2:	f3bf 8f4f 	dsb	sy
 80052b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80052ba:	bf00      	nop
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	200005e8 	.word	0x200005e8
 80052c8:	e000ed04 	.word	0xe000ed04

080052cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b08a      	sub	sp, #40	@ 0x28
 80052d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80052d2:	2300      	movs	r3, #0
 80052d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80052d6:	2300      	movs	r3, #0
 80052d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80052da:	463a      	mov	r2, r7
 80052dc:	1d39      	adds	r1, r7, #4
 80052de:	f107 0308 	add.w	r3, r7, #8
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7fb f962 	bl	80005ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80052e8:	6839      	ldr	r1, [r7, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	9202      	str	r2, [sp, #8]
 80052f0:	9301      	str	r3, [sp, #4]
 80052f2:	2300      	movs	r3, #0
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	2300      	movs	r3, #0
 80052f8:	460a      	mov	r2, r1
 80052fa:	4921      	ldr	r1, [pc, #132]	@ (8005380 <vTaskStartScheduler+0xb4>)
 80052fc:	4821      	ldr	r0, [pc, #132]	@ (8005384 <vTaskStartScheduler+0xb8>)
 80052fe:	f7ff fdff 	bl	8004f00 <xTaskCreateStatic>
 8005302:	4603      	mov	r3, r0
 8005304:	4a20      	ldr	r2, [pc, #128]	@ (8005388 <vTaskStartScheduler+0xbc>)
 8005306:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005308:	4b1f      	ldr	r3, [pc, #124]	@ (8005388 <vTaskStartScheduler+0xbc>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d002      	beq.n	8005316 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005310:	2301      	movs	r3, #1
 8005312:	617b      	str	r3, [r7, #20]
 8005314:	e001      	b.n	800531a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005316:	2300      	movs	r3, #0
 8005318:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	2b01      	cmp	r3, #1
 800531e:	d11b      	bne.n	8005358 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005324:	f383 8811 	msr	BASEPRI, r3
 8005328:	f3bf 8f6f 	isb	sy
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	613b      	str	r3, [r7, #16]
}
 8005332:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005334:	4b15      	ldr	r3, [pc, #84]	@ (800538c <vTaskStartScheduler+0xc0>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	334c      	adds	r3, #76	@ 0x4c
 800533a:	4a15      	ldr	r2, [pc, #84]	@ (8005390 <vTaskStartScheduler+0xc4>)
 800533c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800533e:	4b15      	ldr	r3, [pc, #84]	@ (8005394 <vTaskStartScheduler+0xc8>)
 8005340:	f04f 32ff 	mov.w	r2, #4294967295
 8005344:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005346:	4b14      	ldr	r3, [pc, #80]	@ (8005398 <vTaskStartScheduler+0xcc>)
 8005348:	2201      	movs	r2, #1
 800534a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800534c:	4b13      	ldr	r3, [pc, #76]	@ (800539c <vTaskStartScheduler+0xd0>)
 800534e:	2200      	movs	r2, #0
 8005350:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005352:	f000 fd75 	bl	8005e40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005356:	e00f      	b.n	8005378 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800535e:	d10b      	bne.n	8005378 <vTaskStartScheduler+0xac>
	__asm volatile
 8005360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005364:	f383 8811 	msr	BASEPRI, r3
 8005368:	f3bf 8f6f 	isb	sy
 800536c:	f3bf 8f4f 	dsb	sy
 8005370:	60fb      	str	r3, [r7, #12]
}
 8005372:	bf00      	nop
 8005374:	bf00      	nop
 8005376:	e7fd      	b.n	8005374 <vTaskStartScheduler+0xa8>
}
 8005378:	bf00      	nop
 800537a:	3718      	adds	r7, #24
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	080070e0 	.word	0x080070e0
 8005384:	08005955 	.word	0x08005955
 8005388:	200005e4 	.word	0x200005e4
 800538c:	200004c0 	.word	0x200004c0
 8005390:	20000070 	.word	0x20000070
 8005394:	200005e0 	.word	0x200005e0
 8005398:	200005cc 	.word	0x200005cc
 800539c:	200005c4 	.word	0x200005c4

080053a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80053a0:	b480      	push	{r7}
 80053a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80053a4:	4b04      	ldr	r3, [pc, #16]	@ (80053b8 <vTaskSuspendAll+0x18>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	3301      	adds	r3, #1
 80053aa:	4a03      	ldr	r2, [pc, #12]	@ (80053b8 <vTaskSuspendAll+0x18>)
 80053ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80053ae:	bf00      	nop
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr
 80053b8:	200005e8 	.word	0x200005e8

080053bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80053c2:	2300      	movs	r3, #0
 80053c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80053c6:	2300      	movs	r3, #0
 80053c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80053ca:	4b42      	ldr	r3, [pc, #264]	@ (80054d4 <xTaskResumeAll+0x118>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10b      	bne.n	80053ea <xTaskResumeAll+0x2e>
	__asm volatile
 80053d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d6:	f383 8811 	msr	BASEPRI, r3
 80053da:	f3bf 8f6f 	isb	sy
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	603b      	str	r3, [r7, #0]
}
 80053e4:	bf00      	nop
 80053e6:	bf00      	nop
 80053e8:	e7fd      	b.n	80053e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80053ea:	f000 fdcd 	bl	8005f88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80053ee:	4b39      	ldr	r3, [pc, #228]	@ (80054d4 <xTaskResumeAll+0x118>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	3b01      	subs	r3, #1
 80053f4:	4a37      	ldr	r2, [pc, #220]	@ (80054d4 <xTaskResumeAll+0x118>)
 80053f6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053f8:	4b36      	ldr	r3, [pc, #216]	@ (80054d4 <xTaskResumeAll+0x118>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d161      	bne.n	80054c4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005400:	4b35      	ldr	r3, [pc, #212]	@ (80054d8 <xTaskResumeAll+0x11c>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d05d      	beq.n	80054c4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005408:	e02e      	b.n	8005468 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800540a:	4b34      	ldr	r3, [pc, #208]	@ (80054dc <xTaskResumeAll+0x120>)
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	3318      	adds	r3, #24
 8005416:	4618      	mov	r0, r3
 8005418:	f7fe fff1 	bl	80043fe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	3304      	adds	r3, #4
 8005420:	4618      	mov	r0, r3
 8005422:	f7fe ffec 	bl	80043fe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800542a:	2201      	movs	r2, #1
 800542c:	409a      	lsls	r2, r3
 800542e:	4b2c      	ldr	r3, [pc, #176]	@ (80054e0 <xTaskResumeAll+0x124>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4313      	orrs	r3, r2
 8005434:	4a2a      	ldr	r2, [pc, #168]	@ (80054e0 <xTaskResumeAll+0x124>)
 8005436:	6013      	str	r3, [r2, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800543c:	4613      	mov	r3, r2
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	4413      	add	r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	4a27      	ldr	r2, [pc, #156]	@ (80054e4 <xTaskResumeAll+0x128>)
 8005446:	441a      	add	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	3304      	adds	r3, #4
 800544c:	4619      	mov	r1, r3
 800544e:	4610      	mov	r0, r2
 8005450:	f7fe ff78 	bl	8004344 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005458:	4b23      	ldr	r3, [pc, #140]	@ (80054e8 <xTaskResumeAll+0x12c>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800545e:	429a      	cmp	r2, r3
 8005460:	d302      	bcc.n	8005468 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005462:	4b22      	ldr	r3, [pc, #136]	@ (80054ec <xTaskResumeAll+0x130>)
 8005464:	2201      	movs	r2, #1
 8005466:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005468:	4b1c      	ldr	r3, [pc, #112]	@ (80054dc <xTaskResumeAll+0x120>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1cc      	bne.n	800540a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d001      	beq.n	800547a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005476:	f000 fb29 	bl	8005acc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800547a:	4b1d      	ldr	r3, [pc, #116]	@ (80054f0 <xTaskResumeAll+0x134>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d010      	beq.n	80054a8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005486:	f000 f837 	bl	80054f8 <xTaskIncrementTick>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d002      	beq.n	8005496 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005490:	4b16      	ldr	r3, [pc, #88]	@ (80054ec <xTaskResumeAll+0x130>)
 8005492:	2201      	movs	r2, #1
 8005494:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	3b01      	subs	r3, #1
 800549a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1f1      	bne.n	8005486 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80054a2:	4b13      	ldr	r3, [pc, #76]	@ (80054f0 <xTaskResumeAll+0x134>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80054a8:	4b10      	ldr	r3, [pc, #64]	@ (80054ec <xTaskResumeAll+0x130>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d009      	beq.n	80054c4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80054b0:	2301      	movs	r3, #1
 80054b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80054b4:	4b0f      	ldr	r3, [pc, #60]	@ (80054f4 <xTaskResumeAll+0x138>)
 80054b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054ba:	601a      	str	r2, [r3, #0]
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80054c4:	f000 fd92 	bl	8005fec <vPortExitCritical>

	return xAlreadyYielded;
 80054c8:	68bb      	ldr	r3, [r7, #8]
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	200005e8 	.word	0x200005e8
 80054d8:	200005c0 	.word	0x200005c0
 80054dc:	20000580 	.word	0x20000580
 80054e0:	200005c8 	.word	0x200005c8
 80054e4:	200004c4 	.word	0x200004c4
 80054e8:	200004c0 	.word	0x200004c0
 80054ec:	200005d4 	.word	0x200005d4
 80054f0:	200005d0 	.word	0x200005d0
 80054f4:	e000ed04 	.word	0xe000ed04

080054f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b086      	sub	sp, #24
 80054fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80054fe:	2300      	movs	r3, #0
 8005500:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005502:	4b4f      	ldr	r3, [pc, #316]	@ (8005640 <xTaskIncrementTick+0x148>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	f040 808f 	bne.w	800562a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800550c:	4b4d      	ldr	r3, [pc, #308]	@ (8005644 <xTaskIncrementTick+0x14c>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	3301      	adds	r3, #1
 8005512:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005514:	4a4b      	ldr	r2, [pc, #300]	@ (8005644 <xTaskIncrementTick+0x14c>)
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d121      	bne.n	8005564 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005520:	4b49      	ldr	r3, [pc, #292]	@ (8005648 <xTaskIncrementTick+0x150>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00b      	beq.n	8005542 <xTaskIncrementTick+0x4a>
	__asm volatile
 800552a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800552e:	f383 8811 	msr	BASEPRI, r3
 8005532:	f3bf 8f6f 	isb	sy
 8005536:	f3bf 8f4f 	dsb	sy
 800553a:	603b      	str	r3, [r7, #0]
}
 800553c:	bf00      	nop
 800553e:	bf00      	nop
 8005540:	e7fd      	b.n	800553e <xTaskIncrementTick+0x46>
 8005542:	4b41      	ldr	r3, [pc, #260]	@ (8005648 <xTaskIncrementTick+0x150>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	60fb      	str	r3, [r7, #12]
 8005548:	4b40      	ldr	r3, [pc, #256]	@ (800564c <xTaskIncrementTick+0x154>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a3e      	ldr	r2, [pc, #248]	@ (8005648 <xTaskIncrementTick+0x150>)
 800554e:	6013      	str	r3, [r2, #0]
 8005550:	4a3e      	ldr	r2, [pc, #248]	@ (800564c <xTaskIncrementTick+0x154>)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6013      	str	r3, [r2, #0]
 8005556:	4b3e      	ldr	r3, [pc, #248]	@ (8005650 <xTaskIncrementTick+0x158>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	3301      	adds	r3, #1
 800555c:	4a3c      	ldr	r2, [pc, #240]	@ (8005650 <xTaskIncrementTick+0x158>)
 800555e:	6013      	str	r3, [r2, #0]
 8005560:	f000 fab4 	bl	8005acc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005564:	4b3b      	ldr	r3, [pc, #236]	@ (8005654 <xTaskIncrementTick+0x15c>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	429a      	cmp	r2, r3
 800556c:	d348      	bcc.n	8005600 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800556e:	4b36      	ldr	r3, [pc, #216]	@ (8005648 <xTaskIncrementTick+0x150>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d104      	bne.n	8005582 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005578:	4b36      	ldr	r3, [pc, #216]	@ (8005654 <xTaskIncrementTick+0x15c>)
 800557a:	f04f 32ff 	mov.w	r2, #4294967295
 800557e:	601a      	str	r2, [r3, #0]
					break;
 8005580:	e03e      	b.n	8005600 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005582:	4b31      	ldr	r3, [pc, #196]	@ (8005648 <xTaskIncrementTick+0x150>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	429a      	cmp	r2, r3
 8005598:	d203      	bcs.n	80055a2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800559a:	4a2e      	ldr	r2, [pc, #184]	@ (8005654 <xTaskIncrementTick+0x15c>)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80055a0:	e02e      	b.n	8005600 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	3304      	adds	r3, #4
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7fe ff29 	bl	80043fe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d004      	beq.n	80055be <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	3318      	adds	r3, #24
 80055b8:	4618      	mov	r0, r3
 80055ba:	f7fe ff20 	bl	80043fe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c2:	2201      	movs	r2, #1
 80055c4:	409a      	lsls	r2, r3
 80055c6:	4b24      	ldr	r3, [pc, #144]	@ (8005658 <xTaskIncrementTick+0x160>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	4a22      	ldr	r2, [pc, #136]	@ (8005658 <xTaskIncrementTick+0x160>)
 80055ce:	6013      	str	r3, [r2, #0]
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055d4:	4613      	mov	r3, r2
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4413      	add	r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	4a1f      	ldr	r2, [pc, #124]	@ (800565c <xTaskIncrementTick+0x164>)
 80055de:	441a      	add	r2, r3
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	3304      	adds	r3, #4
 80055e4:	4619      	mov	r1, r3
 80055e6:	4610      	mov	r0, r2
 80055e8:	f7fe feac 	bl	8004344 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055f0:	4b1b      	ldr	r3, [pc, #108]	@ (8005660 <xTaskIncrementTick+0x168>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d3b9      	bcc.n	800556e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80055fa:	2301      	movs	r3, #1
 80055fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055fe:	e7b6      	b.n	800556e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005600:	4b17      	ldr	r3, [pc, #92]	@ (8005660 <xTaskIncrementTick+0x168>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005606:	4915      	ldr	r1, [pc, #84]	@ (800565c <xTaskIncrementTick+0x164>)
 8005608:	4613      	mov	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	4413      	add	r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	440b      	add	r3, r1
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d901      	bls.n	800561c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005618:	2301      	movs	r3, #1
 800561a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800561c:	4b11      	ldr	r3, [pc, #68]	@ (8005664 <xTaskIncrementTick+0x16c>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d007      	beq.n	8005634 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005624:	2301      	movs	r3, #1
 8005626:	617b      	str	r3, [r7, #20]
 8005628:	e004      	b.n	8005634 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800562a:	4b0f      	ldr	r3, [pc, #60]	@ (8005668 <xTaskIncrementTick+0x170>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	3301      	adds	r3, #1
 8005630:	4a0d      	ldr	r2, [pc, #52]	@ (8005668 <xTaskIncrementTick+0x170>)
 8005632:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005634:	697b      	ldr	r3, [r7, #20]
}
 8005636:	4618      	mov	r0, r3
 8005638:	3718      	adds	r7, #24
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	200005e8 	.word	0x200005e8
 8005644:	200005c4 	.word	0x200005c4
 8005648:	20000578 	.word	0x20000578
 800564c:	2000057c 	.word	0x2000057c
 8005650:	200005d8 	.word	0x200005d8
 8005654:	200005e0 	.word	0x200005e0
 8005658:	200005c8 	.word	0x200005c8
 800565c:	200004c4 	.word	0x200004c4
 8005660:	200004c0 	.word	0x200004c0
 8005664:	200005d4 	.word	0x200005d4
 8005668:	200005d0 	.word	0x200005d0

0800566c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800566c:	b480      	push	{r7}
 800566e:	b087      	sub	sp, #28
 8005670:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005672:	4b2a      	ldr	r3, [pc, #168]	@ (800571c <vTaskSwitchContext+0xb0>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d003      	beq.n	8005682 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800567a:	4b29      	ldr	r3, [pc, #164]	@ (8005720 <vTaskSwitchContext+0xb4>)
 800567c:	2201      	movs	r2, #1
 800567e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005680:	e045      	b.n	800570e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8005682:	4b27      	ldr	r3, [pc, #156]	@ (8005720 <vTaskSwitchContext+0xb4>)
 8005684:	2200      	movs	r2, #0
 8005686:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005688:	4b26      	ldr	r3, [pc, #152]	@ (8005724 <vTaskSwitchContext+0xb8>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	fab3 f383 	clz	r3, r3
 8005694:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005696:	7afb      	ldrb	r3, [r7, #11]
 8005698:	f1c3 031f 	rsb	r3, r3, #31
 800569c:	617b      	str	r3, [r7, #20]
 800569e:	4922      	ldr	r1, [pc, #136]	@ (8005728 <vTaskSwitchContext+0xbc>)
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	4613      	mov	r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4413      	add	r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	440b      	add	r3, r1
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10b      	bne.n	80056ca <vTaskSwitchContext+0x5e>
	__asm volatile
 80056b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b6:	f383 8811 	msr	BASEPRI, r3
 80056ba:	f3bf 8f6f 	isb	sy
 80056be:	f3bf 8f4f 	dsb	sy
 80056c2:	607b      	str	r3, [r7, #4]
}
 80056c4:	bf00      	nop
 80056c6:	bf00      	nop
 80056c8:	e7fd      	b.n	80056c6 <vTaskSwitchContext+0x5a>
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	4613      	mov	r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4413      	add	r3, r2
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4a14      	ldr	r2, [pc, #80]	@ (8005728 <vTaskSwitchContext+0xbc>)
 80056d6:	4413      	add	r3, r2
 80056d8:	613b      	str	r3, [r7, #16]
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	605a      	str	r2, [r3, #4]
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	685a      	ldr	r2, [r3, #4]
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	3308      	adds	r3, #8
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d104      	bne.n	80056fa <vTaskSwitchContext+0x8e>
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	605a      	str	r2, [r3, #4]
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	4a0a      	ldr	r2, [pc, #40]	@ (800572c <vTaskSwitchContext+0xc0>)
 8005702:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005704:	4b09      	ldr	r3, [pc, #36]	@ (800572c <vTaskSwitchContext+0xc0>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	334c      	adds	r3, #76	@ 0x4c
 800570a:	4a09      	ldr	r2, [pc, #36]	@ (8005730 <vTaskSwitchContext+0xc4>)
 800570c:	6013      	str	r3, [r2, #0]
}
 800570e:	bf00      	nop
 8005710:	371c      	adds	r7, #28
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	200005e8 	.word	0x200005e8
 8005720:	200005d4 	.word	0x200005d4
 8005724:	200005c8 	.word	0x200005c8
 8005728:	200004c4 	.word	0x200004c4
 800572c:	200004c0 	.word	0x200004c0
 8005730:	20000070 	.word	0x20000070

08005734 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d10b      	bne.n	800575c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005748:	f383 8811 	msr	BASEPRI, r3
 800574c:	f3bf 8f6f 	isb	sy
 8005750:	f3bf 8f4f 	dsb	sy
 8005754:	60fb      	str	r3, [r7, #12]
}
 8005756:	bf00      	nop
 8005758:	bf00      	nop
 800575a:	e7fd      	b.n	8005758 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800575c:	4b07      	ldr	r3, [pc, #28]	@ (800577c <vTaskPlaceOnEventList+0x48>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	3318      	adds	r3, #24
 8005762:	4619      	mov	r1, r3
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f7fe fe11 	bl	800438c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800576a:	2101      	movs	r1, #1
 800576c:	6838      	ldr	r0, [r7, #0]
 800576e:	f000 fa73 	bl	8005c58 <prvAddCurrentTaskToDelayedList>
}
 8005772:	bf00      	nop
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	200004c0 	.word	0x200004c0

08005780 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10b      	bne.n	80057ae <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800579a:	f383 8811 	msr	BASEPRI, r3
 800579e:	f3bf 8f6f 	isb	sy
 80057a2:	f3bf 8f4f 	dsb	sy
 80057a6:	60fb      	str	r3, [r7, #12]
}
 80057a8:	bf00      	nop
 80057aa:	bf00      	nop
 80057ac:	e7fd      	b.n	80057aa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	3318      	adds	r3, #24
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7fe fe23 	bl	80043fe <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057b8:	4b1d      	ldr	r3, [pc, #116]	@ (8005830 <xTaskRemoveFromEventList+0xb0>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d11c      	bne.n	80057fa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	3304      	adds	r3, #4
 80057c4:	4618      	mov	r0, r3
 80057c6:	f7fe fe1a 	bl	80043fe <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ce:	2201      	movs	r2, #1
 80057d0:	409a      	lsls	r2, r3
 80057d2:	4b18      	ldr	r3, [pc, #96]	@ (8005834 <xTaskRemoveFromEventList+0xb4>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	4a16      	ldr	r2, [pc, #88]	@ (8005834 <xTaskRemoveFromEventList+0xb4>)
 80057da:	6013      	str	r3, [r2, #0]
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057e0:	4613      	mov	r3, r2
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	4413      	add	r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4a13      	ldr	r2, [pc, #76]	@ (8005838 <xTaskRemoveFromEventList+0xb8>)
 80057ea:	441a      	add	r2, r3
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	3304      	adds	r3, #4
 80057f0:	4619      	mov	r1, r3
 80057f2:	4610      	mov	r0, r2
 80057f4:	f7fe fda6 	bl	8004344 <vListInsertEnd>
 80057f8:	e005      	b.n	8005806 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	3318      	adds	r3, #24
 80057fe:	4619      	mov	r1, r3
 8005800:	480e      	ldr	r0, [pc, #56]	@ (800583c <xTaskRemoveFromEventList+0xbc>)
 8005802:	f7fe fd9f 	bl	8004344 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800580a:	4b0d      	ldr	r3, [pc, #52]	@ (8005840 <xTaskRemoveFromEventList+0xc0>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005810:	429a      	cmp	r2, r3
 8005812:	d905      	bls.n	8005820 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005814:	2301      	movs	r3, #1
 8005816:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005818:	4b0a      	ldr	r3, [pc, #40]	@ (8005844 <xTaskRemoveFromEventList+0xc4>)
 800581a:	2201      	movs	r2, #1
 800581c:	601a      	str	r2, [r3, #0]
 800581e:	e001      	b.n	8005824 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005820:	2300      	movs	r3, #0
 8005822:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005824:	697b      	ldr	r3, [r7, #20]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3718      	adds	r7, #24
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	200005e8 	.word	0x200005e8
 8005834:	200005c8 	.word	0x200005c8
 8005838:	200004c4 	.word	0x200004c4
 800583c:	20000580 	.word	0x20000580
 8005840:	200004c0 	.word	0x200004c0
 8005844:	200005d4 	.word	0x200005d4

08005848 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005850:	4b06      	ldr	r3, [pc, #24]	@ (800586c <vTaskInternalSetTimeOutState+0x24>)
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005858:	4b05      	ldr	r3, [pc, #20]	@ (8005870 <vTaskInternalSetTimeOutState+0x28>)
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	605a      	str	r2, [r3, #4]
}
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr
 800586c:	200005d8 	.word	0x200005d8
 8005870:	200005c4 	.word	0x200005c4

08005874 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b088      	sub	sp, #32
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10b      	bne.n	800589c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005888:	f383 8811 	msr	BASEPRI, r3
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	f3bf 8f4f 	dsb	sy
 8005894:	613b      	str	r3, [r7, #16]
}
 8005896:	bf00      	nop
 8005898:	bf00      	nop
 800589a:	e7fd      	b.n	8005898 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10b      	bne.n	80058ba <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80058a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a6:	f383 8811 	msr	BASEPRI, r3
 80058aa:	f3bf 8f6f 	isb	sy
 80058ae:	f3bf 8f4f 	dsb	sy
 80058b2:	60fb      	str	r3, [r7, #12]
}
 80058b4:	bf00      	nop
 80058b6:	bf00      	nop
 80058b8:	e7fd      	b.n	80058b6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80058ba:	f000 fb65 	bl	8005f88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80058be:	4b1d      	ldr	r3, [pc, #116]	@ (8005934 <xTaskCheckForTimeOut+0xc0>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d6:	d102      	bne.n	80058de <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80058d8:	2300      	movs	r3, #0
 80058da:	61fb      	str	r3, [r7, #28]
 80058dc:	e023      	b.n	8005926 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	4b15      	ldr	r3, [pc, #84]	@ (8005938 <xTaskCheckForTimeOut+0xc4>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d007      	beq.n	80058fa <xTaskCheckForTimeOut+0x86>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	69ba      	ldr	r2, [r7, #24]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d302      	bcc.n	80058fa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80058f4:	2301      	movs	r3, #1
 80058f6:	61fb      	str	r3, [r7, #28]
 80058f8:	e015      	b.n	8005926 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	429a      	cmp	r2, r3
 8005902:	d20b      	bcs.n	800591c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	1ad2      	subs	r2, r2, r3
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f7ff ff99 	bl	8005848 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005916:	2300      	movs	r3, #0
 8005918:	61fb      	str	r3, [r7, #28]
 800591a:	e004      	b.n	8005926 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	2200      	movs	r2, #0
 8005920:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005922:	2301      	movs	r3, #1
 8005924:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005926:	f000 fb61 	bl	8005fec <vPortExitCritical>

	return xReturn;
 800592a:	69fb      	ldr	r3, [r7, #28]
}
 800592c:	4618      	mov	r0, r3
 800592e:	3720      	adds	r7, #32
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	200005c4 	.word	0x200005c4
 8005938:	200005d8 	.word	0x200005d8

0800593c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800593c:	b480      	push	{r7}
 800593e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005940:	4b03      	ldr	r3, [pc, #12]	@ (8005950 <vTaskMissedYield+0x14>)
 8005942:	2201      	movs	r2, #1
 8005944:	601a      	str	r2, [r3, #0]
}
 8005946:	bf00      	nop
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr
 8005950:	200005d4 	.word	0x200005d4

08005954 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800595c:	f000 f852 	bl	8005a04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005960:	4b06      	ldr	r3, [pc, #24]	@ (800597c <prvIdleTask+0x28>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d9f9      	bls.n	800595c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005968:	4b05      	ldr	r3, [pc, #20]	@ (8005980 <prvIdleTask+0x2c>)
 800596a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800596e:	601a      	str	r2, [r3, #0]
 8005970:	f3bf 8f4f 	dsb	sy
 8005974:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005978:	e7f0      	b.n	800595c <prvIdleTask+0x8>
 800597a:	bf00      	nop
 800597c:	200004c4 	.word	0x200004c4
 8005980:	e000ed04 	.word	0xe000ed04

08005984 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800598a:	2300      	movs	r3, #0
 800598c:	607b      	str	r3, [r7, #4]
 800598e:	e00c      	b.n	80059aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	4613      	mov	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	4413      	add	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	4a12      	ldr	r2, [pc, #72]	@ (80059e4 <prvInitialiseTaskLists+0x60>)
 800599c:	4413      	add	r3, r2
 800599e:	4618      	mov	r0, r3
 80059a0:	f7fe fca3 	bl	80042ea <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	3301      	adds	r3, #1
 80059a8:	607b      	str	r3, [r7, #4]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2b06      	cmp	r3, #6
 80059ae:	d9ef      	bls.n	8005990 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80059b0:	480d      	ldr	r0, [pc, #52]	@ (80059e8 <prvInitialiseTaskLists+0x64>)
 80059b2:	f7fe fc9a 	bl	80042ea <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80059b6:	480d      	ldr	r0, [pc, #52]	@ (80059ec <prvInitialiseTaskLists+0x68>)
 80059b8:	f7fe fc97 	bl	80042ea <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80059bc:	480c      	ldr	r0, [pc, #48]	@ (80059f0 <prvInitialiseTaskLists+0x6c>)
 80059be:	f7fe fc94 	bl	80042ea <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80059c2:	480c      	ldr	r0, [pc, #48]	@ (80059f4 <prvInitialiseTaskLists+0x70>)
 80059c4:	f7fe fc91 	bl	80042ea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80059c8:	480b      	ldr	r0, [pc, #44]	@ (80059f8 <prvInitialiseTaskLists+0x74>)
 80059ca:	f7fe fc8e 	bl	80042ea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80059ce:	4b0b      	ldr	r3, [pc, #44]	@ (80059fc <prvInitialiseTaskLists+0x78>)
 80059d0:	4a05      	ldr	r2, [pc, #20]	@ (80059e8 <prvInitialiseTaskLists+0x64>)
 80059d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80059d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005a00 <prvInitialiseTaskLists+0x7c>)
 80059d6:	4a05      	ldr	r2, [pc, #20]	@ (80059ec <prvInitialiseTaskLists+0x68>)
 80059d8:	601a      	str	r2, [r3, #0]
}
 80059da:	bf00      	nop
 80059dc:	3708      	adds	r7, #8
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	200004c4 	.word	0x200004c4
 80059e8:	20000550 	.word	0x20000550
 80059ec:	20000564 	.word	0x20000564
 80059f0:	20000580 	.word	0x20000580
 80059f4:	20000594 	.word	0x20000594
 80059f8:	200005ac 	.word	0x200005ac
 80059fc:	20000578 	.word	0x20000578
 8005a00:	2000057c 	.word	0x2000057c

08005a04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a0a:	e019      	b.n	8005a40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a0c:	f000 fabc 	bl	8005f88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a10:	4b10      	ldr	r3, [pc, #64]	@ (8005a54 <prvCheckTasksWaitingTermination+0x50>)
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	3304      	adds	r3, #4
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7fe fcee 	bl	80043fe <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a22:	4b0d      	ldr	r3, [pc, #52]	@ (8005a58 <prvCheckTasksWaitingTermination+0x54>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	3b01      	subs	r3, #1
 8005a28:	4a0b      	ldr	r2, [pc, #44]	@ (8005a58 <prvCheckTasksWaitingTermination+0x54>)
 8005a2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8005a5c <prvCheckTasksWaitingTermination+0x58>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	3b01      	subs	r3, #1
 8005a32:	4a0a      	ldr	r2, [pc, #40]	@ (8005a5c <prvCheckTasksWaitingTermination+0x58>)
 8005a34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a36:	f000 fad9 	bl	8005fec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f810 	bl	8005a60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a40:	4b06      	ldr	r3, [pc, #24]	@ (8005a5c <prvCheckTasksWaitingTermination+0x58>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1e1      	bne.n	8005a0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a48:	bf00      	nop
 8005a4a:	bf00      	nop
 8005a4c:	3708      	adds	r7, #8
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	20000594 	.word	0x20000594
 8005a58:	200005c0 	.word	0x200005c0
 8005a5c:	200005a8 	.word	0x200005a8

08005a60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	334c      	adds	r3, #76	@ 0x4c
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f000 fdd5 	bl	800661c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d108      	bne.n	8005a8e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a80:	4618      	mov	r0, r3
 8005a82:	f000 fc71 	bl	8006368 <vPortFree>
				vPortFree( pxTCB );
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 fc6e 	bl	8006368 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a8c:	e019      	b.n	8005ac2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d103      	bne.n	8005aa0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 fc65 	bl	8006368 <vPortFree>
	}
 8005a9e:	e010      	b.n	8005ac2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d00b      	beq.n	8005ac2 <prvDeleteTCB+0x62>
	__asm volatile
 8005aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aae:	f383 8811 	msr	BASEPRI, r3
 8005ab2:	f3bf 8f6f 	isb	sy
 8005ab6:	f3bf 8f4f 	dsb	sy
 8005aba:	60fb      	str	r3, [r7, #12]
}
 8005abc:	bf00      	nop
 8005abe:	bf00      	nop
 8005ac0:	e7fd      	b.n	8005abe <prvDeleteTCB+0x5e>
	}
 8005ac2:	bf00      	nop
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
	...

08005acc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8005b04 <prvResetNextTaskUnblockTime+0x38>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d104      	bne.n	8005ae6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005adc:	4b0a      	ldr	r3, [pc, #40]	@ (8005b08 <prvResetNextTaskUnblockTime+0x3c>)
 8005ade:	f04f 32ff 	mov.w	r2, #4294967295
 8005ae2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ae4:	e008      	b.n	8005af8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ae6:	4b07      	ldr	r3, [pc, #28]	@ (8005b04 <prvResetNextTaskUnblockTime+0x38>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	4a04      	ldr	r2, [pc, #16]	@ (8005b08 <prvResetNextTaskUnblockTime+0x3c>)
 8005af6:	6013      	str	r3, [r2, #0]
}
 8005af8:	bf00      	nop
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr
 8005b04:	20000578 	.word	0x20000578
 8005b08:	200005e0 	.word	0x200005e0

08005b0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005b12:	4b0b      	ldr	r3, [pc, #44]	@ (8005b40 <xTaskGetSchedulerState+0x34>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d102      	bne.n	8005b20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	607b      	str	r3, [r7, #4]
 8005b1e:	e008      	b.n	8005b32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b20:	4b08      	ldr	r3, [pc, #32]	@ (8005b44 <xTaskGetSchedulerState+0x38>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d102      	bne.n	8005b2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005b28:	2302      	movs	r3, #2
 8005b2a:	607b      	str	r3, [r7, #4]
 8005b2c:	e001      	b.n	8005b32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005b32:	687b      	ldr	r3, [r7, #4]
	}
 8005b34:	4618      	mov	r0, r3
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr
 8005b40:	200005cc 	.word	0x200005cc
 8005b44:	200005e8 	.word	0x200005e8

08005b48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b086      	sub	sp, #24
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005b54:	2300      	movs	r3, #0
 8005b56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d070      	beq.n	8005c40 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005b5e:	4b3b      	ldr	r3, [pc, #236]	@ (8005c4c <xTaskPriorityDisinherit+0x104>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d00b      	beq.n	8005b80 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b6c:	f383 8811 	msr	BASEPRI, r3
 8005b70:	f3bf 8f6f 	isb	sy
 8005b74:	f3bf 8f4f 	dsb	sy
 8005b78:	60fb      	str	r3, [r7, #12]
}
 8005b7a:	bf00      	nop
 8005b7c:	bf00      	nop
 8005b7e:	e7fd      	b.n	8005b7c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10b      	bne.n	8005ba0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b8c:	f383 8811 	msr	BASEPRI, r3
 8005b90:	f3bf 8f6f 	isb	sy
 8005b94:	f3bf 8f4f 	dsb	sy
 8005b98:	60bb      	str	r3, [r7, #8]
}
 8005b9a:	bf00      	nop
 8005b9c:	bf00      	nop
 8005b9e:	e7fd      	b.n	8005b9c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ba4:	1e5a      	subs	r2, r3, #1
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d044      	beq.n	8005c40 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d140      	bne.n	8005c40 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	3304      	adds	r3, #4
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7fe fc1b 	bl	80043fe <uxListRemove>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d115      	bne.n	8005bfa <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bd2:	491f      	ldr	r1, [pc, #124]	@ (8005c50 <xTaskPriorityDisinherit+0x108>)
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	4413      	add	r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	440b      	add	r3, r1
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10a      	bne.n	8005bfa <xTaskPriorityDisinherit+0xb2>
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be8:	2201      	movs	r2, #1
 8005bea:	fa02 f303 	lsl.w	r3, r2, r3
 8005bee:	43da      	mvns	r2, r3
 8005bf0:	4b18      	ldr	r3, [pc, #96]	@ (8005c54 <xTaskPriorityDisinherit+0x10c>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	4a17      	ldr	r2, [pc, #92]	@ (8005c54 <xTaskPriorityDisinherit+0x10c>)
 8005bf8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c06:	f1c3 0207 	rsb	r2, r3, #7
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c12:	2201      	movs	r2, #1
 8005c14:	409a      	lsls	r2, r3
 8005c16:	4b0f      	ldr	r3, [pc, #60]	@ (8005c54 <xTaskPriorityDisinherit+0x10c>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	4a0d      	ldr	r2, [pc, #52]	@ (8005c54 <xTaskPriorityDisinherit+0x10c>)
 8005c1e:	6013      	str	r3, [r2, #0]
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c24:	4613      	mov	r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	4413      	add	r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4a08      	ldr	r2, [pc, #32]	@ (8005c50 <xTaskPriorityDisinherit+0x108>)
 8005c2e:	441a      	add	r2, r3
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	3304      	adds	r3, #4
 8005c34:	4619      	mov	r1, r3
 8005c36:	4610      	mov	r0, r2
 8005c38:	f7fe fb84 	bl	8004344 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c40:	697b      	ldr	r3, [r7, #20]
	}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3718      	adds	r7, #24
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	200004c0 	.word	0x200004c0
 8005c50:	200004c4 	.word	0x200004c4
 8005c54:	200005c8 	.word	0x200005c8

08005c58 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c62:	4b29      	ldr	r3, [pc, #164]	@ (8005d08 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c68:	4b28      	ldr	r3, [pc, #160]	@ (8005d0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	3304      	adds	r3, #4
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7fe fbc5 	bl	80043fe <uxListRemove>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10b      	bne.n	8005c92 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005c7a:	4b24      	ldr	r3, [pc, #144]	@ (8005d0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c80:	2201      	movs	r2, #1
 8005c82:	fa02 f303 	lsl.w	r3, r2, r3
 8005c86:	43da      	mvns	r2, r3
 8005c88:	4b21      	ldr	r3, [pc, #132]	@ (8005d10 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	4a20      	ldr	r2, [pc, #128]	@ (8005d10 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005c90:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c98:	d10a      	bne.n	8005cb0 <prvAddCurrentTaskToDelayedList+0x58>
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d007      	beq.n	8005cb0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ca0:	4b1a      	ldr	r3, [pc, #104]	@ (8005d0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	3304      	adds	r3, #4
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	481a      	ldr	r0, [pc, #104]	@ (8005d14 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005caa:	f7fe fb4b 	bl	8004344 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005cae:	e026      	b.n	8005cfe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005cb8:	4b14      	ldr	r3, [pc, #80]	@ (8005d0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68ba      	ldr	r2, [r7, #8]
 8005cbe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005cc0:	68ba      	ldr	r2, [r7, #8]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d209      	bcs.n	8005cdc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cc8:	4b13      	ldr	r3, [pc, #76]	@ (8005d18 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8005d0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	3304      	adds	r3, #4
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	4610      	mov	r0, r2
 8005cd6:	f7fe fb59 	bl	800438c <vListInsert>
}
 8005cda:	e010      	b.n	8005cfe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8005d1c <prvAddCurrentTaskToDelayedList+0xc4>)
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8005d0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	3304      	adds	r3, #4
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	4610      	mov	r0, r2
 8005cea:	f7fe fb4f 	bl	800438c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005cee:	4b0c      	ldr	r3, [pc, #48]	@ (8005d20 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68ba      	ldr	r2, [r7, #8]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d202      	bcs.n	8005cfe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005cf8:	4a09      	ldr	r2, [pc, #36]	@ (8005d20 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	6013      	str	r3, [r2, #0]
}
 8005cfe:	bf00      	nop
 8005d00:	3710      	adds	r7, #16
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	200005c4 	.word	0x200005c4
 8005d0c:	200004c0 	.word	0x200004c0
 8005d10:	200005c8 	.word	0x200005c8
 8005d14:	200005ac 	.word	0x200005ac
 8005d18:	2000057c 	.word	0x2000057c
 8005d1c:	20000578 	.word	0x20000578
 8005d20:	200005e0 	.word	0x200005e0

08005d24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	3b04      	subs	r3, #4
 8005d34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005d3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	3b04      	subs	r3, #4
 8005d42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	f023 0201 	bic.w	r2, r3, #1
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	3b04      	subs	r3, #4
 8005d52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d54:	4a0c      	ldr	r2, [pc, #48]	@ (8005d88 <pxPortInitialiseStack+0x64>)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	3b14      	subs	r3, #20
 8005d5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	3b04      	subs	r3, #4
 8005d6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f06f 0202 	mvn.w	r2, #2
 8005d72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	3b20      	subs	r3, #32
 8005d78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr
 8005d88:	08005d8d 	.word	0x08005d8d

08005d8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005d92:	2300      	movs	r3, #0
 8005d94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005d96:	4b13      	ldr	r3, [pc, #76]	@ (8005de4 <prvTaskExitError+0x58>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d9e:	d00b      	beq.n	8005db8 <prvTaskExitError+0x2c>
	__asm volatile
 8005da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da4:	f383 8811 	msr	BASEPRI, r3
 8005da8:	f3bf 8f6f 	isb	sy
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	60fb      	str	r3, [r7, #12]
}
 8005db2:	bf00      	nop
 8005db4:	bf00      	nop
 8005db6:	e7fd      	b.n	8005db4 <prvTaskExitError+0x28>
	__asm volatile
 8005db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dbc:	f383 8811 	msr	BASEPRI, r3
 8005dc0:	f3bf 8f6f 	isb	sy
 8005dc4:	f3bf 8f4f 	dsb	sy
 8005dc8:	60bb      	str	r3, [r7, #8]
}
 8005dca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005dcc:	bf00      	nop
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d0fc      	beq.n	8005dce <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005dd4:	bf00      	nop
 8005dd6:	bf00      	nop
 8005dd8:	3714      	adds	r7, #20
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	2000006c 	.word	0x2000006c
	...

08005df0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005df0:	4b07      	ldr	r3, [pc, #28]	@ (8005e10 <pxCurrentTCBConst2>)
 8005df2:	6819      	ldr	r1, [r3, #0]
 8005df4:	6808      	ldr	r0, [r1, #0]
 8005df6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dfa:	f380 8809 	msr	PSP, r0
 8005dfe:	f3bf 8f6f 	isb	sy
 8005e02:	f04f 0000 	mov.w	r0, #0
 8005e06:	f380 8811 	msr	BASEPRI, r0
 8005e0a:	4770      	bx	lr
 8005e0c:	f3af 8000 	nop.w

08005e10 <pxCurrentTCBConst2>:
 8005e10:	200004c0 	.word	0x200004c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005e14:	bf00      	nop
 8005e16:	bf00      	nop

08005e18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005e18:	4808      	ldr	r0, [pc, #32]	@ (8005e3c <prvPortStartFirstTask+0x24>)
 8005e1a:	6800      	ldr	r0, [r0, #0]
 8005e1c:	6800      	ldr	r0, [r0, #0]
 8005e1e:	f380 8808 	msr	MSP, r0
 8005e22:	f04f 0000 	mov.w	r0, #0
 8005e26:	f380 8814 	msr	CONTROL, r0
 8005e2a:	b662      	cpsie	i
 8005e2c:	b661      	cpsie	f
 8005e2e:	f3bf 8f4f 	dsb	sy
 8005e32:	f3bf 8f6f 	isb	sy
 8005e36:	df00      	svc	0
 8005e38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005e3a:	bf00      	nop
 8005e3c:	e000ed08 	.word	0xe000ed08

08005e40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005e46:	4b47      	ldr	r3, [pc, #284]	@ (8005f64 <xPortStartScheduler+0x124>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a47      	ldr	r2, [pc, #284]	@ (8005f68 <xPortStartScheduler+0x128>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d10b      	bne.n	8005e68 <xPortStartScheduler+0x28>
	__asm volatile
 8005e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e54:	f383 8811 	msr	BASEPRI, r3
 8005e58:	f3bf 8f6f 	isb	sy
 8005e5c:	f3bf 8f4f 	dsb	sy
 8005e60:	60fb      	str	r3, [r7, #12]
}
 8005e62:	bf00      	nop
 8005e64:	bf00      	nop
 8005e66:	e7fd      	b.n	8005e64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005e68:	4b3e      	ldr	r3, [pc, #248]	@ (8005f64 <xPortStartScheduler+0x124>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a3f      	ldr	r2, [pc, #252]	@ (8005f6c <xPortStartScheduler+0x12c>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d10b      	bne.n	8005e8a <xPortStartScheduler+0x4a>
	__asm volatile
 8005e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e76:	f383 8811 	msr	BASEPRI, r3
 8005e7a:	f3bf 8f6f 	isb	sy
 8005e7e:	f3bf 8f4f 	dsb	sy
 8005e82:	613b      	str	r3, [r7, #16]
}
 8005e84:	bf00      	nop
 8005e86:	bf00      	nop
 8005e88:	e7fd      	b.n	8005e86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005e8a:	4b39      	ldr	r3, [pc, #228]	@ (8005f70 <xPortStartScheduler+0x130>)
 8005e8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	22ff      	movs	r2, #255	@ 0xff
 8005e9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ea4:	78fb      	ldrb	r3, [r7, #3]
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005eac:	b2da      	uxtb	r2, r3
 8005eae:	4b31      	ldr	r3, [pc, #196]	@ (8005f74 <xPortStartScheduler+0x134>)
 8005eb0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005eb2:	4b31      	ldr	r3, [pc, #196]	@ (8005f78 <xPortStartScheduler+0x138>)
 8005eb4:	2207      	movs	r2, #7
 8005eb6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005eb8:	e009      	b.n	8005ece <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005eba:	4b2f      	ldr	r3, [pc, #188]	@ (8005f78 <xPortStartScheduler+0x138>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	4a2d      	ldr	r2, [pc, #180]	@ (8005f78 <xPortStartScheduler+0x138>)
 8005ec2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ec4:	78fb      	ldrb	r3, [r7, #3]
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	005b      	lsls	r3, r3, #1
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ece:	78fb      	ldrb	r3, [r7, #3]
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ed6:	2b80      	cmp	r3, #128	@ 0x80
 8005ed8:	d0ef      	beq.n	8005eba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005eda:	4b27      	ldr	r3, [pc, #156]	@ (8005f78 <xPortStartScheduler+0x138>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f1c3 0307 	rsb	r3, r3, #7
 8005ee2:	2b04      	cmp	r3, #4
 8005ee4:	d00b      	beq.n	8005efe <xPortStartScheduler+0xbe>
	__asm volatile
 8005ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eea:	f383 8811 	msr	BASEPRI, r3
 8005eee:	f3bf 8f6f 	isb	sy
 8005ef2:	f3bf 8f4f 	dsb	sy
 8005ef6:	60bb      	str	r3, [r7, #8]
}
 8005ef8:	bf00      	nop
 8005efa:	bf00      	nop
 8005efc:	e7fd      	b.n	8005efa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005efe:	4b1e      	ldr	r3, [pc, #120]	@ (8005f78 <xPortStartScheduler+0x138>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	021b      	lsls	r3, r3, #8
 8005f04:	4a1c      	ldr	r2, [pc, #112]	@ (8005f78 <xPortStartScheduler+0x138>)
 8005f06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f08:	4b1b      	ldr	r3, [pc, #108]	@ (8005f78 <xPortStartScheduler+0x138>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005f10:	4a19      	ldr	r2, [pc, #100]	@ (8005f78 <xPortStartScheduler+0x138>)
 8005f12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	b2da      	uxtb	r2, r3
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005f1c:	4b17      	ldr	r3, [pc, #92]	@ (8005f7c <xPortStartScheduler+0x13c>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a16      	ldr	r2, [pc, #88]	@ (8005f7c <xPortStartScheduler+0x13c>)
 8005f22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005f26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005f28:	4b14      	ldr	r3, [pc, #80]	@ (8005f7c <xPortStartScheduler+0x13c>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a13      	ldr	r2, [pc, #76]	@ (8005f7c <xPortStartScheduler+0x13c>)
 8005f2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005f32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005f34:	f000 f8da 	bl	80060ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005f38:	4b11      	ldr	r3, [pc, #68]	@ (8005f80 <xPortStartScheduler+0x140>)
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005f3e:	f000 f8f9 	bl	8006134 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005f42:	4b10      	ldr	r3, [pc, #64]	@ (8005f84 <xPortStartScheduler+0x144>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a0f      	ldr	r2, [pc, #60]	@ (8005f84 <xPortStartScheduler+0x144>)
 8005f48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005f4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005f4e:	f7ff ff63 	bl	8005e18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005f52:	f7ff fb8b 	bl	800566c <vTaskSwitchContext>
	prvTaskExitError();
 8005f56:	f7ff ff19 	bl	8005d8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3718      	adds	r7, #24
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	e000ed00 	.word	0xe000ed00
 8005f68:	410fc271 	.word	0x410fc271
 8005f6c:	410fc270 	.word	0x410fc270
 8005f70:	e000e400 	.word	0xe000e400
 8005f74:	200005ec 	.word	0x200005ec
 8005f78:	200005f0 	.word	0x200005f0
 8005f7c:	e000ed20 	.word	0xe000ed20
 8005f80:	2000006c 	.word	0x2000006c
 8005f84:	e000ef34 	.word	0xe000ef34

08005f88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f92:	f383 8811 	msr	BASEPRI, r3
 8005f96:	f3bf 8f6f 	isb	sy
 8005f9a:	f3bf 8f4f 	dsb	sy
 8005f9e:	607b      	str	r3, [r7, #4]
}
 8005fa0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005fa2:	4b10      	ldr	r3, [pc, #64]	@ (8005fe4 <vPortEnterCritical+0x5c>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	4a0e      	ldr	r2, [pc, #56]	@ (8005fe4 <vPortEnterCritical+0x5c>)
 8005faa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005fac:	4b0d      	ldr	r3, [pc, #52]	@ (8005fe4 <vPortEnterCritical+0x5c>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d110      	bne.n	8005fd6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8005fe8 <vPortEnterCritical+0x60>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00b      	beq.n	8005fd6 <vPortEnterCritical+0x4e>
	__asm volatile
 8005fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	603b      	str	r3, [r7, #0]
}
 8005fd0:	bf00      	nop
 8005fd2:	bf00      	nop
 8005fd4:	e7fd      	b.n	8005fd2 <vPortEnterCritical+0x4a>
	}
}
 8005fd6:	bf00      	nop
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	2000006c 	.word	0x2000006c
 8005fe8:	e000ed04 	.word	0xe000ed04

08005fec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005ff2:	4b12      	ldr	r3, [pc, #72]	@ (800603c <vPortExitCritical+0x50>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10b      	bne.n	8006012 <vPortExitCritical+0x26>
	__asm volatile
 8005ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ffe:	f383 8811 	msr	BASEPRI, r3
 8006002:	f3bf 8f6f 	isb	sy
 8006006:	f3bf 8f4f 	dsb	sy
 800600a:	607b      	str	r3, [r7, #4]
}
 800600c:	bf00      	nop
 800600e:	bf00      	nop
 8006010:	e7fd      	b.n	800600e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006012:	4b0a      	ldr	r3, [pc, #40]	@ (800603c <vPortExitCritical+0x50>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	3b01      	subs	r3, #1
 8006018:	4a08      	ldr	r2, [pc, #32]	@ (800603c <vPortExitCritical+0x50>)
 800601a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800601c:	4b07      	ldr	r3, [pc, #28]	@ (800603c <vPortExitCritical+0x50>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d105      	bne.n	8006030 <vPortExitCritical+0x44>
 8006024:	2300      	movs	r3, #0
 8006026:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	f383 8811 	msr	BASEPRI, r3
}
 800602e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr
 800603c:	2000006c 	.word	0x2000006c

08006040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006040:	f3ef 8009 	mrs	r0, PSP
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	4b15      	ldr	r3, [pc, #84]	@ (80060a0 <pxCurrentTCBConst>)
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	f01e 0f10 	tst.w	lr, #16
 8006050:	bf08      	it	eq
 8006052:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006056:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800605a:	6010      	str	r0, [r2, #0]
 800605c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006060:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006064:	f380 8811 	msr	BASEPRI, r0
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	f3bf 8f6f 	isb	sy
 8006070:	f7ff fafc 	bl	800566c <vTaskSwitchContext>
 8006074:	f04f 0000 	mov.w	r0, #0
 8006078:	f380 8811 	msr	BASEPRI, r0
 800607c:	bc09      	pop	{r0, r3}
 800607e:	6819      	ldr	r1, [r3, #0]
 8006080:	6808      	ldr	r0, [r1, #0]
 8006082:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006086:	f01e 0f10 	tst.w	lr, #16
 800608a:	bf08      	it	eq
 800608c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006090:	f380 8809 	msr	PSP, r0
 8006094:	f3bf 8f6f 	isb	sy
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	f3af 8000 	nop.w

080060a0 <pxCurrentTCBConst>:
 80060a0:	200004c0 	.word	0x200004c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80060a4:	bf00      	nop
 80060a6:	bf00      	nop

080060a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
	__asm volatile
 80060ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b2:	f383 8811 	msr	BASEPRI, r3
 80060b6:	f3bf 8f6f 	isb	sy
 80060ba:	f3bf 8f4f 	dsb	sy
 80060be:	607b      	str	r3, [r7, #4]
}
 80060c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80060c2:	f7ff fa19 	bl	80054f8 <xTaskIncrementTick>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d003      	beq.n	80060d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80060cc:	4b06      	ldr	r3, [pc, #24]	@ (80060e8 <SysTick_Handler+0x40>)
 80060ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060d2:	601a      	str	r2, [r3, #0]
 80060d4:	2300      	movs	r3, #0
 80060d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	f383 8811 	msr	BASEPRI, r3
}
 80060de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80060e0:	bf00      	nop
 80060e2:	3708      	adds	r7, #8
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	e000ed04 	.word	0xe000ed04

080060ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80060ec:	b480      	push	{r7}
 80060ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80060f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006120 <vPortSetupTimerInterrupt+0x34>)
 80060f2:	2200      	movs	r2, #0
 80060f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80060f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006124 <vPortSetupTimerInterrupt+0x38>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80060fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006128 <vPortSetupTimerInterrupt+0x3c>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a0a      	ldr	r2, [pc, #40]	@ (800612c <vPortSetupTimerInterrupt+0x40>)
 8006102:	fba2 2303 	umull	r2, r3, r2, r3
 8006106:	099b      	lsrs	r3, r3, #6
 8006108:	4a09      	ldr	r2, [pc, #36]	@ (8006130 <vPortSetupTimerInterrupt+0x44>)
 800610a:	3b01      	subs	r3, #1
 800610c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800610e:	4b04      	ldr	r3, [pc, #16]	@ (8006120 <vPortSetupTimerInterrupt+0x34>)
 8006110:	2207      	movs	r2, #7
 8006112:	601a      	str	r2, [r3, #0]
}
 8006114:	bf00      	nop
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	e000e010 	.word	0xe000e010
 8006124:	e000e018 	.word	0xe000e018
 8006128:	20000000 	.word	0x20000000
 800612c:	10624dd3 	.word	0x10624dd3
 8006130:	e000e014 	.word	0xe000e014

08006134 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006134:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006144 <vPortEnableVFP+0x10>
 8006138:	6801      	ldr	r1, [r0, #0]
 800613a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800613e:	6001      	str	r1, [r0, #0]
 8006140:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006142:	bf00      	nop
 8006144:	e000ed88 	.word	0xe000ed88

08006148 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006148:	b480      	push	{r7}
 800614a:	b085      	sub	sp, #20
 800614c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800614e:	f3ef 8305 	mrs	r3, IPSR
 8006152:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2b0f      	cmp	r3, #15
 8006158:	d915      	bls.n	8006186 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800615a:	4a18      	ldr	r2, [pc, #96]	@ (80061bc <vPortValidateInterruptPriority+0x74>)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	4413      	add	r3, r2
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006164:	4b16      	ldr	r3, [pc, #88]	@ (80061c0 <vPortValidateInterruptPriority+0x78>)
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	7afa      	ldrb	r2, [r7, #11]
 800616a:	429a      	cmp	r2, r3
 800616c:	d20b      	bcs.n	8006186 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800616e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006172:	f383 8811 	msr	BASEPRI, r3
 8006176:	f3bf 8f6f 	isb	sy
 800617a:	f3bf 8f4f 	dsb	sy
 800617e:	607b      	str	r3, [r7, #4]
}
 8006180:	bf00      	nop
 8006182:	bf00      	nop
 8006184:	e7fd      	b.n	8006182 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006186:	4b0f      	ldr	r3, [pc, #60]	@ (80061c4 <vPortValidateInterruptPriority+0x7c>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800618e:	4b0e      	ldr	r3, [pc, #56]	@ (80061c8 <vPortValidateInterruptPriority+0x80>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	429a      	cmp	r2, r3
 8006194:	d90b      	bls.n	80061ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800619a:	f383 8811 	msr	BASEPRI, r3
 800619e:	f3bf 8f6f 	isb	sy
 80061a2:	f3bf 8f4f 	dsb	sy
 80061a6:	603b      	str	r3, [r7, #0]
}
 80061a8:	bf00      	nop
 80061aa:	bf00      	nop
 80061ac:	e7fd      	b.n	80061aa <vPortValidateInterruptPriority+0x62>
	}
 80061ae:	bf00      	nop
 80061b0:	3714      	adds	r7, #20
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	e000e3f0 	.word	0xe000e3f0
 80061c0:	200005ec 	.word	0x200005ec
 80061c4:	e000ed0c 	.word	0xe000ed0c
 80061c8:	200005f0 	.word	0x200005f0

080061cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b08a      	sub	sp, #40	@ 0x28
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80061d4:	2300      	movs	r3, #0
 80061d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80061d8:	f7ff f8e2 	bl	80053a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80061dc:	4b5c      	ldr	r3, [pc, #368]	@ (8006350 <pvPortMalloc+0x184>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d101      	bne.n	80061e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80061e4:	f000 f924 	bl	8006430 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80061e8:	4b5a      	ldr	r3, [pc, #360]	@ (8006354 <pvPortMalloc+0x188>)
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4013      	ands	r3, r2
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f040 8095 	bne.w	8006320 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d01e      	beq.n	800623a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80061fc:	2208      	movs	r2, #8
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4413      	add	r3, r2
 8006202:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f003 0307 	and.w	r3, r3, #7
 800620a:	2b00      	cmp	r3, #0
 800620c:	d015      	beq.n	800623a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f023 0307 	bic.w	r3, r3, #7
 8006214:	3308      	adds	r3, #8
 8006216:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f003 0307 	and.w	r3, r3, #7
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00b      	beq.n	800623a <pvPortMalloc+0x6e>
	__asm volatile
 8006222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006226:	f383 8811 	msr	BASEPRI, r3
 800622a:	f3bf 8f6f 	isb	sy
 800622e:	f3bf 8f4f 	dsb	sy
 8006232:	617b      	str	r3, [r7, #20]
}
 8006234:	bf00      	nop
 8006236:	bf00      	nop
 8006238:	e7fd      	b.n	8006236 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d06f      	beq.n	8006320 <pvPortMalloc+0x154>
 8006240:	4b45      	ldr	r3, [pc, #276]	@ (8006358 <pvPortMalloc+0x18c>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	429a      	cmp	r2, r3
 8006248:	d86a      	bhi.n	8006320 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800624a:	4b44      	ldr	r3, [pc, #272]	@ (800635c <pvPortMalloc+0x190>)
 800624c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800624e:	4b43      	ldr	r3, [pc, #268]	@ (800635c <pvPortMalloc+0x190>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006254:	e004      	b.n	8006260 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006258:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800625a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	429a      	cmp	r2, r3
 8006268:	d903      	bls.n	8006272 <pvPortMalloc+0xa6>
 800626a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d1f1      	bne.n	8006256 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006272:	4b37      	ldr	r3, [pc, #220]	@ (8006350 <pvPortMalloc+0x184>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006278:	429a      	cmp	r2, r3
 800627a:	d051      	beq.n	8006320 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800627c:	6a3b      	ldr	r3, [r7, #32]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2208      	movs	r2, #8
 8006282:	4413      	add	r3, r2
 8006284:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	6a3b      	ldr	r3, [r7, #32]
 800628c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800628e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006290:	685a      	ldr	r2, [r3, #4]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	1ad2      	subs	r2, r2, r3
 8006296:	2308      	movs	r3, #8
 8006298:	005b      	lsls	r3, r3, #1
 800629a:	429a      	cmp	r2, r3
 800629c:	d920      	bls.n	80062e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800629e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4413      	add	r3, r2
 80062a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	f003 0307 	and.w	r3, r3, #7
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00b      	beq.n	80062c8 <pvPortMalloc+0xfc>
	__asm volatile
 80062b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b4:	f383 8811 	msr	BASEPRI, r3
 80062b8:	f3bf 8f6f 	isb	sy
 80062bc:	f3bf 8f4f 	dsb	sy
 80062c0:	613b      	str	r3, [r7, #16]
}
 80062c2:	bf00      	nop
 80062c4:	bf00      	nop
 80062c6:	e7fd      	b.n	80062c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80062c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ca:	685a      	ldr	r2, [r3, #4]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	1ad2      	subs	r2, r2, r3
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80062d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80062da:	69b8      	ldr	r0, [r7, #24]
 80062dc:	f000 f90a 	bl	80064f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80062e0:	4b1d      	ldr	r3, [pc, #116]	@ (8006358 <pvPortMalloc+0x18c>)
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	4a1b      	ldr	r2, [pc, #108]	@ (8006358 <pvPortMalloc+0x18c>)
 80062ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80062ee:	4b1a      	ldr	r3, [pc, #104]	@ (8006358 <pvPortMalloc+0x18c>)
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	4b1b      	ldr	r3, [pc, #108]	@ (8006360 <pvPortMalloc+0x194>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d203      	bcs.n	8006302 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80062fa:	4b17      	ldr	r3, [pc, #92]	@ (8006358 <pvPortMalloc+0x18c>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a18      	ldr	r2, [pc, #96]	@ (8006360 <pvPortMalloc+0x194>)
 8006300:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006304:	685a      	ldr	r2, [r3, #4]
 8006306:	4b13      	ldr	r3, [pc, #76]	@ (8006354 <pvPortMalloc+0x188>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	431a      	orrs	r2, r3
 800630c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800630e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006312:	2200      	movs	r2, #0
 8006314:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006316:	4b13      	ldr	r3, [pc, #76]	@ (8006364 <pvPortMalloc+0x198>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	3301      	adds	r3, #1
 800631c:	4a11      	ldr	r2, [pc, #68]	@ (8006364 <pvPortMalloc+0x198>)
 800631e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006320:	f7ff f84c 	bl	80053bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	f003 0307 	and.w	r3, r3, #7
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00b      	beq.n	8006346 <pvPortMalloc+0x17a>
	__asm volatile
 800632e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006332:	f383 8811 	msr	BASEPRI, r3
 8006336:	f3bf 8f6f 	isb	sy
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	60fb      	str	r3, [r7, #12]
}
 8006340:	bf00      	nop
 8006342:	bf00      	nop
 8006344:	e7fd      	b.n	8006342 <pvPortMalloc+0x176>
	return pvReturn;
 8006346:	69fb      	ldr	r3, [r7, #28]
}
 8006348:	4618      	mov	r0, r3
 800634a:	3728      	adds	r7, #40	@ 0x28
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	200041fc 	.word	0x200041fc
 8006354:	20004210 	.word	0x20004210
 8006358:	20004200 	.word	0x20004200
 800635c:	200041f4 	.word	0x200041f4
 8006360:	20004204 	.word	0x20004204
 8006364:	20004208 	.word	0x20004208

08006368 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b086      	sub	sp, #24
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d04f      	beq.n	800641a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800637a:	2308      	movs	r3, #8
 800637c:	425b      	negs	r3, r3
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	4413      	add	r3, r2
 8006382:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	685a      	ldr	r2, [r3, #4]
 800638c:	4b25      	ldr	r3, [pc, #148]	@ (8006424 <vPortFree+0xbc>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4013      	ands	r3, r2
 8006392:	2b00      	cmp	r3, #0
 8006394:	d10b      	bne.n	80063ae <vPortFree+0x46>
	__asm volatile
 8006396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800639a:	f383 8811 	msr	BASEPRI, r3
 800639e:	f3bf 8f6f 	isb	sy
 80063a2:	f3bf 8f4f 	dsb	sy
 80063a6:	60fb      	str	r3, [r7, #12]
}
 80063a8:	bf00      	nop
 80063aa:	bf00      	nop
 80063ac:	e7fd      	b.n	80063aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00b      	beq.n	80063ce <vPortFree+0x66>
	__asm volatile
 80063b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ba:	f383 8811 	msr	BASEPRI, r3
 80063be:	f3bf 8f6f 	isb	sy
 80063c2:	f3bf 8f4f 	dsb	sy
 80063c6:	60bb      	str	r3, [r7, #8]
}
 80063c8:	bf00      	nop
 80063ca:	bf00      	nop
 80063cc:	e7fd      	b.n	80063ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	685a      	ldr	r2, [r3, #4]
 80063d2:	4b14      	ldr	r3, [pc, #80]	@ (8006424 <vPortFree+0xbc>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4013      	ands	r3, r2
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d01e      	beq.n	800641a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d11a      	bne.n	800641a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	685a      	ldr	r2, [r3, #4]
 80063e8:	4b0e      	ldr	r3, [pc, #56]	@ (8006424 <vPortFree+0xbc>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	43db      	mvns	r3, r3
 80063ee:	401a      	ands	r2, r3
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80063f4:	f7fe ffd4 	bl	80053a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006428 <vPortFree+0xc0>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4413      	add	r3, r2
 8006402:	4a09      	ldr	r2, [pc, #36]	@ (8006428 <vPortFree+0xc0>)
 8006404:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006406:	6938      	ldr	r0, [r7, #16]
 8006408:	f000 f874 	bl	80064f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800640c:	4b07      	ldr	r3, [pc, #28]	@ (800642c <vPortFree+0xc4>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	3301      	adds	r3, #1
 8006412:	4a06      	ldr	r2, [pc, #24]	@ (800642c <vPortFree+0xc4>)
 8006414:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006416:	f7fe ffd1 	bl	80053bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800641a:	bf00      	nop
 800641c:	3718      	adds	r7, #24
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	20004210 	.word	0x20004210
 8006428:	20004200 	.word	0x20004200
 800642c:	2000420c 	.word	0x2000420c

08006430 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006436:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800643a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800643c:	4b27      	ldr	r3, [pc, #156]	@ (80064dc <prvHeapInit+0xac>)
 800643e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f003 0307 	and.w	r3, r3, #7
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00c      	beq.n	8006464 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	3307      	adds	r3, #7
 800644e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f023 0307 	bic.w	r3, r3, #7
 8006456:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006458:	68ba      	ldr	r2, [r7, #8]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	4a1f      	ldr	r2, [pc, #124]	@ (80064dc <prvHeapInit+0xac>)
 8006460:	4413      	add	r3, r2
 8006462:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006468:	4a1d      	ldr	r2, [pc, #116]	@ (80064e0 <prvHeapInit+0xb0>)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800646e:	4b1c      	ldr	r3, [pc, #112]	@ (80064e0 <prvHeapInit+0xb0>)
 8006470:	2200      	movs	r2, #0
 8006472:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	4413      	add	r3, r2
 800647a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800647c:	2208      	movs	r2, #8
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	1a9b      	subs	r3, r3, r2
 8006482:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f023 0307 	bic.w	r3, r3, #7
 800648a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	4a15      	ldr	r2, [pc, #84]	@ (80064e4 <prvHeapInit+0xb4>)
 8006490:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006492:	4b14      	ldr	r3, [pc, #80]	@ (80064e4 <prvHeapInit+0xb4>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2200      	movs	r2, #0
 8006498:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800649a:	4b12      	ldr	r3, [pc, #72]	@ (80064e4 <prvHeapInit+0xb4>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2200      	movs	r2, #0
 80064a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	1ad2      	subs	r2, r2, r3
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80064b0:	4b0c      	ldr	r3, [pc, #48]	@ (80064e4 <prvHeapInit+0xb4>)
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	4a0a      	ldr	r2, [pc, #40]	@ (80064e8 <prvHeapInit+0xb8>)
 80064be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	4a09      	ldr	r2, [pc, #36]	@ (80064ec <prvHeapInit+0xbc>)
 80064c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80064c8:	4b09      	ldr	r3, [pc, #36]	@ (80064f0 <prvHeapInit+0xc0>)
 80064ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80064ce:	601a      	str	r2, [r3, #0]
}
 80064d0:	bf00      	nop
 80064d2:	3714      	adds	r7, #20
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr
 80064dc:	200005f4 	.word	0x200005f4
 80064e0:	200041f4 	.word	0x200041f4
 80064e4:	200041fc 	.word	0x200041fc
 80064e8:	20004204 	.word	0x20004204
 80064ec:	20004200 	.word	0x20004200
 80064f0:	20004210 	.word	0x20004210

080064f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80064f4:	b480      	push	{r7}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80064fc:	4b28      	ldr	r3, [pc, #160]	@ (80065a0 <prvInsertBlockIntoFreeList+0xac>)
 80064fe:	60fb      	str	r3, [r7, #12]
 8006500:	e002      	b.n	8006508 <prvInsertBlockIntoFreeList+0x14>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	60fb      	str	r3, [r7, #12]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	429a      	cmp	r2, r3
 8006510:	d8f7      	bhi.n	8006502 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	4413      	add	r3, r2
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	429a      	cmp	r2, r3
 8006522:	d108      	bne.n	8006536 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	685a      	ldr	r2, [r3, #4]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	441a      	add	r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	441a      	add	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	429a      	cmp	r2, r3
 8006548:	d118      	bne.n	800657c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	4b15      	ldr	r3, [pc, #84]	@ (80065a4 <prvInsertBlockIntoFreeList+0xb0>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	429a      	cmp	r2, r3
 8006554:	d00d      	beq.n	8006572 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	685a      	ldr	r2, [r3, #4]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	441a      	add	r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	601a      	str	r2, [r3, #0]
 8006570:	e008      	b.n	8006584 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006572:	4b0c      	ldr	r3, [pc, #48]	@ (80065a4 <prvInsertBlockIntoFreeList+0xb0>)
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	601a      	str	r2, [r3, #0]
 800657a:	e003      	b.n	8006584 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	429a      	cmp	r2, r3
 800658a:	d002      	beq.n	8006592 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006592:	bf00      	nop
 8006594:	3714      	adds	r7, #20
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	200041f4 	.word	0x200041f4
 80065a4:	200041fc 	.word	0x200041fc

080065a8 <siprintf>:
 80065a8:	b40e      	push	{r1, r2, r3}
 80065aa:	b510      	push	{r4, lr}
 80065ac:	b09d      	sub	sp, #116	@ 0x74
 80065ae:	ab1f      	add	r3, sp, #124	@ 0x7c
 80065b0:	9002      	str	r0, [sp, #8]
 80065b2:	9006      	str	r0, [sp, #24]
 80065b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80065b8:	480a      	ldr	r0, [pc, #40]	@ (80065e4 <siprintf+0x3c>)
 80065ba:	9107      	str	r1, [sp, #28]
 80065bc:	9104      	str	r1, [sp, #16]
 80065be:	490a      	ldr	r1, [pc, #40]	@ (80065e8 <siprintf+0x40>)
 80065c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80065c4:	9105      	str	r1, [sp, #20]
 80065c6:	2400      	movs	r4, #0
 80065c8:	a902      	add	r1, sp, #8
 80065ca:	6800      	ldr	r0, [r0, #0]
 80065cc:	9301      	str	r3, [sp, #4]
 80065ce:	941b      	str	r4, [sp, #108]	@ 0x6c
 80065d0:	f000 fa10 	bl	80069f4 <_svfiprintf_r>
 80065d4:	9b02      	ldr	r3, [sp, #8]
 80065d6:	701c      	strb	r4, [r3, #0]
 80065d8:	b01d      	add	sp, #116	@ 0x74
 80065da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065de:	b003      	add	sp, #12
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	20000070 	.word	0x20000070
 80065e8:	ffff0208 	.word	0xffff0208

080065ec <memcmp>:
 80065ec:	b510      	push	{r4, lr}
 80065ee:	3901      	subs	r1, #1
 80065f0:	4402      	add	r2, r0
 80065f2:	4290      	cmp	r0, r2
 80065f4:	d101      	bne.n	80065fa <memcmp+0xe>
 80065f6:	2000      	movs	r0, #0
 80065f8:	e005      	b.n	8006606 <memcmp+0x1a>
 80065fa:	7803      	ldrb	r3, [r0, #0]
 80065fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006600:	42a3      	cmp	r3, r4
 8006602:	d001      	beq.n	8006608 <memcmp+0x1c>
 8006604:	1b18      	subs	r0, r3, r4
 8006606:	bd10      	pop	{r4, pc}
 8006608:	3001      	adds	r0, #1
 800660a:	e7f2      	b.n	80065f2 <memcmp+0x6>

0800660c <memset>:
 800660c:	4402      	add	r2, r0
 800660e:	4603      	mov	r3, r0
 8006610:	4293      	cmp	r3, r2
 8006612:	d100      	bne.n	8006616 <memset+0xa>
 8006614:	4770      	bx	lr
 8006616:	f803 1b01 	strb.w	r1, [r3], #1
 800661a:	e7f9      	b.n	8006610 <memset+0x4>

0800661c <_reclaim_reent>:
 800661c:	4b2d      	ldr	r3, [pc, #180]	@ (80066d4 <_reclaim_reent+0xb8>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4283      	cmp	r3, r0
 8006622:	b570      	push	{r4, r5, r6, lr}
 8006624:	4604      	mov	r4, r0
 8006626:	d053      	beq.n	80066d0 <_reclaim_reent+0xb4>
 8006628:	69c3      	ldr	r3, [r0, #28]
 800662a:	b31b      	cbz	r3, 8006674 <_reclaim_reent+0x58>
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	b163      	cbz	r3, 800664a <_reclaim_reent+0x2e>
 8006630:	2500      	movs	r5, #0
 8006632:	69e3      	ldr	r3, [r4, #28]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	5959      	ldr	r1, [r3, r5]
 8006638:	b9b1      	cbnz	r1, 8006668 <_reclaim_reent+0x4c>
 800663a:	3504      	adds	r5, #4
 800663c:	2d80      	cmp	r5, #128	@ 0x80
 800663e:	d1f8      	bne.n	8006632 <_reclaim_reent+0x16>
 8006640:	69e3      	ldr	r3, [r4, #28]
 8006642:	4620      	mov	r0, r4
 8006644:	68d9      	ldr	r1, [r3, #12]
 8006646:	f000 f881 	bl	800674c <_free_r>
 800664a:	69e3      	ldr	r3, [r4, #28]
 800664c:	6819      	ldr	r1, [r3, #0]
 800664e:	b111      	cbz	r1, 8006656 <_reclaim_reent+0x3a>
 8006650:	4620      	mov	r0, r4
 8006652:	f000 f87b 	bl	800674c <_free_r>
 8006656:	69e3      	ldr	r3, [r4, #28]
 8006658:	689d      	ldr	r5, [r3, #8]
 800665a:	b15d      	cbz	r5, 8006674 <_reclaim_reent+0x58>
 800665c:	4629      	mov	r1, r5
 800665e:	4620      	mov	r0, r4
 8006660:	682d      	ldr	r5, [r5, #0]
 8006662:	f000 f873 	bl	800674c <_free_r>
 8006666:	e7f8      	b.n	800665a <_reclaim_reent+0x3e>
 8006668:	680e      	ldr	r6, [r1, #0]
 800666a:	4620      	mov	r0, r4
 800666c:	f000 f86e 	bl	800674c <_free_r>
 8006670:	4631      	mov	r1, r6
 8006672:	e7e1      	b.n	8006638 <_reclaim_reent+0x1c>
 8006674:	6961      	ldr	r1, [r4, #20]
 8006676:	b111      	cbz	r1, 800667e <_reclaim_reent+0x62>
 8006678:	4620      	mov	r0, r4
 800667a:	f000 f867 	bl	800674c <_free_r>
 800667e:	69e1      	ldr	r1, [r4, #28]
 8006680:	b111      	cbz	r1, 8006688 <_reclaim_reent+0x6c>
 8006682:	4620      	mov	r0, r4
 8006684:	f000 f862 	bl	800674c <_free_r>
 8006688:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800668a:	b111      	cbz	r1, 8006692 <_reclaim_reent+0x76>
 800668c:	4620      	mov	r0, r4
 800668e:	f000 f85d 	bl	800674c <_free_r>
 8006692:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006694:	b111      	cbz	r1, 800669c <_reclaim_reent+0x80>
 8006696:	4620      	mov	r0, r4
 8006698:	f000 f858 	bl	800674c <_free_r>
 800669c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800669e:	b111      	cbz	r1, 80066a6 <_reclaim_reent+0x8a>
 80066a0:	4620      	mov	r0, r4
 80066a2:	f000 f853 	bl	800674c <_free_r>
 80066a6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80066a8:	b111      	cbz	r1, 80066b0 <_reclaim_reent+0x94>
 80066aa:	4620      	mov	r0, r4
 80066ac:	f000 f84e 	bl	800674c <_free_r>
 80066b0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80066b2:	b111      	cbz	r1, 80066ba <_reclaim_reent+0x9e>
 80066b4:	4620      	mov	r0, r4
 80066b6:	f000 f849 	bl	800674c <_free_r>
 80066ba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80066bc:	b111      	cbz	r1, 80066c4 <_reclaim_reent+0xa8>
 80066be:	4620      	mov	r0, r4
 80066c0:	f000 f844 	bl	800674c <_free_r>
 80066c4:	6a23      	ldr	r3, [r4, #32]
 80066c6:	b11b      	cbz	r3, 80066d0 <_reclaim_reent+0xb4>
 80066c8:	4620      	mov	r0, r4
 80066ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80066ce:	4718      	bx	r3
 80066d0:	bd70      	pop	{r4, r5, r6, pc}
 80066d2:	bf00      	nop
 80066d4:	20000070 	.word	0x20000070

080066d8 <__errno>:
 80066d8:	4b01      	ldr	r3, [pc, #4]	@ (80066e0 <__errno+0x8>)
 80066da:	6818      	ldr	r0, [r3, #0]
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	20000070 	.word	0x20000070

080066e4 <__libc_init_array>:
 80066e4:	b570      	push	{r4, r5, r6, lr}
 80066e6:	4d0d      	ldr	r5, [pc, #52]	@ (800671c <__libc_init_array+0x38>)
 80066e8:	4c0d      	ldr	r4, [pc, #52]	@ (8006720 <__libc_init_array+0x3c>)
 80066ea:	1b64      	subs	r4, r4, r5
 80066ec:	10a4      	asrs	r4, r4, #2
 80066ee:	2600      	movs	r6, #0
 80066f0:	42a6      	cmp	r6, r4
 80066f2:	d109      	bne.n	8006708 <__libc_init_array+0x24>
 80066f4:	4d0b      	ldr	r5, [pc, #44]	@ (8006724 <__libc_init_array+0x40>)
 80066f6:	4c0c      	ldr	r4, [pc, #48]	@ (8006728 <__libc_init_array+0x44>)
 80066f8:	f000 fc64 	bl	8006fc4 <_init>
 80066fc:	1b64      	subs	r4, r4, r5
 80066fe:	10a4      	asrs	r4, r4, #2
 8006700:	2600      	movs	r6, #0
 8006702:	42a6      	cmp	r6, r4
 8006704:	d105      	bne.n	8006712 <__libc_init_array+0x2e>
 8006706:	bd70      	pop	{r4, r5, r6, pc}
 8006708:	f855 3b04 	ldr.w	r3, [r5], #4
 800670c:	4798      	blx	r3
 800670e:	3601      	adds	r6, #1
 8006710:	e7ee      	b.n	80066f0 <__libc_init_array+0xc>
 8006712:	f855 3b04 	ldr.w	r3, [r5], #4
 8006716:	4798      	blx	r3
 8006718:	3601      	adds	r6, #1
 800671a:	e7f2      	b.n	8006702 <__libc_init_array+0x1e>
 800671c:	08007158 	.word	0x08007158
 8006720:	08007158 	.word	0x08007158
 8006724:	08007158 	.word	0x08007158
 8006728:	0800715c 	.word	0x0800715c

0800672c <__retarget_lock_acquire_recursive>:
 800672c:	4770      	bx	lr

0800672e <__retarget_lock_release_recursive>:
 800672e:	4770      	bx	lr

08006730 <memcpy>:
 8006730:	440a      	add	r2, r1
 8006732:	4291      	cmp	r1, r2
 8006734:	f100 33ff 	add.w	r3, r0, #4294967295
 8006738:	d100      	bne.n	800673c <memcpy+0xc>
 800673a:	4770      	bx	lr
 800673c:	b510      	push	{r4, lr}
 800673e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006742:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006746:	4291      	cmp	r1, r2
 8006748:	d1f9      	bne.n	800673e <memcpy+0xe>
 800674a:	bd10      	pop	{r4, pc}

0800674c <_free_r>:
 800674c:	b538      	push	{r3, r4, r5, lr}
 800674e:	4605      	mov	r5, r0
 8006750:	2900      	cmp	r1, #0
 8006752:	d041      	beq.n	80067d8 <_free_r+0x8c>
 8006754:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006758:	1f0c      	subs	r4, r1, #4
 800675a:	2b00      	cmp	r3, #0
 800675c:	bfb8      	it	lt
 800675e:	18e4      	addlt	r4, r4, r3
 8006760:	f000 f8e0 	bl	8006924 <__malloc_lock>
 8006764:	4a1d      	ldr	r2, [pc, #116]	@ (80067dc <_free_r+0x90>)
 8006766:	6813      	ldr	r3, [r2, #0]
 8006768:	b933      	cbnz	r3, 8006778 <_free_r+0x2c>
 800676a:	6063      	str	r3, [r4, #4]
 800676c:	6014      	str	r4, [r2, #0]
 800676e:	4628      	mov	r0, r5
 8006770:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006774:	f000 b8dc 	b.w	8006930 <__malloc_unlock>
 8006778:	42a3      	cmp	r3, r4
 800677a:	d908      	bls.n	800678e <_free_r+0x42>
 800677c:	6820      	ldr	r0, [r4, #0]
 800677e:	1821      	adds	r1, r4, r0
 8006780:	428b      	cmp	r3, r1
 8006782:	bf01      	itttt	eq
 8006784:	6819      	ldreq	r1, [r3, #0]
 8006786:	685b      	ldreq	r3, [r3, #4]
 8006788:	1809      	addeq	r1, r1, r0
 800678a:	6021      	streq	r1, [r4, #0]
 800678c:	e7ed      	b.n	800676a <_free_r+0x1e>
 800678e:	461a      	mov	r2, r3
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	b10b      	cbz	r3, 8006798 <_free_r+0x4c>
 8006794:	42a3      	cmp	r3, r4
 8006796:	d9fa      	bls.n	800678e <_free_r+0x42>
 8006798:	6811      	ldr	r1, [r2, #0]
 800679a:	1850      	adds	r0, r2, r1
 800679c:	42a0      	cmp	r0, r4
 800679e:	d10b      	bne.n	80067b8 <_free_r+0x6c>
 80067a0:	6820      	ldr	r0, [r4, #0]
 80067a2:	4401      	add	r1, r0
 80067a4:	1850      	adds	r0, r2, r1
 80067a6:	4283      	cmp	r3, r0
 80067a8:	6011      	str	r1, [r2, #0]
 80067aa:	d1e0      	bne.n	800676e <_free_r+0x22>
 80067ac:	6818      	ldr	r0, [r3, #0]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	6053      	str	r3, [r2, #4]
 80067b2:	4408      	add	r0, r1
 80067b4:	6010      	str	r0, [r2, #0]
 80067b6:	e7da      	b.n	800676e <_free_r+0x22>
 80067b8:	d902      	bls.n	80067c0 <_free_r+0x74>
 80067ba:	230c      	movs	r3, #12
 80067bc:	602b      	str	r3, [r5, #0]
 80067be:	e7d6      	b.n	800676e <_free_r+0x22>
 80067c0:	6820      	ldr	r0, [r4, #0]
 80067c2:	1821      	adds	r1, r4, r0
 80067c4:	428b      	cmp	r3, r1
 80067c6:	bf04      	itt	eq
 80067c8:	6819      	ldreq	r1, [r3, #0]
 80067ca:	685b      	ldreq	r3, [r3, #4]
 80067cc:	6063      	str	r3, [r4, #4]
 80067ce:	bf04      	itt	eq
 80067d0:	1809      	addeq	r1, r1, r0
 80067d2:	6021      	streq	r1, [r4, #0]
 80067d4:	6054      	str	r4, [r2, #4]
 80067d6:	e7ca      	b.n	800676e <_free_r+0x22>
 80067d8:	bd38      	pop	{r3, r4, r5, pc}
 80067da:	bf00      	nop
 80067dc:	20004358 	.word	0x20004358

080067e0 <sbrk_aligned>:
 80067e0:	b570      	push	{r4, r5, r6, lr}
 80067e2:	4e0f      	ldr	r6, [pc, #60]	@ (8006820 <sbrk_aligned+0x40>)
 80067e4:	460c      	mov	r4, r1
 80067e6:	6831      	ldr	r1, [r6, #0]
 80067e8:	4605      	mov	r5, r0
 80067ea:	b911      	cbnz	r1, 80067f2 <sbrk_aligned+0x12>
 80067ec:	f000 fba4 	bl	8006f38 <_sbrk_r>
 80067f0:	6030      	str	r0, [r6, #0]
 80067f2:	4621      	mov	r1, r4
 80067f4:	4628      	mov	r0, r5
 80067f6:	f000 fb9f 	bl	8006f38 <_sbrk_r>
 80067fa:	1c43      	adds	r3, r0, #1
 80067fc:	d103      	bne.n	8006806 <sbrk_aligned+0x26>
 80067fe:	f04f 34ff 	mov.w	r4, #4294967295
 8006802:	4620      	mov	r0, r4
 8006804:	bd70      	pop	{r4, r5, r6, pc}
 8006806:	1cc4      	adds	r4, r0, #3
 8006808:	f024 0403 	bic.w	r4, r4, #3
 800680c:	42a0      	cmp	r0, r4
 800680e:	d0f8      	beq.n	8006802 <sbrk_aligned+0x22>
 8006810:	1a21      	subs	r1, r4, r0
 8006812:	4628      	mov	r0, r5
 8006814:	f000 fb90 	bl	8006f38 <_sbrk_r>
 8006818:	3001      	adds	r0, #1
 800681a:	d1f2      	bne.n	8006802 <sbrk_aligned+0x22>
 800681c:	e7ef      	b.n	80067fe <sbrk_aligned+0x1e>
 800681e:	bf00      	nop
 8006820:	20004354 	.word	0x20004354

08006824 <_malloc_r>:
 8006824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006828:	1ccd      	adds	r5, r1, #3
 800682a:	f025 0503 	bic.w	r5, r5, #3
 800682e:	3508      	adds	r5, #8
 8006830:	2d0c      	cmp	r5, #12
 8006832:	bf38      	it	cc
 8006834:	250c      	movcc	r5, #12
 8006836:	2d00      	cmp	r5, #0
 8006838:	4606      	mov	r6, r0
 800683a:	db01      	blt.n	8006840 <_malloc_r+0x1c>
 800683c:	42a9      	cmp	r1, r5
 800683e:	d904      	bls.n	800684a <_malloc_r+0x26>
 8006840:	230c      	movs	r3, #12
 8006842:	6033      	str	r3, [r6, #0]
 8006844:	2000      	movs	r0, #0
 8006846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800684a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006920 <_malloc_r+0xfc>
 800684e:	f000 f869 	bl	8006924 <__malloc_lock>
 8006852:	f8d8 3000 	ldr.w	r3, [r8]
 8006856:	461c      	mov	r4, r3
 8006858:	bb44      	cbnz	r4, 80068ac <_malloc_r+0x88>
 800685a:	4629      	mov	r1, r5
 800685c:	4630      	mov	r0, r6
 800685e:	f7ff ffbf 	bl	80067e0 <sbrk_aligned>
 8006862:	1c43      	adds	r3, r0, #1
 8006864:	4604      	mov	r4, r0
 8006866:	d158      	bne.n	800691a <_malloc_r+0xf6>
 8006868:	f8d8 4000 	ldr.w	r4, [r8]
 800686c:	4627      	mov	r7, r4
 800686e:	2f00      	cmp	r7, #0
 8006870:	d143      	bne.n	80068fa <_malloc_r+0xd6>
 8006872:	2c00      	cmp	r4, #0
 8006874:	d04b      	beq.n	800690e <_malloc_r+0xea>
 8006876:	6823      	ldr	r3, [r4, #0]
 8006878:	4639      	mov	r1, r7
 800687a:	4630      	mov	r0, r6
 800687c:	eb04 0903 	add.w	r9, r4, r3
 8006880:	f000 fb5a 	bl	8006f38 <_sbrk_r>
 8006884:	4581      	cmp	r9, r0
 8006886:	d142      	bne.n	800690e <_malloc_r+0xea>
 8006888:	6821      	ldr	r1, [r4, #0]
 800688a:	1a6d      	subs	r5, r5, r1
 800688c:	4629      	mov	r1, r5
 800688e:	4630      	mov	r0, r6
 8006890:	f7ff ffa6 	bl	80067e0 <sbrk_aligned>
 8006894:	3001      	adds	r0, #1
 8006896:	d03a      	beq.n	800690e <_malloc_r+0xea>
 8006898:	6823      	ldr	r3, [r4, #0]
 800689a:	442b      	add	r3, r5
 800689c:	6023      	str	r3, [r4, #0]
 800689e:	f8d8 3000 	ldr.w	r3, [r8]
 80068a2:	685a      	ldr	r2, [r3, #4]
 80068a4:	bb62      	cbnz	r2, 8006900 <_malloc_r+0xdc>
 80068a6:	f8c8 7000 	str.w	r7, [r8]
 80068aa:	e00f      	b.n	80068cc <_malloc_r+0xa8>
 80068ac:	6822      	ldr	r2, [r4, #0]
 80068ae:	1b52      	subs	r2, r2, r5
 80068b0:	d420      	bmi.n	80068f4 <_malloc_r+0xd0>
 80068b2:	2a0b      	cmp	r2, #11
 80068b4:	d917      	bls.n	80068e6 <_malloc_r+0xc2>
 80068b6:	1961      	adds	r1, r4, r5
 80068b8:	42a3      	cmp	r3, r4
 80068ba:	6025      	str	r5, [r4, #0]
 80068bc:	bf18      	it	ne
 80068be:	6059      	strne	r1, [r3, #4]
 80068c0:	6863      	ldr	r3, [r4, #4]
 80068c2:	bf08      	it	eq
 80068c4:	f8c8 1000 	streq.w	r1, [r8]
 80068c8:	5162      	str	r2, [r4, r5]
 80068ca:	604b      	str	r3, [r1, #4]
 80068cc:	4630      	mov	r0, r6
 80068ce:	f000 f82f 	bl	8006930 <__malloc_unlock>
 80068d2:	f104 000b 	add.w	r0, r4, #11
 80068d6:	1d23      	adds	r3, r4, #4
 80068d8:	f020 0007 	bic.w	r0, r0, #7
 80068dc:	1ac2      	subs	r2, r0, r3
 80068de:	bf1c      	itt	ne
 80068e0:	1a1b      	subne	r3, r3, r0
 80068e2:	50a3      	strne	r3, [r4, r2]
 80068e4:	e7af      	b.n	8006846 <_malloc_r+0x22>
 80068e6:	6862      	ldr	r2, [r4, #4]
 80068e8:	42a3      	cmp	r3, r4
 80068ea:	bf0c      	ite	eq
 80068ec:	f8c8 2000 	streq.w	r2, [r8]
 80068f0:	605a      	strne	r2, [r3, #4]
 80068f2:	e7eb      	b.n	80068cc <_malloc_r+0xa8>
 80068f4:	4623      	mov	r3, r4
 80068f6:	6864      	ldr	r4, [r4, #4]
 80068f8:	e7ae      	b.n	8006858 <_malloc_r+0x34>
 80068fa:	463c      	mov	r4, r7
 80068fc:	687f      	ldr	r7, [r7, #4]
 80068fe:	e7b6      	b.n	800686e <_malloc_r+0x4a>
 8006900:	461a      	mov	r2, r3
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	42a3      	cmp	r3, r4
 8006906:	d1fb      	bne.n	8006900 <_malloc_r+0xdc>
 8006908:	2300      	movs	r3, #0
 800690a:	6053      	str	r3, [r2, #4]
 800690c:	e7de      	b.n	80068cc <_malloc_r+0xa8>
 800690e:	230c      	movs	r3, #12
 8006910:	6033      	str	r3, [r6, #0]
 8006912:	4630      	mov	r0, r6
 8006914:	f000 f80c 	bl	8006930 <__malloc_unlock>
 8006918:	e794      	b.n	8006844 <_malloc_r+0x20>
 800691a:	6005      	str	r5, [r0, #0]
 800691c:	e7d6      	b.n	80068cc <_malloc_r+0xa8>
 800691e:	bf00      	nop
 8006920:	20004358 	.word	0x20004358

08006924 <__malloc_lock>:
 8006924:	4801      	ldr	r0, [pc, #4]	@ (800692c <__malloc_lock+0x8>)
 8006926:	f7ff bf01 	b.w	800672c <__retarget_lock_acquire_recursive>
 800692a:	bf00      	nop
 800692c:	20004350 	.word	0x20004350

08006930 <__malloc_unlock>:
 8006930:	4801      	ldr	r0, [pc, #4]	@ (8006938 <__malloc_unlock+0x8>)
 8006932:	f7ff befc 	b.w	800672e <__retarget_lock_release_recursive>
 8006936:	bf00      	nop
 8006938:	20004350 	.word	0x20004350

0800693c <__ssputs_r>:
 800693c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006940:	688e      	ldr	r6, [r1, #8]
 8006942:	461f      	mov	r7, r3
 8006944:	42be      	cmp	r6, r7
 8006946:	680b      	ldr	r3, [r1, #0]
 8006948:	4682      	mov	sl, r0
 800694a:	460c      	mov	r4, r1
 800694c:	4690      	mov	r8, r2
 800694e:	d82d      	bhi.n	80069ac <__ssputs_r+0x70>
 8006950:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006954:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006958:	d026      	beq.n	80069a8 <__ssputs_r+0x6c>
 800695a:	6965      	ldr	r5, [r4, #20]
 800695c:	6909      	ldr	r1, [r1, #16]
 800695e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006962:	eba3 0901 	sub.w	r9, r3, r1
 8006966:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800696a:	1c7b      	adds	r3, r7, #1
 800696c:	444b      	add	r3, r9
 800696e:	106d      	asrs	r5, r5, #1
 8006970:	429d      	cmp	r5, r3
 8006972:	bf38      	it	cc
 8006974:	461d      	movcc	r5, r3
 8006976:	0553      	lsls	r3, r2, #21
 8006978:	d527      	bpl.n	80069ca <__ssputs_r+0x8e>
 800697a:	4629      	mov	r1, r5
 800697c:	f7ff ff52 	bl	8006824 <_malloc_r>
 8006980:	4606      	mov	r6, r0
 8006982:	b360      	cbz	r0, 80069de <__ssputs_r+0xa2>
 8006984:	6921      	ldr	r1, [r4, #16]
 8006986:	464a      	mov	r2, r9
 8006988:	f7ff fed2 	bl	8006730 <memcpy>
 800698c:	89a3      	ldrh	r3, [r4, #12]
 800698e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006992:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006996:	81a3      	strh	r3, [r4, #12]
 8006998:	6126      	str	r6, [r4, #16]
 800699a:	6165      	str	r5, [r4, #20]
 800699c:	444e      	add	r6, r9
 800699e:	eba5 0509 	sub.w	r5, r5, r9
 80069a2:	6026      	str	r6, [r4, #0]
 80069a4:	60a5      	str	r5, [r4, #8]
 80069a6:	463e      	mov	r6, r7
 80069a8:	42be      	cmp	r6, r7
 80069aa:	d900      	bls.n	80069ae <__ssputs_r+0x72>
 80069ac:	463e      	mov	r6, r7
 80069ae:	6820      	ldr	r0, [r4, #0]
 80069b0:	4632      	mov	r2, r6
 80069b2:	4641      	mov	r1, r8
 80069b4:	f000 faa6 	bl	8006f04 <memmove>
 80069b8:	68a3      	ldr	r3, [r4, #8]
 80069ba:	1b9b      	subs	r3, r3, r6
 80069bc:	60a3      	str	r3, [r4, #8]
 80069be:	6823      	ldr	r3, [r4, #0]
 80069c0:	4433      	add	r3, r6
 80069c2:	6023      	str	r3, [r4, #0]
 80069c4:	2000      	movs	r0, #0
 80069c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ca:	462a      	mov	r2, r5
 80069cc:	f000 fac4 	bl	8006f58 <_realloc_r>
 80069d0:	4606      	mov	r6, r0
 80069d2:	2800      	cmp	r0, #0
 80069d4:	d1e0      	bne.n	8006998 <__ssputs_r+0x5c>
 80069d6:	6921      	ldr	r1, [r4, #16]
 80069d8:	4650      	mov	r0, sl
 80069da:	f7ff feb7 	bl	800674c <_free_r>
 80069de:	230c      	movs	r3, #12
 80069e0:	f8ca 3000 	str.w	r3, [sl]
 80069e4:	89a3      	ldrh	r3, [r4, #12]
 80069e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069ea:	81a3      	strh	r3, [r4, #12]
 80069ec:	f04f 30ff 	mov.w	r0, #4294967295
 80069f0:	e7e9      	b.n	80069c6 <__ssputs_r+0x8a>
	...

080069f4 <_svfiprintf_r>:
 80069f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069f8:	4698      	mov	r8, r3
 80069fa:	898b      	ldrh	r3, [r1, #12]
 80069fc:	061b      	lsls	r3, r3, #24
 80069fe:	b09d      	sub	sp, #116	@ 0x74
 8006a00:	4607      	mov	r7, r0
 8006a02:	460d      	mov	r5, r1
 8006a04:	4614      	mov	r4, r2
 8006a06:	d510      	bpl.n	8006a2a <_svfiprintf_r+0x36>
 8006a08:	690b      	ldr	r3, [r1, #16]
 8006a0a:	b973      	cbnz	r3, 8006a2a <_svfiprintf_r+0x36>
 8006a0c:	2140      	movs	r1, #64	@ 0x40
 8006a0e:	f7ff ff09 	bl	8006824 <_malloc_r>
 8006a12:	6028      	str	r0, [r5, #0]
 8006a14:	6128      	str	r0, [r5, #16]
 8006a16:	b930      	cbnz	r0, 8006a26 <_svfiprintf_r+0x32>
 8006a18:	230c      	movs	r3, #12
 8006a1a:	603b      	str	r3, [r7, #0]
 8006a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a20:	b01d      	add	sp, #116	@ 0x74
 8006a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a26:	2340      	movs	r3, #64	@ 0x40
 8006a28:	616b      	str	r3, [r5, #20]
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a2e:	2320      	movs	r3, #32
 8006a30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006a34:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a38:	2330      	movs	r3, #48	@ 0x30
 8006a3a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006bd8 <_svfiprintf_r+0x1e4>
 8006a3e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006a42:	f04f 0901 	mov.w	r9, #1
 8006a46:	4623      	mov	r3, r4
 8006a48:	469a      	mov	sl, r3
 8006a4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a4e:	b10a      	cbz	r2, 8006a54 <_svfiprintf_r+0x60>
 8006a50:	2a25      	cmp	r2, #37	@ 0x25
 8006a52:	d1f9      	bne.n	8006a48 <_svfiprintf_r+0x54>
 8006a54:	ebba 0b04 	subs.w	fp, sl, r4
 8006a58:	d00b      	beq.n	8006a72 <_svfiprintf_r+0x7e>
 8006a5a:	465b      	mov	r3, fp
 8006a5c:	4622      	mov	r2, r4
 8006a5e:	4629      	mov	r1, r5
 8006a60:	4638      	mov	r0, r7
 8006a62:	f7ff ff6b 	bl	800693c <__ssputs_r>
 8006a66:	3001      	adds	r0, #1
 8006a68:	f000 80a7 	beq.w	8006bba <_svfiprintf_r+0x1c6>
 8006a6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a6e:	445a      	add	r2, fp
 8006a70:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a72:	f89a 3000 	ldrb.w	r3, [sl]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	f000 809f 	beq.w	8006bba <_svfiprintf_r+0x1c6>
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a86:	f10a 0a01 	add.w	sl, sl, #1
 8006a8a:	9304      	str	r3, [sp, #16]
 8006a8c:	9307      	str	r3, [sp, #28]
 8006a8e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006a92:	931a      	str	r3, [sp, #104]	@ 0x68
 8006a94:	4654      	mov	r4, sl
 8006a96:	2205      	movs	r2, #5
 8006a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a9c:	484e      	ldr	r0, [pc, #312]	@ (8006bd8 <_svfiprintf_r+0x1e4>)
 8006a9e:	f7f9 fb9f 	bl	80001e0 <memchr>
 8006aa2:	9a04      	ldr	r2, [sp, #16]
 8006aa4:	b9d8      	cbnz	r0, 8006ade <_svfiprintf_r+0xea>
 8006aa6:	06d0      	lsls	r0, r2, #27
 8006aa8:	bf44      	itt	mi
 8006aaa:	2320      	movmi	r3, #32
 8006aac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ab0:	0711      	lsls	r1, r2, #28
 8006ab2:	bf44      	itt	mi
 8006ab4:	232b      	movmi	r3, #43	@ 0x2b
 8006ab6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006aba:	f89a 3000 	ldrb.w	r3, [sl]
 8006abe:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ac0:	d015      	beq.n	8006aee <_svfiprintf_r+0xfa>
 8006ac2:	9a07      	ldr	r2, [sp, #28]
 8006ac4:	4654      	mov	r4, sl
 8006ac6:	2000      	movs	r0, #0
 8006ac8:	f04f 0c0a 	mov.w	ip, #10
 8006acc:	4621      	mov	r1, r4
 8006ace:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ad2:	3b30      	subs	r3, #48	@ 0x30
 8006ad4:	2b09      	cmp	r3, #9
 8006ad6:	d94b      	bls.n	8006b70 <_svfiprintf_r+0x17c>
 8006ad8:	b1b0      	cbz	r0, 8006b08 <_svfiprintf_r+0x114>
 8006ada:	9207      	str	r2, [sp, #28]
 8006adc:	e014      	b.n	8006b08 <_svfiprintf_r+0x114>
 8006ade:	eba0 0308 	sub.w	r3, r0, r8
 8006ae2:	fa09 f303 	lsl.w	r3, r9, r3
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	9304      	str	r3, [sp, #16]
 8006aea:	46a2      	mov	sl, r4
 8006aec:	e7d2      	b.n	8006a94 <_svfiprintf_r+0xa0>
 8006aee:	9b03      	ldr	r3, [sp, #12]
 8006af0:	1d19      	adds	r1, r3, #4
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	9103      	str	r1, [sp, #12]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	bfbb      	ittet	lt
 8006afa:	425b      	neglt	r3, r3
 8006afc:	f042 0202 	orrlt.w	r2, r2, #2
 8006b00:	9307      	strge	r3, [sp, #28]
 8006b02:	9307      	strlt	r3, [sp, #28]
 8006b04:	bfb8      	it	lt
 8006b06:	9204      	strlt	r2, [sp, #16]
 8006b08:	7823      	ldrb	r3, [r4, #0]
 8006b0a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006b0c:	d10a      	bne.n	8006b24 <_svfiprintf_r+0x130>
 8006b0e:	7863      	ldrb	r3, [r4, #1]
 8006b10:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b12:	d132      	bne.n	8006b7a <_svfiprintf_r+0x186>
 8006b14:	9b03      	ldr	r3, [sp, #12]
 8006b16:	1d1a      	adds	r2, r3, #4
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	9203      	str	r2, [sp, #12]
 8006b1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006b20:	3402      	adds	r4, #2
 8006b22:	9305      	str	r3, [sp, #20]
 8006b24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006be8 <_svfiprintf_r+0x1f4>
 8006b28:	7821      	ldrb	r1, [r4, #0]
 8006b2a:	2203      	movs	r2, #3
 8006b2c:	4650      	mov	r0, sl
 8006b2e:	f7f9 fb57 	bl	80001e0 <memchr>
 8006b32:	b138      	cbz	r0, 8006b44 <_svfiprintf_r+0x150>
 8006b34:	9b04      	ldr	r3, [sp, #16]
 8006b36:	eba0 000a 	sub.w	r0, r0, sl
 8006b3a:	2240      	movs	r2, #64	@ 0x40
 8006b3c:	4082      	lsls	r2, r0
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	3401      	adds	r4, #1
 8006b42:	9304      	str	r3, [sp, #16]
 8006b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b48:	4824      	ldr	r0, [pc, #144]	@ (8006bdc <_svfiprintf_r+0x1e8>)
 8006b4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006b4e:	2206      	movs	r2, #6
 8006b50:	f7f9 fb46 	bl	80001e0 <memchr>
 8006b54:	2800      	cmp	r0, #0
 8006b56:	d036      	beq.n	8006bc6 <_svfiprintf_r+0x1d2>
 8006b58:	4b21      	ldr	r3, [pc, #132]	@ (8006be0 <_svfiprintf_r+0x1ec>)
 8006b5a:	bb1b      	cbnz	r3, 8006ba4 <_svfiprintf_r+0x1b0>
 8006b5c:	9b03      	ldr	r3, [sp, #12]
 8006b5e:	3307      	adds	r3, #7
 8006b60:	f023 0307 	bic.w	r3, r3, #7
 8006b64:	3308      	adds	r3, #8
 8006b66:	9303      	str	r3, [sp, #12]
 8006b68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b6a:	4433      	add	r3, r6
 8006b6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b6e:	e76a      	b.n	8006a46 <_svfiprintf_r+0x52>
 8006b70:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b74:	460c      	mov	r4, r1
 8006b76:	2001      	movs	r0, #1
 8006b78:	e7a8      	b.n	8006acc <_svfiprintf_r+0xd8>
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	3401      	adds	r4, #1
 8006b7e:	9305      	str	r3, [sp, #20]
 8006b80:	4619      	mov	r1, r3
 8006b82:	f04f 0c0a 	mov.w	ip, #10
 8006b86:	4620      	mov	r0, r4
 8006b88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b8c:	3a30      	subs	r2, #48	@ 0x30
 8006b8e:	2a09      	cmp	r2, #9
 8006b90:	d903      	bls.n	8006b9a <_svfiprintf_r+0x1a6>
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d0c6      	beq.n	8006b24 <_svfiprintf_r+0x130>
 8006b96:	9105      	str	r1, [sp, #20]
 8006b98:	e7c4      	b.n	8006b24 <_svfiprintf_r+0x130>
 8006b9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b9e:	4604      	mov	r4, r0
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e7f0      	b.n	8006b86 <_svfiprintf_r+0x192>
 8006ba4:	ab03      	add	r3, sp, #12
 8006ba6:	9300      	str	r3, [sp, #0]
 8006ba8:	462a      	mov	r2, r5
 8006baa:	4b0e      	ldr	r3, [pc, #56]	@ (8006be4 <_svfiprintf_r+0x1f0>)
 8006bac:	a904      	add	r1, sp, #16
 8006bae:	4638      	mov	r0, r7
 8006bb0:	f3af 8000 	nop.w
 8006bb4:	1c42      	adds	r2, r0, #1
 8006bb6:	4606      	mov	r6, r0
 8006bb8:	d1d6      	bne.n	8006b68 <_svfiprintf_r+0x174>
 8006bba:	89ab      	ldrh	r3, [r5, #12]
 8006bbc:	065b      	lsls	r3, r3, #25
 8006bbe:	f53f af2d 	bmi.w	8006a1c <_svfiprintf_r+0x28>
 8006bc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006bc4:	e72c      	b.n	8006a20 <_svfiprintf_r+0x2c>
 8006bc6:	ab03      	add	r3, sp, #12
 8006bc8:	9300      	str	r3, [sp, #0]
 8006bca:	462a      	mov	r2, r5
 8006bcc:	4b05      	ldr	r3, [pc, #20]	@ (8006be4 <_svfiprintf_r+0x1f0>)
 8006bce:	a904      	add	r1, sp, #16
 8006bd0:	4638      	mov	r0, r7
 8006bd2:	f000 f879 	bl	8006cc8 <_printf_i>
 8006bd6:	e7ed      	b.n	8006bb4 <_svfiprintf_r+0x1c0>
 8006bd8:	0800711c 	.word	0x0800711c
 8006bdc:	08007126 	.word	0x08007126
 8006be0:	00000000 	.word	0x00000000
 8006be4:	0800693d 	.word	0x0800693d
 8006be8:	08007122 	.word	0x08007122

08006bec <_printf_common>:
 8006bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bf0:	4616      	mov	r6, r2
 8006bf2:	4698      	mov	r8, r3
 8006bf4:	688a      	ldr	r2, [r1, #8]
 8006bf6:	690b      	ldr	r3, [r1, #16]
 8006bf8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	bfb8      	it	lt
 8006c00:	4613      	movlt	r3, r2
 8006c02:	6033      	str	r3, [r6, #0]
 8006c04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006c08:	4607      	mov	r7, r0
 8006c0a:	460c      	mov	r4, r1
 8006c0c:	b10a      	cbz	r2, 8006c12 <_printf_common+0x26>
 8006c0e:	3301      	adds	r3, #1
 8006c10:	6033      	str	r3, [r6, #0]
 8006c12:	6823      	ldr	r3, [r4, #0]
 8006c14:	0699      	lsls	r1, r3, #26
 8006c16:	bf42      	ittt	mi
 8006c18:	6833      	ldrmi	r3, [r6, #0]
 8006c1a:	3302      	addmi	r3, #2
 8006c1c:	6033      	strmi	r3, [r6, #0]
 8006c1e:	6825      	ldr	r5, [r4, #0]
 8006c20:	f015 0506 	ands.w	r5, r5, #6
 8006c24:	d106      	bne.n	8006c34 <_printf_common+0x48>
 8006c26:	f104 0a19 	add.w	sl, r4, #25
 8006c2a:	68e3      	ldr	r3, [r4, #12]
 8006c2c:	6832      	ldr	r2, [r6, #0]
 8006c2e:	1a9b      	subs	r3, r3, r2
 8006c30:	42ab      	cmp	r3, r5
 8006c32:	dc26      	bgt.n	8006c82 <_printf_common+0x96>
 8006c34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006c38:	6822      	ldr	r2, [r4, #0]
 8006c3a:	3b00      	subs	r3, #0
 8006c3c:	bf18      	it	ne
 8006c3e:	2301      	movne	r3, #1
 8006c40:	0692      	lsls	r2, r2, #26
 8006c42:	d42b      	bmi.n	8006c9c <_printf_common+0xb0>
 8006c44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006c48:	4641      	mov	r1, r8
 8006c4a:	4638      	mov	r0, r7
 8006c4c:	47c8      	blx	r9
 8006c4e:	3001      	adds	r0, #1
 8006c50:	d01e      	beq.n	8006c90 <_printf_common+0xa4>
 8006c52:	6823      	ldr	r3, [r4, #0]
 8006c54:	6922      	ldr	r2, [r4, #16]
 8006c56:	f003 0306 	and.w	r3, r3, #6
 8006c5a:	2b04      	cmp	r3, #4
 8006c5c:	bf02      	ittt	eq
 8006c5e:	68e5      	ldreq	r5, [r4, #12]
 8006c60:	6833      	ldreq	r3, [r6, #0]
 8006c62:	1aed      	subeq	r5, r5, r3
 8006c64:	68a3      	ldr	r3, [r4, #8]
 8006c66:	bf0c      	ite	eq
 8006c68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c6c:	2500      	movne	r5, #0
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	bfc4      	itt	gt
 8006c72:	1a9b      	subgt	r3, r3, r2
 8006c74:	18ed      	addgt	r5, r5, r3
 8006c76:	2600      	movs	r6, #0
 8006c78:	341a      	adds	r4, #26
 8006c7a:	42b5      	cmp	r5, r6
 8006c7c:	d11a      	bne.n	8006cb4 <_printf_common+0xc8>
 8006c7e:	2000      	movs	r0, #0
 8006c80:	e008      	b.n	8006c94 <_printf_common+0xa8>
 8006c82:	2301      	movs	r3, #1
 8006c84:	4652      	mov	r2, sl
 8006c86:	4641      	mov	r1, r8
 8006c88:	4638      	mov	r0, r7
 8006c8a:	47c8      	blx	r9
 8006c8c:	3001      	adds	r0, #1
 8006c8e:	d103      	bne.n	8006c98 <_printf_common+0xac>
 8006c90:	f04f 30ff 	mov.w	r0, #4294967295
 8006c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c98:	3501      	adds	r5, #1
 8006c9a:	e7c6      	b.n	8006c2a <_printf_common+0x3e>
 8006c9c:	18e1      	adds	r1, r4, r3
 8006c9e:	1c5a      	adds	r2, r3, #1
 8006ca0:	2030      	movs	r0, #48	@ 0x30
 8006ca2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006ca6:	4422      	add	r2, r4
 8006ca8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006cac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006cb0:	3302      	adds	r3, #2
 8006cb2:	e7c7      	b.n	8006c44 <_printf_common+0x58>
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	4622      	mov	r2, r4
 8006cb8:	4641      	mov	r1, r8
 8006cba:	4638      	mov	r0, r7
 8006cbc:	47c8      	blx	r9
 8006cbe:	3001      	adds	r0, #1
 8006cc0:	d0e6      	beq.n	8006c90 <_printf_common+0xa4>
 8006cc2:	3601      	adds	r6, #1
 8006cc4:	e7d9      	b.n	8006c7a <_printf_common+0x8e>
	...

08006cc8 <_printf_i>:
 8006cc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ccc:	7e0f      	ldrb	r7, [r1, #24]
 8006cce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006cd0:	2f78      	cmp	r7, #120	@ 0x78
 8006cd2:	4691      	mov	r9, r2
 8006cd4:	4680      	mov	r8, r0
 8006cd6:	460c      	mov	r4, r1
 8006cd8:	469a      	mov	sl, r3
 8006cda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006cde:	d807      	bhi.n	8006cf0 <_printf_i+0x28>
 8006ce0:	2f62      	cmp	r7, #98	@ 0x62
 8006ce2:	d80a      	bhi.n	8006cfa <_printf_i+0x32>
 8006ce4:	2f00      	cmp	r7, #0
 8006ce6:	f000 80d1 	beq.w	8006e8c <_printf_i+0x1c4>
 8006cea:	2f58      	cmp	r7, #88	@ 0x58
 8006cec:	f000 80b8 	beq.w	8006e60 <_printf_i+0x198>
 8006cf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006cf4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006cf8:	e03a      	b.n	8006d70 <_printf_i+0xa8>
 8006cfa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006cfe:	2b15      	cmp	r3, #21
 8006d00:	d8f6      	bhi.n	8006cf0 <_printf_i+0x28>
 8006d02:	a101      	add	r1, pc, #4	@ (adr r1, 8006d08 <_printf_i+0x40>)
 8006d04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d08:	08006d61 	.word	0x08006d61
 8006d0c:	08006d75 	.word	0x08006d75
 8006d10:	08006cf1 	.word	0x08006cf1
 8006d14:	08006cf1 	.word	0x08006cf1
 8006d18:	08006cf1 	.word	0x08006cf1
 8006d1c:	08006cf1 	.word	0x08006cf1
 8006d20:	08006d75 	.word	0x08006d75
 8006d24:	08006cf1 	.word	0x08006cf1
 8006d28:	08006cf1 	.word	0x08006cf1
 8006d2c:	08006cf1 	.word	0x08006cf1
 8006d30:	08006cf1 	.word	0x08006cf1
 8006d34:	08006e73 	.word	0x08006e73
 8006d38:	08006d9f 	.word	0x08006d9f
 8006d3c:	08006e2d 	.word	0x08006e2d
 8006d40:	08006cf1 	.word	0x08006cf1
 8006d44:	08006cf1 	.word	0x08006cf1
 8006d48:	08006e95 	.word	0x08006e95
 8006d4c:	08006cf1 	.word	0x08006cf1
 8006d50:	08006d9f 	.word	0x08006d9f
 8006d54:	08006cf1 	.word	0x08006cf1
 8006d58:	08006cf1 	.word	0x08006cf1
 8006d5c:	08006e35 	.word	0x08006e35
 8006d60:	6833      	ldr	r3, [r6, #0]
 8006d62:	1d1a      	adds	r2, r3, #4
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	6032      	str	r2, [r6, #0]
 8006d68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006d70:	2301      	movs	r3, #1
 8006d72:	e09c      	b.n	8006eae <_printf_i+0x1e6>
 8006d74:	6833      	ldr	r3, [r6, #0]
 8006d76:	6820      	ldr	r0, [r4, #0]
 8006d78:	1d19      	adds	r1, r3, #4
 8006d7a:	6031      	str	r1, [r6, #0]
 8006d7c:	0606      	lsls	r6, r0, #24
 8006d7e:	d501      	bpl.n	8006d84 <_printf_i+0xbc>
 8006d80:	681d      	ldr	r5, [r3, #0]
 8006d82:	e003      	b.n	8006d8c <_printf_i+0xc4>
 8006d84:	0645      	lsls	r5, r0, #25
 8006d86:	d5fb      	bpl.n	8006d80 <_printf_i+0xb8>
 8006d88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006d8c:	2d00      	cmp	r5, #0
 8006d8e:	da03      	bge.n	8006d98 <_printf_i+0xd0>
 8006d90:	232d      	movs	r3, #45	@ 0x2d
 8006d92:	426d      	negs	r5, r5
 8006d94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d98:	4858      	ldr	r0, [pc, #352]	@ (8006efc <_printf_i+0x234>)
 8006d9a:	230a      	movs	r3, #10
 8006d9c:	e011      	b.n	8006dc2 <_printf_i+0xfa>
 8006d9e:	6821      	ldr	r1, [r4, #0]
 8006da0:	6833      	ldr	r3, [r6, #0]
 8006da2:	0608      	lsls	r0, r1, #24
 8006da4:	f853 5b04 	ldr.w	r5, [r3], #4
 8006da8:	d402      	bmi.n	8006db0 <_printf_i+0xe8>
 8006daa:	0649      	lsls	r1, r1, #25
 8006dac:	bf48      	it	mi
 8006dae:	b2ad      	uxthmi	r5, r5
 8006db0:	2f6f      	cmp	r7, #111	@ 0x6f
 8006db2:	4852      	ldr	r0, [pc, #328]	@ (8006efc <_printf_i+0x234>)
 8006db4:	6033      	str	r3, [r6, #0]
 8006db6:	bf14      	ite	ne
 8006db8:	230a      	movne	r3, #10
 8006dba:	2308      	moveq	r3, #8
 8006dbc:	2100      	movs	r1, #0
 8006dbe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006dc2:	6866      	ldr	r6, [r4, #4]
 8006dc4:	60a6      	str	r6, [r4, #8]
 8006dc6:	2e00      	cmp	r6, #0
 8006dc8:	db05      	blt.n	8006dd6 <_printf_i+0x10e>
 8006dca:	6821      	ldr	r1, [r4, #0]
 8006dcc:	432e      	orrs	r6, r5
 8006dce:	f021 0104 	bic.w	r1, r1, #4
 8006dd2:	6021      	str	r1, [r4, #0]
 8006dd4:	d04b      	beq.n	8006e6e <_printf_i+0x1a6>
 8006dd6:	4616      	mov	r6, r2
 8006dd8:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ddc:	fb03 5711 	mls	r7, r3, r1, r5
 8006de0:	5dc7      	ldrb	r7, [r0, r7]
 8006de2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006de6:	462f      	mov	r7, r5
 8006de8:	42bb      	cmp	r3, r7
 8006dea:	460d      	mov	r5, r1
 8006dec:	d9f4      	bls.n	8006dd8 <_printf_i+0x110>
 8006dee:	2b08      	cmp	r3, #8
 8006df0:	d10b      	bne.n	8006e0a <_printf_i+0x142>
 8006df2:	6823      	ldr	r3, [r4, #0]
 8006df4:	07df      	lsls	r7, r3, #31
 8006df6:	d508      	bpl.n	8006e0a <_printf_i+0x142>
 8006df8:	6923      	ldr	r3, [r4, #16]
 8006dfa:	6861      	ldr	r1, [r4, #4]
 8006dfc:	4299      	cmp	r1, r3
 8006dfe:	bfde      	ittt	le
 8006e00:	2330      	movle	r3, #48	@ 0x30
 8006e02:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e06:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006e0a:	1b92      	subs	r2, r2, r6
 8006e0c:	6122      	str	r2, [r4, #16]
 8006e0e:	f8cd a000 	str.w	sl, [sp]
 8006e12:	464b      	mov	r3, r9
 8006e14:	aa03      	add	r2, sp, #12
 8006e16:	4621      	mov	r1, r4
 8006e18:	4640      	mov	r0, r8
 8006e1a:	f7ff fee7 	bl	8006bec <_printf_common>
 8006e1e:	3001      	adds	r0, #1
 8006e20:	d14a      	bne.n	8006eb8 <_printf_i+0x1f0>
 8006e22:	f04f 30ff 	mov.w	r0, #4294967295
 8006e26:	b004      	add	sp, #16
 8006e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e2c:	6823      	ldr	r3, [r4, #0]
 8006e2e:	f043 0320 	orr.w	r3, r3, #32
 8006e32:	6023      	str	r3, [r4, #0]
 8006e34:	4832      	ldr	r0, [pc, #200]	@ (8006f00 <_printf_i+0x238>)
 8006e36:	2778      	movs	r7, #120	@ 0x78
 8006e38:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006e3c:	6823      	ldr	r3, [r4, #0]
 8006e3e:	6831      	ldr	r1, [r6, #0]
 8006e40:	061f      	lsls	r7, r3, #24
 8006e42:	f851 5b04 	ldr.w	r5, [r1], #4
 8006e46:	d402      	bmi.n	8006e4e <_printf_i+0x186>
 8006e48:	065f      	lsls	r7, r3, #25
 8006e4a:	bf48      	it	mi
 8006e4c:	b2ad      	uxthmi	r5, r5
 8006e4e:	6031      	str	r1, [r6, #0]
 8006e50:	07d9      	lsls	r1, r3, #31
 8006e52:	bf44      	itt	mi
 8006e54:	f043 0320 	orrmi.w	r3, r3, #32
 8006e58:	6023      	strmi	r3, [r4, #0]
 8006e5a:	b11d      	cbz	r5, 8006e64 <_printf_i+0x19c>
 8006e5c:	2310      	movs	r3, #16
 8006e5e:	e7ad      	b.n	8006dbc <_printf_i+0xf4>
 8006e60:	4826      	ldr	r0, [pc, #152]	@ (8006efc <_printf_i+0x234>)
 8006e62:	e7e9      	b.n	8006e38 <_printf_i+0x170>
 8006e64:	6823      	ldr	r3, [r4, #0]
 8006e66:	f023 0320 	bic.w	r3, r3, #32
 8006e6a:	6023      	str	r3, [r4, #0]
 8006e6c:	e7f6      	b.n	8006e5c <_printf_i+0x194>
 8006e6e:	4616      	mov	r6, r2
 8006e70:	e7bd      	b.n	8006dee <_printf_i+0x126>
 8006e72:	6833      	ldr	r3, [r6, #0]
 8006e74:	6825      	ldr	r5, [r4, #0]
 8006e76:	6961      	ldr	r1, [r4, #20]
 8006e78:	1d18      	adds	r0, r3, #4
 8006e7a:	6030      	str	r0, [r6, #0]
 8006e7c:	062e      	lsls	r6, r5, #24
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	d501      	bpl.n	8006e86 <_printf_i+0x1be>
 8006e82:	6019      	str	r1, [r3, #0]
 8006e84:	e002      	b.n	8006e8c <_printf_i+0x1c4>
 8006e86:	0668      	lsls	r0, r5, #25
 8006e88:	d5fb      	bpl.n	8006e82 <_printf_i+0x1ba>
 8006e8a:	8019      	strh	r1, [r3, #0]
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	6123      	str	r3, [r4, #16]
 8006e90:	4616      	mov	r6, r2
 8006e92:	e7bc      	b.n	8006e0e <_printf_i+0x146>
 8006e94:	6833      	ldr	r3, [r6, #0]
 8006e96:	1d1a      	adds	r2, r3, #4
 8006e98:	6032      	str	r2, [r6, #0]
 8006e9a:	681e      	ldr	r6, [r3, #0]
 8006e9c:	6862      	ldr	r2, [r4, #4]
 8006e9e:	2100      	movs	r1, #0
 8006ea0:	4630      	mov	r0, r6
 8006ea2:	f7f9 f99d 	bl	80001e0 <memchr>
 8006ea6:	b108      	cbz	r0, 8006eac <_printf_i+0x1e4>
 8006ea8:	1b80      	subs	r0, r0, r6
 8006eaa:	6060      	str	r0, [r4, #4]
 8006eac:	6863      	ldr	r3, [r4, #4]
 8006eae:	6123      	str	r3, [r4, #16]
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006eb6:	e7aa      	b.n	8006e0e <_printf_i+0x146>
 8006eb8:	6923      	ldr	r3, [r4, #16]
 8006eba:	4632      	mov	r2, r6
 8006ebc:	4649      	mov	r1, r9
 8006ebe:	4640      	mov	r0, r8
 8006ec0:	47d0      	blx	sl
 8006ec2:	3001      	adds	r0, #1
 8006ec4:	d0ad      	beq.n	8006e22 <_printf_i+0x15a>
 8006ec6:	6823      	ldr	r3, [r4, #0]
 8006ec8:	079b      	lsls	r3, r3, #30
 8006eca:	d413      	bmi.n	8006ef4 <_printf_i+0x22c>
 8006ecc:	68e0      	ldr	r0, [r4, #12]
 8006ece:	9b03      	ldr	r3, [sp, #12]
 8006ed0:	4298      	cmp	r0, r3
 8006ed2:	bfb8      	it	lt
 8006ed4:	4618      	movlt	r0, r3
 8006ed6:	e7a6      	b.n	8006e26 <_printf_i+0x15e>
 8006ed8:	2301      	movs	r3, #1
 8006eda:	4632      	mov	r2, r6
 8006edc:	4649      	mov	r1, r9
 8006ede:	4640      	mov	r0, r8
 8006ee0:	47d0      	blx	sl
 8006ee2:	3001      	adds	r0, #1
 8006ee4:	d09d      	beq.n	8006e22 <_printf_i+0x15a>
 8006ee6:	3501      	adds	r5, #1
 8006ee8:	68e3      	ldr	r3, [r4, #12]
 8006eea:	9903      	ldr	r1, [sp, #12]
 8006eec:	1a5b      	subs	r3, r3, r1
 8006eee:	42ab      	cmp	r3, r5
 8006ef0:	dcf2      	bgt.n	8006ed8 <_printf_i+0x210>
 8006ef2:	e7eb      	b.n	8006ecc <_printf_i+0x204>
 8006ef4:	2500      	movs	r5, #0
 8006ef6:	f104 0619 	add.w	r6, r4, #25
 8006efa:	e7f5      	b.n	8006ee8 <_printf_i+0x220>
 8006efc:	0800712d 	.word	0x0800712d
 8006f00:	0800713e 	.word	0x0800713e

08006f04 <memmove>:
 8006f04:	4288      	cmp	r0, r1
 8006f06:	b510      	push	{r4, lr}
 8006f08:	eb01 0402 	add.w	r4, r1, r2
 8006f0c:	d902      	bls.n	8006f14 <memmove+0x10>
 8006f0e:	4284      	cmp	r4, r0
 8006f10:	4623      	mov	r3, r4
 8006f12:	d807      	bhi.n	8006f24 <memmove+0x20>
 8006f14:	1e43      	subs	r3, r0, #1
 8006f16:	42a1      	cmp	r1, r4
 8006f18:	d008      	beq.n	8006f2c <memmove+0x28>
 8006f1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f22:	e7f8      	b.n	8006f16 <memmove+0x12>
 8006f24:	4402      	add	r2, r0
 8006f26:	4601      	mov	r1, r0
 8006f28:	428a      	cmp	r2, r1
 8006f2a:	d100      	bne.n	8006f2e <memmove+0x2a>
 8006f2c:	bd10      	pop	{r4, pc}
 8006f2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f36:	e7f7      	b.n	8006f28 <memmove+0x24>

08006f38 <_sbrk_r>:
 8006f38:	b538      	push	{r3, r4, r5, lr}
 8006f3a:	4d06      	ldr	r5, [pc, #24]	@ (8006f54 <_sbrk_r+0x1c>)
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	4604      	mov	r4, r0
 8006f40:	4608      	mov	r0, r1
 8006f42:	602b      	str	r3, [r5, #0]
 8006f44:	f7f9 fe6a 	bl	8000c1c <_sbrk>
 8006f48:	1c43      	adds	r3, r0, #1
 8006f4a:	d102      	bne.n	8006f52 <_sbrk_r+0x1a>
 8006f4c:	682b      	ldr	r3, [r5, #0]
 8006f4e:	b103      	cbz	r3, 8006f52 <_sbrk_r+0x1a>
 8006f50:	6023      	str	r3, [r4, #0]
 8006f52:	bd38      	pop	{r3, r4, r5, pc}
 8006f54:	2000434c 	.word	0x2000434c

08006f58 <_realloc_r>:
 8006f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f5c:	4607      	mov	r7, r0
 8006f5e:	4614      	mov	r4, r2
 8006f60:	460d      	mov	r5, r1
 8006f62:	b921      	cbnz	r1, 8006f6e <_realloc_r+0x16>
 8006f64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f68:	4611      	mov	r1, r2
 8006f6a:	f7ff bc5b 	b.w	8006824 <_malloc_r>
 8006f6e:	b92a      	cbnz	r2, 8006f7c <_realloc_r+0x24>
 8006f70:	f7ff fbec 	bl	800674c <_free_r>
 8006f74:	4625      	mov	r5, r4
 8006f76:	4628      	mov	r0, r5
 8006f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f7c:	f000 f81a 	bl	8006fb4 <_malloc_usable_size_r>
 8006f80:	4284      	cmp	r4, r0
 8006f82:	4606      	mov	r6, r0
 8006f84:	d802      	bhi.n	8006f8c <_realloc_r+0x34>
 8006f86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006f8a:	d8f4      	bhi.n	8006f76 <_realloc_r+0x1e>
 8006f8c:	4621      	mov	r1, r4
 8006f8e:	4638      	mov	r0, r7
 8006f90:	f7ff fc48 	bl	8006824 <_malloc_r>
 8006f94:	4680      	mov	r8, r0
 8006f96:	b908      	cbnz	r0, 8006f9c <_realloc_r+0x44>
 8006f98:	4645      	mov	r5, r8
 8006f9a:	e7ec      	b.n	8006f76 <_realloc_r+0x1e>
 8006f9c:	42b4      	cmp	r4, r6
 8006f9e:	4622      	mov	r2, r4
 8006fa0:	4629      	mov	r1, r5
 8006fa2:	bf28      	it	cs
 8006fa4:	4632      	movcs	r2, r6
 8006fa6:	f7ff fbc3 	bl	8006730 <memcpy>
 8006faa:	4629      	mov	r1, r5
 8006fac:	4638      	mov	r0, r7
 8006fae:	f7ff fbcd 	bl	800674c <_free_r>
 8006fb2:	e7f1      	b.n	8006f98 <_realloc_r+0x40>

08006fb4 <_malloc_usable_size_r>:
 8006fb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fb8:	1f18      	subs	r0, r3, #4
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	bfbc      	itt	lt
 8006fbe:	580b      	ldrlt	r3, [r1, r0]
 8006fc0:	18c0      	addlt	r0, r0, r3
 8006fc2:	4770      	bx	lr

08006fc4 <_init>:
 8006fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fc6:	bf00      	nop
 8006fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fca:	bc08      	pop	{r3}
 8006fcc:	469e      	mov	lr, r3
 8006fce:	4770      	bx	lr

08006fd0 <_fini>:
 8006fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd2:	bf00      	nop
 8006fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fd6:	bc08      	pop	{r3}
 8006fd8:	469e      	mov	lr, r3
 8006fda:	4770      	bx	lr
