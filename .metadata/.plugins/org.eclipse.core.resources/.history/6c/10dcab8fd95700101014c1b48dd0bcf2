
250703_RTOS_StopWatch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057c0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08005960  08005960  00006960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a54  08005a54  000070c0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005a54  08005a54  00006a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a5c  08005a5c  000070c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a5c  08005a5c  00006a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a60  08005a60  00006a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c0  20000000  08005a64  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004280  200000c0  08005b24  000070c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004340  08005b24  00007340  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000070c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d5a  00000000  00000000  000070f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ead  00000000  00000000  0001ce4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001458  00000000  00000000  00020cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f91  00000000  00000000  00022150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a140  00000000  00000000  000230e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b822  00000000  00000000  0003d221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097ba2  00000000  00000000  00058a43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f05e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054b4  00000000  00000000  000f0628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000f5adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000c0 	.word	0x200000c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005948 	.word	0x08005948

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000c4 	.word	0x200000c4
 80001dc:	08005948 	.word	0x08005948

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b988 	b.w	8000508 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	468e      	mov	lr, r1
 8000218:	4604      	mov	r4, r0
 800021a:	4688      	mov	r8, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d962      	bls.n	80002ec <__udivmoddi4+0xdc>
 8000226:	fab2 f682 	clz	r6, r2
 800022a:	b14e      	cbz	r6, 8000240 <__udivmoddi4+0x30>
 800022c:	f1c6 0320 	rsb	r3, r6, #32
 8000230:	fa01 f806 	lsl.w	r8, r1, r6
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	40b7      	lsls	r7, r6
 800023a:	ea43 0808 	orr.w	r8, r3, r8
 800023e:	40b4      	lsls	r4, r6
 8000240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000244:	fa1f fc87 	uxth.w	ip, r7
 8000248:	fbb8 f1fe 	udiv	r1, r8, lr
 800024c:	0c23      	lsrs	r3, r4, #16
 800024e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000252:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000256:	fb01 f20c 	mul.w	r2, r1, ip
 800025a:	429a      	cmp	r2, r3
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0x62>
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	f101 30ff 	add.w	r0, r1, #4294967295
 8000264:	f080 80ea 	bcs.w	800043c <__udivmoddi4+0x22c>
 8000268:	429a      	cmp	r2, r3
 800026a:	f240 80e7 	bls.w	800043c <__udivmoddi4+0x22c>
 800026e:	3902      	subs	r1, #2
 8000270:	443b      	add	r3, r7
 8000272:	1a9a      	subs	r2, r3, r2
 8000274:	b2a3      	uxth	r3, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000282:	fb00 fc0c 	mul.w	ip, r0, ip
 8000286:	459c      	cmp	ip, r3
 8000288:	d909      	bls.n	800029e <__udivmoddi4+0x8e>
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000290:	f080 80d6 	bcs.w	8000440 <__udivmoddi4+0x230>
 8000294:	459c      	cmp	ip, r3
 8000296:	f240 80d3 	bls.w	8000440 <__udivmoddi4+0x230>
 800029a:	443b      	add	r3, r7
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a2:	eba3 030c 	sub.w	r3, r3, ip
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40f3      	lsrs	r3, r6
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xb6>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb0>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x14c>
 80002ce:	4573      	cmp	r3, lr
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xc8>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 8105 	bhi.w	80004e2 <__udivmoddi4+0x2d2>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb6e 0203 	sbc.w	r2, lr, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4690      	mov	r8, r2
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e5      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002e6:	e9c5 4800 	strd	r4, r8, [r5]
 80002ea:	e7e2      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f000 8090 	beq.w	8000412 <__udivmoddi4+0x202>
 80002f2:	fab2 f682 	clz	r6, r2
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	f040 80a4 	bne.w	8000444 <__udivmoddi4+0x234>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	0c03      	lsrs	r3, r0, #16
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	b280      	uxth	r0, r0
 8000306:	b2bc      	uxth	r4, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb2 fcfe 	udiv	ip, r2, lr
 800030e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb04 f20c 	mul.w	r2, r4, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x11e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x11c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 80e0 	bhi.w	80004ec <__udivmoddi4+0x2dc>
 800032c:	46c4      	mov	ip, r8
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	fbb3 f2fe 	udiv	r2, r3, lr
 8000334:	fb0e 3312 	mls	r3, lr, r2, r3
 8000338:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800033c:	fb02 f404 	mul.w	r4, r2, r4
 8000340:	429c      	cmp	r4, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x144>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f102 30ff 	add.w	r0, r2, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x142>
 800034c:	429c      	cmp	r4, r3
 800034e:	f200 80ca 	bhi.w	80004e6 <__udivmoddi4+0x2d6>
 8000352:	4602      	mov	r2, r0
 8000354:	1b1b      	subs	r3, r3, r4
 8000356:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x98>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa0e f401 	lsl.w	r4, lr, r1
 800036c:	fa20 f306 	lsr.w	r3, r0, r6
 8000370:	fa2e fe06 	lsr.w	lr, lr, r6
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	fa1f fc87 	uxth.w	ip, r7
 8000382:	fbbe f0f9 	udiv	r0, lr, r9
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	fb09 ee10 	mls	lr, r9, r0, lr
 800038c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000390:	fb00 fe0c 	mul.w	lr, r0, ip
 8000394:	45a6      	cmp	lr, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x1a0>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 3aff 	add.w	sl, r0, #4294967295
 80003a2:	f080 809c 	bcs.w	80004de <__udivmoddi4+0x2ce>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f240 8099 	bls.w	80004de <__udivmoddi4+0x2ce>
 80003ac:	3802      	subs	r0, #2
 80003ae:	443c      	add	r4, r7
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	fa1f fe83 	uxth.w	lr, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c8:	45a4      	cmp	ip, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1ce>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80003d2:	f080 8082 	bcs.w	80004da <__udivmoddi4+0x2ca>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d97f      	bls.n	80004da <__udivmoddi4+0x2ca>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ea:	4564      	cmp	r4, ip
 80003ec:	4673      	mov	r3, lr
 80003ee:	46e1      	mov	r9, ip
 80003f0:	d362      	bcc.n	80004b8 <__udivmoddi4+0x2a8>
 80003f2:	d05f      	beq.n	80004b4 <__udivmoddi4+0x2a4>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x1fe>
 80003f6:	ebb8 0203 	subs.w	r2, r8, r3
 80003fa:	eb64 0409 	sbc.w	r4, r4, r9
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	fa22 f301 	lsr.w	r3, r2, r1
 8000406:	431e      	orrs	r6, r3
 8000408:	40cc      	lsrs	r4, r1
 800040a:	e9c5 6400 	strd	r6, r4, [r5]
 800040e:	2100      	movs	r1, #0
 8000410:	e74f      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000412:	fbb1 fcf2 	udiv	ip, r1, r2
 8000416:	0c01      	lsrs	r1, r0, #16
 8000418:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000422:	463b      	mov	r3, r7
 8000424:	4638      	mov	r0, r7
 8000426:	463c      	mov	r4, r7
 8000428:	46b8      	mov	r8, r7
 800042a:	46be      	mov	lr, r7
 800042c:	2620      	movs	r6, #32
 800042e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000432:	eba2 0208 	sub.w	r2, r2, r8
 8000436:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043a:	e766      	b.n	800030a <__udivmoddi4+0xfa>
 800043c:	4601      	mov	r1, r0
 800043e:	e718      	b.n	8000272 <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e72c      	b.n	800029e <__udivmoddi4+0x8e>
 8000444:	f1c6 0220 	rsb	r2, r6, #32
 8000448:	fa2e f302 	lsr.w	r3, lr, r2
 800044c:	40b7      	lsls	r7, r6
 800044e:	40b1      	lsls	r1, r6
 8000450:	fa20 f202 	lsr.w	r2, r0, r2
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	430a      	orrs	r2, r1
 800045a:	fbb3 f8fe 	udiv	r8, r3, lr
 800045e:	b2bc      	uxth	r4, r7
 8000460:	fb0e 3318 	mls	r3, lr, r8, r3
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb08 f904 	mul.w	r9, r8, r4
 800046e:	40b0      	lsls	r0, r6
 8000470:	4589      	cmp	r9, r1
 8000472:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000476:	b280      	uxth	r0, r0
 8000478:	d93e      	bls.n	80004f8 <__udivmoddi4+0x2e8>
 800047a:	1879      	adds	r1, r7, r1
 800047c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000480:	d201      	bcs.n	8000486 <__udivmoddi4+0x276>
 8000482:	4589      	cmp	r9, r1
 8000484:	d81f      	bhi.n	80004c6 <__udivmoddi4+0x2b6>
 8000486:	eba1 0109 	sub.w	r1, r1, r9
 800048a:	fbb1 f9fe 	udiv	r9, r1, lr
 800048e:	fb09 f804 	mul.w	r8, r9, r4
 8000492:	fb0e 1119 	mls	r1, lr, r9, r1
 8000496:	b292      	uxth	r2, r2
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	4542      	cmp	r2, r8
 800049e:	d229      	bcs.n	80004f4 <__udivmoddi4+0x2e4>
 80004a0:	18ba      	adds	r2, r7, r2
 80004a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004a6:	d2c4      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d2c2      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004ac:	f1a9 0102 	sub.w	r1, r9, #2
 80004b0:	443a      	add	r2, r7
 80004b2:	e7be      	b.n	8000432 <__udivmoddi4+0x222>
 80004b4:	45f0      	cmp	r8, lr
 80004b6:	d29d      	bcs.n	80003f4 <__udivmoddi4+0x1e4>
 80004b8:	ebbe 0302 	subs.w	r3, lr, r2
 80004bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c0:	3801      	subs	r0, #1
 80004c2:	46e1      	mov	r9, ip
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1e4>
 80004c6:	eba7 0909 	sub.w	r9, r7, r9
 80004ca:	4449      	add	r1, r9
 80004cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d4:	fb09 f804 	mul.w	r8, r9, r4
 80004d8:	e7db      	b.n	8000492 <__udivmoddi4+0x282>
 80004da:	4673      	mov	r3, lr
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1ce>
 80004de:	4650      	mov	r0, sl
 80004e0:	e766      	b.n	80003b0 <__udivmoddi4+0x1a0>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e6fd      	b.n	80002e2 <__udivmoddi4+0xd2>
 80004e6:	443b      	add	r3, r7
 80004e8:	3a02      	subs	r2, #2
 80004ea:	e733      	b.n	8000354 <__udivmoddi4+0x144>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	443b      	add	r3, r7
 80004f2:	e71c      	b.n	800032e <__udivmoddi4+0x11e>
 80004f4:	4649      	mov	r1, r9
 80004f6:	e79c      	b.n	8000432 <__udivmoddi4+0x222>
 80004f8:	eba1 0109 	sub.w	r1, r1, r9
 80004fc:	46c4      	mov	ip, r8
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fb09 f804 	mul.w	r8, r9, r4
 8000506:	e7c4      	b.n	8000492 <__udivmoddi4+0x282>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	@ (8000538 <vApplicationGetIdleTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	@ (800053c <vApplicationGetIdleTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2280      	movs	r2, #128	@ 0x80
 8000528:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	200000ec 	.word	0x200000ec
 800053c:	2000018c 	.word	0x2000018c

08000540 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000540:	b5b0      	push	{r4, r5, r7, lr}
 8000542:	b09c      	sub	sp, #112	@ 0x70
 8000544:	af00      	add	r7, sp, #0

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000546:	4b29      	ldr	r3, [pc, #164]	@ (80005ec <MX_FREERTOS_Init+0xac>)
 8000548:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 800054c:	461d      	mov	r5, r3
 800054e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000550:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000552:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000556:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800055a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800055e:	2100      	movs	r1, #0
 8000560:	4618      	mov	r0, r3
 8000562:	f002 fcf0 	bl	8002f46 <osThreadCreate>
 8000566:	4603      	mov	r3, r0
 8000568:	4a21      	ldr	r2, [pc, #132]	@ (80005f0 <MX_FREERTOS_Init+0xb0>)
 800056a:	6013      	str	r3, [r2, #0]

  /* definition and creation of myListenerTask */
  osThreadDef(myListenerTask, StartListenerTask, osPriorityNormal, 0, 128);
 800056c:	4b21      	ldr	r3, [pc, #132]	@ (80005f4 <MX_FREERTOS_Init+0xb4>)
 800056e:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000572:	461d      	mov	r5, r3
 8000574:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000578:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800057c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myListenerTaskHandle = osThreadCreate(osThread(myListenerTask), NULL);
 8000580:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f002 fcdd 	bl	8002f46 <osThreadCreate>
 800058c:	4603      	mov	r3, r0
 800058e:	4a1a      	ldr	r2, [pc, #104]	@ (80005f8 <MX_FREERTOS_Init+0xb8>)
 8000590:	6013      	str	r3, [r2, #0]

  /* definition and creation of myControllerTas */
  osThreadDef(myControllerTas, StartControllerTask, osPriorityNormal, 0, 128);
 8000592:	4b1a      	ldr	r3, [pc, #104]	@ (80005fc <MX_FREERTOS_Init+0xbc>)
 8000594:	f107 041c 	add.w	r4, r7, #28
 8000598:	461d      	mov	r5, r3
 800059a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800059c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800059e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myControllerTasHandle = osThreadCreate(osThread(myControllerTas), NULL);
 80005a6:	f107 031c 	add.w	r3, r7, #28
 80005aa:	2100      	movs	r1, #0
 80005ac:	4618      	mov	r0, r3
 80005ae:	f002 fcca 	bl	8002f46 <osThreadCreate>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a12      	ldr	r2, [pc, #72]	@ (8000600 <MX_FREERTOS_Init+0xc0>)
 80005b6:	6013      	str	r3, [r2, #0]

  /* definition and creation of myPresenterTask */
  osThreadDef(myPresenterTask, StartPresenterTask, osPriorityNormal, 0, 128);
 80005b8:	4b12      	ldr	r3, [pc, #72]	@ (8000604 <MX_FREERTOS_Init+0xc4>)
 80005ba:	463c      	mov	r4, r7
 80005bc:	461d      	mov	r5, r3
 80005be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myPresenterTaskHandle = osThreadCreate(osThread(myPresenterTask), NULL);
 80005ca:	463b      	mov	r3, r7
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 fcb9 	bl	8002f46 <osThreadCreate>
 80005d4:	4603      	mov	r3, r0
 80005d6:	4a0c      	ldr	r2, [pc, #48]	@ (8000608 <MX_FREERTOS_Init+0xc8>)
 80005d8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  Model_StopWatchInit();
 80005da:	f000 fcf5 	bl	8000fc8 <Model_StopWatchInit>
  HAL_TIM_Base_Start_IT(&htim2);
 80005de:	480b      	ldr	r0, [pc, #44]	@ (800060c <MX_FREERTOS_Init+0xcc>)
 80005e0:	f002 f89c 	bl	800271c <HAL_TIM_Base_Start_IT>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80005e4:	bf00      	nop
 80005e6:	3770      	adds	r7, #112	@ 0x70
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bdb0      	pop	{r4, r5, r7, pc}
 80005ec:	0800596c 	.word	0x0800596c
 80005f0:	200000dc 	.word	0x200000dc
 80005f4:	08005998 	.word	0x08005998
 80005f8:	200000e0 	.word	0x200000e0
 80005fc:	080059c4 	.word	0x080059c4
 8000600:	200000e4 	.word	0x200000e4
 8000604:	080059f0 	.word	0x080059f0
 8000608:	200000e8 	.word	0x200000e8
 800060c:	20000428 	.word	0x20000428

08000610 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000618:	2001      	movs	r0, #1
 800061a:	f002 fce0 	bl	8002fde <osDelay>
 800061e:	e7fb      	b.n	8000618 <StartDefaultTask+0x8>

08000620 <StartListenerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartListenerTask */
void StartListenerTask(void const * argument)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartListenerTask */
	Listener_Init();
 8000628:	f000 fc82 	bl	8000f30 <Listener_Init>
  /* Infinite loop */
  for(;;)
  {
	  Listener_Excute();
 800062c:	f000 fc86 	bl	8000f3c <Listener_Excute>
    osDelay(1);
 8000630:	2001      	movs	r0, #1
 8000632:	f002 fcd4 	bl	8002fde <osDelay>
	  Listener_Excute();
 8000636:	bf00      	nop
 8000638:	e7f8      	b.n	800062c <StartListenerTask+0xc>

0800063a <StartControllerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControllerTask */
void StartControllerTask(void const * argument)
{
 800063a:	b580      	push	{r7, lr}
 800063c:	b082      	sub	sp, #8
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControllerTask */
	Controller_Init();
 8000642:	f000 fb48 	bl	8000cd6 <Controller_Init>
  /* Infinite loop */
  for(;;)
  {
	  Controller_Excute();
 8000646:	f000 fb4c 	bl	8000ce2 <Controller_Excute>
    osDelay(1);
 800064a:	2001      	movs	r0, #1
 800064c:	f002 fcc7 	bl	8002fde <osDelay>
	  Controller_Excute();
 8000650:	bf00      	nop
 8000652:	e7f8      	b.n	8000646 <StartControllerTask+0xc>

08000654 <StartPresenterTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPresenterTask */
void StartPresenterTask(void const * argument)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPresenterTask */
	Presenter_Init();
 800065c:	f000 fcea 	bl	8001034 <Presenter_Init>
  /* Infinite loop */
  for(;;)
  {
	  Presenter_Init();
 8000660:	f000 fce8 	bl	8001034 <Presenter_Init>
    osDelay(1);
 8000664:	2001      	movs	r0, #1
 8000666:	f002 fcba 	bl	8002fde <osDelay>
	  Presenter_Init();
 800066a:	bf00      	nop
 800066c:	e7f8      	b.n	8000660 <StartPresenterTask+0xc>
	...

08000670 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08a      	sub	sp, #40	@ 0x28
 8000674:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	613b      	str	r3, [r7, #16]
 800068a:	4b49      	ldr	r3, [pc, #292]	@ (80007b0 <MX_GPIO_Init+0x140>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	4a48      	ldr	r2, [pc, #288]	@ (80007b0 <MX_GPIO_Init+0x140>)
 8000690:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000694:	6313      	str	r3, [r2, #48]	@ 0x30
 8000696:	4b46      	ldr	r3, [pc, #280]	@ (80007b0 <MX_GPIO_Init+0x140>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800069e:	613b      	str	r3, [r7, #16]
 80006a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	60fb      	str	r3, [r7, #12]
 80006a6:	4b42      	ldr	r3, [pc, #264]	@ (80007b0 <MX_GPIO_Init+0x140>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	4a41      	ldr	r2, [pc, #260]	@ (80007b0 <MX_GPIO_Init+0x140>)
 80006ac:	f043 0304 	orr.w	r3, r3, #4
 80006b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b2:	4b3f      	ldr	r3, [pc, #252]	@ (80007b0 <MX_GPIO_Init+0x140>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b6:	f003 0304 	and.w	r3, r3, #4
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	4b3b      	ldr	r3, [pc, #236]	@ (80007b0 <MX_GPIO_Init+0x140>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	4a3a      	ldr	r2, [pc, #232]	@ (80007b0 <MX_GPIO_Init+0x140>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ce:	4b38      	ldr	r3, [pc, #224]	@ (80007b0 <MX_GPIO_Init+0x140>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	4b34      	ldr	r3, [pc, #208]	@ (80007b0 <MX_GPIO_Init+0x140>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	4a33      	ldr	r2, [pc, #204]	@ (80007b0 <MX_GPIO_Init+0x140>)
 80006e4:	f043 0302 	orr.w	r3, r3, #2
 80006e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ea:	4b31      	ldr	r3, [pc, #196]	@ (80007b0 <MX_GPIO_Init+0x140>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	f003 0302 	and.w	r3, r3, #2
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80006f6:	2200      	movs	r2, #0
 80006f8:	f240 117f 	movw	r1, #383	@ 0x17f
 80006fc:	482d      	ldr	r0, [pc, #180]	@ (80007b4 <MX_GPIO_Init+0x144>)
 80006fe:	f001 f995 	bl	8001a2c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_11
 8000702:	2200      	movs	r2, #0
 8000704:	f641 0113 	movw	r1, #6163	@ 0x1813
 8000708:	482b      	ldr	r0, [pc, #172]	@ (80007b8 <MX_GPIO_Init+0x148>)
 800070a:	f001 f98f 	bl	8001a2c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 800070e:	2200      	movs	r2, #0
 8000710:	f24f 0107 	movw	r1, #61447	@ 0xf007
 8000714:	4829      	ldr	r0, [pc, #164]	@ (80007bc <MX_GPIO_Init+0x14c>)
 8000716:	f001 f989 	bl	8001a2c <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800071a:	f240 137f 	movw	r3, #383	@ 0x17f
 800071e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000720:	2301      	movs	r3, #1
 8000722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000728:	2300      	movs	r3, #0
 800072a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	4619      	mov	r1, r3
 8000732:	4820      	ldr	r0, [pc, #128]	@ (80007b4 <MX_GPIO_Init+0x144>)
 8000734:	f000 ffde 	bl	80016f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_11
 8000738:	f641 0313 	movw	r3, #6163	@ 0x1813
 800073c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073e:	2301      	movs	r3, #1
 8000740:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	2300      	movs	r3, #0
 8000748:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074a:	f107 0314 	add.w	r3, r7, #20
 800074e:	4619      	mov	r1, r3
 8000750:	4819      	ldr	r0, [pc, #100]	@ (80007b8 <MX_GPIO_Init+0x148>)
 8000752:	f000 ffcf 	bl	80016f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8000756:	f24f 0307 	movw	r3, #61447	@ 0xf007
 800075a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075c:	2301      	movs	r3, #1
 800075e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000764:	2300      	movs	r3, #0
 8000766:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	4619      	mov	r1, r3
 800076e:	4813      	ldr	r0, [pc, #76]	@ (80007bc <MX_GPIO_Init+0x14c>)
 8000770:	f000 ffc0 	bl	80016f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000774:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800077a:	2300      	movs	r3, #0
 800077c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	4619      	mov	r1, r3
 8000788:	480b      	ldr	r0, [pc, #44]	@ (80007b8 <MX_GPIO_Init+0x148>)
 800078a:	f000 ffb3 	bl	80016f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800078e:	2328      	movs	r3, #40	@ 0x28
 8000790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000792:	2300      	movs	r3, #0
 8000794:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	4619      	mov	r1, r3
 80007a0:	4806      	ldr	r0, [pc, #24]	@ (80007bc <MX_GPIO_Init+0x14c>)
 80007a2:	f000 ffa7 	bl	80016f4 <HAL_GPIO_Init>

}
 80007a6:	bf00      	nop
 80007a8:	3728      	adds	r7, #40	@ 0x28
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40020800 	.word	0x40020800
 80007b8:	40020000 	.word	0x40020000
 80007bc:	40020400 	.word	0x40020400

080007c0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007c4:	4b12      	ldr	r3, [pc, #72]	@ (8000810 <MX_I2C1_Init+0x50>)
 80007c6:	4a13      	ldr	r2, [pc, #76]	@ (8000814 <MX_I2C1_Init+0x54>)
 80007c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007ca:	4b11      	ldr	r3, [pc, #68]	@ (8000810 <MX_I2C1_Init+0x50>)
 80007cc:	4a12      	ldr	r2, [pc, #72]	@ (8000818 <MX_I2C1_Init+0x58>)
 80007ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <MX_I2C1_Init+0x50>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <MX_I2C1_Init+0x50>)
 80007d8:	2200      	movs	r2, #0
 80007da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <MX_I2C1_Init+0x50>)
 80007de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000810 <MX_I2C1_Init+0x50>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007ea:	4b09      	ldr	r3, [pc, #36]	@ (8000810 <MX_I2C1_Init+0x50>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f0:	4b07      	ldr	r3, [pc, #28]	@ (8000810 <MX_I2C1_Init+0x50>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f6:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <MX_I2C1_Init+0x50>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007fc:	4804      	ldr	r0, [pc, #16]	@ (8000810 <MX_I2C1_Init+0x50>)
 80007fe:	f001 f92f 	bl	8001a60 <HAL_I2C_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000808:	f000 f8e4 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	2000038c 	.word	0x2000038c
 8000814:	40005400 	.word	0x40005400
 8000818:	000186a0 	.word	0x000186a0

0800081c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08a      	sub	sp, #40	@ 0x28
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a19      	ldr	r2, [pc, #100]	@ (80008a0 <HAL_I2C_MspInit+0x84>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d12c      	bne.n	8000898 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	4b18      	ldr	r3, [pc, #96]	@ (80008a4 <HAL_I2C_MspInit+0x88>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	4a17      	ldr	r2, [pc, #92]	@ (80008a4 <HAL_I2C_MspInit+0x88>)
 8000848:	f043 0302 	orr.w	r3, r3, #2
 800084c:	6313      	str	r3, [r2, #48]	@ 0x30
 800084e:	4b15      	ldr	r3, [pc, #84]	@ (80008a4 <HAL_I2C_MspInit+0x88>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	f003 0302 	and.w	r3, r3, #2
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800085a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800085e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000860:	2312      	movs	r3, #18
 8000862:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000868:	2303      	movs	r3, #3
 800086a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800086c:	2304      	movs	r3, #4
 800086e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	4619      	mov	r1, r3
 8000876:	480c      	ldr	r0, [pc, #48]	@ (80008a8 <HAL_I2C_MspInit+0x8c>)
 8000878:	f000 ff3c 	bl	80016f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800087c:	2300      	movs	r3, #0
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	4b08      	ldr	r3, [pc, #32]	@ (80008a4 <HAL_I2C_MspInit+0x88>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000884:	4a07      	ldr	r2, [pc, #28]	@ (80008a4 <HAL_I2C_MspInit+0x88>)
 8000886:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800088a:	6413      	str	r3, [r2, #64]	@ 0x40
 800088c:	4b05      	ldr	r3, [pc, #20]	@ (80008a4 <HAL_I2C_MspInit+0x88>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000890:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000898:	bf00      	nop
 800089a:	3728      	adds	r7, #40	@ 0x28
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40005400 	.word	0x40005400
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40020400 	.word	0x40020400

080008ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b0:	f000 fdd8 	bl	8001464 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b4:	f000 f80c 	bl	80008d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b8:	f7ff feda 	bl	8000670 <MX_GPIO_Init>
  MX_I2C1_Init();
 80008bc:	f7ff ff80 	bl	80007c0 <MX_I2C1_Init>
  MX_TIM2_Init();
 80008c0:	f000 f96e 	bl	8000ba0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80008c4:	f7ff fe3c 	bl	8000540 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80008c8:	f002 fb36 	bl	8002f38 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <main+0x20>

080008d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b094      	sub	sp, #80	@ 0x50
 80008d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d6:	f107 0320 	add.w	r3, r7, #32
 80008da:	2230      	movs	r2, #48	@ 0x30
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f004 ff42 	bl	8005768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f4:	2300      	movs	r3, #0
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	4b27      	ldr	r3, [pc, #156]	@ (8000998 <SystemClock_Config+0xc8>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fc:	4a26      	ldr	r2, [pc, #152]	@ (8000998 <SystemClock_Config+0xc8>)
 80008fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000902:	6413      	str	r3, [r2, #64]	@ 0x40
 8000904:	4b24      	ldr	r3, [pc, #144]	@ (8000998 <SystemClock_Config+0xc8>)
 8000906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000908:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000910:	2300      	movs	r3, #0
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	4b21      	ldr	r3, [pc, #132]	@ (800099c <SystemClock_Config+0xcc>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a20      	ldr	r2, [pc, #128]	@ (800099c <SystemClock_Config+0xcc>)
 800091a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800091e:	6013      	str	r3, [r2, #0]
 8000920:	4b1e      	ldr	r3, [pc, #120]	@ (800099c <SystemClock_Config+0xcc>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800092c:	2301      	movs	r3, #1
 800092e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000930:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000934:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000936:	2302      	movs	r3, #2
 8000938:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800093a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800093e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000940:	2304      	movs	r3, #4
 8000942:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000944:	2364      	movs	r3, #100	@ 0x64
 8000946:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000948:	2302      	movs	r3, #2
 800094a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800094c:	2304      	movs	r3, #4
 800094e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000950:	f107 0320 	add.w	r3, r7, #32
 8000954:	4618      	mov	r0, r3
 8000956:	f001 f9c7 	bl	8001ce8 <HAL_RCC_OscConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000960:	f000 f838 	bl	80009d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000964:	230f      	movs	r3, #15
 8000966:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000968:	2302      	movs	r3, #2
 800096a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000970:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000974:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800097a:	f107 030c 	add.w	r3, r7, #12
 800097e:	2103      	movs	r1, #3
 8000980:	4618      	mov	r0, r3
 8000982:	f001 fc29 	bl	80021d8 <HAL_RCC_ClockConfig>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800098c:	f000 f822 	bl	80009d4 <Error_Handler>
  }
}
 8000990:	bf00      	nop
 8000992:	3750      	adds	r7, #80	@ 0x50
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40023800 	.word	0x40023800
 800099c:	40007000 	.word	0x40007000

080009a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a08      	ldr	r2, [pc, #32]	@ (80009d0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d101      	bne.n	80009b6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80009b2:	f000 fd79 	bl	80014a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim -> Instance == TIM2) {
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009be:	d103      	bne.n	80009c8 <HAL_TIM_PeriodElapsedCallback+0x28>
	FND_DispDataCallBack();
 80009c0:	f000 fb8c 	bl	80010dc <FND_DispDataCallBack>
	StopWatch_IncTimeCallBack();
 80009c4:	f000 fa6e 	bl	8000ea4 <StopWatch_IncTimeCallBack>
  }
  /* USER CODE END Callback 1 */
}
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40014800 	.word	0x40014800

080009d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d8:	b672      	cpsid	i
}
 80009da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <Error_Handler+0x8>

080009e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	4b12      	ldr	r3, [pc, #72]	@ (8000a34 <HAL_MspInit+0x54>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ee:	4a11      	ldr	r2, [pc, #68]	@ (8000a34 <HAL_MspInit+0x54>)
 80009f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a34 <HAL_MspInit+0x54>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	603b      	str	r3, [r7, #0]
 8000a06:	4b0b      	ldr	r3, [pc, #44]	@ (8000a34 <HAL_MspInit+0x54>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a34 <HAL_MspInit+0x54>)
 8000a0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a12:	4b08      	ldr	r3, [pc, #32]	@ (8000a34 <HAL_MspInit+0x54>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	210f      	movs	r1, #15
 8000a22:	f06f 0001 	mvn.w	r0, #1
 8000a26:	f000 fe3b 	bl	80016a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800

08000a38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08c      	sub	sp, #48	@ 0x30
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a44:	2300      	movs	r3, #0
 8000a46:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	4b2e      	ldr	r3, [pc, #184]	@ (8000b08 <HAL_InitTick+0xd0>)
 8000a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a50:	4a2d      	ldr	r2, [pc, #180]	@ (8000b08 <HAL_InitTick+0xd0>)
 8000a52:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a56:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a58:	4b2b      	ldr	r3, [pc, #172]	@ (8000b08 <HAL_InitTick+0xd0>)
 8000a5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a64:	f107 020c 	add.w	r2, r7, #12
 8000a68:	f107 0310 	add.w	r3, r7, #16
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f001 fdd2 	bl	8002618 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a74:	f001 fdbc 	bl	80025f0 <HAL_RCC_GetPCLK2Freq>
 8000a78:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a7c:	4a23      	ldr	r2, [pc, #140]	@ (8000b0c <HAL_InitTick+0xd4>)
 8000a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a82:	0c9b      	lsrs	r3, r3, #18
 8000a84:	3b01      	subs	r3, #1
 8000a86:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000a88:	4b21      	ldr	r3, [pc, #132]	@ (8000b10 <HAL_InitTick+0xd8>)
 8000a8a:	4a22      	ldr	r2, [pc, #136]	@ (8000b14 <HAL_InitTick+0xdc>)
 8000a8c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000a8e:	4b20      	ldr	r3, [pc, #128]	@ (8000b10 <HAL_InitTick+0xd8>)
 8000a90:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a94:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000a96:	4a1e      	ldr	r2, [pc, #120]	@ (8000b10 <HAL_InitTick+0xd8>)
 8000a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a9a:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000a9c:	4b1c      	ldr	r3, [pc, #112]	@ (8000b10 <HAL_InitTick+0xd8>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b10 <HAL_InitTick+0xd8>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa8:	4b19      	ldr	r3, [pc, #100]	@ (8000b10 <HAL_InitTick+0xd8>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8000aae:	4818      	ldr	r0, [pc, #96]	@ (8000b10 <HAL_InitTick+0xd8>)
 8000ab0:	f001 fde4 	bl	800267c <HAL_TIM_Base_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000aba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d11b      	bne.n	8000afa <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8000ac2:	4813      	ldr	r0, [pc, #76]	@ (8000b10 <HAL_InitTick+0xd8>)
 8000ac4:	f001 fe2a 	bl	800271c <HAL_TIM_Base_Start_IT>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000ace:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d111      	bne.n	8000afa <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000ad6:	201a      	movs	r0, #26
 8000ad8:	f000 fdfe 	bl	80016d8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2b0f      	cmp	r3, #15
 8000ae0:	d808      	bhi.n	8000af4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	6879      	ldr	r1, [r7, #4]
 8000ae6:	201a      	movs	r0, #26
 8000ae8:	f000 fdda 	bl	80016a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aec:	4a0a      	ldr	r2, [pc, #40]	@ (8000b18 <HAL_InitTick+0xe0>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6013      	str	r3, [r2, #0]
 8000af2:	e002      	b.n	8000afa <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000af4:	2301      	movs	r3, #1
 8000af6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000afa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3730      	adds	r7, #48	@ 0x30
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	431bde83 	.word	0x431bde83
 8000b10:	200003e0 	.word	0x200003e0
 8000b14:	40014800 	.word	0x40014800
 8000b18:	20000064 	.word	0x20000064

08000b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <NMI_Handler+0x4>

08000b24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <HardFault_Handler+0x4>

08000b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <MemManage_Handler+0x4>

08000b34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <BusFault_Handler+0x4>

08000b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <UsageFault_Handler+0x4>

08000b44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
	...

08000b54 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000b58:	4802      	ldr	r0, [pc, #8]	@ (8000b64 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000b5a:	f001 fe41 	bl	80027e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200003e0 	.word	0x200003e0

08000b68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b6c:	4802      	ldr	r0, [pc, #8]	@ (8000b78 <TIM2_IRQHandler+0x10>)
 8000b6e:	f001 fe37 	bl	80027e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000428 	.word	0x20000428

08000b7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b80:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <SystemInit+0x20>)
 8000b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b86:	4a05      	ldr	r2, [pc, #20]	@ (8000b9c <SystemInit+0x20>)
 8000b88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ba6:	f107 0308 	add.w	r3, r7, #8
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8000c34 <MX_TIM2_Init+0x94>)
 8000bbe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bc2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8000bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c34 <MX_TIM2_Init+0x94>)
 8000bc6:	2263      	movs	r2, #99	@ 0x63
 8000bc8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bca:	4b1a      	ldr	r3, [pc, #104]	@ (8000c34 <MX_TIM2_Init+0x94>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000bd0:	4b18      	ldr	r3, [pc, #96]	@ (8000c34 <MX_TIM2_Init+0x94>)
 8000bd2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bd6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd8:	4b16      	ldr	r3, [pc, #88]	@ (8000c34 <MX_TIM2_Init+0x94>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bde:	4b15      	ldr	r3, [pc, #84]	@ (8000c34 <MX_TIM2_Init+0x94>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000be4:	4813      	ldr	r0, [pc, #76]	@ (8000c34 <MX_TIM2_Init+0x94>)
 8000be6:	f001 fd49 	bl	800267c <HAL_TIM_Base_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000bf0:	f7ff fef0 	bl	80009d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bf8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bfa:	f107 0308 	add.w	r3, r7, #8
 8000bfe:	4619      	mov	r1, r3
 8000c00:	480c      	ldr	r0, [pc, #48]	@ (8000c34 <MX_TIM2_Init+0x94>)
 8000c02:	f001 fedd 	bl	80029c0 <HAL_TIM_ConfigClockSource>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c0c:	f7ff fee2 	bl	80009d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c10:	2300      	movs	r3, #0
 8000c12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c14:	2300      	movs	r3, #0
 8000c16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c18:	463b      	mov	r3, r7
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4805      	ldr	r0, [pc, #20]	@ (8000c34 <MX_TIM2_Init+0x94>)
 8000c1e:	f002 f8df 	bl	8002de0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c28:	f7ff fed4 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c2c:	bf00      	nop
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000428 	.word	0x20000428

08000c38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c48:	d115      	bne.n	8000c76 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c80 <HAL_TIM_Base_MspInit+0x48>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c52:	4a0b      	ldr	r2, [pc, #44]	@ (8000c80 <HAL_TIM_Base_MspInit+0x48>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c5a:	4b09      	ldr	r3, [pc, #36]	@ (8000c80 <HAL_TIM_Base_MspInit+0x48>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2105      	movs	r1, #5
 8000c6a:	201c      	movs	r0, #28
 8000c6c:	f000 fd18 	bl	80016a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c70:	201c      	movs	r0, #28
 8000c72:	f000 fd31 	bl	80016d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000c76:	bf00      	nop
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40023800 	.word	0x40023800

08000c84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cbc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c88:	f7ff ff78 	bl	8000b7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c8c:	480c      	ldr	r0, [pc, #48]	@ (8000cc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c8e:	490d      	ldr	r1, [pc, #52]	@ (8000cc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c90:	4a0d      	ldr	r2, [pc, #52]	@ (8000cc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c94:	e002      	b.n	8000c9c <LoopCopyDataInit>

08000c96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9a:	3304      	adds	r3, #4

08000c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca0:	d3f9      	bcc.n	8000c96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ccc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ca4:	4c0a      	ldr	r4, [pc, #40]	@ (8000cd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca8:	e001      	b.n	8000cae <LoopFillZerobss>

08000caa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000caa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cac:	3204      	adds	r2, #4

08000cae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb0:	d3fb      	bcc.n	8000caa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cb2:	f004 fdbf 	bl	8005834 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cb6:	f7ff fdf9 	bl	80008ac <main>
  bx  lr    
 8000cba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cbc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc4:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8000cc8:	08005a64 	.word	0x08005a64
  ldr r2, =_sbss
 8000ccc:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8000cd0:	20004340 	.word	0x20004340

08000cd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd4:	e7fe      	b.n	8000cd4 <ADC_IRQHandler>

08000cd6 <Controller_Init>:


#include "Controller.h"

void Controller_Init()
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	af00      	add	r7, sp, #0
	StopWatch_Init();
 8000cda:	f000 f809 	bl	8000cf0 <StopWatch_Init>
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <Controller_Excute>:

void Controller_Excute()
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	af00      	add	r7, sp, #0
	StopWatch_Excute();
 8000ce6:	f000 f82d 	bl	8000d44 <StopWatch_Excute>
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
	...

08000cf0 <StopWatch_Init>:


stopWatch_t stopWatchData;

void StopWatch_Init()
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
	stopWatchData.hour = 0;
 8000cf6:	4b11      	ldr	r3, [pc, #68]	@ (8000d3c <StopWatch_Init+0x4c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
	stopWatchData.min = 0;
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d3c <StopWatch_Init+0x4c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	705a      	strb	r2, [r3, #1]
	stopWatchData.sec = 0;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	@ (8000d3c <StopWatch_Init+0x4c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	709a      	strb	r2, [r3, #2]
	stopWatchData.msec = 0;
 8000d08:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <StopWatch_Init+0x4c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	809a      	strh	r2, [r3, #4]

	stopWatch_t *pStopWatchData = osMailAlloc(stopWatchDataMailBox, 0);
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d40 <StopWatch_Init+0x50>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2100      	movs	r1, #0
 8000d14:	4618      	mov	r0, r3
 8000d16:	f002 fb69 	bl	80033ec <osMailAlloc>
 8000d1a:	6078      	str	r0, [r7, #4]
	memcpy(pStopWatchData, &stopWatchData, sizeof(stopWatch_t));
 8000d1c:	2206      	movs	r2, #6
 8000d1e:	4907      	ldr	r1, [pc, #28]	@ (8000d3c <StopWatch_Init+0x4c>)
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f004 fdad 	bl	8005880 <memcpy>
	osMailPut(stopWatchDataMailBox, pStopWatchData);
 8000d26:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <StopWatch_Init+0x50>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f002 fb73 	bl	8003418 <osMailPut>
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000470 	.word	0x20000470
 8000d40:	20000498 	.word	0x20000498

08000d44 <StopWatch_Excute>:

void StopWatch_Excute()
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
	eStopWatchState_t state = Model_GetStopWatchState();
 8000d4a:	f000 f967 	bl	800101c <Model_GetStopWatchState>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]

	switch(state)
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d00c      	beq.n	8000d72 <StopWatch_Excute+0x2e>
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	dc0d      	bgt.n	8000d78 <StopWatch_Excute+0x34>
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d002      	beq.n	8000d66 <StopWatch_Excute+0x22>
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d003      	beq.n	8000d6c <StopWatch_Excute+0x28>
		break;
	case S_STOPWATCH_CLEAR:
		StopWatch_Clear();
		break;
	default:
		break;
 8000d64:	e008      	b.n	8000d78 <StopWatch_Excute+0x34>
		StopWatch_Stop();
 8000d66:	f000 f80d 	bl	8000d84 <StopWatch_Stop>
		break;
 8000d6a:	e006      	b.n	8000d7a <StopWatch_Excute+0x36>
		StopWatch_Run();
 8000d6c:	f000 f82c 	bl	8000dc8 <StopWatch_Run>
		break;
 8000d70:	e003      	b.n	8000d7a <StopWatch_Excute+0x36>
		StopWatch_Clear();
 8000d72:	f000 f86b 	bl	8000e4c <StopWatch_Clear>
		break;
 8000d76:	e000      	b.n	8000d7a <StopWatch_Excute+0x36>
		break;
 8000d78:	bf00      	nop
	}
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
	...

08000d84 <StopWatch_Stop>:

void StopWatch_Stop()
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
	osEvent evt = osMessageGet(stopWatchEventMsgBox, 0);
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc4 <StopWatch_Stop+0x40>)
 8000d8c:	6819      	ldr	r1, [r3, #0]
 8000d8e:	463b      	mov	r3, r7
 8000d90:	2200      	movs	r2, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f002 fa5e 	bl	8003254 <osMessageGet>
	uint16_t evtState;

	if (evt.status == osEventMessage) {
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	2b10      	cmp	r3, #16
 8000d9c:	d10e      	bne.n	8000dbc <StopWatch_Stop+0x38>
		evtState = evt.value.v; // 값 , p는 포인터
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	81fb      	strh	r3, [r7, #14]

		if (evtState == EVENT_RUN_STOP) {
 8000da2:	89fb      	ldrh	r3, [r7, #14]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d103      	bne.n	8000db0 <StopWatch_Stop+0x2c>
			Model_SetStopWatchState(S_STOPWATCH_RUN);
 8000da8:	2001      	movs	r0, #1
 8000daa:	f000 f927 	bl	8000ffc <Model_SetStopWatchState>
		}
		else if (evtState == EVENT_CLEAR) {
			Model_SetStopWatchState(S_STOPWATCH_CLEAR);
		}
	}
}
 8000dae:	e005      	b.n	8000dbc <StopWatch_Stop+0x38>
		else if (evtState == EVENT_CLEAR) {
 8000db0:	89fb      	ldrh	r3, [r7, #14]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d102      	bne.n	8000dbc <StopWatch_Stop+0x38>
			Model_SetStopWatchState(S_STOPWATCH_CLEAR);
 8000db6:	2002      	movs	r0, #2
 8000db8:	f000 f920 	bl	8000ffc <Model_SetStopWatchState>
}
 8000dbc:	bf00      	nop
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000494 	.word	0x20000494

08000dc8 <StopWatch_Run>:

void StopWatch_Run()
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b088      	sub	sp, #32
 8000dcc:	af00      	add	r7, sp, #0
	osEvent evt = osMessageGet(stopWatchEventMsgBox, 0);
 8000dce:	4b1c      	ldr	r3, [pc, #112]	@ (8000e40 <StopWatch_Run+0x78>)
 8000dd0:	6819      	ldr	r1, [r3, #0]
 8000dd2:	f107 030c 	add.w	r3, r7, #12
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f002 fa3b 	bl	8003254 <osMessageGet>
	uint16_t evtState;

	if (evt.status == osEventMessage) {
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	2b10      	cmp	r3, #16
 8000de2:	d107      	bne.n	8000df4 <StopWatch_Run+0x2c>
		evtState = evt.value.v;
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	83fb      	strh	r3, [r7, #30]

		if (evtState == EVENT_RUN_STOP) {
 8000de8:	8bfb      	ldrh	r3, [r7, #30]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d102      	bne.n	8000df4 <StopWatch_Run+0x2c>
			Model_SetStopWatchState(S_STOPWATCH_STOP);
 8000dee:	2000      	movs	r0, #0
 8000df0:	f000 f904 	bl	8000ffc <Model_SetStopWatchState>
		}
	}
	stopWatch_t prevStopWatchData;

	if (memcmp(&stopWatchData, &prevStopWatchData, sizeof(stopWatch_t))) {  // stopWatchData와 prevStopWatchData가 다르면 수행
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	2206      	movs	r2, #6
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4812      	ldr	r0, [pc, #72]	@ (8000e44 <StopWatch_Run+0x7c>)
 8000dfc:	f004 fca4 	bl	8005748 <memcmp>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d018      	beq.n	8000e38 <StopWatch_Run+0x70>
		memcpy(&prevStopWatchData, &stopWatchData, sizeof(stopWatch_t));
 8000e06:	4a0f      	ldr	r2, [pc, #60]	@ (8000e44 <StopWatch_Run+0x7c>)
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e0e:	6018      	str	r0, [r3, #0]
 8000e10:	3304      	adds	r3, #4
 8000e12:	8019      	strh	r1, [r3, #0]
		stopWatch_t *pStopWatchData = osMailAlloc(stopWatchDataMailBox, 0);
 8000e14:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <StopWatch_Run+0x80>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f002 fae6 	bl	80033ec <osMailAlloc>
 8000e20:	61b8      	str	r0, [r7, #24]
		memcpy(pStopWatchData, &stopWatchData, sizeof(stopWatch_t));
 8000e22:	2206      	movs	r2, #6
 8000e24:	4907      	ldr	r1, [pc, #28]	@ (8000e44 <StopWatch_Run+0x7c>)
 8000e26:	69b8      	ldr	r0, [r7, #24]
 8000e28:	f004 fd2a 	bl	8005880 <memcpy>
		osMailPut(stopWatchDataMailBox, pStopWatchData);
 8000e2c:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <StopWatch_Run+0x80>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	69b9      	ldr	r1, [r7, #24]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f002 faf0 	bl	8003418 <osMailPut>
	}
}
 8000e38:	bf00      	nop
 8000e3a:	3720      	adds	r7, #32
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000494 	.word	0x20000494
 8000e44:	20000470 	.word	0x20000470
 8000e48:	20000498 	.word	0x20000498

08000e4c <StopWatch_Clear>:

void StopWatch_Clear()
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
	Model_SetStopWatchState(S_STOPWATCH_STOP);
 8000e52:	2000      	movs	r0, #0
 8000e54:	f000 f8d2 	bl	8000ffc <Model_SetStopWatchState>

	stopWatchData.hour = 0;
 8000e58:	4b10      	ldr	r3, [pc, #64]	@ (8000e9c <StopWatch_Clear+0x50>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	701a      	strb	r2, [r3, #0]
	stopWatchData.min = 0;
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e9c <StopWatch_Clear+0x50>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	705a      	strb	r2, [r3, #1]
	stopWatchData.sec = 0;
 8000e64:	4b0d      	ldr	r3, [pc, #52]	@ (8000e9c <StopWatch_Clear+0x50>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	709a      	strb	r2, [r3, #2]
	stopWatchData.msec = 0;
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e9c <StopWatch_Clear+0x50>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	809a      	strh	r2, [r3, #4]

	stopWatch_t *pStopWatchData = osMailAlloc(stopWatchDataMailBox, 0);
 8000e70:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea0 <StopWatch_Clear+0x54>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f002 fab8 	bl	80033ec <osMailAlloc>
 8000e7c:	6078      	str	r0, [r7, #4]
	memcpy(pStopWatchData, &stopWatchData, sizeof(stopWatch_t));
 8000e7e:	2206      	movs	r2, #6
 8000e80:	4906      	ldr	r1, [pc, #24]	@ (8000e9c <StopWatch_Clear+0x50>)
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f004 fcfc 	bl	8005880 <memcpy>
	osMailPut(stopWatchDataMailBox, pStopWatchData);
 8000e88:	4b05      	ldr	r3, [pc, #20]	@ (8000ea0 <StopWatch_Clear+0x54>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	6879      	ldr	r1, [r7, #4]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f002 fac2 	bl	8003418 <osMailPut>
}
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000470 	.word	0x20000470
 8000ea0:	20000498 	.word	0x20000498

08000ea4 <StopWatch_IncTimeCallBack>:

void StopWatch_IncTimeCallBack()
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
	if (Model_GetStopWatchState() != S_STOPWATCH_RUN) {
 8000ea8:	f000 f8b8 	bl	800101c <Model_GetStopWatchState>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d13a      	bne.n	8000f28 <StopWatch_IncTimeCallBack+0x84>
		return;
	}

	if (stopWatchData.msec != 1000-1) {
 8000eb2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f2c <StopWatch_IncTimeCallBack+0x88>)
 8000eb4:	889b      	ldrh	r3, [r3, #4]
 8000eb6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d006      	beq.n	8000ecc <StopWatch_IncTimeCallBack+0x28>
		stopWatchData.msec++;
 8000ebe:	4b1b      	ldr	r3, [pc, #108]	@ (8000f2c <StopWatch_IncTimeCallBack+0x88>)
 8000ec0:	889b      	ldrh	r3, [r3, #4]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	4b19      	ldr	r3, [pc, #100]	@ (8000f2c <StopWatch_IncTimeCallBack+0x88>)
 8000ec8:	809a      	strh	r2, [r3, #4]
		return;
 8000eca:	e02e      	b.n	8000f2a <StopWatch_IncTimeCallBack+0x86>
	}
	stopWatchData.msec = 0;
 8000ecc:	4b17      	ldr	r3, [pc, #92]	@ (8000f2c <StopWatch_IncTimeCallBack+0x88>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	809a      	strh	r2, [r3, #4]
	if (stopWatchData.sec != 60-1) {
 8000ed2:	4b16      	ldr	r3, [pc, #88]	@ (8000f2c <StopWatch_IncTimeCallBack+0x88>)
 8000ed4:	789b      	ldrb	r3, [r3, #2]
 8000ed6:	2b3b      	cmp	r3, #59	@ 0x3b
 8000ed8:	d006      	beq.n	8000ee8 <StopWatch_IncTimeCallBack+0x44>
		stopWatchData.sec++;
 8000eda:	4b14      	ldr	r3, [pc, #80]	@ (8000f2c <StopWatch_IncTimeCallBack+0x88>)
 8000edc:	789b      	ldrb	r3, [r3, #2]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4b12      	ldr	r3, [pc, #72]	@ (8000f2c <StopWatch_IncTimeCallBack+0x88>)
 8000ee4:	709a      	strb	r2, [r3, #2]
		return;
 8000ee6:	e020      	b.n	8000f2a <StopWatch_IncTimeCallBack+0x86>
	}
	stopWatchData.sec = 0;
 8000ee8:	4b10      	ldr	r3, [pc, #64]	@ (8000f2c <StopWatch_IncTimeCallBack+0x88>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	709a      	strb	r2, [r3, #2]
	if (stopWatchData.min != 60-1) {
 8000eee:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <StopWatch_IncTimeCallBack+0x88>)
 8000ef0:	785b      	ldrb	r3, [r3, #1]
 8000ef2:	2b3b      	cmp	r3, #59	@ 0x3b
 8000ef4:	d006      	beq.n	8000f04 <StopWatch_IncTimeCallBack+0x60>
		stopWatchData.min++;
 8000ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f2c <StopWatch_IncTimeCallBack+0x88>)
 8000ef8:	785b      	ldrb	r3, [r3, #1]
 8000efa:	3301      	adds	r3, #1
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4b0b      	ldr	r3, [pc, #44]	@ (8000f2c <StopWatch_IncTimeCallBack+0x88>)
 8000f00:	705a      	strb	r2, [r3, #1]
		return;
 8000f02:	e012      	b.n	8000f2a <StopWatch_IncTimeCallBack+0x86>
	}
	stopWatchData.min = 0;
 8000f04:	4b09      	ldr	r3, [pc, #36]	@ (8000f2c <StopWatch_IncTimeCallBack+0x88>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	705a      	strb	r2, [r3, #1]
	if (stopWatchData.hour != 24-1) {
 8000f0a:	4b08      	ldr	r3, [pc, #32]	@ (8000f2c <StopWatch_IncTimeCallBack+0x88>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b17      	cmp	r3, #23
 8000f10:	d006      	beq.n	8000f20 <StopWatch_IncTimeCallBack+0x7c>
		stopWatchData.hour++;
 8000f12:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <StopWatch_IncTimeCallBack+0x88>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	3301      	adds	r3, #1
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4b04      	ldr	r3, [pc, #16]	@ (8000f2c <StopWatch_IncTimeCallBack+0x88>)
 8000f1c:	701a      	strb	r2, [r3, #0]
		return;
 8000f1e:	e004      	b.n	8000f2a <StopWatch_IncTimeCallBack+0x86>
	}
	stopWatchData.hour = 0;
 8000f20:	4b02      	ldr	r3, [pc, #8]	@ (8000f2c <StopWatch_IncTimeCallBack+0x88>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	701a      	strb	r2, [r3, #0]
 8000f26:	e000      	b.n	8000f2a <StopWatch_IncTimeCallBack+0x86>
		return;
 8000f28:	bf00      	nop
}
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000470 	.word	0x20000470

08000f30 <Listener_Init>:
 */

#include "Listener.h"

void Listener_Init()
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
	Listener_StopWatchInit();
 8000f34:	f000 f808 	bl	8000f48 <Listener_StopWatchInit>
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <Listener_Excute>:

void Listener_Excute()
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	Listener_StopWatchExcute();
 8000f40:	f000 f816 	bl	8000f70 <Listener_StopWatchExcute>
}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <Listener_StopWatchInit>:
Button_Handler_t hbtnClear;

void Listener_StopWatch_CheckButton();

void Listener_StopWatchInit()
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
	// button init
	Button_Init(&hbtnRunStop, GPIOB, GPIO_PIN_3);
 8000f4c:	2208      	movs	r2, #8
 8000f4e:	4905      	ldr	r1, [pc, #20]	@ (8000f64 <Listener_StopWatchInit+0x1c>)
 8000f50:	4805      	ldr	r0, [pc, #20]	@ (8000f68 <Listener_StopWatchInit+0x20>)
 8000f52:	f000 f87c 	bl	800104e <Button_Init>
	Button_Init(&hbtnClear, GPIOB, GPIO_PIN_5);
 8000f56:	2220      	movs	r2, #32
 8000f58:	4902      	ldr	r1, [pc, #8]	@ (8000f64 <Listener_StopWatchInit+0x1c>)
 8000f5a:	4804      	ldr	r0, [pc, #16]	@ (8000f6c <Listener_StopWatchInit+0x24>)
 8000f5c:	f000 f877 	bl	800104e <Button_Init>
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40020400 	.word	0x40020400
 8000f68:	20000478 	.word	0x20000478
 8000f6c:	20000484 	.word	0x20000484

08000f70 <Listener_StopWatchExcute>:

void Listener_StopWatchExcute()
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
	// check button event
	Listener_StopWatch_CheckButton();
 8000f74:	f000 f802 	bl	8000f7c <Listener_StopWatch_CheckButton>
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <Listener_StopWatch_CheckButton>:

void Listener_StopWatch_CheckButton()
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
	if (Button_GetState(&hbtnRunStop) == ACT_PUSHED) {
 8000f80:	480e      	ldr	r0, [pc, #56]	@ (8000fbc <Listener_StopWatch_CheckButton+0x40>)
 8000f82:	f000 f87a 	bl	800107a <Button_GetState>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d107      	bne.n	8000f9c <Listener_StopWatch_CheckButton+0x20>
		osMessagePut(stopWatchEventMsgBox, EVENT_RUN_STOP, 0);
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc0 <Listener_StopWatch_CheckButton+0x44>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2200      	movs	r2, #0
 8000f92:	2100      	movs	r1, #0
 8000f94:	4618      	mov	r0, r3
 8000f96:	f002 f91d 	bl	80031d4 <osMessagePut>
	}
	else if (Button_GetState(&hbtnClear) == ACT_PUSHED) {
		osMessagePut(stopWatchEventMsgBox, EVENT_CLEAR, 0);
	}
}
 8000f9a:	e00c      	b.n	8000fb6 <Listener_StopWatch_CheckButton+0x3a>
	else if (Button_GetState(&hbtnClear) == ACT_PUSHED) {
 8000f9c:	4809      	ldr	r0, [pc, #36]	@ (8000fc4 <Listener_StopWatch_CheckButton+0x48>)
 8000f9e:	f000 f86c 	bl	800107a <Button_GetState>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d106      	bne.n	8000fb6 <Listener_StopWatch_CheckButton+0x3a>
		osMessagePut(stopWatchEventMsgBox, EVENT_CLEAR, 0);
 8000fa8:	4b05      	ldr	r3, [pc, #20]	@ (8000fc0 <Listener_StopWatch_CheckButton+0x44>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2200      	movs	r2, #0
 8000fae:	2101      	movs	r1, #1
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f002 f90f 	bl	80031d4 <osMessagePut>
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000478 	.word	0x20000478
 8000fc0:	20000494 	.word	0x20000494
 8000fc4:	20000484 	.word	0x20000484

08000fc8 <Model_StopWatchInit>:

osMailQId stopWatchDataMailBox;
osMailQDef(stopWatchDataQueue, 4, stopWatch_t);

void Model_StopWatchInit()
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	stopWatchEventMsgBox = osMessageCreate(osMessageQ(stopWatchEventQueue), NULL);
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4807      	ldr	r0, [pc, #28]	@ (8000fec <Model_StopWatchInit+0x24>)
 8000fd0:	f002 f8d8 	bl	8003184 <osMessageCreate>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	4a06      	ldr	r2, [pc, #24]	@ (8000ff0 <Model_StopWatchInit+0x28>)
 8000fd8:	6013      	str	r3, [r2, #0]
	stopWatchDataMailBox = osMailCreate(osMailQ(stopWatchDataQueue), NULL);
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4805      	ldr	r0, [pc, #20]	@ (8000ff4 <Model_StopWatchInit+0x2c>)
 8000fde:	f002 f9ad 	bl	800333c <osMailCreate>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	4a04      	ldr	r2, [pc, #16]	@ (8000ff8 <Model_StopWatchInit+0x30>)
 8000fe6:	6013      	str	r3, [r2, #0]
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	08005a38 	.word	0x08005a38
 8000ff0:	20000494 	.word	0x20000494
 8000ff4:	08005a48 	.word	0x08005a48
 8000ff8:	20000498 	.word	0x20000498

08000ffc <Model_SetStopWatchState>:

void Model_SetStopWatchState(eStopWatchState_t state)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
	StopWatchState = state;
 8001006:	4a04      	ldr	r2, [pc, #16]	@ (8001018 <Model_SetStopWatchState+0x1c>)
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	7013      	strb	r3, [r2, #0]
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	20000490 	.word	0x20000490

0800101c <Model_GetStopWatchState>:

eStopWatchState_t Model_GetStopWatchState()
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
	return StopWatchState;
 8001020:	4b03      	ldr	r3, [pc, #12]	@ (8001030 <Model_GetStopWatchState+0x14>)
 8001022:	781b      	ldrb	r3, [r3, #0]
}
 8001024:	4618      	mov	r0, r3
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	20000490 	.word	0x20000490

08001034 <Presenter_Init>:


#include "Presenter.h"

void Presenter_Init()
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	Presenter_StopWatchInit();
 8001038:	f000 f802 	bl	8001040 <Presenter_StopWatchInit>
}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}

08001040 <Presenter_StopWatchInit>:
 */

#include "Presenter_StopWatch.h"

void Presenter_StopWatchInit()
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0

}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <Button_Init>:

enum {PUSHED = 0, RELEASED};


void Button_Init(Button_Handler_t *hbtn, GPIO_TypeDef * GPIOx, uint16_t pinNum)
{
 800104e:	b480      	push	{r7}
 8001050:	b085      	sub	sp, #20
 8001052:	af00      	add	r7, sp, #0
 8001054:	60f8      	str	r0, [r7, #12]
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	4613      	mov	r3, r2
 800105a:	80fb      	strh	r3, [r7, #6]
   hbtn->GPIOx = GPIOx;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	601a      	str	r2, [r3, #0]
   hbtn->pinNum = pinNum;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	88fa      	ldrh	r2, [r7, #6]
 8001066:	809a      	strh	r2, [r3, #4]
   hbtn->prevState = RELEASED;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2201      	movs	r2, #1
 800106c:	609a      	str	r2, [r3, #8]
}
 800106e:	bf00      	nop
 8001070:	3714      	adds	r7, #20
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <Button_GetState>:

button_state_t Button_GetState(Button_Handler_t *hbtn)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b084      	sub	sp, #16
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]

   uint32_t curState;
   curState = HAL_GPIO_ReadPin(hbtn->GPIOx, hbtn->pinNum);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	889b      	ldrh	r3, [r3, #4]
 800108a:	4619      	mov	r1, r3
 800108c:	4610      	mov	r0, r2
 800108e:	f000 fcb5 	bl	80019fc <HAL_GPIO_ReadPin>
 8001092:	4603      	mov	r3, r0
 8001094:	60fb      	str	r3, [r7, #12]

   if ((hbtn->prevState == RELEASED) && (curState == PUSHED)) { // button released -> pushed
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d10a      	bne.n	80010b4 <Button_GetState+0x3a>
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d107      	bne.n	80010b4 <Button_GetState+0x3a>
      HAL_Delay(2); // debounce
 80010a4:	2002      	movs	r0, #2
 80010a6:	f000 fa1f 	bl	80014e8 <HAL_Delay>
      hbtn->prevState = PUSHED;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
      return ACT_PUSHED;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e00f      	b.n	80010d4 <Button_GetState+0x5a>
   }
   else if ((hbtn->prevState == PUSHED) && (curState == RELEASED)) { // button pushed -> released
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d10a      	bne.n	80010d2 <Button_GetState+0x58>
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d107      	bne.n	80010d2 <Button_GetState+0x58>
      HAL_Delay(2); // debounce
 80010c2:	2002      	movs	r0, #2
 80010c4:	f000 fa10 	bl	80014e8 <HAL_Delay>
      hbtn->prevState = RELEASED;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2201      	movs	r2, #1
 80010cc:	609a      	str	r2, [r3, #8]
      return ACT_RELEASED;
 80010ce:	2302      	movs	r3, #2
 80010d0:	e000      	b.n	80010d4 <Button_GetState+0x5a>
   }
   return NO_ACT;
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <FND_DispDataCallBack>:
{
   return fndDispNum;
}
// display fndDispNum
void FND_DispDataCallBack()
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
   static int digitPos = 0;
   // 인터럽트가 발생하면 한 자리씩 출력한다.
   FND_DispOffAll();
 80010e0:	f000 f956 	bl	8001390 <FND_DispOffAll>
   digitPos = (digitPos+1) % 8; // 4에서 8로 변경 0부터 7찍을 수 있게.
 80010e4:	4b8c      	ldr	r3, [pc, #560]	@ (8001318 <FND_DispDataCallBack+0x23c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	3301      	adds	r3, #1
 80010ea:	425a      	negs	r2, r3
 80010ec:	f003 0307 	and.w	r3, r3, #7
 80010f0:	f002 0207 	and.w	r2, r2, #7
 80010f4:	bf58      	it	pl
 80010f6:	4253      	negpl	r3, r2
 80010f8:	4a87      	ldr	r2, [pc, #540]	@ (8001318 <FND_DispDataCallBack+0x23c>)
 80010fa:	6013      	str	r3, [r2, #0]
   switch(digitPos)      // 1ms마다 각 자리를 찍는다?
 80010fc:	4b86      	ldr	r3, [pc, #536]	@ (8001318 <FND_DispDataCallBack+0x23c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b07      	cmp	r3, #7
 8001102:	f200 8106 	bhi.w	8001312 <FND_DispDataCallBack+0x236>
 8001106:	a201      	add	r2, pc, #4	@ (adr r2, 800110c <FND_DispDataCallBack+0x30>)
 8001108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800110c:	0800112d 	.word	0x0800112d
 8001110:	08001161 	.word	0x08001161
 8001114:	0800119f 	.word	0x0800119f
 8001118:	080011dd 	.word	0x080011dd
 800111c:	0800121b 	.word	0x0800121b
 8001120:	08001259 	.word	0x08001259
 8001124:	08001297 	.word	0x08001297
 8001128:	080012d5 	.word	0x080012d5
   {
   case DIGIT_1:
      FND_DispOff(digitPos);
 800112c:	4b7a      	ldr	r3, [pc, #488]	@ (8001318 <FND_DispDataCallBack+0x23c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f000 f8fd 	bl	8001330 <FND_DispOff>
      FND_DispDigit(fndDispNum%10);
 8001136:	4b79      	ldr	r3, [pc, #484]	@ (800131c <FND_DispDataCallBack+0x240>)
 8001138:	881a      	ldrh	r2, [r3, #0]
 800113a:	4b79      	ldr	r3, [pc, #484]	@ (8001320 <FND_DispDataCallBack+0x244>)
 800113c:	fba3 1302 	umull	r1, r3, r3, r2
 8001140:	08d9      	lsrs	r1, r3, #3
 8001142:	460b      	mov	r3, r1
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	440b      	add	r3, r1
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	b29b      	uxth	r3, r3
 800114e:	4618      	mov	r0, r3
 8001150:	f000 f940 	bl	80013d4 <FND_DispDigit>
      FND_DispOn(digitPos);
 8001154:	4b70      	ldr	r3, [pc, #448]	@ (8001318 <FND_DispDataCallBack+0x23c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f000 f901 	bl	8001360 <FND_DispOn>
      break;
 800115e:	e0d8      	b.n	8001312 <FND_DispDataCallBack+0x236>
   case DIGIT_10:
      FND_DispOff(digitPos);
 8001160:	4b6d      	ldr	r3, [pc, #436]	@ (8001318 <FND_DispDataCallBack+0x23c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4618      	mov	r0, r3
 8001166:	f000 f8e3 	bl	8001330 <FND_DispOff>
      FND_DispDigit(fndDispNum/10%10);
 800116a:	4b6c      	ldr	r3, [pc, #432]	@ (800131c <FND_DispDataCallBack+0x240>)
 800116c:	881b      	ldrh	r3, [r3, #0]
 800116e:	4a6c      	ldr	r2, [pc, #432]	@ (8001320 <FND_DispDataCallBack+0x244>)
 8001170:	fba2 2303 	umull	r2, r3, r2, r3
 8001174:	08db      	lsrs	r3, r3, #3
 8001176:	b29a      	uxth	r2, r3
 8001178:	4b69      	ldr	r3, [pc, #420]	@ (8001320 <FND_DispDataCallBack+0x244>)
 800117a:	fba3 1302 	umull	r1, r3, r3, r2
 800117e:	08d9      	lsrs	r1, r3, #3
 8001180:	460b      	mov	r3, r1
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	440b      	add	r3, r1
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	b29b      	uxth	r3, r3
 800118c:	4618      	mov	r0, r3
 800118e:	f000 f921 	bl	80013d4 <FND_DispDigit>
      FND_DispOn(digitPos);
 8001192:	4b61      	ldr	r3, [pc, #388]	@ (8001318 <FND_DispDataCallBack+0x23c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f000 f8e2 	bl	8001360 <FND_DispOn>
      break;
 800119c:	e0b9      	b.n	8001312 <FND_DispDataCallBack+0x236>
   case DIGIT_100:
      FND_DispOff(digitPos);
 800119e:	4b5e      	ldr	r3, [pc, #376]	@ (8001318 <FND_DispDataCallBack+0x23c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 f8c4 	bl	8001330 <FND_DispOff>
      FND_DispDigit(fndDispNum/100%10);
 80011a8:	4b5c      	ldr	r3, [pc, #368]	@ (800131c <FND_DispDataCallBack+0x240>)
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	4a5d      	ldr	r2, [pc, #372]	@ (8001324 <FND_DispDataCallBack+0x248>)
 80011ae:	fba2 2303 	umull	r2, r3, r2, r3
 80011b2:	095b      	lsrs	r3, r3, #5
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	4b5a      	ldr	r3, [pc, #360]	@ (8001320 <FND_DispDataCallBack+0x244>)
 80011b8:	fba3 1302 	umull	r1, r3, r3, r2
 80011bc:	08d9      	lsrs	r1, r3, #3
 80011be:	460b      	mov	r3, r1
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	440b      	add	r3, r1
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 f902 	bl	80013d4 <FND_DispDigit>
      FND_DispOn(digitPos);
 80011d0:	4b51      	ldr	r3, [pc, #324]	@ (8001318 <FND_DispDataCallBack+0x23c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f000 f8c3 	bl	8001360 <FND_DispOn>
      break;
 80011da:	e09a      	b.n	8001312 <FND_DispDataCallBack+0x236>
   case DIGIT_1000:
      FND_DispOff(digitPos);
 80011dc:	4b4e      	ldr	r3, [pc, #312]	@ (8001318 <FND_DispDataCallBack+0x23c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f000 f8a5 	bl	8001330 <FND_DispOff>
      FND_DispDigit(fndDispNum/1000%10);
 80011e6:	4b4d      	ldr	r3, [pc, #308]	@ (800131c <FND_DispDataCallBack+0x240>)
 80011e8:	881b      	ldrh	r3, [r3, #0]
 80011ea:	4a4f      	ldr	r2, [pc, #316]	@ (8001328 <FND_DispDataCallBack+0x24c>)
 80011ec:	fba2 2303 	umull	r2, r3, r2, r3
 80011f0:	099b      	lsrs	r3, r3, #6
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	4b4a      	ldr	r3, [pc, #296]	@ (8001320 <FND_DispDataCallBack+0x244>)
 80011f6:	fba3 1302 	umull	r1, r3, r3, r2
 80011fa:	08d9      	lsrs	r1, r3, #3
 80011fc:	460b      	mov	r3, r1
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	440b      	add	r3, r1
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	b29b      	uxth	r3, r3
 8001208:	4618      	mov	r0, r3
 800120a:	f000 f8e3 	bl	80013d4 <FND_DispDigit>
      FND_DispOn(digitPos);
 800120e:	4b42      	ldr	r3, [pc, #264]	@ (8001318 <FND_DispDataCallBack+0x23c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f000 f8a4 	bl	8001360 <FND_DispOn>
      break;
 8001218:	e07b      	b.n	8001312 <FND_DispDataCallBack+0x236>
   case DIGIT_DP_1:
      FND_DispOff(digitPos);
 800121a:	4b3f      	ldr	r3, [pc, #252]	@ (8001318 <FND_DispDataCallBack+0x23c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4618      	mov	r0, r3
 8001220:	f000 f886 	bl	8001330 <FND_DispOff>
      if( fndDispDp & (1<<0)) {
 8001224:	4b41      	ldr	r3, [pc, #260]	@ (800132c <FND_DispDataCallBack+0x250>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	2b00      	cmp	r3, #0
 800122e:	d003      	beq.n	8001238 <FND_DispDataCallBack+0x15c>
         FND_DispDigit(10);
 8001230:	200a      	movs	r0, #10
 8001232:	f000 f8cf 	bl	80013d4 <FND_DispDigit>
 8001236:	e002      	b.n	800123e <FND_DispDataCallBack+0x162>
      }
      else {
         FND_DispDigit(11);
 8001238:	200b      	movs	r0, #11
 800123a:	f000 f8cb 	bl	80013d4 <FND_DispDigit>
      }
      FND_DispOn(digitPos%4);
 800123e:	4b36      	ldr	r3, [pc, #216]	@ (8001318 <FND_DispDataCallBack+0x23c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	425a      	negs	r2, r3
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	f002 0203 	and.w	r2, r2, #3
 800124c:	bf58      	it	pl
 800124e:	4253      	negpl	r3, r2
 8001250:	4618      	mov	r0, r3
 8001252:	f000 f885 	bl	8001360 <FND_DispOn>
      break;
 8001256:	e05c      	b.n	8001312 <FND_DispDataCallBack+0x236>
   case DIGIT_DP_10:
      FND_DispOff(digitPos);
 8001258:	4b2f      	ldr	r3, [pc, #188]	@ (8001318 <FND_DispDataCallBack+0x23c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f000 f867 	bl	8001330 <FND_DispOff>
      if( fndDispDp & (1<<1)) {
 8001262:	4b32      	ldr	r3, [pc, #200]	@ (800132c <FND_DispDataCallBack+0x250>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <FND_DispDataCallBack+0x19a>
         FND_DispDigit(10);
 800126e:	200a      	movs	r0, #10
 8001270:	f000 f8b0 	bl	80013d4 <FND_DispDigit>
 8001274:	e002      	b.n	800127c <FND_DispDataCallBack+0x1a0>
      }
      else {
         FND_DispDigit(11);
 8001276:	200b      	movs	r0, #11
 8001278:	f000 f8ac 	bl	80013d4 <FND_DispDigit>
      }
      FND_DispOn(digitPos%4);
 800127c:	4b26      	ldr	r3, [pc, #152]	@ (8001318 <FND_DispDataCallBack+0x23c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	425a      	negs	r2, r3
 8001282:	f003 0303 	and.w	r3, r3, #3
 8001286:	f002 0203 	and.w	r2, r2, #3
 800128a:	bf58      	it	pl
 800128c:	4253      	negpl	r3, r2
 800128e:	4618      	mov	r0, r3
 8001290:	f000 f866 	bl	8001360 <FND_DispOn>
      break;
 8001294:	e03d      	b.n	8001312 <FND_DispDataCallBack+0x236>
   case DIGIT_DP_100:
      FND_DispOff(digitPos);
 8001296:	4b20      	ldr	r3, [pc, #128]	@ (8001318 <FND_DispDataCallBack+0x23c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f848 	bl	8001330 <FND_DispOff>
      if( fndDispDp & (1<<2)) {
 80012a0:	4b22      	ldr	r3, [pc, #136]	@ (800132c <FND_DispDataCallBack+0x250>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <FND_DispDataCallBack+0x1d8>
         FND_DispDigit(10);
 80012ac:	200a      	movs	r0, #10
 80012ae:	f000 f891 	bl	80013d4 <FND_DispDigit>
 80012b2:	e002      	b.n	80012ba <FND_DispDataCallBack+0x1de>
      }
      else {
         FND_DispDigit(11);
 80012b4:	200b      	movs	r0, #11
 80012b6:	f000 f88d 	bl	80013d4 <FND_DispDigit>
      }
      FND_DispOn(digitPos%4);
 80012ba:	4b17      	ldr	r3, [pc, #92]	@ (8001318 <FND_DispDataCallBack+0x23c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	425a      	negs	r2, r3
 80012c0:	f003 0303 	and.w	r3, r3, #3
 80012c4:	f002 0203 	and.w	r2, r2, #3
 80012c8:	bf58      	it	pl
 80012ca:	4253      	negpl	r3, r2
 80012cc:	4618      	mov	r0, r3
 80012ce:	f000 f847 	bl	8001360 <FND_DispOn>
      break;
 80012d2:	e01e      	b.n	8001312 <FND_DispDataCallBack+0x236>
   case DIGIT_DP_1000:
      FND_DispOff(digitPos);
 80012d4:	4b10      	ldr	r3, [pc, #64]	@ (8001318 <FND_DispDataCallBack+0x23c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 f829 	bl	8001330 <FND_DispOff>
      if( fndDispDp & (1<<3)) {
 80012de:	4b13      	ldr	r3, [pc, #76]	@ (800132c <FND_DispDataCallBack+0x250>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	f003 0308 	and.w	r3, r3, #8
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <FND_DispDataCallBack+0x216>
         FND_DispDigit(10);
 80012ea:	200a      	movs	r0, #10
 80012ec:	f000 f872 	bl	80013d4 <FND_DispDigit>
 80012f0:	e002      	b.n	80012f8 <FND_DispDataCallBack+0x21c>
      }
      else {
         FND_DispDigit(11);
 80012f2:	200b      	movs	r0, #11
 80012f4:	f000 f86e 	bl	80013d4 <FND_DispDigit>
      }
      FND_DispOn(digitPos%4);
 80012f8:	4b07      	ldr	r3, [pc, #28]	@ (8001318 <FND_DispDataCallBack+0x23c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	425a      	negs	r2, r3
 80012fe:	f003 0303 	and.w	r3, r3, #3
 8001302:	f002 0203 	and.w	r2, r2, #3
 8001306:	bf58      	it	pl
 8001308:	4253      	negpl	r3, r2
 800130a:	4618      	mov	r0, r3
 800130c:	f000 f828 	bl	8001360 <FND_DispOn>
      break;
 8001310:	bf00      	nop

   }
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200004a4 	.word	0x200004a4
 800131c:	200004a0 	.word	0x200004a0
 8001320:	cccccccd 	.word	0xcccccccd
 8001324:	51eb851f 	.word	0x51eb851f
 8001328:	10624dd3 	.word	0x10624dd3
 800132c:	200004a2 	.word	0x200004a2

08001330 <FND_DispOff>:


void FND_DispOff(int fndPos)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
   // GPIO_Write(GPIOx, PIn, SET);
   HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, SET);
 8001338:	4a08      	ldr	r2, [pc, #32]	@ (800135c <FND_DispOff+0x2c>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001340:	4a06      	ldr	r2, [pc, #24]	@ (800135c <FND_DispOff+0x2c>)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	4413      	add	r3, r2
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	b29b      	uxth	r3, r3
 800134c:	2201      	movs	r2, #1
 800134e:	4619      	mov	r1, r3
 8001350:	f000 fb6c 	bl	8001a2c <HAL_GPIO_WritePin>
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000004 	.word	0x20000004

08001360 <FND_DispOn>:
void FND_DispOn(int fndPos)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
   // GPIO_Write(GPIOx, Pin, RESET);
   HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, RESET);
 8001368:	4a08      	ldr	r2, [pc, #32]	@ (800138c <FND_DispOn+0x2c>)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001370:	4a06      	ldr	r2, [pc, #24]	@ (800138c <FND_DispOn+0x2c>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	4413      	add	r3, r2
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	b29b      	uxth	r3, r3
 800137c:	2200      	movs	r2, #0
 800137e:	4619      	mov	r1, r3
 8001380:	f000 fb54 	bl	8001a2c <HAL_GPIO_WritePin>
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000004 	.word	0x20000004

08001390 <FND_DispOffAll>:
void FND_DispOffAll()
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
   for(int i = 0;i<4;i++){
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	e010      	b.n	80013be <FND_DispOffAll+0x2e>
      HAL_GPIO_WritePin(fndDigitCom[i].GPIOx, fndDigitCom[i].pinNum, SET);
 800139c:	4a0c      	ldr	r2, [pc, #48]	@ (80013d0 <FND_DispOffAll+0x40>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80013a4:	4a0a      	ldr	r2, [pc, #40]	@ (80013d0 <FND_DispOffAll+0x40>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	4413      	add	r3, r2
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	2201      	movs	r2, #1
 80013b2:	4619      	mov	r1, r3
 80013b4:	f000 fb3a 	bl	8001a2c <HAL_GPIO_WritePin>
   for(int i = 0;i<4;i++){
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3301      	adds	r3, #1
 80013bc:	607b      	str	r3, [r7, #4]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b03      	cmp	r3, #3
 80013c2:	ddeb      	ble.n	800139c <FND_DispOffAll+0xc>
   }
}
 80013c4:	bf00      	nop
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000004 	.word	0x20000004

080013d4 <FND_DispDigit>:

void FND_DispDigit(uint16_t digit)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	80fb      	strh	r3, [r7, #6]
   const uint8_t segFont[12] = {
 80013de:	4a1f      	ldr	r2, [pc, #124]	@ (800145c <FND_DispDigit+0x88>)
 80013e0:	f107 0308 	add.w	r3, r7, #8
 80013e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80013e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
         0x6F,  // 9 => 01101111
         0x80,  // 10(dp) => 1000000
       0x00,  // 11(off) => 0000000
      };

   for (int i = 0; i<8;i++){
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]
 80013ee:	e02c      	b.n	800144a <FND_DispDigit+0x76>
      if(!(segFont[digit] & (1<<i))){
 80013f0:	88fb      	ldrh	r3, [r7, #6]
 80013f2:	3318      	adds	r3, #24
 80013f4:	443b      	add	r3, r7
 80013f6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80013fa:	461a      	mov	r2, r3
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	fa42 f303 	asr.w	r3, r2, r3
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d10e      	bne.n	8001428 <FND_DispDigit+0x54>
         HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, RESET);
 800140a:	4a15      	ldr	r2, [pc, #84]	@ (8001460 <FND_DispDigit+0x8c>)
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001412:	4a13      	ldr	r2, [pc, #76]	@ (8001460 <FND_DispDigit+0x8c>)
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	4413      	add	r3, r2
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	b29b      	uxth	r3, r3
 800141e:	2200      	movs	r2, #0
 8001420:	4619      	mov	r1, r3
 8001422:	f000 fb03 	bl	8001a2c <HAL_GPIO_WritePin>
 8001426:	e00d      	b.n	8001444 <FND_DispDigit+0x70>
      }
      else {
         HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, SET);
 8001428:	4a0d      	ldr	r2, [pc, #52]	@ (8001460 <FND_DispDigit+0x8c>)
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001430:	4a0b      	ldr	r2, [pc, #44]	@ (8001460 <FND_DispDigit+0x8c>)
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	4413      	add	r3, r2
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	b29b      	uxth	r3, r3
 800143c:	2201      	movs	r2, #1
 800143e:	4619      	mov	r1, r3
 8001440:	f000 faf4 	bl	8001a2c <HAL_GPIO_WritePin>
   for (int i = 0; i<8;i++){
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	3301      	adds	r3, #1
 8001448:	617b      	str	r3, [r7, #20]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	2b07      	cmp	r3, #7
 800144e:	ddcf      	ble.n	80013f0 <FND_DispDigit+0x1c>
      }
   }
}
 8001450:	bf00      	nop
 8001452:	bf00      	nop
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	08005a0c 	.word	0x08005a0c
 8001460:	20000024 	.word	0x20000024

08001464 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001468:	4b0e      	ldr	r3, [pc, #56]	@ (80014a4 <HAL_Init+0x40>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a0d      	ldr	r2, [pc, #52]	@ (80014a4 <HAL_Init+0x40>)
 800146e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001472:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001474:	4b0b      	ldr	r3, [pc, #44]	@ (80014a4 <HAL_Init+0x40>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a0a      	ldr	r2, [pc, #40]	@ (80014a4 <HAL_Init+0x40>)
 800147a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800147e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001480:	4b08      	ldr	r3, [pc, #32]	@ (80014a4 <HAL_Init+0x40>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a07      	ldr	r2, [pc, #28]	@ (80014a4 <HAL_Init+0x40>)
 8001486:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800148a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800148c:	2003      	movs	r0, #3
 800148e:	f000 f8fc 	bl	800168a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001492:	200f      	movs	r0, #15
 8001494:	f7ff fad0 	bl	8000a38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001498:	f7ff faa2 	bl	80009e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40023c00 	.word	0x40023c00

080014a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014ac:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <HAL_IncTick+0x20>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	461a      	mov	r2, r3
 80014b2:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <HAL_IncTick+0x24>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4413      	add	r3, r2
 80014b8:	4a04      	ldr	r2, [pc, #16]	@ (80014cc <HAL_IncTick+0x24>)
 80014ba:	6013      	str	r3, [r2, #0]
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	20000068 	.word	0x20000068
 80014cc:	200004a8 	.word	0x200004a8

080014d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return uwTick;
 80014d4:	4b03      	ldr	r3, [pc, #12]	@ (80014e4 <HAL_GetTick+0x14>)
 80014d6:	681b      	ldr	r3, [r3, #0]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	200004a8 	.word	0x200004a8

080014e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f0:	f7ff ffee 	bl	80014d0 <HAL_GetTick>
 80014f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001500:	d005      	beq.n	800150e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001502:	4b0a      	ldr	r3, [pc, #40]	@ (800152c <HAL_Delay+0x44>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	461a      	mov	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4413      	add	r3, r2
 800150c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800150e:	bf00      	nop
 8001510:	f7ff ffde 	bl	80014d0 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	429a      	cmp	r2, r3
 800151e:	d8f7      	bhi.n	8001510 <HAL_Delay+0x28>
  {
  }
}
 8001520:	bf00      	nop
 8001522:	bf00      	nop
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000068 	.word	0x20000068

08001530 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001540:	4b0c      	ldr	r3, [pc, #48]	@ (8001574 <__NVIC_SetPriorityGrouping+0x44>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800154c:	4013      	ands	r3, r2
 800154e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001558:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800155c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001562:	4a04      	ldr	r2, [pc, #16]	@ (8001574 <__NVIC_SetPriorityGrouping+0x44>)
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	60d3      	str	r3, [r2, #12]
}
 8001568:	bf00      	nop
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800157c:	4b04      	ldr	r3, [pc, #16]	@ (8001590 <__NVIC_GetPriorityGrouping+0x18>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	0a1b      	lsrs	r3, r3, #8
 8001582:	f003 0307 	and.w	r3, r3, #7
}
 8001586:	4618      	mov	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	db0b      	blt.n	80015be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	f003 021f 	and.w	r2, r3, #31
 80015ac:	4907      	ldr	r1, [pc, #28]	@ (80015cc <__NVIC_EnableIRQ+0x38>)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	095b      	lsrs	r3, r3, #5
 80015b4:	2001      	movs	r0, #1
 80015b6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000e100 	.word	0xe000e100

080015d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	6039      	str	r1, [r7, #0]
 80015da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	db0a      	blt.n	80015fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	490c      	ldr	r1, [pc, #48]	@ (800161c <__NVIC_SetPriority+0x4c>)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	0112      	lsls	r2, r2, #4
 80015f0:	b2d2      	uxtb	r2, r2
 80015f2:	440b      	add	r3, r1
 80015f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f8:	e00a      	b.n	8001610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	4908      	ldr	r1, [pc, #32]	@ (8001620 <__NVIC_SetPriority+0x50>)
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	3b04      	subs	r3, #4
 8001608:	0112      	lsls	r2, r2, #4
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	440b      	add	r3, r1
 800160e:	761a      	strb	r2, [r3, #24]
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	e000e100 	.word	0xe000e100
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001624:	b480      	push	{r7}
 8001626:	b089      	sub	sp, #36	@ 0x24
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	f1c3 0307 	rsb	r3, r3, #7
 800163e:	2b04      	cmp	r3, #4
 8001640:	bf28      	it	cs
 8001642:	2304      	movcs	r3, #4
 8001644:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3304      	adds	r3, #4
 800164a:	2b06      	cmp	r3, #6
 800164c:	d902      	bls.n	8001654 <NVIC_EncodePriority+0x30>
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	3b03      	subs	r3, #3
 8001652:	e000      	b.n	8001656 <NVIC_EncodePriority+0x32>
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001658:	f04f 32ff 	mov.w	r2, #4294967295
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43da      	mvns	r2, r3
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	401a      	ands	r2, r3
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800166c:	f04f 31ff 	mov.w	r1, #4294967295
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	fa01 f303 	lsl.w	r3, r1, r3
 8001676:	43d9      	mvns	r1, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800167c:	4313      	orrs	r3, r2
         );
}
 800167e:	4618      	mov	r0, r3
 8001680:	3724      	adds	r7, #36	@ 0x24
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff ff4c 	bl	8001530 <__NVIC_SetPriorityGrouping>
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
 80016ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016b2:	f7ff ff61 	bl	8001578 <__NVIC_GetPriorityGrouping>
 80016b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	68b9      	ldr	r1, [r7, #8]
 80016bc:	6978      	ldr	r0, [r7, #20]
 80016be:	f7ff ffb1 	bl	8001624 <NVIC_EncodePriority>
 80016c2:	4602      	mov	r2, r0
 80016c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c8:	4611      	mov	r1, r2
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff ff80 	bl	80015d0 <__NVIC_SetPriority>
}
 80016d0:	bf00      	nop
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff ff54 	bl	8001594 <__NVIC_EnableIRQ>
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b089      	sub	sp, #36	@ 0x24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016fe:	2300      	movs	r3, #0
 8001700:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001702:	2300      	movs	r3, #0
 8001704:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001706:	2300      	movs	r3, #0
 8001708:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]
 800170e:	e159      	b.n	80019c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001710:	2201      	movs	r2, #1
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	4013      	ands	r3, r2
 8001722:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	429a      	cmp	r2, r3
 800172a:	f040 8148 	bne.w	80019be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	2b01      	cmp	r3, #1
 8001738:	d005      	beq.n	8001746 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001742:	2b02      	cmp	r3, #2
 8001744:	d130      	bne.n	80017a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	2203      	movs	r2, #3
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4013      	ands	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	68da      	ldr	r2, [r3, #12]
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4313      	orrs	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800177c:	2201      	movs	r2, #1
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	091b      	lsrs	r3, r3, #4
 8001792:	f003 0201 	and.w	r2, r3, #1
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	4313      	orrs	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 0303 	and.w	r3, r3, #3
 80017b0:	2b03      	cmp	r3, #3
 80017b2:	d017      	beq.n	80017e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	2203      	movs	r2, #3
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4013      	ands	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d123      	bne.n	8001838 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	08da      	lsrs	r2, r3, #3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3208      	adds	r2, #8
 80017f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	220f      	movs	r2, #15
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4013      	ands	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	691a      	ldr	r2, [r3, #16]
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4313      	orrs	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	08da      	lsrs	r2, r3, #3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	3208      	adds	r2, #8
 8001832:	69b9      	ldr	r1, [r7, #24]
 8001834:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	2203      	movs	r2, #3
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4013      	ands	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 0203 	and.w	r2, r3, #3
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4313      	orrs	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001874:	2b00      	cmp	r3, #0
 8001876:	f000 80a2 	beq.w	80019be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	4b57      	ldr	r3, [pc, #348]	@ (80019dc <HAL_GPIO_Init+0x2e8>)
 8001880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001882:	4a56      	ldr	r2, [pc, #344]	@ (80019dc <HAL_GPIO_Init+0x2e8>)
 8001884:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001888:	6453      	str	r3, [r2, #68]	@ 0x44
 800188a:	4b54      	ldr	r3, [pc, #336]	@ (80019dc <HAL_GPIO_Init+0x2e8>)
 800188c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001896:	4a52      	ldr	r2, [pc, #328]	@ (80019e0 <HAL_GPIO_Init+0x2ec>)
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	089b      	lsrs	r3, r3, #2
 800189c:	3302      	adds	r3, #2
 800189e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	220f      	movs	r2, #15
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43db      	mvns	r3, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4013      	ands	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a49      	ldr	r2, [pc, #292]	@ (80019e4 <HAL_GPIO_Init+0x2f0>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d019      	beq.n	80018f6 <HAL_GPIO_Init+0x202>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a48      	ldr	r2, [pc, #288]	@ (80019e8 <HAL_GPIO_Init+0x2f4>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d013      	beq.n	80018f2 <HAL_GPIO_Init+0x1fe>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a47      	ldr	r2, [pc, #284]	@ (80019ec <HAL_GPIO_Init+0x2f8>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d00d      	beq.n	80018ee <HAL_GPIO_Init+0x1fa>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a46      	ldr	r2, [pc, #280]	@ (80019f0 <HAL_GPIO_Init+0x2fc>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d007      	beq.n	80018ea <HAL_GPIO_Init+0x1f6>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a45      	ldr	r2, [pc, #276]	@ (80019f4 <HAL_GPIO_Init+0x300>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d101      	bne.n	80018e6 <HAL_GPIO_Init+0x1f2>
 80018e2:	2304      	movs	r3, #4
 80018e4:	e008      	b.n	80018f8 <HAL_GPIO_Init+0x204>
 80018e6:	2307      	movs	r3, #7
 80018e8:	e006      	b.n	80018f8 <HAL_GPIO_Init+0x204>
 80018ea:	2303      	movs	r3, #3
 80018ec:	e004      	b.n	80018f8 <HAL_GPIO_Init+0x204>
 80018ee:	2302      	movs	r3, #2
 80018f0:	e002      	b.n	80018f8 <HAL_GPIO_Init+0x204>
 80018f2:	2301      	movs	r3, #1
 80018f4:	e000      	b.n	80018f8 <HAL_GPIO_Init+0x204>
 80018f6:	2300      	movs	r3, #0
 80018f8:	69fa      	ldr	r2, [r7, #28]
 80018fa:	f002 0203 	and.w	r2, r2, #3
 80018fe:	0092      	lsls	r2, r2, #2
 8001900:	4093      	lsls	r3, r2
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4313      	orrs	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001908:	4935      	ldr	r1, [pc, #212]	@ (80019e0 <HAL_GPIO_Init+0x2ec>)
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	089b      	lsrs	r3, r3, #2
 800190e:	3302      	adds	r3, #2
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001916:	4b38      	ldr	r3, [pc, #224]	@ (80019f8 <HAL_GPIO_Init+0x304>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	43db      	mvns	r3, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4013      	ands	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	4313      	orrs	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800193a:	4a2f      	ldr	r2, [pc, #188]	@ (80019f8 <HAL_GPIO_Init+0x304>)
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001940:	4b2d      	ldr	r3, [pc, #180]	@ (80019f8 <HAL_GPIO_Init+0x304>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	43db      	mvns	r3, r3
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4013      	ands	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d003      	beq.n	8001964 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	4313      	orrs	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001964:	4a24      	ldr	r2, [pc, #144]	@ (80019f8 <HAL_GPIO_Init+0x304>)
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800196a:	4b23      	ldr	r3, [pc, #140]	@ (80019f8 <HAL_GPIO_Init+0x304>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	43db      	mvns	r3, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4013      	ands	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800198e:	4a1a      	ldr	r2, [pc, #104]	@ (80019f8 <HAL_GPIO_Init+0x304>)
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001994:	4b18      	ldr	r3, [pc, #96]	@ (80019f8 <HAL_GPIO_Init+0x304>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	43db      	mvns	r3, r3
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4013      	ands	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d003      	beq.n	80019b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019b8:	4a0f      	ldr	r2, [pc, #60]	@ (80019f8 <HAL_GPIO_Init+0x304>)
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	3301      	adds	r3, #1
 80019c2:	61fb      	str	r3, [r7, #28]
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	2b0f      	cmp	r3, #15
 80019c8:	f67f aea2 	bls.w	8001710 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019cc:	bf00      	nop
 80019ce:	bf00      	nop
 80019d0:	3724      	adds	r7, #36	@ 0x24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40013800 	.word	0x40013800
 80019e4:	40020000 	.word	0x40020000
 80019e8:	40020400 	.word	0x40020400
 80019ec:	40020800 	.word	0x40020800
 80019f0:	40020c00 	.word	0x40020c00
 80019f4:	40021000 	.word	0x40021000
 80019f8:	40013c00 	.word	0x40013c00

080019fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	691a      	ldr	r2, [r3, #16]
 8001a0c:	887b      	ldrh	r3, [r7, #2]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d002      	beq.n	8001a1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a14:	2301      	movs	r3, #1
 8001a16:	73fb      	strb	r3, [r7, #15]
 8001a18:	e001      	b.n	8001a1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	807b      	strh	r3, [r7, #2]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a3c:	787b      	ldrb	r3, [r7, #1]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a42:	887a      	ldrh	r2, [r7, #2]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a48:	e003      	b.n	8001a52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a4a:	887b      	ldrh	r3, [r7, #2]
 8001a4c:	041a      	lsls	r2, r3, #16
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	619a      	str	r2, [r3, #24]
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
	...

08001a60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e12b      	b.n	8001cca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d106      	bne.n	8001a8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7fe fec8 	bl	800081c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2224      	movs	r2, #36	@ 0x24
 8001a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 0201 	bic.w	r2, r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ab2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ac2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ac4:	f000 fd80 	bl	80025c8 <HAL_RCC_GetPCLK1Freq>
 8001ac8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	4a81      	ldr	r2, [pc, #516]	@ (8001cd4 <HAL_I2C_Init+0x274>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d807      	bhi.n	8001ae4 <HAL_I2C_Init+0x84>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4a80      	ldr	r2, [pc, #512]	@ (8001cd8 <HAL_I2C_Init+0x278>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	bf94      	ite	ls
 8001adc:	2301      	movls	r3, #1
 8001ade:	2300      	movhi	r3, #0
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	e006      	b.n	8001af2 <HAL_I2C_Init+0x92>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4a7d      	ldr	r2, [pc, #500]	@ (8001cdc <HAL_I2C_Init+0x27c>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	bf94      	ite	ls
 8001aec:	2301      	movls	r3, #1
 8001aee:	2300      	movhi	r3, #0
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e0e7      	b.n	8001cca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	4a78      	ldr	r2, [pc, #480]	@ (8001ce0 <HAL_I2C_Init+0x280>)
 8001afe:	fba2 2303 	umull	r2, r3, r2, r3
 8001b02:	0c9b      	lsrs	r3, r3, #18
 8001b04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	68ba      	ldr	r2, [r7, #8]
 8001b16:	430a      	orrs	r2, r1
 8001b18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	4a6a      	ldr	r2, [pc, #424]	@ (8001cd4 <HAL_I2C_Init+0x274>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d802      	bhi.n	8001b34 <HAL_I2C_Init+0xd4>
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	3301      	adds	r3, #1
 8001b32:	e009      	b.n	8001b48 <HAL_I2C_Init+0xe8>
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001b3a:	fb02 f303 	mul.w	r3, r2, r3
 8001b3e:	4a69      	ldr	r2, [pc, #420]	@ (8001ce4 <HAL_I2C_Init+0x284>)
 8001b40:	fba2 2303 	umull	r2, r3, r2, r3
 8001b44:	099b      	lsrs	r3, r3, #6
 8001b46:	3301      	adds	r3, #1
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	6812      	ldr	r2, [r2, #0]
 8001b4c:	430b      	orrs	r3, r1
 8001b4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001b5a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	495c      	ldr	r1, [pc, #368]	@ (8001cd4 <HAL_I2C_Init+0x274>)
 8001b64:	428b      	cmp	r3, r1
 8001b66:	d819      	bhi.n	8001b9c <HAL_I2C_Init+0x13c>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	1e59      	subs	r1, r3, #1
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b76:	1c59      	adds	r1, r3, #1
 8001b78:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001b7c:	400b      	ands	r3, r1
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00a      	beq.n	8001b98 <HAL_I2C_Init+0x138>
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	1e59      	subs	r1, r3, #1
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b90:	3301      	adds	r3, #1
 8001b92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b96:	e051      	b.n	8001c3c <HAL_I2C_Init+0x1dc>
 8001b98:	2304      	movs	r3, #4
 8001b9a:	e04f      	b.n	8001c3c <HAL_I2C_Init+0x1dc>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d111      	bne.n	8001bc8 <HAL_I2C_Init+0x168>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	1e58      	subs	r0, r3, #1
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6859      	ldr	r1, [r3, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	440b      	add	r3, r1
 8001bb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	bf0c      	ite	eq
 8001bc0:	2301      	moveq	r3, #1
 8001bc2:	2300      	movne	r3, #0
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	e012      	b.n	8001bee <HAL_I2C_Init+0x18e>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	1e58      	subs	r0, r3, #1
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6859      	ldr	r1, [r3, #4]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	0099      	lsls	r1, r3, #2
 8001bd8:	440b      	add	r3, r1
 8001bda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bde:	3301      	adds	r3, #1
 8001be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	bf0c      	ite	eq
 8001be8:	2301      	moveq	r3, #1
 8001bea:	2300      	movne	r3, #0
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_I2C_Init+0x196>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e022      	b.n	8001c3c <HAL_I2C_Init+0x1dc>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10e      	bne.n	8001c1c <HAL_I2C_Init+0x1bc>
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	1e58      	subs	r0, r3, #1
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6859      	ldr	r1, [r3, #4]
 8001c06:	460b      	mov	r3, r1
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	440b      	add	r3, r1
 8001c0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c10:	3301      	adds	r3, #1
 8001c12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c1a:	e00f      	b.n	8001c3c <HAL_I2C_Init+0x1dc>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	1e58      	subs	r0, r3, #1
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6859      	ldr	r1, [r3, #4]
 8001c24:	460b      	mov	r3, r1
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	440b      	add	r3, r1
 8001c2a:	0099      	lsls	r1, r3, #2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c32:	3301      	adds	r3, #1
 8001c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c38:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c3c:	6879      	ldr	r1, [r7, #4]
 8001c3e:	6809      	ldr	r1, [r1, #0]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69da      	ldr	r2, [r3, #28]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a1b      	ldr	r3, [r3, #32]
 8001c56:	431a      	orrs	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001c6a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	6911      	ldr	r1, [r2, #16]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	68d2      	ldr	r2, [r2, #12]
 8001c76:	4311      	orrs	r1, r2
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	6812      	ldr	r2, [r2, #0]
 8001c7c:	430b      	orrs	r3, r1
 8001c7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	695a      	ldr	r2, [r3, #20]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	431a      	orrs	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 0201 	orr.w	r2, r2, #1
 8001caa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2220      	movs	r2, #32
 8001cb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	000186a0 	.word	0x000186a0
 8001cd8:	001e847f 	.word	0x001e847f
 8001cdc:	003d08ff 	.word	0x003d08ff
 8001ce0:	431bde83 	.word	0x431bde83
 8001ce4:	10624dd3 	.word	0x10624dd3

08001ce8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e267      	b.n	80021ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d075      	beq.n	8001df2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d06:	4b88      	ldr	r3, [pc, #544]	@ (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 030c 	and.w	r3, r3, #12
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	d00c      	beq.n	8001d2c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d12:	4b85      	ldr	r3, [pc, #532]	@ (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d1a:	2b08      	cmp	r3, #8
 8001d1c:	d112      	bne.n	8001d44 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d1e:	4b82      	ldr	r3, [pc, #520]	@ (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d2a:	d10b      	bne.n	8001d44 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d2c:	4b7e      	ldr	r3, [pc, #504]	@ (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d05b      	beq.n	8001df0 <HAL_RCC_OscConfig+0x108>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d157      	bne.n	8001df0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e242      	b.n	80021ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d4c:	d106      	bne.n	8001d5c <HAL_RCC_OscConfig+0x74>
 8001d4e:	4b76      	ldr	r3, [pc, #472]	@ (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a75      	ldr	r2, [pc, #468]	@ (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001d54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d58:	6013      	str	r3, [r2, #0]
 8001d5a:	e01d      	b.n	8001d98 <HAL_RCC_OscConfig+0xb0>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d64:	d10c      	bne.n	8001d80 <HAL_RCC_OscConfig+0x98>
 8001d66:	4b70      	ldr	r3, [pc, #448]	@ (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a6f      	ldr	r2, [pc, #444]	@ (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001d6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	4b6d      	ldr	r3, [pc, #436]	@ (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a6c      	ldr	r2, [pc, #432]	@ (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001d78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d7c:	6013      	str	r3, [r2, #0]
 8001d7e:	e00b      	b.n	8001d98 <HAL_RCC_OscConfig+0xb0>
 8001d80:	4b69      	ldr	r3, [pc, #420]	@ (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a68      	ldr	r2, [pc, #416]	@ (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001d86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d8a:	6013      	str	r3, [r2, #0]
 8001d8c:	4b66      	ldr	r3, [pc, #408]	@ (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a65      	ldr	r2, [pc, #404]	@ (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001d92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d013      	beq.n	8001dc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da0:	f7ff fb96 	bl	80014d0 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da8:	f7ff fb92 	bl	80014d0 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b64      	cmp	r3, #100	@ 0x64
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e207      	b.n	80021ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dba:	4b5b      	ldr	r3, [pc, #364]	@ (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0f0      	beq.n	8001da8 <HAL_RCC_OscConfig+0xc0>
 8001dc6:	e014      	b.n	8001df2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc8:	f7ff fb82 	bl	80014d0 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd0:	f7ff fb7e 	bl	80014d0 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b64      	cmp	r3, #100	@ 0x64
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e1f3      	b.n	80021ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001de2:	4b51      	ldr	r3, [pc, #324]	@ (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f0      	bne.n	8001dd0 <HAL_RCC_OscConfig+0xe8>
 8001dee:	e000      	b.n	8001df2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d063      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001dfe:	4b4a      	ldr	r3, [pc, #296]	@ (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 030c 	and.w	r3, r3, #12
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00b      	beq.n	8001e22 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e0a:	4b47      	ldr	r3, [pc, #284]	@ (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e12:	2b08      	cmp	r3, #8
 8001e14:	d11c      	bne.n	8001e50 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e16:	4b44      	ldr	r3, [pc, #272]	@ (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d116      	bne.n	8001e50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e22:	4b41      	ldr	r3, [pc, #260]	@ (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d005      	beq.n	8001e3a <HAL_RCC_OscConfig+0x152>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d001      	beq.n	8001e3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e1c7      	b.n	80021ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	4937      	ldr	r1, [pc, #220]	@ (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e4e:	e03a      	b.n	8001ec6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d020      	beq.n	8001e9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e58:	4b34      	ldr	r3, [pc, #208]	@ (8001f2c <HAL_RCC_OscConfig+0x244>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5e:	f7ff fb37 	bl	80014d0 <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e66:	f7ff fb33 	bl	80014d0 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e1a8      	b.n	80021ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e78:	4b2b      	ldr	r3, [pc, #172]	@ (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d0f0      	beq.n	8001e66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e84:	4b28      	ldr	r3, [pc, #160]	@ (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	4925      	ldr	r1, [pc, #148]	@ (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	600b      	str	r3, [r1, #0]
 8001e98:	e015      	b.n	8001ec6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e9a:	4b24      	ldr	r3, [pc, #144]	@ (8001f2c <HAL_RCC_OscConfig+0x244>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea0:	f7ff fb16 	bl	80014d0 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea8:	f7ff fb12 	bl	80014d0 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e187      	b.n	80021ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eba:	4b1b      	ldr	r3, [pc, #108]	@ (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1f0      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d036      	beq.n	8001f40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d016      	beq.n	8001f08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eda:	4b15      	ldr	r3, [pc, #84]	@ (8001f30 <HAL_RCC_OscConfig+0x248>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee0:	f7ff faf6 	bl	80014d0 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee8:	f7ff faf2 	bl	80014d0 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e167      	b.n	80021ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001efa:	4b0b      	ldr	r3, [pc, #44]	@ (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001efc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0f0      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x200>
 8001f06:	e01b      	b.n	8001f40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f08:	4b09      	ldr	r3, [pc, #36]	@ (8001f30 <HAL_RCC_OscConfig+0x248>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f0e:	f7ff fadf 	bl	80014d0 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f14:	e00e      	b.n	8001f34 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f16:	f7ff fadb 	bl	80014d0 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d907      	bls.n	8001f34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e150      	b.n	80021ca <HAL_RCC_OscConfig+0x4e2>
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	42470000 	.word	0x42470000
 8001f30:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f34:	4b88      	ldr	r3, [pc, #544]	@ (8002158 <HAL_RCC_OscConfig+0x470>)
 8001f36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1ea      	bne.n	8001f16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 8097 	beq.w	800207c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f52:	4b81      	ldr	r3, [pc, #516]	@ (8002158 <HAL_RCC_OscConfig+0x470>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10f      	bne.n	8001f7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	4b7d      	ldr	r3, [pc, #500]	@ (8002158 <HAL_RCC_OscConfig+0x470>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f66:	4a7c      	ldr	r2, [pc, #496]	@ (8002158 <HAL_RCC_OscConfig+0x470>)
 8001f68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f6e:	4b7a      	ldr	r3, [pc, #488]	@ (8002158 <HAL_RCC_OscConfig+0x470>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f76:	60bb      	str	r3, [r7, #8]
 8001f78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f7e:	4b77      	ldr	r3, [pc, #476]	@ (800215c <HAL_RCC_OscConfig+0x474>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d118      	bne.n	8001fbc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f8a:	4b74      	ldr	r3, [pc, #464]	@ (800215c <HAL_RCC_OscConfig+0x474>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a73      	ldr	r2, [pc, #460]	@ (800215c <HAL_RCC_OscConfig+0x474>)
 8001f90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f96:	f7ff fa9b 	bl	80014d0 <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f9e:	f7ff fa97 	bl	80014d0 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e10c      	b.n	80021ca <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb0:	4b6a      	ldr	r3, [pc, #424]	@ (800215c <HAL_RCC_OscConfig+0x474>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0f0      	beq.n	8001f9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d106      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x2ea>
 8001fc4:	4b64      	ldr	r3, [pc, #400]	@ (8002158 <HAL_RCC_OscConfig+0x470>)
 8001fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fc8:	4a63      	ldr	r2, [pc, #396]	@ (8002158 <HAL_RCC_OscConfig+0x470>)
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fd0:	e01c      	b.n	800200c <HAL_RCC_OscConfig+0x324>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	2b05      	cmp	r3, #5
 8001fd8:	d10c      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x30c>
 8001fda:	4b5f      	ldr	r3, [pc, #380]	@ (8002158 <HAL_RCC_OscConfig+0x470>)
 8001fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fde:	4a5e      	ldr	r2, [pc, #376]	@ (8002158 <HAL_RCC_OscConfig+0x470>)
 8001fe0:	f043 0304 	orr.w	r3, r3, #4
 8001fe4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fe6:	4b5c      	ldr	r3, [pc, #368]	@ (8002158 <HAL_RCC_OscConfig+0x470>)
 8001fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fea:	4a5b      	ldr	r2, [pc, #364]	@ (8002158 <HAL_RCC_OscConfig+0x470>)
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ff2:	e00b      	b.n	800200c <HAL_RCC_OscConfig+0x324>
 8001ff4:	4b58      	ldr	r3, [pc, #352]	@ (8002158 <HAL_RCC_OscConfig+0x470>)
 8001ff6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ff8:	4a57      	ldr	r2, [pc, #348]	@ (8002158 <HAL_RCC_OscConfig+0x470>)
 8001ffa:	f023 0301 	bic.w	r3, r3, #1
 8001ffe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002000:	4b55      	ldr	r3, [pc, #340]	@ (8002158 <HAL_RCC_OscConfig+0x470>)
 8002002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002004:	4a54      	ldr	r2, [pc, #336]	@ (8002158 <HAL_RCC_OscConfig+0x470>)
 8002006:	f023 0304 	bic.w	r3, r3, #4
 800200a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d015      	beq.n	8002040 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002014:	f7ff fa5c 	bl	80014d0 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800201a:	e00a      	b.n	8002032 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800201c:	f7ff fa58 	bl	80014d0 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	f241 3288 	movw	r2, #5000	@ 0x1388
 800202a:	4293      	cmp	r3, r2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e0cb      	b.n	80021ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002032:	4b49      	ldr	r3, [pc, #292]	@ (8002158 <HAL_RCC_OscConfig+0x470>)
 8002034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0ee      	beq.n	800201c <HAL_RCC_OscConfig+0x334>
 800203e:	e014      	b.n	800206a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002040:	f7ff fa46 	bl	80014d0 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002046:	e00a      	b.n	800205e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002048:	f7ff fa42 	bl	80014d0 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002056:	4293      	cmp	r3, r2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e0b5      	b.n	80021ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800205e:	4b3e      	ldr	r3, [pc, #248]	@ (8002158 <HAL_RCC_OscConfig+0x470>)
 8002060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1ee      	bne.n	8002048 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800206a:	7dfb      	ldrb	r3, [r7, #23]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d105      	bne.n	800207c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002070:	4b39      	ldr	r3, [pc, #228]	@ (8002158 <HAL_RCC_OscConfig+0x470>)
 8002072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002074:	4a38      	ldr	r2, [pc, #224]	@ (8002158 <HAL_RCC_OscConfig+0x470>)
 8002076:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800207a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 80a1 	beq.w	80021c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002086:	4b34      	ldr	r3, [pc, #208]	@ (8002158 <HAL_RCC_OscConfig+0x470>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 030c 	and.w	r3, r3, #12
 800208e:	2b08      	cmp	r3, #8
 8002090:	d05c      	beq.n	800214c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	2b02      	cmp	r3, #2
 8002098:	d141      	bne.n	800211e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800209a:	4b31      	ldr	r3, [pc, #196]	@ (8002160 <HAL_RCC_OscConfig+0x478>)
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a0:	f7ff fa16 	bl	80014d0 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a8:	f7ff fa12 	bl	80014d0 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e087      	b.n	80021ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ba:	4b27      	ldr	r3, [pc, #156]	@ (8002158 <HAL_RCC_OscConfig+0x470>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1f0      	bne.n	80020a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69da      	ldr	r2, [r3, #28]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	431a      	orrs	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d4:	019b      	lsls	r3, r3, #6
 80020d6:	431a      	orrs	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020dc:	085b      	lsrs	r3, r3, #1
 80020de:	3b01      	subs	r3, #1
 80020e0:	041b      	lsls	r3, r3, #16
 80020e2:	431a      	orrs	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e8:	061b      	lsls	r3, r3, #24
 80020ea:	491b      	ldr	r1, [pc, #108]	@ (8002158 <HAL_RCC_OscConfig+0x470>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002160 <HAL_RCC_OscConfig+0x478>)
 80020f2:	2201      	movs	r2, #1
 80020f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f6:	f7ff f9eb 	bl	80014d0 <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020fe:	f7ff f9e7 	bl	80014d0 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e05c      	b.n	80021ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002110:	4b11      	ldr	r3, [pc, #68]	@ (8002158 <HAL_RCC_OscConfig+0x470>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0f0      	beq.n	80020fe <HAL_RCC_OscConfig+0x416>
 800211c:	e054      	b.n	80021c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800211e:	4b10      	ldr	r3, [pc, #64]	@ (8002160 <HAL_RCC_OscConfig+0x478>)
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002124:	f7ff f9d4 	bl	80014d0 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800212c:	f7ff f9d0 	bl	80014d0 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e045      	b.n	80021ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800213e:	4b06      	ldr	r3, [pc, #24]	@ (8002158 <HAL_RCC_OscConfig+0x470>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f0      	bne.n	800212c <HAL_RCC_OscConfig+0x444>
 800214a:	e03d      	b.n	80021c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d107      	bne.n	8002164 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e038      	b.n	80021ca <HAL_RCC_OscConfig+0x4e2>
 8002158:	40023800 	.word	0x40023800
 800215c:	40007000 	.word	0x40007000
 8002160:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002164:	4b1b      	ldr	r3, [pc, #108]	@ (80021d4 <HAL_RCC_OscConfig+0x4ec>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d028      	beq.n	80021c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800217c:	429a      	cmp	r2, r3
 800217e:	d121      	bne.n	80021c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800218a:	429a      	cmp	r2, r3
 800218c:	d11a      	bne.n	80021c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002194:	4013      	ands	r3, r2
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800219a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800219c:	4293      	cmp	r3, r2
 800219e:	d111      	bne.n	80021c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021aa:	085b      	lsrs	r3, r3, #1
 80021ac:	3b01      	subs	r3, #1
 80021ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d107      	bne.n	80021c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d001      	beq.n	80021c8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e000      	b.n	80021ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40023800 	.word	0x40023800

080021d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e0cc      	b.n	8002386 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021ec:	4b68      	ldr	r3, [pc, #416]	@ (8002390 <HAL_RCC_ClockConfig+0x1b8>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d90c      	bls.n	8002214 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fa:	4b65      	ldr	r3, [pc, #404]	@ (8002390 <HAL_RCC_ClockConfig+0x1b8>)
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002202:	4b63      	ldr	r3, [pc, #396]	@ (8002390 <HAL_RCC_ClockConfig+0x1b8>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	429a      	cmp	r2, r3
 800220e:	d001      	beq.n	8002214 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e0b8      	b.n	8002386 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d020      	beq.n	8002262 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b00      	cmp	r3, #0
 800222a:	d005      	beq.n	8002238 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800222c:	4b59      	ldr	r3, [pc, #356]	@ (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	4a58      	ldr	r2, [pc, #352]	@ (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 8002232:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002236:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0308 	and.w	r3, r3, #8
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002244:	4b53      	ldr	r3, [pc, #332]	@ (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	4a52      	ldr	r2, [pc, #328]	@ (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 800224a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800224e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002250:	4b50      	ldr	r3, [pc, #320]	@ (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	494d      	ldr	r1, [pc, #308]	@ (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 800225e:	4313      	orrs	r3, r2
 8002260:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b00      	cmp	r3, #0
 800226c:	d044      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d107      	bne.n	8002286 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002276:	4b47      	ldr	r3, [pc, #284]	@ (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d119      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e07f      	b.n	8002386 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b02      	cmp	r3, #2
 800228c:	d003      	beq.n	8002296 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002292:	2b03      	cmp	r3, #3
 8002294:	d107      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002296:	4b3f      	ldr	r3, [pc, #252]	@ (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d109      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e06f      	b.n	8002386 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e067      	b.n	8002386 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022b6:	4b37      	ldr	r3, [pc, #220]	@ (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f023 0203 	bic.w	r2, r3, #3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	4934      	ldr	r1, [pc, #208]	@ (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022c8:	f7ff f902 	bl	80014d0 <HAL_GetTick>
 80022cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ce:	e00a      	b.n	80022e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022d0:	f7ff f8fe 	bl	80014d0 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022de:	4293      	cmp	r3, r2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e04f      	b.n	8002386 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e6:	4b2b      	ldr	r3, [pc, #172]	@ (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 020c 	and.w	r2, r3, #12
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d1eb      	bne.n	80022d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022f8:	4b25      	ldr	r3, [pc, #148]	@ (8002390 <HAL_RCC_ClockConfig+0x1b8>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	429a      	cmp	r2, r3
 8002304:	d20c      	bcs.n	8002320 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002306:	4b22      	ldr	r3, [pc, #136]	@ (8002390 <HAL_RCC_ClockConfig+0x1b8>)
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800230e:	4b20      	ldr	r3, [pc, #128]	@ (8002390 <HAL_RCC_ClockConfig+0x1b8>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	429a      	cmp	r2, r3
 800231a:	d001      	beq.n	8002320 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e032      	b.n	8002386 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b00      	cmp	r3, #0
 800232a:	d008      	beq.n	800233e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800232c:	4b19      	ldr	r3, [pc, #100]	@ (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	4916      	ldr	r1, [pc, #88]	@ (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 800233a:	4313      	orrs	r3, r2
 800233c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	2b00      	cmp	r3, #0
 8002348:	d009      	beq.n	800235e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800234a:	4b12      	ldr	r3, [pc, #72]	@ (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	490e      	ldr	r1, [pc, #56]	@ (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	4313      	orrs	r3, r2
 800235c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800235e:	f000 f821 	bl	80023a4 <HAL_RCC_GetSysClockFreq>
 8002362:	4602      	mov	r2, r0
 8002364:	4b0b      	ldr	r3, [pc, #44]	@ (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	091b      	lsrs	r3, r3, #4
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	490a      	ldr	r1, [pc, #40]	@ (8002398 <HAL_RCC_ClockConfig+0x1c0>)
 8002370:	5ccb      	ldrb	r3, [r1, r3]
 8002372:	fa22 f303 	lsr.w	r3, r2, r3
 8002376:	4a09      	ldr	r2, [pc, #36]	@ (800239c <HAL_RCC_ClockConfig+0x1c4>)
 8002378:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800237a:	4b09      	ldr	r3, [pc, #36]	@ (80023a0 <HAL_RCC_ClockConfig+0x1c8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe fb5a 	bl	8000a38 <HAL_InitTick>

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40023c00 	.word	0x40023c00
 8002394:	40023800 	.word	0x40023800
 8002398:	08005a20 	.word	0x08005a20
 800239c:	20000000 	.word	0x20000000
 80023a0:	20000064 	.word	0x20000064

080023a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023a8:	b094      	sub	sp, #80	@ 0x50
 80023aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80023ac:	2300      	movs	r3, #0
 80023ae:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80023b8:	2300      	movs	r3, #0
 80023ba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023bc:	4b79      	ldr	r3, [pc, #484]	@ (80025a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 030c 	and.w	r3, r3, #12
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d00d      	beq.n	80023e4 <HAL_RCC_GetSysClockFreq+0x40>
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	f200 80e1 	bhi.w	8002590 <HAL_RCC_GetSysClockFreq+0x1ec>
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d002      	beq.n	80023d8 <HAL_RCC_GetSysClockFreq+0x34>
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	d003      	beq.n	80023de <HAL_RCC_GetSysClockFreq+0x3a>
 80023d6:	e0db      	b.n	8002590 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023d8:	4b73      	ldr	r3, [pc, #460]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80023da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023dc:	e0db      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023de:	4b73      	ldr	r3, [pc, #460]	@ (80025ac <HAL_RCC_GetSysClockFreq+0x208>)
 80023e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023e2:	e0d8      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023e4:	4b6f      	ldr	r3, [pc, #444]	@ (80025a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023ec:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023ee:	4b6d      	ldr	r3, [pc, #436]	@ (80025a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d063      	beq.n	80024c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023fa:	4b6a      	ldr	r3, [pc, #424]	@ (80025a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	099b      	lsrs	r3, r3, #6
 8002400:	2200      	movs	r2, #0
 8002402:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002404:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800240c:	633b      	str	r3, [r7, #48]	@ 0x30
 800240e:	2300      	movs	r3, #0
 8002410:	637b      	str	r3, [r7, #52]	@ 0x34
 8002412:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002416:	4622      	mov	r2, r4
 8002418:	462b      	mov	r3, r5
 800241a:	f04f 0000 	mov.w	r0, #0
 800241e:	f04f 0100 	mov.w	r1, #0
 8002422:	0159      	lsls	r1, r3, #5
 8002424:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002428:	0150      	lsls	r0, r2, #5
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	4621      	mov	r1, r4
 8002430:	1a51      	subs	r1, r2, r1
 8002432:	6139      	str	r1, [r7, #16]
 8002434:	4629      	mov	r1, r5
 8002436:	eb63 0301 	sbc.w	r3, r3, r1
 800243a:	617b      	str	r3, [r7, #20]
 800243c:	f04f 0200 	mov.w	r2, #0
 8002440:	f04f 0300 	mov.w	r3, #0
 8002444:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002448:	4659      	mov	r1, fp
 800244a:	018b      	lsls	r3, r1, #6
 800244c:	4651      	mov	r1, sl
 800244e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002452:	4651      	mov	r1, sl
 8002454:	018a      	lsls	r2, r1, #6
 8002456:	4651      	mov	r1, sl
 8002458:	ebb2 0801 	subs.w	r8, r2, r1
 800245c:	4659      	mov	r1, fp
 800245e:	eb63 0901 	sbc.w	r9, r3, r1
 8002462:	f04f 0200 	mov.w	r2, #0
 8002466:	f04f 0300 	mov.w	r3, #0
 800246a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800246e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002472:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002476:	4690      	mov	r8, r2
 8002478:	4699      	mov	r9, r3
 800247a:	4623      	mov	r3, r4
 800247c:	eb18 0303 	adds.w	r3, r8, r3
 8002480:	60bb      	str	r3, [r7, #8]
 8002482:	462b      	mov	r3, r5
 8002484:	eb49 0303 	adc.w	r3, r9, r3
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	f04f 0300 	mov.w	r3, #0
 8002492:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002496:	4629      	mov	r1, r5
 8002498:	024b      	lsls	r3, r1, #9
 800249a:	4621      	mov	r1, r4
 800249c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024a0:	4621      	mov	r1, r4
 80024a2:	024a      	lsls	r2, r1, #9
 80024a4:	4610      	mov	r0, r2
 80024a6:	4619      	mov	r1, r3
 80024a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024aa:	2200      	movs	r2, #0
 80024ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80024b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80024b4:	f7fd fe94 	bl	80001e0 <__aeabi_uldivmod>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	4613      	mov	r3, r2
 80024be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024c0:	e058      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024c2:	4b38      	ldr	r3, [pc, #224]	@ (80025a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	099b      	lsrs	r3, r3, #6
 80024c8:	2200      	movs	r2, #0
 80024ca:	4618      	mov	r0, r3
 80024cc:	4611      	mov	r1, r2
 80024ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024d2:	623b      	str	r3, [r7, #32]
 80024d4:	2300      	movs	r3, #0
 80024d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80024d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80024dc:	4642      	mov	r2, r8
 80024de:	464b      	mov	r3, r9
 80024e0:	f04f 0000 	mov.w	r0, #0
 80024e4:	f04f 0100 	mov.w	r1, #0
 80024e8:	0159      	lsls	r1, r3, #5
 80024ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024ee:	0150      	lsls	r0, r2, #5
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	4641      	mov	r1, r8
 80024f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80024fa:	4649      	mov	r1, r9
 80024fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002500:	f04f 0200 	mov.w	r2, #0
 8002504:	f04f 0300 	mov.w	r3, #0
 8002508:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800250c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002510:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002514:	ebb2 040a 	subs.w	r4, r2, sl
 8002518:	eb63 050b 	sbc.w	r5, r3, fp
 800251c:	f04f 0200 	mov.w	r2, #0
 8002520:	f04f 0300 	mov.w	r3, #0
 8002524:	00eb      	lsls	r3, r5, #3
 8002526:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800252a:	00e2      	lsls	r2, r4, #3
 800252c:	4614      	mov	r4, r2
 800252e:	461d      	mov	r5, r3
 8002530:	4643      	mov	r3, r8
 8002532:	18e3      	adds	r3, r4, r3
 8002534:	603b      	str	r3, [r7, #0]
 8002536:	464b      	mov	r3, r9
 8002538:	eb45 0303 	adc.w	r3, r5, r3
 800253c:	607b      	str	r3, [r7, #4]
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	f04f 0300 	mov.w	r3, #0
 8002546:	e9d7 4500 	ldrd	r4, r5, [r7]
 800254a:	4629      	mov	r1, r5
 800254c:	028b      	lsls	r3, r1, #10
 800254e:	4621      	mov	r1, r4
 8002550:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002554:	4621      	mov	r1, r4
 8002556:	028a      	lsls	r2, r1, #10
 8002558:	4610      	mov	r0, r2
 800255a:	4619      	mov	r1, r3
 800255c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800255e:	2200      	movs	r2, #0
 8002560:	61bb      	str	r3, [r7, #24]
 8002562:	61fa      	str	r2, [r7, #28]
 8002564:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002568:	f7fd fe3a 	bl	80001e0 <__aeabi_uldivmod>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4613      	mov	r3, r2
 8002572:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002574:	4b0b      	ldr	r3, [pc, #44]	@ (80025a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	0c1b      	lsrs	r3, r3, #16
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	3301      	adds	r3, #1
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002584:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002586:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002588:	fbb2 f3f3 	udiv	r3, r2, r3
 800258c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800258e:	e002      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002590:	4b05      	ldr	r3, [pc, #20]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002592:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002594:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002596:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002598:	4618      	mov	r0, r3
 800259a:	3750      	adds	r7, #80	@ 0x50
 800259c:	46bd      	mov	sp, r7
 800259e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025a2:	bf00      	nop
 80025a4:	40023800 	.word	0x40023800
 80025a8:	00f42400 	.word	0x00f42400
 80025ac:	007a1200 	.word	0x007a1200

080025b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025b4:	4b03      	ldr	r3, [pc, #12]	@ (80025c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80025b6:	681b      	ldr	r3, [r3, #0]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	20000000 	.word	0x20000000

080025c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025cc:	f7ff fff0 	bl	80025b0 <HAL_RCC_GetHCLKFreq>
 80025d0:	4602      	mov	r2, r0
 80025d2:	4b05      	ldr	r3, [pc, #20]	@ (80025e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	0a9b      	lsrs	r3, r3, #10
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	4903      	ldr	r1, [pc, #12]	@ (80025ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80025de:	5ccb      	ldrb	r3, [r1, r3]
 80025e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40023800 	.word	0x40023800
 80025ec:	08005a30 	.word	0x08005a30

080025f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025f4:	f7ff ffdc 	bl	80025b0 <HAL_RCC_GetHCLKFreq>
 80025f8:	4602      	mov	r2, r0
 80025fa:	4b05      	ldr	r3, [pc, #20]	@ (8002610 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	0b5b      	lsrs	r3, r3, #13
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	4903      	ldr	r1, [pc, #12]	@ (8002614 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002606:	5ccb      	ldrb	r3, [r1, r3]
 8002608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800260c:	4618      	mov	r0, r3
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40023800 	.word	0x40023800
 8002614:	08005a30 	.word	0x08005a30

08002618 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	220f      	movs	r2, #15
 8002626:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002628:	4b12      	ldr	r3, [pc, #72]	@ (8002674 <HAL_RCC_GetClockConfig+0x5c>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 0203 	and.w	r2, r3, #3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002634:	4b0f      	ldr	r3, [pc, #60]	@ (8002674 <HAL_RCC_GetClockConfig+0x5c>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002640:	4b0c      	ldr	r3, [pc, #48]	@ (8002674 <HAL_RCC_GetClockConfig+0x5c>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800264c:	4b09      	ldr	r3, [pc, #36]	@ (8002674 <HAL_RCC_GetClockConfig+0x5c>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	08db      	lsrs	r3, r3, #3
 8002652:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800265a:	4b07      	ldr	r3, [pc, #28]	@ (8002678 <HAL_RCC_GetClockConfig+0x60>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0207 	and.w	r2, r3, #7
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	601a      	str	r2, [r3, #0]
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	40023800 	.word	0x40023800
 8002678:	40023c00 	.word	0x40023c00

0800267c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e041      	b.n	8002712 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d106      	bne.n	80026a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7fe fac8 	bl	8000c38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2202      	movs	r2, #2
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3304      	adds	r3, #4
 80026b8:	4619      	mov	r1, r3
 80026ba:	4610      	mov	r0, r2
 80026bc:	f000 fa70 	bl	8002ba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
	...

0800271c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b01      	cmp	r3, #1
 800272e:	d001      	beq.n	8002734 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e044      	b.n	80027be <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2202      	movs	r2, #2
 8002738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68da      	ldr	r2, [r3, #12]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 0201 	orr.w	r2, r2, #1
 800274a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a1e      	ldr	r2, [pc, #120]	@ (80027cc <HAL_TIM_Base_Start_IT+0xb0>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d018      	beq.n	8002788 <HAL_TIM_Base_Start_IT+0x6c>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800275e:	d013      	beq.n	8002788 <HAL_TIM_Base_Start_IT+0x6c>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a1a      	ldr	r2, [pc, #104]	@ (80027d0 <HAL_TIM_Base_Start_IT+0xb4>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d00e      	beq.n	8002788 <HAL_TIM_Base_Start_IT+0x6c>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a19      	ldr	r2, [pc, #100]	@ (80027d4 <HAL_TIM_Base_Start_IT+0xb8>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d009      	beq.n	8002788 <HAL_TIM_Base_Start_IT+0x6c>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a17      	ldr	r2, [pc, #92]	@ (80027d8 <HAL_TIM_Base_Start_IT+0xbc>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d004      	beq.n	8002788 <HAL_TIM_Base_Start_IT+0x6c>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a16      	ldr	r2, [pc, #88]	@ (80027dc <HAL_TIM_Base_Start_IT+0xc0>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d111      	bne.n	80027ac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 0307 	and.w	r3, r3, #7
 8002792:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2b06      	cmp	r3, #6
 8002798:	d010      	beq.n	80027bc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f042 0201 	orr.w	r2, r2, #1
 80027a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027aa:	e007      	b.n	80027bc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f042 0201 	orr.w	r2, r2, #1
 80027ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40010000 	.word	0x40010000
 80027d0:	40000400 	.word	0x40000400
 80027d4:	40000800 	.word	0x40000800
 80027d8:	40000c00 	.word	0x40000c00
 80027dc:	40014000 	.word	0x40014000

080027e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d020      	beq.n	8002844 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d01b      	beq.n	8002844 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f06f 0202 	mvn.w	r2, #2
 8002814:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f999 	bl	8002b62 <HAL_TIM_IC_CaptureCallback>
 8002830:	e005      	b.n	800283e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f98b 	bl	8002b4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 f99c 	bl	8002b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	f003 0304 	and.w	r3, r3, #4
 800284a:	2b00      	cmp	r3, #0
 800284c:	d020      	beq.n	8002890 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b00      	cmp	r3, #0
 8002856:	d01b      	beq.n	8002890 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f06f 0204 	mvn.w	r2, #4
 8002860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2202      	movs	r2, #2
 8002866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 f973 	bl	8002b62 <HAL_TIM_IC_CaptureCallback>
 800287c:	e005      	b.n	800288a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f965 	bl	8002b4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 f976 	bl	8002b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b00      	cmp	r3, #0
 8002898:	d020      	beq.n	80028dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f003 0308 	and.w	r3, r3, #8
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d01b      	beq.n	80028dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f06f 0208 	mvn.w	r2, #8
 80028ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2204      	movs	r2, #4
 80028b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 f94d 	bl	8002b62 <HAL_TIM_IC_CaptureCallback>
 80028c8:	e005      	b.n	80028d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 f93f 	bl	8002b4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 f950 	bl	8002b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	f003 0310 	and.w	r3, r3, #16
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d020      	beq.n	8002928 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f003 0310 	and.w	r3, r3, #16
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d01b      	beq.n	8002928 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f06f 0210 	mvn.w	r2, #16
 80028f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2208      	movs	r2, #8
 80028fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 f927 	bl	8002b62 <HAL_TIM_IC_CaptureCallback>
 8002914:	e005      	b.n	8002922 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f919 	bl	8002b4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 f92a 	bl	8002b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00c      	beq.n	800294c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b00      	cmp	r3, #0
 800293a:	d007      	beq.n	800294c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f06f 0201 	mvn.w	r2, #1
 8002944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7fe f82a 	bl	80009a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00c      	beq.n	8002970 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800295c:	2b00      	cmp	r3, #0
 800295e:	d007      	beq.n	8002970 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 fab0 	bl	8002ed0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00c      	beq.n	8002994 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002980:	2b00      	cmp	r3, #0
 8002982:	d007      	beq.n	8002994 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800298c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f8fb 	bl	8002b8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	f003 0320 	and.w	r3, r3, #32
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00c      	beq.n	80029b8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f003 0320 	and.w	r3, r3, #32
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d007      	beq.n	80029b8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f06f 0220 	mvn.w	r2, #32
 80029b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 fa82 	bl	8002ebc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029b8:	bf00      	nop
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029ca:	2300      	movs	r3, #0
 80029cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_TIM_ConfigClockSource+0x1c>
 80029d8:	2302      	movs	r3, #2
 80029da:	e0b4      	b.n	8002b46 <HAL_TIM_ConfigClockSource+0x186>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2202      	movs	r2, #2
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80029fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68ba      	ldr	r2, [r7, #8]
 8002a0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a14:	d03e      	beq.n	8002a94 <HAL_TIM_ConfigClockSource+0xd4>
 8002a16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a1a:	f200 8087 	bhi.w	8002b2c <HAL_TIM_ConfigClockSource+0x16c>
 8002a1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a22:	f000 8086 	beq.w	8002b32 <HAL_TIM_ConfigClockSource+0x172>
 8002a26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a2a:	d87f      	bhi.n	8002b2c <HAL_TIM_ConfigClockSource+0x16c>
 8002a2c:	2b70      	cmp	r3, #112	@ 0x70
 8002a2e:	d01a      	beq.n	8002a66 <HAL_TIM_ConfigClockSource+0xa6>
 8002a30:	2b70      	cmp	r3, #112	@ 0x70
 8002a32:	d87b      	bhi.n	8002b2c <HAL_TIM_ConfigClockSource+0x16c>
 8002a34:	2b60      	cmp	r3, #96	@ 0x60
 8002a36:	d050      	beq.n	8002ada <HAL_TIM_ConfigClockSource+0x11a>
 8002a38:	2b60      	cmp	r3, #96	@ 0x60
 8002a3a:	d877      	bhi.n	8002b2c <HAL_TIM_ConfigClockSource+0x16c>
 8002a3c:	2b50      	cmp	r3, #80	@ 0x50
 8002a3e:	d03c      	beq.n	8002aba <HAL_TIM_ConfigClockSource+0xfa>
 8002a40:	2b50      	cmp	r3, #80	@ 0x50
 8002a42:	d873      	bhi.n	8002b2c <HAL_TIM_ConfigClockSource+0x16c>
 8002a44:	2b40      	cmp	r3, #64	@ 0x40
 8002a46:	d058      	beq.n	8002afa <HAL_TIM_ConfigClockSource+0x13a>
 8002a48:	2b40      	cmp	r3, #64	@ 0x40
 8002a4a:	d86f      	bhi.n	8002b2c <HAL_TIM_ConfigClockSource+0x16c>
 8002a4c:	2b30      	cmp	r3, #48	@ 0x30
 8002a4e:	d064      	beq.n	8002b1a <HAL_TIM_ConfigClockSource+0x15a>
 8002a50:	2b30      	cmp	r3, #48	@ 0x30
 8002a52:	d86b      	bhi.n	8002b2c <HAL_TIM_ConfigClockSource+0x16c>
 8002a54:	2b20      	cmp	r3, #32
 8002a56:	d060      	beq.n	8002b1a <HAL_TIM_ConfigClockSource+0x15a>
 8002a58:	2b20      	cmp	r3, #32
 8002a5a:	d867      	bhi.n	8002b2c <HAL_TIM_ConfigClockSource+0x16c>
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d05c      	beq.n	8002b1a <HAL_TIM_ConfigClockSource+0x15a>
 8002a60:	2b10      	cmp	r3, #16
 8002a62:	d05a      	beq.n	8002b1a <HAL_TIM_ConfigClockSource+0x15a>
 8002a64:	e062      	b.n	8002b2c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a76:	f000 f993 	bl	8002da0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002a88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	609a      	str	r2, [r3, #8]
      break;
 8002a92:	e04f      	b.n	8002b34 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002aa4:	f000 f97c 	bl	8002da0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689a      	ldr	r2, [r3, #8]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ab6:	609a      	str	r2, [r3, #8]
      break;
 8002ab8:	e03c      	b.n	8002b34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	f000 f8f0 	bl	8002cac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2150      	movs	r1, #80	@ 0x50
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f000 f949 	bl	8002d6a <TIM_ITRx_SetConfig>
      break;
 8002ad8:	e02c      	b.n	8002b34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	f000 f90f 	bl	8002d0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2160      	movs	r1, #96	@ 0x60
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 f939 	bl	8002d6a <TIM_ITRx_SetConfig>
      break;
 8002af8:	e01c      	b.n	8002b34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b06:	461a      	mov	r2, r3
 8002b08:	f000 f8d0 	bl	8002cac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2140      	movs	r1, #64	@ 0x40
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 f929 	bl	8002d6a <TIM_ITRx_SetConfig>
      break;
 8002b18:	e00c      	b.n	8002b34 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4619      	mov	r1, r3
 8002b24:	4610      	mov	r0, r2
 8002b26:	f000 f920 	bl	8002d6a <TIM_ITRx_SetConfig>
      break;
 8002b2a:	e003      	b.n	8002b34 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b30:	e000      	b.n	8002b34 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
	...

08002ba0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a37      	ldr	r2, [pc, #220]	@ (8002c90 <TIM_Base_SetConfig+0xf0>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d00f      	beq.n	8002bd8 <TIM_Base_SetConfig+0x38>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bbe:	d00b      	beq.n	8002bd8 <TIM_Base_SetConfig+0x38>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a34      	ldr	r2, [pc, #208]	@ (8002c94 <TIM_Base_SetConfig+0xf4>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d007      	beq.n	8002bd8 <TIM_Base_SetConfig+0x38>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a33      	ldr	r2, [pc, #204]	@ (8002c98 <TIM_Base_SetConfig+0xf8>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d003      	beq.n	8002bd8 <TIM_Base_SetConfig+0x38>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a32      	ldr	r2, [pc, #200]	@ (8002c9c <TIM_Base_SetConfig+0xfc>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d108      	bne.n	8002bea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a28      	ldr	r2, [pc, #160]	@ (8002c90 <TIM_Base_SetConfig+0xf0>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d01b      	beq.n	8002c2a <TIM_Base_SetConfig+0x8a>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bf8:	d017      	beq.n	8002c2a <TIM_Base_SetConfig+0x8a>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a25      	ldr	r2, [pc, #148]	@ (8002c94 <TIM_Base_SetConfig+0xf4>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d013      	beq.n	8002c2a <TIM_Base_SetConfig+0x8a>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a24      	ldr	r2, [pc, #144]	@ (8002c98 <TIM_Base_SetConfig+0xf8>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d00f      	beq.n	8002c2a <TIM_Base_SetConfig+0x8a>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a23      	ldr	r2, [pc, #140]	@ (8002c9c <TIM_Base_SetConfig+0xfc>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d00b      	beq.n	8002c2a <TIM_Base_SetConfig+0x8a>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a22      	ldr	r2, [pc, #136]	@ (8002ca0 <TIM_Base_SetConfig+0x100>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d007      	beq.n	8002c2a <TIM_Base_SetConfig+0x8a>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a21      	ldr	r2, [pc, #132]	@ (8002ca4 <TIM_Base_SetConfig+0x104>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d003      	beq.n	8002c2a <TIM_Base_SetConfig+0x8a>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a20      	ldr	r2, [pc, #128]	@ (8002ca8 <TIM_Base_SetConfig+0x108>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d108      	bne.n	8002c3c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	689a      	ldr	r2, [r3, #8]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a0c      	ldr	r2, [pc, #48]	@ (8002c90 <TIM_Base_SetConfig+0xf0>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d103      	bne.n	8002c6a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	691a      	ldr	r2, [r3, #16]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f043 0204 	orr.w	r2, r3, #4
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	601a      	str	r2, [r3, #0]
}
 8002c82:	bf00      	nop
 8002c84:	3714      	adds	r7, #20
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	40010000 	.word	0x40010000
 8002c94:	40000400 	.word	0x40000400
 8002c98:	40000800 	.word	0x40000800
 8002c9c:	40000c00 	.word	0x40000c00
 8002ca0:	40014000 	.word	0x40014000
 8002ca4:	40014400 	.word	0x40014400
 8002ca8:	40014800 	.word	0x40014800

08002cac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b087      	sub	sp, #28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	f023 0201 	bic.w	r2, r3, #1
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002cd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	011b      	lsls	r3, r3, #4
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f023 030a 	bic.w	r3, r3, #10
 8002ce8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	621a      	str	r2, [r3, #32]
}
 8002cfe:	bf00      	nop
 8002d00:	371c      	adds	r7, #28
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b087      	sub	sp, #28
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	60f8      	str	r0, [r7, #12]
 8002d12:	60b9      	str	r1, [r7, #8]
 8002d14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	f023 0210 	bic.w	r2, r3, #16
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	031b      	lsls	r3, r3, #12
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002d46:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	011b      	lsls	r3, r3, #4
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	621a      	str	r2, [r3, #32]
}
 8002d5e:	bf00      	nop
 8002d60:	371c      	adds	r7, #28
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b085      	sub	sp, #20
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
 8002d72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	f043 0307 	orr.w	r3, r3, #7
 8002d8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	609a      	str	r2, [r3, #8]
}
 8002d94:	bf00      	nop
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b087      	sub	sp, #28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
 8002dac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002dba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	021a      	lsls	r2, r3, #8
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	609a      	str	r2, [r3, #8]
}
 8002dd4:	bf00      	nop
 8002dd6:	371c      	adds	r7, #28
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d101      	bne.n	8002df8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002df4:	2302      	movs	r3, #2
 8002df6:	e050      	b.n	8002e9a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a1c      	ldr	r2, [pc, #112]	@ (8002ea8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d018      	beq.n	8002e6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e44:	d013      	beq.n	8002e6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a18      	ldr	r2, [pc, #96]	@ (8002eac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d00e      	beq.n	8002e6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a16      	ldr	r2, [pc, #88]	@ (8002eb0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d009      	beq.n	8002e6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a15      	ldr	r2, [pc, #84]	@ (8002eb4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d004      	beq.n	8002e6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a13      	ldr	r2, [pc, #76]	@ (8002eb8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d10c      	bne.n	8002e88 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	40010000 	.word	0x40010000
 8002eac:	40000400 	.word	0x40000400
 8002eb0:	40000800 	.word	0x40000800
 8002eb4:	40000c00 	.word	0x40000c00
 8002eb8:	40014000 	.word	0x40014000

08002ebc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002ef2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ef6:	2b84      	cmp	r3, #132	@ 0x84
 8002ef8:	d005      	beq.n	8002f06 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002efa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	4413      	add	r3, r2
 8002f02:	3303      	adds	r3, #3
 8002f04:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002f06:	68fb      	ldr	r3, [r7, #12]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f1a:	f3ef 8305 	mrs	r3, IPSR
 8002f1e:	607b      	str	r3, [r7, #4]
  return(result);
 8002f20:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	bf14      	ite	ne
 8002f26:	2301      	movne	r3, #1
 8002f28:	2300      	moveq	r3, #0
 8002f2a:	b2db      	uxtb	r3, r3
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002f3c:	f001 fa9a 	bl	8004474 <vTaskStartScheduler>
  
  return osOK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002f46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f48:	b089      	sub	sp, #36	@ 0x24
 8002f4a:	af04      	add	r7, sp, #16
 8002f4c:	6078      	str	r0, [r7, #4]
 8002f4e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d020      	beq.n	8002f9a <osThreadCreate+0x54>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d01c      	beq.n	8002f9a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685c      	ldr	r4, [r3, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691e      	ldr	r6, [r3, #16]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff ffb6 	bl	8002ee4 <makeFreeRtosPriority>
 8002f78:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f82:	9202      	str	r2, [sp, #8]
 8002f84:	9301      	str	r3, [sp, #4]
 8002f86:	9100      	str	r1, [sp, #0]
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	4632      	mov	r2, r6
 8002f8c:	4629      	mov	r1, r5
 8002f8e:	4620      	mov	r0, r4
 8002f90:	f001 f88a 	bl	80040a8 <xTaskCreateStatic>
 8002f94:	4603      	mov	r3, r0
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	e01c      	b.n	8002fd4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685c      	ldr	r4, [r3, #4]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002fa6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff ff98 	bl	8002ee4 <makeFreeRtosPriority>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	f107 030c 	add.w	r3, r7, #12
 8002fba:	9301      	str	r3, [sp, #4]
 8002fbc:	9200      	str	r2, [sp, #0]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	4632      	mov	r2, r6
 8002fc2:	4629      	mov	r1, r5
 8002fc4:	4620      	mov	r0, r4
 8002fc6:	f001 f8cf 	bl	8004168 <xTaskCreate>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d001      	beq.n	8002fd4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	e000      	b.n	8002fd6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002fde <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b084      	sub	sp, #16
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <osDelay+0x16>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	e000      	b.n	8002ff6 <osDelay+0x18>
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f001 fa06 	bl	8004408 <vTaskDelay>
  
  return osOK;
 8002ffc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b086      	sub	sp, #24
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	3303      	adds	r3, #3
 8003014:	f023 0303 	bic.w	r3, r3, #3
 8003018:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 800301a:	2014      	movs	r0, #20
 800301c:	f002 f9a6 	bl	800536c <pvPortMalloc>
 8003020:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d046      	beq.n	80030b6 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2200      	movs	r2, #0
 800303a:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f002 f993 	bl	800536c <pvPortMalloc>
 8003046:	4602      	mov	r2, r0
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d02b      	beq.n	80030ac <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	fb02 f303 	mul.w	r3, r2, r3
 800305e:	4618      	mov	r0, r3
 8003060:	f002 f984 	bl	800536c <pvPortMalloc>
 8003064:	4602      	mov	r2, r0
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d011      	beq.n	8003096 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8003072:	2300      	movs	r3, #0
 8003074:	613b      	str	r3, [r7, #16]
 8003076:	e008      	b.n	800308a <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	4413      	add	r3, r2
 8003080:	2200      	movs	r2, #0
 8003082:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	3301      	adds	r3, #1
 8003088:	613b      	str	r3, [r7, #16]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	429a      	cmp	r2, r3
 8003092:	d3f1      	bcc.n	8003078 <osPoolCreate+0x72>
 8003094:	e00f      	b.n	80030b6 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	4618      	mov	r0, r3
 800309c:	f002 fa34 	bl	8005508 <vPortFree>
        vPortFree(thePool);
 80030a0:	6978      	ldr	r0, [r7, #20]
 80030a2:	f002 fa31 	bl	8005508 <vPortFree>
        thePool = NULL;
 80030a6:	2300      	movs	r3, #0
 80030a8:	617b      	str	r3, [r7, #20]
 80030aa:	e004      	b.n	80030b6 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 80030ac:	6978      	ldr	r0, [r7, #20]
 80030ae:	f002 fa2b 	bl	8005508 <vPortFree>
      thePool = NULL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 80030b6:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b08a      	sub	sp, #40	@ 0x28
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 80030c8:	2300      	movs	r3, #0
 80030ca:	627b      	str	r3, [r7, #36]	@ 0x24
  void *p = NULL;
 80030cc:	2300      	movs	r3, #0
 80030ce:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 80030d0:	f7ff ff20 	bl	8002f14 <inHandlerMode>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00e      	beq.n	80030f8 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80030da:	f3ef 8211 	mrs	r2, BASEPRI
 80030de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030e2:	f383 8811 	msr	BASEPRI, r3
 80030e6:	f3bf 8f6f 	isb	sy
 80030ea:	f3bf 8f4f 	dsb	sy
 80030ee:	617a      	str	r2, [r7, #20]
 80030f0:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80030f2:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 80030f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80030f6:	e001      	b.n	80030fc <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 80030f8:	f002 f816 	bl	8005128 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 80030fc:	2300      	movs	r3, #0
 80030fe:	61fb      	str	r3, [r7, #28]
 8003100:	e029      	b.n	8003156 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	691a      	ldr	r2, [r3, #16]
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	4413      	add	r3, r2
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6892      	ldr	r2, [r2, #8]
 800310e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003112:	fb01 f202 	mul.w	r2, r1, r2
 8003116:	1a9b      	subs	r3, r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	4413      	add	r3, r2
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d113      	bne.n	8003150 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	4413      	add	r3, r2
 8003130:	2201      	movs	r2, #1
 8003132:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4619      	mov	r1, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	fb02 f303 	mul.w	r3, r2, r3
 8003144:	440b      	add	r3, r1
 8003146:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	611a      	str	r2, [r3, #16]
      break;
 800314e:	e007      	b.n	8003160 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	3301      	adds	r3, #1
 8003154:	61fb      	str	r3, [r7, #28]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	69fa      	ldr	r2, [r7, #28]
 800315c:	429a      	cmp	r2, r3
 800315e:	d3d0      	bcc.n	8003102 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8003160:	f7ff fed8 	bl	8002f14 <inHandlerMode>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d005      	beq.n	8003176 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 800316a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003174:	e001      	b.n	800317a <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8003176:	f002 f809 	bl	800518c <vPortExitCritical>
  }
  
  return p;
 800317a:	6a3b      	ldr	r3, [r7, #32]
}
 800317c:	4618      	mov	r0, r3
 800317e:	3728      	adds	r7, #40	@ 0x28
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8003184:	b590      	push	{r4, r7, lr}
 8003186:	b085      	sub	sp, #20
 8003188:	af02      	add	r7, sp, #8
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d011      	beq.n	80031ba <osMessageCreate+0x36>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00d      	beq.n	80031ba <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6818      	ldr	r0, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6859      	ldr	r1, [r3, #4]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	689a      	ldr	r2, [r3, #8]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	2400      	movs	r4, #0
 80031b0:	9400      	str	r4, [sp, #0]
 80031b2:	f000 fa8d 	bl	80036d0 <xQueueGenericCreateStatic>
 80031b6:	4603      	mov	r3, r0
 80031b8:	e008      	b.n	80031cc <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6818      	ldr	r0, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	4619      	mov	r1, r3
 80031c6:	f000 fb00 	bl	80037ca <xQueueGenericCreate>
 80031ca:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd90      	pop	{r4, r7, pc}

080031d4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80031e0:	2300      	movs	r3, #0
 80031e2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <osMessagePut+0x1e>
    ticks = 1;
 80031ee:	2301      	movs	r3, #1
 80031f0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80031f2:	f7ff fe8f 	bl	8002f14 <inHandlerMode>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d018      	beq.n	800322e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80031fc:	f107 0210 	add.w	r2, r7, #16
 8003200:	f107 0108 	add.w	r1, r7, #8
 8003204:	2300      	movs	r3, #0
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 fc3c 	bl	8003a84 <xQueueGenericSendFromISR>
 800320c:	4603      	mov	r3, r0
 800320e:	2b01      	cmp	r3, #1
 8003210:	d001      	beq.n	8003216 <osMessagePut+0x42>
      return osErrorOS;
 8003212:	23ff      	movs	r3, #255	@ 0xff
 8003214:	e018      	b.n	8003248 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d014      	beq.n	8003246 <osMessagePut+0x72>
 800321c:	4b0c      	ldr	r3, [pc, #48]	@ (8003250 <osMessagePut+0x7c>)
 800321e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	f3bf 8f4f 	dsb	sy
 8003228:	f3bf 8f6f 	isb	sy
 800322c:	e00b      	b.n	8003246 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800322e:	f107 0108 	add.w	r1, r7, #8
 8003232:	2300      	movs	r3, #0
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f000 fb22 	bl	8003880 <xQueueGenericSend>
 800323c:	4603      	mov	r3, r0
 800323e:	2b01      	cmp	r3, #1
 8003240:	d001      	beq.n	8003246 <osMessagePut+0x72>
      return osErrorOS;
 8003242:	23ff      	movs	r3, #255	@ 0xff
 8003244:	e000      	b.n	8003248 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	e000ed04 	.word	0xe000ed04

08003254 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8003254:	b590      	push	{r4, r7, lr}
 8003256:	b08b      	sub	sp, #44	@ 0x2c
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8003264:	2300      	movs	r3, #0
 8003266:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10a      	bne.n	8003284 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800326e:	2380      	movs	r3, #128	@ 0x80
 8003270:	617b      	str	r3, [r7, #20]
    return event;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	461c      	mov	r4, r3
 8003276:	f107 0314 	add.w	r3, r7, #20
 800327a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800327e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003282:	e054      	b.n	800332e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8003284:	2300      	movs	r3, #0
 8003286:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8003288:	2300      	movs	r3, #0
 800328a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003292:	d103      	bne.n	800329c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8003294:	f04f 33ff 	mov.w	r3, #4294967295
 8003298:	627b      	str	r3, [r7, #36]	@ 0x24
 800329a:	e009      	b.n	80032b0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d006      	beq.n	80032b0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 80032a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <osMessageGet+0x5c>
      ticks = 1;
 80032ac:	2301      	movs	r3, #1
 80032ae:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 80032b0:	f7ff fe30 	bl	8002f14 <inHandlerMode>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d01c      	beq.n	80032f4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80032ba:	f107 0220 	add.w	r2, r7, #32
 80032be:	f107 0314 	add.w	r3, r7, #20
 80032c2:	3304      	adds	r3, #4
 80032c4:	4619      	mov	r1, r3
 80032c6:	68b8      	ldr	r0, [r7, #8]
 80032c8:	f000 fd5c 	bl	8003d84 <xQueueReceiveFromISR>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d102      	bne.n	80032d8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80032d2:	2310      	movs	r3, #16
 80032d4:	617b      	str	r3, [r7, #20]
 80032d6:	e001      	b.n	80032dc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80032d8:	2300      	movs	r3, #0
 80032da:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d01d      	beq.n	800331e <osMessageGet+0xca>
 80032e2:	4b15      	ldr	r3, [pc, #84]	@ (8003338 <osMessageGet+0xe4>)
 80032e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	f3bf 8f4f 	dsb	sy
 80032ee:	f3bf 8f6f 	isb	sy
 80032f2:	e014      	b.n	800331e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80032f4:	f107 0314 	add.w	r3, r7, #20
 80032f8:	3304      	adds	r3, #4
 80032fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032fc:	4619      	mov	r1, r3
 80032fe:	68b8      	ldr	r0, [r7, #8]
 8003300:	f000 fc5e 	bl	8003bc0 <xQueueReceive>
 8003304:	4603      	mov	r3, r0
 8003306:	2b01      	cmp	r3, #1
 8003308:	d102      	bne.n	8003310 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800330a:	2310      	movs	r3, #16
 800330c:	617b      	str	r3, [r7, #20]
 800330e:	e006      	b.n	800331e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8003310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <osMessageGet+0xc6>
 8003316:	2300      	movs	r3, #0
 8003318:	e000      	b.n	800331c <osMessageGet+0xc8>
 800331a:	2340      	movs	r3, #64	@ 0x40
 800331c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	461c      	mov	r4, r3
 8003322:	f107 0314 	add.w	r3, r7, #20
 8003326:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800332a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	372c      	adds	r7, #44	@ 0x2c
 8003332:	46bd      	mov	sp, r7
 8003334:	bd90      	pop	{r4, r7, pc}
 8003336:	bf00      	nop
 8003338:	e000ed04 	.word	0xe000ed04

0800333c <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 800333c:	b590      	push	{r4, r7, lr}
 800333e:	b087      	sub	sp, #28
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	613b      	str	r3, [r7, #16]
 8003352:	2300      	movs	r3, #0
 8003354:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689c      	ldr	r4, [r3, #8]
 800335a:	200c      	movs	r0, #12
 800335c:	f002 f806 	bl	800536c <pvPortMalloc>
 8003360:	4603      	mov	r3, r0
 8003362:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <osMailCreate+0x36>
    return NULL;
 800336e:	2300      	movs	r3, #0
 8003370:	e038      	b.n	80033e4 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6818      	ldr	r0, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	681c      	ldr	r4, [r3, #0]
 8003386:	2200      	movs	r2, #0
 8003388:	2104      	movs	r1, #4
 800338a:	f000 fa1e 	bl	80037ca <xQueueGenericCreate>
 800338e:	4603      	mov	r3, r0
 8003390:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d107      	bne.n	80033ae <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f002 f8af 	bl	8005508 <vPortFree>
    return NULL;
 80033aa:	2300      	movs	r3, #0
 80033ac:	e01a      	b.n	80033e4 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	681c      	ldr	r4, [r3, #0]
 80033b4:	f107 030c 	add.w	r3, r7, #12
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff fe24 	bl	8003006 <osPoolCreate>
 80033be:	4603      	mov	r3, r0
 80033c0:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d107      	bne.n	80033de <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f002 f897 	bl	8005508 <vPortFree>
    return NULL;
 80033da:	2300      	movs	r3, #0
 80033dc:	e002      	b.n	80033e4 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	371c      	adds	r7, #28
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd90      	pop	{r4, r7, pc}

080033ec <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <osMailAlloc+0x14>
    return NULL;
 80033fc:	2300      	movs	r3, #0
 80033fe:	e006      	b.n	800340e <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff fe5b 	bl	80030c0 <osPoolAlloc>
 800340a:	60f8      	str	r0, [r7, #12]
  
  return p;
 800340c:	68fb      	ldr	r3, [r7, #12]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <osMailPut+0x14>
    return osErrorParameter;
 8003428:	2380      	movs	r3, #128	@ 0x80
 800342a:	e02c      	b.n	8003486 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 800342c:	2300      	movs	r3, #0
 800342e:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8003430:	f7ff fd70 	bl	8002f14 <inHandlerMode>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d018      	beq.n	800346c <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6858      	ldr	r0, [r3, #4]
 800343e:	f107 020c 	add.w	r2, r7, #12
 8003442:	4639      	mov	r1, r7
 8003444:	2300      	movs	r3, #0
 8003446:	f000 fb1d 	bl	8003a84 <xQueueGenericSendFromISR>
 800344a:	4603      	mov	r3, r0
 800344c:	2b01      	cmp	r3, #1
 800344e:	d001      	beq.n	8003454 <osMailPut+0x3c>
      return osErrorOS;
 8003450:	23ff      	movs	r3, #255	@ 0xff
 8003452:	e018      	b.n	8003486 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d014      	beq.n	8003484 <osMailPut+0x6c>
 800345a:	4b0d      	ldr	r3, [pc, #52]	@ (8003490 <osMailPut+0x78>)
 800345c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003460:	601a      	str	r2, [r3, #0]
 8003462:	f3bf 8f4f 	dsb	sy
 8003466:	f3bf 8f6f 	isb	sy
 800346a:	e00b      	b.n	8003484 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6858      	ldr	r0, [r3, #4]
 8003470:	4639      	mov	r1, r7
 8003472:	2300      	movs	r3, #0
 8003474:	2200      	movs	r2, #0
 8003476:	f000 fa03 	bl	8003880 <xQueueGenericSend>
 800347a:	4603      	mov	r3, r0
 800347c:	2b01      	cmp	r3, #1
 800347e:	d001      	beq.n	8003484 <osMailPut+0x6c>
      return osErrorOS;
 8003480:	23ff      	movs	r3, #255	@ 0xff
 8003482:	e000      	b.n	8003486 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	e000ed04 	.word	0xe000ed04

08003494 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f103 0208 	add.w	r2, r3, #8
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f04f 32ff 	mov.w	r2, #4294967295
 80034ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f103 0208 	add.w	r2, r3, #8
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f103 0208 	add.w	r2, r3, #8
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034ee:	b480      	push	{r7}
 80034f0:	b085      	sub	sp, #20
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	1c5a      	adds	r2, r3, #1
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	601a      	str	r2, [r3, #0]
}
 800352a:	bf00      	nop
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003536:	b480      	push	{r7}
 8003538:	b085      	sub	sp, #20
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
 800353e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354c:	d103      	bne.n	8003556 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	e00c      	b.n	8003570 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	3308      	adds	r3, #8
 800355a:	60fb      	str	r3, [r7, #12]
 800355c:	e002      	b.n	8003564 <vListInsert+0x2e>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	429a      	cmp	r2, r3
 800356e:	d2f6      	bcs.n	800355e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	1c5a      	adds	r2, r3, #1
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	601a      	str	r2, [r3, #0]
}
 800359c:	bf00      	nop
 800359e:	3714      	adds	r7, #20
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6892      	ldr	r2, [r2, #8]
 80035be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6852      	ldr	r2, [r2, #4]
 80035c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d103      	bne.n	80035dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	1e5a      	subs	r2, r3, #1
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d10b      	bne.n	8003628 <xQueueGenericReset+0x2c>
	__asm volatile
 8003610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003614:	f383 8811 	msr	BASEPRI, r3
 8003618:	f3bf 8f6f 	isb	sy
 800361c:	f3bf 8f4f 	dsb	sy
 8003620:	60bb      	str	r3, [r7, #8]
}
 8003622:	bf00      	nop
 8003624:	bf00      	nop
 8003626:	e7fd      	b.n	8003624 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003628:	f001 fd7e 	bl	8005128 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003634:	68f9      	ldr	r1, [r7, #12]
 8003636:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003638:	fb01 f303 	mul.w	r3, r1, r3
 800363c:	441a      	add	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003658:	3b01      	subs	r3, #1
 800365a:	68f9      	ldr	r1, [r7, #12]
 800365c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800365e:	fb01 f303 	mul.w	r3, r1, r3
 8003662:	441a      	add	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	22ff      	movs	r2, #255	@ 0xff
 800366c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	22ff      	movs	r2, #255	@ 0xff
 8003674:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d114      	bne.n	80036a8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d01a      	beq.n	80036bc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	3310      	adds	r3, #16
 800368a:	4618      	mov	r0, r3
 800368c:	f001 f94c 	bl	8004928 <xTaskRemoveFromEventList>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d012      	beq.n	80036bc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003696:	4b0d      	ldr	r3, [pc, #52]	@ (80036cc <xQueueGenericReset+0xd0>)
 8003698:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800369c:	601a      	str	r2, [r3, #0]
 800369e:	f3bf 8f4f 	dsb	sy
 80036a2:	f3bf 8f6f 	isb	sy
 80036a6:	e009      	b.n	80036bc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	3310      	adds	r3, #16
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff fef1 	bl	8003494 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	3324      	adds	r3, #36	@ 0x24
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7ff feec 	bl	8003494 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80036bc:	f001 fd66 	bl	800518c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80036c0:	2301      	movs	r3, #1
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	e000ed04 	.word	0xe000ed04

080036d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08e      	sub	sp, #56	@ 0x38
 80036d4:	af02      	add	r7, sp, #8
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
 80036dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10b      	bne.n	80036fc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80036e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036e8:	f383 8811 	msr	BASEPRI, r3
 80036ec:	f3bf 8f6f 	isb	sy
 80036f0:	f3bf 8f4f 	dsb	sy
 80036f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80036f6:	bf00      	nop
 80036f8:	bf00      	nop
 80036fa:	e7fd      	b.n	80036f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10b      	bne.n	800371a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003706:	f383 8811 	msr	BASEPRI, r3
 800370a:	f3bf 8f6f 	isb	sy
 800370e:	f3bf 8f4f 	dsb	sy
 8003712:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003714:	bf00      	nop
 8003716:	bf00      	nop
 8003718:	e7fd      	b.n	8003716 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d002      	beq.n	8003726 <xQueueGenericCreateStatic+0x56>
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <xQueueGenericCreateStatic+0x5a>
 8003726:	2301      	movs	r3, #1
 8003728:	e000      	b.n	800372c <xQueueGenericCreateStatic+0x5c>
 800372a:	2300      	movs	r3, #0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10b      	bne.n	8003748 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003734:	f383 8811 	msr	BASEPRI, r3
 8003738:	f3bf 8f6f 	isb	sy
 800373c:	f3bf 8f4f 	dsb	sy
 8003740:	623b      	str	r3, [r7, #32]
}
 8003742:	bf00      	nop
 8003744:	bf00      	nop
 8003746:	e7fd      	b.n	8003744 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d102      	bne.n	8003754 <xQueueGenericCreateStatic+0x84>
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <xQueueGenericCreateStatic+0x88>
 8003754:	2301      	movs	r3, #1
 8003756:	e000      	b.n	800375a <xQueueGenericCreateStatic+0x8a>
 8003758:	2300      	movs	r3, #0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10b      	bne.n	8003776 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800375e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003762:	f383 8811 	msr	BASEPRI, r3
 8003766:	f3bf 8f6f 	isb	sy
 800376a:	f3bf 8f4f 	dsb	sy
 800376e:	61fb      	str	r3, [r7, #28]
}
 8003770:	bf00      	nop
 8003772:	bf00      	nop
 8003774:	e7fd      	b.n	8003772 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003776:	2348      	movs	r3, #72	@ 0x48
 8003778:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2b48      	cmp	r3, #72	@ 0x48
 800377e:	d00b      	beq.n	8003798 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003784:	f383 8811 	msr	BASEPRI, r3
 8003788:	f3bf 8f6f 	isb	sy
 800378c:	f3bf 8f4f 	dsb	sy
 8003790:	61bb      	str	r3, [r7, #24]
}
 8003792:	bf00      	nop
 8003794:	bf00      	nop
 8003796:	e7fd      	b.n	8003794 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003798:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800379e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00d      	beq.n	80037c0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80037a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80037ac:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80037b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	4613      	mov	r3, r2
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	68b9      	ldr	r1, [r7, #8]
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 f840 	bl	8003840 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80037c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3730      	adds	r7, #48	@ 0x30
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b08a      	sub	sp, #40	@ 0x28
 80037ce:	af02      	add	r7, sp, #8
 80037d0:	60f8      	str	r0, [r7, #12]
 80037d2:	60b9      	str	r1, [r7, #8]
 80037d4:	4613      	mov	r3, r2
 80037d6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10b      	bne.n	80037f6 <xQueueGenericCreate+0x2c>
	__asm volatile
 80037de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037e2:	f383 8811 	msr	BASEPRI, r3
 80037e6:	f3bf 8f6f 	isb	sy
 80037ea:	f3bf 8f4f 	dsb	sy
 80037ee:	613b      	str	r3, [r7, #16]
}
 80037f0:	bf00      	nop
 80037f2:	bf00      	nop
 80037f4:	e7fd      	b.n	80037f2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	fb02 f303 	mul.w	r3, r2, r3
 80037fe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	3348      	adds	r3, #72	@ 0x48
 8003804:	4618      	mov	r0, r3
 8003806:	f001 fdb1 	bl	800536c <pvPortMalloc>
 800380a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d011      	beq.n	8003836 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	3348      	adds	r3, #72	@ 0x48
 800381a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003824:	79fa      	ldrb	r2, [r7, #7]
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	4613      	mov	r3, r2
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	68b9      	ldr	r1, [r7, #8]
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f000 f805 	bl	8003840 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003836:	69bb      	ldr	r3, [r7, #24]
	}
 8003838:	4618      	mov	r0, r3
 800383a:	3720      	adds	r7, #32
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
 800384c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d103      	bne.n	800385c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	e002      	b.n	8003862 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800386e:	2101      	movs	r1, #1
 8003870:	69b8      	ldr	r0, [r7, #24]
 8003872:	f7ff fec3 	bl	80035fc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003876:	bf00      	nop
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
	...

08003880 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b08e      	sub	sp, #56	@ 0x38
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
 800388c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800388e:	2300      	movs	r3, #0
 8003890:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10b      	bne.n	80038b4 <xQueueGenericSend+0x34>
	__asm volatile
 800389c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038a0:	f383 8811 	msr	BASEPRI, r3
 80038a4:	f3bf 8f6f 	isb	sy
 80038a8:	f3bf 8f4f 	dsb	sy
 80038ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80038ae:	bf00      	nop
 80038b0:	bf00      	nop
 80038b2:	e7fd      	b.n	80038b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d103      	bne.n	80038c2 <xQueueGenericSend+0x42>
 80038ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <xQueueGenericSend+0x46>
 80038c2:	2301      	movs	r3, #1
 80038c4:	e000      	b.n	80038c8 <xQueueGenericSend+0x48>
 80038c6:	2300      	movs	r3, #0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10b      	bne.n	80038e4 <xQueueGenericSend+0x64>
	__asm volatile
 80038cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038d0:	f383 8811 	msr	BASEPRI, r3
 80038d4:	f3bf 8f6f 	isb	sy
 80038d8:	f3bf 8f4f 	dsb	sy
 80038dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80038de:	bf00      	nop
 80038e0:	bf00      	nop
 80038e2:	e7fd      	b.n	80038e0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d103      	bne.n	80038f2 <xQueueGenericSend+0x72>
 80038ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d101      	bne.n	80038f6 <xQueueGenericSend+0x76>
 80038f2:	2301      	movs	r3, #1
 80038f4:	e000      	b.n	80038f8 <xQueueGenericSend+0x78>
 80038f6:	2300      	movs	r3, #0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10b      	bne.n	8003914 <xQueueGenericSend+0x94>
	__asm volatile
 80038fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003900:	f383 8811 	msr	BASEPRI, r3
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	f3bf 8f4f 	dsb	sy
 800390c:	623b      	str	r3, [r7, #32]
}
 800390e:	bf00      	nop
 8003910:	bf00      	nop
 8003912:	e7fd      	b.n	8003910 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003914:	f001 f9ce 	bl	8004cb4 <xTaskGetSchedulerState>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d102      	bne.n	8003924 <xQueueGenericSend+0xa4>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <xQueueGenericSend+0xa8>
 8003924:	2301      	movs	r3, #1
 8003926:	e000      	b.n	800392a <xQueueGenericSend+0xaa>
 8003928:	2300      	movs	r3, #0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10b      	bne.n	8003946 <xQueueGenericSend+0xc6>
	__asm volatile
 800392e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003932:	f383 8811 	msr	BASEPRI, r3
 8003936:	f3bf 8f6f 	isb	sy
 800393a:	f3bf 8f4f 	dsb	sy
 800393e:	61fb      	str	r3, [r7, #28]
}
 8003940:	bf00      	nop
 8003942:	bf00      	nop
 8003944:	e7fd      	b.n	8003942 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003946:	f001 fbef 	bl	8005128 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800394a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800394c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800394e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003952:	429a      	cmp	r2, r3
 8003954:	d302      	bcc.n	800395c <xQueueGenericSend+0xdc>
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2b02      	cmp	r3, #2
 800395a:	d129      	bne.n	80039b0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	68b9      	ldr	r1, [r7, #8]
 8003960:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003962:	f000 fa91 	bl	8003e88 <prvCopyDataToQueue>
 8003966:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800396a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396c:	2b00      	cmp	r3, #0
 800396e:	d010      	beq.n	8003992 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003972:	3324      	adds	r3, #36	@ 0x24
 8003974:	4618      	mov	r0, r3
 8003976:	f000 ffd7 	bl	8004928 <xTaskRemoveFromEventList>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d013      	beq.n	80039a8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003980:	4b3f      	ldr	r3, [pc, #252]	@ (8003a80 <xQueueGenericSend+0x200>)
 8003982:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	f3bf 8f4f 	dsb	sy
 800398c:	f3bf 8f6f 	isb	sy
 8003990:	e00a      	b.n	80039a8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003994:	2b00      	cmp	r3, #0
 8003996:	d007      	beq.n	80039a8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003998:	4b39      	ldr	r3, [pc, #228]	@ (8003a80 <xQueueGenericSend+0x200>)
 800399a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	f3bf 8f4f 	dsb	sy
 80039a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80039a8:	f001 fbf0 	bl	800518c <vPortExitCritical>
				return pdPASS;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e063      	b.n	8003a78 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d103      	bne.n	80039be <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039b6:	f001 fbe9 	bl	800518c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80039ba:	2300      	movs	r3, #0
 80039bc:	e05c      	b.n	8003a78 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d106      	bne.n	80039d2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039c4:	f107 0314 	add.w	r3, r7, #20
 80039c8:	4618      	mov	r0, r3
 80039ca:	f001 f811 	bl	80049f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039ce:	2301      	movs	r3, #1
 80039d0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039d2:	f001 fbdb 	bl	800518c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039d6:	f000 fdb7 	bl	8004548 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039da:	f001 fba5 	bl	8005128 <vPortEnterCritical>
 80039de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80039e4:	b25b      	sxtb	r3, r3
 80039e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ea:	d103      	bne.n	80039f4 <xQueueGenericSend+0x174>
 80039ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80039fa:	b25b      	sxtb	r3, r3
 80039fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a00:	d103      	bne.n	8003a0a <xQueueGenericSend+0x18a>
 8003a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a0a:	f001 fbbf 	bl	800518c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a0e:	1d3a      	adds	r2, r7, #4
 8003a10:	f107 0314 	add.w	r3, r7, #20
 8003a14:	4611      	mov	r1, r2
 8003a16:	4618      	mov	r0, r3
 8003a18:	f001 f800 	bl	8004a1c <xTaskCheckForTimeOut>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d124      	bne.n	8003a6c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a22:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a24:	f000 fb28 	bl	8004078 <prvIsQueueFull>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d018      	beq.n	8003a60 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a30:	3310      	adds	r3, #16
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	4611      	mov	r1, r2
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 ff50 	bl	80048dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a3e:	f000 fab3 	bl	8003fa8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a42:	f000 fd8f 	bl	8004564 <xTaskResumeAll>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f47f af7c 	bne.w	8003946 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8003a80 <xQueueGenericSend+0x200>)
 8003a50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a54:	601a      	str	r2, [r3, #0]
 8003a56:	f3bf 8f4f 	dsb	sy
 8003a5a:	f3bf 8f6f 	isb	sy
 8003a5e:	e772      	b.n	8003946 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003a60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a62:	f000 faa1 	bl	8003fa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a66:	f000 fd7d 	bl	8004564 <xTaskResumeAll>
 8003a6a:	e76c      	b.n	8003946 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003a6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a6e:	f000 fa9b 	bl	8003fa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a72:	f000 fd77 	bl	8004564 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003a76:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3738      	adds	r7, #56	@ 0x38
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	e000ed04 	.word	0xe000ed04

08003a84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b090      	sub	sp, #64	@ 0x40
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
 8003a90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10b      	bne.n	8003ab4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aa0:	f383 8811 	msr	BASEPRI, r3
 8003aa4:	f3bf 8f6f 	isb	sy
 8003aa8:	f3bf 8f4f 	dsb	sy
 8003aac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003aae:	bf00      	nop
 8003ab0:	bf00      	nop
 8003ab2:	e7fd      	b.n	8003ab0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d103      	bne.n	8003ac2 <xQueueGenericSendFromISR+0x3e>
 8003aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <xQueueGenericSendFromISR+0x42>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e000      	b.n	8003ac8 <xQueueGenericSendFromISR+0x44>
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10b      	bne.n	8003ae4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ad0:	f383 8811 	msr	BASEPRI, r3
 8003ad4:	f3bf 8f6f 	isb	sy
 8003ad8:	f3bf 8f4f 	dsb	sy
 8003adc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003ade:	bf00      	nop
 8003ae0:	bf00      	nop
 8003ae2:	e7fd      	b.n	8003ae0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d103      	bne.n	8003af2 <xQueueGenericSendFromISR+0x6e>
 8003aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d101      	bne.n	8003af6 <xQueueGenericSendFromISR+0x72>
 8003af2:	2301      	movs	r3, #1
 8003af4:	e000      	b.n	8003af8 <xQueueGenericSendFromISR+0x74>
 8003af6:	2300      	movs	r3, #0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10b      	bne.n	8003b14 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b00:	f383 8811 	msr	BASEPRI, r3
 8003b04:	f3bf 8f6f 	isb	sy
 8003b08:	f3bf 8f4f 	dsb	sy
 8003b0c:	623b      	str	r3, [r7, #32]
}
 8003b0e:	bf00      	nop
 8003b10:	bf00      	nop
 8003b12:	e7fd      	b.n	8003b10 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b14:	f001 fbe8 	bl	80052e8 <vPortValidateInterruptPriority>
	__asm volatile
 8003b18:	f3ef 8211 	mrs	r2, BASEPRI
 8003b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b20:	f383 8811 	msr	BASEPRI, r3
 8003b24:	f3bf 8f6f 	isb	sy
 8003b28:	f3bf 8f4f 	dsb	sy
 8003b2c:	61fa      	str	r2, [r7, #28]
 8003b2e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8003b30:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b32:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d302      	bcc.n	8003b46 <xQueueGenericSendFromISR+0xc2>
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d12f      	bne.n	8003ba6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b48:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b4c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	68b9      	ldr	r1, [r7, #8]
 8003b5a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003b5c:	f000 f994 	bl	8003e88 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b60:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b68:	d112      	bne.n	8003b90 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d016      	beq.n	8003ba0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b74:	3324      	adds	r3, #36	@ 0x24
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 fed6 	bl	8004928 <xTaskRemoveFromEventList>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00e      	beq.n	8003ba0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00b      	beq.n	8003ba0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	e007      	b.n	8003ba0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003b90:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003b94:	3301      	adds	r3, #1
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	b25a      	sxtb	r2, r3
 8003b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003ba4:	e001      	b.n	8003baa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bac:	617b      	str	r3, [r7, #20]
	__asm volatile
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f383 8811 	msr	BASEPRI, r3
}
 8003bb4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003bb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3740      	adds	r7, #64	@ 0x40
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08c      	sub	sp, #48	@ 0x30
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10b      	bne.n	8003bf2 <xQueueReceive+0x32>
	__asm volatile
 8003bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bde:	f383 8811 	msr	BASEPRI, r3
 8003be2:	f3bf 8f6f 	isb	sy
 8003be6:	f3bf 8f4f 	dsb	sy
 8003bea:	623b      	str	r3, [r7, #32]
}
 8003bec:	bf00      	nop
 8003bee:	bf00      	nop
 8003bf0:	e7fd      	b.n	8003bee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d103      	bne.n	8003c00 <xQueueReceive+0x40>
 8003bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d101      	bne.n	8003c04 <xQueueReceive+0x44>
 8003c00:	2301      	movs	r3, #1
 8003c02:	e000      	b.n	8003c06 <xQueueReceive+0x46>
 8003c04:	2300      	movs	r3, #0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10b      	bne.n	8003c22 <xQueueReceive+0x62>
	__asm volatile
 8003c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c0e:	f383 8811 	msr	BASEPRI, r3
 8003c12:	f3bf 8f6f 	isb	sy
 8003c16:	f3bf 8f4f 	dsb	sy
 8003c1a:	61fb      	str	r3, [r7, #28]
}
 8003c1c:	bf00      	nop
 8003c1e:	bf00      	nop
 8003c20:	e7fd      	b.n	8003c1e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c22:	f001 f847 	bl	8004cb4 <xTaskGetSchedulerState>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d102      	bne.n	8003c32 <xQueueReceive+0x72>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <xQueueReceive+0x76>
 8003c32:	2301      	movs	r3, #1
 8003c34:	e000      	b.n	8003c38 <xQueueReceive+0x78>
 8003c36:	2300      	movs	r3, #0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10b      	bne.n	8003c54 <xQueueReceive+0x94>
	__asm volatile
 8003c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c40:	f383 8811 	msr	BASEPRI, r3
 8003c44:	f3bf 8f6f 	isb	sy
 8003c48:	f3bf 8f4f 	dsb	sy
 8003c4c:	61bb      	str	r3, [r7, #24]
}
 8003c4e:	bf00      	nop
 8003c50:	bf00      	nop
 8003c52:	e7fd      	b.n	8003c50 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c54:	f001 fa68 	bl	8005128 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c5c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d01f      	beq.n	8003ca4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c64:	68b9      	ldr	r1, [r7, #8]
 8003c66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c68:	f000 f978 	bl	8003f5c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6e:	1e5a      	subs	r2, r3, #1
 8003c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c72:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00f      	beq.n	8003c9c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c7e:	3310      	adds	r3, #16
 8003c80:	4618      	mov	r0, r3
 8003c82:	f000 fe51 	bl	8004928 <xTaskRemoveFromEventList>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d007      	beq.n	8003c9c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c8c:	4b3c      	ldr	r3, [pc, #240]	@ (8003d80 <xQueueReceive+0x1c0>)
 8003c8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	f3bf 8f4f 	dsb	sy
 8003c98:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c9c:	f001 fa76 	bl	800518c <vPortExitCritical>
				return pdPASS;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e069      	b.n	8003d78 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d103      	bne.n	8003cb2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003caa:	f001 fa6f 	bl	800518c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	e062      	b.n	8003d78 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d106      	bne.n	8003cc6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003cb8:	f107 0310 	add.w	r3, r7, #16
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f000 fe97 	bl	80049f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003cc6:	f001 fa61 	bl	800518c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003cca:	f000 fc3d 	bl	8004548 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003cce:	f001 fa2b 	bl	8005128 <vPortEnterCritical>
 8003cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003cd8:	b25b      	sxtb	r3, r3
 8003cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cde:	d103      	bne.n	8003ce8 <xQueueReceive+0x128>
 8003ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003cee:	b25b      	sxtb	r3, r3
 8003cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf4:	d103      	bne.n	8003cfe <xQueueReceive+0x13e>
 8003cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003cfe:	f001 fa45 	bl	800518c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d02:	1d3a      	adds	r2, r7, #4
 8003d04:	f107 0310 	add.w	r3, r7, #16
 8003d08:	4611      	mov	r1, r2
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 fe86 	bl	8004a1c <xTaskCheckForTimeOut>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d123      	bne.n	8003d5e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d18:	f000 f998 	bl	800404c <prvIsQueueEmpty>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d017      	beq.n	8003d52 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d24:	3324      	adds	r3, #36	@ 0x24
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	4611      	mov	r1, r2
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 fdd6 	bl	80048dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d32:	f000 f939 	bl	8003fa8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d36:	f000 fc15 	bl	8004564 <xTaskResumeAll>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d189      	bne.n	8003c54 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003d40:	4b0f      	ldr	r3, [pc, #60]	@ (8003d80 <xQueueReceive+0x1c0>)
 8003d42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d46:	601a      	str	r2, [r3, #0]
 8003d48:	f3bf 8f4f 	dsb	sy
 8003d4c:	f3bf 8f6f 	isb	sy
 8003d50:	e780      	b.n	8003c54 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d54:	f000 f928 	bl	8003fa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d58:	f000 fc04 	bl	8004564 <xTaskResumeAll>
 8003d5c:	e77a      	b.n	8003c54 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d60:	f000 f922 	bl	8003fa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d64:	f000 fbfe 	bl	8004564 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d6a:	f000 f96f 	bl	800404c <prvIsQueueEmpty>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f43f af6f 	beq.w	8003c54 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d76:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3730      	adds	r7, #48	@ 0x30
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	e000ed04 	.word	0xe000ed04

08003d84 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b08e      	sub	sp, #56	@ 0x38
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10b      	bne.n	8003db2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8003d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d9e:	f383 8811 	msr	BASEPRI, r3
 8003da2:	f3bf 8f6f 	isb	sy
 8003da6:	f3bf 8f4f 	dsb	sy
 8003daa:	623b      	str	r3, [r7, #32]
}
 8003dac:	bf00      	nop
 8003dae:	bf00      	nop
 8003db0:	e7fd      	b.n	8003dae <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d103      	bne.n	8003dc0 <xQueueReceiveFromISR+0x3c>
 8003db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d101      	bne.n	8003dc4 <xQueueReceiveFromISR+0x40>
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e000      	b.n	8003dc6 <xQueueReceiveFromISR+0x42>
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10b      	bne.n	8003de2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8003dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dce:	f383 8811 	msr	BASEPRI, r3
 8003dd2:	f3bf 8f6f 	isb	sy
 8003dd6:	f3bf 8f4f 	dsb	sy
 8003dda:	61fb      	str	r3, [r7, #28]
}
 8003ddc:	bf00      	nop
 8003dde:	bf00      	nop
 8003de0:	e7fd      	b.n	8003dde <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003de2:	f001 fa81 	bl	80052e8 <vPortValidateInterruptPriority>
	__asm volatile
 8003de6:	f3ef 8211 	mrs	r2, BASEPRI
 8003dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dee:	f383 8811 	msr	BASEPRI, r3
 8003df2:	f3bf 8f6f 	isb	sy
 8003df6:	f3bf 8f4f 	dsb	sy
 8003dfa:	61ba      	str	r2, [r7, #24]
 8003dfc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003dfe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e06:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d02f      	beq.n	8003e6e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e18:	68b9      	ldr	r1, [r7, #8]
 8003e1a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e1c:	f000 f89e 	bl	8003f5c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e22:	1e5a      	subs	r2, r3, #1
 8003e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e26:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003e28:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e30:	d112      	bne.n	8003e58 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d016      	beq.n	8003e68 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e3c:	3310      	adds	r3, #16
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 fd72 	bl	8004928 <xTaskRemoveFromEventList>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00e      	beq.n	8003e68 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00b      	beq.n	8003e68 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	601a      	str	r2, [r3, #0]
 8003e56:	e007      	b.n	8003e68 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003e58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	b25a      	sxtb	r2, r3
 8003e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e6c:	e001      	b.n	8003e72 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e74:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	f383 8811 	msr	BASEPRI, r3
}
 8003e7c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3738      	adds	r7, #56	@ 0x38
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003e94:	2300      	movs	r3, #0
 8003e96:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e9c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10d      	bne.n	8003ec2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d14d      	bne.n	8003f4a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 ff1c 	bl	8004cf0 <xTaskPriorityDisinherit>
 8003eb8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	609a      	str	r2, [r3, #8]
 8003ec0:	e043      	b.n	8003f4a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d119      	bne.n	8003efc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6858      	ldr	r0, [r3, #4]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	68b9      	ldr	r1, [r7, #8]
 8003ed4:	f001 fcd4 	bl	8005880 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee0:	441a      	add	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	685a      	ldr	r2, [r3, #4]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d32b      	bcc.n	8003f4a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	605a      	str	r2, [r3, #4]
 8003efa:	e026      	b.n	8003f4a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	68d8      	ldr	r0, [r3, #12]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f04:	461a      	mov	r2, r3
 8003f06:	68b9      	ldr	r1, [r7, #8]
 8003f08:	f001 fcba 	bl	8005880 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	68da      	ldr	r2, [r3, #12]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f14:	425b      	negs	r3, r3
 8003f16:	441a      	add	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	68da      	ldr	r2, [r3, #12]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d207      	bcs.n	8003f38 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f30:	425b      	negs	r3, r3
 8003f32:	441a      	add	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d105      	bne.n	8003f4a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d002      	beq.n	8003f4a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	3b01      	subs	r3, #1
 8003f48:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1c5a      	adds	r2, r3, #1
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003f52:	697b      	ldr	r3, [r7, #20]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3718      	adds	r7, #24
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d018      	beq.n	8003fa0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68da      	ldr	r2, [r3, #12]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f76:	441a      	add	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68da      	ldr	r2, [r3, #12]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d303      	bcc.n	8003f90 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	68d9      	ldr	r1, [r3, #12]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f98:	461a      	mov	r2, r3
 8003f9a:	6838      	ldr	r0, [r7, #0]
 8003f9c:	f001 fc70 	bl	8005880 <memcpy>
	}
}
 8003fa0:	bf00      	nop
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003fb0:	f001 f8ba 	bl	8005128 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003fba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fbc:	e011      	b.n	8003fe2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d012      	beq.n	8003fec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	3324      	adds	r3, #36	@ 0x24
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 fcac 	bl	8004928 <xTaskRemoveFromEventList>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003fd6:	f000 fd85 	bl	8004ae4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003fda:	7bfb      	ldrb	r3, [r7, #15]
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	dce9      	bgt.n	8003fbe <prvUnlockQueue+0x16>
 8003fea:	e000      	b.n	8003fee <prvUnlockQueue+0x46>
					break;
 8003fec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	22ff      	movs	r2, #255	@ 0xff
 8003ff2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003ff6:	f001 f8c9 	bl	800518c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003ffa:	f001 f895 	bl	8005128 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004004:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004006:	e011      	b.n	800402c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d012      	beq.n	8004036 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3310      	adds	r3, #16
 8004014:	4618      	mov	r0, r3
 8004016:	f000 fc87 	bl	8004928 <xTaskRemoveFromEventList>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004020:	f000 fd60 	bl	8004ae4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004024:	7bbb      	ldrb	r3, [r7, #14]
 8004026:	3b01      	subs	r3, #1
 8004028:	b2db      	uxtb	r3, r3
 800402a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800402c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004030:	2b00      	cmp	r3, #0
 8004032:	dce9      	bgt.n	8004008 <prvUnlockQueue+0x60>
 8004034:	e000      	b.n	8004038 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004036:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	22ff      	movs	r2, #255	@ 0xff
 800403c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004040:	f001 f8a4 	bl	800518c <vPortExitCritical>
}
 8004044:	bf00      	nop
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004054:	f001 f868 	bl	8005128 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800405c:	2b00      	cmp	r3, #0
 800405e:	d102      	bne.n	8004066 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004060:	2301      	movs	r3, #1
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	e001      	b.n	800406a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004066:	2300      	movs	r3, #0
 8004068:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800406a:	f001 f88f 	bl	800518c <vPortExitCritical>

	return xReturn;
 800406e:	68fb      	ldr	r3, [r7, #12]
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004080:	f001 f852 	bl	8005128 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800408c:	429a      	cmp	r2, r3
 800408e:	d102      	bne.n	8004096 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004090:	2301      	movs	r3, #1
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	e001      	b.n	800409a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004096:	2300      	movs	r3, #0
 8004098:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800409a:	f001 f877 	bl	800518c <vPortExitCritical>

	return xReturn;
 800409e:	68fb      	ldr	r3, [r7, #12]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b08e      	sub	sp, #56	@ 0x38
 80040ac:	af04      	add	r7, sp, #16
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
 80040b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80040b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10b      	bne.n	80040d4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80040bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040c0:	f383 8811 	msr	BASEPRI, r3
 80040c4:	f3bf 8f6f 	isb	sy
 80040c8:	f3bf 8f4f 	dsb	sy
 80040cc:	623b      	str	r3, [r7, #32]
}
 80040ce:	bf00      	nop
 80040d0:	bf00      	nop
 80040d2:	e7fd      	b.n	80040d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80040d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10b      	bne.n	80040f2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80040da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040de:	f383 8811 	msr	BASEPRI, r3
 80040e2:	f3bf 8f6f 	isb	sy
 80040e6:	f3bf 8f4f 	dsb	sy
 80040ea:	61fb      	str	r3, [r7, #28]
}
 80040ec:	bf00      	nop
 80040ee:	bf00      	nop
 80040f0:	e7fd      	b.n	80040ee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80040f2:	23a0      	movs	r3, #160	@ 0xa0
 80040f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	2ba0      	cmp	r3, #160	@ 0xa0
 80040fa:	d00b      	beq.n	8004114 <xTaskCreateStatic+0x6c>
	__asm volatile
 80040fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004100:	f383 8811 	msr	BASEPRI, r3
 8004104:	f3bf 8f6f 	isb	sy
 8004108:	f3bf 8f4f 	dsb	sy
 800410c:	61bb      	str	r3, [r7, #24]
}
 800410e:	bf00      	nop
 8004110:	bf00      	nop
 8004112:	e7fd      	b.n	8004110 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004114:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004118:	2b00      	cmp	r3, #0
 800411a:	d01e      	beq.n	800415a <xTaskCreateStatic+0xb2>
 800411c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800411e:	2b00      	cmp	r3, #0
 8004120:	d01b      	beq.n	800415a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004124:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004128:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800412a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800412c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412e:	2202      	movs	r2, #2
 8004130:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004134:	2300      	movs	r3, #0
 8004136:	9303      	str	r3, [sp, #12]
 8004138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413a:	9302      	str	r3, [sp, #8]
 800413c:	f107 0314 	add.w	r3, r7, #20
 8004140:	9301      	str	r3, [sp, #4]
 8004142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	68b9      	ldr	r1, [r7, #8]
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 f851 	bl	80041f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004152:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004154:	f000 f8ee 	bl	8004334 <prvAddNewTaskToReadyList>
 8004158:	e001      	b.n	800415e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800415a:	2300      	movs	r3, #0
 800415c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800415e:	697b      	ldr	r3, [r7, #20]
	}
 8004160:	4618      	mov	r0, r3
 8004162:	3728      	adds	r7, #40	@ 0x28
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004168:	b580      	push	{r7, lr}
 800416a:	b08c      	sub	sp, #48	@ 0x30
 800416c:	af04      	add	r7, sp, #16
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	603b      	str	r3, [r7, #0]
 8004174:	4613      	mov	r3, r2
 8004176:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004178:	88fb      	ldrh	r3, [r7, #6]
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4618      	mov	r0, r3
 800417e:	f001 f8f5 	bl	800536c <pvPortMalloc>
 8004182:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00e      	beq.n	80041a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800418a:	20a0      	movs	r0, #160	@ 0xa0
 800418c:	f001 f8ee 	bl	800536c <pvPortMalloc>
 8004190:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d003      	beq.n	80041a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	631a      	str	r2, [r3, #48]	@ 0x30
 800419e:	e005      	b.n	80041ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80041a0:	6978      	ldr	r0, [r7, #20]
 80041a2:	f001 f9b1 	bl	8005508 <vPortFree>
 80041a6:	e001      	b.n	80041ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80041a8:	2300      	movs	r3, #0
 80041aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d017      	beq.n	80041e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80041ba:	88fa      	ldrh	r2, [r7, #6]
 80041bc:	2300      	movs	r3, #0
 80041be:	9303      	str	r3, [sp, #12]
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	9302      	str	r3, [sp, #8]
 80041c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041c6:	9301      	str	r3, [sp, #4]
 80041c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	68b9      	ldr	r1, [r7, #8]
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f000 f80f 	bl	80041f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041d6:	69f8      	ldr	r0, [r7, #28]
 80041d8:	f000 f8ac 	bl	8004334 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80041dc:	2301      	movs	r3, #1
 80041de:	61bb      	str	r3, [r7, #24]
 80041e0:	e002      	b.n	80041e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80041e2:	f04f 33ff 	mov.w	r3, #4294967295
 80041e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80041e8:	69bb      	ldr	r3, [r7, #24]
	}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3720      	adds	r7, #32
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
	...

080041f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b088      	sub	sp, #32
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
 8004200:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004204:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800420c:	3b01      	subs	r3, #1
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4413      	add	r3, r2
 8004212:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	f023 0307 	bic.w	r3, r3, #7
 800421a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00b      	beq.n	800423e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800422a:	f383 8811 	msr	BASEPRI, r3
 800422e:	f3bf 8f6f 	isb	sy
 8004232:	f3bf 8f4f 	dsb	sy
 8004236:	617b      	str	r3, [r7, #20]
}
 8004238:	bf00      	nop
 800423a:	bf00      	nop
 800423c:	e7fd      	b.n	800423a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d01f      	beq.n	8004284 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004244:	2300      	movs	r3, #0
 8004246:	61fb      	str	r3, [r7, #28]
 8004248:	e012      	b.n	8004270 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	4413      	add	r3, r2
 8004250:	7819      	ldrb	r1, [r3, #0]
 8004252:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	4413      	add	r3, r2
 8004258:	3334      	adds	r3, #52	@ 0x34
 800425a:	460a      	mov	r2, r1
 800425c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	4413      	add	r3, r2
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d006      	beq.n	8004278 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	3301      	adds	r3, #1
 800426e:	61fb      	str	r3, [r7, #28]
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	2b0f      	cmp	r3, #15
 8004274:	d9e9      	bls.n	800424a <prvInitialiseNewTask+0x56>
 8004276:	e000      	b.n	800427a <prvInitialiseNewTask+0x86>
			{
				break;
 8004278:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800427a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004282:	e003      	b.n	800428c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800428c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800428e:	2b06      	cmp	r3, #6
 8004290:	d901      	bls.n	8004296 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004292:	2306      	movs	r3, #6
 8004294:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004298:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800429a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800429c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800429e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042a0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80042a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a4:	2200      	movs	r2, #0
 80042a6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042aa:	3304      	adds	r3, #4
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7ff f911 	bl	80034d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b4:	3318      	adds	r3, #24
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7ff f90c 	bl	80034d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042c4:	f1c3 0207 	rsb	r2, r3, #7
 80042c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042d0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80042d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d4:	2200      	movs	r2, #0
 80042d6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80042da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80042e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e4:	334c      	adds	r3, #76	@ 0x4c
 80042e6:	224c      	movs	r2, #76	@ 0x4c
 80042e8:	2100      	movs	r1, #0
 80042ea:	4618      	mov	r0, r3
 80042ec:	f001 fa3c 	bl	8005768 <memset>
 80042f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f2:	4a0d      	ldr	r2, [pc, #52]	@ (8004328 <prvInitialiseNewTask+0x134>)
 80042f4:	651a      	str	r2, [r3, #80]	@ 0x50
 80042f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f8:	4a0c      	ldr	r2, [pc, #48]	@ (800432c <prvInitialiseNewTask+0x138>)
 80042fa:	655a      	str	r2, [r3, #84]	@ 0x54
 80042fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042fe:	4a0c      	ldr	r2, [pc, #48]	@ (8004330 <prvInitialiseNewTask+0x13c>)
 8004300:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	68f9      	ldr	r1, [r7, #12]
 8004306:	69b8      	ldr	r0, [r7, #24]
 8004308:	f000 fde0 	bl	8004ecc <pxPortInitialiseStack>
 800430c:	4602      	mov	r2, r0
 800430e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004310:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004314:	2b00      	cmp	r3, #0
 8004316:	d002      	beq.n	800431e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800431a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800431c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800431e:	bf00      	nop
 8004320:	3720      	adds	r7, #32
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	20004200 	.word	0x20004200
 800432c:	20004268 	.word	0x20004268
 8004330:	200042d0 	.word	0x200042d0

08004334 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800433c:	f000 fef4 	bl	8005128 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004340:	4b2a      	ldr	r3, [pc, #168]	@ (80043ec <prvAddNewTaskToReadyList+0xb8>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	3301      	adds	r3, #1
 8004346:	4a29      	ldr	r2, [pc, #164]	@ (80043ec <prvAddNewTaskToReadyList+0xb8>)
 8004348:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800434a:	4b29      	ldr	r3, [pc, #164]	@ (80043f0 <prvAddNewTaskToReadyList+0xbc>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d109      	bne.n	8004366 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004352:	4a27      	ldr	r2, [pc, #156]	@ (80043f0 <prvAddNewTaskToReadyList+0xbc>)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004358:	4b24      	ldr	r3, [pc, #144]	@ (80043ec <prvAddNewTaskToReadyList+0xb8>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d110      	bne.n	8004382 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004360:	f000 fbe4 	bl	8004b2c <prvInitialiseTaskLists>
 8004364:	e00d      	b.n	8004382 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004366:	4b23      	ldr	r3, [pc, #140]	@ (80043f4 <prvAddNewTaskToReadyList+0xc0>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d109      	bne.n	8004382 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800436e:	4b20      	ldr	r3, [pc, #128]	@ (80043f0 <prvAddNewTaskToReadyList+0xbc>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004378:	429a      	cmp	r2, r3
 800437a:	d802      	bhi.n	8004382 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800437c:	4a1c      	ldr	r2, [pc, #112]	@ (80043f0 <prvAddNewTaskToReadyList+0xbc>)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004382:	4b1d      	ldr	r3, [pc, #116]	@ (80043f8 <prvAddNewTaskToReadyList+0xc4>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	3301      	adds	r3, #1
 8004388:	4a1b      	ldr	r2, [pc, #108]	@ (80043f8 <prvAddNewTaskToReadyList+0xc4>)
 800438a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004390:	2201      	movs	r2, #1
 8004392:	409a      	lsls	r2, r3
 8004394:	4b19      	ldr	r3, [pc, #100]	@ (80043fc <prvAddNewTaskToReadyList+0xc8>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4313      	orrs	r3, r2
 800439a:	4a18      	ldr	r2, [pc, #96]	@ (80043fc <prvAddNewTaskToReadyList+0xc8>)
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043a2:	4613      	mov	r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	4413      	add	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4a15      	ldr	r2, [pc, #84]	@ (8004400 <prvAddNewTaskToReadyList+0xcc>)
 80043ac:	441a      	add	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3304      	adds	r3, #4
 80043b2:	4619      	mov	r1, r3
 80043b4:	4610      	mov	r0, r2
 80043b6:	f7ff f89a 	bl	80034ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80043ba:	f000 fee7 	bl	800518c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80043be:	4b0d      	ldr	r3, [pc, #52]	@ (80043f4 <prvAddNewTaskToReadyList+0xc0>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00e      	beq.n	80043e4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043c6:	4b0a      	ldr	r3, [pc, #40]	@ (80043f0 <prvAddNewTaskToReadyList+0xbc>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d207      	bcs.n	80043e4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80043d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004404 <prvAddNewTaskToReadyList+0xd0>)
 80043d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	f3bf 8f4f 	dsb	sy
 80043e0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043e4:	bf00      	nop
 80043e6:	3708      	adds	r7, #8
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	200005ac 	.word	0x200005ac
 80043f0:	200004ac 	.word	0x200004ac
 80043f4:	200005b8 	.word	0x200005b8
 80043f8:	200005c8 	.word	0x200005c8
 80043fc:	200005b4 	.word	0x200005b4
 8004400:	200004b0 	.word	0x200004b0
 8004404:	e000ed04 	.word	0xe000ed04

08004408 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004410:	2300      	movs	r3, #0
 8004412:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d018      	beq.n	800444c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800441a:	4b14      	ldr	r3, [pc, #80]	@ (800446c <vTaskDelay+0x64>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00b      	beq.n	800443a <vTaskDelay+0x32>
	__asm volatile
 8004422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004426:	f383 8811 	msr	BASEPRI, r3
 800442a:	f3bf 8f6f 	isb	sy
 800442e:	f3bf 8f4f 	dsb	sy
 8004432:	60bb      	str	r3, [r7, #8]
}
 8004434:	bf00      	nop
 8004436:	bf00      	nop
 8004438:	e7fd      	b.n	8004436 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800443a:	f000 f885 	bl	8004548 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800443e:	2100      	movs	r1, #0
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 fcdd 	bl	8004e00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004446:	f000 f88d 	bl	8004564 <xTaskResumeAll>
 800444a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d107      	bne.n	8004462 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004452:	4b07      	ldr	r3, [pc, #28]	@ (8004470 <vTaskDelay+0x68>)
 8004454:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004462:	bf00      	nop
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	200005d4 	.word	0x200005d4
 8004470:	e000ed04 	.word	0xe000ed04

08004474 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b08a      	sub	sp, #40	@ 0x28
 8004478:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800447a:	2300      	movs	r3, #0
 800447c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800447e:	2300      	movs	r3, #0
 8004480:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004482:	463a      	mov	r2, r7
 8004484:	1d39      	adds	r1, r7, #4
 8004486:	f107 0308 	add.w	r3, r7, #8
 800448a:	4618      	mov	r0, r3
 800448c:	f7fc f83e 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004490:	6839      	ldr	r1, [r7, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	9202      	str	r2, [sp, #8]
 8004498:	9301      	str	r3, [sp, #4]
 800449a:	2300      	movs	r3, #0
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	2300      	movs	r3, #0
 80044a0:	460a      	mov	r2, r1
 80044a2:	4921      	ldr	r1, [pc, #132]	@ (8004528 <vTaskStartScheduler+0xb4>)
 80044a4:	4821      	ldr	r0, [pc, #132]	@ (800452c <vTaskStartScheduler+0xb8>)
 80044a6:	f7ff fdff 	bl	80040a8 <xTaskCreateStatic>
 80044aa:	4603      	mov	r3, r0
 80044ac:	4a20      	ldr	r2, [pc, #128]	@ (8004530 <vTaskStartScheduler+0xbc>)
 80044ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80044b0:	4b1f      	ldr	r3, [pc, #124]	@ (8004530 <vTaskStartScheduler+0xbc>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d002      	beq.n	80044be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80044b8:	2301      	movs	r3, #1
 80044ba:	617b      	str	r3, [r7, #20]
 80044bc:	e001      	b.n	80044c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80044be:	2300      	movs	r3, #0
 80044c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d11b      	bne.n	8004500 <vTaskStartScheduler+0x8c>
	__asm volatile
 80044c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044cc:	f383 8811 	msr	BASEPRI, r3
 80044d0:	f3bf 8f6f 	isb	sy
 80044d4:	f3bf 8f4f 	dsb	sy
 80044d8:	613b      	str	r3, [r7, #16]
}
 80044da:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80044dc:	4b15      	ldr	r3, [pc, #84]	@ (8004534 <vTaskStartScheduler+0xc0>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	334c      	adds	r3, #76	@ 0x4c
 80044e2:	4a15      	ldr	r2, [pc, #84]	@ (8004538 <vTaskStartScheduler+0xc4>)
 80044e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80044e6:	4b15      	ldr	r3, [pc, #84]	@ (800453c <vTaskStartScheduler+0xc8>)
 80044e8:	f04f 32ff 	mov.w	r2, #4294967295
 80044ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80044ee:	4b14      	ldr	r3, [pc, #80]	@ (8004540 <vTaskStartScheduler+0xcc>)
 80044f0:	2201      	movs	r2, #1
 80044f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80044f4:	4b13      	ldr	r3, [pc, #76]	@ (8004544 <vTaskStartScheduler+0xd0>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80044fa:	f000 fd71 	bl	8004fe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80044fe:	e00f      	b.n	8004520 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004506:	d10b      	bne.n	8004520 <vTaskStartScheduler+0xac>
	__asm volatile
 8004508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800450c:	f383 8811 	msr	BASEPRI, r3
 8004510:	f3bf 8f6f 	isb	sy
 8004514:	f3bf 8f4f 	dsb	sy
 8004518:	60fb      	str	r3, [r7, #12]
}
 800451a:	bf00      	nop
 800451c:	bf00      	nop
 800451e:	e7fd      	b.n	800451c <vTaskStartScheduler+0xa8>
}
 8004520:	bf00      	nop
 8004522:	3718      	adds	r7, #24
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	08005a18 	.word	0x08005a18
 800452c:	08004afd 	.word	0x08004afd
 8004530:	200005d0 	.word	0x200005d0
 8004534:	200004ac 	.word	0x200004ac
 8004538:	20000070 	.word	0x20000070
 800453c:	200005cc 	.word	0x200005cc
 8004540:	200005b8 	.word	0x200005b8
 8004544:	200005b0 	.word	0x200005b0

08004548 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800454c:	4b04      	ldr	r3, [pc, #16]	@ (8004560 <vTaskSuspendAll+0x18>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	3301      	adds	r3, #1
 8004552:	4a03      	ldr	r2, [pc, #12]	@ (8004560 <vTaskSuspendAll+0x18>)
 8004554:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004556:	bf00      	nop
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	200005d4 	.word	0x200005d4

08004564 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800456a:	2300      	movs	r3, #0
 800456c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800456e:	2300      	movs	r3, #0
 8004570:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004572:	4b42      	ldr	r3, [pc, #264]	@ (800467c <xTaskResumeAll+0x118>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10b      	bne.n	8004592 <xTaskResumeAll+0x2e>
	__asm volatile
 800457a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800457e:	f383 8811 	msr	BASEPRI, r3
 8004582:	f3bf 8f6f 	isb	sy
 8004586:	f3bf 8f4f 	dsb	sy
 800458a:	603b      	str	r3, [r7, #0]
}
 800458c:	bf00      	nop
 800458e:	bf00      	nop
 8004590:	e7fd      	b.n	800458e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004592:	f000 fdc9 	bl	8005128 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004596:	4b39      	ldr	r3, [pc, #228]	@ (800467c <xTaskResumeAll+0x118>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	3b01      	subs	r3, #1
 800459c:	4a37      	ldr	r2, [pc, #220]	@ (800467c <xTaskResumeAll+0x118>)
 800459e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045a0:	4b36      	ldr	r3, [pc, #216]	@ (800467c <xTaskResumeAll+0x118>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d161      	bne.n	800466c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045a8:	4b35      	ldr	r3, [pc, #212]	@ (8004680 <xTaskResumeAll+0x11c>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d05d      	beq.n	800466c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045b0:	e02e      	b.n	8004610 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045b2:	4b34      	ldr	r3, [pc, #208]	@ (8004684 <xTaskResumeAll+0x120>)
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	3318      	adds	r3, #24
 80045be:	4618      	mov	r0, r3
 80045c0:	f7fe fff2 	bl	80035a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	3304      	adds	r3, #4
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7fe ffed 	bl	80035a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d2:	2201      	movs	r2, #1
 80045d4:	409a      	lsls	r2, r3
 80045d6:	4b2c      	ldr	r3, [pc, #176]	@ (8004688 <xTaskResumeAll+0x124>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4313      	orrs	r3, r2
 80045dc:	4a2a      	ldr	r2, [pc, #168]	@ (8004688 <xTaskResumeAll+0x124>)
 80045de:	6013      	str	r3, [r2, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045e4:	4613      	mov	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4413      	add	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4a27      	ldr	r2, [pc, #156]	@ (800468c <xTaskResumeAll+0x128>)
 80045ee:	441a      	add	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	3304      	adds	r3, #4
 80045f4:	4619      	mov	r1, r3
 80045f6:	4610      	mov	r0, r2
 80045f8:	f7fe ff79 	bl	80034ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004600:	4b23      	ldr	r3, [pc, #140]	@ (8004690 <xTaskResumeAll+0x12c>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004606:	429a      	cmp	r2, r3
 8004608:	d302      	bcc.n	8004610 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800460a:	4b22      	ldr	r3, [pc, #136]	@ (8004694 <xTaskResumeAll+0x130>)
 800460c:	2201      	movs	r2, #1
 800460e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004610:	4b1c      	ldr	r3, [pc, #112]	@ (8004684 <xTaskResumeAll+0x120>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1cc      	bne.n	80045b2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800461e:	f000 fb29 	bl	8004c74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004622:	4b1d      	ldr	r3, [pc, #116]	@ (8004698 <xTaskResumeAll+0x134>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d010      	beq.n	8004650 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800462e:	f000 f837 	bl	80046a0 <xTaskIncrementTick>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d002      	beq.n	800463e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004638:	4b16      	ldr	r3, [pc, #88]	@ (8004694 <xTaskResumeAll+0x130>)
 800463a:	2201      	movs	r2, #1
 800463c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	3b01      	subs	r3, #1
 8004642:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1f1      	bne.n	800462e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800464a:	4b13      	ldr	r3, [pc, #76]	@ (8004698 <xTaskResumeAll+0x134>)
 800464c:	2200      	movs	r2, #0
 800464e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004650:	4b10      	ldr	r3, [pc, #64]	@ (8004694 <xTaskResumeAll+0x130>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d009      	beq.n	800466c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004658:	2301      	movs	r3, #1
 800465a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800465c:	4b0f      	ldr	r3, [pc, #60]	@ (800469c <xTaskResumeAll+0x138>)
 800465e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	f3bf 8f4f 	dsb	sy
 8004668:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800466c:	f000 fd8e 	bl	800518c <vPortExitCritical>

	return xAlreadyYielded;
 8004670:	68bb      	ldr	r3, [r7, #8]
}
 8004672:	4618      	mov	r0, r3
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	200005d4 	.word	0x200005d4
 8004680:	200005ac 	.word	0x200005ac
 8004684:	2000056c 	.word	0x2000056c
 8004688:	200005b4 	.word	0x200005b4
 800468c:	200004b0 	.word	0x200004b0
 8004690:	200004ac 	.word	0x200004ac
 8004694:	200005c0 	.word	0x200005c0
 8004698:	200005bc 	.word	0x200005bc
 800469c:	e000ed04 	.word	0xe000ed04

080046a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80046a6:	2300      	movs	r3, #0
 80046a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046aa:	4b4f      	ldr	r3, [pc, #316]	@ (80047e8 <xTaskIncrementTick+0x148>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f040 808f 	bne.w	80047d2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80046b4:	4b4d      	ldr	r3, [pc, #308]	@ (80047ec <xTaskIncrementTick+0x14c>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	3301      	adds	r3, #1
 80046ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80046bc:	4a4b      	ldr	r2, [pc, #300]	@ (80047ec <xTaskIncrementTick+0x14c>)
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d121      	bne.n	800470c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80046c8:	4b49      	ldr	r3, [pc, #292]	@ (80047f0 <xTaskIncrementTick+0x150>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00b      	beq.n	80046ea <xTaskIncrementTick+0x4a>
	__asm volatile
 80046d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d6:	f383 8811 	msr	BASEPRI, r3
 80046da:	f3bf 8f6f 	isb	sy
 80046de:	f3bf 8f4f 	dsb	sy
 80046e2:	603b      	str	r3, [r7, #0]
}
 80046e4:	bf00      	nop
 80046e6:	bf00      	nop
 80046e8:	e7fd      	b.n	80046e6 <xTaskIncrementTick+0x46>
 80046ea:	4b41      	ldr	r3, [pc, #260]	@ (80047f0 <xTaskIncrementTick+0x150>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	4b40      	ldr	r3, [pc, #256]	@ (80047f4 <xTaskIncrementTick+0x154>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a3e      	ldr	r2, [pc, #248]	@ (80047f0 <xTaskIncrementTick+0x150>)
 80046f6:	6013      	str	r3, [r2, #0]
 80046f8:	4a3e      	ldr	r2, [pc, #248]	@ (80047f4 <xTaskIncrementTick+0x154>)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6013      	str	r3, [r2, #0]
 80046fe:	4b3e      	ldr	r3, [pc, #248]	@ (80047f8 <xTaskIncrementTick+0x158>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	3301      	adds	r3, #1
 8004704:	4a3c      	ldr	r2, [pc, #240]	@ (80047f8 <xTaskIncrementTick+0x158>)
 8004706:	6013      	str	r3, [r2, #0]
 8004708:	f000 fab4 	bl	8004c74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800470c:	4b3b      	ldr	r3, [pc, #236]	@ (80047fc <xTaskIncrementTick+0x15c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	429a      	cmp	r2, r3
 8004714:	d348      	bcc.n	80047a8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004716:	4b36      	ldr	r3, [pc, #216]	@ (80047f0 <xTaskIncrementTick+0x150>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d104      	bne.n	800472a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004720:	4b36      	ldr	r3, [pc, #216]	@ (80047fc <xTaskIncrementTick+0x15c>)
 8004722:	f04f 32ff 	mov.w	r2, #4294967295
 8004726:	601a      	str	r2, [r3, #0]
					break;
 8004728:	e03e      	b.n	80047a8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800472a:	4b31      	ldr	r3, [pc, #196]	@ (80047f0 <xTaskIncrementTick+0x150>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	429a      	cmp	r2, r3
 8004740:	d203      	bcs.n	800474a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004742:	4a2e      	ldr	r2, [pc, #184]	@ (80047fc <xTaskIncrementTick+0x15c>)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004748:	e02e      	b.n	80047a8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	3304      	adds	r3, #4
 800474e:	4618      	mov	r0, r3
 8004750:	f7fe ff2a 	bl	80035a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004758:	2b00      	cmp	r3, #0
 800475a:	d004      	beq.n	8004766 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	3318      	adds	r3, #24
 8004760:	4618      	mov	r0, r3
 8004762:	f7fe ff21 	bl	80035a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800476a:	2201      	movs	r2, #1
 800476c:	409a      	lsls	r2, r3
 800476e:	4b24      	ldr	r3, [pc, #144]	@ (8004800 <xTaskIncrementTick+0x160>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4313      	orrs	r3, r2
 8004774:	4a22      	ldr	r2, [pc, #136]	@ (8004800 <xTaskIncrementTick+0x160>)
 8004776:	6013      	str	r3, [r2, #0]
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800477c:	4613      	mov	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4a1f      	ldr	r2, [pc, #124]	@ (8004804 <xTaskIncrementTick+0x164>)
 8004786:	441a      	add	r2, r3
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	3304      	adds	r3, #4
 800478c:	4619      	mov	r1, r3
 800478e:	4610      	mov	r0, r2
 8004790:	f7fe fead 	bl	80034ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004798:	4b1b      	ldr	r3, [pc, #108]	@ (8004808 <xTaskIncrementTick+0x168>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800479e:	429a      	cmp	r2, r3
 80047a0:	d3b9      	bcc.n	8004716 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80047a2:	2301      	movs	r3, #1
 80047a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047a6:	e7b6      	b.n	8004716 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80047a8:	4b17      	ldr	r3, [pc, #92]	@ (8004808 <xTaskIncrementTick+0x168>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047ae:	4915      	ldr	r1, [pc, #84]	@ (8004804 <xTaskIncrementTick+0x164>)
 80047b0:	4613      	mov	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4413      	add	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	440b      	add	r3, r1
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d901      	bls.n	80047c4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80047c0:	2301      	movs	r3, #1
 80047c2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80047c4:	4b11      	ldr	r3, [pc, #68]	@ (800480c <xTaskIncrementTick+0x16c>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d007      	beq.n	80047dc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80047cc:	2301      	movs	r3, #1
 80047ce:	617b      	str	r3, [r7, #20]
 80047d0:	e004      	b.n	80047dc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80047d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004810 <xTaskIncrementTick+0x170>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	3301      	adds	r3, #1
 80047d8:	4a0d      	ldr	r2, [pc, #52]	@ (8004810 <xTaskIncrementTick+0x170>)
 80047da:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80047dc:	697b      	ldr	r3, [r7, #20]
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3718      	adds	r7, #24
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	200005d4 	.word	0x200005d4
 80047ec:	200005b0 	.word	0x200005b0
 80047f0:	20000564 	.word	0x20000564
 80047f4:	20000568 	.word	0x20000568
 80047f8:	200005c4 	.word	0x200005c4
 80047fc:	200005cc 	.word	0x200005cc
 8004800:	200005b4 	.word	0x200005b4
 8004804:	200004b0 	.word	0x200004b0
 8004808:	200004ac 	.word	0x200004ac
 800480c:	200005c0 	.word	0x200005c0
 8004810:	200005bc 	.word	0x200005bc

08004814 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004814:	b480      	push	{r7}
 8004816:	b087      	sub	sp, #28
 8004818:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800481a:	4b2a      	ldr	r3, [pc, #168]	@ (80048c4 <vTaskSwitchContext+0xb0>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d003      	beq.n	800482a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004822:	4b29      	ldr	r3, [pc, #164]	@ (80048c8 <vTaskSwitchContext+0xb4>)
 8004824:	2201      	movs	r2, #1
 8004826:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004828:	e045      	b.n	80048b6 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800482a:	4b27      	ldr	r3, [pc, #156]	@ (80048c8 <vTaskSwitchContext+0xb4>)
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004830:	4b26      	ldr	r3, [pc, #152]	@ (80048cc <vTaskSwitchContext+0xb8>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	fab3 f383 	clz	r3, r3
 800483c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800483e:	7afb      	ldrb	r3, [r7, #11]
 8004840:	f1c3 031f 	rsb	r3, r3, #31
 8004844:	617b      	str	r3, [r7, #20]
 8004846:	4922      	ldr	r1, [pc, #136]	@ (80048d0 <vTaskSwitchContext+0xbc>)
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	4613      	mov	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	440b      	add	r3, r1
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10b      	bne.n	8004872 <vTaskSwitchContext+0x5e>
	__asm volatile
 800485a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800485e:	f383 8811 	msr	BASEPRI, r3
 8004862:	f3bf 8f6f 	isb	sy
 8004866:	f3bf 8f4f 	dsb	sy
 800486a:	607b      	str	r3, [r7, #4]
}
 800486c:	bf00      	nop
 800486e:	bf00      	nop
 8004870:	e7fd      	b.n	800486e <vTaskSwitchContext+0x5a>
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	4613      	mov	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	4a14      	ldr	r2, [pc, #80]	@ (80048d0 <vTaskSwitchContext+0xbc>)
 800487e:	4413      	add	r3, r2
 8004880:	613b      	str	r3, [r7, #16]
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	605a      	str	r2, [r3, #4]
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	3308      	adds	r3, #8
 8004894:	429a      	cmp	r2, r3
 8004896:	d104      	bne.n	80048a2 <vTaskSwitchContext+0x8e>
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	685a      	ldr	r2, [r3, #4]
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	605a      	str	r2, [r3, #4]
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	4a0a      	ldr	r2, [pc, #40]	@ (80048d4 <vTaskSwitchContext+0xc0>)
 80048aa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80048ac:	4b09      	ldr	r3, [pc, #36]	@ (80048d4 <vTaskSwitchContext+0xc0>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	334c      	adds	r3, #76	@ 0x4c
 80048b2:	4a09      	ldr	r2, [pc, #36]	@ (80048d8 <vTaskSwitchContext+0xc4>)
 80048b4:	6013      	str	r3, [r2, #0]
}
 80048b6:	bf00      	nop
 80048b8:	371c      	adds	r7, #28
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	200005d4 	.word	0x200005d4
 80048c8:	200005c0 	.word	0x200005c0
 80048cc:	200005b4 	.word	0x200005b4
 80048d0:	200004b0 	.word	0x200004b0
 80048d4:	200004ac 	.word	0x200004ac
 80048d8:	20000070 	.word	0x20000070

080048dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10b      	bne.n	8004904 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80048ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f0:	f383 8811 	msr	BASEPRI, r3
 80048f4:	f3bf 8f6f 	isb	sy
 80048f8:	f3bf 8f4f 	dsb	sy
 80048fc:	60fb      	str	r3, [r7, #12]
}
 80048fe:	bf00      	nop
 8004900:	bf00      	nop
 8004902:	e7fd      	b.n	8004900 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004904:	4b07      	ldr	r3, [pc, #28]	@ (8004924 <vTaskPlaceOnEventList+0x48>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	3318      	adds	r3, #24
 800490a:	4619      	mov	r1, r3
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f7fe fe12 	bl	8003536 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004912:	2101      	movs	r1, #1
 8004914:	6838      	ldr	r0, [r7, #0]
 8004916:	f000 fa73 	bl	8004e00 <prvAddCurrentTaskToDelayedList>
}
 800491a:	bf00      	nop
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	200004ac 	.word	0x200004ac

08004928 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10b      	bne.n	8004956 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800493e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004942:	f383 8811 	msr	BASEPRI, r3
 8004946:	f3bf 8f6f 	isb	sy
 800494a:	f3bf 8f4f 	dsb	sy
 800494e:	60fb      	str	r3, [r7, #12]
}
 8004950:	bf00      	nop
 8004952:	bf00      	nop
 8004954:	e7fd      	b.n	8004952 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	3318      	adds	r3, #24
 800495a:	4618      	mov	r0, r3
 800495c:	f7fe fe24 	bl	80035a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004960:	4b1d      	ldr	r3, [pc, #116]	@ (80049d8 <xTaskRemoveFromEventList+0xb0>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d11c      	bne.n	80049a2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	3304      	adds	r3, #4
 800496c:	4618      	mov	r0, r3
 800496e:	f7fe fe1b 	bl	80035a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004976:	2201      	movs	r2, #1
 8004978:	409a      	lsls	r2, r3
 800497a:	4b18      	ldr	r3, [pc, #96]	@ (80049dc <xTaskRemoveFromEventList+0xb4>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4313      	orrs	r3, r2
 8004980:	4a16      	ldr	r2, [pc, #88]	@ (80049dc <xTaskRemoveFromEventList+0xb4>)
 8004982:	6013      	str	r3, [r2, #0]
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004988:	4613      	mov	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4a13      	ldr	r2, [pc, #76]	@ (80049e0 <xTaskRemoveFromEventList+0xb8>)
 8004992:	441a      	add	r2, r3
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	3304      	adds	r3, #4
 8004998:	4619      	mov	r1, r3
 800499a:	4610      	mov	r0, r2
 800499c:	f7fe fda7 	bl	80034ee <vListInsertEnd>
 80049a0:	e005      	b.n	80049ae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	3318      	adds	r3, #24
 80049a6:	4619      	mov	r1, r3
 80049a8:	480e      	ldr	r0, [pc, #56]	@ (80049e4 <xTaskRemoveFromEventList+0xbc>)
 80049aa:	f7fe fda0 	bl	80034ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049b2:	4b0d      	ldr	r3, [pc, #52]	@ (80049e8 <xTaskRemoveFromEventList+0xc0>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d905      	bls.n	80049c8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80049bc:	2301      	movs	r3, #1
 80049be:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80049c0:	4b0a      	ldr	r3, [pc, #40]	@ (80049ec <xTaskRemoveFromEventList+0xc4>)
 80049c2:	2201      	movs	r2, #1
 80049c4:	601a      	str	r2, [r3, #0]
 80049c6:	e001      	b.n	80049cc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80049c8:	2300      	movs	r3, #0
 80049ca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80049cc:	697b      	ldr	r3, [r7, #20]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3718      	adds	r7, #24
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	200005d4 	.word	0x200005d4
 80049dc:	200005b4 	.word	0x200005b4
 80049e0:	200004b0 	.word	0x200004b0
 80049e4:	2000056c 	.word	0x2000056c
 80049e8:	200004ac 	.word	0x200004ac
 80049ec:	200005c0 	.word	0x200005c0

080049f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80049f8:	4b06      	ldr	r3, [pc, #24]	@ (8004a14 <vTaskInternalSetTimeOutState+0x24>)
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004a00:	4b05      	ldr	r3, [pc, #20]	@ (8004a18 <vTaskInternalSetTimeOutState+0x28>)
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	605a      	str	r2, [r3, #4]
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr
 8004a14:	200005c4 	.word	0x200005c4
 8004a18:	200005b0 	.word	0x200005b0

08004a1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b088      	sub	sp, #32
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10b      	bne.n	8004a44 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a30:	f383 8811 	msr	BASEPRI, r3
 8004a34:	f3bf 8f6f 	isb	sy
 8004a38:	f3bf 8f4f 	dsb	sy
 8004a3c:	613b      	str	r3, [r7, #16]
}
 8004a3e:	bf00      	nop
 8004a40:	bf00      	nop
 8004a42:	e7fd      	b.n	8004a40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10b      	bne.n	8004a62 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a4e:	f383 8811 	msr	BASEPRI, r3
 8004a52:	f3bf 8f6f 	isb	sy
 8004a56:	f3bf 8f4f 	dsb	sy
 8004a5a:	60fb      	str	r3, [r7, #12]
}
 8004a5c:	bf00      	nop
 8004a5e:	bf00      	nop
 8004a60:	e7fd      	b.n	8004a5e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004a62:	f000 fb61 	bl	8005128 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004a66:	4b1d      	ldr	r3, [pc, #116]	@ (8004adc <xTaskCheckForTimeOut+0xc0>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a7e:	d102      	bne.n	8004a86 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004a80:	2300      	movs	r3, #0
 8004a82:	61fb      	str	r3, [r7, #28]
 8004a84:	e023      	b.n	8004ace <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	4b15      	ldr	r3, [pc, #84]	@ (8004ae0 <xTaskCheckForTimeOut+0xc4>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d007      	beq.n	8004aa2 <xTaskCheckForTimeOut+0x86>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	69ba      	ldr	r2, [r7, #24]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d302      	bcc.n	8004aa2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	61fb      	str	r3, [r7, #28]
 8004aa0:	e015      	b.n	8004ace <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d20b      	bcs.n	8004ac4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	1ad2      	subs	r2, r2, r3
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f7ff ff99 	bl	80049f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	61fb      	str	r3, [r7, #28]
 8004ac2:	e004      	b.n	8004ace <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004aca:	2301      	movs	r3, #1
 8004acc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004ace:	f000 fb5d 	bl	800518c <vPortExitCritical>

	return xReturn;
 8004ad2:	69fb      	ldr	r3, [r7, #28]
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3720      	adds	r7, #32
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	200005b0 	.word	0x200005b0
 8004ae0:	200005c4 	.word	0x200005c4

08004ae4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004ae8:	4b03      	ldr	r3, [pc, #12]	@ (8004af8 <vTaskMissedYield+0x14>)
 8004aea:	2201      	movs	r2, #1
 8004aec:	601a      	str	r2, [r3, #0]
}
 8004aee:	bf00      	nop
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr
 8004af8:	200005c0 	.word	0x200005c0

08004afc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b04:	f000 f852 	bl	8004bac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b08:	4b06      	ldr	r3, [pc, #24]	@ (8004b24 <prvIdleTask+0x28>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d9f9      	bls.n	8004b04 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004b10:	4b05      	ldr	r3, [pc, #20]	@ (8004b28 <prvIdleTask+0x2c>)
 8004b12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004b20:	e7f0      	b.n	8004b04 <prvIdleTask+0x8>
 8004b22:	bf00      	nop
 8004b24:	200004b0 	.word	0x200004b0
 8004b28:	e000ed04 	.word	0xe000ed04

08004b2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b32:	2300      	movs	r3, #0
 8004b34:	607b      	str	r3, [r7, #4]
 8004b36:	e00c      	b.n	8004b52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	4a12      	ldr	r2, [pc, #72]	@ (8004b8c <prvInitialiseTaskLists+0x60>)
 8004b44:	4413      	add	r3, r2
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7fe fca4 	bl	8003494 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	607b      	str	r3, [r7, #4]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2b06      	cmp	r3, #6
 8004b56:	d9ef      	bls.n	8004b38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004b58:	480d      	ldr	r0, [pc, #52]	@ (8004b90 <prvInitialiseTaskLists+0x64>)
 8004b5a:	f7fe fc9b 	bl	8003494 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004b5e:	480d      	ldr	r0, [pc, #52]	@ (8004b94 <prvInitialiseTaskLists+0x68>)
 8004b60:	f7fe fc98 	bl	8003494 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004b64:	480c      	ldr	r0, [pc, #48]	@ (8004b98 <prvInitialiseTaskLists+0x6c>)
 8004b66:	f7fe fc95 	bl	8003494 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004b6a:	480c      	ldr	r0, [pc, #48]	@ (8004b9c <prvInitialiseTaskLists+0x70>)
 8004b6c:	f7fe fc92 	bl	8003494 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004b70:	480b      	ldr	r0, [pc, #44]	@ (8004ba0 <prvInitialiseTaskLists+0x74>)
 8004b72:	f7fe fc8f 	bl	8003494 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004b76:	4b0b      	ldr	r3, [pc, #44]	@ (8004ba4 <prvInitialiseTaskLists+0x78>)
 8004b78:	4a05      	ldr	r2, [pc, #20]	@ (8004b90 <prvInitialiseTaskLists+0x64>)
 8004b7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8004ba8 <prvInitialiseTaskLists+0x7c>)
 8004b7e:	4a05      	ldr	r2, [pc, #20]	@ (8004b94 <prvInitialiseTaskLists+0x68>)
 8004b80:	601a      	str	r2, [r3, #0]
}
 8004b82:	bf00      	nop
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	200004b0 	.word	0x200004b0
 8004b90:	2000053c 	.word	0x2000053c
 8004b94:	20000550 	.word	0x20000550
 8004b98:	2000056c 	.word	0x2000056c
 8004b9c:	20000580 	.word	0x20000580
 8004ba0:	20000598 	.word	0x20000598
 8004ba4:	20000564 	.word	0x20000564
 8004ba8:	20000568 	.word	0x20000568

08004bac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bb2:	e019      	b.n	8004be8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004bb4:	f000 fab8 	bl	8005128 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bb8:	4b10      	ldr	r3, [pc, #64]	@ (8004bfc <prvCheckTasksWaitingTermination+0x50>)
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7fe fcef 	bl	80035a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004bca:	4b0d      	ldr	r3, [pc, #52]	@ (8004c00 <prvCheckTasksWaitingTermination+0x54>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	4a0b      	ldr	r2, [pc, #44]	@ (8004c00 <prvCheckTasksWaitingTermination+0x54>)
 8004bd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8004c04 <prvCheckTasksWaitingTermination+0x58>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	4a0a      	ldr	r2, [pc, #40]	@ (8004c04 <prvCheckTasksWaitingTermination+0x58>)
 8004bdc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004bde:	f000 fad5 	bl	800518c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f810 	bl	8004c08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004be8:	4b06      	ldr	r3, [pc, #24]	@ (8004c04 <prvCheckTasksWaitingTermination+0x58>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1e1      	bne.n	8004bb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004bf0:	bf00      	nop
 8004bf2:	bf00      	nop
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	20000580 	.word	0x20000580
 8004c00:	200005ac 	.word	0x200005ac
 8004c04:	20000594 	.word	0x20000594

08004c08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	334c      	adds	r3, #76	@ 0x4c
 8004c14:	4618      	mov	r0, r3
 8004c16:	f000 fdaf 	bl	8005778 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d108      	bne.n	8004c36 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f000 fc6d 	bl	8005508 <vPortFree>
				vPortFree( pxTCB );
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 fc6a 	bl	8005508 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004c34:	e019      	b.n	8004c6a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d103      	bne.n	8004c48 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 fc61 	bl	8005508 <vPortFree>
	}
 8004c46:	e010      	b.n	8004c6a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d00b      	beq.n	8004c6a <prvDeleteTCB+0x62>
	__asm volatile
 8004c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c56:	f383 8811 	msr	BASEPRI, r3
 8004c5a:	f3bf 8f6f 	isb	sy
 8004c5e:	f3bf 8f4f 	dsb	sy
 8004c62:	60fb      	str	r3, [r7, #12]
}
 8004c64:	bf00      	nop
 8004c66:	bf00      	nop
 8004c68:	e7fd      	b.n	8004c66 <prvDeleteTCB+0x5e>
	}
 8004c6a:	bf00      	nop
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
	...

08004c74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8004cac <prvResetNextTaskUnblockTime+0x38>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d104      	bne.n	8004c8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004c84:	4b0a      	ldr	r3, [pc, #40]	@ (8004cb0 <prvResetNextTaskUnblockTime+0x3c>)
 8004c86:	f04f 32ff 	mov.w	r2, #4294967295
 8004c8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004c8c:	e008      	b.n	8004ca0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c8e:	4b07      	ldr	r3, [pc, #28]	@ (8004cac <prvResetNextTaskUnblockTime+0x38>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	4a04      	ldr	r2, [pc, #16]	@ (8004cb0 <prvResetNextTaskUnblockTime+0x3c>)
 8004c9e:	6013      	str	r3, [r2, #0]
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	20000564 	.word	0x20000564
 8004cb0:	200005cc 	.word	0x200005cc

08004cb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004cba:	4b0b      	ldr	r3, [pc, #44]	@ (8004ce8 <xTaskGetSchedulerState+0x34>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d102      	bne.n	8004cc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	607b      	str	r3, [r7, #4]
 8004cc6:	e008      	b.n	8004cda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cc8:	4b08      	ldr	r3, [pc, #32]	@ (8004cec <xTaskGetSchedulerState+0x38>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d102      	bne.n	8004cd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	607b      	str	r3, [r7, #4]
 8004cd4:	e001      	b.n	8004cda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004cda:	687b      	ldr	r3, [r7, #4]
	}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	200005b8 	.word	0x200005b8
 8004cec:	200005d4 	.word	0x200005d4

08004cf0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d070      	beq.n	8004de8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004d06:	4b3b      	ldr	r3, [pc, #236]	@ (8004df4 <xTaskPriorityDisinherit+0x104>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d00b      	beq.n	8004d28 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d14:	f383 8811 	msr	BASEPRI, r3
 8004d18:	f3bf 8f6f 	isb	sy
 8004d1c:	f3bf 8f4f 	dsb	sy
 8004d20:	60fb      	str	r3, [r7, #12]
}
 8004d22:	bf00      	nop
 8004d24:	bf00      	nop
 8004d26:	e7fd      	b.n	8004d24 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10b      	bne.n	8004d48 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d34:	f383 8811 	msr	BASEPRI, r3
 8004d38:	f3bf 8f6f 	isb	sy
 8004d3c:	f3bf 8f4f 	dsb	sy
 8004d40:	60bb      	str	r3, [r7, #8]
}
 8004d42:	bf00      	nop
 8004d44:	bf00      	nop
 8004d46:	e7fd      	b.n	8004d44 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d4c:	1e5a      	subs	r2, r3, #1
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d044      	beq.n	8004de8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d140      	bne.n	8004de8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	3304      	adds	r3, #4
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fe fc1c 	bl	80035a8 <uxListRemove>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d115      	bne.n	8004da2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d7a:	491f      	ldr	r1, [pc, #124]	@ (8004df8 <xTaskPriorityDisinherit+0x108>)
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	440b      	add	r3, r1
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10a      	bne.n	8004da2 <xTaskPriorityDisinherit+0xb2>
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d90:	2201      	movs	r2, #1
 8004d92:	fa02 f303 	lsl.w	r3, r2, r3
 8004d96:	43da      	mvns	r2, r3
 8004d98:	4b18      	ldr	r3, [pc, #96]	@ (8004dfc <xTaskPriorityDisinherit+0x10c>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	4a17      	ldr	r2, [pc, #92]	@ (8004dfc <xTaskPriorityDisinherit+0x10c>)
 8004da0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dae:	f1c3 0207 	rsb	r2, r3, #7
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dba:	2201      	movs	r2, #1
 8004dbc:	409a      	lsls	r2, r3
 8004dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8004dfc <xTaskPriorityDisinherit+0x10c>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8004dfc <xTaskPriorityDisinherit+0x10c>)
 8004dc6:	6013      	str	r3, [r2, #0]
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dcc:	4613      	mov	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4a08      	ldr	r2, [pc, #32]	@ (8004df8 <xTaskPriorityDisinherit+0x108>)
 8004dd6:	441a      	add	r2, r3
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	3304      	adds	r3, #4
 8004ddc:	4619      	mov	r1, r3
 8004dde:	4610      	mov	r0, r2
 8004de0:	f7fe fb85 	bl	80034ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004de4:	2301      	movs	r3, #1
 8004de6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004de8:	697b      	ldr	r3, [r7, #20]
	}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3718      	adds	r7, #24
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	200004ac 	.word	0x200004ac
 8004df8:	200004b0 	.word	0x200004b0
 8004dfc:	200005b4 	.word	0x200005b4

08004e00 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e0a:	4b29      	ldr	r3, [pc, #164]	@ (8004eb0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e10:	4b28      	ldr	r3, [pc, #160]	@ (8004eb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3304      	adds	r3, #4
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7fe fbc6 	bl	80035a8 <uxListRemove>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10b      	bne.n	8004e3a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004e22:	4b24      	ldr	r3, [pc, #144]	@ (8004eb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e28:	2201      	movs	r2, #1
 8004e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2e:	43da      	mvns	r2, r3
 8004e30:	4b21      	ldr	r3, [pc, #132]	@ (8004eb8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4013      	ands	r3, r2
 8004e36:	4a20      	ldr	r2, [pc, #128]	@ (8004eb8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004e38:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e40:	d10a      	bne.n	8004e58 <prvAddCurrentTaskToDelayedList+0x58>
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d007      	beq.n	8004e58 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e48:	4b1a      	ldr	r3, [pc, #104]	@ (8004eb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	3304      	adds	r3, #4
 8004e4e:	4619      	mov	r1, r3
 8004e50:	481a      	ldr	r0, [pc, #104]	@ (8004ebc <prvAddCurrentTaskToDelayedList+0xbc>)
 8004e52:	f7fe fb4c 	bl	80034ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004e56:	e026      	b.n	8004ea6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004e60:	4b14      	ldr	r3, [pc, #80]	@ (8004eb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d209      	bcs.n	8004e84 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e70:	4b13      	ldr	r3, [pc, #76]	@ (8004ec0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	4b0f      	ldr	r3, [pc, #60]	@ (8004eb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	3304      	adds	r3, #4
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	4610      	mov	r0, r2
 8004e7e:	f7fe fb5a 	bl	8003536 <vListInsert>
}
 8004e82:	e010      	b.n	8004ea6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e84:	4b0f      	ldr	r3, [pc, #60]	@ (8004ec4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	4b0a      	ldr	r3, [pc, #40]	@ (8004eb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	3304      	adds	r3, #4
 8004e8e:	4619      	mov	r1, r3
 8004e90:	4610      	mov	r0, r2
 8004e92:	f7fe fb50 	bl	8003536 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004e96:	4b0c      	ldr	r3, [pc, #48]	@ (8004ec8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68ba      	ldr	r2, [r7, #8]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d202      	bcs.n	8004ea6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004ea0:	4a09      	ldr	r2, [pc, #36]	@ (8004ec8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	6013      	str	r3, [r2, #0]
}
 8004ea6:	bf00      	nop
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	200005b0 	.word	0x200005b0
 8004eb4:	200004ac 	.word	0x200004ac
 8004eb8:	200005b4 	.word	0x200005b4
 8004ebc:	20000598 	.word	0x20000598
 8004ec0:	20000568 	.word	0x20000568
 8004ec4:	20000564 	.word	0x20000564
 8004ec8:	200005cc 	.word	0x200005cc

08004ecc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	3b04      	subs	r3, #4
 8004edc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004ee4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	3b04      	subs	r3, #4
 8004eea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	f023 0201 	bic.w	r2, r3, #1
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	3b04      	subs	r3, #4
 8004efa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004efc:	4a0c      	ldr	r2, [pc, #48]	@ (8004f30 <pxPortInitialiseStack+0x64>)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	3b14      	subs	r3, #20
 8004f06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	3b04      	subs	r3, #4
 8004f12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f06f 0202 	mvn.w	r2, #2
 8004f1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	3b20      	subs	r3, #32
 8004f20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f22:	68fb      	ldr	r3, [r7, #12]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3714      	adds	r7, #20
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr
 8004f30:	08004f35 	.word	0x08004f35

08004f34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f3e:	4b13      	ldr	r3, [pc, #76]	@ (8004f8c <prvTaskExitError+0x58>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f46:	d00b      	beq.n	8004f60 <prvTaskExitError+0x2c>
	__asm volatile
 8004f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f4c:	f383 8811 	msr	BASEPRI, r3
 8004f50:	f3bf 8f6f 	isb	sy
 8004f54:	f3bf 8f4f 	dsb	sy
 8004f58:	60fb      	str	r3, [r7, #12]
}
 8004f5a:	bf00      	nop
 8004f5c:	bf00      	nop
 8004f5e:	e7fd      	b.n	8004f5c <prvTaskExitError+0x28>
	__asm volatile
 8004f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f64:	f383 8811 	msr	BASEPRI, r3
 8004f68:	f3bf 8f6f 	isb	sy
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	60bb      	str	r3, [r7, #8]
}
 8004f72:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004f74:	bf00      	nop
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d0fc      	beq.n	8004f76 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f7c:	bf00      	nop
 8004f7e:	bf00      	nop
 8004f80:	3714      	adds	r7, #20
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	2000006c 	.word	0x2000006c

08004f90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004f90:	4b07      	ldr	r3, [pc, #28]	@ (8004fb0 <pxCurrentTCBConst2>)
 8004f92:	6819      	ldr	r1, [r3, #0]
 8004f94:	6808      	ldr	r0, [r1, #0]
 8004f96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f9a:	f380 8809 	msr	PSP, r0
 8004f9e:	f3bf 8f6f 	isb	sy
 8004fa2:	f04f 0000 	mov.w	r0, #0
 8004fa6:	f380 8811 	msr	BASEPRI, r0
 8004faa:	4770      	bx	lr
 8004fac:	f3af 8000 	nop.w

08004fb0 <pxCurrentTCBConst2>:
 8004fb0:	200004ac 	.word	0x200004ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004fb4:	bf00      	nop
 8004fb6:	bf00      	nop

08004fb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004fb8:	4808      	ldr	r0, [pc, #32]	@ (8004fdc <prvPortStartFirstTask+0x24>)
 8004fba:	6800      	ldr	r0, [r0, #0]
 8004fbc:	6800      	ldr	r0, [r0, #0]
 8004fbe:	f380 8808 	msr	MSP, r0
 8004fc2:	f04f 0000 	mov.w	r0, #0
 8004fc6:	f380 8814 	msr	CONTROL, r0
 8004fca:	b662      	cpsie	i
 8004fcc:	b661      	cpsie	f
 8004fce:	f3bf 8f4f 	dsb	sy
 8004fd2:	f3bf 8f6f 	isb	sy
 8004fd6:	df00      	svc	0
 8004fd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004fda:	bf00      	nop
 8004fdc:	e000ed08 	.word	0xe000ed08

08004fe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004fe6:	4b47      	ldr	r3, [pc, #284]	@ (8005104 <xPortStartScheduler+0x124>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a47      	ldr	r2, [pc, #284]	@ (8005108 <xPortStartScheduler+0x128>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d10b      	bne.n	8005008 <xPortStartScheduler+0x28>
	__asm volatile
 8004ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ff4:	f383 8811 	msr	BASEPRI, r3
 8004ff8:	f3bf 8f6f 	isb	sy
 8004ffc:	f3bf 8f4f 	dsb	sy
 8005000:	60fb      	str	r3, [r7, #12]
}
 8005002:	bf00      	nop
 8005004:	bf00      	nop
 8005006:	e7fd      	b.n	8005004 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005008:	4b3e      	ldr	r3, [pc, #248]	@ (8005104 <xPortStartScheduler+0x124>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a3f      	ldr	r2, [pc, #252]	@ (800510c <xPortStartScheduler+0x12c>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d10b      	bne.n	800502a <xPortStartScheduler+0x4a>
	__asm volatile
 8005012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005016:	f383 8811 	msr	BASEPRI, r3
 800501a:	f3bf 8f6f 	isb	sy
 800501e:	f3bf 8f4f 	dsb	sy
 8005022:	613b      	str	r3, [r7, #16]
}
 8005024:	bf00      	nop
 8005026:	bf00      	nop
 8005028:	e7fd      	b.n	8005026 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800502a:	4b39      	ldr	r3, [pc, #228]	@ (8005110 <xPortStartScheduler+0x130>)
 800502c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	b2db      	uxtb	r3, r3
 8005034:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	22ff      	movs	r2, #255	@ 0xff
 800503a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	b2db      	uxtb	r3, r3
 8005042:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005044:	78fb      	ldrb	r3, [r7, #3]
 8005046:	b2db      	uxtb	r3, r3
 8005048:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800504c:	b2da      	uxtb	r2, r3
 800504e:	4b31      	ldr	r3, [pc, #196]	@ (8005114 <xPortStartScheduler+0x134>)
 8005050:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005052:	4b31      	ldr	r3, [pc, #196]	@ (8005118 <xPortStartScheduler+0x138>)
 8005054:	2207      	movs	r2, #7
 8005056:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005058:	e009      	b.n	800506e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800505a:	4b2f      	ldr	r3, [pc, #188]	@ (8005118 <xPortStartScheduler+0x138>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	3b01      	subs	r3, #1
 8005060:	4a2d      	ldr	r2, [pc, #180]	@ (8005118 <xPortStartScheduler+0x138>)
 8005062:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005064:	78fb      	ldrb	r3, [r7, #3]
 8005066:	b2db      	uxtb	r3, r3
 8005068:	005b      	lsls	r3, r3, #1
 800506a:	b2db      	uxtb	r3, r3
 800506c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800506e:	78fb      	ldrb	r3, [r7, #3]
 8005070:	b2db      	uxtb	r3, r3
 8005072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005076:	2b80      	cmp	r3, #128	@ 0x80
 8005078:	d0ef      	beq.n	800505a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800507a:	4b27      	ldr	r3, [pc, #156]	@ (8005118 <xPortStartScheduler+0x138>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f1c3 0307 	rsb	r3, r3, #7
 8005082:	2b04      	cmp	r3, #4
 8005084:	d00b      	beq.n	800509e <xPortStartScheduler+0xbe>
	__asm volatile
 8005086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800508a:	f383 8811 	msr	BASEPRI, r3
 800508e:	f3bf 8f6f 	isb	sy
 8005092:	f3bf 8f4f 	dsb	sy
 8005096:	60bb      	str	r3, [r7, #8]
}
 8005098:	bf00      	nop
 800509a:	bf00      	nop
 800509c:	e7fd      	b.n	800509a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800509e:	4b1e      	ldr	r3, [pc, #120]	@ (8005118 <xPortStartScheduler+0x138>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	021b      	lsls	r3, r3, #8
 80050a4:	4a1c      	ldr	r2, [pc, #112]	@ (8005118 <xPortStartScheduler+0x138>)
 80050a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80050a8:	4b1b      	ldr	r3, [pc, #108]	@ (8005118 <xPortStartScheduler+0x138>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80050b0:	4a19      	ldr	r2, [pc, #100]	@ (8005118 <xPortStartScheduler+0x138>)
 80050b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80050bc:	4b17      	ldr	r3, [pc, #92]	@ (800511c <xPortStartScheduler+0x13c>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a16      	ldr	r2, [pc, #88]	@ (800511c <xPortStartScheduler+0x13c>)
 80050c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80050c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80050c8:	4b14      	ldr	r3, [pc, #80]	@ (800511c <xPortStartScheduler+0x13c>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a13      	ldr	r2, [pc, #76]	@ (800511c <xPortStartScheduler+0x13c>)
 80050ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80050d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80050d4:	f000 f8da 	bl	800528c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80050d8:	4b11      	ldr	r3, [pc, #68]	@ (8005120 <xPortStartScheduler+0x140>)
 80050da:	2200      	movs	r2, #0
 80050dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80050de:	f000 f8f9 	bl	80052d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80050e2:	4b10      	ldr	r3, [pc, #64]	@ (8005124 <xPortStartScheduler+0x144>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a0f      	ldr	r2, [pc, #60]	@ (8005124 <xPortStartScheduler+0x144>)
 80050e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80050ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80050ee:	f7ff ff63 	bl	8004fb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80050f2:	f7ff fb8f 	bl	8004814 <vTaskSwitchContext>
	prvTaskExitError();
 80050f6:	f7ff ff1d 	bl	8004f34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3718      	adds	r7, #24
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	e000ed00 	.word	0xe000ed00
 8005108:	410fc271 	.word	0x410fc271
 800510c:	410fc270 	.word	0x410fc270
 8005110:	e000e400 	.word	0xe000e400
 8005114:	200005d8 	.word	0x200005d8
 8005118:	200005dc 	.word	0x200005dc
 800511c:	e000ed20 	.word	0xe000ed20
 8005120:	2000006c 	.word	0x2000006c
 8005124:	e000ef34 	.word	0xe000ef34

08005128 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
	__asm volatile
 800512e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005132:	f383 8811 	msr	BASEPRI, r3
 8005136:	f3bf 8f6f 	isb	sy
 800513a:	f3bf 8f4f 	dsb	sy
 800513e:	607b      	str	r3, [r7, #4]
}
 8005140:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005142:	4b10      	ldr	r3, [pc, #64]	@ (8005184 <vPortEnterCritical+0x5c>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	3301      	adds	r3, #1
 8005148:	4a0e      	ldr	r2, [pc, #56]	@ (8005184 <vPortEnterCritical+0x5c>)
 800514a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800514c:	4b0d      	ldr	r3, [pc, #52]	@ (8005184 <vPortEnterCritical+0x5c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d110      	bne.n	8005176 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005154:	4b0c      	ldr	r3, [pc, #48]	@ (8005188 <vPortEnterCritical+0x60>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00b      	beq.n	8005176 <vPortEnterCritical+0x4e>
	__asm volatile
 800515e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005162:	f383 8811 	msr	BASEPRI, r3
 8005166:	f3bf 8f6f 	isb	sy
 800516a:	f3bf 8f4f 	dsb	sy
 800516e:	603b      	str	r3, [r7, #0]
}
 8005170:	bf00      	nop
 8005172:	bf00      	nop
 8005174:	e7fd      	b.n	8005172 <vPortEnterCritical+0x4a>
	}
}
 8005176:	bf00      	nop
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	2000006c 	.word	0x2000006c
 8005188:	e000ed04 	.word	0xe000ed04

0800518c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005192:	4b12      	ldr	r3, [pc, #72]	@ (80051dc <vPortExitCritical+0x50>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10b      	bne.n	80051b2 <vPortExitCritical+0x26>
	__asm volatile
 800519a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800519e:	f383 8811 	msr	BASEPRI, r3
 80051a2:	f3bf 8f6f 	isb	sy
 80051a6:	f3bf 8f4f 	dsb	sy
 80051aa:	607b      	str	r3, [r7, #4]
}
 80051ac:	bf00      	nop
 80051ae:	bf00      	nop
 80051b0:	e7fd      	b.n	80051ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80051b2:	4b0a      	ldr	r3, [pc, #40]	@ (80051dc <vPortExitCritical+0x50>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	3b01      	subs	r3, #1
 80051b8:	4a08      	ldr	r2, [pc, #32]	@ (80051dc <vPortExitCritical+0x50>)
 80051ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80051bc:	4b07      	ldr	r3, [pc, #28]	@ (80051dc <vPortExitCritical+0x50>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d105      	bne.n	80051d0 <vPortExitCritical+0x44>
 80051c4:	2300      	movs	r3, #0
 80051c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	f383 8811 	msr	BASEPRI, r3
}
 80051ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	2000006c 	.word	0x2000006c

080051e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80051e0:	f3ef 8009 	mrs	r0, PSP
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	4b15      	ldr	r3, [pc, #84]	@ (8005240 <pxCurrentTCBConst>)
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	f01e 0f10 	tst.w	lr, #16
 80051f0:	bf08      	it	eq
 80051f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80051f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051fa:	6010      	str	r0, [r2, #0]
 80051fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005200:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005204:	f380 8811 	msr	BASEPRI, r0
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	f3bf 8f6f 	isb	sy
 8005210:	f7ff fb00 	bl	8004814 <vTaskSwitchContext>
 8005214:	f04f 0000 	mov.w	r0, #0
 8005218:	f380 8811 	msr	BASEPRI, r0
 800521c:	bc09      	pop	{r0, r3}
 800521e:	6819      	ldr	r1, [r3, #0]
 8005220:	6808      	ldr	r0, [r1, #0]
 8005222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005226:	f01e 0f10 	tst.w	lr, #16
 800522a:	bf08      	it	eq
 800522c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005230:	f380 8809 	msr	PSP, r0
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	f3af 8000 	nop.w

08005240 <pxCurrentTCBConst>:
 8005240:	200004ac 	.word	0x200004ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005244:	bf00      	nop
 8005246:	bf00      	nop

08005248 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
	__asm volatile
 800524e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005252:	f383 8811 	msr	BASEPRI, r3
 8005256:	f3bf 8f6f 	isb	sy
 800525a:	f3bf 8f4f 	dsb	sy
 800525e:	607b      	str	r3, [r7, #4]
}
 8005260:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005262:	f7ff fa1d 	bl	80046a0 <xTaskIncrementTick>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d003      	beq.n	8005274 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800526c:	4b06      	ldr	r3, [pc, #24]	@ (8005288 <SysTick_Handler+0x40>)
 800526e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005272:	601a      	str	r2, [r3, #0]
 8005274:	2300      	movs	r3, #0
 8005276:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	f383 8811 	msr	BASEPRI, r3
}
 800527e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005280:	bf00      	nop
 8005282:	3708      	adds	r7, #8
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	e000ed04 	.word	0xe000ed04

0800528c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800528c:	b480      	push	{r7}
 800528e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005290:	4b0b      	ldr	r3, [pc, #44]	@ (80052c0 <vPortSetupTimerInterrupt+0x34>)
 8005292:	2200      	movs	r2, #0
 8005294:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005296:	4b0b      	ldr	r3, [pc, #44]	@ (80052c4 <vPortSetupTimerInterrupt+0x38>)
 8005298:	2200      	movs	r2, #0
 800529a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800529c:	4b0a      	ldr	r3, [pc, #40]	@ (80052c8 <vPortSetupTimerInterrupt+0x3c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a0a      	ldr	r2, [pc, #40]	@ (80052cc <vPortSetupTimerInterrupt+0x40>)
 80052a2:	fba2 2303 	umull	r2, r3, r2, r3
 80052a6:	099b      	lsrs	r3, r3, #6
 80052a8:	4a09      	ldr	r2, [pc, #36]	@ (80052d0 <vPortSetupTimerInterrupt+0x44>)
 80052aa:	3b01      	subs	r3, #1
 80052ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80052ae:	4b04      	ldr	r3, [pc, #16]	@ (80052c0 <vPortSetupTimerInterrupt+0x34>)
 80052b0:	2207      	movs	r2, #7
 80052b2:	601a      	str	r2, [r3, #0]
}
 80052b4:	bf00      	nop
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	e000e010 	.word	0xe000e010
 80052c4:	e000e018 	.word	0xe000e018
 80052c8:	20000000 	.word	0x20000000
 80052cc:	10624dd3 	.word	0x10624dd3
 80052d0:	e000e014 	.word	0xe000e014

080052d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80052d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80052e4 <vPortEnableVFP+0x10>
 80052d8:	6801      	ldr	r1, [r0, #0]
 80052da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80052de:	6001      	str	r1, [r0, #0]
 80052e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80052e2:	bf00      	nop
 80052e4:	e000ed88 	.word	0xe000ed88

080052e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80052ee:	f3ef 8305 	mrs	r3, IPSR
 80052f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2b0f      	cmp	r3, #15
 80052f8:	d915      	bls.n	8005326 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80052fa:	4a18      	ldr	r2, [pc, #96]	@ (800535c <vPortValidateInterruptPriority+0x74>)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4413      	add	r3, r2
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005304:	4b16      	ldr	r3, [pc, #88]	@ (8005360 <vPortValidateInterruptPriority+0x78>)
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	7afa      	ldrb	r2, [r7, #11]
 800530a:	429a      	cmp	r2, r3
 800530c:	d20b      	bcs.n	8005326 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800530e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005312:	f383 8811 	msr	BASEPRI, r3
 8005316:	f3bf 8f6f 	isb	sy
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	607b      	str	r3, [r7, #4]
}
 8005320:	bf00      	nop
 8005322:	bf00      	nop
 8005324:	e7fd      	b.n	8005322 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005326:	4b0f      	ldr	r3, [pc, #60]	@ (8005364 <vPortValidateInterruptPriority+0x7c>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800532e:	4b0e      	ldr	r3, [pc, #56]	@ (8005368 <vPortValidateInterruptPriority+0x80>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	429a      	cmp	r2, r3
 8005334:	d90b      	bls.n	800534e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800533a:	f383 8811 	msr	BASEPRI, r3
 800533e:	f3bf 8f6f 	isb	sy
 8005342:	f3bf 8f4f 	dsb	sy
 8005346:	603b      	str	r3, [r7, #0]
}
 8005348:	bf00      	nop
 800534a:	bf00      	nop
 800534c:	e7fd      	b.n	800534a <vPortValidateInterruptPriority+0x62>
	}
 800534e:	bf00      	nop
 8005350:	3714      	adds	r7, #20
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	e000e3f0 	.word	0xe000e3f0
 8005360:	200005d8 	.word	0x200005d8
 8005364:	e000ed0c 	.word	0xe000ed0c
 8005368:	200005dc 	.word	0x200005dc

0800536c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b08a      	sub	sp, #40	@ 0x28
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005374:	2300      	movs	r3, #0
 8005376:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005378:	f7ff f8e6 	bl	8004548 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800537c:	4b5c      	ldr	r3, [pc, #368]	@ (80054f0 <pvPortMalloc+0x184>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d101      	bne.n	8005388 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005384:	f000 f924 	bl	80055d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005388:	4b5a      	ldr	r3, [pc, #360]	@ (80054f4 <pvPortMalloc+0x188>)
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4013      	ands	r3, r2
 8005390:	2b00      	cmp	r3, #0
 8005392:	f040 8095 	bne.w	80054c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d01e      	beq.n	80053da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800539c:	2208      	movs	r2, #8
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4413      	add	r3, r2
 80053a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f003 0307 	and.w	r3, r3, #7
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d015      	beq.n	80053da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f023 0307 	bic.w	r3, r3, #7
 80053b4:	3308      	adds	r3, #8
 80053b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f003 0307 	and.w	r3, r3, #7
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00b      	beq.n	80053da <pvPortMalloc+0x6e>
	__asm volatile
 80053c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c6:	f383 8811 	msr	BASEPRI, r3
 80053ca:	f3bf 8f6f 	isb	sy
 80053ce:	f3bf 8f4f 	dsb	sy
 80053d2:	617b      	str	r3, [r7, #20]
}
 80053d4:	bf00      	nop
 80053d6:	bf00      	nop
 80053d8:	e7fd      	b.n	80053d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d06f      	beq.n	80054c0 <pvPortMalloc+0x154>
 80053e0:	4b45      	ldr	r3, [pc, #276]	@ (80054f8 <pvPortMalloc+0x18c>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d86a      	bhi.n	80054c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80053ea:	4b44      	ldr	r3, [pc, #272]	@ (80054fc <pvPortMalloc+0x190>)
 80053ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80053ee:	4b43      	ldr	r3, [pc, #268]	@ (80054fc <pvPortMalloc+0x190>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053f4:	e004      	b.n	8005400 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80053f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80053fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	429a      	cmp	r2, r3
 8005408:	d903      	bls.n	8005412 <pvPortMalloc+0xa6>
 800540a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1f1      	bne.n	80053f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005412:	4b37      	ldr	r3, [pc, #220]	@ (80054f0 <pvPortMalloc+0x184>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005418:	429a      	cmp	r2, r3
 800541a:	d051      	beq.n	80054c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800541c:	6a3b      	ldr	r3, [r7, #32]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2208      	movs	r2, #8
 8005422:	4413      	add	r3, r2
 8005424:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	6a3b      	ldr	r3, [r7, #32]
 800542c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800542e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005430:	685a      	ldr	r2, [r3, #4]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	1ad2      	subs	r2, r2, r3
 8005436:	2308      	movs	r3, #8
 8005438:	005b      	lsls	r3, r3, #1
 800543a:	429a      	cmp	r2, r3
 800543c:	d920      	bls.n	8005480 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800543e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4413      	add	r3, r2
 8005444:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	f003 0307 	and.w	r3, r3, #7
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00b      	beq.n	8005468 <pvPortMalloc+0xfc>
	__asm volatile
 8005450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005454:	f383 8811 	msr	BASEPRI, r3
 8005458:	f3bf 8f6f 	isb	sy
 800545c:	f3bf 8f4f 	dsb	sy
 8005460:	613b      	str	r3, [r7, #16]
}
 8005462:	bf00      	nop
 8005464:	bf00      	nop
 8005466:	e7fd      	b.n	8005464 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546a:	685a      	ldr	r2, [r3, #4]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	1ad2      	subs	r2, r2, r3
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800547a:	69b8      	ldr	r0, [r7, #24]
 800547c:	f000 f90a 	bl	8005694 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005480:	4b1d      	ldr	r3, [pc, #116]	@ (80054f8 <pvPortMalloc+0x18c>)
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	4a1b      	ldr	r2, [pc, #108]	@ (80054f8 <pvPortMalloc+0x18c>)
 800548c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800548e:	4b1a      	ldr	r3, [pc, #104]	@ (80054f8 <pvPortMalloc+0x18c>)
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	4b1b      	ldr	r3, [pc, #108]	@ (8005500 <pvPortMalloc+0x194>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	429a      	cmp	r2, r3
 8005498:	d203      	bcs.n	80054a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800549a:	4b17      	ldr	r3, [pc, #92]	@ (80054f8 <pvPortMalloc+0x18c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a18      	ldr	r2, [pc, #96]	@ (8005500 <pvPortMalloc+0x194>)
 80054a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80054a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a4:	685a      	ldr	r2, [r3, #4]
 80054a6:	4b13      	ldr	r3, [pc, #76]	@ (80054f4 <pvPortMalloc+0x188>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	431a      	orrs	r2, r3
 80054ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80054b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b2:	2200      	movs	r2, #0
 80054b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80054b6:	4b13      	ldr	r3, [pc, #76]	@ (8005504 <pvPortMalloc+0x198>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	3301      	adds	r3, #1
 80054bc:	4a11      	ldr	r2, [pc, #68]	@ (8005504 <pvPortMalloc+0x198>)
 80054be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80054c0:	f7ff f850 	bl	8004564 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	f003 0307 	and.w	r3, r3, #7
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00b      	beq.n	80054e6 <pvPortMalloc+0x17a>
	__asm volatile
 80054ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d2:	f383 8811 	msr	BASEPRI, r3
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	60fb      	str	r3, [r7, #12]
}
 80054e0:	bf00      	nop
 80054e2:	bf00      	nop
 80054e4:	e7fd      	b.n	80054e2 <pvPortMalloc+0x176>
	return pvReturn;
 80054e6:	69fb      	ldr	r3, [r7, #28]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3728      	adds	r7, #40	@ 0x28
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	200041e8 	.word	0x200041e8
 80054f4:	200041fc 	.word	0x200041fc
 80054f8:	200041ec 	.word	0x200041ec
 80054fc:	200041e0 	.word	0x200041e0
 8005500:	200041f0 	.word	0x200041f0
 8005504:	200041f4 	.word	0x200041f4

08005508 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d04f      	beq.n	80055ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800551a:	2308      	movs	r3, #8
 800551c:	425b      	negs	r3, r3
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	4413      	add	r3, r2
 8005522:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	4b25      	ldr	r3, [pc, #148]	@ (80055c4 <vPortFree+0xbc>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4013      	ands	r3, r2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10b      	bne.n	800554e <vPortFree+0x46>
	__asm volatile
 8005536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800553a:	f383 8811 	msr	BASEPRI, r3
 800553e:	f3bf 8f6f 	isb	sy
 8005542:	f3bf 8f4f 	dsb	sy
 8005546:	60fb      	str	r3, [r7, #12]
}
 8005548:	bf00      	nop
 800554a:	bf00      	nop
 800554c:	e7fd      	b.n	800554a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00b      	beq.n	800556e <vPortFree+0x66>
	__asm volatile
 8005556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800555a:	f383 8811 	msr	BASEPRI, r3
 800555e:	f3bf 8f6f 	isb	sy
 8005562:	f3bf 8f4f 	dsb	sy
 8005566:	60bb      	str	r3, [r7, #8]
}
 8005568:	bf00      	nop
 800556a:	bf00      	nop
 800556c:	e7fd      	b.n	800556a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	4b14      	ldr	r3, [pc, #80]	@ (80055c4 <vPortFree+0xbc>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4013      	ands	r3, r2
 8005578:	2b00      	cmp	r3, #0
 800557a:	d01e      	beq.n	80055ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d11a      	bne.n	80055ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	685a      	ldr	r2, [r3, #4]
 8005588:	4b0e      	ldr	r3, [pc, #56]	@ (80055c4 <vPortFree+0xbc>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	43db      	mvns	r3, r3
 800558e:	401a      	ands	r2, r3
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005594:	f7fe ffd8 	bl	8004548 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	4b0a      	ldr	r3, [pc, #40]	@ (80055c8 <vPortFree+0xc0>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4413      	add	r3, r2
 80055a2:	4a09      	ldr	r2, [pc, #36]	@ (80055c8 <vPortFree+0xc0>)
 80055a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80055a6:	6938      	ldr	r0, [r7, #16]
 80055a8:	f000 f874 	bl	8005694 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80055ac:	4b07      	ldr	r3, [pc, #28]	@ (80055cc <vPortFree+0xc4>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	3301      	adds	r3, #1
 80055b2:	4a06      	ldr	r2, [pc, #24]	@ (80055cc <vPortFree+0xc4>)
 80055b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80055b6:	f7fe ffd5 	bl	8004564 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80055ba:	bf00      	nop
 80055bc:	3718      	adds	r7, #24
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	200041fc 	.word	0x200041fc
 80055c8:	200041ec 	.word	0x200041ec
 80055cc:	200041f8 	.word	0x200041f8

080055d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80055d6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80055da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80055dc:	4b27      	ldr	r3, [pc, #156]	@ (800567c <prvHeapInit+0xac>)
 80055de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f003 0307 	and.w	r3, r3, #7
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00c      	beq.n	8005604 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	3307      	adds	r3, #7
 80055ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f023 0307 	bic.w	r3, r3, #7
 80055f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80055f8:	68ba      	ldr	r2, [r7, #8]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	4a1f      	ldr	r2, [pc, #124]	@ (800567c <prvHeapInit+0xac>)
 8005600:	4413      	add	r3, r2
 8005602:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005608:	4a1d      	ldr	r2, [pc, #116]	@ (8005680 <prvHeapInit+0xb0>)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800560e:	4b1c      	ldr	r3, [pc, #112]	@ (8005680 <prvHeapInit+0xb0>)
 8005610:	2200      	movs	r2, #0
 8005612:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	4413      	add	r3, r2
 800561a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800561c:	2208      	movs	r2, #8
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	1a9b      	subs	r3, r3, r2
 8005622:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f023 0307 	bic.w	r3, r3, #7
 800562a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	4a15      	ldr	r2, [pc, #84]	@ (8005684 <prvHeapInit+0xb4>)
 8005630:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005632:	4b14      	ldr	r3, [pc, #80]	@ (8005684 <prvHeapInit+0xb4>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2200      	movs	r2, #0
 8005638:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800563a:	4b12      	ldr	r3, [pc, #72]	@ (8005684 <prvHeapInit+0xb4>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2200      	movs	r2, #0
 8005640:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	1ad2      	subs	r2, r2, r3
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005650:	4b0c      	ldr	r3, [pc, #48]	@ (8005684 <prvHeapInit+0xb4>)
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	4a0a      	ldr	r2, [pc, #40]	@ (8005688 <prvHeapInit+0xb8>)
 800565e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	4a09      	ldr	r2, [pc, #36]	@ (800568c <prvHeapInit+0xbc>)
 8005666:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005668:	4b09      	ldr	r3, [pc, #36]	@ (8005690 <prvHeapInit+0xc0>)
 800566a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800566e:	601a      	str	r2, [r3, #0]
}
 8005670:	bf00      	nop
 8005672:	3714      	adds	r7, #20
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr
 800567c:	200005e0 	.word	0x200005e0
 8005680:	200041e0 	.word	0x200041e0
 8005684:	200041e8 	.word	0x200041e8
 8005688:	200041f0 	.word	0x200041f0
 800568c:	200041ec 	.word	0x200041ec
 8005690:	200041fc 	.word	0x200041fc

08005694 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800569c:	4b28      	ldr	r3, [pc, #160]	@ (8005740 <prvInsertBlockIntoFreeList+0xac>)
 800569e:	60fb      	str	r3, [r7, #12]
 80056a0:	e002      	b.n	80056a8 <prvInsertBlockIntoFreeList+0x14>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	60fb      	str	r3, [r7, #12]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d8f7      	bhi.n	80056a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	68ba      	ldr	r2, [r7, #8]
 80056bc:	4413      	add	r3, r2
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d108      	bne.n	80056d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	685a      	ldr	r2, [r3, #4]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	441a      	add	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	441a      	add	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d118      	bne.n	800571c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	4b15      	ldr	r3, [pc, #84]	@ (8005744 <prvInsertBlockIntoFreeList+0xb0>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d00d      	beq.n	8005712 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685a      	ldr	r2, [r3, #4]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	441a      	add	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	601a      	str	r2, [r3, #0]
 8005710:	e008      	b.n	8005724 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005712:	4b0c      	ldr	r3, [pc, #48]	@ (8005744 <prvInsertBlockIntoFreeList+0xb0>)
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	601a      	str	r2, [r3, #0]
 800571a:	e003      	b.n	8005724 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	429a      	cmp	r2, r3
 800572a:	d002      	beq.n	8005732 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005732:	bf00      	nop
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	200041e0 	.word	0x200041e0
 8005744:	200041e8 	.word	0x200041e8

08005748 <memcmp>:
 8005748:	b510      	push	{r4, lr}
 800574a:	3901      	subs	r1, #1
 800574c:	4402      	add	r2, r0
 800574e:	4290      	cmp	r0, r2
 8005750:	d101      	bne.n	8005756 <memcmp+0xe>
 8005752:	2000      	movs	r0, #0
 8005754:	e005      	b.n	8005762 <memcmp+0x1a>
 8005756:	7803      	ldrb	r3, [r0, #0]
 8005758:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800575c:	42a3      	cmp	r3, r4
 800575e:	d001      	beq.n	8005764 <memcmp+0x1c>
 8005760:	1b18      	subs	r0, r3, r4
 8005762:	bd10      	pop	{r4, pc}
 8005764:	3001      	adds	r0, #1
 8005766:	e7f2      	b.n	800574e <memcmp+0x6>

08005768 <memset>:
 8005768:	4402      	add	r2, r0
 800576a:	4603      	mov	r3, r0
 800576c:	4293      	cmp	r3, r2
 800576e:	d100      	bne.n	8005772 <memset+0xa>
 8005770:	4770      	bx	lr
 8005772:	f803 1b01 	strb.w	r1, [r3], #1
 8005776:	e7f9      	b.n	800576c <memset+0x4>

08005778 <_reclaim_reent>:
 8005778:	4b2d      	ldr	r3, [pc, #180]	@ (8005830 <_reclaim_reent+0xb8>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4283      	cmp	r3, r0
 800577e:	b570      	push	{r4, r5, r6, lr}
 8005780:	4604      	mov	r4, r0
 8005782:	d053      	beq.n	800582c <_reclaim_reent+0xb4>
 8005784:	69c3      	ldr	r3, [r0, #28]
 8005786:	b31b      	cbz	r3, 80057d0 <_reclaim_reent+0x58>
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	b163      	cbz	r3, 80057a6 <_reclaim_reent+0x2e>
 800578c:	2500      	movs	r5, #0
 800578e:	69e3      	ldr	r3, [r4, #28]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	5959      	ldr	r1, [r3, r5]
 8005794:	b9b1      	cbnz	r1, 80057c4 <_reclaim_reent+0x4c>
 8005796:	3504      	adds	r5, #4
 8005798:	2d80      	cmp	r5, #128	@ 0x80
 800579a:	d1f8      	bne.n	800578e <_reclaim_reent+0x16>
 800579c:	69e3      	ldr	r3, [r4, #28]
 800579e:	4620      	mov	r0, r4
 80057a0:	68d9      	ldr	r1, [r3, #12]
 80057a2:	f000 f87b 	bl	800589c <_free_r>
 80057a6:	69e3      	ldr	r3, [r4, #28]
 80057a8:	6819      	ldr	r1, [r3, #0]
 80057aa:	b111      	cbz	r1, 80057b2 <_reclaim_reent+0x3a>
 80057ac:	4620      	mov	r0, r4
 80057ae:	f000 f875 	bl	800589c <_free_r>
 80057b2:	69e3      	ldr	r3, [r4, #28]
 80057b4:	689d      	ldr	r5, [r3, #8]
 80057b6:	b15d      	cbz	r5, 80057d0 <_reclaim_reent+0x58>
 80057b8:	4629      	mov	r1, r5
 80057ba:	4620      	mov	r0, r4
 80057bc:	682d      	ldr	r5, [r5, #0]
 80057be:	f000 f86d 	bl	800589c <_free_r>
 80057c2:	e7f8      	b.n	80057b6 <_reclaim_reent+0x3e>
 80057c4:	680e      	ldr	r6, [r1, #0]
 80057c6:	4620      	mov	r0, r4
 80057c8:	f000 f868 	bl	800589c <_free_r>
 80057cc:	4631      	mov	r1, r6
 80057ce:	e7e1      	b.n	8005794 <_reclaim_reent+0x1c>
 80057d0:	6961      	ldr	r1, [r4, #20]
 80057d2:	b111      	cbz	r1, 80057da <_reclaim_reent+0x62>
 80057d4:	4620      	mov	r0, r4
 80057d6:	f000 f861 	bl	800589c <_free_r>
 80057da:	69e1      	ldr	r1, [r4, #28]
 80057dc:	b111      	cbz	r1, 80057e4 <_reclaim_reent+0x6c>
 80057de:	4620      	mov	r0, r4
 80057e0:	f000 f85c 	bl	800589c <_free_r>
 80057e4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80057e6:	b111      	cbz	r1, 80057ee <_reclaim_reent+0x76>
 80057e8:	4620      	mov	r0, r4
 80057ea:	f000 f857 	bl	800589c <_free_r>
 80057ee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80057f0:	b111      	cbz	r1, 80057f8 <_reclaim_reent+0x80>
 80057f2:	4620      	mov	r0, r4
 80057f4:	f000 f852 	bl	800589c <_free_r>
 80057f8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80057fa:	b111      	cbz	r1, 8005802 <_reclaim_reent+0x8a>
 80057fc:	4620      	mov	r0, r4
 80057fe:	f000 f84d 	bl	800589c <_free_r>
 8005802:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005804:	b111      	cbz	r1, 800580c <_reclaim_reent+0x94>
 8005806:	4620      	mov	r0, r4
 8005808:	f000 f848 	bl	800589c <_free_r>
 800580c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800580e:	b111      	cbz	r1, 8005816 <_reclaim_reent+0x9e>
 8005810:	4620      	mov	r0, r4
 8005812:	f000 f843 	bl	800589c <_free_r>
 8005816:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005818:	b111      	cbz	r1, 8005820 <_reclaim_reent+0xa8>
 800581a:	4620      	mov	r0, r4
 800581c:	f000 f83e 	bl	800589c <_free_r>
 8005820:	6a23      	ldr	r3, [r4, #32]
 8005822:	b11b      	cbz	r3, 800582c <_reclaim_reent+0xb4>
 8005824:	4620      	mov	r0, r4
 8005826:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800582a:	4718      	bx	r3
 800582c:	bd70      	pop	{r4, r5, r6, pc}
 800582e:	bf00      	nop
 8005830:	20000070 	.word	0x20000070

08005834 <__libc_init_array>:
 8005834:	b570      	push	{r4, r5, r6, lr}
 8005836:	4d0d      	ldr	r5, [pc, #52]	@ (800586c <__libc_init_array+0x38>)
 8005838:	4c0d      	ldr	r4, [pc, #52]	@ (8005870 <__libc_init_array+0x3c>)
 800583a:	1b64      	subs	r4, r4, r5
 800583c:	10a4      	asrs	r4, r4, #2
 800583e:	2600      	movs	r6, #0
 8005840:	42a6      	cmp	r6, r4
 8005842:	d109      	bne.n	8005858 <__libc_init_array+0x24>
 8005844:	4d0b      	ldr	r5, [pc, #44]	@ (8005874 <__libc_init_array+0x40>)
 8005846:	4c0c      	ldr	r4, [pc, #48]	@ (8005878 <__libc_init_array+0x44>)
 8005848:	f000 f87e 	bl	8005948 <_init>
 800584c:	1b64      	subs	r4, r4, r5
 800584e:	10a4      	asrs	r4, r4, #2
 8005850:	2600      	movs	r6, #0
 8005852:	42a6      	cmp	r6, r4
 8005854:	d105      	bne.n	8005862 <__libc_init_array+0x2e>
 8005856:	bd70      	pop	{r4, r5, r6, pc}
 8005858:	f855 3b04 	ldr.w	r3, [r5], #4
 800585c:	4798      	blx	r3
 800585e:	3601      	adds	r6, #1
 8005860:	e7ee      	b.n	8005840 <__libc_init_array+0xc>
 8005862:	f855 3b04 	ldr.w	r3, [r5], #4
 8005866:	4798      	blx	r3
 8005868:	3601      	adds	r6, #1
 800586a:	e7f2      	b.n	8005852 <__libc_init_array+0x1e>
 800586c:	08005a5c 	.word	0x08005a5c
 8005870:	08005a5c 	.word	0x08005a5c
 8005874:	08005a5c 	.word	0x08005a5c
 8005878:	08005a60 	.word	0x08005a60

0800587c <__retarget_lock_acquire_recursive>:
 800587c:	4770      	bx	lr

0800587e <__retarget_lock_release_recursive>:
 800587e:	4770      	bx	lr

08005880 <memcpy>:
 8005880:	440a      	add	r2, r1
 8005882:	4291      	cmp	r1, r2
 8005884:	f100 33ff 	add.w	r3, r0, #4294967295
 8005888:	d100      	bne.n	800588c <memcpy+0xc>
 800588a:	4770      	bx	lr
 800588c:	b510      	push	{r4, lr}
 800588e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005892:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005896:	4291      	cmp	r1, r2
 8005898:	d1f9      	bne.n	800588e <memcpy+0xe>
 800589a:	bd10      	pop	{r4, pc}

0800589c <_free_r>:
 800589c:	b538      	push	{r3, r4, r5, lr}
 800589e:	4605      	mov	r5, r0
 80058a0:	2900      	cmp	r1, #0
 80058a2:	d041      	beq.n	8005928 <_free_r+0x8c>
 80058a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058a8:	1f0c      	subs	r4, r1, #4
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	bfb8      	it	lt
 80058ae:	18e4      	addlt	r4, r4, r3
 80058b0:	f000 f83e 	bl	8005930 <__malloc_lock>
 80058b4:	4a1d      	ldr	r2, [pc, #116]	@ (800592c <_free_r+0x90>)
 80058b6:	6813      	ldr	r3, [r2, #0]
 80058b8:	b933      	cbnz	r3, 80058c8 <_free_r+0x2c>
 80058ba:	6063      	str	r3, [r4, #4]
 80058bc:	6014      	str	r4, [r2, #0]
 80058be:	4628      	mov	r0, r5
 80058c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058c4:	f000 b83a 	b.w	800593c <__malloc_unlock>
 80058c8:	42a3      	cmp	r3, r4
 80058ca:	d908      	bls.n	80058de <_free_r+0x42>
 80058cc:	6820      	ldr	r0, [r4, #0]
 80058ce:	1821      	adds	r1, r4, r0
 80058d0:	428b      	cmp	r3, r1
 80058d2:	bf01      	itttt	eq
 80058d4:	6819      	ldreq	r1, [r3, #0]
 80058d6:	685b      	ldreq	r3, [r3, #4]
 80058d8:	1809      	addeq	r1, r1, r0
 80058da:	6021      	streq	r1, [r4, #0]
 80058dc:	e7ed      	b.n	80058ba <_free_r+0x1e>
 80058de:	461a      	mov	r2, r3
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	b10b      	cbz	r3, 80058e8 <_free_r+0x4c>
 80058e4:	42a3      	cmp	r3, r4
 80058e6:	d9fa      	bls.n	80058de <_free_r+0x42>
 80058e8:	6811      	ldr	r1, [r2, #0]
 80058ea:	1850      	adds	r0, r2, r1
 80058ec:	42a0      	cmp	r0, r4
 80058ee:	d10b      	bne.n	8005908 <_free_r+0x6c>
 80058f0:	6820      	ldr	r0, [r4, #0]
 80058f2:	4401      	add	r1, r0
 80058f4:	1850      	adds	r0, r2, r1
 80058f6:	4283      	cmp	r3, r0
 80058f8:	6011      	str	r1, [r2, #0]
 80058fa:	d1e0      	bne.n	80058be <_free_r+0x22>
 80058fc:	6818      	ldr	r0, [r3, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	6053      	str	r3, [r2, #4]
 8005902:	4408      	add	r0, r1
 8005904:	6010      	str	r0, [r2, #0]
 8005906:	e7da      	b.n	80058be <_free_r+0x22>
 8005908:	d902      	bls.n	8005910 <_free_r+0x74>
 800590a:	230c      	movs	r3, #12
 800590c:	602b      	str	r3, [r5, #0]
 800590e:	e7d6      	b.n	80058be <_free_r+0x22>
 8005910:	6820      	ldr	r0, [r4, #0]
 8005912:	1821      	adds	r1, r4, r0
 8005914:	428b      	cmp	r3, r1
 8005916:	bf04      	itt	eq
 8005918:	6819      	ldreq	r1, [r3, #0]
 800591a:	685b      	ldreq	r3, [r3, #4]
 800591c:	6063      	str	r3, [r4, #4]
 800591e:	bf04      	itt	eq
 8005920:	1809      	addeq	r1, r1, r0
 8005922:	6021      	streq	r1, [r4, #0]
 8005924:	6054      	str	r4, [r2, #4]
 8005926:	e7ca      	b.n	80058be <_free_r+0x22>
 8005928:	bd38      	pop	{r3, r4, r5, pc}
 800592a:	bf00      	nop
 800592c:	2000433c 	.word	0x2000433c

08005930 <__malloc_lock>:
 8005930:	4801      	ldr	r0, [pc, #4]	@ (8005938 <__malloc_lock+0x8>)
 8005932:	f7ff bfa3 	b.w	800587c <__retarget_lock_acquire_recursive>
 8005936:	bf00      	nop
 8005938:	20004338 	.word	0x20004338

0800593c <__malloc_unlock>:
 800593c:	4801      	ldr	r0, [pc, #4]	@ (8005944 <__malloc_unlock+0x8>)
 800593e:	f7ff bf9e 	b.w	800587e <__retarget_lock_release_recursive>
 8005942:	bf00      	nop
 8005944:	20004338 	.word	0x20004338

08005948 <_init>:
 8005948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594a:	bf00      	nop
 800594c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800594e:	bc08      	pop	{r3}
 8005950:	469e      	mov	lr, r3
 8005952:	4770      	bx	lr

08005954 <_fini>:
 8005954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005956:	bf00      	nop
 8005958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800595a:	bc08      	pop	{r3}
 800595c:	469e      	mov	lr, r3
 800595e:	4770      	bx	lr
