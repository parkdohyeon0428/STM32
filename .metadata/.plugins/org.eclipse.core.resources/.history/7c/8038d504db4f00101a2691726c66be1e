
#include "FND.h"

static void FND_DispOff(int fndPos);
static void FND_DispOn(int fndPos);
static void FND_DispDigit(uint16_t digit);
static void FND_DispOffAll();

enum {
   DIGIT_1, DIGIT_10, DIGIT_100, DIGIT_1000
};

typedef struct {
   GPIO_TypeDef *GPIOx;
   uint32_t pinNum;
} FND_TypeDef;

FND_TypeDef fndDigitCom[4] = {
		{ GPIOA, GPIO_PIN_12 },
		{ GPIOC, GPIO_PIN_5 },
		{ GPIOC, GPIO_PIN_6 },
		{ GPIOC, GPIO_PIN_8 }
};

FND_TypeDef fndPin[8] = {
      { GPIOA, GPIO_PIN_11 }, //A
      { GPIOB, GPIO_PIN_12 }, //B
      { GPIOB, GPIO_PIN_2 }, //C
      { GPIOB, GPIO_PIN_1 }, //D
      { GPIOB, GPIO_PIN_15 }, //E
      { GPIOB, GPIO_PIN_14 }, //F
      { GPIOB, GPIO_PIN_13 }, //G
      { GPIOC, GPIO_PIN_4 } //Dp
};

static uint16_t fndDispNum = 0; //fnd에 출력되는 숫자

//write fndDispNum
void FND_WriteData(uint16_t data) {
   fndDispNum = data;
}

//read fndDispNum
uint16_t FND_ReadData() {
   return fndDispNum;
}

//display fndDispNum
void FND_DispData() {
   static int digitPos = 0;
   //인터럽트가 발생하면 한 자리씩 출력한다.

   switch (digitPos) {
      case DIGIT_1:
      FND_DispOffAll();
      FND_DispDigit(fndDispNum % 10);
      FND_DispOn(digitPos);
      break;
      case DIGIT_10:
      FND_DispOffAll();
      FND_DispDigit(fndDispNum / 10 % 10);
      FND_DispOn(digitPos);
      break;
      case DIGIT_100:
      FND_DispOffAll();
      FND_DispDigit(fndDispNum / 100 % 10);
      FND_DispOn(digitPos);
      break;
      case DIGIT_1000:
      FND_DispOffAll();
      FND_DispDigit(fndDispNum / 1000 % 10);
      FND_DispOn(digitPos);
      break;
   }
   digitPos = (digitPos + 1) % 4;
}

//void FND_DispOff(int fndPos) {
//   HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, SET);
//}

void FND_DispOn(int fndPos) {
   HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, RESET);
}

void FND_DispOffAll() {
   for (int i = 0; i < 4; i++) {
      HAL_GPIO_WritePin(fndDigitCom[i].GPIOx, fndDigitCom[i].pinNum, SET);
   }
}

void FND_DispDigit(uint16_t digit) {

      const uint8_t segFont[10] = {
            0x3F,
            0x06,
            0x5B,
            0x4F,
            0x66,
            0x6D,
            0x7D,
            0x07,
            0x7F,
            0x6F
      };
   for (int i = 0; i < 8; i++) {
      if (!(segFont[digit] & (1 << i))) {
         HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, RESET);
      } else {
         HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, SET);
      }
   }
}


