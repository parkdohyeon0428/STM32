/*
 * FND.c
 *
 *  Created on: Jun 20, 2025
 *      Author: kccistc
 */

#include "FND.h"

enum {DIGIT_1, DIGIT_10, DIGIT_100, DIGIT_1000, DIGIT_DP_1, DIGIT_DP_10, DIGIT_DP_100, DIGIT_DP_1000};

typedef struct {
   GPIO_TypeDef *GPIOx;
   uint32_t pinNum;
}FND_TypeDef;

FND_TypeDef fndDigitCom[4] = {
      {GPIOA, GPIO_PIN_12},
      {GPIOC, GPIO_PIN_5},
      {GPIOC, GPIO_PIN_6},
      {GPIOC, GPIO_PIN_8}
};

FND_TypeDef fndPin[8] = {
      {GPIOA, GPIO_PIN_11},
      {GPIOB, GPIO_PIN_12},
      {GPIOB, GPIO_PIN_2},
      {GPIOB, GPIO_PIN_1},
      {GPIOB, GPIO_PIN_15},
      {GPIOB, GPIO_PIN_14},
      {GPIOB, GPIO_PIN_13},
      {GPIOC, GPIO_PIN_4}
};

//static void FND_DispOff(int fndPos);
static void FND_DispOn(int fndPos);
static void FND_DispDigit(uint16_t digit);
void FND_DispOffAll();

static uint16_t fndDispNum = 0; //fnd에 출력되는 display main data // 외부에서 사용하는게 아니니 static을 붙여 외부에서 접근 못하게함
static uint8_t fndDispDp = 0; // fnd dp data, xxxx1111 -> 1111이 dp위치 xxxx4비트는 필요없음
                     // xxxx_dp1000_dp100_dp10_dp1



void FND_WriteDp(uint8_t dpData, uint8_t dpState)
{
   if (dpState == FND_DP_ON)
      fndDispDp |= dpData;
   else
      fndDispDp &= ~dpData;
}

// write fndDispNum
void FND_WriteData(uint16_t data)
{
   fndDispNum = data;
}

// read fndDispNum
uint16_t FND_ReadData()
{
   return fndDispNum;
}

// display fndDispNum
void FND_DispDataCallBack()
{
   static int digitPos = 0; // digit의 위치 자리
   // 인터럽트가 발생하면 한 자리씩 출력한다.
   digitPos = (digitPos+1) % 8;


   switch(digitPos)
   {
   case DIGIT_1:
      FND_DispOffAll();
      FND_DispDigit(fndDispNum%10);
      FND_DispOn(digitPos);
      break;
   case DIGIT_10:
      //FND_DispOff(digitPos);
      FND_DispOffAll();
      FND_DispDigit(fndDispNum/10%10);
      FND_DispOn(digitPos);
      break;
   case DIGIT_100:
      FND_DispOffAll();
      FND_DispDigit(fndDispNum/100%10);
      FND_DispOn(digitPos);
      break;
   case DIGIT_1000:
      //FND_DispOff(digitPos);
      FND_DispOffAll();
      FND_DispDigit(fndDispNum/1000%10);
      FND_DispOn(digitPos);
      break;

   case DIGIT_DP_1:
      FND_DispOffAll();
      if(fndDispDp & (1<<0)){
         FND_DispDigit(10);
      }
      else {
         FND_DispDigit(11);
      }
      FND_DispOn(digitPos%4);
      break;
   case DIGIT_DP_10:
      //FND_DispOff(digitPos);
      FND_DispOffAll();
      if(fndDispDp & (1<<1)){
         FND_DispDigit(10);
      }
      else {
         FND_DispDigit(11);
      }
      FND_DispOn(digitPos%4);
      break;
   case DIGIT_DP_100:
      FND_DispOffAll();
      if(fndDispDp & (1<<2)){
         FND_DispDigit(10);
      }
      else {
         FND_DispDigit(11);
      }
      FND_DispOn(digitPos%4);
      break;
   case DIGIT_DP_1000:
      //FND_DispOff(digitPos);
      FND_DispOffAll();
      if(fndDispDp & (1<<3)){
         FND_DispDigit(10);
      }
      else {
         FND_DispDigit(11);
      }
      FND_DispOn(digitPos%4);
      break;
   }

}

/*
void FND_DispOff(int fndPos)
{
   // GPIO_Write(GPIOx, Pin, SET);
   HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, RESET);
}
*/

void FND_DispOn(int fndPos)
{
   // GPIO_Write(GPIOx, Pin, RESET);
   HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, RESET);
}

void FND_DispOffAll()
{
   for(int i=0; i<4; i++){
      HAL_GPIO_WritePin(fndDigitCom[i].GPIOx, fndDigitCom[i].pinNum, SET);
   }
}

void FND_DispDigit(uint16_t digit)
{
   const uint8_t segFont[12] = {
         0x3F, // 0 0011 1111 < 뒤에서부터 읽어오는데 아래에서 set, reset 반대로 설정했음
         0x06, // 1 0000 0110
         0x5B, // 2
         0x4F, // 3
         0x66, // 4
         0x6D, // 5
         0x7D, // 6
         0x07, // 7
         0x7F, // 8
         0x6F, // 9
         0x80, //DP 1000 0000
         0x00 // DP OFF
   };

   for (int i=0; i<8; i++){
      if (!(segFont[digit] & (1<<i))) {
         HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, SET);
      }
      else {
         HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, RESET);
      }
   }
}
