/*
 * Button.c
 *
 *  Created on: Jun 19, 2025
 *      Author: kccistc
 */
#include "Button.h"

enum {PUSHED=0, RELEASED};

Button_Handler_t Button[4] = {
		{GPIOC, 13, 1},
		{GPIOB, 5, 1},
		{GPIOB, 3, 1},
		{GPIOA, 10, 1}
};
//
//void Button_Init()
//{
//	for (int i=0; i<3; i++)
//		GPIO_Init(Button[i].GPIOx, Button[i].pinNum, INPUT);
//}
//
//button_state_t Button_GetState(int Button_num)
//{
//	static uint32_t prevState = Button[Button_num].prevState; // normal state
//	uint32_t curState;
//	curState = GPIO_ReadPin(Button[Button_num].GPIOx, Button[Button_num].pinNum);
//
//	if((prevState == RELEASED)&&(curState == PUSHED)){
//		delay(20); // debounce
//		prevState = PUSHED;
//		return ACT_PUSHED;
//	}
//	else if ((prevState == PUSHED)&&(curState == RELEASED)) {
//		delay(20); // debounce
//		prevState = RELEASED;
//		return ACT_RELEASED;
//	}
//	return NO_ACT;
//
//}

void Button_Init(Button_Handler_t *hbtn, GPIO_TypeDef *GPIOx, uint16_t pinNum)
{
	hbtn->GPIOx = GPIOx;
	hbtn->pinNum = pinNum;
	hbtn->prevState = RELEASED;
}


button_state_t Button_GetState(Button_Handler_t *hbtn)
{
	uint32_t curState;
	curState = HAL_GPIO_ReadPin(hbtn->GPIOx, hbtn->pinNum);

	if((hbtn->prevState == RELEASED)&&(curState == PUSHED)){
		HAL_Delay(2); // debounce
		hbtn->prevState = PUSHED;
		return ACT_PUSHED;
	}
	else if ((hbtn->prevState == PUSHED)&&(curState == RELEASED)) {
		HAL_Delay(2); // debounce
		hbtn->prevState = RELEASED;
		return ACT_RELEASED;
	}
	return NO_ACT;
}
