
250625_TimeWatch_StopWatch_RX2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000584c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080059ec  080059ec  000069ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ab8  08005ab8  000070d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005ab8  08005ab8  00006ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ac0  08005ac0  000070d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ac0  08005ac0  00006ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ac4  08005ac4  00006ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d4  20000000  08005ac8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  200000d4  08005b9c  000070d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  08005b9c  00007384  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000070d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000131ca  00000000  00000000  00007104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000348c  00000000  00000000  0001a2ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  0001d760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e1a  00000000  00000000  0001e9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182e0  00000000  00000000  0001f7ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019720  00000000  00000000  00037a9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009162b  00000000  00000000  000511ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e27e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ec0  00000000  00000000  000e2828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000e76e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d4 	.word	0x200000d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080059d4 	.word	0x080059d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000d8 	.word	0x200000d8
 80001dc:	080059d4 	.word	0x080059d4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08a      	sub	sp, #40	@ 0x28
 80005c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
 80005d6:	4b49      	ldr	r3, [pc, #292]	@ (80006fc <MX_GPIO_Init+0x140>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	4a48      	ldr	r2, [pc, #288]	@ (80006fc <MX_GPIO_Init+0x140>)
 80005dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e2:	4b46      	ldr	r3, [pc, #280]	@ (80006fc <MX_GPIO_Init+0x140>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005ea:	613b      	str	r3, [r7, #16]
 80005ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	4b42      	ldr	r3, [pc, #264]	@ (80006fc <MX_GPIO_Init+0x140>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	4a41      	ldr	r2, [pc, #260]	@ (80006fc <MX_GPIO_Init+0x140>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fe:	4b3f      	ldr	r3, [pc, #252]	@ (80006fc <MX_GPIO_Init+0x140>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	4b3b      	ldr	r3, [pc, #236]	@ (80006fc <MX_GPIO_Init+0x140>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	4a3a      	ldr	r2, [pc, #232]	@ (80006fc <MX_GPIO_Init+0x140>)
 8000614:	f043 0304 	orr.w	r3, r3, #4
 8000618:	6313      	str	r3, [r2, #48]	@ 0x30
 800061a:	4b38      	ldr	r3, [pc, #224]	@ (80006fc <MX_GPIO_Init+0x140>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	f003 0304 	and.w	r3, r3, #4
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	4b34      	ldr	r3, [pc, #208]	@ (80006fc <MX_GPIO_Init+0x140>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	4a33      	ldr	r2, [pc, #204]	@ (80006fc <MX_GPIO_Init+0x140>)
 8000630:	f043 0302 	orr.w	r3, r3, #2
 8000634:	6313      	str	r3, [r2, #48]	@ 0x30
 8000636:	4b31      	ldr	r3, [pc, #196]	@ (80006fc <MX_GPIO_Init+0x140>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	f003 0302 	and.w	r3, r3, #2
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 8000648:	482d      	ldr	r0, [pc, #180]	@ (8000700 <MX_GPIO_Init+0x144>)
 800064a:	f001 ff33 	bl	80024b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 800064e:	2200      	movs	r2, #0
 8000650:	f24f 0106 	movw	r1, #61446	@ 0xf006
 8000654:	482b      	ldr	r0, [pc, #172]	@ (8000704 <MX_GPIO_Init+0x148>)
 8000656:	f001 ff2d 	bl	80024b4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8000660:	4829      	ldr	r0, [pc, #164]	@ (8000708 <MX_GPIO_Init+0x14c>)
 8000662:	f001 ff27 	bl	80024b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC4 PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 8000666:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 800066a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066c:	2301      	movs	r3, #1
 800066e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000674:	2300      	movs	r3, #0
 8000676:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	4619      	mov	r1, r3
 800067e:	4820      	ldr	r0, [pc, #128]	@ (8000700 <MX_GPIO_Init+0x144>)
 8000680:	f001 fd7c 	bl	800217c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8000684:	f24f 0306 	movw	r3, #61446	@ 0xf006
 8000688:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068a:	2301      	movs	r3, #1
 800068c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000692:	2300      	movs	r3, #0
 8000694:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	4819      	ldr	r0, [pc, #100]	@ (8000704 <MX_GPIO_Init+0x148>)
 800069e:	f001 fd6d 	bl	800217c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	4619      	mov	r1, r3
 80006b6:	4814      	ldr	r0, [pc, #80]	@ (8000708 <MX_GPIO_Init+0x14c>)
 80006b8:	f001 fd60 	bl	800217c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80006bc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80006c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c2:	2301      	movs	r3, #1
 80006c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ca:	2300      	movs	r3, #0
 80006cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	4619      	mov	r1, r3
 80006d4:	480c      	ldr	r0, [pc, #48]	@ (8000708 <MX_GPIO_Init+0x14c>)
 80006d6:	f001 fd51 	bl	800217c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80006da:	2328      	movs	r3, #40	@ 0x28
 80006dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006de:	2300      	movs	r3, #0
 80006e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	4619      	mov	r1, r3
 80006ec:	4805      	ldr	r0, [pc, #20]	@ (8000704 <MX_GPIO_Init+0x148>)
 80006ee:	f001 fd45 	bl	800217c <HAL_GPIO_Init>

}
 80006f2:	bf00      	nop
 80006f4:	3728      	adds	r7, #40	@ 0x28
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40020800 	.word	0x40020800
 8000704:	40020400 	.word	0x40020400
 8000708:	40020000 	.word	0x40020000

0800070c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000710:	4b12      	ldr	r3, [pc, #72]	@ (800075c <MX_I2C1_Init+0x50>)
 8000712:	4a13      	ldr	r2, [pc, #76]	@ (8000760 <MX_I2C1_Init+0x54>)
 8000714:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000716:	4b11      	ldr	r3, [pc, #68]	@ (800075c <MX_I2C1_Init+0x50>)
 8000718:	4a12      	ldr	r2, [pc, #72]	@ (8000764 <MX_I2C1_Init+0x58>)
 800071a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800071c:	4b0f      	ldr	r3, [pc, #60]	@ (800075c <MX_I2C1_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000722:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <MX_I2C1_Init+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000728:	4b0c      	ldr	r3, [pc, #48]	@ (800075c <MX_I2C1_Init+0x50>)
 800072a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800072e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000730:	4b0a      	ldr	r3, [pc, #40]	@ (800075c <MX_I2C1_Init+0x50>)
 8000732:	2200      	movs	r2, #0
 8000734:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000736:	4b09      	ldr	r3, [pc, #36]	@ (800075c <MX_I2C1_Init+0x50>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800073c:	4b07      	ldr	r3, [pc, #28]	@ (800075c <MX_I2C1_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000742:	4b06      	ldr	r3, [pc, #24]	@ (800075c <MX_I2C1_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000748:	4804      	ldr	r0, [pc, #16]	@ (800075c <MX_I2C1_Init+0x50>)
 800074a:	f001 fecd 	bl	80024e8 <HAL_I2C_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000754:	f000 f8cc 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	200000f0 	.word	0x200000f0
 8000760:	40005400 	.word	0x40005400
 8000764:	000186a0 	.word	0x000186a0

08000768 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08a      	sub	sp, #40	@ 0x28
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a19      	ldr	r2, [pc, #100]	@ (80007ec <HAL_I2C_MspInit+0x84>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d12c      	bne.n	80007e4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	4b18      	ldr	r3, [pc, #96]	@ (80007f0 <HAL_I2C_MspInit+0x88>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a17      	ldr	r2, [pc, #92]	@ (80007f0 <HAL_I2C_MspInit+0x88>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b15      	ldr	r3, [pc, #84]	@ (80007f0 <HAL_I2C_MspInit+0x88>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007a6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ac:	2312      	movs	r3, #18
 80007ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b4:	2303      	movs	r3, #3
 80007b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007b8:	2304      	movs	r3, #4
 80007ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4619      	mov	r1, r3
 80007c2:	480c      	ldr	r0, [pc, #48]	@ (80007f4 <HAL_I2C_MspInit+0x8c>)
 80007c4:	f001 fcda 	bl	800217c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007c8:	2300      	movs	r3, #0
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <HAL_I2C_MspInit+0x88>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d0:	4a07      	ldr	r2, [pc, #28]	@ (80007f0 <HAL_I2C_MspInit+0x88>)
 80007d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80007d8:	4b05      	ldr	r3, [pc, #20]	@ (80007f0 <HAL_I2C_MspInit+0x88>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007e4:	bf00      	nop
 80007e6:	3728      	adds	r7, #40	@ 0x28
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40005400 	.word	0x40005400
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40020400 	.word	0x40020400

080007f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fc:	f001 fa84 	bl	8001d08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000800:	f000 f80e 	bl	8000820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000804:	f7ff feda 	bl	80005bc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000808:	f000 f92c 	bl	8000a64 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800080c:	f000 f99c 	bl	8000b48 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000810:	f7ff ff7c 	bl	800070c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ap_init();
 8000814:	f000 fd3a 	bl	800128c <ap_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ap_main();
 8000818:	f000 fd16 	bl	8001248 <ap_main>
 800081c:	e7fc      	b.n	8000818 <main+0x20>
	...

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b094      	sub	sp, #80	@ 0x50
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	f107 0320 	add.w	r3, r7, #32
 800082a:	2230      	movs	r2, #48	@ 0x30
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f004 fc52 	bl	80050d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	4b27      	ldr	r3, [pc, #156]	@ (80008e8 <SystemClock_Config+0xc8>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084c:	4a26      	ldr	r2, [pc, #152]	@ (80008e8 <SystemClock_Config+0xc8>)
 800084e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000852:	6413      	str	r3, [r2, #64]	@ 0x40
 8000854:	4b24      	ldr	r3, [pc, #144]	@ (80008e8 <SystemClock_Config+0xc8>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000858:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000860:	2300      	movs	r3, #0
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	4b21      	ldr	r3, [pc, #132]	@ (80008ec <SystemClock_Config+0xcc>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a20      	ldr	r2, [pc, #128]	@ (80008ec <SystemClock_Config+0xcc>)
 800086a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800086e:	6013      	str	r3, [r2, #0]
 8000870:	4b1e      	ldr	r3, [pc, #120]	@ (80008ec <SystemClock_Config+0xcc>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800087c:	2301      	movs	r3, #1
 800087e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000880:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000884:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000886:	2302      	movs	r3, #2
 8000888:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800088a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800088e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000890:	2304      	movs	r3, #4
 8000892:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000894:	2364      	movs	r3, #100	@ 0x64
 8000896:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000898:	2302      	movs	r3, #2
 800089a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800089c:	2304      	movs	r3, #4
 800089e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a0:	f107 0320 	add.w	r3, r7, #32
 80008a4:	4618      	mov	r0, r3
 80008a6:	f002 fabd 	bl	8002e24 <HAL_RCC_OscConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008b0:	f000 f81e 	bl	80008f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b4:	230f      	movs	r3, #15
 80008b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b8:	2302      	movs	r3, #2
 80008ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	2103      	movs	r1, #3
 80008d0:	4618      	mov	r0, r3
 80008d2:	f002 fd1f 	bl	8003314 <HAL_RCC_ClockConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008dc:	f000 f808 	bl	80008f0 <Error_Handler>
  }
}
 80008e0:	bf00      	nop
 80008e2:	3750      	adds	r7, #80	@ 0x50
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40007000 	.word	0x40007000

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <Error_Handler+0x8>

080008fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	4b10      	ldr	r3, [pc, #64]	@ (8000948 <HAL_MspInit+0x4c>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800090a:	4a0f      	ldr	r2, [pc, #60]	@ (8000948 <HAL_MspInit+0x4c>)
 800090c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000910:	6453      	str	r3, [r2, #68]	@ 0x44
 8000912:	4b0d      	ldr	r3, [pc, #52]	@ (8000948 <HAL_MspInit+0x4c>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000916:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	603b      	str	r3, [r7, #0]
 8000922:	4b09      	ldr	r3, [pc, #36]	@ (8000948 <HAL_MspInit+0x4c>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000926:	4a08      	ldr	r2, [pc, #32]	@ (8000948 <HAL_MspInit+0x4c>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800092c:	6413      	str	r3, [r2, #64]	@ 0x40
 800092e:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <HAL_MspInit+0x4c>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800

0800094c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <NMI_Handler+0x4>

08000954 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <HardFault_Handler+0x4>

0800095c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <MemManage_Handler+0x4>

08000964 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <BusFault_Handler+0x4>

0800096c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <UsageFault_Handler+0x4>

08000974 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a2:	f001 fa03 	bl	8001dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
	...

080009ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009b0:	4802      	ldr	r0, [pc, #8]	@ (80009bc <TIM2_IRQHandler+0x10>)
 80009b2:	f002 ff81 	bl	80038b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000148 	.word	0x20000148

080009c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009c4:	4802      	ldr	r0, [pc, #8]	@ (80009d0 <USART2_IRQHandler+0x10>)
 80009c6:	f003 fbf9 	bl	80041bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000190 	.word	0x20000190

080009d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009dc:	4a14      	ldr	r2, [pc, #80]	@ (8000a30 <_sbrk+0x5c>)
 80009de:	4b15      	ldr	r3, [pc, #84]	@ (8000a34 <_sbrk+0x60>)
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009e8:	4b13      	ldr	r3, [pc, #76]	@ (8000a38 <_sbrk+0x64>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d102      	bne.n	80009f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009f0:	4b11      	ldr	r3, [pc, #68]	@ (8000a38 <_sbrk+0x64>)
 80009f2:	4a12      	ldr	r2, [pc, #72]	@ (8000a3c <_sbrk+0x68>)
 80009f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009f6:	4b10      	ldr	r3, [pc, #64]	@ (8000a38 <_sbrk+0x64>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4413      	add	r3, r2
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d207      	bcs.n	8000a14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a04:	f004 fb70 	bl	80050e8 <__errno>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a12:	e009      	b.n	8000a28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a14:	4b08      	ldr	r3, [pc, #32]	@ (8000a38 <_sbrk+0x64>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a1a:	4b07      	ldr	r3, [pc, #28]	@ (8000a38 <_sbrk+0x64>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	4a05      	ldr	r2, [pc, #20]	@ (8000a38 <_sbrk+0x64>)
 8000a24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a26:	68fb      	ldr	r3, [r7, #12]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3718      	adds	r7, #24
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20020000 	.word	0x20020000
 8000a34:	00000400 	.word	0x00000400
 8000a38:	20000144 	.word	0x20000144
 8000a3c:	20000388 	.word	0x20000388

08000a40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a44:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <SystemInit+0x20>)
 8000a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a4a:	4a05      	ldr	r2, [pc, #20]	@ (8000a60 <SystemInit+0x20>)
 8000a4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a6a:	f107 0308 	add.w	r3, r7, #8
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a78:	463b      	mov	r3, r7
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a80:	4b1d      	ldr	r3, [pc, #116]	@ (8000af8 <MX_TIM2_Init+0x94>)
 8000a82:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8000a88:	4b1b      	ldr	r3, [pc, #108]	@ (8000af8 <MX_TIM2_Init+0x94>)
 8000a8a:	2263      	movs	r2, #99	@ 0x63
 8000a8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000af8 <MX_TIM2_Init+0x94>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000a94:	4b18      	ldr	r3, [pc, #96]	@ (8000af8 <MX_TIM2_Init+0x94>)
 8000a96:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a9c:	4b16      	ldr	r3, [pc, #88]	@ (8000af8 <MX_TIM2_Init+0x94>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa2:	4b15      	ldr	r3, [pc, #84]	@ (8000af8 <MX_TIM2_Init+0x94>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000aa8:	4813      	ldr	r0, [pc, #76]	@ (8000af8 <MX_TIM2_Init+0x94>)
 8000aaa:	f002 fe53 	bl	8003754 <HAL_TIM_Base_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ab4:	f7ff ff1c 	bl	80008f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ab8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000abc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000abe:	f107 0308 	add.w	r3, r7, #8
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	480c      	ldr	r0, [pc, #48]	@ (8000af8 <MX_TIM2_Init+0x94>)
 8000ac6:	f002 ffe7 	bl	8003a98 <HAL_TIM_ConfigClockSource>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ad0:	f7ff ff0e 	bl	80008f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000adc:	463b      	mov	r3, r7
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4805      	ldr	r0, [pc, #20]	@ (8000af8 <MX_TIM2_Init+0x94>)
 8000ae2:	f003 f9e9 	bl	8003eb8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000aec:	f7ff ff00 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000148 	.word	0x20000148

08000afc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b0c:	d115      	bne.n	8000b3a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <HAL_TIM_Base_MspInit+0x48>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b16:	4a0b      	ldr	r2, [pc, #44]	@ (8000b44 <HAL_TIM_Base_MspInit+0x48>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b1e:	4b09      	ldr	r3, [pc, #36]	@ (8000b44 <HAL_TIM_Base_MspInit+0x48>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	201c      	movs	r0, #28
 8000b30:	f001 fa5b 	bl	8001fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b34:	201c      	movs	r0, #28
 8000b36:	f001 fa74 	bl	8002022 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000b3a:	bf00      	nop
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800

08000b48 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b4e:	4a12      	ldr	r2, [pc, #72]	@ (8000b98 <MX_USART2_UART_Init+0x50>)
 8000b50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b52:	4b10      	ldr	r3, [pc, #64]	@ (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	@ (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	@ (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b6c:	4b09      	ldr	r3, [pc, #36]	@ (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b6e:	220c      	movs	r2, #12
 8000b70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b72:	4b08      	ldr	r3, [pc, #32]	@ (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b78:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b7e:	4805      	ldr	r0, [pc, #20]	@ (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b80:	f003 fa1c 	bl	8003fbc <HAL_UART_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b8a:	f7ff feb1 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000190 	.word	0x20000190
 8000b98:	40004400 	.word	0x40004400

08000b9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	@ 0x28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a1d      	ldr	r2, [pc, #116]	@ (8000c30 <HAL_UART_MspInit+0x94>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d133      	bne.n	8000c26 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c34 <HAL_UART_MspInit+0x98>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc6:	4a1b      	ldr	r2, [pc, #108]	@ (8000c34 <HAL_UART_MspInit+0x98>)
 8000bc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bce:	4b19      	ldr	r3, [pc, #100]	@ (8000c34 <HAL_UART_MspInit+0x98>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	4b15      	ldr	r3, [pc, #84]	@ (8000c34 <HAL_UART_MspInit+0x98>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	4a14      	ldr	r2, [pc, #80]	@ (8000c34 <HAL_UART_MspInit+0x98>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bea:	4b12      	ldr	r3, [pc, #72]	@ (8000c34 <HAL_UART_MspInit+0x98>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c02:	2303      	movs	r3, #3
 8000c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c06:	2307      	movs	r3, #7
 8000c08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4809      	ldr	r0, [pc, #36]	@ (8000c38 <HAL_UART_MspInit+0x9c>)
 8000c12:	f001 fab3 	bl	800217c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2100      	movs	r1, #0
 8000c1a:	2026      	movs	r0, #38	@ 0x26
 8000c1c:	f001 f9e5 	bl	8001fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c20:	2026      	movs	r0, #38	@ 0x26
 8000c22:	f001 f9fe 	bl	8002022 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c26:	bf00      	nop
 8000c28:	3728      	adds	r7, #40	@ 0x28
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40004400 	.word	0x40004400
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40020000 	.word	0x40020000

08000c3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c40:	f7ff fefe 	bl	8000a40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c44:	480c      	ldr	r0, [pc, #48]	@ (8000c78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c46:	490d      	ldr	r1, [pc, #52]	@ (8000c7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c48:	4a0d      	ldr	r2, [pc, #52]	@ (8000c80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c4c:	e002      	b.n	8000c54 <LoopCopyDataInit>

08000c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c52:	3304      	adds	r3, #4

08000c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c58:	d3f9      	bcc.n	8000c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c5c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c60:	e001      	b.n	8000c66 <LoopFillZerobss>

08000c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c64:	3204      	adds	r2, #4

08000c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c68:	d3fb      	bcc.n	8000c62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c6a:	f004 fa43 	bl	80050f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c6e:	f7ff fdc3 	bl	80007f8 <main>
  bx  lr    
 8000c72:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c7c:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8000c80:	08005ac8 	.word	0x08005ac8
  ldr r2, =_sbss
 8000c84:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 8000c88:	20000384 	.word	0x20000384

08000c8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c8c:	e7fe      	b.n	8000c8c <ADC_IRQHandler>

08000c8e <Controller_Excute>:
static watchModeState_t modeState = S_TIME_WATCH;
void Controller_Mode();


void Controller_Excute()
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	af00      	add	r7, sp, #0
	Controller_Mode();
 8000c92:	f000 f82f 	bl	8000cf4 <Controller_Mode>
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <Controller_SetInputData>:

void Controller_SetInputData(inputData_TypeDef inputData)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	463b      	mov	r3, r7
 8000ca4:	e883 0003 	stmia.w	r3, {r0, r1}
	if (inputData.id == MODE) {
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d106      	bne.n	8000cbc <Controller_SetInputData+0x20>
		controlData.id = MODE;
 8000cae:	4b10      	ldr	r3, [pc, #64]	@ (8000cf0 <Controller_SetInputData+0x54>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	601a      	str	r2, [r3, #0]
		controlData.data = MODE_ACT;
 8000cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf0 <Controller_SetInputData+0x54>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	605a      	str	r2, [r3, #4]
	}
	else if (inputData.id == STOPWATCH_CLEAR) {
		controlData.id = STOPWATCH_CLEAR;
		controlData.data = MODE_ACT;
	}
}
 8000cba:	e012      	b.n	8000ce2 <Controller_SetInputData+0x46>
	else if (inputData.id == STOPWATCH_RUN_STOP) {
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	2b02      	cmp	r3, #2
 8000cc0:	d106      	bne.n	8000cd0 <Controller_SetInputData+0x34>
		controlData.id = STOPWATCH_RUN_STOP;
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf0 <Controller_SetInputData+0x54>)
 8000cc4:	2202      	movs	r2, #2
 8000cc6:	601a      	str	r2, [r3, #0]
		controlData.data = MODE_ACT;
 8000cc8:	4b09      	ldr	r3, [pc, #36]	@ (8000cf0 <Controller_SetInputData+0x54>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	605a      	str	r2, [r3, #4]
}
 8000cce:	e008      	b.n	8000ce2 <Controller_SetInputData+0x46>
	else if (inputData.id == STOPWATCH_CLEAR) {
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	2b03      	cmp	r3, #3
 8000cd4:	d105      	bne.n	8000ce2 <Controller_SetInputData+0x46>
		controlData.id = STOPWATCH_CLEAR;
 8000cd6:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <Controller_SetInputData+0x54>)
 8000cd8:	2203      	movs	r2, #3
 8000cda:	601a      	str	r2, [r3, #0]
		controlData.data = MODE_ACT;
 8000cdc:	4b04      	ldr	r3, [pc, #16]	@ (8000cf0 <Controller_SetInputData+0x54>)
 8000cde:	2201      	movs	r2, #1
 8000ce0:	605a      	str	r2, [r3, #4]
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	200001d8 	.word	0x200001d8

08000cf4 <Controller_Mode>:

void Controller_Mode()
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	switch(modeState)
 8000cf8:	4b11      	ldr	r3, [pc, #68]	@ (8000d40 <Controller_Mode+0x4c>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d002      	beq.n	8000d06 <Controller_Mode+0x12>
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d00d      	beq.n	8000d20 <Controller_Mode+0x2c>
			//FND_WriteDp(FND_DP_1000|FND_DP_100|FND_DP_10|FND_DP_1, FND_DP_OFF);
		}
		StopWatch_Excute();
		break;
	}
}
 8000d04:	e019      	b.n	8000d3a <Controller_Mode+0x46>
		if (controlData.id == MODE) {
 8000d06:	4b0f      	ldr	r3, [pc, #60]	@ (8000d44 <Controller_Mode+0x50>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d105      	bne.n	8000d1a <Controller_Mode+0x26>
			controlData.id = NO_CONTROL;
 8000d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d44 <Controller_Mode+0x50>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
			modeState = S_STOP_WATCH;
 8000d14:	4b0a      	ldr	r3, [pc, #40]	@ (8000d40 <Controller_Mode+0x4c>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
		TimeWatch_Excute();
 8000d1a:	f000 fc3f 	bl	800159c <TimeWatch_Excute>
		break;
 8000d1e:	e00c      	b.n	8000d3a <Controller_Mode+0x46>
		if (controlData.id == MODE) {
 8000d20:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <Controller_Mode+0x50>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d105      	bne.n	8000d34 <Controller_Mode+0x40>
			controlData.id = NO_CONTROL;
 8000d28:	4b06      	ldr	r3, [pc, #24]	@ (8000d44 <Controller_Mode+0x50>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
			modeState = S_TIME_WATCH;
 8000d2e:	4b04      	ldr	r3, [pc, #16]	@ (8000d40 <Controller_Mode+0x4c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	701a      	strb	r2, [r3, #0]
		StopWatch_Excute();
 8000d34:	f000 fb86 	bl	8001444 <StopWatch_Excute>
		break;
 8000d38:	bf00      	nop
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200001e0 	.word	0x200001e0
 8000d44:	200001d8 	.word	0x200001d8

08000d48 <Listener_Init>:
char uartRxBuff[QUE_SIZE];

//static uint8_t uartRcvFlag = 0;

void Listener_Init()
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
	Button_Init(&hBtnMode, GPIOB, GPIO_PIN_5);
 8000d4c:	2220      	movs	r2, #32
 8000d4e:	490e      	ldr	r1, [pc, #56]	@ (8000d88 <Listener_Init+0x40>)
 8000d50:	480e      	ldr	r0, [pc, #56]	@ (8000d8c <Listener_Init+0x44>)
 8000d52:	f000 fc2f 	bl	80015b4 <Button_Init>
	Button_Init(&hBtnRunStop, GPIOB, GPIO_PIN_3);
 8000d56:	2208      	movs	r2, #8
 8000d58:	490b      	ldr	r1, [pc, #44]	@ (8000d88 <Listener_Init+0x40>)
 8000d5a:	480d      	ldr	r0, [pc, #52]	@ (8000d90 <Listener_Init+0x48>)
 8000d5c:	f000 fc2a 	bl	80015b4 <Button_Init>
	Button_Init(&hBtnClear, GPIOA, GPIO_PIN_10);
 8000d60:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d64:	490b      	ldr	r1, [pc, #44]	@ (8000d94 <Listener_Init+0x4c>)
 8000d66:	480c      	ldr	r0, [pc, #48]	@ (8000d98 <Listener_Init+0x50>)
 8000d68:	f000 fc24 	bl	80015b4 <Button_Init>
	Que_Init(&uartRxQue);
 8000d6c:	480b      	ldr	r0, [pc, #44]	@ (8000d9c <Listener_Init+0x54>)
 8000d6e:	f000 fa95 	bl	800129c <Que_Init>
	LCD_Init(&hi2c1);
 8000d72:	480b      	ldr	r0, [pc, #44]	@ (8000da0 <Listener_Init+0x58>)
 8000d74:	f000 fe64 	bl	8001a40 <LCD_Init>
	HAL_UART_Receive_IT(&huart2, &rcvData, 1); // uart recv interrupt enable
 8000d78:	2201      	movs	r2, #1
 8000d7a:	490a      	ldr	r1, [pc, #40]	@ (8000da4 <Listener_Init+0x5c>)
 8000d7c:	480a      	ldr	r0, [pc, #40]	@ (8000da8 <Listener_Init+0x60>)
 8000d7e:	f003 f9f8 	bl	8004172 <HAL_UART_Receive_IT>
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40020400 	.word	0x40020400
 8000d8c:	20000204 	.word	0x20000204
 8000d90:	20000210 	.word	0x20000210
 8000d94:	40020000 	.word	0x40020000
 8000d98:	2000021c 	.word	0x2000021c
 8000d9c:	200001e4 	.word	0x200001e4
 8000da0:	200000f0 	.word	0x200000f0
 8000da4:	200001e1 	.word	0x200001e1
 8000da8:	20000190 	.word	0x20000190

08000dac <Listener_Excute>:

void Listener_Excute()
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
	Listener_CheckButton();
 8000db0:	f000 f804 	bl	8000dbc <Listener_CheckButton>
	Listener_CheckUart();
 8000db4:	f000 f84e 	bl	8000e54 <Listener_CheckUart>
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <Listener_CheckButton>:

void Listener_CheckButton()
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
	static uint32_t prevChkBtnTime = 0;
	uint32_t curTick = HAL_GetTick();
 8000dc2:	f001 f807 	bl	8001dd4 <HAL_GetTick>
 8000dc6:	60f8      	str	r0, [r7, #12]
	if (curTick - prevChkBtnTime < 100) {
 8000dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8000e44 <Listener_CheckButton+0x88>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	68fa      	ldr	r2, [r7, #12]
 8000dce:	1ad3      	subs	r3, r2, r3
 8000dd0:	2b63      	cmp	r3, #99	@ 0x63
 8000dd2:	d932      	bls.n	8000e3a <Listener_CheckButton+0x7e>
		return;
	}
	prevChkBtnTime = curTick; // 100ms 간격으로 밑 함수들 실행
 8000dd4:	4a1b      	ldr	r2, [pc, #108]	@ (8000e44 <Listener_CheckButton+0x88>)
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	6013      	str	r3, [r2, #0]

	inputData_TypeDef inputData;

	if (Button_GetState(&hBtnMode) == ACT_RELEASED) {
 8000dda:	481b      	ldr	r0, [pc, #108]	@ (8000e48 <Listener_CheckButton+0x8c>)
 8000ddc:	f000 fc00 	bl	80015e0 <Button_GetState>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d109      	bne.n	8000dfa <Listener_CheckButton+0x3e>
		inputData.id = MODE;
 8000de6:	2301      	movs	r3, #1
 8000de8:	607b      	str	r3, [r7, #4]
		inputData.data = STOPWATCH_ACT;
 8000dea:	2303      	movs	r3, #3
 8000dec:	60bb      	str	r3, [r7, #8]
		Controller_SetInputData(inputData);
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000df4:	f7ff ff52 	bl	8000c9c <Controller_SetInputData>
 8000df8:	e020      	b.n	8000e3c <Listener_CheckButton+0x80>
	}
	else if (Button_GetState(&hBtnRunStop) == ACT_PUSHED) {
 8000dfa:	4814      	ldr	r0, [pc, #80]	@ (8000e4c <Listener_CheckButton+0x90>)
 8000dfc:	f000 fbf0 	bl	80015e0 <Button_GetState>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d109      	bne.n	8000e1a <Listener_CheckButton+0x5e>
		inputData.id = STOPWATCH_RUN_STOP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	607b      	str	r3, [r7, #4]
		inputData.data = STOPWATCH_ACT;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	60bb      	str	r3, [r7, #8]
		Controller_SetInputData(inputData);
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000e14:	f7ff ff42 	bl	8000c9c <Controller_SetInputData>
 8000e18:	e010      	b.n	8000e3c <Listener_CheckButton+0x80>
	}
	else if (Button_GetState(&hBtnClear) == ACT_PUSHED) {
 8000e1a:	480d      	ldr	r0, [pc, #52]	@ (8000e50 <Listener_CheckButton+0x94>)
 8000e1c:	f000 fbe0 	bl	80015e0 <Button_GetState>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d10a      	bne.n	8000e3c <Listener_CheckButton+0x80>
		inputData.id = STOPWATCH_CLEAR;
 8000e26:	2303      	movs	r3, #3
 8000e28:	607b      	str	r3, [r7, #4]
		inputData.data = STOPWATCH_ACT;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	60bb      	str	r3, [r7, #8]
		Controller_SetInputData(inputData);
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000e34:	f7ff ff32 	bl	8000c9c <Controller_SetInputData>
 8000e38:	e000      	b.n	8000e3c <Listener_CheckButton+0x80>
		return;
 8000e3a:	bf00      	nop
	}
}
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	200001fc 	.word	0x200001fc
 8000e48:	20000204 	.word	0x20000204
 8000e4c:	20000210 	.word	0x20000210
 8000e50:	2000021c 	.word	0x2000021c

08000e54 <Listener_CheckUart>:

void Listener_CheckUart()
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0

	if (isQueEmpty(&uartRxQue)) {
 8000e5a:	4821      	ldr	r0, [pc, #132]	@ (8000ee0 <Listener_CheckUart+0x8c>)
 8000e5c:	f000 fa49 	bl	80012f2 <isQueEmpty>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d137      	bne.n	8000ed6 <Listener_CheckUart+0x82>
		return;
	}
	int uartRxData = deQue(&uartRxQue);
 8000e66:	481e      	ldr	r0, [pc, #120]	@ (8000ee0 <Listener_CheckUart+0x8c>)
 8000e68:	f000 fa79 	bl	800135e <deQue>
 8000e6c:	60f8      	str	r0, [r7, #12]

	inputData_TypeDef inputData;

	if (uartRxData == 'm') {
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	2b6d      	cmp	r3, #109	@ 0x6d
 8000e72:	d109      	bne.n	8000e88 <Listener_CheckUart+0x34>
		inputData.id = MODE;
 8000e74:	2301      	movs	r3, #1
 8000e76:	607b      	str	r3, [r7, #4]
		inputData.data = MODE_ACT;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	60bb      	str	r3, [r7, #8]
		Controller_SetInputData(inputData);
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000e82:	f7ff ff0b 	bl	8000c9c <Controller_SetInputData>
 8000e86:	e027      	b.n	8000ed8 <Listener_CheckUart+0x84>
	}
	else if (uartRxData == 'r'){
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	2b72      	cmp	r3, #114	@ 0x72
 8000e8c:	d109      	bne.n	8000ea2 <Listener_CheckUart+0x4e>
		inputData.id = STOPWATCH_RUN_STOP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	607b      	str	r3, [r7, #4]
		inputData.data = STOPWATCH_ACT;
 8000e92:	2303      	movs	r3, #3
 8000e94:	60bb      	str	r3, [r7, #8]
		Controller_SetInputData(inputData);
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000e9c:	f7ff fefe 	bl	8000c9c <Controller_SetInputData>
 8000ea0:	e01a      	b.n	8000ed8 <Listener_CheckUart+0x84>
	}
	else if (uartRxData == 's') {
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	2b73      	cmp	r3, #115	@ 0x73
 8000ea6:	d109      	bne.n	8000ebc <Listener_CheckUart+0x68>
		inputData.id = STOPWATCH_RUN_STOP;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	607b      	str	r3, [r7, #4]
		inputData.data = STOPWATCH_ACT;
 8000eac:	2303      	movs	r3, #3
 8000eae:	60bb      	str	r3, [r7, #8]
		Controller_SetInputData(inputData);
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000eb6:	f7ff fef1 	bl	8000c9c <Controller_SetInputData>
 8000eba:	e00d      	b.n	8000ed8 <Listener_CheckUart+0x84>
	}
	else if (uartRxData == 'c') {
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2b63      	cmp	r3, #99	@ 0x63
 8000ec0:	d10a      	bne.n	8000ed8 <Listener_CheckUart+0x84>
		inputData.id = STOPWATCH_CLEAR;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	607b      	str	r3, [r7, #4]
		inputData.data = STOPWATCH_ACT;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	60bb      	str	r3, [r7, #8]
		Controller_SetInputData(inputData);
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ed0:	f7ff fee4 	bl	8000c9c <Controller_SetInputData>
 8000ed4:	e000      	b.n	8000ed8 <Listener_CheckUart+0x84>
		return;
 8000ed6:	bf00      	nop
	}
}
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200001e4 	.word	0x200001e4

08000ee4 <Listener_UartCallBack>:


void Listener_UartCallBack()
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
	enQue(&uartRxQue, rcvData);
 8000ee8:	4b06      	ldr	r3, [pc, #24]	@ (8000f04 <Listener_UartCallBack+0x20>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	4619      	mov	r1, r3
 8000eee:	4806      	ldr	r0, [pc, #24]	@ (8000f08 <Listener_UartCallBack+0x24>)
 8000ef0:	f000 fa12 	bl	8001318 <enQue>
	HAL_UART_Receive_IT(&huart2, &rcvData, 1);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	4903      	ldr	r1, [pc, #12]	@ (8000f04 <Listener_UartCallBack+0x20>)
 8000ef8:	4804      	ldr	r0, [pc, #16]	@ (8000f0c <Listener_UartCallBack+0x28>)
 8000efa:	f003 f93a 	bl	8004172 <HAL_UART_Receive_IT>
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	200001e1 	.word	0x200001e1
 8000f08:	200001e4 	.word	0x200001e4
 8000f0c:	20000190 	.word	0x20000190

08000f10 <Presenter_Init>:
static void Presenter_LCD_StopWatch(watch_t watchData);

static watch_t dispData = {TIME_WATCH,12,0,0,0};

void Presenter_Init()
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0

}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
	...

08000f20 <Presenter_OutData>:

void Presenter_OutData(watch_t watchData)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	463b      	mov	r3, r7
 8000f28:	e883 0003 	stmia.w	r3, {r0, r1}
   memcpy(&dispData, &watchData, sizeof(watch_t)); // data copy (watchData -> dispData)
 8000f2c:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <Presenter_OutData+0x28>)
 8000f2e:	463a      	mov	r2, r7
 8000f30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f34:	6018      	str	r0, [r3, #0]
 8000f36:	3304      	adds	r3, #4
 8000f38:	8019      	strh	r1, [r3, #0]
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000004 	.word	0x20000004

08000f4c <Presenter_Excute>:

void Presenter_Excute()
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0



   if (dispData.id == TIME_WATCH) {
 8000f50:	4b08      	ldr	r3, [pc, #32]	@ (8000f74 <Presenter_Excute+0x28>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d105      	bne.n	8000f64 <Presenter_Excute+0x18>
      Presenter_DispTimeWatch(dispData);
 8000f58:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <Presenter_Excute+0x28>)
 8000f5a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f5e:	f000 f80b 	bl	8000f78 <Presenter_DispTimeWatch>

   } else {
      Presenter_DispStopWatch(dispData);

   }
}
 8000f62:	e004      	b.n	8000f6e <Presenter_Excute+0x22>
      Presenter_DispStopWatch(dispData);
 8000f64:	4b03      	ldr	r3, [pc, #12]	@ (8000f74 <Presenter_Excute+0x28>)
 8000f66:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f6a:	f000 f81e 	bl	8000faa <Presenter_DispStopWatch>
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000004 	.word	0x20000004

08000f78 <Presenter_DispTimeWatch>:

void Presenter_DispTimeWatch(watch_t watchData)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	463b      	mov	r3, r7
 8000f80:	e883 0003 	stmia.w	r3, {r0, r1}
   Presenter_DispFndTimeWatch(watchData);
 8000f84:	463b      	mov	r3, r7
 8000f86:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f8a:	f000 f827 	bl	8000fdc <Presenter_DispFndTimeWatch>
   Presenter_DispMonitorTimeWatch(watchData);
 8000f8e:	463b      	mov	r3, r7
 8000f90:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f94:	f000 f8a8 	bl	80010e8 <Presenter_DispMonitorTimeWatch>
   Presenter_LCD_TimeWatch(watchData);
 8000f98:	463b      	mov	r3, r7
 8000f9a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f9e:	f000 f8fb 	bl	8001198 <Presenter_LCD_TimeWatch>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <Presenter_DispStopWatch>:

void Presenter_DispStopWatch(watch_t watchData)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	e883 0003 	stmia.w	r3, {r0, r1}
   Presenter_DispFndStopWatch(watchData);
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000fbc:	f000 f83a 	bl	8001034 <Presenter_DispFndStopWatch>
   Presenter_DispMonitorStopWatch(watchData);
 8000fc0:	463b      	mov	r3, r7
 8000fc2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000fc6:	f000 f8bb 	bl	8001140 <Presenter_DispMonitorStopWatch>
   Presenter_LCD_StopWatch(watchData);
 8000fca:	463b      	mov	r3, r7
 8000fcc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000fd0:	f000 f904 	bl	80011dc <Presenter_LCD_StopWatch>
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <Presenter_DispFndTimeWatch>:

void Presenter_DispFndTimeWatch(watch_t watchData)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	e883 0003 	stmia.w	r3, {r0, r1}
   FND_WriteData(watchData.hour*100 + watchData.min);
 8000fe8:	787b      	ldrb	r3, [r7, #1]
 8000fea:	461a      	mov	r2, r3
 8000fec:	0092      	lsls	r2, r2, #2
 8000fee:	4413      	add	r3, r2
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	0091      	lsls	r1, r2, #2
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	4413      	add	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	78ba      	ldrb	r2, [r7, #2]
 8001000:	4413      	add	r3, r2
 8001002:	b29b      	uxth	r3, r3
 8001004:	4618      	mov	r0, r3
 8001006:	f000 fb47 	bl	8001698 <FND_WriteData>

   FND_WriteDp(FND_DP_1000|FND_DP_1|FND_DP_10, FND_DP_OFF);
 800100a:	2100      	movs	r1, #0
 800100c:	200b      	movs	r0, #11
 800100e:	f000 fb19 	bl	8001644 <FND_WriteDp>

   if(watchData.msec < 500){
 8001012:	88bb      	ldrh	r3, [r7, #4]
 8001014:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001018:	d204      	bcs.n	8001024 <Presenter_DispFndTimeWatch+0x48>
      FND_WriteDp(FND_DP_100, FND_DP_ON);
 800101a:	2101      	movs	r1, #1
 800101c:	2004      	movs	r0, #4
 800101e:	f000 fb11 	bl	8001644 <FND_WriteDp>
   } else {
       FND_WriteDp(FND_DP_100, FND_DP_OFF);
   }
}
 8001022:	e003      	b.n	800102c <Presenter_DispFndTimeWatch+0x50>
       FND_WriteDp(FND_DP_100, FND_DP_OFF);
 8001024:	2100      	movs	r1, #0
 8001026:	2004      	movs	r0, #4
 8001028:	f000 fb0c 	bl	8001644 <FND_WriteDp>
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <Presenter_DispFndStopWatch>:

void Presenter_DispFndStopWatch(watch_t watchData)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	463b      	mov	r3, r7
 800103c:	e883 0003 	stmia.w	r3, {r0, r1}
   FND_WriteData((watchData.min %10 * 1000) + (watchData.sec*10)+(watchData.msec/100));
 8001040:	78ba      	ldrb	r2, [r7, #2]
 8001042:	4b27      	ldr	r3, [pc, #156]	@ (80010e0 <Presenter_DispFndStopWatch+0xac>)
 8001044:	fba3 1302 	umull	r1, r3, r3, r2
 8001048:	08d9      	lsrs	r1, r3, #3
 800104a:	460b      	mov	r3, r1
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	440b      	add	r3, r1
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	b2db      	uxtb	r3, r3
 8001056:	461a      	mov	r2, r3
 8001058:	0152      	lsls	r2, r2, #5
 800105a:	1ad2      	subs	r2, r2, r3
 800105c:	0092      	lsls	r2, r2, #2
 800105e:	4413      	add	r3, r2
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	b29a      	uxth	r2, r3
 8001064:	78fb      	ldrb	r3, [r7, #3]
 8001066:	4619      	mov	r1, r3
 8001068:	0089      	lsls	r1, r1, #2
 800106a:	440b      	add	r3, r1
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	b29b      	uxth	r3, r3
 8001070:	4413      	add	r3, r2
 8001072:	b29a      	uxth	r2, r3
 8001074:	88bb      	ldrh	r3, [r7, #4]
 8001076:	491b      	ldr	r1, [pc, #108]	@ (80010e4 <Presenter_DispFndStopWatch+0xb0>)
 8001078:	fba1 1303 	umull	r1, r3, r1, r3
 800107c:	095b      	lsrs	r3, r3, #5
 800107e:	b29b      	uxth	r3, r3
 8001080:	4413      	add	r3, r2
 8001082:	b29b      	uxth	r3, r3
 8001084:	4618      	mov	r0, r3
 8001086:	f000 fb07 	bl	8001698 <FND_WriteData>

   FND_WriteDp(FND_DP_100|FND_DP_1, FND_DP_OFF);
 800108a:	2100      	movs	r1, #0
 800108c:	2005      	movs	r0, #5
 800108e:	f000 fad9 	bl	8001644 <FND_WriteDp>

   if (watchData.msec%100 < 50){            //
 8001092:	88bb      	ldrh	r3, [r7, #4]
 8001094:	4a13      	ldr	r2, [pc, #76]	@ (80010e4 <Presenter_DispFndStopWatch+0xb0>)
 8001096:	fba2 1203 	umull	r1, r2, r2, r3
 800109a:	0952      	lsrs	r2, r2, #5
 800109c:	2164      	movs	r1, #100	@ 0x64
 800109e:	fb01 f202 	mul.w	r2, r1, r2
 80010a2:	1a9b      	subs	r3, r3, r2
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	2b31      	cmp	r3, #49	@ 0x31
 80010a8:	d804      	bhi.n	80010b4 <Presenter_DispFndStopWatch+0x80>
      FND_WriteDp(FND_DP_10, FND_DP_ON);
 80010aa:	2101      	movs	r1, #1
 80010ac:	2002      	movs	r0, #2
 80010ae:	f000 fac9 	bl	8001644 <FND_WriteDp>
 80010b2:	e003      	b.n	80010bc <Presenter_DispFndStopWatch+0x88>
   } else {
      FND_WriteDp(FND_DP_10, FND_DP_OFF);
 80010b4:	2100      	movs	r1, #0
 80010b6:	2002      	movs	r0, #2
 80010b8:	f000 fac4 	bl	8001644 <FND_WriteDp>
   }

   if (watchData.msec < 500){
 80010bc:	88bb      	ldrh	r3, [r7, #4]
 80010be:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80010c2:	d204      	bcs.n	80010ce <Presenter_DispFndStopWatch+0x9a>
      FND_WriteDp(FND_DP_1000, FND_DP_ON);
 80010c4:	2101      	movs	r1, #1
 80010c6:	2008      	movs	r0, #8
 80010c8:	f000 fabc 	bl	8001644 <FND_WriteDp>
   } else {
      FND_WriteDp(FND_DP_1000, FND_DP_OFF);
   }
}
 80010cc:	e003      	b.n	80010d6 <Presenter_DispFndStopWatch+0xa2>
      FND_WriteDp(FND_DP_1000, FND_DP_OFF);
 80010ce:	2100      	movs	r1, #0
 80010d0:	2008      	movs	r0, #8
 80010d2:	f000 fab7 	bl	8001644 <FND_WriteDp>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	cccccccd 	.word	0xcccccccd
 80010e4:	51eb851f 	.word	0x51eb851f

080010e8 <Presenter_DispMonitorTimeWatch>:

void Presenter_DispMonitorTimeWatch(watch_t watchData)
{
 80010e8:	b590      	push	{r4, r7, lr}
 80010ea:	b093      	sub	sp, #76	@ 0x4c
 80010ec:	af02      	add	r7, sp, #8
 80010ee:	463b      	mov	r3, r7
 80010f0:	e883 0003 	stmia.w	r3, {r0, r1}
   char str[50];
   sprintf(str, "Time Watch : %02d:%02d:%02d.%03d\n", watchData.hour, watchData.min, watchData.sec, watchData.msec);
 80010f4:	787b      	ldrb	r3, [r7, #1]
 80010f6:	4619      	mov	r1, r3
 80010f8:	78bb      	ldrb	r3, [r7, #2]
 80010fa:	461c      	mov	r4, r3
 80010fc:	78fb      	ldrb	r3, [r7, #3]
 80010fe:	88ba      	ldrh	r2, [r7, #4]
 8001100:	f107 000c 	add.w	r0, r7, #12
 8001104:	9201      	str	r2, [sp, #4]
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	4623      	mov	r3, r4
 800110a:	460a      	mov	r2, r1
 800110c:	490a      	ldr	r1, [pc, #40]	@ (8001138 <Presenter_DispMonitorTimeWatch+0x50>)
 800110e:	f003 ffc1 	bl	8005094 <siprintf>
   HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8001112:	f107 030c 	add.w	r3, r7, #12
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff f862 	bl	80001e0 <strlen>
 800111c:	4603      	mov	r3, r0
 800111e:	b29a      	uxth	r2, r3
 8001120:	f107 010c 	add.w	r1, r7, #12
 8001124:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001128:	4804      	ldr	r0, [pc, #16]	@ (800113c <Presenter_DispMonitorTimeWatch+0x54>)
 800112a:	f002 ff97 	bl	800405c <HAL_UART_Transmit>
}
 800112e:	bf00      	nop
 8001130:	3744      	adds	r7, #68	@ 0x44
 8001132:	46bd      	mov	sp, r7
 8001134:	bd90      	pop	{r4, r7, pc}
 8001136:	bf00      	nop
 8001138:	080059ec 	.word	0x080059ec
 800113c:	20000190 	.word	0x20000190

08001140 <Presenter_DispMonitorStopWatch>:

void Presenter_DispMonitorStopWatch(watch_t watchData)
{
 8001140:	b590      	push	{r4, r7, lr}
 8001142:	b093      	sub	sp, #76	@ 0x4c
 8001144:	af02      	add	r7, sp, #8
 8001146:	463b      	mov	r3, r7
 8001148:	e883 0003 	stmia.w	r3, {r0, r1}
   char str[50];
   sprintf(str, "Stop Watch : %02d:%02d:%02d.%03d\n", watchData.hour, watchData.min, watchData.sec, watchData.msec);
 800114c:	787b      	ldrb	r3, [r7, #1]
 800114e:	4619      	mov	r1, r3
 8001150:	78bb      	ldrb	r3, [r7, #2]
 8001152:	461c      	mov	r4, r3
 8001154:	78fb      	ldrb	r3, [r7, #3]
 8001156:	88ba      	ldrh	r2, [r7, #4]
 8001158:	f107 000c 	add.w	r0, r7, #12
 800115c:	9201      	str	r2, [sp, #4]
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	4623      	mov	r3, r4
 8001162:	460a      	mov	r2, r1
 8001164:	490a      	ldr	r1, [pc, #40]	@ (8001190 <Presenter_DispMonitorStopWatch+0x50>)
 8001166:	f003 ff95 	bl	8005094 <siprintf>
   HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 800116a:	f107 030c 	add.w	r3, r7, #12
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff f836 	bl	80001e0 <strlen>
 8001174:	4603      	mov	r3, r0
 8001176:	b29a      	uxth	r2, r3
 8001178:	f107 010c 	add.w	r1, r7, #12
 800117c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001180:	4804      	ldr	r0, [pc, #16]	@ (8001194 <Presenter_DispMonitorStopWatch+0x54>)
 8001182:	f002 ff6b 	bl	800405c <HAL_UART_Transmit>
}
 8001186:	bf00      	nop
 8001188:	3744      	adds	r7, #68	@ 0x44
 800118a:	46bd      	mov	sp, r7
 800118c:	bd90      	pop	{r4, r7, pc}
 800118e:	bf00      	nop
 8001190:	08005a10 	.word	0x08005a10
 8001194:	20000190 	.word	0x20000190

08001198 <Presenter_LCD_TimeWatch>:

void Presenter_LCD_TimeWatch(watch_t watchData)
{
 8001198:	b590      	push	{r4, r7, lr}
 800119a:	b08d      	sub	sp, #52	@ 0x34
 800119c:	af02      	add	r7, sp, #8
 800119e:	463b      	mov	r3, r7
 80011a0:	e883 0003 	stmia.w	r3, {r0, r1}
	char buf[32];
	sprintf(buf, "%02d:%02d:%02d.%03d", watchData.hour, watchData.min, watchData.sec, watchData.msec);
 80011a4:	787b      	ldrb	r3, [r7, #1]
 80011a6:	4619      	mov	r1, r3
 80011a8:	78bb      	ldrb	r3, [r7, #2]
 80011aa:	461c      	mov	r4, r3
 80011ac:	78fb      	ldrb	r3, [r7, #3]
 80011ae:	88ba      	ldrh	r2, [r7, #4]
 80011b0:	f107 0008 	add.w	r0, r7, #8
 80011b4:	9201      	str	r2, [sp, #4]
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	4623      	mov	r3, r4
 80011ba:	460a      	mov	r2, r1
 80011bc:	4906      	ldr	r1, [pc, #24]	@ (80011d8 <Presenter_LCD_TimeWatch+0x40>)
 80011be:	f003 ff69 	bl	8005094 <siprintf>
    LCD_writeStringXY(0, 0, buf);
 80011c2:	f107 0308 	add.w	r3, r7, #8
 80011c6:	461a      	mov	r2, r3
 80011c8:	2100      	movs	r1, #0
 80011ca:	2000      	movs	r0, #0
 80011cc:	f000 fd87 	bl	8001cde <LCD_writeStringXY>
}
 80011d0:	bf00      	nop
 80011d2:	372c      	adds	r7, #44	@ 0x2c
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd90      	pop	{r4, r7, pc}
 80011d8:	08005a34 	.word	0x08005a34

080011dc <Presenter_LCD_StopWatch>:

void Presenter_LCD_StopWatch(watch_t watchData)
{
 80011dc:	b590      	push	{r4, r7, lr}
 80011de:	b08d      	sub	sp, #52	@ 0x34
 80011e0:	af02      	add	r7, sp, #8
 80011e2:	463b      	mov	r3, r7
 80011e4:	e883 0003 	stmia.w	r3, {r0, r1}
	char buf[32];
	sprintf(buf, " %02d:%02d:%02d.%03d\n", watchData.hour, watchData.min, watchData.sec, watchData.msec);
 80011e8:	787b      	ldrb	r3, [r7, #1]
 80011ea:	4619      	mov	r1, r3
 80011ec:	78bb      	ldrb	r3, [r7, #2]
 80011ee:	461c      	mov	r4, r3
 80011f0:	78fb      	ldrb	r3, [r7, #3]
 80011f2:	88ba      	ldrh	r2, [r7, #4]
 80011f4:	f107 0008 	add.w	r0, r7, #8
 80011f8:	9201      	str	r2, [sp, #4]
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	4623      	mov	r3, r4
 80011fe:	460a      	mov	r2, r1
 8001200:	4906      	ldr	r1, [pc, #24]	@ (800121c <Presenter_LCD_StopWatch+0x40>)
 8001202:	f003 ff47 	bl	8005094 <siprintf>
	LCD_writeStringXY(1, 0, buf);
 8001206:	f107 0308 	add.w	r3, r7, #8
 800120a:	461a      	mov	r2, r3
 800120c:	2100      	movs	r1, #0
 800120e:	2001      	movs	r0, #1
 8001210:	f000 fd65 	bl	8001cde <LCD_writeStringXY>
}
 8001214:	bf00      	nop
 8001216:	372c      	adds	r7, #44	@ 0x2c
 8001218:	46bd      	mov	sp, r7
 800121a:	bd90      	pop	{r4, r7, pc}
 800121c:	08005a48 	.word	0x08005a48

08001220 <HAL_TIM_PeriodElapsedCallback>:

#include "ap_main.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]

  if(htim->Instance == TIM2){
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001230:	d105      	bne.n	800123e <HAL_TIM_PeriodElapsedCallback+0x1e>
	  FND_DispDataCallBack();
 8001232:	f000 fa41 	bl	80016b8 <FND_DispDataCallBack>

	  TimeWatch_IncTimeCallBack();
 8001236:	f000 f96f 	bl	8001518 <TimeWatch_IncTimeCallBack>
	  StopWatch_IncTimeCallBack();
 800123a:	f000 f8b5 	bl	80013a8 <StopWatch_IncTimeCallBack>
  }
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <ap_main>:

int ap_main()
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Start_IT(&htim2);
 800124c:	4805      	ldr	r0, [pc, #20]	@ (8001264 <ap_main+0x1c>)
 800124e:	f002 fad1 	bl	80037f4 <HAL_TIM_Base_Start_IT>
//	LCD_writeCharData('O');
//	LCD_writeStringXY(0,0, "Hello World!");
//	LCD_writeStringXY(1,0, "Hello STM32!");
	while(1)
	{
		Listener_Excute();
 8001252:	f7ff fdab 	bl	8000dac <Listener_Excute>
		Controller_Excute();
 8001256:	f7ff fd1a 	bl	8000c8e <Controller_Excute>
		Presenter_Excute();
 800125a:	f7ff fe77 	bl	8000f4c <Presenter_Excute>
		Listener_Excute();
 800125e:	bf00      	nop
 8001260:	e7f7      	b.n	8001252 <ap_main+0xa>
 8001262:	bf00      	nop
 8001264:	20000148 	.word	0x20000148

08001268 <HAL_UART_RxCpltCallback>:

	return 0;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a04      	ldr	r2, [pc, #16]	@ (8001288 <HAL_UART_RxCpltCallback+0x20>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d101      	bne.n	800127e <HAL_UART_RxCpltCallback+0x16>
		Listener_UartCallBack();
 800127a:	f7ff fe33 	bl	8000ee4 <Listener_UartCallBack>
	}
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40004400 	.word	0x40004400

0800128c <ap_init>:


void ap_init()
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
	Listener_Init();
 8001290:	f7ff fd5a 	bl	8000d48 <Listener_Init>
	Presenter_Init();
 8001294:	f7ff fe3c 	bl	8000f10 <Presenter_Init>
}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}

0800129c <Que_Init>:
 */
#include "queue.h"


void Que_Init(Que_TypeDef *q)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
   q->front = 0;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
   q->rear = 0;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	605a      	str	r2, [r3, #4]
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <isQueFull>:

int isQueFull(Que_TypeDef *q)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
   return q->front == (q->rear + 1)% QUE_SIZE;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	3301      	adds	r3, #1
 80012ce:	4259      	negs	r1, r3
 80012d0:	f003 0303 	and.w	r3, r3, #3
 80012d4:	f001 0103 	and.w	r1, r1, #3
 80012d8:	bf58      	it	pl
 80012da:	424b      	negpl	r3, r1
 80012dc:	429a      	cmp	r2, r3
 80012de:	bf0c      	ite	eq
 80012e0:	2301      	moveq	r3, #1
 80012e2:	2300      	movne	r3, #0
 80012e4:	b2db      	uxtb	r3, r3
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <isQueEmpty>:

int isQueEmpty(Que_TypeDef *q)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
   return q->front == q->rear;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	429a      	cmp	r2, r3
 8001304:	bf0c      	ite	eq
 8001306:	2301      	moveq	r3, #1
 8001308:	2300      	movne	r3, #0
 800130a:	b2db      	uxtb	r3, r3
}
 800130c:	4618      	mov	r0, r3
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <enQue>:

void enQue(Que_TypeDef *q, int data)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
   if(isQueFull(q)){
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ffca 	bl	80012bc <isQueFull>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d113      	bne.n	8001356 <enQue+0x3e>
      return;
   }
   q-> queData[q->rear] = data;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3202      	adds	r2, #2
 8001336:	6839      	ldr	r1, [r7, #0]
 8001338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   q-> rear = (q->rear + 1) % QUE_SIZE;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	3301      	adds	r3, #1
 8001342:	425a      	negs	r2, r3
 8001344:	f003 0303 	and.w	r3, r3, #3
 8001348:	f002 0203 	and.w	r2, r2, #3
 800134c:	bf58      	it	pl
 800134e:	4253      	negpl	r3, r2
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	6053      	str	r3, [r2, #4]
 8001354:	e000      	b.n	8001358 <enQue+0x40>
      return;
 8001356:	bf00      	nop
}
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <deQue>:

int deQue(Que_TypeDef *q)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b084      	sub	sp, #16
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
   if(isQueEmpty(q)) {
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff ffc3 	bl	80012f2 <isQueEmpty>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d114      	bne.n	800139c <deQue+0x3e>
      return;
   }
   int data = q->queData[q->front];
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3202      	adds	r2, #2
 800137a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800137e:	60fb      	str	r3, [r7, #12]
   q-> front = (q->front + 1) % QUE_SIZE;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	3301      	adds	r3, #1
 8001386:	425a      	negs	r2, r3
 8001388:	f003 0303 	and.w	r3, r3, #3
 800138c:	f002 0203 	and.w	r2, r2, #3
 8001390:	bf58      	it	pl
 8001392:	4253      	negpl	r3, r2
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	6013      	str	r3, [r2, #0]
   return data;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	e001      	b.n	80013a0 <deQue+0x42>
      return;
 800139c:	bf00      	nop
 800139e:	bf00      	nop
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <StopWatch_IncTimeCallBack>:
static stopWatchState_t stopWatchState = STOP;
extern inputData_TypeDef controlData;
static watch_t stopWatch = {STOP_WATCH, 0, 0, 0, 0};

void StopWatch_IncTimeCallBack()
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
   if (stopWatchState == RUN){
 80013ac:	4b03      	ldr	r3, [pc, #12]	@ (80013bc <StopWatch_IncTimeCallBack+0x14>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d101      	bne.n	80013b8 <StopWatch_IncTimeCallBack+0x10>
      StopWatch_IncTime();
 80013b4:	f000 f804 	bl	80013c0 <StopWatch_IncTime>
   }
}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000200 	.word	0x20000200

080013c0 <StopWatch_IncTime>:

void StopWatch_IncTime()
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
   if(stopWatch.msec < 1000-1){
 80013c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001440 <StopWatch_IncTime+0x80>)
 80013c6:	889b      	ldrh	r3, [r3, #4]
 80013c8:	f240 32e6 	movw	r2, #998	@ 0x3e6
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d806      	bhi.n	80013de <StopWatch_IncTime+0x1e>
      stopWatch.msec++;
 80013d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001440 <StopWatch_IncTime+0x80>)
 80013d2:	889b      	ldrh	r3, [r3, #4]
 80013d4:	3301      	adds	r3, #1
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	4b19      	ldr	r3, [pc, #100]	@ (8001440 <StopWatch_IncTime+0x80>)
 80013da:	809a      	strh	r2, [r3, #4]
      return;
 80013dc:	e02c      	b.n	8001438 <StopWatch_IncTime+0x78>
   }
   stopWatch.msec = 0;
 80013de:	4b18      	ldr	r3, [pc, #96]	@ (8001440 <StopWatch_IncTime+0x80>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	809a      	strh	r2, [r3, #4]

   if (stopWatch.sec < 60-1) {
 80013e4:	4b16      	ldr	r3, [pc, #88]	@ (8001440 <StopWatch_IncTime+0x80>)
 80013e6:	78db      	ldrb	r3, [r3, #3]
 80013e8:	2b3a      	cmp	r3, #58	@ 0x3a
 80013ea:	d806      	bhi.n	80013fa <StopWatch_IncTime+0x3a>
      stopWatch.sec++;
 80013ec:	4b14      	ldr	r3, [pc, #80]	@ (8001440 <StopWatch_IncTime+0x80>)
 80013ee:	78db      	ldrb	r3, [r3, #3]
 80013f0:	3301      	adds	r3, #1
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	4b12      	ldr	r3, [pc, #72]	@ (8001440 <StopWatch_IncTime+0x80>)
 80013f6:	70da      	strb	r2, [r3, #3]
      return;
 80013f8:	e01e      	b.n	8001438 <StopWatch_IncTime+0x78>
   }
   stopWatch.sec = 0;
 80013fa:	4b11      	ldr	r3, [pc, #68]	@ (8001440 <StopWatch_IncTime+0x80>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	70da      	strb	r2, [r3, #3]

   if (stopWatch.min < 60-1) {
 8001400:	4b0f      	ldr	r3, [pc, #60]	@ (8001440 <StopWatch_IncTime+0x80>)
 8001402:	789b      	ldrb	r3, [r3, #2]
 8001404:	2b3a      	cmp	r3, #58	@ 0x3a
 8001406:	d806      	bhi.n	8001416 <StopWatch_IncTime+0x56>
      stopWatch.min++;
 8001408:	4b0d      	ldr	r3, [pc, #52]	@ (8001440 <StopWatch_IncTime+0x80>)
 800140a:	789b      	ldrb	r3, [r3, #2]
 800140c:	3301      	adds	r3, #1
 800140e:	b2da      	uxtb	r2, r3
 8001410:	4b0b      	ldr	r3, [pc, #44]	@ (8001440 <StopWatch_IncTime+0x80>)
 8001412:	709a      	strb	r2, [r3, #2]
      return;
 8001414:	e010      	b.n	8001438 <StopWatch_IncTime+0x78>
   }
   stopWatch.min = 0;
 8001416:	4b0a      	ldr	r3, [pc, #40]	@ (8001440 <StopWatch_IncTime+0x80>)
 8001418:	2200      	movs	r2, #0
 800141a:	709a      	strb	r2, [r3, #2]

   if (stopWatch.hour < 24-1) {
 800141c:	4b08      	ldr	r3, [pc, #32]	@ (8001440 <StopWatch_IncTime+0x80>)
 800141e:	785b      	ldrb	r3, [r3, #1]
 8001420:	2b16      	cmp	r3, #22
 8001422:	d806      	bhi.n	8001432 <StopWatch_IncTime+0x72>
      stopWatch.hour++;
 8001424:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <StopWatch_IncTime+0x80>)
 8001426:	785b      	ldrb	r3, [r3, #1]
 8001428:	3301      	adds	r3, #1
 800142a:	b2da      	uxtb	r2, r3
 800142c:	4b04      	ldr	r3, [pc, #16]	@ (8001440 <StopWatch_IncTime+0x80>)
 800142e:	705a      	strb	r2, [r3, #1]
      return;
 8001430:	e002      	b.n	8001438 <StopWatch_IncTime+0x78>
   }
   stopWatch.hour = 0;
 8001432:	4b03      	ldr	r3, [pc, #12]	@ (8001440 <StopWatch_IncTime+0x80>)
 8001434:	2200      	movs	r2, #0
 8001436:	705a      	strb	r2, [r3, #1]
}
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	2000000c 	.word	0x2000000c

08001444 <StopWatch_Excute>:

void StopWatch_Excute()
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
   switch (stopWatchState)
 8001448:	4b0a      	ldr	r3, [pc, #40]	@ (8001474 <StopWatch_Excute+0x30>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b02      	cmp	r3, #2
 800144e:	d00c      	beq.n	800146a <StopWatch_Excute+0x26>
 8001450:	2b02      	cmp	r3, #2
 8001452:	dc0d      	bgt.n	8001470 <StopWatch_Excute+0x2c>
 8001454:	2b00      	cmp	r3, #0
 8001456:	d002      	beq.n	800145e <StopWatch_Excute+0x1a>
 8001458:	2b01      	cmp	r3, #1
 800145a:	d003      	beq.n	8001464 <StopWatch_Excute+0x20>
   case CLEAR:
      StopWatch_Clear();
      break;
   }
   //Presenter_OutData(stopWatch);
}
 800145c:	e008      	b.n	8001470 <StopWatch_Excute+0x2c>
      StopWatch_Stop();
 800145e:	f000 f80b 	bl	8001478 <StopWatch_Stop>
      break;
 8001462:	e005      	b.n	8001470 <StopWatch_Excute+0x2c>
      StopWatch_Run();
 8001464:	f000 f828 	bl	80014b8 <StopWatch_Run>
      break;
 8001468:	e002      	b.n	8001470 <StopWatch_Excute+0x2c>
      StopWatch_Clear();
 800146a:	f000 f83b 	bl	80014e4 <StopWatch_Clear>
      break;
 800146e:	bf00      	nop
}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000200 	.word	0x20000200

08001478 <StopWatch_Stop>:

void StopWatch_Stop()
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
   if (controlData.id == STOPWATCH_RUN_STOP) {
 800147c:	4b0c      	ldr	r3, [pc, #48]	@ (80014b0 <StopWatch_Stop+0x38>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b02      	cmp	r3, #2
 8001482:	d106      	bne.n	8001492 <StopWatch_Stop+0x1a>
	   controlData.id = NO_CONTROL;
 8001484:	4b0a      	ldr	r3, [pc, #40]	@ (80014b0 <StopWatch_Stop+0x38>)
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
       stopWatchState = RUN;
 800148a:	4b0a      	ldr	r3, [pc, #40]	@ (80014b4 <StopWatch_Stop+0x3c>)
 800148c:	2201      	movs	r2, #1
 800148e:	701a      	strb	r2, [r3, #0]
   else if (controlData.id == STOPWATCH_CLEAR) {
	   controlData.id = NO_CONTROL;
       stopWatchState = CLEAR;
   }
   //FND_WriteData((stopWatch.min % 10 * 1000) + (stopWatch.sec * 10) + (stopWatch.msec/100));
}
 8001490:	e009      	b.n	80014a6 <StopWatch_Stop+0x2e>
   else if (controlData.id == STOPWATCH_CLEAR) {
 8001492:	4b07      	ldr	r3, [pc, #28]	@ (80014b0 <StopWatch_Stop+0x38>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2b03      	cmp	r3, #3
 8001498:	d105      	bne.n	80014a6 <StopWatch_Stop+0x2e>
	   controlData.id = NO_CONTROL;
 800149a:	4b05      	ldr	r3, [pc, #20]	@ (80014b0 <StopWatch_Stop+0x38>)
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
       stopWatchState = CLEAR;
 80014a0:	4b04      	ldr	r3, [pc, #16]	@ (80014b4 <StopWatch_Stop+0x3c>)
 80014a2:	2202      	movs	r2, #2
 80014a4:	701a      	strb	r2, [r3, #0]
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	200001d8 	.word	0x200001d8
 80014b4:	20000200 	.word	0x20000200

080014b8 <StopWatch_Run>:

void StopWatch_Run()
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
	if (controlData.id == STOPWATCH_RUN_STOP) {
 80014bc:	4b07      	ldr	r3, [pc, #28]	@ (80014dc <StopWatch_Run+0x24>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d105      	bne.n	80014d0 <StopWatch_Run+0x18>
	  controlData.id = NO_CONTROL;
 80014c4:	4b05      	ldr	r3, [pc, #20]	@ (80014dc <StopWatch_Run+0x24>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
      stopWatchState = STOP;
 80014ca:	4b05      	ldr	r3, [pc, #20]	@ (80014e0 <StopWatch_Run+0x28>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]
   }


}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	200001d8 	.word	0x200001d8
 80014e0:	20000200 	.word	0x20000200

080014e4 <StopWatch_Clear>:

void StopWatch_Clear()
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
   stopWatchState = STOP;
 80014e8:	4b09      	ldr	r3, [pc, #36]	@ (8001510 <StopWatch_Clear+0x2c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	701a      	strb	r2, [r3, #0]
   stopWatch.msec = 0;
 80014ee:	4b09      	ldr	r3, [pc, #36]	@ (8001514 <StopWatch_Clear+0x30>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	809a      	strh	r2, [r3, #4]
   stopWatch.sec = 0;
 80014f4:	4b07      	ldr	r3, [pc, #28]	@ (8001514 <StopWatch_Clear+0x30>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	70da      	strb	r2, [r3, #3]
   stopWatch.min = 0;
 80014fa:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <StopWatch_Clear+0x30>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	709a      	strb	r2, [r3, #2]
   stopWatch.hour = 0;
 8001500:	4b04      	ldr	r3, [pc, #16]	@ (8001514 <StopWatch_Clear+0x30>)
 8001502:	2200      	movs	r2, #0
 8001504:	705a      	strb	r2, [r3, #1]

  // FND_WriteData((stopWatch.min % 10 * 1000) + (stopWatch.sec * 10) + (stopWatch.msec/100));
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	20000200 	.word	0x20000200
 8001514:	2000000c 	.word	0x2000000c

08001518 <TimeWatch_IncTimeCallBack>:
#include "timeWatch.h"

static watch_t timeWatch = {TIME_WATCH, 12,0,0,0};

void TimeWatch_IncTimeCallBack()
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
   if(timeWatch.msec < 1000-1){
 800151c:	4b1e      	ldr	r3, [pc, #120]	@ (8001598 <TimeWatch_IncTimeCallBack+0x80>)
 800151e:	889b      	ldrh	r3, [r3, #4]
 8001520:	f240 32e6 	movw	r2, #998	@ 0x3e6
 8001524:	4293      	cmp	r3, r2
 8001526:	d806      	bhi.n	8001536 <TimeWatch_IncTimeCallBack+0x1e>
      timeWatch.msec++;
 8001528:	4b1b      	ldr	r3, [pc, #108]	@ (8001598 <TimeWatch_IncTimeCallBack+0x80>)
 800152a:	889b      	ldrh	r3, [r3, #4]
 800152c:	3301      	adds	r3, #1
 800152e:	b29a      	uxth	r2, r3
 8001530:	4b19      	ldr	r3, [pc, #100]	@ (8001598 <TimeWatch_IncTimeCallBack+0x80>)
 8001532:	809a      	strh	r2, [r3, #4]
      return;
 8001534:	e02c      	b.n	8001590 <TimeWatch_IncTimeCallBack+0x78>
   }
   timeWatch.msec = 0;
 8001536:	4b18      	ldr	r3, [pc, #96]	@ (8001598 <TimeWatch_IncTimeCallBack+0x80>)
 8001538:	2200      	movs	r2, #0
 800153a:	809a      	strh	r2, [r3, #4]

   if (timeWatch.sec < 60-1) {
 800153c:	4b16      	ldr	r3, [pc, #88]	@ (8001598 <TimeWatch_IncTimeCallBack+0x80>)
 800153e:	78db      	ldrb	r3, [r3, #3]
 8001540:	2b3a      	cmp	r3, #58	@ 0x3a
 8001542:	d806      	bhi.n	8001552 <TimeWatch_IncTimeCallBack+0x3a>
      timeWatch.sec++;
 8001544:	4b14      	ldr	r3, [pc, #80]	@ (8001598 <TimeWatch_IncTimeCallBack+0x80>)
 8001546:	78db      	ldrb	r3, [r3, #3]
 8001548:	3301      	adds	r3, #1
 800154a:	b2da      	uxtb	r2, r3
 800154c:	4b12      	ldr	r3, [pc, #72]	@ (8001598 <TimeWatch_IncTimeCallBack+0x80>)
 800154e:	70da      	strb	r2, [r3, #3]
      return;
 8001550:	e01e      	b.n	8001590 <TimeWatch_IncTimeCallBack+0x78>
   }
   timeWatch.sec = 0;
 8001552:	4b11      	ldr	r3, [pc, #68]	@ (8001598 <TimeWatch_IncTimeCallBack+0x80>)
 8001554:	2200      	movs	r2, #0
 8001556:	70da      	strb	r2, [r3, #3]

   if (timeWatch.min < 60-1) {
 8001558:	4b0f      	ldr	r3, [pc, #60]	@ (8001598 <TimeWatch_IncTimeCallBack+0x80>)
 800155a:	789b      	ldrb	r3, [r3, #2]
 800155c:	2b3a      	cmp	r3, #58	@ 0x3a
 800155e:	d806      	bhi.n	800156e <TimeWatch_IncTimeCallBack+0x56>
      timeWatch.min++;
 8001560:	4b0d      	ldr	r3, [pc, #52]	@ (8001598 <TimeWatch_IncTimeCallBack+0x80>)
 8001562:	789b      	ldrb	r3, [r3, #2]
 8001564:	3301      	adds	r3, #1
 8001566:	b2da      	uxtb	r2, r3
 8001568:	4b0b      	ldr	r3, [pc, #44]	@ (8001598 <TimeWatch_IncTimeCallBack+0x80>)
 800156a:	709a      	strb	r2, [r3, #2]
      return;
 800156c:	e010      	b.n	8001590 <TimeWatch_IncTimeCallBack+0x78>
   }
   timeWatch.min = 0;
 800156e:	4b0a      	ldr	r3, [pc, #40]	@ (8001598 <TimeWatch_IncTimeCallBack+0x80>)
 8001570:	2200      	movs	r2, #0
 8001572:	709a      	strb	r2, [r3, #2]

   if (timeWatch.hour < 24-1) {
 8001574:	4b08      	ldr	r3, [pc, #32]	@ (8001598 <TimeWatch_IncTimeCallBack+0x80>)
 8001576:	785b      	ldrb	r3, [r3, #1]
 8001578:	2b16      	cmp	r3, #22
 800157a:	d806      	bhi.n	800158a <TimeWatch_IncTimeCallBack+0x72>
      timeWatch.hour++;
 800157c:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <TimeWatch_IncTimeCallBack+0x80>)
 800157e:	785b      	ldrb	r3, [r3, #1]
 8001580:	3301      	adds	r3, #1
 8001582:	b2da      	uxtb	r2, r3
 8001584:	4b04      	ldr	r3, [pc, #16]	@ (8001598 <TimeWatch_IncTimeCallBack+0x80>)
 8001586:	705a      	strb	r2, [r3, #1]
      return;
 8001588:	e002      	b.n	8001590 <TimeWatch_IncTimeCallBack+0x78>
   }
   timeWatch.hour = 0;
 800158a:	4b03      	ldr	r3, [pc, #12]	@ (8001598 <TimeWatch_IncTimeCallBack+0x80>)
 800158c:	2200      	movs	r2, #0
 800158e:	705a      	strb	r2, [r3, #1]
}
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	20000014 	.word	0x20000014

0800159c <TimeWatch_Excute>:

void TimeWatch_Excute()
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0

   Presenter_OutData(timeWatch);
 80015a0:	4b03      	ldr	r3, [pc, #12]	@ (80015b0 <TimeWatch_Excute+0x14>)
 80015a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015a6:	f7ff fcbb 	bl	8000f20 <Presenter_OutData>
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000014 	.word	0x20000014

080015b4 <Button_Init>:
Button_Handler_t hBtnMode;
Button_Handler_t hBtnRunStop;
Button_Handler_t hBtnClear;

void Button_Init(Button_Handler_t *hbtn, GPIO_TypeDef * GPIOx, uint16_t pinNum)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	4613      	mov	r3, r2
 80015c0:	80fb      	strh	r3, [r7, #6]
   hbtn->GPIOx = GPIOx;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	601a      	str	r2, [r3, #0]
   hbtn->pinNum = pinNum;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	88fa      	ldrh	r2, [r7, #6]
 80015cc:	809a      	strh	r2, [r3, #4]
   hbtn->prevState = RELEASED;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2201      	movs	r2, #1
 80015d2:	609a      	str	r2, [r3, #8]
}
 80015d4:	bf00      	nop
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <Button_GetState>:

button_state_t Button_GetState(Button_Handler_t *hbtn)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]

   uint32_t curState;
   curState = HAL_GPIO_ReadPin(hbtn->GPIOx, hbtn->pinNum);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	889b      	ldrh	r3, [r3, #4]
 80015f0:	4619      	mov	r1, r3
 80015f2:	4610      	mov	r0, r2
 80015f4:	f000 ff46 	bl	8002484 <HAL_GPIO_ReadPin>
 80015f8:	4603      	mov	r3, r0
 80015fa:	60fb      	str	r3, [r7, #12]

   if ((hbtn->prevState == RELEASED) && (curState == PUSHED)) { // button released -> pushed
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d10a      	bne.n	800161a <Button_GetState+0x3a>
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d107      	bne.n	800161a <Button_GetState+0x3a>
      HAL_Delay(2); // debounce
 800160a:	2002      	movs	r0, #2
 800160c:	f000 fbee 	bl	8001dec <HAL_Delay>
      hbtn->prevState = PUSHED;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
      return ACT_PUSHED;
 8001616:	2301      	movs	r3, #1
 8001618:	e00f      	b.n	800163a <Button_GetState+0x5a>
   }
   else if ((hbtn->prevState == PUSHED) && (curState == RELEASED)) { // button pushed -> released
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d10a      	bne.n	8001638 <Button_GetState+0x58>
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d107      	bne.n	8001638 <Button_GetState+0x58>
      HAL_Delay(2); // debounce
 8001628:	2002      	movs	r0, #2
 800162a:	f000 fbdf 	bl	8001dec <HAL_Delay>
      hbtn->prevState = RELEASED;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	609a      	str	r2, [r3, #8]
      return ACT_RELEASED;
 8001634:	2302      	movs	r3, #2
 8001636:	e000      	b.n	800163a <Button_GetState+0x5a>
   }
   return NO_ACT;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
	...

08001644 <FND_WriteDp>:




void FND_WriteDp(uint8_t dpData, uint8_t dpState)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	460a      	mov	r2, r1
 800164e:	71fb      	strb	r3, [r7, #7]
 8001650:	4613      	mov	r3, r2
 8001652:	71bb      	strb	r3, [r7, #6]
   if(dpState == FND_DP_ON)
 8001654:	79bb      	ldrb	r3, [r7, #6]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d107      	bne.n	800166a <FND_WriteDp+0x26>
      fndDispDp |= dpData;
 800165a:	4b0e      	ldr	r3, [pc, #56]	@ (8001694 <FND_WriteDp+0x50>)
 800165c:	781a      	ldrb	r2, [r3, #0]
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	4313      	orrs	r3, r2
 8001662:	b2da      	uxtb	r2, r3
 8001664:	4b0b      	ldr	r3, [pc, #44]	@ (8001694 <FND_WriteDp+0x50>)
 8001666:	701a      	strb	r2, [r3, #0]
   else if(dpState == FND_DP_OFF)
      fndDispDp &= ~dpData;
}
 8001668:	e00e      	b.n	8001688 <FND_WriteDp+0x44>
   else if(dpState == FND_DP_OFF)
 800166a:	79bb      	ldrb	r3, [r7, #6]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d10b      	bne.n	8001688 <FND_WriteDp+0x44>
      fndDispDp &= ~dpData;
 8001670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001674:	43db      	mvns	r3, r3
 8001676:	b25a      	sxtb	r2, r3
 8001678:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <FND_WriteDp+0x50>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	b25b      	sxtb	r3, r3
 800167e:	4013      	ands	r3, r2
 8001680:	b25b      	sxtb	r3, r3
 8001682:	b2da      	uxtb	r2, r3
 8001684:	4b03      	ldr	r3, [pc, #12]	@ (8001694 <FND_WriteDp+0x50>)
 8001686:	701a      	strb	r2, [r3, #0]
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	2000022a 	.word	0x2000022a

08001698 <FND_WriteData>:

// write fndDispNum
void FND_WriteData(uint16_t data)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	80fb      	strh	r3, [r7, #6]
   fndDispNum = data;
 80016a2:	4a04      	ldr	r2, [pc, #16]	@ (80016b4 <FND_WriteData+0x1c>)
 80016a4:	88fb      	ldrh	r3, [r7, #6]
 80016a6:	8013      	strh	r3, [r2, #0]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	20000228 	.word	0x20000228

080016b8 <FND_DispDataCallBack>:
{
   return fndDispNum;
}
// display fndDispNum
void FND_DispDataCallBack()
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
   static int digitPos = 0;
   // 인터럽트가 발생하면 한 자리씩 출력한다.
   FND_DispOffAll();
 80016bc:	f000 f956 	bl	800196c <FND_DispOffAll>
   digitPos = (digitPos+1) % 8; // 4에서 8로 변경 0부터 7찍을 수 있게.
 80016c0:	4b8c      	ldr	r3, [pc, #560]	@ (80018f4 <FND_DispDataCallBack+0x23c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	3301      	adds	r3, #1
 80016c6:	425a      	negs	r2, r3
 80016c8:	f003 0307 	and.w	r3, r3, #7
 80016cc:	f002 0207 	and.w	r2, r2, #7
 80016d0:	bf58      	it	pl
 80016d2:	4253      	negpl	r3, r2
 80016d4:	4a87      	ldr	r2, [pc, #540]	@ (80018f4 <FND_DispDataCallBack+0x23c>)
 80016d6:	6013      	str	r3, [r2, #0]
   switch(digitPos)      // 1ms마다 각 자리를 찍는다?
 80016d8:	4b86      	ldr	r3, [pc, #536]	@ (80018f4 <FND_DispDataCallBack+0x23c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b07      	cmp	r3, #7
 80016de:	f200 8106 	bhi.w	80018ee <FND_DispDataCallBack+0x236>
 80016e2:	a201      	add	r2, pc, #4	@ (adr r2, 80016e8 <FND_DispDataCallBack+0x30>)
 80016e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e8:	08001709 	.word	0x08001709
 80016ec:	0800173d 	.word	0x0800173d
 80016f0:	0800177b 	.word	0x0800177b
 80016f4:	080017b9 	.word	0x080017b9
 80016f8:	080017f7 	.word	0x080017f7
 80016fc:	08001835 	.word	0x08001835
 8001700:	08001873 	.word	0x08001873
 8001704:	080018b1 	.word	0x080018b1
   {
   case DIGIT_1:
      FND_DispOff(digitPos);
 8001708:	4b7a      	ldr	r3, [pc, #488]	@ (80018f4 <FND_DispDataCallBack+0x23c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f000 f8fd 	bl	800190c <FND_DispOff>
      FND_DispDigit(fndDispNum%10);
 8001712:	4b79      	ldr	r3, [pc, #484]	@ (80018f8 <FND_DispDataCallBack+0x240>)
 8001714:	881a      	ldrh	r2, [r3, #0]
 8001716:	4b79      	ldr	r3, [pc, #484]	@ (80018fc <FND_DispDataCallBack+0x244>)
 8001718:	fba3 1302 	umull	r1, r3, r3, r2
 800171c:	08d9      	lsrs	r1, r3, #3
 800171e:	460b      	mov	r3, r1
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	440b      	add	r3, r1
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	b29b      	uxth	r3, r3
 800172a:	4618      	mov	r0, r3
 800172c:	f000 f940 	bl	80019b0 <FND_DispDigit>
      FND_DispOn(digitPos);
 8001730:	4b70      	ldr	r3, [pc, #448]	@ (80018f4 <FND_DispDataCallBack+0x23c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4618      	mov	r0, r3
 8001736:	f000 f901 	bl	800193c <FND_DispOn>
      break;
 800173a:	e0d8      	b.n	80018ee <FND_DispDataCallBack+0x236>
   case DIGIT_10:
      FND_DispOff(digitPos);
 800173c:	4b6d      	ldr	r3, [pc, #436]	@ (80018f4 <FND_DispDataCallBack+0x23c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f000 f8e3 	bl	800190c <FND_DispOff>
      FND_DispDigit(fndDispNum/10%10);
 8001746:	4b6c      	ldr	r3, [pc, #432]	@ (80018f8 <FND_DispDataCallBack+0x240>)
 8001748:	881b      	ldrh	r3, [r3, #0]
 800174a:	4a6c      	ldr	r2, [pc, #432]	@ (80018fc <FND_DispDataCallBack+0x244>)
 800174c:	fba2 2303 	umull	r2, r3, r2, r3
 8001750:	08db      	lsrs	r3, r3, #3
 8001752:	b29a      	uxth	r2, r3
 8001754:	4b69      	ldr	r3, [pc, #420]	@ (80018fc <FND_DispDataCallBack+0x244>)
 8001756:	fba3 1302 	umull	r1, r3, r3, r2
 800175a:	08d9      	lsrs	r1, r3, #3
 800175c:	460b      	mov	r3, r1
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	440b      	add	r3, r1
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	b29b      	uxth	r3, r3
 8001768:	4618      	mov	r0, r3
 800176a:	f000 f921 	bl	80019b0 <FND_DispDigit>
      FND_DispOn(digitPos);
 800176e:	4b61      	ldr	r3, [pc, #388]	@ (80018f4 <FND_DispDataCallBack+0x23c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f000 f8e2 	bl	800193c <FND_DispOn>
      break;
 8001778:	e0b9      	b.n	80018ee <FND_DispDataCallBack+0x236>
   case DIGIT_100:
      FND_DispOff(digitPos);
 800177a:	4b5e      	ldr	r3, [pc, #376]	@ (80018f4 <FND_DispDataCallBack+0x23c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f000 f8c4 	bl	800190c <FND_DispOff>
      FND_DispDigit(fndDispNum/100%10);
 8001784:	4b5c      	ldr	r3, [pc, #368]	@ (80018f8 <FND_DispDataCallBack+0x240>)
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	4a5d      	ldr	r2, [pc, #372]	@ (8001900 <FND_DispDataCallBack+0x248>)
 800178a:	fba2 2303 	umull	r2, r3, r2, r3
 800178e:	095b      	lsrs	r3, r3, #5
 8001790:	b29a      	uxth	r2, r3
 8001792:	4b5a      	ldr	r3, [pc, #360]	@ (80018fc <FND_DispDataCallBack+0x244>)
 8001794:	fba3 1302 	umull	r1, r3, r3, r2
 8001798:	08d9      	lsrs	r1, r3, #3
 800179a:	460b      	mov	r3, r1
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	440b      	add	r3, r1
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	4618      	mov	r0, r3
 80017a8:	f000 f902 	bl	80019b0 <FND_DispDigit>
      FND_DispOn(digitPos);
 80017ac:	4b51      	ldr	r3, [pc, #324]	@ (80018f4 <FND_DispDataCallBack+0x23c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f000 f8c3 	bl	800193c <FND_DispOn>
      break;
 80017b6:	e09a      	b.n	80018ee <FND_DispDataCallBack+0x236>
   case DIGIT_1000:
      FND_DispOff(digitPos);
 80017b8:	4b4e      	ldr	r3, [pc, #312]	@ (80018f4 <FND_DispDataCallBack+0x23c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f000 f8a5 	bl	800190c <FND_DispOff>
      FND_DispDigit(fndDispNum/1000%10);
 80017c2:	4b4d      	ldr	r3, [pc, #308]	@ (80018f8 <FND_DispDataCallBack+0x240>)
 80017c4:	881b      	ldrh	r3, [r3, #0]
 80017c6:	4a4f      	ldr	r2, [pc, #316]	@ (8001904 <FND_DispDataCallBack+0x24c>)
 80017c8:	fba2 2303 	umull	r2, r3, r2, r3
 80017cc:	099b      	lsrs	r3, r3, #6
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	4b4a      	ldr	r3, [pc, #296]	@ (80018fc <FND_DispDataCallBack+0x244>)
 80017d2:	fba3 1302 	umull	r1, r3, r3, r2
 80017d6:	08d9      	lsrs	r1, r3, #3
 80017d8:	460b      	mov	r3, r1
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	440b      	add	r3, r1
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	4618      	mov	r0, r3
 80017e6:	f000 f8e3 	bl	80019b0 <FND_DispDigit>
      FND_DispOn(digitPos);
 80017ea:	4b42      	ldr	r3, [pc, #264]	@ (80018f4 <FND_DispDataCallBack+0x23c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f000 f8a4 	bl	800193c <FND_DispOn>
      break;
 80017f4:	e07b      	b.n	80018ee <FND_DispDataCallBack+0x236>
   case DIGIT_DP_1:
      FND_DispOff(digitPos);
 80017f6:	4b3f      	ldr	r3, [pc, #252]	@ (80018f4 <FND_DispDataCallBack+0x23c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 f886 	bl	800190c <FND_DispOff>
      if( fndDispDp & (1<<0)) {
 8001800:	4b41      	ldr	r3, [pc, #260]	@ (8001908 <FND_DispDataCallBack+0x250>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	2b00      	cmp	r3, #0
 800180a:	d003      	beq.n	8001814 <FND_DispDataCallBack+0x15c>
         FND_DispDigit(10);
 800180c:	200a      	movs	r0, #10
 800180e:	f000 f8cf 	bl	80019b0 <FND_DispDigit>
 8001812:	e002      	b.n	800181a <FND_DispDataCallBack+0x162>
      }
      else {
         FND_DispDigit(11);
 8001814:	200b      	movs	r0, #11
 8001816:	f000 f8cb 	bl	80019b0 <FND_DispDigit>
      }
      FND_DispOn(digitPos%4);
 800181a:	4b36      	ldr	r3, [pc, #216]	@ (80018f4 <FND_DispDataCallBack+0x23c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	425a      	negs	r2, r3
 8001820:	f003 0303 	and.w	r3, r3, #3
 8001824:	f002 0203 	and.w	r2, r2, #3
 8001828:	bf58      	it	pl
 800182a:	4253      	negpl	r3, r2
 800182c:	4618      	mov	r0, r3
 800182e:	f000 f885 	bl	800193c <FND_DispOn>
      break;
 8001832:	e05c      	b.n	80018ee <FND_DispDataCallBack+0x236>
   case DIGIT_DP_10:
      FND_DispOff(digitPos);
 8001834:	4b2f      	ldr	r3, [pc, #188]	@ (80018f4 <FND_DispDataCallBack+0x23c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f000 f867 	bl	800190c <FND_DispOff>
      if( fndDispDp & (1<<1)) {
 800183e:	4b32      	ldr	r3, [pc, #200]	@ (8001908 <FND_DispDataCallBack+0x250>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <FND_DispDataCallBack+0x19a>
         FND_DispDigit(10);
 800184a:	200a      	movs	r0, #10
 800184c:	f000 f8b0 	bl	80019b0 <FND_DispDigit>
 8001850:	e002      	b.n	8001858 <FND_DispDataCallBack+0x1a0>
      }
      else {
         FND_DispDigit(11);
 8001852:	200b      	movs	r0, #11
 8001854:	f000 f8ac 	bl	80019b0 <FND_DispDigit>
      }
      FND_DispOn(digitPos%4);
 8001858:	4b26      	ldr	r3, [pc, #152]	@ (80018f4 <FND_DispDataCallBack+0x23c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	425a      	negs	r2, r3
 800185e:	f003 0303 	and.w	r3, r3, #3
 8001862:	f002 0203 	and.w	r2, r2, #3
 8001866:	bf58      	it	pl
 8001868:	4253      	negpl	r3, r2
 800186a:	4618      	mov	r0, r3
 800186c:	f000 f866 	bl	800193c <FND_DispOn>
      break;
 8001870:	e03d      	b.n	80018ee <FND_DispDataCallBack+0x236>
   case DIGIT_DP_100:
      FND_DispOff(digitPos);
 8001872:	4b20      	ldr	r3, [pc, #128]	@ (80018f4 <FND_DispDataCallBack+0x23c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f000 f848 	bl	800190c <FND_DispOff>
      if( fndDispDp & (1<<2)) {
 800187c:	4b22      	ldr	r3, [pc, #136]	@ (8001908 <FND_DispDataCallBack+0x250>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <FND_DispDataCallBack+0x1d8>
         FND_DispDigit(10);
 8001888:	200a      	movs	r0, #10
 800188a:	f000 f891 	bl	80019b0 <FND_DispDigit>
 800188e:	e002      	b.n	8001896 <FND_DispDataCallBack+0x1de>
      }
      else {
         FND_DispDigit(11);
 8001890:	200b      	movs	r0, #11
 8001892:	f000 f88d 	bl	80019b0 <FND_DispDigit>
      }
      FND_DispOn(digitPos%4);
 8001896:	4b17      	ldr	r3, [pc, #92]	@ (80018f4 <FND_DispDataCallBack+0x23c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	425a      	negs	r2, r3
 800189c:	f003 0303 	and.w	r3, r3, #3
 80018a0:	f002 0203 	and.w	r2, r2, #3
 80018a4:	bf58      	it	pl
 80018a6:	4253      	negpl	r3, r2
 80018a8:	4618      	mov	r0, r3
 80018aa:	f000 f847 	bl	800193c <FND_DispOn>
      break;
 80018ae:	e01e      	b.n	80018ee <FND_DispDataCallBack+0x236>
   case DIGIT_DP_1000:
      FND_DispOff(digitPos);
 80018b0:	4b10      	ldr	r3, [pc, #64]	@ (80018f4 <FND_DispDataCallBack+0x23c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f000 f829 	bl	800190c <FND_DispOff>
      if( fndDispDp & (1<<3)) {
 80018ba:	4b13      	ldr	r3, [pc, #76]	@ (8001908 <FND_DispDataCallBack+0x250>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	f003 0308 	and.w	r3, r3, #8
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <FND_DispDataCallBack+0x216>
         FND_DispDigit(10);
 80018c6:	200a      	movs	r0, #10
 80018c8:	f000 f872 	bl	80019b0 <FND_DispDigit>
 80018cc:	e002      	b.n	80018d4 <FND_DispDataCallBack+0x21c>
      }
      else {
         FND_DispDigit(11);
 80018ce:	200b      	movs	r0, #11
 80018d0:	f000 f86e 	bl	80019b0 <FND_DispDigit>
      }
      FND_DispOn(digitPos%4);
 80018d4:	4b07      	ldr	r3, [pc, #28]	@ (80018f4 <FND_DispDataCallBack+0x23c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	425a      	negs	r2, r3
 80018da:	f003 0303 	and.w	r3, r3, #3
 80018de:	f002 0203 	and.w	r2, r2, #3
 80018e2:	bf58      	it	pl
 80018e4:	4253      	negpl	r3, r2
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 f828 	bl	800193c <FND_DispOn>
      break;
 80018ec:	bf00      	nop

   }
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	2000022c 	.word	0x2000022c
 80018f8:	20000228 	.word	0x20000228
 80018fc:	cccccccd 	.word	0xcccccccd
 8001900:	51eb851f 	.word	0x51eb851f
 8001904:	10624dd3 	.word	0x10624dd3
 8001908:	2000022a 	.word	0x2000022a

0800190c <FND_DispOff>:


void FND_DispOff(int fndPos)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
   // GPIO_Write(GPIOx, PIn, SET);
   HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, SET);
 8001914:	4a08      	ldr	r2, [pc, #32]	@ (8001938 <FND_DispOff+0x2c>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800191c:	4a06      	ldr	r2, [pc, #24]	@ (8001938 <FND_DispOff+0x2c>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	4413      	add	r3, r2
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	b29b      	uxth	r3, r3
 8001928:	2201      	movs	r2, #1
 800192a:	4619      	mov	r1, r3
 800192c:	f000 fdc2 	bl	80024b4 <HAL_GPIO_WritePin>
}
 8001930:	bf00      	nop
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	2000001c 	.word	0x2000001c

0800193c <FND_DispOn>:
void FND_DispOn(int fndPos)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
   // GPIO_Write(GPIOx, Pin, RESET);
   HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, RESET);
 8001944:	4a08      	ldr	r2, [pc, #32]	@ (8001968 <FND_DispOn+0x2c>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800194c:	4a06      	ldr	r2, [pc, #24]	@ (8001968 <FND_DispOn+0x2c>)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	4413      	add	r3, r2
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	b29b      	uxth	r3, r3
 8001958:	2200      	movs	r2, #0
 800195a:	4619      	mov	r1, r3
 800195c:	f000 fdaa 	bl	80024b4 <HAL_GPIO_WritePin>
}
 8001960:	bf00      	nop
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	2000001c 	.word	0x2000001c

0800196c <FND_DispOffAll>:
void FND_DispOffAll()
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
   for(int i = 0;i<4;i++){
 8001972:	2300      	movs	r3, #0
 8001974:	607b      	str	r3, [r7, #4]
 8001976:	e010      	b.n	800199a <FND_DispOffAll+0x2e>
      HAL_GPIO_WritePin(fndDigitCom[i].GPIOx, fndDigitCom[i].pinNum, SET);
 8001978:	4a0c      	ldr	r2, [pc, #48]	@ (80019ac <FND_DispOffAll+0x40>)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001980:	4a0a      	ldr	r2, [pc, #40]	@ (80019ac <FND_DispOffAll+0x40>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	4413      	add	r3, r2
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	b29b      	uxth	r3, r3
 800198c:	2201      	movs	r2, #1
 800198e:	4619      	mov	r1, r3
 8001990:	f000 fd90 	bl	80024b4 <HAL_GPIO_WritePin>
   for(int i = 0;i<4;i++){
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3301      	adds	r3, #1
 8001998:	607b      	str	r3, [r7, #4]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b03      	cmp	r3, #3
 800199e:	ddeb      	ble.n	8001978 <FND_DispOffAll+0xc>
   }
}
 80019a0:	bf00      	nop
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	2000001c 	.word	0x2000001c

080019b0 <FND_DispDigit>:

void FND_DispDigit(uint16_t digit)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	80fb      	strh	r3, [r7, #6]
   const uint8_t segFont[12] = {
 80019ba:	4a1f      	ldr	r2, [pc, #124]	@ (8001a38 <FND_DispDigit+0x88>)
 80019bc:	f107 0308 	add.w	r3, r7, #8
 80019c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80019c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
         0x6F,  // 9 => 01101111
         0x80,  // 10(dp) => 1000000
       0x00,  // 11(off) => 0000000
      };

   for (int i = 0; i<8;i++){
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
 80019ca:	e02c      	b.n	8001a26 <FND_DispDigit+0x76>
      if(!(segFont[digit] & (1<<i))){
 80019cc:	88fb      	ldrh	r3, [r7, #6]
 80019ce:	3318      	adds	r3, #24
 80019d0:	443b      	add	r3, r7
 80019d2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80019d6:	461a      	mov	r2, r3
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	fa42 f303 	asr.w	r3, r2, r3
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10e      	bne.n	8001a04 <FND_DispDigit+0x54>
         HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, RESET);
 80019e6:	4a15      	ldr	r2, [pc, #84]	@ (8001a3c <FND_DispDigit+0x8c>)
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80019ee:	4a13      	ldr	r2, [pc, #76]	@ (8001a3c <FND_DispDigit+0x8c>)
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	4413      	add	r3, r2
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	2200      	movs	r2, #0
 80019fc:	4619      	mov	r1, r3
 80019fe:	f000 fd59 	bl	80024b4 <HAL_GPIO_WritePin>
 8001a02:	e00d      	b.n	8001a20 <FND_DispDigit+0x70>
      }
      else {
         HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, SET);
 8001a04:	4a0d      	ldr	r2, [pc, #52]	@ (8001a3c <FND_DispDigit+0x8c>)
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001a0c:	4a0b      	ldr	r2, [pc, #44]	@ (8001a3c <FND_DispDigit+0x8c>)
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	4413      	add	r3, r2
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	2201      	movs	r2, #1
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f000 fd4a 	bl	80024b4 <HAL_GPIO_WritePin>
   for (int i = 0; i<8;i++){
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	3301      	adds	r3, #1
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	2b07      	cmp	r3, #7
 8001a2a:	ddcf      	ble.n	80019cc <FND_DispDigit+0x1c>
      }
   }
}
 8001a2c:	bf00      	nop
 8001a2e:	bf00      	nop
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	08005a60 	.word	0x08005a60
 8001a3c:	2000003c 	.word	0x2000003c

08001a40 <LCD_Init>:

static uint8_t lcdData = 0;
static I2C_HandleTypeDef *hLcdI2C;

void LCD_Init(I2C_HandleTypeDef *hI2C)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
	hLcdI2C = hI2C;
 8001a48:	4a18      	ldr	r2, [pc, #96]	@ (8001aac <LCD_Init+0x6c>)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6013      	str	r3, [r2, #0]
	HAL_Delay(50);
 8001a4e:	2032      	movs	r0, #50	@ 0x32
 8001a50:	f000 f9cc 	bl	8001dec <HAL_Delay>
	LCD_cmdMode();
 8001a54:	f000 f852 	bl	8001afc <LCD_cmdMode>
	LCD_writeMode();
 8001a58:	f000 f874 	bl	8001b44 <LCD_writeMode>
	LCD_sendNibbleData(0x30);
 8001a5c:	2030      	movs	r0, #48	@ 0x30
 8001a5e:	f000 f8a7 	bl	8001bb0 <LCD_sendNibbleData>
	HAL_Delay(5);
 8001a62:	2005      	movs	r0, #5
 8001a64:	f000 f9c2 	bl	8001dec <HAL_Delay>
	LCD_sendNibbleData(0x30);
 8001a68:	2030      	movs	r0, #48	@ 0x30
 8001a6a:	f000 f8a1 	bl	8001bb0 <LCD_sendNibbleData>
	HAL_Delay(1);
 8001a6e:	2001      	movs	r0, #1
 8001a70:	f000 f9bc 	bl	8001dec <HAL_Delay>
	LCD_sendNibbleData(0x30);
 8001a74:	2030      	movs	r0, #48	@ 0x30
 8001a76:	f000 f89b 	bl	8001bb0 <LCD_sendNibbleData>
	LCD_sendNibbleData(0x20);
 8001a7a:	2020      	movs	r0, #32
 8001a7c:	f000 f898 	bl	8001bb0 <LCD_sendNibbleData>
	LCD_sendData(LCD_4BIT_FUNC_SET);
 8001a80:	2028      	movs	r0, #40	@ 0x28
 8001a82:	f000 f8b9 	bl	8001bf8 <LCD_sendData>
	LCD_sendData(LCD_DISP_OFF);
 8001a86:	2008      	movs	r0, #8
 8001a88:	f000 f8b6 	bl	8001bf8 <LCD_sendData>
	LCD_sendData(LCD_DISP_CLEAR);
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	f000 f8b3 	bl	8001bf8 <LCD_sendData>
	LCD_sendData(LCD_ENTRY_MODE_SET);
 8001a92:	2006      	movs	r0, #6
 8001a94:	f000 f8b0 	bl	8001bf8 <LCD_sendData>
	LCD_sendData(LCD_DISP_ON);
 8001a98:	200c      	movs	r0, #12
 8001a9a:	f000 f8ad 	bl	8001bf8 <LCD_sendData>
	LCD_backLightOn();
 8001a9e:	f000 f81d 	bl	8001adc <LCD_backLightOn>
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000234 	.word	0x20000234

08001ab0 <LCD_sendI2C>:

void LCD_sendI2C(uint8_t data)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af02      	add	r7, sp, #8
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(hLcdI2C, LCD_DEV_ADDR<<1, &data, 1, 1000);
 8001aba:	4b07      	ldr	r3, [pc, #28]	@ (8001ad8 <LCD_sendI2C+0x28>)
 8001abc:	6818      	ldr	r0, [r3, #0]
 8001abe:	1dfa      	adds	r2, r7, #7
 8001ac0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	214e      	movs	r1, #78	@ 0x4e
 8001aca:	f000 fe51 	bl	8002770 <HAL_I2C_Master_Transmit>
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000234 	.word	0x20000234

08001adc <LCD_backLightOn>:

void LCD_backLightOn()
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_BL);
 8001ae0:	4b05      	ldr	r3, [pc, #20]	@ (8001af8 <LCD_backLightOn+0x1c>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	f043 0308 	orr.w	r3, r3, #8
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	4b03      	ldr	r3, [pc, #12]	@ (8001af8 <LCD_backLightOn+0x1c>)
 8001aec:	701a      	strb	r2, [r3, #0]
}
 8001aee:	bf00      	nop
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	20000230 	.word	0x20000230

08001afc <LCD_cmdMode>:
{
	lcdData &= ~(1<<LCD_BL);
}

void LCD_cmdMode()
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RS);
 8001b00:	4b06      	ldr	r3, [pc, #24]	@ (8001b1c <LCD_cmdMode+0x20>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	f023 0301 	bic.w	r3, r3, #1
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	4b04      	ldr	r3, [pc, #16]	@ (8001b1c <LCD_cmdMode+0x20>)
 8001b0c:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001b0e:	4b03      	ldr	r3, [pc, #12]	@ (8001b1c <LCD_cmdMode+0x20>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff ffcc 	bl	8001ab0 <LCD_sendI2C>
}
 8001b18:	bf00      	nop
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000230 	.word	0x20000230

08001b20 <LCD_charMode>:

void LCD_charMode()
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_RS);
 8001b24:	4b06      	ldr	r3, [pc, #24]	@ (8001b40 <LCD_charMode+0x20>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4b04      	ldr	r3, [pc, #16]	@ (8001b40 <LCD_charMode+0x20>)
 8001b30:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001b32:	4b03      	ldr	r3, [pc, #12]	@ (8001b40 <LCD_charMode+0x20>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff ffba 	bl	8001ab0 <LCD_sendI2C>
}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000230 	.word	0x20000230

08001b44 <LCD_writeMode>:

void LCD_writeMode()
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RW);
 8001b48:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <LCD_writeMode+0x20>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	f023 0302 	bic.w	r3, r3, #2
 8001b50:	b2da      	uxtb	r2, r3
 8001b52:	4b04      	ldr	r3, [pc, #16]	@ (8001b64 <LCD_writeMode+0x20>)
 8001b54:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001b56:	4b03      	ldr	r3, [pc, #12]	@ (8001b64 <LCD_writeMode+0x20>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff ffa8 	bl	8001ab0 <LCD_sendI2C>
}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000230 	.word	0x20000230

08001b68 <LCD_E_High>:

void LCD_E_High()
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_E);
 8001b6c:	4b06      	ldr	r3, [pc, #24]	@ (8001b88 <LCD_E_High+0x20>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	f043 0304 	orr.w	r3, r3, #4
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	4b04      	ldr	r3, [pc, #16]	@ (8001b88 <LCD_E_High+0x20>)
 8001b78:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001b7a:	4b03      	ldr	r3, [pc, #12]	@ (8001b88 <LCD_E_High+0x20>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff ff96 	bl	8001ab0 <LCD_sendI2C>
}
 8001b84:	bf00      	nop
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20000230 	.word	0x20000230

08001b8c <LCD_E_Low>:

void LCD_E_Low()
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_E);
 8001b90:	4b06      	ldr	r3, [pc, #24]	@ (8001bac <LCD_E_Low+0x20>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	f023 0304 	bic.w	r3, r3, #4
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	4b04      	ldr	r3, [pc, #16]	@ (8001bac <LCD_E_Low+0x20>)
 8001b9c:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001b9e:	4b03      	ldr	r3, [pc, #12]	@ (8001bac <LCD_E_Low+0x20>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff ff84 	bl	8001ab0 <LCD_sendI2C>
}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20000230 	.word	0x20000230

08001bb0 <LCD_sendNibbleData>:

void LCD_sendNibbleData(uint8_t data)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	71fb      	strb	r3, [r7, #7]
	LCD_E_High();
 8001bba:	f7ff ffd5 	bl	8001b68 <LCD_E_High>
	lcdData = (data & 0xf0) | (lcdData & 0x0f); // 상위 data 하위 lcdData
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	f023 030f 	bic.w	r3, r3, #15
 8001bc6:	b25a      	sxtb	r2, r3
 8001bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf4 <LCD_sendNibbleData+0x44>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	b25b      	sxtb	r3, r3
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	b25b      	sxtb	r3, r3
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	b25b      	sxtb	r3, r3
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	4b06      	ldr	r3, [pc, #24]	@ (8001bf4 <LCD_sendNibbleData+0x44>)
 8001bdc:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001bde:	4b05      	ldr	r3, [pc, #20]	@ (8001bf4 <LCD_sendNibbleData+0x44>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff ff64 	bl	8001ab0 <LCD_sendI2C>
	LCD_E_Low();
 8001be8:	f7ff ffd0 	bl	8001b8c <LCD_E_Low>
}
 8001bec:	bf00      	nop
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000230 	.word	0x20000230

08001bf8 <LCD_sendData>:

void LCD_sendData(uint8_t data)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71fb      	strb	r3, [r7, #7]
	// high 4bit
	LCD_sendNibbleData(data);
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff ffd3 	bl	8001bb0 <LCD_sendNibbleData>


	data = data << 4;
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	71fb      	strb	r3, [r7, #7]
	// low 4bit
	LCD_sendNibbleData(data);
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff ffcc 	bl	8001bb0 <LCD_sendNibbleData>
}
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <LCD_writeCmdData>:


void LCD_writeCmdData(uint8_t data)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
	LCD_writeMode();
 8001c2a:	f7ff ff8b 	bl	8001b44 <LCD_writeMode>
	LCD_cmdMode();
 8001c2e:	f7ff ff65 	bl	8001afc <LCD_cmdMode>
	LCD_sendData(data);
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff ffdf 	bl	8001bf8 <LCD_sendData>
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <LCD_writeCharData>:

void LCD_writeCharData(uint8_t data)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	4603      	mov	r3, r0
 8001c4a:	71fb      	strb	r3, [r7, #7]
	LCD_writeMode();
 8001c4c:	f7ff ff7a 	bl	8001b44 <LCD_writeMode>
	LCD_charMode();
 8001c50:	f7ff ff66 	bl	8001b20 <LCD_charMode>
	LCD_sendData(data);
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff ffce 	bl	8001bf8 <LCD_sendData>
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <LCD_writeString>:

void LCD_writeString(char *str)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
	for (int i = 0; str[i]; i++) {
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	e009      	b.n	8001c86 <LCD_writeString+0x22>
		LCD_writeCharData(str[i]);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	4413      	add	r3, r2
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff ffe1 	bl	8001c42 <LCD_writeCharData>
	for (int i = 0; str[i]; i++) {
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	3301      	adds	r3, #1
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1ef      	bne.n	8001c72 <LCD_writeString+0xe>
	}
}
 8001c92:	bf00      	nop
 8001c94:	bf00      	nop
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	460a      	mov	r2, r1
 8001ca6:	71fb      	strb	r3, [r7, #7]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	71bb      	strb	r3, [r7, #6]
	col %= 16;
 8001cac:	79bb      	ldrb	r3, [r7, #6]
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	71bb      	strb	r3, [r7, #6]
	row %= 2;
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	71fb      	strb	r3, [r7, #7]

	uint8_t lcdRegAddr = (0x40 * row) + col;
 8001cbc:	79fb      	ldrb	r3, [r7, #7]
 8001cbe:	019b      	lsls	r3, r3, #6
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	79bb      	ldrb	r3, [r7, #6]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	73fb      	strb	r3, [r7, #15]
	uint8_t command = 0x80 + lcdRegAddr;
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
 8001cca:	3b80      	subs	r3, #128	@ 0x80
 8001ccc:	73bb      	strb	r3, [r7, #14]
	LCD_writeCmdData(command);
 8001cce:	7bbb      	ldrb	r3, [r7, #14]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ffa5 	bl	8001c20 <LCD_writeCmdData>
}
 8001cd6:	bf00      	nop
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <LCD_writeStringXY>:

void LCD_writeStringXY(uint8_t row, uint8_t col, char *str)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	603a      	str	r2, [r7, #0]
 8001ce8:	71fb      	strb	r3, [r7, #7]
 8001cea:	460b      	mov	r3, r1
 8001cec:	71bb      	strb	r3, [r7, #6]
	LCD_gotoXY(row, col);
 8001cee:	79ba      	ldrb	r2, [r7, #6]
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ffd1 	bl	8001c9c <LCD_gotoXY>
	LCD_writeString(str);
 8001cfa:	6838      	ldr	r0, [r7, #0]
 8001cfc:	f7ff ffb2 	bl	8001c64 <LCD_writeString>
}
 8001d00:	bf00      	nop
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d48 <HAL_Init+0x40>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a0d      	ldr	r2, [pc, #52]	@ (8001d48 <HAL_Init+0x40>)
 8001d12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d18:	4b0b      	ldr	r3, [pc, #44]	@ (8001d48 <HAL_Init+0x40>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d48 <HAL_Init+0x40>)
 8001d1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d24:	4b08      	ldr	r3, [pc, #32]	@ (8001d48 <HAL_Init+0x40>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a07      	ldr	r2, [pc, #28]	@ (8001d48 <HAL_Init+0x40>)
 8001d2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d30:	2003      	movs	r0, #3
 8001d32:	f000 f94f 	bl	8001fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d36:	200f      	movs	r0, #15
 8001d38:	f000 f808 	bl	8001d4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d3c:	f7fe fdde 	bl	80008fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40023c00 	.word	0x40023c00

08001d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d54:	4b12      	ldr	r3, [pc, #72]	@ (8001da0 <HAL_InitTick+0x54>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	4b12      	ldr	r3, [pc, #72]	@ (8001da4 <HAL_InitTick+0x58>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f000 f967 	bl	800203e <HAL_SYSTICK_Config>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e00e      	b.n	8001d98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2b0f      	cmp	r3, #15
 8001d7e:	d80a      	bhi.n	8001d96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d80:	2200      	movs	r2, #0
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	f04f 30ff 	mov.w	r0, #4294967295
 8001d88:	f000 f92f 	bl	8001fea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d8c:	4a06      	ldr	r2, [pc, #24]	@ (8001da8 <HAL_InitTick+0x5c>)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
 8001d94:	e000      	b.n	8001d98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20000000 	.word	0x20000000
 8001da4:	20000080 	.word	0x20000080
 8001da8:	2000007c 	.word	0x2000007c

08001dac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001db0:	4b06      	ldr	r3, [pc, #24]	@ (8001dcc <HAL_IncTick+0x20>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	461a      	mov	r2, r3
 8001db6:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <HAL_IncTick+0x24>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4413      	add	r3, r2
 8001dbc:	4a04      	ldr	r2, [pc, #16]	@ (8001dd0 <HAL_IncTick+0x24>)
 8001dbe:	6013      	str	r3, [r2, #0]
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	20000080 	.word	0x20000080
 8001dd0:	20000238 	.word	0x20000238

08001dd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001dd8:	4b03      	ldr	r3, [pc, #12]	@ (8001de8 <HAL_GetTick+0x14>)
 8001dda:	681b      	ldr	r3, [r3, #0]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	20000238 	.word	0x20000238

08001dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001df4:	f7ff ffee 	bl	8001dd4 <HAL_GetTick>
 8001df8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e04:	d005      	beq.n	8001e12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e06:	4b0a      	ldr	r3, [pc, #40]	@ (8001e30 <HAL_Delay+0x44>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4413      	add	r3, r2
 8001e10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e12:	bf00      	nop
 8001e14:	f7ff ffde 	bl	8001dd4 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d8f7      	bhi.n	8001e14 <HAL_Delay+0x28>
  {
  }
}
 8001e24:	bf00      	nop
 8001e26:	bf00      	nop
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000080 	.word	0x20000080

08001e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e44:	4b0c      	ldr	r3, [pc, #48]	@ (8001e78 <__NVIC_SetPriorityGrouping+0x44>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e50:	4013      	ands	r3, r2
 8001e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e66:	4a04      	ldr	r2, [pc, #16]	@ (8001e78 <__NVIC_SetPriorityGrouping+0x44>)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	60d3      	str	r3, [r2, #12]
}
 8001e6c:	bf00      	nop
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e80:	4b04      	ldr	r3, [pc, #16]	@ (8001e94 <__NVIC_GetPriorityGrouping+0x18>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	0a1b      	lsrs	r3, r3, #8
 8001e86:	f003 0307 	and.w	r3, r3, #7
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	db0b      	blt.n	8001ec2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	f003 021f 	and.w	r2, r3, #31
 8001eb0:	4907      	ldr	r1, [pc, #28]	@ (8001ed0 <__NVIC_EnableIRQ+0x38>)
 8001eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb6:	095b      	lsrs	r3, r3, #5
 8001eb8:	2001      	movs	r0, #1
 8001eba:	fa00 f202 	lsl.w	r2, r0, r2
 8001ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	e000e100 	.word	0xe000e100

08001ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	6039      	str	r1, [r7, #0]
 8001ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	db0a      	blt.n	8001efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	490c      	ldr	r1, [pc, #48]	@ (8001f20 <__NVIC_SetPriority+0x4c>)
 8001eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef2:	0112      	lsls	r2, r2, #4
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001efc:	e00a      	b.n	8001f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	4908      	ldr	r1, [pc, #32]	@ (8001f24 <__NVIC_SetPriority+0x50>)
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	3b04      	subs	r3, #4
 8001f0c:	0112      	lsls	r2, r2, #4
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	440b      	add	r3, r1
 8001f12:	761a      	strb	r2, [r3, #24]
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000e100 	.word	0xe000e100
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b089      	sub	sp, #36	@ 0x24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f1c3 0307 	rsb	r3, r3, #7
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	bf28      	it	cs
 8001f46:	2304      	movcs	r3, #4
 8001f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	2b06      	cmp	r3, #6
 8001f50:	d902      	bls.n	8001f58 <NVIC_EncodePriority+0x30>
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	3b03      	subs	r3, #3
 8001f56:	e000      	b.n	8001f5a <NVIC_EncodePriority+0x32>
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43da      	mvns	r2, r3
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	401a      	ands	r2, r3
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f70:	f04f 31ff 	mov.w	r1, #4294967295
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7a:	43d9      	mvns	r1, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f80:	4313      	orrs	r3, r2
         );
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3724      	adds	r7, #36	@ 0x24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
	...

08001f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fa0:	d301      	bcc.n	8001fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e00f      	b.n	8001fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd0 <SysTick_Config+0x40>)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3b01      	subs	r3, #1
 8001fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fae:	210f      	movs	r1, #15
 8001fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb4:	f7ff ff8e 	bl	8001ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fb8:	4b05      	ldr	r3, [pc, #20]	@ (8001fd0 <SysTick_Config+0x40>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fbe:	4b04      	ldr	r3, [pc, #16]	@ (8001fd0 <SysTick_Config+0x40>)
 8001fc0:	2207      	movs	r2, #7
 8001fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	e000e010 	.word	0xe000e010

08001fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7ff ff29 	bl	8001e34 <__NVIC_SetPriorityGrouping>
}
 8001fe2:	bf00      	nop
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b086      	sub	sp, #24
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	607a      	str	r2, [r7, #4]
 8001ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ffc:	f7ff ff3e 	bl	8001e7c <__NVIC_GetPriorityGrouping>
 8002000:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	68b9      	ldr	r1, [r7, #8]
 8002006:	6978      	ldr	r0, [r7, #20]
 8002008:	f7ff ff8e 	bl	8001f28 <NVIC_EncodePriority>
 800200c:	4602      	mov	r2, r0
 800200e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002012:	4611      	mov	r1, r2
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff ff5d 	bl	8001ed4 <__NVIC_SetPriority>
}
 800201a:	bf00      	nop
 800201c:	3718      	adds	r7, #24
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	4603      	mov	r3, r0
 800202a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800202c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff ff31 	bl	8001e98 <__NVIC_EnableIRQ>
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7ff ffa2 	bl	8001f90 <SysTick_Config>
 800204c:	4603      	mov	r3, r0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b084      	sub	sp, #16
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002062:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002064:	f7ff feb6 	bl	8001dd4 <HAL_GetTick>
 8002068:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d008      	beq.n	8002088 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2280      	movs	r2, #128	@ 0x80
 800207a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e052      	b.n	800212e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0216 	bic.w	r2, r2, #22
 8002096:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	695a      	ldr	r2, [r3, #20]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020a6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d103      	bne.n	80020b8 <HAL_DMA_Abort+0x62>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d007      	beq.n	80020c8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 0208 	bic.w	r2, r2, #8
 80020c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0201 	bic.w	r2, r2, #1
 80020d6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020d8:	e013      	b.n	8002102 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020da:	f7ff fe7b 	bl	8001dd4 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b05      	cmp	r3, #5
 80020e6:	d90c      	bls.n	8002102 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2220      	movs	r2, #32
 80020ec:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2203      	movs	r2, #3
 80020f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e015      	b.n	800212e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1e4      	bne.n	80020da <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002114:	223f      	movs	r2, #63	@ 0x3f
 8002116:	409a      	lsls	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d004      	beq.n	8002154 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2280      	movs	r2, #128	@ 0x80
 800214e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e00c      	b.n	800216e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2205      	movs	r2, #5
 8002158:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 0201 	bic.w	r2, r2, #1
 800216a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
	...

0800217c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800217c:	b480      	push	{r7}
 800217e:	b089      	sub	sp, #36	@ 0x24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002186:	2300      	movs	r3, #0
 8002188:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800218a:	2300      	movs	r3, #0
 800218c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800218e:	2300      	movs	r3, #0
 8002190:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]
 8002196:	e159      	b.n	800244c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002198:	2201      	movs	r2, #1
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	4013      	ands	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	f040 8148 	bne.w	8002446 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 0303 	and.w	r3, r3, #3
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d005      	beq.n	80021ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d130      	bne.n	8002230 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	2203      	movs	r2, #3
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	43db      	mvns	r3, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4013      	ands	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002204:	2201      	movs	r2, #1
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	091b      	lsrs	r3, r3, #4
 800221a:	f003 0201 	and.w	r2, r3, #1
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4313      	orrs	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 0303 	and.w	r3, r3, #3
 8002238:	2b03      	cmp	r3, #3
 800223a:	d017      	beq.n	800226c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	2203      	movs	r2, #3
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	43db      	mvns	r3, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4013      	ands	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4313      	orrs	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 0303 	and.w	r3, r3, #3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d123      	bne.n	80022c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	08da      	lsrs	r2, r3, #3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3208      	adds	r2, #8
 8002280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002284:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	220f      	movs	r2, #15
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	43db      	mvns	r3, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	691a      	ldr	r2, [r3, #16]
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	08da      	lsrs	r2, r3, #3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	3208      	adds	r2, #8
 80022ba:	69b9      	ldr	r1, [r7, #24]
 80022bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	2203      	movs	r2, #3
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	43db      	mvns	r3, r3
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4013      	ands	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 0203 	and.w	r2, r3, #3
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 80a2 	beq.w	8002446 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	4b57      	ldr	r3, [pc, #348]	@ (8002464 <HAL_GPIO_Init+0x2e8>)
 8002308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230a:	4a56      	ldr	r2, [pc, #344]	@ (8002464 <HAL_GPIO_Init+0x2e8>)
 800230c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002310:	6453      	str	r3, [r2, #68]	@ 0x44
 8002312:	4b54      	ldr	r3, [pc, #336]	@ (8002464 <HAL_GPIO_Init+0x2e8>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002316:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800231e:	4a52      	ldr	r2, [pc, #328]	@ (8002468 <HAL_GPIO_Init+0x2ec>)
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	089b      	lsrs	r3, r3, #2
 8002324:	3302      	adds	r3, #2
 8002326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800232a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	220f      	movs	r2, #15
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43db      	mvns	r3, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4013      	ands	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a49      	ldr	r2, [pc, #292]	@ (800246c <HAL_GPIO_Init+0x2f0>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d019      	beq.n	800237e <HAL_GPIO_Init+0x202>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a48      	ldr	r2, [pc, #288]	@ (8002470 <HAL_GPIO_Init+0x2f4>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d013      	beq.n	800237a <HAL_GPIO_Init+0x1fe>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a47      	ldr	r2, [pc, #284]	@ (8002474 <HAL_GPIO_Init+0x2f8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d00d      	beq.n	8002376 <HAL_GPIO_Init+0x1fa>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a46      	ldr	r2, [pc, #280]	@ (8002478 <HAL_GPIO_Init+0x2fc>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d007      	beq.n	8002372 <HAL_GPIO_Init+0x1f6>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a45      	ldr	r2, [pc, #276]	@ (800247c <HAL_GPIO_Init+0x300>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d101      	bne.n	800236e <HAL_GPIO_Init+0x1f2>
 800236a:	2304      	movs	r3, #4
 800236c:	e008      	b.n	8002380 <HAL_GPIO_Init+0x204>
 800236e:	2307      	movs	r3, #7
 8002370:	e006      	b.n	8002380 <HAL_GPIO_Init+0x204>
 8002372:	2303      	movs	r3, #3
 8002374:	e004      	b.n	8002380 <HAL_GPIO_Init+0x204>
 8002376:	2302      	movs	r3, #2
 8002378:	e002      	b.n	8002380 <HAL_GPIO_Init+0x204>
 800237a:	2301      	movs	r3, #1
 800237c:	e000      	b.n	8002380 <HAL_GPIO_Init+0x204>
 800237e:	2300      	movs	r3, #0
 8002380:	69fa      	ldr	r2, [r7, #28]
 8002382:	f002 0203 	and.w	r2, r2, #3
 8002386:	0092      	lsls	r2, r2, #2
 8002388:	4093      	lsls	r3, r2
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4313      	orrs	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002390:	4935      	ldr	r1, [pc, #212]	@ (8002468 <HAL_GPIO_Init+0x2ec>)
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	089b      	lsrs	r3, r3, #2
 8002396:	3302      	adds	r3, #2
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800239e:	4b38      	ldr	r3, [pc, #224]	@ (8002480 <HAL_GPIO_Init+0x304>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	43db      	mvns	r3, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4013      	ands	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	4313      	orrs	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023c2:	4a2f      	ldr	r2, [pc, #188]	@ (8002480 <HAL_GPIO_Init+0x304>)
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002480 <HAL_GPIO_Init+0x304>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	43db      	mvns	r3, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4013      	ands	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023ec:	4a24      	ldr	r2, [pc, #144]	@ (8002480 <HAL_GPIO_Init+0x304>)
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023f2:	4b23      	ldr	r3, [pc, #140]	@ (8002480 <HAL_GPIO_Init+0x304>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	43db      	mvns	r3, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4013      	ands	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002416:	4a1a      	ldr	r2, [pc, #104]	@ (8002480 <HAL_GPIO_Init+0x304>)
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800241c:	4b18      	ldr	r3, [pc, #96]	@ (8002480 <HAL_GPIO_Init+0x304>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	43db      	mvns	r3, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4013      	ands	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	4313      	orrs	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002440:	4a0f      	ldr	r2, [pc, #60]	@ (8002480 <HAL_GPIO_Init+0x304>)
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	3301      	adds	r3, #1
 800244a:	61fb      	str	r3, [r7, #28]
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	2b0f      	cmp	r3, #15
 8002450:	f67f aea2 	bls.w	8002198 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002454:	bf00      	nop
 8002456:	bf00      	nop
 8002458:	3724      	adds	r7, #36	@ 0x24
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	40023800 	.word	0x40023800
 8002468:	40013800 	.word	0x40013800
 800246c:	40020000 	.word	0x40020000
 8002470:	40020400 	.word	0x40020400
 8002474:	40020800 	.word	0x40020800
 8002478:	40020c00 	.word	0x40020c00
 800247c:	40021000 	.word	0x40021000
 8002480:	40013c00 	.word	0x40013c00

08002484 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691a      	ldr	r2, [r3, #16]
 8002494:	887b      	ldrh	r3, [r7, #2]
 8002496:	4013      	ands	r3, r2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d002      	beq.n	80024a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800249c:	2301      	movs	r3, #1
 800249e:	73fb      	strb	r3, [r7, #15]
 80024a0:	e001      	b.n	80024a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024a2:	2300      	movs	r3, #0
 80024a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	807b      	strh	r3, [r7, #2]
 80024c0:	4613      	mov	r3, r2
 80024c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024c4:	787b      	ldrb	r3, [r7, #1]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ca:	887a      	ldrh	r2, [r7, #2]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024d0:	e003      	b.n	80024da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024d2:	887b      	ldrh	r3, [r7, #2]
 80024d4:	041a      	lsls	r2, r3, #16
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	619a      	str	r2, [r3, #24]
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
	...

080024e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e12b      	b.n	8002752 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d106      	bne.n	8002514 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7fe f92a 	bl	8000768 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2224      	movs	r2, #36	@ 0x24
 8002518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 0201 	bic.w	r2, r2, #1
 800252a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800253a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800254a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800254c:	f001 f8da 	bl	8003704 <HAL_RCC_GetPCLK1Freq>
 8002550:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	4a81      	ldr	r2, [pc, #516]	@ (800275c <HAL_I2C_Init+0x274>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d807      	bhi.n	800256c <HAL_I2C_Init+0x84>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4a80      	ldr	r2, [pc, #512]	@ (8002760 <HAL_I2C_Init+0x278>)
 8002560:	4293      	cmp	r3, r2
 8002562:	bf94      	ite	ls
 8002564:	2301      	movls	r3, #1
 8002566:	2300      	movhi	r3, #0
 8002568:	b2db      	uxtb	r3, r3
 800256a:	e006      	b.n	800257a <HAL_I2C_Init+0x92>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4a7d      	ldr	r2, [pc, #500]	@ (8002764 <HAL_I2C_Init+0x27c>)
 8002570:	4293      	cmp	r3, r2
 8002572:	bf94      	ite	ls
 8002574:	2301      	movls	r3, #1
 8002576:	2300      	movhi	r3, #0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e0e7      	b.n	8002752 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	4a78      	ldr	r2, [pc, #480]	@ (8002768 <HAL_I2C_Init+0x280>)
 8002586:	fba2 2303 	umull	r2, r3, r2, r3
 800258a:	0c9b      	lsrs	r3, r3, #18
 800258c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68ba      	ldr	r2, [r7, #8]
 800259e:	430a      	orrs	r2, r1
 80025a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	4a6a      	ldr	r2, [pc, #424]	@ (800275c <HAL_I2C_Init+0x274>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d802      	bhi.n	80025bc <HAL_I2C_Init+0xd4>
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	3301      	adds	r3, #1
 80025ba:	e009      	b.n	80025d0 <HAL_I2C_Init+0xe8>
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80025c2:	fb02 f303 	mul.w	r3, r2, r3
 80025c6:	4a69      	ldr	r2, [pc, #420]	@ (800276c <HAL_I2C_Init+0x284>)
 80025c8:	fba2 2303 	umull	r2, r3, r2, r3
 80025cc:	099b      	lsrs	r3, r3, #6
 80025ce:	3301      	adds	r3, #1
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6812      	ldr	r2, [r2, #0]
 80025d4:	430b      	orrs	r3, r1
 80025d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80025e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	495c      	ldr	r1, [pc, #368]	@ (800275c <HAL_I2C_Init+0x274>)
 80025ec:	428b      	cmp	r3, r1
 80025ee:	d819      	bhi.n	8002624 <HAL_I2C_Init+0x13c>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	1e59      	subs	r1, r3, #1
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80025fe:	1c59      	adds	r1, r3, #1
 8002600:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002604:	400b      	ands	r3, r1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00a      	beq.n	8002620 <HAL_I2C_Init+0x138>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	1e59      	subs	r1, r3, #1
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	fbb1 f3f3 	udiv	r3, r1, r3
 8002618:	3301      	adds	r3, #1
 800261a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800261e:	e051      	b.n	80026c4 <HAL_I2C_Init+0x1dc>
 8002620:	2304      	movs	r3, #4
 8002622:	e04f      	b.n	80026c4 <HAL_I2C_Init+0x1dc>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d111      	bne.n	8002650 <HAL_I2C_Init+0x168>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	1e58      	subs	r0, r3, #1
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6859      	ldr	r1, [r3, #4]
 8002634:	460b      	mov	r3, r1
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	440b      	add	r3, r1
 800263a:	fbb0 f3f3 	udiv	r3, r0, r3
 800263e:	3301      	adds	r3, #1
 8002640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002644:	2b00      	cmp	r3, #0
 8002646:	bf0c      	ite	eq
 8002648:	2301      	moveq	r3, #1
 800264a:	2300      	movne	r3, #0
 800264c:	b2db      	uxtb	r3, r3
 800264e:	e012      	b.n	8002676 <HAL_I2C_Init+0x18e>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	1e58      	subs	r0, r3, #1
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6859      	ldr	r1, [r3, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	0099      	lsls	r1, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	fbb0 f3f3 	udiv	r3, r0, r3
 8002666:	3301      	adds	r3, #1
 8002668:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800266c:	2b00      	cmp	r3, #0
 800266e:	bf0c      	ite	eq
 8002670:	2301      	moveq	r3, #1
 8002672:	2300      	movne	r3, #0
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <HAL_I2C_Init+0x196>
 800267a:	2301      	movs	r3, #1
 800267c:	e022      	b.n	80026c4 <HAL_I2C_Init+0x1dc>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10e      	bne.n	80026a4 <HAL_I2C_Init+0x1bc>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	1e58      	subs	r0, r3, #1
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6859      	ldr	r1, [r3, #4]
 800268e:	460b      	mov	r3, r1
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	440b      	add	r3, r1
 8002694:	fbb0 f3f3 	udiv	r3, r0, r3
 8002698:	3301      	adds	r3, #1
 800269a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800269e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026a2:	e00f      	b.n	80026c4 <HAL_I2C_Init+0x1dc>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	1e58      	subs	r0, r3, #1
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6859      	ldr	r1, [r3, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	0099      	lsls	r1, r3, #2
 80026b4:	440b      	add	r3, r1
 80026b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ba:	3301      	adds	r3, #1
 80026bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	6809      	ldr	r1, [r1, #0]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69da      	ldr	r2, [r3, #28]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80026f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6911      	ldr	r1, [r2, #16]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	68d2      	ldr	r2, [r2, #12]
 80026fe:	4311      	orrs	r1, r2
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	6812      	ldr	r2, [r2, #0]
 8002704:	430b      	orrs	r3, r1
 8002706:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	695a      	ldr	r2, [r3, #20]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	430a      	orrs	r2, r1
 8002722:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 0201 	orr.w	r2, r2, #1
 8002732:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2220      	movs	r2, #32
 800273e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	000186a0 	.word	0x000186a0
 8002760:	001e847f 	.word	0x001e847f
 8002764:	003d08ff 	.word	0x003d08ff
 8002768:	431bde83 	.word	0x431bde83
 800276c:	10624dd3 	.word	0x10624dd3

08002770 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b088      	sub	sp, #32
 8002774:	af02      	add	r7, sp, #8
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	607a      	str	r2, [r7, #4]
 800277a:	461a      	mov	r2, r3
 800277c:	460b      	mov	r3, r1
 800277e:	817b      	strh	r3, [r7, #10]
 8002780:	4613      	mov	r3, r2
 8002782:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002784:	f7ff fb26 	bl	8001dd4 <HAL_GetTick>
 8002788:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b20      	cmp	r3, #32
 8002794:	f040 80e0 	bne.w	8002958 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	2319      	movs	r3, #25
 800279e:	2201      	movs	r2, #1
 80027a0:	4970      	ldr	r1, [pc, #448]	@ (8002964 <HAL_I2C_Master_Transmit+0x1f4>)
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 f964 	bl	8002a70 <I2C_WaitOnFlagUntilTimeout>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80027ae:	2302      	movs	r3, #2
 80027b0:	e0d3      	b.n	800295a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d101      	bne.n	80027c0 <HAL_I2C_Master_Transmit+0x50>
 80027bc:	2302      	movs	r3, #2
 80027be:	e0cc      	b.n	800295a <HAL_I2C_Master_Transmit+0x1ea>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d007      	beq.n	80027e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f042 0201 	orr.w	r2, r2, #1
 80027e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2221      	movs	r2, #33	@ 0x21
 80027fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2210      	movs	r2, #16
 8002802:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	893a      	ldrh	r2, [r7, #8]
 8002816:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800281c:	b29a      	uxth	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	4a50      	ldr	r2, [pc, #320]	@ (8002968 <HAL_I2C_Master_Transmit+0x1f8>)
 8002826:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002828:	8979      	ldrh	r1, [r7, #10]
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	6a3a      	ldr	r2, [r7, #32]
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 f89c 	bl	800296c <I2C_MasterRequestWrite>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e08d      	b.n	800295a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800283e:	2300      	movs	r3, #0
 8002840:	613b      	str	r3, [r7, #16]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	613b      	str	r3, [r7, #16]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	613b      	str	r3, [r7, #16]
 8002852:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002854:	e066      	b.n	8002924 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	6a39      	ldr	r1, [r7, #32]
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 fa22 	bl	8002ca4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00d      	beq.n	8002882 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286a:	2b04      	cmp	r3, #4
 800286c:	d107      	bne.n	800287e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800287c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e06b      	b.n	800295a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002886:	781a      	ldrb	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002892:	1c5a      	adds	r2, r3, #1
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800289c:	b29b      	uxth	r3, r3
 800289e:	3b01      	subs	r3, #1
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028aa:	3b01      	subs	r3, #1
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d11b      	bne.n	80028f8 <HAL_I2C_Master_Transmit+0x188>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d017      	beq.n	80028f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028cc:	781a      	ldrb	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d8:	1c5a      	adds	r2, r3, #1
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	3b01      	subs	r3, #1
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028f0:	3b01      	subs	r3, #1
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	6a39      	ldr	r1, [r7, #32]
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f000 fa19 	bl	8002d34 <I2C_WaitOnBTFFlagUntilTimeout>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00d      	beq.n	8002924 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290c:	2b04      	cmp	r3, #4
 800290e:	d107      	bne.n	8002920 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800291e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e01a      	b.n	800295a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002928:	2b00      	cmp	r3, #0
 800292a:	d194      	bne.n	8002856 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800293a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2220      	movs	r2, #32
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002954:	2300      	movs	r3, #0
 8002956:	e000      	b.n	800295a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002958:	2302      	movs	r3, #2
  }
}
 800295a:	4618      	mov	r0, r3
 800295c:	3718      	adds	r7, #24
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	00100002 	.word	0x00100002
 8002968:	ffff0000 	.word	0xffff0000

0800296c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b088      	sub	sp, #32
 8002970:	af02      	add	r7, sp, #8
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	607a      	str	r2, [r7, #4]
 8002976:	603b      	str	r3, [r7, #0]
 8002978:	460b      	mov	r3, r1
 800297a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002980:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2b08      	cmp	r3, #8
 8002986:	d006      	beq.n	8002996 <I2C_MasterRequestWrite+0x2a>
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d003      	beq.n	8002996 <I2C_MasterRequestWrite+0x2a>
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002994:	d108      	bne.n	80029a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	e00b      	b.n	80029c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ac:	2b12      	cmp	r3, #18
 80029ae:	d107      	bne.n	80029c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f000 f84f 	bl	8002a70 <I2C_WaitOnFlagUntilTimeout>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00d      	beq.n	80029f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029e6:	d103      	bne.n	80029f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e035      	b.n	8002a60 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029fc:	d108      	bne.n	8002a10 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029fe:	897b      	ldrh	r3, [r7, #10]
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	461a      	mov	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a0c:	611a      	str	r2, [r3, #16]
 8002a0e:	e01b      	b.n	8002a48 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a10:	897b      	ldrh	r3, [r7, #10]
 8002a12:	11db      	asrs	r3, r3, #7
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	f003 0306 	and.w	r3, r3, #6
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	f063 030f 	orn	r3, r3, #15
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	490e      	ldr	r1, [pc, #56]	@ (8002a68 <I2C_MasterRequestWrite+0xfc>)
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f000 f898 	bl	8002b64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e010      	b.n	8002a60 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a3e:	897b      	ldrh	r3, [r7, #10]
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	4907      	ldr	r1, [pc, #28]	@ (8002a6c <I2C_MasterRequestWrite+0x100>)
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 f888 	bl	8002b64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e000      	b.n	8002a60 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3718      	adds	r7, #24
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	00010008 	.word	0x00010008
 8002a6c:	00010002 	.word	0x00010002

08002a70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	603b      	str	r3, [r7, #0]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a80:	e048      	b.n	8002b14 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a88:	d044      	beq.n	8002b14 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a8a:	f7ff f9a3 	bl	8001dd4 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d302      	bcc.n	8002aa0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d139      	bne.n	8002b14 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	0c1b      	lsrs	r3, r3, #16
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d10d      	bne.n	8002ac6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	43da      	mvns	r2, r3
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	bf0c      	ite	eq
 8002abc:	2301      	moveq	r3, #1
 8002abe:	2300      	movne	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	e00c      	b.n	8002ae0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	43da      	mvns	r2, r3
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	bf0c      	ite	eq
 8002ad8:	2301      	moveq	r3, #1
 8002ada:	2300      	movne	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	461a      	mov	r2, r3
 8002ae0:	79fb      	ldrb	r3, [r7, #7]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d116      	bne.n	8002b14 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2220      	movs	r2, #32
 8002af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b00:	f043 0220 	orr.w	r2, r3, #32
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e023      	b.n	8002b5c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	0c1b      	lsrs	r3, r3, #16
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d10d      	bne.n	8002b3a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	43da      	mvns	r2, r3
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	bf0c      	ite	eq
 8002b30:	2301      	moveq	r3, #1
 8002b32:	2300      	movne	r3, #0
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	461a      	mov	r2, r3
 8002b38:	e00c      	b.n	8002b54 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	43da      	mvns	r2, r3
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	4013      	ands	r3, r2
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	bf0c      	ite	eq
 8002b4c:	2301      	moveq	r3, #1
 8002b4e:	2300      	movne	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	461a      	mov	r2, r3
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d093      	beq.n	8002a82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
 8002b70:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b72:	e071      	b.n	8002c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b82:	d123      	bne.n	8002bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b92:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb8:	f043 0204 	orr.w	r2, r3, #4
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e067      	b.n	8002c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd2:	d041      	beq.n	8002c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bd4:	f7ff f8fe 	bl	8001dd4 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d302      	bcc.n	8002bea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d136      	bne.n	8002c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	0c1b      	lsrs	r3, r3, #16
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d10c      	bne.n	8002c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	43da      	mvns	r2, r3
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	bf14      	ite	ne
 8002c06:	2301      	movne	r3, #1
 8002c08:	2300      	moveq	r3, #0
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	e00b      	b.n	8002c26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	43da      	mvns	r2, r3
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	bf14      	ite	ne
 8002c20:	2301      	movne	r3, #1
 8002c22:	2300      	moveq	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d016      	beq.n	8002c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c44:	f043 0220 	orr.w	r2, r3, #32
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e021      	b.n	8002c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	0c1b      	lsrs	r3, r3, #16
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d10c      	bne.n	8002c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	43da      	mvns	r2, r3
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	bf14      	ite	ne
 8002c74:	2301      	movne	r3, #1
 8002c76:	2300      	moveq	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	e00b      	b.n	8002c94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	43da      	mvns	r2, r3
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	4013      	ands	r3, r2
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	bf14      	ite	ne
 8002c8e:	2301      	movne	r3, #1
 8002c90:	2300      	moveq	r3, #0
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f47f af6d 	bne.w	8002b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cb0:	e034      	b.n	8002d1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 f886 	bl	8002dc4 <I2C_IsAcknowledgeFailed>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e034      	b.n	8002d2c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc8:	d028      	beq.n	8002d1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cca:	f7ff f883 	bl	8001dd4 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d302      	bcc.n	8002ce0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d11d      	bne.n	8002d1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cea:	2b80      	cmp	r3, #128	@ 0x80
 8002cec:	d016      	beq.n	8002d1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d08:	f043 0220 	orr.w	r2, r3, #32
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e007      	b.n	8002d2c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d26:	2b80      	cmp	r3, #128	@ 0x80
 8002d28:	d1c3      	bne.n	8002cb2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d40:	e034      	b.n	8002dac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 f83e 	bl	8002dc4 <I2C_IsAcknowledgeFailed>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e034      	b.n	8002dbc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d58:	d028      	beq.n	8002dac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d5a:	f7ff f83b 	bl	8001dd4 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d302      	bcc.n	8002d70 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d11d      	bne.n	8002dac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	f003 0304 	and.w	r3, r3, #4
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d016      	beq.n	8002dac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2220      	movs	r2, #32
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d98:	f043 0220 	orr.w	r2, r3, #32
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e007      	b.n	8002dbc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	f003 0304 	and.w	r3, r3, #4
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d1c3      	bne.n	8002d42 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dda:	d11b      	bne.n	8002e14 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002de4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2220      	movs	r2, #32
 8002df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e00:	f043 0204 	orr.w	r2, r3, #4
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e000      	b.n	8002e16 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
	...

08002e24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e267      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d075      	beq.n	8002f2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e42:	4b88      	ldr	r3, [pc, #544]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 030c 	and.w	r3, r3, #12
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	d00c      	beq.n	8002e68 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e4e:	4b85      	ldr	r3, [pc, #532]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d112      	bne.n	8002e80 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e5a:	4b82      	ldr	r3, [pc, #520]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e66:	d10b      	bne.n	8002e80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e68:	4b7e      	ldr	r3, [pc, #504]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d05b      	beq.n	8002f2c <HAL_RCC_OscConfig+0x108>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d157      	bne.n	8002f2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e242      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e88:	d106      	bne.n	8002e98 <HAL_RCC_OscConfig+0x74>
 8002e8a:	4b76      	ldr	r3, [pc, #472]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a75      	ldr	r2, [pc, #468]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002e90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	e01d      	b.n	8002ed4 <HAL_RCC_OscConfig+0xb0>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ea0:	d10c      	bne.n	8002ebc <HAL_RCC_OscConfig+0x98>
 8002ea2:	4b70      	ldr	r3, [pc, #448]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a6f      	ldr	r2, [pc, #444]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ea8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	4b6d      	ldr	r3, [pc, #436]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a6c      	ldr	r2, [pc, #432]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eb8:	6013      	str	r3, [r2, #0]
 8002eba:	e00b      	b.n	8002ed4 <HAL_RCC_OscConfig+0xb0>
 8002ebc:	4b69      	ldr	r3, [pc, #420]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a68      	ldr	r2, [pc, #416]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ec2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ec6:	6013      	str	r3, [r2, #0]
 8002ec8:	4b66      	ldr	r3, [pc, #408]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a65      	ldr	r2, [pc, #404]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ece:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ed2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d013      	beq.n	8002f04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002edc:	f7fe ff7a 	bl	8001dd4 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ee4:	f7fe ff76 	bl	8001dd4 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b64      	cmp	r3, #100	@ 0x64
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e207      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef6:	4b5b      	ldr	r3, [pc, #364]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0f0      	beq.n	8002ee4 <HAL_RCC_OscConfig+0xc0>
 8002f02:	e014      	b.n	8002f2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f04:	f7fe ff66 	bl	8001dd4 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f0c:	f7fe ff62 	bl	8001dd4 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b64      	cmp	r3, #100	@ 0x64
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e1f3      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f1e:	4b51      	ldr	r3, [pc, #324]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f0      	bne.n	8002f0c <HAL_RCC_OscConfig+0xe8>
 8002f2a:	e000      	b.n	8002f2e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d063      	beq.n	8003002 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f3a:	4b4a      	ldr	r3, [pc, #296]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 030c 	and.w	r3, r3, #12
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00b      	beq.n	8002f5e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f46:	4b47      	ldr	r3, [pc, #284]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f4e:	2b08      	cmp	r3, #8
 8002f50:	d11c      	bne.n	8002f8c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f52:	4b44      	ldr	r3, [pc, #272]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d116      	bne.n	8002f8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f5e:	4b41      	ldr	r3, [pc, #260]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d005      	beq.n	8002f76 <HAL_RCC_OscConfig+0x152>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d001      	beq.n	8002f76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e1c7      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f76:	4b3b      	ldr	r3, [pc, #236]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	4937      	ldr	r1, [pc, #220]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f8a:	e03a      	b.n	8003002 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d020      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f94:	4b34      	ldr	r3, [pc, #208]	@ (8003068 <HAL_RCC_OscConfig+0x244>)
 8002f96:	2201      	movs	r2, #1
 8002f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9a:	f7fe ff1b 	bl	8001dd4 <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fa2:	f7fe ff17 	bl	8001dd4 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e1a8      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb4:	4b2b      	ldr	r3, [pc, #172]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0f0      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc0:	4b28      	ldr	r3, [pc, #160]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	4925      	ldr	r1, [pc, #148]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	600b      	str	r3, [r1, #0]
 8002fd4:	e015      	b.n	8003002 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fd6:	4b24      	ldr	r3, [pc, #144]	@ (8003068 <HAL_RCC_OscConfig+0x244>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fdc:	f7fe fefa 	bl	8001dd4 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fe4:	f7fe fef6 	bl	8001dd4 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e187      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ff6:	4b1b      	ldr	r3, [pc, #108]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d036      	beq.n	800307c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d016      	beq.n	8003044 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003016:	4b15      	ldr	r3, [pc, #84]	@ (800306c <HAL_RCC_OscConfig+0x248>)
 8003018:	2201      	movs	r2, #1
 800301a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800301c:	f7fe feda 	bl	8001dd4 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003024:	f7fe fed6 	bl	8001dd4 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e167      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003036:	4b0b      	ldr	r3, [pc, #44]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8003038:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0f0      	beq.n	8003024 <HAL_RCC_OscConfig+0x200>
 8003042:	e01b      	b.n	800307c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003044:	4b09      	ldr	r3, [pc, #36]	@ (800306c <HAL_RCC_OscConfig+0x248>)
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800304a:	f7fe fec3 	bl	8001dd4 <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003050:	e00e      	b.n	8003070 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003052:	f7fe febf 	bl	8001dd4 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d907      	bls.n	8003070 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e150      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
 8003064:	40023800 	.word	0x40023800
 8003068:	42470000 	.word	0x42470000
 800306c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003070:	4b88      	ldr	r3, [pc, #544]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 8003072:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1ea      	bne.n	8003052 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 8097 	beq.w	80031b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800308a:	2300      	movs	r3, #0
 800308c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800308e:	4b81      	ldr	r3, [pc, #516]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 8003090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003092:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10f      	bne.n	80030ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800309a:	2300      	movs	r3, #0
 800309c:	60bb      	str	r3, [r7, #8]
 800309e:	4b7d      	ldr	r3, [pc, #500]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 80030a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a2:	4a7c      	ldr	r2, [pc, #496]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 80030a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80030aa:	4b7a      	ldr	r3, [pc, #488]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 80030ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030b2:	60bb      	str	r3, [r7, #8]
 80030b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030b6:	2301      	movs	r3, #1
 80030b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ba:	4b77      	ldr	r3, [pc, #476]	@ (8003298 <HAL_RCC_OscConfig+0x474>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d118      	bne.n	80030f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030c6:	4b74      	ldr	r3, [pc, #464]	@ (8003298 <HAL_RCC_OscConfig+0x474>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a73      	ldr	r2, [pc, #460]	@ (8003298 <HAL_RCC_OscConfig+0x474>)
 80030cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030d2:	f7fe fe7f 	bl	8001dd4 <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d8:	e008      	b.n	80030ec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030da:	f7fe fe7b 	bl	8001dd4 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e10c      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ec:	4b6a      	ldr	r3, [pc, #424]	@ (8003298 <HAL_RCC_OscConfig+0x474>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0f0      	beq.n	80030da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d106      	bne.n	800310e <HAL_RCC_OscConfig+0x2ea>
 8003100:	4b64      	ldr	r3, [pc, #400]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 8003102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003104:	4a63      	ldr	r2, [pc, #396]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 8003106:	f043 0301 	orr.w	r3, r3, #1
 800310a:	6713      	str	r3, [r2, #112]	@ 0x70
 800310c:	e01c      	b.n	8003148 <HAL_RCC_OscConfig+0x324>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	2b05      	cmp	r3, #5
 8003114:	d10c      	bne.n	8003130 <HAL_RCC_OscConfig+0x30c>
 8003116:	4b5f      	ldr	r3, [pc, #380]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 8003118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800311a:	4a5e      	ldr	r2, [pc, #376]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 800311c:	f043 0304 	orr.w	r3, r3, #4
 8003120:	6713      	str	r3, [r2, #112]	@ 0x70
 8003122:	4b5c      	ldr	r3, [pc, #368]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 8003124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003126:	4a5b      	ldr	r2, [pc, #364]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 8003128:	f043 0301 	orr.w	r3, r3, #1
 800312c:	6713      	str	r3, [r2, #112]	@ 0x70
 800312e:	e00b      	b.n	8003148 <HAL_RCC_OscConfig+0x324>
 8003130:	4b58      	ldr	r3, [pc, #352]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 8003132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003134:	4a57      	ldr	r2, [pc, #348]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 8003136:	f023 0301 	bic.w	r3, r3, #1
 800313a:	6713      	str	r3, [r2, #112]	@ 0x70
 800313c:	4b55      	ldr	r3, [pc, #340]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 800313e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003140:	4a54      	ldr	r2, [pc, #336]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 8003142:	f023 0304 	bic.w	r3, r3, #4
 8003146:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d015      	beq.n	800317c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003150:	f7fe fe40 	bl	8001dd4 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003156:	e00a      	b.n	800316e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003158:	f7fe fe3c 	bl	8001dd4 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003166:	4293      	cmp	r3, r2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e0cb      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800316e:	4b49      	ldr	r3, [pc, #292]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 8003170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0ee      	beq.n	8003158 <HAL_RCC_OscConfig+0x334>
 800317a:	e014      	b.n	80031a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800317c:	f7fe fe2a 	bl	8001dd4 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003182:	e00a      	b.n	800319a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003184:	f7fe fe26 	bl	8001dd4 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003192:	4293      	cmp	r3, r2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e0b5      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800319a:	4b3e      	ldr	r3, [pc, #248]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 800319c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1ee      	bne.n	8003184 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031a6:	7dfb      	ldrb	r3, [r7, #23]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d105      	bne.n	80031b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ac:	4b39      	ldr	r3, [pc, #228]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 80031ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b0:	4a38      	ldr	r2, [pc, #224]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 80031b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 80a1 	beq.w	8003304 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031c2:	4b34      	ldr	r3, [pc, #208]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 030c 	and.w	r3, r3, #12
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	d05c      	beq.n	8003288 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d141      	bne.n	800325a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d6:	4b31      	ldr	r3, [pc, #196]	@ (800329c <HAL_RCC_OscConfig+0x478>)
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031dc:	f7fe fdfa 	bl	8001dd4 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e4:	f7fe fdf6 	bl	8001dd4 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e087      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f6:	4b27      	ldr	r3, [pc, #156]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69da      	ldr	r2, [r3, #28]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003210:	019b      	lsls	r3, r3, #6
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003218:	085b      	lsrs	r3, r3, #1
 800321a:	3b01      	subs	r3, #1
 800321c:	041b      	lsls	r3, r3, #16
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003224:	061b      	lsls	r3, r3, #24
 8003226:	491b      	ldr	r1, [pc, #108]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 8003228:	4313      	orrs	r3, r2
 800322a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800322c:	4b1b      	ldr	r3, [pc, #108]	@ (800329c <HAL_RCC_OscConfig+0x478>)
 800322e:	2201      	movs	r2, #1
 8003230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003232:	f7fe fdcf 	bl	8001dd4 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800323a:	f7fe fdcb 	bl	8001dd4 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e05c      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324c:	4b11      	ldr	r3, [pc, #68]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0f0      	beq.n	800323a <HAL_RCC_OscConfig+0x416>
 8003258:	e054      	b.n	8003304 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325a:	4b10      	ldr	r3, [pc, #64]	@ (800329c <HAL_RCC_OscConfig+0x478>)
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003260:	f7fe fdb8 	bl	8001dd4 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003268:	f7fe fdb4 	bl	8001dd4 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e045      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327a:	4b06      	ldr	r3, [pc, #24]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f0      	bne.n	8003268 <HAL_RCC_OscConfig+0x444>
 8003286:	e03d      	b.n	8003304 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d107      	bne.n	80032a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e038      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
 8003294:	40023800 	.word	0x40023800
 8003298:	40007000 	.word	0x40007000
 800329c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003310 <HAL_RCC_OscConfig+0x4ec>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d028      	beq.n	8003300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d121      	bne.n	8003300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d11a      	bne.n	8003300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80032d0:	4013      	ands	r3, r2
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80032d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032d8:	4293      	cmp	r3, r2
 80032da:	d111      	bne.n	8003300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e6:	085b      	lsrs	r3, r3, #1
 80032e8:	3b01      	subs	r3, #1
 80032ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d107      	bne.n	8003300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d001      	beq.n	8003304 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e000      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	40023800 	.word	0x40023800

08003314 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e0cc      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003328:	4b68      	ldr	r3, [pc, #416]	@ (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	429a      	cmp	r2, r3
 8003334:	d90c      	bls.n	8003350 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003336:	4b65      	ldr	r3, [pc, #404]	@ (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	b2d2      	uxtb	r2, r2
 800333c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800333e:	4b63      	ldr	r3, [pc, #396]	@ (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	429a      	cmp	r2, r3
 800334a:	d001      	beq.n	8003350 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e0b8      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d020      	beq.n	800339e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	d005      	beq.n	8003374 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003368:	4b59      	ldr	r3, [pc, #356]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	4a58      	ldr	r2, [pc, #352]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003372:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	2b00      	cmp	r3, #0
 800337e:	d005      	beq.n	800338c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003380:	4b53      	ldr	r3, [pc, #332]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	4a52      	ldr	r2, [pc, #328]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800338a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800338c:	4b50      	ldr	r3, [pc, #320]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	494d      	ldr	r1, [pc, #308]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	4313      	orrs	r3, r2
 800339c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d044      	beq.n	8003434 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d107      	bne.n	80033c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b2:	4b47      	ldr	r3, [pc, #284]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d119      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e07f      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d003      	beq.n	80033d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ce:	2b03      	cmp	r3, #3
 80033d0:	d107      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033d2:	4b3f      	ldr	r3, [pc, #252]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d109      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e06f      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e2:	4b3b      	ldr	r3, [pc, #236]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e067      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033f2:	4b37      	ldr	r3, [pc, #220]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f023 0203 	bic.w	r2, r3, #3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	4934      	ldr	r1, [pc, #208]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003400:	4313      	orrs	r3, r2
 8003402:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003404:	f7fe fce6 	bl	8001dd4 <HAL_GetTick>
 8003408:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800340a:	e00a      	b.n	8003422 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800340c:	f7fe fce2 	bl	8001dd4 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	f241 3288 	movw	r2, #5000	@ 0x1388
 800341a:	4293      	cmp	r3, r2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e04f      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003422:	4b2b      	ldr	r3, [pc, #172]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 020c 	and.w	r2, r3, #12
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	429a      	cmp	r2, r3
 8003432:	d1eb      	bne.n	800340c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003434:	4b25      	ldr	r3, [pc, #148]	@ (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d20c      	bcs.n	800345c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003442:	4b22      	ldr	r3, [pc, #136]	@ (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800344a:	4b20      	ldr	r3, [pc, #128]	@ (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	429a      	cmp	r2, r3
 8003456:	d001      	beq.n	800345c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e032      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	d008      	beq.n	800347a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003468:	4b19      	ldr	r3, [pc, #100]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	4916      	ldr	r1, [pc, #88]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	4313      	orrs	r3, r2
 8003478:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	2b00      	cmp	r3, #0
 8003484:	d009      	beq.n	800349a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003486:	4b12      	ldr	r3, [pc, #72]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	490e      	ldr	r1, [pc, #56]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003496:	4313      	orrs	r3, r2
 8003498:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800349a:	f000 f821 	bl	80034e0 <HAL_RCC_GetSysClockFreq>
 800349e:	4602      	mov	r2, r0
 80034a0:	4b0b      	ldr	r3, [pc, #44]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	490a      	ldr	r1, [pc, #40]	@ (80034d4 <HAL_RCC_ClockConfig+0x1c0>)
 80034ac:	5ccb      	ldrb	r3, [r1, r3]
 80034ae:	fa22 f303 	lsr.w	r3, r2, r3
 80034b2:	4a09      	ldr	r2, [pc, #36]	@ (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 80034b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80034b6:	4b09      	ldr	r3, [pc, #36]	@ (80034dc <HAL_RCC_ClockConfig+0x1c8>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fe fc46 	bl	8001d4c <HAL_InitTick>

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	40023c00 	.word	0x40023c00
 80034d0:	40023800 	.word	0x40023800
 80034d4:	08005a6c 	.word	0x08005a6c
 80034d8:	20000000 	.word	0x20000000
 80034dc:	2000007c 	.word	0x2000007c

080034e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034e4:	b094      	sub	sp, #80	@ 0x50
 80034e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80034e8:	2300      	movs	r3, #0
 80034ea:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80034f4:	2300      	movs	r3, #0
 80034f6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034f8:	4b79      	ldr	r3, [pc, #484]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f003 030c 	and.w	r3, r3, #12
 8003500:	2b08      	cmp	r3, #8
 8003502:	d00d      	beq.n	8003520 <HAL_RCC_GetSysClockFreq+0x40>
 8003504:	2b08      	cmp	r3, #8
 8003506:	f200 80e1 	bhi.w	80036cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800350a:	2b00      	cmp	r3, #0
 800350c:	d002      	beq.n	8003514 <HAL_RCC_GetSysClockFreq+0x34>
 800350e:	2b04      	cmp	r3, #4
 8003510:	d003      	beq.n	800351a <HAL_RCC_GetSysClockFreq+0x3a>
 8003512:	e0db      	b.n	80036cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003514:	4b73      	ldr	r3, [pc, #460]	@ (80036e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003516:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003518:	e0db      	b.n	80036d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800351a:	4b73      	ldr	r3, [pc, #460]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800351c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800351e:	e0d8      	b.n	80036d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003520:	4b6f      	ldr	r3, [pc, #444]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003528:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800352a:	4b6d      	ldr	r3, [pc, #436]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d063      	beq.n	80035fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003536:	4b6a      	ldr	r3, [pc, #424]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	099b      	lsrs	r3, r3, #6
 800353c:	2200      	movs	r2, #0
 800353e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003540:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003548:	633b      	str	r3, [r7, #48]	@ 0x30
 800354a:	2300      	movs	r3, #0
 800354c:	637b      	str	r3, [r7, #52]	@ 0x34
 800354e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003552:	4622      	mov	r2, r4
 8003554:	462b      	mov	r3, r5
 8003556:	f04f 0000 	mov.w	r0, #0
 800355a:	f04f 0100 	mov.w	r1, #0
 800355e:	0159      	lsls	r1, r3, #5
 8003560:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003564:	0150      	lsls	r0, r2, #5
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	4621      	mov	r1, r4
 800356c:	1a51      	subs	r1, r2, r1
 800356e:	6139      	str	r1, [r7, #16]
 8003570:	4629      	mov	r1, r5
 8003572:	eb63 0301 	sbc.w	r3, r3, r1
 8003576:	617b      	str	r3, [r7, #20]
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	f04f 0300 	mov.w	r3, #0
 8003580:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003584:	4659      	mov	r1, fp
 8003586:	018b      	lsls	r3, r1, #6
 8003588:	4651      	mov	r1, sl
 800358a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800358e:	4651      	mov	r1, sl
 8003590:	018a      	lsls	r2, r1, #6
 8003592:	4651      	mov	r1, sl
 8003594:	ebb2 0801 	subs.w	r8, r2, r1
 8003598:	4659      	mov	r1, fp
 800359a:	eb63 0901 	sbc.w	r9, r3, r1
 800359e:	f04f 0200 	mov.w	r2, #0
 80035a2:	f04f 0300 	mov.w	r3, #0
 80035a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035b2:	4690      	mov	r8, r2
 80035b4:	4699      	mov	r9, r3
 80035b6:	4623      	mov	r3, r4
 80035b8:	eb18 0303 	adds.w	r3, r8, r3
 80035bc:	60bb      	str	r3, [r7, #8]
 80035be:	462b      	mov	r3, r5
 80035c0:	eb49 0303 	adc.w	r3, r9, r3
 80035c4:	60fb      	str	r3, [r7, #12]
 80035c6:	f04f 0200 	mov.w	r2, #0
 80035ca:	f04f 0300 	mov.w	r3, #0
 80035ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80035d2:	4629      	mov	r1, r5
 80035d4:	024b      	lsls	r3, r1, #9
 80035d6:	4621      	mov	r1, r4
 80035d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035dc:	4621      	mov	r1, r4
 80035de:	024a      	lsls	r2, r1, #9
 80035e0:	4610      	mov	r0, r2
 80035e2:	4619      	mov	r1, r3
 80035e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035e6:	2200      	movs	r2, #0
 80035e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80035f0:	f7fc fe4e 	bl	8000290 <__aeabi_uldivmod>
 80035f4:	4602      	mov	r2, r0
 80035f6:	460b      	mov	r3, r1
 80035f8:	4613      	mov	r3, r2
 80035fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035fc:	e058      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035fe:	4b38      	ldr	r3, [pc, #224]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	099b      	lsrs	r3, r3, #6
 8003604:	2200      	movs	r2, #0
 8003606:	4618      	mov	r0, r3
 8003608:	4611      	mov	r1, r2
 800360a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800360e:	623b      	str	r3, [r7, #32]
 8003610:	2300      	movs	r3, #0
 8003612:	627b      	str	r3, [r7, #36]	@ 0x24
 8003614:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003618:	4642      	mov	r2, r8
 800361a:	464b      	mov	r3, r9
 800361c:	f04f 0000 	mov.w	r0, #0
 8003620:	f04f 0100 	mov.w	r1, #0
 8003624:	0159      	lsls	r1, r3, #5
 8003626:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800362a:	0150      	lsls	r0, r2, #5
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	4641      	mov	r1, r8
 8003632:	ebb2 0a01 	subs.w	sl, r2, r1
 8003636:	4649      	mov	r1, r9
 8003638:	eb63 0b01 	sbc.w	fp, r3, r1
 800363c:	f04f 0200 	mov.w	r2, #0
 8003640:	f04f 0300 	mov.w	r3, #0
 8003644:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003648:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800364c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003650:	ebb2 040a 	subs.w	r4, r2, sl
 8003654:	eb63 050b 	sbc.w	r5, r3, fp
 8003658:	f04f 0200 	mov.w	r2, #0
 800365c:	f04f 0300 	mov.w	r3, #0
 8003660:	00eb      	lsls	r3, r5, #3
 8003662:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003666:	00e2      	lsls	r2, r4, #3
 8003668:	4614      	mov	r4, r2
 800366a:	461d      	mov	r5, r3
 800366c:	4643      	mov	r3, r8
 800366e:	18e3      	adds	r3, r4, r3
 8003670:	603b      	str	r3, [r7, #0]
 8003672:	464b      	mov	r3, r9
 8003674:	eb45 0303 	adc.w	r3, r5, r3
 8003678:	607b      	str	r3, [r7, #4]
 800367a:	f04f 0200 	mov.w	r2, #0
 800367e:	f04f 0300 	mov.w	r3, #0
 8003682:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003686:	4629      	mov	r1, r5
 8003688:	028b      	lsls	r3, r1, #10
 800368a:	4621      	mov	r1, r4
 800368c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003690:	4621      	mov	r1, r4
 8003692:	028a      	lsls	r2, r1, #10
 8003694:	4610      	mov	r0, r2
 8003696:	4619      	mov	r1, r3
 8003698:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800369a:	2200      	movs	r2, #0
 800369c:	61bb      	str	r3, [r7, #24]
 800369e:	61fa      	str	r2, [r7, #28]
 80036a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036a4:	f7fc fdf4 	bl	8000290 <__aeabi_uldivmod>
 80036a8:	4602      	mov	r2, r0
 80036aa:	460b      	mov	r3, r1
 80036ac:	4613      	mov	r3, r2
 80036ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80036b0:	4b0b      	ldr	r3, [pc, #44]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	0c1b      	lsrs	r3, r3, #16
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	3301      	adds	r3, #1
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80036c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036ca:	e002      	b.n	80036d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036cc:	4b05      	ldr	r3, [pc, #20]	@ (80036e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80036ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3750      	adds	r7, #80	@ 0x50
 80036d8:	46bd      	mov	sp, r7
 80036da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036de:	bf00      	nop
 80036e0:	40023800 	.word	0x40023800
 80036e4:	00f42400 	.word	0x00f42400
 80036e8:	007a1200 	.word	0x007a1200

080036ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036f0:	4b03      	ldr	r3, [pc, #12]	@ (8003700 <HAL_RCC_GetHCLKFreq+0x14>)
 80036f2:	681b      	ldr	r3, [r3, #0]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	20000000 	.word	0x20000000

08003704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003708:	f7ff fff0 	bl	80036ec <HAL_RCC_GetHCLKFreq>
 800370c:	4602      	mov	r2, r0
 800370e:	4b05      	ldr	r3, [pc, #20]	@ (8003724 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	0a9b      	lsrs	r3, r3, #10
 8003714:	f003 0307 	and.w	r3, r3, #7
 8003718:	4903      	ldr	r1, [pc, #12]	@ (8003728 <HAL_RCC_GetPCLK1Freq+0x24>)
 800371a:	5ccb      	ldrb	r3, [r1, r3]
 800371c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003720:	4618      	mov	r0, r3
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40023800 	.word	0x40023800
 8003728:	08005a7c 	.word	0x08005a7c

0800372c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003730:	f7ff ffdc 	bl	80036ec <HAL_RCC_GetHCLKFreq>
 8003734:	4602      	mov	r2, r0
 8003736:	4b05      	ldr	r3, [pc, #20]	@ (800374c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	0b5b      	lsrs	r3, r3, #13
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	4903      	ldr	r1, [pc, #12]	@ (8003750 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003742:	5ccb      	ldrb	r3, [r1, r3]
 8003744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003748:	4618      	mov	r0, r3
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40023800 	.word	0x40023800
 8003750:	08005a7c 	.word	0x08005a7c

08003754 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e041      	b.n	80037ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d106      	bne.n	8003780 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7fd f9be 	bl	8000afc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2202      	movs	r2, #2
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3304      	adds	r3, #4
 8003790:	4619      	mov	r1, r3
 8003792:	4610      	mov	r0, r2
 8003794:	f000 fa70 	bl	8003c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
	...

080037f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b01      	cmp	r3, #1
 8003806:	d001      	beq.n	800380c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e044      	b.n	8003896 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2202      	movs	r2, #2
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68da      	ldr	r2, [r3, #12]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0201 	orr.w	r2, r2, #1
 8003822:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a1e      	ldr	r2, [pc, #120]	@ (80038a4 <HAL_TIM_Base_Start_IT+0xb0>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d018      	beq.n	8003860 <HAL_TIM_Base_Start_IT+0x6c>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003836:	d013      	beq.n	8003860 <HAL_TIM_Base_Start_IT+0x6c>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a1a      	ldr	r2, [pc, #104]	@ (80038a8 <HAL_TIM_Base_Start_IT+0xb4>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d00e      	beq.n	8003860 <HAL_TIM_Base_Start_IT+0x6c>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a19      	ldr	r2, [pc, #100]	@ (80038ac <HAL_TIM_Base_Start_IT+0xb8>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d009      	beq.n	8003860 <HAL_TIM_Base_Start_IT+0x6c>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a17      	ldr	r2, [pc, #92]	@ (80038b0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d004      	beq.n	8003860 <HAL_TIM_Base_Start_IT+0x6c>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a16      	ldr	r2, [pc, #88]	@ (80038b4 <HAL_TIM_Base_Start_IT+0xc0>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d111      	bne.n	8003884 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 0307 	and.w	r3, r3, #7
 800386a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2b06      	cmp	r3, #6
 8003870:	d010      	beq.n	8003894 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f042 0201 	orr.w	r2, r2, #1
 8003880:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003882:	e007      	b.n	8003894 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0201 	orr.w	r2, r2, #1
 8003892:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3714      	adds	r7, #20
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	40010000 	.word	0x40010000
 80038a8:	40000400 	.word	0x40000400
 80038ac:	40000800 	.word	0x40000800
 80038b0:	40000c00 	.word	0x40000c00
 80038b4:	40014000 	.word	0x40014000

080038b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d020      	beq.n	800391c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d01b      	beq.n	800391c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f06f 0202 	mvn.w	r2, #2
 80038ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	f003 0303 	and.w	r3, r3, #3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f999 	bl	8003c3a <HAL_TIM_IC_CaptureCallback>
 8003908:	e005      	b.n	8003916 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f98b 	bl	8003c26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 f99c 	bl	8003c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f003 0304 	and.w	r3, r3, #4
 8003922:	2b00      	cmp	r3, #0
 8003924:	d020      	beq.n	8003968 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	2b00      	cmp	r3, #0
 800392e:	d01b      	beq.n	8003968 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f06f 0204 	mvn.w	r2, #4
 8003938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2202      	movs	r2, #2
 800393e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f973 	bl	8003c3a <HAL_TIM_IC_CaptureCallback>
 8003954:	e005      	b.n	8003962 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f965 	bl	8003c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 f976 	bl	8003c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	2b00      	cmp	r3, #0
 8003970:	d020      	beq.n	80039b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f003 0308 	and.w	r3, r3, #8
 8003978:	2b00      	cmp	r3, #0
 800397a:	d01b      	beq.n	80039b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f06f 0208 	mvn.w	r2, #8
 8003984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2204      	movs	r2, #4
 800398a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f94d 	bl	8003c3a <HAL_TIM_IC_CaptureCallback>
 80039a0:	e005      	b.n	80039ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f93f 	bl	8003c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 f950 	bl	8003c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	f003 0310 	and.w	r3, r3, #16
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d020      	beq.n	8003a00 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f003 0310 	and.w	r3, r3, #16
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d01b      	beq.n	8003a00 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f06f 0210 	mvn.w	r2, #16
 80039d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2208      	movs	r2, #8
 80039d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d003      	beq.n	80039ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f927 	bl	8003c3a <HAL_TIM_IC_CaptureCallback>
 80039ec:	e005      	b.n	80039fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f919 	bl	8003c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 f92a 	bl	8003c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00c      	beq.n	8003a24 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d007      	beq.n	8003a24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f06f 0201 	mvn.w	r2, #1
 8003a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7fd fbfe 	bl	8001220 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00c      	beq.n	8003a48 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d007      	beq.n	8003a48 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 fab0 	bl	8003fa8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00c      	beq.n	8003a6c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d007      	beq.n	8003a6c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f8fb 	bl	8003c62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	f003 0320 	and.w	r3, r3, #32
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00c      	beq.n	8003a90 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f003 0320 	and.w	r3, r3, #32
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d007      	beq.n	8003a90 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f06f 0220 	mvn.w	r2, #32
 8003a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 fa82 	bl	8003f94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a90:	bf00      	nop
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d101      	bne.n	8003ab4 <HAL_TIM_ConfigClockSource+0x1c>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e0b4      	b.n	8003c1e <HAL_TIM_ConfigClockSource+0x186>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003ad2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ada:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003aec:	d03e      	beq.n	8003b6c <HAL_TIM_ConfigClockSource+0xd4>
 8003aee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003af2:	f200 8087 	bhi.w	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003af6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003afa:	f000 8086 	beq.w	8003c0a <HAL_TIM_ConfigClockSource+0x172>
 8003afe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b02:	d87f      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003b04:	2b70      	cmp	r3, #112	@ 0x70
 8003b06:	d01a      	beq.n	8003b3e <HAL_TIM_ConfigClockSource+0xa6>
 8003b08:	2b70      	cmp	r3, #112	@ 0x70
 8003b0a:	d87b      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003b0c:	2b60      	cmp	r3, #96	@ 0x60
 8003b0e:	d050      	beq.n	8003bb2 <HAL_TIM_ConfigClockSource+0x11a>
 8003b10:	2b60      	cmp	r3, #96	@ 0x60
 8003b12:	d877      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003b14:	2b50      	cmp	r3, #80	@ 0x50
 8003b16:	d03c      	beq.n	8003b92 <HAL_TIM_ConfigClockSource+0xfa>
 8003b18:	2b50      	cmp	r3, #80	@ 0x50
 8003b1a:	d873      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003b1c:	2b40      	cmp	r3, #64	@ 0x40
 8003b1e:	d058      	beq.n	8003bd2 <HAL_TIM_ConfigClockSource+0x13a>
 8003b20:	2b40      	cmp	r3, #64	@ 0x40
 8003b22:	d86f      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003b24:	2b30      	cmp	r3, #48	@ 0x30
 8003b26:	d064      	beq.n	8003bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b28:	2b30      	cmp	r3, #48	@ 0x30
 8003b2a:	d86b      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003b2c:	2b20      	cmp	r3, #32
 8003b2e:	d060      	beq.n	8003bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b30:	2b20      	cmp	r3, #32
 8003b32:	d867      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d05c      	beq.n	8003bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b38:	2b10      	cmp	r3, #16
 8003b3a:	d05a      	beq.n	8003bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b3c:	e062      	b.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b4e:	f000 f993 	bl	8003e78 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003b60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	609a      	str	r2, [r3, #8]
      break;
 8003b6a:	e04f      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b7c:	f000 f97c 	bl	8003e78 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b8e:	609a      	str	r2, [r3, #8]
      break;
 8003b90:	e03c      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	f000 f8f0 	bl	8003d84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2150      	movs	r1, #80	@ 0x50
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 f949 	bl	8003e42 <TIM_ITRx_SetConfig>
      break;
 8003bb0:	e02c      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	f000 f90f 	bl	8003de2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2160      	movs	r1, #96	@ 0x60
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 f939 	bl	8003e42 <TIM_ITRx_SetConfig>
      break;
 8003bd0:	e01c      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bde:	461a      	mov	r2, r3
 8003be0:	f000 f8d0 	bl	8003d84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2140      	movs	r1, #64	@ 0x40
 8003bea:	4618      	mov	r0, r3
 8003bec:	f000 f929 	bl	8003e42 <TIM_ITRx_SetConfig>
      break;
 8003bf0:	e00c      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	4610      	mov	r0, r2
 8003bfe:	f000 f920 	bl	8003e42 <TIM_ITRx_SetConfig>
      break;
 8003c02:	e003      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	73fb      	strb	r3, [r7, #15]
      break;
 8003c08:	e000      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b083      	sub	sp, #12
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c6a:	bf00      	nop
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
	...

08003c78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a37      	ldr	r2, [pc, #220]	@ (8003d68 <TIM_Base_SetConfig+0xf0>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d00f      	beq.n	8003cb0 <TIM_Base_SetConfig+0x38>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c96:	d00b      	beq.n	8003cb0 <TIM_Base_SetConfig+0x38>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a34      	ldr	r2, [pc, #208]	@ (8003d6c <TIM_Base_SetConfig+0xf4>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d007      	beq.n	8003cb0 <TIM_Base_SetConfig+0x38>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a33      	ldr	r2, [pc, #204]	@ (8003d70 <TIM_Base_SetConfig+0xf8>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d003      	beq.n	8003cb0 <TIM_Base_SetConfig+0x38>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a32      	ldr	r2, [pc, #200]	@ (8003d74 <TIM_Base_SetConfig+0xfc>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d108      	bne.n	8003cc2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a28      	ldr	r2, [pc, #160]	@ (8003d68 <TIM_Base_SetConfig+0xf0>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d01b      	beq.n	8003d02 <TIM_Base_SetConfig+0x8a>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cd0:	d017      	beq.n	8003d02 <TIM_Base_SetConfig+0x8a>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a25      	ldr	r2, [pc, #148]	@ (8003d6c <TIM_Base_SetConfig+0xf4>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d013      	beq.n	8003d02 <TIM_Base_SetConfig+0x8a>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a24      	ldr	r2, [pc, #144]	@ (8003d70 <TIM_Base_SetConfig+0xf8>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d00f      	beq.n	8003d02 <TIM_Base_SetConfig+0x8a>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a23      	ldr	r2, [pc, #140]	@ (8003d74 <TIM_Base_SetConfig+0xfc>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d00b      	beq.n	8003d02 <TIM_Base_SetConfig+0x8a>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a22      	ldr	r2, [pc, #136]	@ (8003d78 <TIM_Base_SetConfig+0x100>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d007      	beq.n	8003d02 <TIM_Base_SetConfig+0x8a>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a21      	ldr	r2, [pc, #132]	@ (8003d7c <TIM_Base_SetConfig+0x104>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d003      	beq.n	8003d02 <TIM_Base_SetConfig+0x8a>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a20      	ldr	r2, [pc, #128]	@ (8003d80 <TIM_Base_SetConfig+0x108>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d108      	bne.n	8003d14 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	689a      	ldr	r2, [r3, #8]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a0c      	ldr	r2, [pc, #48]	@ (8003d68 <TIM_Base_SetConfig+0xf0>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d103      	bne.n	8003d42 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	691a      	ldr	r2, [r3, #16]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f043 0204 	orr.w	r2, r3, #4
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	601a      	str	r2, [r3, #0]
}
 8003d5a:	bf00      	nop
 8003d5c:	3714      	adds	r7, #20
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	40010000 	.word	0x40010000
 8003d6c:	40000400 	.word	0x40000400
 8003d70:	40000800 	.word	0x40000800
 8003d74:	40000c00 	.word	0x40000c00
 8003d78:	40014000 	.word	0x40014000
 8003d7c:	40014400 	.word	0x40014400
 8003d80:	40014800 	.word	0x40014800

08003d84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b087      	sub	sp, #28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	f023 0201 	bic.w	r2, r3, #1
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003dae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	011b      	lsls	r3, r3, #4
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f023 030a 	bic.w	r3, r3, #10
 8003dc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	621a      	str	r2, [r3, #32]
}
 8003dd6:	bf00      	nop
 8003dd8:	371c      	adds	r7, #28
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b087      	sub	sp, #28
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	60f8      	str	r0, [r7, #12]
 8003dea:	60b9      	str	r1, [r7, #8]
 8003dec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	f023 0210 	bic.w	r2, r3, #16
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	031b      	lsls	r3, r3, #12
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003e1e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	621a      	str	r2, [r3, #32]
}
 8003e36:	bf00      	nop
 8003e38:	371c      	adds	r7, #28
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b085      	sub	sp, #20
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
 8003e4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	f043 0307 	orr.w	r3, r3, #7
 8003e64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	609a      	str	r2, [r3, #8]
}
 8003e6c:	bf00      	nop
 8003e6e:	3714      	adds	r7, #20
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b087      	sub	sp, #28
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
 8003e84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	021a      	lsls	r2, r3, #8
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	609a      	str	r2, [r3, #8]
}
 8003eac:	bf00      	nop
 8003eae:	371c      	adds	r7, #28
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d101      	bne.n	8003ed0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ecc:	2302      	movs	r3, #2
 8003ece:	e050      	b.n	8003f72 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ef6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a1c      	ldr	r2, [pc, #112]	@ (8003f80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d018      	beq.n	8003f46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f1c:	d013      	beq.n	8003f46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a18      	ldr	r2, [pc, #96]	@ (8003f84 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d00e      	beq.n	8003f46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a16      	ldr	r2, [pc, #88]	@ (8003f88 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d009      	beq.n	8003f46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a15      	ldr	r2, [pc, #84]	@ (8003f8c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d004      	beq.n	8003f46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a13      	ldr	r2, [pc, #76]	@ (8003f90 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d10c      	bne.n	8003f60 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	40010000 	.word	0x40010000
 8003f84:	40000400 	.word	0x40000400
 8003f88:	40000800 	.word	0x40000800
 8003f8c:	40000c00 	.word	0x40000c00
 8003f90:	40014000 	.word	0x40014000

08003f94 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e042      	b.n	8004054 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d106      	bne.n	8003fe8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7fc fdda 	bl	8000b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2224      	movs	r2, #36	@ 0x24
 8003fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68da      	ldr	r2, [r3, #12]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ffe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 fdd3 	bl	8004bac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	691a      	ldr	r2, [r3, #16]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004014:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	695a      	ldr	r2, [r3, #20]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004024:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68da      	ldr	r2, [r3, #12]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004034:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2220      	movs	r2, #32
 8004040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2220      	movs	r2, #32
 8004048:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3708      	adds	r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b08a      	sub	sp, #40	@ 0x28
 8004060:	af02      	add	r7, sp, #8
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	603b      	str	r3, [r7, #0]
 8004068:	4613      	mov	r3, r2
 800406a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800406c:	2300      	movs	r3, #0
 800406e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b20      	cmp	r3, #32
 800407a:	d175      	bne.n	8004168 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d002      	beq.n	8004088 <HAL_UART_Transmit+0x2c>
 8004082:	88fb      	ldrh	r3, [r7, #6]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d101      	bne.n	800408c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e06e      	b.n	800416a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2221      	movs	r2, #33	@ 0x21
 8004096:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800409a:	f7fd fe9b 	bl	8001dd4 <HAL_GetTick>
 800409e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	88fa      	ldrh	r2, [r7, #6]
 80040a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	88fa      	ldrh	r2, [r7, #6]
 80040aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040b4:	d108      	bne.n	80040c8 <HAL_UART_Transmit+0x6c>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d104      	bne.n	80040c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80040be:	2300      	movs	r3, #0
 80040c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	61bb      	str	r3, [r7, #24]
 80040c6:	e003      	b.n	80040d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040cc:	2300      	movs	r3, #0
 80040ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040d0:	e02e      	b.n	8004130 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	2200      	movs	r2, #0
 80040da:	2180      	movs	r1, #128	@ 0x80
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f000 fb37 	bl	8004750 <UART_WaitOnFlagUntilTimeout>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d005      	beq.n	80040f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2220      	movs	r2, #32
 80040ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e03a      	b.n	800416a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10b      	bne.n	8004112 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	881b      	ldrh	r3, [r3, #0]
 80040fe:	461a      	mov	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004108:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	3302      	adds	r3, #2
 800410e:	61bb      	str	r3, [r7, #24]
 8004110:	e007      	b.n	8004122 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	781a      	ldrb	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	3301      	adds	r3, #1
 8004120:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004126:	b29b      	uxth	r3, r3
 8004128:	3b01      	subs	r3, #1
 800412a:	b29a      	uxth	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004134:	b29b      	uxth	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1cb      	bne.n	80040d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	9300      	str	r3, [sp, #0]
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	2200      	movs	r2, #0
 8004142:	2140      	movs	r1, #64	@ 0x40
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 fb03 	bl	8004750 <UART_WaitOnFlagUntilTimeout>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d005      	beq.n	800415c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2220      	movs	r2, #32
 8004154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e006      	b.n	800416a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2220      	movs	r2, #32
 8004160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004164:	2300      	movs	r3, #0
 8004166:	e000      	b.n	800416a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004168:	2302      	movs	r3, #2
  }
}
 800416a:	4618      	mov	r0, r3
 800416c:	3720      	adds	r7, #32
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b084      	sub	sp, #16
 8004176:	af00      	add	r7, sp, #0
 8004178:	60f8      	str	r0, [r7, #12]
 800417a:	60b9      	str	r1, [r7, #8]
 800417c:	4613      	mov	r3, r2
 800417e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b20      	cmp	r3, #32
 800418a:	d112      	bne.n	80041b2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d002      	beq.n	8004198 <HAL_UART_Receive_IT+0x26>
 8004192:	88fb      	ldrh	r3, [r7, #6]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d101      	bne.n	800419c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e00b      	b.n	80041b4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80041a2:	88fb      	ldrh	r3, [r7, #6]
 80041a4:	461a      	mov	r2, r3
 80041a6:	68b9      	ldr	r1, [r7, #8]
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 fb2a 	bl	8004802 <UART_Start_Receive_IT>
 80041ae:	4603      	mov	r3, r0
 80041b0:	e000      	b.n	80041b4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80041b2:	2302      	movs	r3, #2
  }
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b0ba      	sub	sp, #232	@ 0xe8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80041e2:	2300      	movs	r3, #0
 80041e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80041e8:	2300      	movs	r3, #0
 80041ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041f2:	f003 030f 	and.w	r3, r3, #15
 80041f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80041fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10f      	bne.n	8004222 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004206:	f003 0320 	and.w	r3, r3, #32
 800420a:	2b00      	cmp	r3, #0
 800420c:	d009      	beq.n	8004222 <HAL_UART_IRQHandler+0x66>
 800420e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004212:	f003 0320 	and.w	r3, r3, #32
 8004216:	2b00      	cmp	r3, #0
 8004218:	d003      	beq.n	8004222 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 fc07 	bl	8004a2e <UART_Receive_IT>
      return;
 8004220:	e273      	b.n	800470a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004222:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004226:	2b00      	cmp	r3, #0
 8004228:	f000 80de 	beq.w	80043e8 <HAL_UART_IRQHandler+0x22c>
 800422c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b00      	cmp	r3, #0
 8004236:	d106      	bne.n	8004246 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800423c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 80d1 	beq.w	80043e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00b      	beq.n	800426a <HAL_UART_IRQHandler+0xae>
 8004252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800425a:	2b00      	cmp	r3, #0
 800425c:	d005      	beq.n	800426a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004262:	f043 0201 	orr.w	r2, r3, #1
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800426a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800426e:	f003 0304 	and.w	r3, r3, #4
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00b      	beq.n	800428e <HAL_UART_IRQHandler+0xd2>
 8004276:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	d005      	beq.n	800428e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004286:	f043 0202 	orr.w	r2, r3, #2
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800428e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00b      	beq.n	80042b2 <HAL_UART_IRQHandler+0xf6>
 800429a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d005      	beq.n	80042b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042aa:	f043 0204 	orr.w	r2, r3, #4
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80042b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042b6:	f003 0308 	and.w	r3, r3, #8
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d011      	beq.n	80042e2 <HAL_UART_IRQHandler+0x126>
 80042be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042c2:	f003 0320 	and.w	r3, r3, #32
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d105      	bne.n	80042d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80042ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d005      	beq.n	80042e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042da:	f043 0208 	orr.w	r2, r3, #8
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f000 820a 	beq.w	8004700 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042f0:	f003 0320 	and.w	r3, r3, #32
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d008      	beq.n	800430a <HAL_UART_IRQHandler+0x14e>
 80042f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042fc:	f003 0320 	and.w	r3, r3, #32
 8004300:	2b00      	cmp	r3, #0
 8004302:	d002      	beq.n	800430a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 fb92 	bl	8004a2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004314:	2b40      	cmp	r3, #64	@ 0x40
 8004316:	bf0c      	ite	eq
 8004318:	2301      	moveq	r3, #1
 800431a:	2300      	movne	r3, #0
 800431c:	b2db      	uxtb	r3, r3
 800431e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004326:	f003 0308 	and.w	r3, r3, #8
 800432a:	2b00      	cmp	r3, #0
 800432c:	d103      	bne.n	8004336 <HAL_UART_IRQHandler+0x17a>
 800432e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004332:	2b00      	cmp	r3, #0
 8004334:	d04f      	beq.n	80043d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 fa9d 	bl	8004876 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004346:	2b40      	cmp	r3, #64	@ 0x40
 8004348:	d141      	bne.n	80043ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	3314      	adds	r3, #20
 8004350:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004354:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004358:	e853 3f00 	ldrex	r3, [r3]
 800435c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004360:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004364:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004368:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3314      	adds	r3, #20
 8004372:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004376:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800437a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004382:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004386:	e841 2300 	strex	r3, r2, [r1]
 800438a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800438e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1d9      	bne.n	800434a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800439a:	2b00      	cmp	r3, #0
 800439c:	d013      	beq.n	80043c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043a2:	4a8a      	ldr	r2, [pc, #552]	@ (80045cc <HAL_UART_IRQHandler+0x410>)
 80043a4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7fd fec3 	bl	8002136 <HAL_DMA_Abort_IT>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d016      	beq.n	80043e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80043c0:	4610      	mov	r0, r2
 80043c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043c4:	e00e      	b.n	80043e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f9ac 	bl	8004724 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043cc:	e00a      	b.n	80043e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f9a8 	bl	8004724 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d4:	e006      	b.n	80043e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f9a4 	bl	8004724 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80043e2:	e18d      	b.n	8004700 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043e4:	bf00      	nop
    return;
 80043e6:	e18b      	b.n	8004700 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	f040 8167 	bne.w	80046c0 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80043f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043f6:	f003 0310 	and.w	r3, r3, #16
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 8160 	beq.w	80046c0 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004404:	f003 0310 	and.w	r3, r3, #16
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 8159 	beq.w	80046c0 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800440e:	2300      	movs	r3, #0
 8004410:	60bb      	str	r3, [r7, #8]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	60bb      	str	r3, [r7, #8]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	60bb      	str	r3, [r7, #8]
 8004422:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800442e:	2b40      	cmp	r3, #64	@ 0x40
 8004430:	f040 80ce 	bne.w	80045d0 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004440:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 80a9 	beq.w	800459c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800444e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004452:	429a      	cmp	r2, r3
 8004454:	f080 80a2 	bcs.w	800459c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800445e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800446a:	f000 8088 	beq.w	800457e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	330c      	adds	r3, #12
 8004474:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004478:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800447c:	e853 3f00 	ldrex	r3, [r3]
 8004480:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004484:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004488:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800448c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	330c      	adds	r3, #12
 8004496:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800449a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800449e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80044a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80044aa:	e841 2300 	strex	r3, r2, [r1]
 80044ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80044b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1d9      	bne.n	800446e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	3314      	adds	r3, #20
 80044c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044c4:	e853 3f00 	ldrex	r3, [r3]
 80044c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80044ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044cc:	f023 0301 	bic.w	r3, r3, #1
 80044d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	3314      	adds	r3, #20
 80044da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80044de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80044e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80044e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80044ea:	e841 2300 	strex	r3, r2, [r1]
 80044ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80044f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1e1      	bne.n	80044ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3314      	adds	r3, #20
 80044fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004500:	e853 3f00 	ldrex	r3, [r3]
 8004504:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004506:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004508:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800450c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	3314      	adds	r3, #20
 8004516:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800451a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800451c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004520:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004522:	e841 2300 	strex	r3, r2, [r1]
 8004526:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004528:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1e3      	bne.n	80044f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2220      	movs	r2, #32
 8004532:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	330c      	adds	r3, #12
 8004542:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004544:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004546:	e853 3f00 	ldrex	r3, [r3]
 800454a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800454c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800454e:	f023 0310 	bic.w	r3, r3, #16
 8004552:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	330c      	adds	r3, #12
 800455c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004560:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004562:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004564:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004566:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004568:	e841 2300 	strex	r3, r2, [r1]
 800456c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800456e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1e3      	bne.n	800453c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004578:	4618      	mov	r0, r3
 800457a:	f7fd fd6c 	bl	8002056 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2202      	movs	r2, #2
 8004582:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800458c:	b29b      	uxth	r3, r3
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	b29b      	uxth	r3, r3
 8004592:	4619      	mov	r1, r3
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 f8cf 	bl	8004738 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800459a:	e0b3      	b.n	8004704 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80045a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80045a4:	429a      	cmp	r2, r3
 80045a6:	f040 80ad 	bne.w	8004704 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ae:	69db      	ldr	r3, [r3, #28]
 80045b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045b4:	f040 80a6 	bne.w	8004704 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2202      	movs	r2, #2
 80045bc:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80045c2:	4619      	mov	r1, r3
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 f8b7 	bl	8004738 <HAL_UARTEx_RxEventCallback>
      return;
 80045ca:	e09b      	b.n	8004704 <HAL_UART_IRQHandler+0x548>
 80045cc:	0800493d 	.word	0x0800493d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045d8:	b29b      	uxth	r3, r3
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f000 808e 	beq.w	8004708 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80045ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f000 8089 	beq.w	8004708 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	330c      	adds	r3, #12
 80045fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004600:	e853 3f00 	ldrex	r3, [r3]
 8004604:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004608:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800460c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	330c      	adds	r3, #12
 8004616:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800461a:	647a      	str	r2, [r7, #68]	@ 0x44
 800461c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004620:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004622:	e841 2300 	strex	r3, r2, [r1]
 8004626:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004628:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1e3      	bne.n	80045f6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	3314      	adds	r3, #20
 8004634:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004638:	e853 3f00 	ldrex	r3, [r3]
 800463c:	623b      	str	r3, [r7, #32]
   return(result);
 800463e:	6a3b      	ldr	r3, [r7, #32]
 8004640:	f023 0301 	bic.w	r3, r3, #1
 8004644:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	3314      	adds	r3, #20
 800464e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004652:	633a      	str	r2, [r7, #48]	@ 0x30
 8004654:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004656:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004658:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800465a:	e841 2300 	strex	r3, r2, [r1]
 800465e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1e3      	bne.n	800462e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2220      	movs	r2, #32
 800466a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	330c      	adds	r3, #12
 800467a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	e853 3f00 	ldrex	r3, [r3]
 8004682:	60fb      	str	r3, [r7, #12]
   return(result);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f023 0310 	bic.w	r3, r3, #16
 800468a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	330c      	adds	r3, #12
 8004694:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004698:	61fa      	str	r2, [r7, #28]
 800469a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469c:	69b9      	ldr	r1, [r7, #24]
 800469e:	69fa      	ldr	r2, [r7, #28]
 80046a0:	e841 2300 	strex	r3, r2, [r1]
 80046a4:	617b      	str	r3, [r7, #20]
   return(result);
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1e3      	bne.n	8004674 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80046b6:	4619      	mov	r1, r3
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 f83d 	bl	8004738 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046be:	e023      	b.n	8004708 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80046c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d009      	beq.n	80046e0 <HAL_UART_IRQHandler+0x524>
 80046cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d003      	beq.n	80046e0 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 f940 	bl	800495e <UART_Transmit_IT>
    return;
 80046de:	e014      	b.n	800470a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80046e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00e      	beq.n	800470a <HAL_UART_IRQHandler+0x54e>
 80046ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d008      	beq.n	800470a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 f980 	bl	80049fe <UART_EndTransmit_IT>
    return;
 80046fe:	e004      	b.n	800470a <HAL_UART_IRQHandler+0x54e>
    return;
 8004700:	bf00      	nop
 8004702:	e002      	b.n	800470a <HAL_UART_IRQHandler+0x54e>
      return;
 8004704:	bf00      	nop
 8004706:	e000      	b.n	800470a <HAL_UART_IRQHandler+0x54e>
      return;
 8004708:	bf00      	nop
  }
}
 800470a:	37e8      	adds	r7, #232	@ 0xe8
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	460b      	mov	r3, r1
 8004742:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	603b      	str	r3, [r7, #0]
 800475c:	4613      	mov	r3, r2
 800475e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004760:	e03b      	b.n	80047da <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004762:	6a3b      	ldr	r3, [r7, #32]
 8004764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004768:	d037      	beq.n	80047da <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800476a:	f7fd fb33 	bl	8001dd4 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	6a3a      	ldr	r2, [r7, #32]
 8004776:	429a      	cmp	r2, r3
 8004778:	d302      	bcc.n	8004780 <UART_WaitOnFlagUntilTimeout+0x30>
 800477a:	6a3b      	ldr	r3, [r7, #32]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e03a      	b.n	80047fa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	f003 0304 	and.w	r3, r3, #4
 800478e:	2b00      	cmp	r3, #0
 8004790:	d023      	beq.n	80047da <UART_WaitOnFlagUntilTimeout+0x8a>
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	2b80      	cmp	r3, #128	@ 0x80
 8004796:	d020      	beq.n	80047da <UART_WaitOnFlagUntilTimeout+0x8a>
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	2b40      	cmp	r3, #64	@ 0x40
 800479c:	d01d      	beq.n	80047da <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0308 	and.w	r3, r3, #8
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d116      	bne.n	80047da <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80047ac:	2300      	movs	r3, #0
 80047ae:	617b      	str	r3, [r7, #20]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	617b      	str	r3, [r7, #20]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	617b      	str	r3, [r7, #20]
 80047c0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f000 f857 	bl	8004876 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2208      	movs	r2, #8
 80047cc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e00f      	b.n	80047fa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	4013      	ands	r3, r2
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	bf0c      	ite	eq
 80047ea:	2301      	moveq	r3, #1
 80047ec:	2300      	movne	r3, #0
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	461a      	mov	r2, r3
 80047f2:	79fb      	ldrb	r3, [r7, #7]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d0b4      	beq.n	8004762 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3718      	adds	r7, #24
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004802:	b480      	push	{r7}
 8004804:	b085      	sub	sp, #20
 8004806:	af00      	add	r7, sp, #0
 8004808:	60f8      	str	r0, [r7, #12]
 800480a:	60b9      	str	r1, [r7, #8]
 800480c:	4613      	mov	r3, r2
 800480e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	88fa      	ldrh	r2, [r7, #6]
 800481a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	88fa      	ldrh	r2, [r7, #6]
 8004820:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2222      	movs	r2, #34	@ 0x22
 800482c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d007      	beq.n	8004848 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68da      	ldr	r2, [r3, #12]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004846:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	695a      	ldr	r2, [r3, #20]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f042 0201 	orr.w	r2, r2, #1
 8004856:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f042 0220 	orr.w	r2, r2, #32
 8004866:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3714      	adds	r7, #20
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004876:	b480      	push	{r7}
 8004878:	b095      	sub	sp, #84	@ 0x54
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	330c      	adds	r3, #12
 8004884:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004888:	e853 3f00 	ldrex	r3, [r3]
 800488c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800488e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004890:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004894:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	330c      	adds	r3, #12
 800489c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800489e:	643a      	str	r2, [r7, #64]	@ 0x40
 80048a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80048a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80048a6:	e841 2300 	strex	r3, r2, [r1]
 80048aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80048ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1e5      	bne.n	800487e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	3314      	adds	r3, #20
 80048b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ba:	6a3b      	ldr	r3, [r7, #32]
 80048bc:	e853 3f00 	ldrex	r3, [r3]
 80048c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	f023 0301 	bic.w	r3, r3, #1
 80048c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	3314      	adds	r3, #20
 80048d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048da:	e841 2300 	strex	r3, r2, [r1]
 80048de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1e5      	bne.n	80048b2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d119      	bne.n	8004922 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	330c      	adds	r3, #12
 80048f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	e853 3f00 	ldrex	r3, [r3]
 80048fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	f023 0310 	bic.w	r3, r3, #16
 8004904:	647b      	str	r3, [r7, #68]	@ 0x44
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	330c      	adds	r3, #12
 800490c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800490e:	61ba      	str	r2, [r7, #24]
 8004910:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004912:	6979      	ldr	r1, [r7, #20]
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	e841 2300 	strex	r3, r2, [r1]
 800491a:	613b      	str	r3, [r7, #16]
   return(result);
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1e5      	bne.n	80048ee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2220      	movs	r2, #32
 8004926:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004930:	bf00      	nop
 8004932:	3754      	adds	r7, #84	@ 0x54
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004948:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f7ff fee7 	bl	8004724 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004956:	bf00      	nop
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800495e:	b480      	push	{r7}
 8004960:	b085      	sub	sp, #20
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b21      	cmp	r3, #33	@ 0x21
 8004970:	d13e      	bne.n	80049f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800497a:	d114      	bne.n	80049a6 <UART_Transmit_IT+0x48>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d110      	bne.n	80049a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	881b      	ldrh	r3, [r3, #0]
 800498e:	461a      	mov	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004998:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	1c9a      	adds	r2, r3, #2
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	621a      	str	r2, [r3, #32]
 80049a4:	e008      	b.n	80049b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	1c59      	adds	r1, r3, #1
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	6211      	str	r1, [r2, #32]
 80049b0:	781a      	ldrb	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049bc:	b29b      	uxth	r3, r3
 80049be:	3b01      	subs	r3, #1
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	4619      	mov	r1, r3
 80049c6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10f      	bne.n	80049ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68da      	ldr	r2, [r3, #12]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68da      	ldr	r2, [r3, #12]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80049ec:	2300      	movs	r3, #0
 80049ee:	e000      	b.n	80049f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80049f0:	2302      	movs	r3, #2
  }
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3714      	adds	r7, #20
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b082      	sub	sp, #8
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68da      	ldr	r2, [r3, #12]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7ff fe76 	bl	8004710 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3708      	adds	r7, #8
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b08c      	sub	sp, #48	@ 0x30
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004a36:	2300      	movs	r3, #0
 8004a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b22      	cmp	r3, #34	@ 0x22
 8004a48:	f040 80aa 	bne.w	8004ba0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a54:	d115      	bne.n	8004a82 <UART_Receive_IT+0x54>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d111      	bne.n	8004a82 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a62:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a74:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a7a:	1c9a      	adds	r2, r3, #2
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a80:	e024      	b.n	8004acc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a90:	d007      	beq.n	8004aa2 <UART_Receive_IT+0x74>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10a      	bne.n	8004ab0 <UART_Receive_IT+0x82>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d106      	bne.n	8004ab0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aac:	701a      	strb	r2, [r3, #0]
 8004aae:	e008      	b.n	8004ac2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004abc:	b2da      	uxtb	r2, r3
 8004abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ac0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac6:	1c5a      	adds	r2, r3, #1
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	4619      	mov	r1, r3
 8004ada:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d15d      	bne.n	8004b9c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68da      	ldr	r2, [r3, #12]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f022 0220 	bic.w	r2, r2, #32
 8004aee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68da      	ldr	r2, [r3, #12]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004afe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	695a      	ldr	r2, [r3, #20]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f022 0201 	bic.w	r2, r2, #1
 8004b0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2220      	movs	r2, #32
 8004b14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d135      	bne.n	8004b92 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	330c      	adds	r3, #12
 8004b32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	e853 3f00 	ldrex	r3, [r3]
 8004b3a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	f023 0310 	bic.w	r3, r3, #16
 8004b42:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	330c      	adds	r3, #12
 8004b4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b4c:	623a      	str	r2, [r7, #32]
 8004b4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b50:	69f9      	ldr	r1, [r7, #28]
 8004b52:	6a3a      	ldr	r2, [r7, #32]
 8004b54:	e841 2300 	strex	r3, r2, [r1]
 8004b58:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1e5      	bne.n	8004b2c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0310 	and.w	r3, r3, #16
 8004b6a:	2b10      	cmp	r3, #16
 8004b6c:	d10a      	bne.n	8004b84 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b6e:	2300      	movs	r3, #0
 8004b70:	60fb      	str	r3, [r7, #12]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	60fb      	str	r3, [r7, #12]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	60fb      	str	r3, [r7, #12]
 8004b82:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004b88:	4619      	mov	r1, r3
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f7ff fdd4 	bl	8004738 <HAL_UARTEx_RxEventCallback>
 8004b90:	e002      	b.n	8004b98 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7fc fb68 	bl	8001268 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	e002      	b.n	8004ba2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	e000      	b.n	8004ba2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004ba0:	2302      	movs	r3, #2
  }
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3730      	adds	r7, #48	@ 0x30
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
	...

08004bac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bb0:	b0c0      	sub	sp, #256	@ 0x100
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc8:	68d9      	ldr	r1, [r3, #12]
 8004bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	ea40 0301 	orr.w	r3, r0, r1
 8004bd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bda:	689a      	ldr	r2, [r3, #8]
 8004bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	431a      	orrs	r2, r3
 8004be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	431a      	orrs	r2, r3
 8004bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf0:	69db      	ldr	r3, [r3, #28]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004c04:	f021 010c 	bic.w	r1, r1, #12
 8004c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004c12:	430b      	orrs	r3, r1
 8004c14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c26:	6999      	ldr	r1, [r3, #24]
 8004c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	ea40 0301 	orr.w	r3, r0, r1
 8004c32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	4b8f      	ldr	r3, [pc, #572]	@ (8004e78 <UART_SetConfig+0x2cc>)
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d005      	beq.n	8004c4c <UART_SetConfig+0xa0>
 8004c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	4b8d      	ldr	r3, [pc, #564]	@ (8004e7c <UART_SetConfig+0x2d0>)
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d104      	bne.n	8004c56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c4c:	f7fe fd6e 	bl	800372c <HAL_RCC_GetPCLK2Freq>
 8004c50:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004c54:	e003      	b.n	8004c5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c56:	f7fe fd55 	bl	8003704 <HAL_RCC_GetPCLK1Freq>
 8004c5a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c62:	69db      	ldr	r3, [r3, #28]
 8004c64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c68:	f040 810c 	bne.w	8004e84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c70:	2200      	movs	r2, #0
 8004c72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c76:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004c7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004c7e:	4622      	mov	r2, r4
 8004c80:	462b      	mov	r3, r5
 8004c82:	1891      	adds	r1, r2, r2
 8004c84:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004c86:	415b      	adcs	r3, r3
 8004c88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c8e:	4621      	mov	r1, r4
 8004c90:	eb12 0801 	adds.w	r8, r2, r1
 8004c94:	4629      	mov	r1, r5
 8004c96:	eb43 0901 	adc.w	r9, r3, r1
 8004c9a:	f04f 0200 	mov.w	r2, #0
 8004c9e:	f04f 0300 	mov.w	r3, #0
 8004ca2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ca6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004caa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cae:	4690      	mov	r8, r2
 8004cb0:	4699      	mov	r9, r3
 8004cb2:	4623      	mov	r3, r4
 8004cb4:	eb18 0303 	adds.w	r3, r8, r3
 8004cb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004cbc:	462b      	mov	r3, r5
 8004cbe:	eb49 0303 	adc.w	r3, r9, r3
 8004cc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004cd2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004cd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004cda:	460b      	mov	r3, r1
 8004cdc:	18db      	adds	r3, r3, r3
 8004cde:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	eb42 0303 	adc.w	r3, r2, r3
 8004ce6:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ce8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004cec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004cf0:	f7fb face 	bl	8000290 <__aeabi_uldivmod>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	4b61      	ldr	r3, [pc, #388]	@ (8004e80 <UART_SetConfig+0x2d4>)
 8004cfa:	fba3 2302 	umull	r2, r3, r3, r2
 8004cfe:	095b      	lsrs	r3, r3, #5
 8004d00:	011c      	lsls	r4, r3, #4
 8004d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d06:	2200      	movs	r2, #0
 8004d08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d0c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004d10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004d14:	4642      	mov	r2, r8
 8004d16:	464b      	mov	r3, r9
 8004d18:	1891      	adds	r1, r2, r2
 8004d1a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004d1c:	415b      	adcs	r3, r3
 8004d1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004d24:	4641      	mov	r1, r8
 8004d26:	eb12 0a01 	adds.w	sl, r2, r1
 8004d2a:	4649      	mov	r1, r9
 8004d2c:	eb43 0b01 	adc.w	fp, r3, r1
 8004d30:	f04f 0200 	mov.w	r2, #0
 8004d34:	f04f 0300 	mov.w	r3, #0
 8004d38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d44:	4692      	mov	sl, r2
 8004d46:	469b      	mov	fp, r3
 8004d48:	4643      	mov	r3, r8
 8004d4a:	eb1a 0303 	adds.w	r3, sl, r3
 8004d4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d52:	464b      	mov	r3, r9
 8004d54:	eb4b 0303 	adc.w	r3, fp, r3
 8004d58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d68:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004d6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d70:	460b      	mov	r3, r1
 8004d72:	18db      	adds	r3, r3, r3
 8004d74:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d76:	4613      	mov	r3, r2
 8004d78:	eb42 0303 	adc.w	r3, r2, r3
 8004d7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004d82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004d86:	f7fb fa83 	bl	8000290 <__aeabi_uldivmod>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	4611      	mov	r1, r2
 8004d90:	4b3b      	ldr	r3, [pc, #236]	@ (8004e80 <UART_SetConfig+0x2d4>)
 8004d92:	fba3 2301 	umull	r2, r3, r3, r1
 8004d96:	095b      	lsrs	r3, r3, #5
 8004d98:	2264      	movs	r2, #100	@ 0x64
 8004d9a:	fb02 f303 	mul.w	r3, r2, r3
 8004d9e:	1acb      	subs	r3, r1, r3
 8004da0:	00db      	lsls	r3, r3, #3
 8004da2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004da6:	4b36      	ldr	r3, [pc, #216]	@ (8004e80 <UART_SetConfig+0x2d4>)
 8004da8:	fba3 2302 	umull	r2, r3, r3, r2
 8004dac:	095b      	lsrs	r3, r3, #5
 8004dae:	005b      	lsls	r3, r3, #1
 8004db0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004db4:	441c      	add	r4, r3
 8004db6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004dc0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004dc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004dc8:	4642      	mov	r2, r8
 8004dca:	464b      	mov	r3, r9
 8004dcc:	1891      	adds	r1, r2, r2
 8004dce:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004dd0:	415b      	adcs	r3, r3
 8004dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004dd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004dd8:	4641      	mov	r1, r8
 8004dda:	1851      	adds	r1, r2, r1
 8004ddc:	6339      	str	r1, [r7, #48]	@ 0x30
 8004dde:	4649      	mov	r1, r9
 8004de0:	414b      	adcs	r3, r1
 8004de2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004de4:	f04f 0200 	mov.w	r2, #0
 8004de8:	f04f 0300 	mov.w	r3, #0
 8004dec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004df0:	4659      	mov	r1, fp
 8004df2:	00cb      	lsls	r3, r1, #3
 8004df4:	4651      	mov	r1, sl
 8004df6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dfa:	4651      	mov	r1, sl
 8004dfc:	00ca      	lsls	r2, r1, #3
 8004dfe:	4610      	mov	r0, r2
 8004e00:	4619      	mov	r1, r3
 8004e02:	4603      	mov	r3, r0
 8004e04:	4642      	mov	r2, r8
 8004e06:	189b      	adds	r3, r3, r2
 8004e08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e0c:	464b      	mov	r3, r9
 8004e0e:	460a      	mov	r2, r1
 8004e10:	eb42 0303 	adc.w	r3, r2, r3
 8004e14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e24:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004e28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	18db      	adds	r3, r3, r3
 8004e30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e32:	4613      	mov	r3, r2
 8004e34:	eb42 0303 	adc.w	r3, r2, r3
 8004e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004e42:	f7fb fa25 	bl	8000290 <__aeabi_uldivmod>
 8004e46:	4602      	mov	r2, r0
 8004e48:	460b      	mov	r3, r1
 8004e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e80 <UART_SetConfig+0x2d4>)
 8004e4c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e50:	095b      	lsrs	r3, r3, #5
 8004e52:	2164      	movs	r1, #100	@ 0x64
 8004e54:	fb01 f303 	mul.w	r3, r1, r3
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	00db      	lsls	r3, r3, #3
 8004e5c:	3332      	adds	r3, #50	@ 0x32
 8004e5e:	4a08      	ldr	r2, [pc, #32]	@ (8004e80 <UART_SetConfig+0x2d4>)
 8004e60:	fba2 2303 	umull	r2, r3, r2, r3
 8004e64:	095b      	lsrs	r3, r3, #5
 8004e66:	f003 0207 	and.w	r2, r3, #7
 8004e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4422      	add	r2, r4
 8004e72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e74:	e106      	b.n	8005084 <UART_SetConfig+0x4d8>
 8004e76:	bf00      	nop
 8004e78:	40011000 	.word	0x40011000
 8004e7c:	40011400 	.word	0x40011400
 8004e80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e8e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004e92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004e96:	4642      	mov	r2, r8
 8004e98:	464b      	mov	r3, r9
 8004e9a:	1891      	adds	r1, r2, r2
 8004e9c:	6239      	str	r1, [r7, #32]
 8004e9e:	415b      	adcs	r3, r3
 8004ea0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ea2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ea6:	4641      	mov	r1, r8
 8004ea8:	1854      	adds	r4, r2, r1
 8004eaa:	4649      	mov	r1, r9
 8004eac:	eb43 0501 	adc.w	r5, r3, r1
 8004eb0:	f04f 0200 	mov.w	r2, #0
 8004eb4:	f04f 0300 	mov.w	r3, #0
 8004eb8:	00eb      	lsls	r3, r5, #3
 8004eba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ebe:	00e2      	lsls	r2, r4, #3
 8004ec0:	4614      	mov	r4, r2
 8004ec2:	461d      	mov	r5, r3
 8004ec4:	4643      	mov	r3, r8
 8004ec6:	18e3      	adds	r3, r4, r3
 8004ec8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ecc:	464b      	mov	r3, r9
 8004ece:	eb45 0303 	adc.w	r3, r5, r3
 8004ed2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ee2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ee6:	f04f 0200 	mov.w	r2, #0
 8004eea:	f04f 0300 	mov.w	r3, #0
 8004eee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004ef2:	4629      	mov	r1, r5
 8004ef4:	008b      	lsls	r3, r1, #2
 8004ef6:	4621      	mov	r1, r4
 8004ef8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004efc:	4621      	mov	r1, r4
 8004efe:	008a      	lsls	r2, r1, #2
 8004f00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004f04:	f7fb f9c4 	bl	8000290 <__aeabi_uldivmod>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	4b60      	ldr	r3, [pc, #384]	@ (8005090 <UART_SetConfig+0x4e4>)
 8004f0e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f12:	095b      	lsrs	r3, r3, #5
 8004f14:	011c      	lsls	r4, r3, #4
 8004f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004f20:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004f24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004f28:	4642      	mov	r2, r8
 8004f2a:	464b      	mov	r3, r9
 8004f2c:	1891      	adds	r1, r2, r2
 8004f2e:	61b9      	str	r1, [r7, #24]
 8004f30:	415b      	adcs	r3, r3
 8004f32:	61fb      	str	r3, [r7, #28]
 8004f34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f38:	4641      	mov	r1, r8
 8004f3a:	1851      	adds	r1, r2, r1
 8004f3c:	6139      	str	r1, [r7, #16]
 8004f3e:	4649      	mov	r1, r9
 8004f40:	414b      	adcs	r3, r1
 8004f42:	617b      	str	r3, [r7, #20]
 8004f44:	f04f 0200 	mov.w	r2, #0
 8004f48:	f04f 0300 	mov.w	r3, #0
 8004f4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f50:	4659      	mov	r1, fp
 8004f52:	00cb      	lsls	r3, r1, #3
 8004f54:	4651      	mov	r1, sl
 8004f56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f5a:	4651      	mov	r1, sl
 8004f5c:	00ca      	lsls	r2, r1, #3
 8004f5e:	4610      	mov	r0, r2
 8004f60:	4619      	mov	r1, r3
 8004f62:	4603      	mov	r3, r0
 8004f64:	4642      	mov	r2, r8
 8004f66:	189b      	adds	r3, r3, r2
 8004f68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f6c:	464b      	mov	r3, r9
 8004f6e:	460a      	mov	r2, r1
 8004f70:	eb42 0303 	adc.w	r3, r2, r3
 8004f74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f82:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004f84:	f04f 0200 	mov.w	r2, #0
 8004f88:	f04f 0300 	mov.w	r3, #0
 8004f8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004f90:	4649      	mov	r1, r9
 8004f92:	008b      	lsls	r3, r1, #2
 8004f94:	4641      	mov	r1, r8
 8004f96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f9a:	4641      	mov	r1, r8
 8004f9c:	008a      	lsls	r2, r1, #2
 8004f9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004fa2:	f7fb f975 	bl	8000290 <__aeabi_uldivmod>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	460b      	mov	r3, r1
 8004faa:	4611      	mov	r1, r2
 8004fac:	4b38      	ldr	r3, [pc, #224]	@ (8005090 <UART_SetConfig+0x4e4>)
 8004fae:	fba3 2301 	umull	r2, r3, r3, r1
 8004fb2:	095b      	lsrs	r3, r3, #5
 8004fb4:	2264      	movs	r2, #100	@ 0x64
 8004fb6:	fb02 f303 	mul.w	r3, r2, r3
 8004fba:	1acb      	subs	r3, r1, r3
 8004fbc:	011b      	lsls	r3, r3, #4
 8004fbe:	3332      	adds	r3, #50	@ 0x32
 8004fc0:	4a33      	ldr	r2, [pc, #204]	@ (8005090 <UART_SetConfig+0x4e4>)
 8004fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc6:	095b      	lsrs	r3, r3, #5
 8004fc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fcc:	441c      	add	r4, r3
 8004fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	673b      	str	r3, [r7, #112]	@ 0x70
 8004fd6:	677a      	str	r2, [r7, #116]	@ 0x74
 8004fd8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004fdc:	4642      	mov	r2, r8
 8004fde:	464b      	mov	r3, r9
 8004fe0:	1891      	adds	r1, r2, r2
 8004fe2:	60b9      	str	r1, [r7, #8]
 8004fe4:	415b      	adcs	r3, r3
 8004fe6:	60fb      	str	r3, [r7, #12]
 8004fe8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fec:	4641      	mov	r1, r8
 8004fee:	1851      	adds	r1, r2, r1
 8004ff0:	6039      	str	r1, [r7, #0]
 8004ff2:	4649      	mov	r1, r9
 8004ff4:	414b      	adcs	r3, r1
 8004ff6:	607b      	str	r3, [r7, #4]
 8004ff8:	f04f 0200 	mov.w	r2, #0
 8004ffc:	f04f 0300 	mov.w	r3, #0
 8005000:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005004:	4659      	mov	r1, fp
 8005006:	00cb      	lsls	r3, r1, #3
 8005008:	4651      	mov	r1, sl
 800500a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800500e:	4651      	mov	r1, sl
 8005010:	00ca      	lsls	r2, r1, #3
 8005012:	4610      	mov	r0, r2
 8005014:	4619      	mov	r1, r3
 8005016:	4603      	mov	r3, r0
 8005018:	4642      	mov	r2, r8
 800501a:	189b      	adds	r3, r3, r2
 800501c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800501e:	464b      	mov	r3, r9
 8005020:	460a      	mov	r2, r1
 8005022:	eb42 0303 	adc.w	r3, r2, r3
 8005026:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	663b      	str	r3, [r7, #96]	@ 0x60
 8005032:	667a      	str	r2, [r7, #100]	@ 0x64
 8005034:	f04f 0200 	mov.w	r2, #0
 8005038:	f04f 0300 	mov.w	r3, #0
 800503c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005040:	4649      	mov	r1, r9
 8005042:	008b      	lsls	r3, r1, #2
 8005044:	4641      	mov	r1, r8
 8005046:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800504a:	4641      	mov	r1, r8
 800504c:	008a      	lsls	r2, r1, #2
 800504e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005052:	f7fb f91d 	bl	8000290 <__aeabi_uldivmod>
 8005056:	4602      	mov	r2, r0
 8005058:	460b      	mov	r3, r1
 800505a:	4b0d      	ldr	r3, [pc, #52]	@ (8005090 <UART_SetConfig+0x4e4>)
 800505c:	fba3 1302 	umull	r1, r3, r3, r2
 8005060:	095b      	lsrs	r3, r3, #5
 8005062:	2164      	movs	r1, #100	@ 0x64
 8005064:	fb01 f303 	mul.w	r3, r1, r3
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	011b      	lsls	r3, r3, #4
 800506c:	3332      	adds	r3, #50	@ 0x32
 800506e:	4a08      	ldr	r2, [pc, #32]	@ (8005090 <UART_SetConfig+0x4e4>)
 8005070:	fba2 2303 	umull	r2, r3, r2, r3
 8005074:	095b      	lsrs	r3, r3, #5
 8005076:	f003 020f 	and.w	r2, r3, #15
 800507a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4422      	add	r2, r4
 8005082:	609a      	str	r2, [r3, #8]
}
 8005084:	bf00      	nop
 8005086:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800508a:	46bd      	mov	sp, r7
 800508c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005090:	51eb851f 	.word	0x51eb851f

08005094 <siprintf>:
 8005094:	b40e      	push	{r1, r2, r3}
 8005096:	b510      	push	{r4, lr}
 8005098:	b09d      	sub	sp, #116	@ 0x74
 800509a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800509c:	9002      	str	r0, [sp, #8]
 800509e:	9006      	str	r0, [sp, #24]
 80050a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80050a4:	480a      	ldr	r0, [pc, #40]	@ (80050d0 <siprintf+0x3c>)
 80050a6:	9107      	str	r1, [sp, #28]
 80050a8:	9104      	str	r1, [sp, #16]
 80050aa:	490a      	ldr	r1, [pc, #40]	@ (80050d4 <siprintf+0x40>)
 80050ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80050b0:	9105      	str	r1, [sp, #20]
 80050b2:	2400      	movs	r4, #0
 80050b4:	a902      	add	r1, sp, #8
 80050b6:	6800      	ldr	r0, [r0, #0]
 80050b8:	9301      	str	r3, [sp, #4]
 80050ba:	941b      	str	r4, [sp, #108]	@ 0x6c
 80050bc:	f000 f994 	bl	80053e8 <_svfiprintf_r>
 80050c0:	9b02      	ldr	r3, [sp, #8]
 80050c2:	701c      	strb	r4, [r3, #0]
 80050c4:	b01d      	add	sp, #116	@ 0x74
 80050c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050ca:	b003      	add	sp, #12
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	20000084 	.word	0x20000084
 80050d4:	ffff0208 	.word	0xffff0208

080050d8 <memset>:
 80050d8:	4402      	add	r2, r0
 80050da:	4603      	mov	r3, r0
 80050dc:	4293      	cmp	r3, r2
 80050de:	d100      	bne.n	80050e2 <memset+0xa>
 80050e0:	4770      	bx	lr
 80050e2:	f803 1b01 	strb.w	r1, [r3], #1
 80050e6:	e7f9      	b.n	80050dc <memset+0x4>

080050e8 <__errno>:
 80050e8:	4b01      	ldr	r3, [pc, #4]	@ (80050f0 <__errno+0x8>)
 80050ea:	6818      	ldr	r0, [r3, #0]
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	20000084 	.word	0x20000084

080050f4 <__libc_init_array>:
 80050f4:	b570      	push	{r4, r5, r6, lr}
 80050f6:	4d0d      	ldr	r5, [pc, #52]	@ (800512c <__libc_init_array+0x38>)
 80050f8:	4c0d      	ldr	r4, [pc, #52]	@ (8005130 <__libc_init_array+0x3c>)
 80050fa:	1b64      	subs	r4, r4, r5
 80050fc:	10a4      	asrs	r4, r4, #2
 80050fe:	2600      	movs	r6, #0
 8005100:	42a6      	cmp	r6, r4
 8005102:	d109      	bne.n	8005118 <__libc_init_array+0x24>
 8005104:	4d0b      	ldr	r5, [pc, #44]	@ (8005134 <__libc_init_array+0x40>)
 8005106:	4c0c      	ldr	r4, [pc, #48]	@ (8005138 <__libc_init_array+0x44>)
 8005108:	f000 fc64 	bl	80059d4 <_init>
 800510c:	1b64      	subs	r4, r4, r5
 800510e:	10a4      	asrs	r4, r4, #2
 8005110:	2600      	movs	r6, #0
 8005112:	42a6      	cmp	r6, r4
 8005114:	d105      	bne.n	8005122 <__libc_init_array+0x2e>
 8005116:	bd70      	pop	{r4, r5, r6, pc}
 8005118:	f855 3b04 	ldr.w	r3, [r5], #4
 800511c:	4798      	blx	r3
 800511e:	3601      	adds	r6, #1
 8005120:	e7ee      	b.n	8005100 <__libc_init_array+0xc>
 8005122:	f855 3b04 	ldr.w	r3, [r5], #4
 8005126:	4798      	blx	r3
 8005128:	3601      	adds	r6, #1
 800512a:	e7f2      	b.n	8005112 <__libc_init_array+0x1e>
 800512c:	08005ac0 	.word	0x08005ac0
 8005130:	08005ac0 	.word	0x08005ac0
 8005134:	08005ac0 	.word	0x08005ac0
 8005138:	08005ac4 	.word	0x08005ac4

0800513c <__retarget_lock_acquire_recursive>:
 800513c:	4770      	bx	lr

0800513e <__retarget_lock_release_recursive>:
 800513e:	4770      	bx	lr

08005140 <_free_r>:
 8005140:	b538      	push	{r3, r4, r5, lr}
 8005142:	4605      	mov	r5, r0
 8005144:	2900      	cmp	r1, #0
 8005146:	d041      	beq.n	80051cc <_free_r+0x8c>
 8005148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800514c:	1f0c      	subs	r4, r1, #4
 800514e:	2b00      	cmp	r3, #0
 8005150:	bfb8      	it	lt
 8005152:	18e4      	addlt	r4, r4, r3
 8005154:	f000 f8e0 	bl	8005318 <__malloc_lock>
 8005158:	4a1d      	ldr	r2, [pc, #116]	@ (80051d0 <_free_r+0x90>)
 800515a:	6813      	ldr	r3, [r2, #0]
 800515c:	b933      	cbnz	r3, 800516c <_free_r+0x2c>
 800515e:	6063      	str	r3, [r4, #4]
 8005160:	6014      	str	r4, [r2, #0]
 8005162:	4628      	mov	r0, r5
 8005164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005168:	f000 b8dc 	b.w	8005324 <__malloc_unlock>
 800516c:	42a3      	cmp	r3, r4
 800516e:	d908      	bls.n	8005182 <_free_r+0x42>
 8005170:	6820      	ldr	r0, [r4, #0]
 8005172:	1821      	adds	r1, r4, r0
 8005174:	428b      	cmp	r3, r1
 8005176:	bf01      	itttt	eq
 8005178:	6819      	ldreq	r1, [r3, #0]
 800517a:	685b      	ldreq	r3, [r3, #4]
 800517c:	1809      	addeq	r1, r1, r0
 800517e:	6021      	streq	r1, [r4, #0]
 8005180:	e7ed      	b.n	800515e <_free_r+0x1e>
 8005182:	461a      	mov	r2, r3
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	b10b      	cbz	r3, 800518c <_free_r+0x4c>
 8005188:	42a3      	cmp	r3, r4
 800518a:	d9fa      	bls.n	8005182 <_free_r+0x42>
 800518c:	6811      	ldr	r1, [r2, #0]
 800518e:	1850      	adds	r0, r2, r1
 8005190:	42a0      	cmp	r0, r4
 8005192:	d10b      	bne.n	80051ac <_free_r+0x6c>
 8005194:	6820      	ldr	r0, [r4, #0]
 8005196:	4401      	add	r1, r0
 8005198:	1850      	adds	r0, r2, r1
 800519a:	4283      	cmp	r3, r0
 800519c:	6011      	str	r1, [r2, #0]
 800519e:	d1e0      	bne.n	8005162 <_free_r+0x22>
 80051a0:	6818      	ldr	r0, [r3, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	6053      	str	r3, [r2, #4]
 80051a6:	4408      	add	r0, r1
 80051a8:	6010      	str	r0, [r2, #0]
 80051aa:	e7da      	b.n	8005162 <_free_r+0x22>
 80051ac:	d902      	bls.n	80051b4 <_free_r+0x74>
 80051ae:	230c      	movs	r3, #12
 80051b0:	602b      	str	r3, [r5, #0]
 80051b2:	e7d6      	b.n	8005162 <_free_r+0x22>
 80051b4:	6820      	ldr	r0, [r4, #0]
 80051b6:	1821      	adds	r1, r4, r0
 80051b8:	428b      	cmp	r3, r1
 80051ba:	bf04      	itt	eq
 80051bc:	6819      	ldreq	r1, [r3, #0]
 80051be:	685b      	ldreq	r3, [r3, #4]
 80051c0:	6063      	str	r3, [r4, #4]
 80051c2:	bf04      	itt	eq
 80051c4:	1809      	addeq	r1, r1, r0
 80051c6:	6021      	streq	r1, [r4, #0]
 80051c8:	6054      	str	r4, [r2, #4]
 80051ca:	e7ca      	b.n	8005162 <_free_r+0x22>
 80051cc:	bd38      	pop	{r3, r4, r5, pc}
 80051ce:	bf00      	nop
 80051d0:	20000380 	.word	0x20000380

080051d4 <sbrk_aligned>:
 80051d4:	b570      	push	{r4, r5, r6, lr}
 80051d6:	4e0f      	ldr	r6, [pc, #60]	@ (8005214 <sbrk_aligned+0x40>)
 80051d8:	460c      	mov	r4, r1
 80051da:	6831      	ldr	r1, [r6, #0]
 80051dc:	4605      	mov	r5, r0
 80051de:	b911      	cbnz	r1, 80051e6 <sbrk_aligned+0x12>
 80051e0:	f000 fba4 	bl	800592c <_sbrk_r>
 80051e4:	6030      	str	r0, [r6, #0]
 80051e6:	4621      	mov	r1, r4
 80051e8:	4628      	mov	r0, r5
 80051ea:	f000 fb9f 	bl	800592c <_sbrk_r>
 80051ee:	1c43      	adds	r3, r0, #1
 80051f0:	d103      	bne.n	80051fa <sbrk_aligned+0x26>
 80051f2:	f04f 34ff 	mov.w	r4, #4294967295
 80051f6:	4620      	mov	r0, r4
 80051f8:	bd70      	pop	{r4, r5, r6, pc}
 80051fa:	1cc4      	adds	r4, r0, #3
 80051fc:	f024 0403 	bic.w	r4, r4, #3
 8005200:	42a0      	cmp	r0, r4
 8005202:	d0f8      	beq.n	80051f6 <sbrk_aligned+0x22>
 8005204:	1a21      	subs	r1, r4, r0
 8005206:	4628      	mov	r0, r5
 8005208:	f000 fb90 	bl	800592c <_sbrk_r>
 800520c:	3001      	adds	r0, #1
 800520e:	d1f2      	bne.n	80051f6 <sbrk_aligned+0x22>
 8005210:	e7ef      	b.n	80051f2 <sbrk_aligned+0x1e>
 8005212:	bf00      	nop
 8005214:	2000037c 	.word	0x2000037c

08005218 <_malloc_r>:
 8005218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800521c:	1ccd      	adds	r5, r1, #3
 800521e:	f025 0503 	bic.w	r5, r5, #3
 8005222:	3508      	adds	r5, #8
 8005224:	2d0c      	cmp	r5, #12
 8005226:	bf38      	it	cc
 8005228:	250c      	movcc	r5, #12
 800522a:	2d00      	cmp	r5, #0
 800522c:	4606      	mov	r6, r0
 800522e:	db01      	blt.n	8005234 <_malloc_r+0x1c>
 8005230:	42a9      	cmp	r1, r5
 8005232:	d904      	bls.n	800523e <_malloc_r+0x26>
 8005234:	230c      	movs	r3, #12
 8005236:	6033      	str	r3, [r6, #0]
 8005238:	2000      	movs	r0, #0
 800523a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800523e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005314 <_malloc_r+0xfc>
 8005242:	f000 f869 	bl	8005318 <__malloc_lock>
 8005246:	f8d8 3000 	ldr.w	r3, [r8]
 800524a:	461c      	mov	r4, r3
 800524c:	bb44      	cbnz	r4, 80052a0 <_malloc_r+0x88>
 800524e:	4629      	mov	r1, r5
 8005250:	4630      	mov	r0, r6
 8005252:	f7ff ffbf 	bl	80051d4 <sbrk_aligned>
 8005256:	1c43      	adds	r3, r0, #1
 8005258:	4604      	mov	r4, r0
 800525a:	d158      	bne.n	800530e <_malloc_r+0xf6>
 800525c:	f8d8 4000 	ldr.w	r4, [r8]
 8005260:	4627      	mov	r7, r4
 8005262:	2f00      	cmp	r7, #0
 8005264:	d143      	bne.n	80052ee <_malloc_r+0xd6>
 8005266:	2c00      	cmp	r4, #0
 8005268:	d04b      	beq.n	8005302 <_malloc_r+0xea>
 800526a:	6823      	ldr	r3, [r4, #0]
 800526c:	4639      	mov	r1, r7
 800526e:	4630      	mov	r0, r6
 8005270:	eb04 0903 	add.w	r9, r4, r3
 8005274:	f000 fb5a 	bl	800592c <_sbrk_r>
 8005278:	4581      	cmp	r9, r0
 800527a:	d142      	bne.n	8005302 <_malloc_r+0xea>
 800527c:	6821      	ldr	r1, [r4, #0]
 800527e:	1a6d      	subs	r5, r5, r1
 8005280:	4629      	mov	r1, r5
 8005282:	4630      	mov	r0, r6
 8005284:	f7ff ffa6 	bl	80051d4 <sbrk_aligned>
 8005288:	3001      	adds	r0, #1
 800528a:	d03a      	beq.n	8005302 <_malloc_r+0xea>
 800528c:	6823      	ldr	r3, [r4, #0]
 800528e:	442b      	add	r3, r5
 8005290:	6023      	str	r3, [r4, #0]
 8005292:	f8d8 3000 	ldr.w	r3, [r8]
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	bb62      	cbnz	r2, 80052f4 <_malloc_r+0xdc>
 800529a:	f8c8 7000 	str.w	r7, [r8]
 800529e:	e00f      	b.n	80052c0 <_malloc_r+0xa8>
 80052a0:	6822      	ldr	r2, [r4, #0]
 80052a2:	1b52      	subs	r2, r2, r5
 80052a4:	d420      	bmi.n	80052e8 <_malloc_r+0xd0>
 80052a6:	2a0b      	cmp	r2, #11
 80052a8:	d917      	bls.n	80052da <_malloc_r+0xc2>
 80052aa:	1961      	adds	r1, r4, r5
 80052ac:	42a3      	cmp	r3, r4
 80052ae:	6025      	str	r5, [r4, #0]
 80052b0:	bf18      	it	ne
 80052b2:	6059      	strne	r1, [r3, #4]
 80052b4:	6863      	ldr	r3, [r4, #4]
 80052b6:	bf08      	it	eq
 80052b8:	f8c8 1000 	streq.w	r1, [r8]
 80052bc:	5162      	str	r2, [r4, r5]
 80052be:	604b      	str	r3, [r1, #4]
 80052c0:	4630      	mov	r0, r6
 80052c2:	f000 f82f 	bl	8005324 <__malloc_unlock>
 80052c6:	f104 000b 	add.w	r0, r4, #11
 80052ca:	1d23      	adds	r3, r4, #4
 80052cc:	f020 0007 	bic.w	r0, r0, #7
 80052d0:	1ac2      	subs	r2, r0, r3
 80052d2:	bf1c      	itt	ne
 80052d4:	1a1b      	subne	r3, r3, r0
 80052d6:	50a3      	strne	r3, [r4, r2]
 80052d8:	e7af      	b.n	800523a <_malloc_r+0x22>
 80052da:	6862      	ldr	r2, [r4, #4]
 80052dc:	42a3      	cmp	r3, r4
 80052de:	bf0c      	ite	eq
 80052e0:	f8c8 2000 	streq.w	r2, [r8]
 80052e4:	605a      	strne	r2, [r3, #4]
 80052e6:	e7eb      	b.n	80052c0 <_malloc_r+0xa8>
 80052e8:	4623      	mov	r3, r4
 80052ea:	6864      	ldr	r4, [r4, #4]
 80052ec:	e7ae      	b.n	800524c <_malloc_r+0x34>
 80052ee:	463c      	mov	r4, r7
 80052f0:	687f      	ldr	r7, [r7, #4]
 80052f2:	e7b6      	b.n	8005262 <_malloc_r+0x4a>
 80052f4:	461a      	mov	r2, r3
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	42a3      	cmp	r3, r4
 80052fa:	d1fb      	bne.n	80052f4 <_malloc_r+0xdc>
 80052fc:	2300      	movs	r3, #0
 80052fe:	6053      	str	r3, [r2, #4]
 8005300:	e7de      	b.n	80052c0 <_malloc_r+0xa8>
 8005302:	230c      	movs	r3, #12
 8005304:	6033      	str	r3, [r6, #0]
 8005306:	4630      	mov	r0, r6
 8005308:	f000 f80c 	bl	8005324 <__malloc_unlock>
 800530c:	e794      	b.n	8005238 <_malloc_r+0x20>
 800530e:	6005      	str	r5, [r0, #0]
 8005310:	e7d6      	b.n	80052c0 <_malloc_r+0xa8>
 8005312:	bf00      	nop
 8005314:	20000380 	.word	0x20000380

08005318 <__malloc_lock>:
 8005318:	4801      	ldr	r0, [pc, #4]	@ (8005320 <__malloc_lock+0x8>)
 800531a:	f7ff bf0f 	b.w	800513c <__retarget_lock_acquire_recursive>
 800531e:	bf00      	nop
 8005320:	20000378 	.word	0x20000378

08005324 <__malloc_unlock>:
 8005324:	4801      	ldr	r0, [pc, #4]	@ (800532c <__malloc_unlock+0x8>)
 8005326:	f7ff bf0a 	b.w	800513e <__retarget_lock_release_recursive>
 800532a:	bf00      	nop
 800532c:	20000378 	.word	0x20000378

08005330 <__ssputs_r>:
 8005330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005334:	688e      	ldr	r6, [r1, #8]
 8005336:	461f      	mov	r7, r3
 8005338:	42be      	cmp	r6, r7
 800533a:	680b      	ldr	r3, [r1, #0]
 800533c:	4682      	mov	sl, r0
 800533e:	460c      	mov	r4, r1
 8005340:	4690      	mov	r8, r2
 8005342:	d82d      	bhi.n	80053a0 <__ssputs_r+0x70>
 8005344:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005348:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800534c:	d026      	beq.n	800539c <__ssputs_r+0x6c>
 800534e:	6965      	ldr	r5, [r4, #20]
 8005350:	6909      	ldr	r1, [r1, #16]
 8005352:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005356:	eba3 0901 	sub.w	r9, r3, r1
 800535a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800535e:	1c7b      	adds	r3, r7, #1
 8005360:	444b      	add	r3, r9
 8005362:	106d      	asrs	r5, r5, #1
 8005364:	429d      	cmp	r5, r3
 8005366:	bf38      	it	cc
 8005368:	461d      	movcc	r5, r3
 800536a:	0553      	lsls	r3, r2, #21
 800536c:	d527      	bpl.n	80053be <__ssputs_r+0x8e>
 800536e:	4629      	mov	r1, r5
 8005370:	f7ff ff52 	bl	8005218 <_malloc_r>
 8005374:	4606      	mov	r6, r0
 8005376:	b360      	cbz	r0, 80053d2 <__ssputs_r+0xa2>
 8005378:	6921      	ldr	r1, [r4, #16]
 800537a:	464a      	mov	r2, r9
 800537c:	f000 fae6 	bl	800594c <memcpy>
 8005380:	89a3      	ldrh	r3, [r4, #12]
 8005382:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005386:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800538a:	81a3      	strh	r3, [r4, #12]
 800538c:	6126      	str	r6, [r4, #16]
 800538e:	6165      	str	r5, [r4, #20]
 8005390:	444e      	add	r6, r9
 8005392:	eba5 0509 	sub.w	r5, r5, r9
 8005396:	6026      	str	r6, [r4, #0]
 8005398:	60a5      	str	r5, [r4, #8]
 800539a:	463e      	mov	r6, r7
 800539c:	42be      	cmp	r6, r7
 800539e:	d900      	bls.n	80053a2 <__ssputs_r+0x72>
 80053a0:	463e      	mov	r6, r7
 80053a2:	6820      	ldr	r0, [r4, #0]
 80053a4:	4632      	mov	r2, r6
 80053a6:	4641      	mov	r1, r8
 80053a8:	f000 faa6 	bl	80058f8 <memmove>
 80053ac:	68a3      	ldr	r3, [r4, #8]
 80053ae:	1b9b      	subs	r3, r3, r6
 80053b0:	60a3      	str	r3, [r4, #8]
 80053b2:	6823      	ldr	r3, [r4, #0]
 80053b4:	4433      	add	r3, r6
 80053b6:	6023      	str	r3, [r4, #0]
 80053b8:	2000      	movs	r0, #0
 80053ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053be:	462a      	mov	r2, r5
 80053c0:	f000 fad2 	bl	8005968 <_realloc_r>
 80053c4:	4606      	mov	r6, r0
 80053c6:	2800      	cmp	r0, #0
 80053c8:	d1e0      	bne.n	800538c <__ssputs_r+0x5c>
 80053ca:	6921      	ldr	r1, [r4, #16]
 80053cc:	4650      	mov	r0, sl
 80053ce:	f7ff feb7 	bl	8005140 <_free_r>
 80053d2:	230c      	movs	r3, #12
 80053d4:	f8ca 3000 	str.w	r3, [sl]
 80053d8:	89a3      	ldrh	r3, [r4, #12]
 80053da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053de:	81a3      	strh	r3, [r4, #12]
 80053e0:	f04f 30ff 	mov.w	r0, #4294967295
 80053e4:	e7e9      	b.n	80053ba <__ssputs_r+0x8a>
	...

080053e8 <_svfiprintf_r>:
 80053e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ec:	4698      	mov	r8, r3
 80053ee:	898b      	ldrh	r3, [r1, #12]
 80053f0:	061b      	lsls	r3, r3, #24
 80053f2:	b09d      	sub	sp, #116	@ 0x74
 80053f4:	4607      	mov	r7, r0
 80053f6:	460d      	mov	r5, r1
 80053f8:	4614      	mov	r4, r2
 80053fa:	d510      	bpl.n	800541e <_svfiprintf_r+0x36>
 80053fc:	690b      	ldr	r3, [r1, #16]
 80053fe:	b973      	cbnz	r3, 800541e <_svfiprintf_r+0x36>
 8005400:	2140      	movs	r1, #64	@ 0x40
 8005402:	f7ff ff09 	bl	8005218 <_malloc_r>
 8005406:	6028      	str	r0, [r5, #0]
 8005408:	6128      	str	r0, [r5, #16]
 800540a:	b930      	cbnz	r0, 800541a <_svfiprintf_r+0x32>
 800540c:	230c      	movs	r3, #12
 800540e:	603b      	str	r3, [r7, #0]
 8005410:	f04f 30ff 	mov.w	r0, #4294967295
 8005414:	b01d      	add	sp, #116	@ 0x74
 8005416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800541a:	2340      	movs	r3, #64	@ 0x40
 800541c:	616b      	str	r3, [r5, #20]
 800541e:	2300      	movs	r3, #0
 8005420:	9309      	str	r3, [sp, #36]	@ 0x24
 8005422:	2320      	movs	r3, #32
 8005424:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005428:	f8cd 800c 	str.w	r8, [sp, #12]
 800542c:	2330      	movs	r3, #48	@ 0x30
 800542e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80055cc <_svfiprintf_r+0x1e4>
 8005432:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005436:	f04f 0901 	mov.w	r9, #1
 800543a:	4623      	mov	r3, r4
 800543c:	469a      	mov	sl, r3
 800543e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005442:	b10a      	cbz	r2, 8005448 <_svfiprintf_r+0x60>
 8005444:	2a25      	cmp	r2, #37	@ 0x25
 8005446:	d1f9      	bne.n	800543c <_svfiprintf_r+0x54>
 8005448:	ebba 0b04 	subs.w	fp, sl, r4
 800544c:	d00b      	beq.n	8005466 <_svfiprintf_r+0x7e>
 800544e:	465b      	mov	r3, fp
 8005450:	4622      	mov	r2, r4
 8005452:	4629      	mov	r1, r5
 8005454:	4638      	mov	r0, r7
 8005456:	f7ff ff6b 	bl	8005330 <__ssputs_r>
 800545a:	3001      	adds	r0, #1
 800545c:	f000 80a7 	beq.w	80055ae <_svfiprintf_r+0x1c6>
 8005460:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005462:	445a      	add	r2, fp
 8005464:	9209      	str	r2, [sp, #36]	@ 0x24
 8005466:	f89a 3000 	ldrb.w	r3, [sl]
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 809f 	beq.w	80055ae <_svfiprintf_r+0x1c6>
 8005470:	2300      	movs	r3, #0
 8005472:	f04f 32ff 	mov.w	r2, #4294967295
 8005476:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800547a:	f10a 0a01 	add.w	sl, sl, #1
 800547e:	9304      	str	r3, [sp, #16]
 8005480:	9307      	str	r3, [sp, #28]
 8005482:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005486:	931a      	str	r3, [sp, #104]	@ 0x68
 8005488:	4654      	mov	r4, sl
 800548a:	2205      	movs	r2, #5
 800548c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005490:	484e      	ldr	r0, [pc, #312]	@ (80055cc <_svfiprintf_r+0x1e4>)
 8005492:	f7fa fead 	bl	80001f0 <memchr>
 8005496:	9a04      	ldr	r2, [sp, #16]
 8005498:	b9d8      	cbnz	r0, 80054d2 <_svfiprintf_r+0xea>
 800549a:	06d0      	lsls	r0, r2, #27
 800549c:	bf44      	itt	mi
 800549e:	2320      	movmi	r3, #32
 80054a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80054a4:	0711      	lsls	r1, r2, #28
 80054a6:	bf44      	itt	mi
 80054a8:	232b      	movmi	r3, #43	@ 0x2b
 80054aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80054ae:	f89a 3000 	ldrb.w	r3, [sl]
 80054b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80054b4:	d015      	beq.n	80054e2 <_svfiprintf_r+0xfa>
 80054b6:	9a07      	ldr	r2, [sp, #28]
 80054b8:	4654      	mov	r4, sl
 80054ba:	2000      	movs	r0, #0
 80054bc:	f04f 0c0a 	mov.w	ip, #10
 80054c0:	4621      	mov	r1, r4
 80054c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054c6:	3b30      	subs	r3, #48	@ 0x30
 80054c8:	2b09      	cmp	r3, #9
 80054ca:	d94b      	bls.n	8005564 <_svfiprintf_r+0x17c>
 80054cc:	b1b0      	cbz	r0, 80054fc <_svfiprintf_r+0x114>
 80054ce:	9207      	str	r2, [sp, #28]
 80054d0:	e014      	b.n	80054fc <_svfiprintf_r+0x114>
 80054d2:	eba0 0308 	sub.w	r3, r0, r8
 80054d6:	fa09 f303 	lsl.w	r3, r9, r3
 80054da:	4313      	orrs	r3, r2
 80054dc:	9304      	str	r3, [sp, #16]
 80054de:	46a2      	mov	sl, r4
 80054e0:	e7d2      	b.n	8005488 <_svfiprintf_r+0xa0>
 80054e2:	9b03      	ldr	r3, [sp, #12]
 80054e4:	1d19      	adds	r1, r3, #4
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	9103      	str	r1, [sp, #12]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	bfbb      	ittet	lt
 80054ee:	425b      	neglt	r3, r3
 80054f0:	f042 0202 	orrlt.w	r2, r2, #2
 80054f4:	9307      	strge	r3, [sp, #28]
 80054f6:	9307      	strlt	r3, [sp, #28]
 80054f8:	bfb8      	it	lt
 80054fa:	9204      	strlt	r2, [sp, #16]
 80054fc:	7823      	ldrb	r3, [r4, #0]
 80054fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8005500:	d10a      	bne.n	8005518 <_svfiprintf_r+0x130>
 8005502:	7863      	ldrb	r3, [r4, #1]
 8005504:	2b2a      	cmp	r3, #42	@ 0x2a
 8005506:	d132      	bne.n	800556e <_svfiprintf_r+0x186>
 8005508:	9b03      	ldr	r3, [sp, #12]
 800550a:	1d1a      	adds	r2, r3, #4
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	9203      	str	r2, [sp, #12]
 8005510:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005514:	3402      	adds	r4, #2
 8005516:	9305      	str	r3, [sp, #20]
 8005518:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80055dc <_svfiprintf_r+0x1f4>
 800551c:	7821      	ldrb	r1, [r4, #0]
 800551e:	2203      	movs	r2, #3
 8005520:	4650      	mov	r0, sl
 8005522:	f7fa fe65 	bl	80001f0 <memchr>
 8005526:	b138      	cbz	r0, 8005538 <_svfiprintf_r+0x150>
 8005528:	9b04      	ldr	r3, [sp, #16]
 800552a:	eba0 000a 	sub.w	r0, r0, sl
 800552e:	2240      	movs	r2, #64	@ 0x40
 8005530:	4082      	lsls	r2, r0
 8005532:	4313      	orrs	r3, r2
 8005534:	3401      	adds	r4, #1
 8005536:	9304      	str	r3, [sp, #16]
 8005538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800553c:	4824      	ldr	r0, [pc, #144]	@ (80055d0 <_svfiprintf_r+0x1e8>)
 800553e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005542:	2206      	movs	r2, #6
 8005544:	f7fa fe54 	bl	80001f0 <memchr>
 8005548:	2800      	cmp	r0, #0
 800554a:	d036      	beq.n	80055ba <_svfiprintf_r+0x1d2>
 800554c:	4b21      	ldr	r3, [pc, #132]	@ (80055d4 <_svfiprintf_r+0x1ec>)
 800554e:	bb1b      	cbnz	r3, 8005598 <_svfiprintf_r+0x1b0>
 8005550:	9b03      	ldr	r3, [sp, #12]
 8005552:	3307      	adds	r3, #7
 8005554:	f023 0307 	bic.w	r3, r3, #7
 8005558:	3308      	adds	r3, #8
 800555a:	9303      	str	r3, [sp, #12]
 800555c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800555e:	4433      	add	r3, r6
 8005560:	9309      	str	r3, [sp, #36]	@ 0x24
 8005562:	e76a      	b.n	800543a <_svfiprintf_r+0x52>
 8005564:	fb0c 3202 	mla	r2, ip, r2, r3
 8005568:	460c      	mov	r4, r1
 800556a:	2001      	movs	r0, #1
 800556c:	e7a8      	b.n	80054c0 <_svfiprintf_r+0xd8>
 800556e:	2300      	movs	r3, #0
 8005570:	3401      	adds	r4, #1
 8005572:	9305      	str	r3, [sp, #20]
 8005574:	4619      	mov	r1, r3
 8005576:	f04f 0c0a 	mov.w	ip, #10
 800557a:	4620      	mov	r0, r4
 800557c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005580:	3a30      	subs	r2, #48	@ 0x30
 8005582:	2a09      	cmp	r2, #9
 8005584:	d903      	bls.n	800558e <_svfiprintf_r+0x1a6>
 8005586:	2b00      	cmp	r3, #0
 8005588:	d0c6      	beq.n	8005518 <_svfiprintf_r+0x130>
 800558a:	9105      	str	r1, [sp, #20]
 800558c:	e7c4      	b.n	8005518 <_svfiprintf_r+0x130>
 800558e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005592:	4604      	mov	r4, r0
 8005594:	2301      	movs	r3, #1
 8005596:	e7f0      	b.n	800557a <_svfiprintf_r+0x192>
 8005598:	ab03      	add	r3, sp, #12
 800559a:	9300      	str	r3, [sp, #0]
 800559c:	462a      	mov	r2, r5
 800559e:	4b0e      	ldr	r3, [pc, #56]	@ (80055d8 <_svfiprintf_r+0x1f0>)
 80055a0:	a904      	add	r1, sp, #16
 80055a2:	4638      	mov	r0, r7
 80055a4:	f3af 8000 	nop.w
 80055a8:	1c42      	adds	r2, r0, #1
 80055aa:	4606      	mov	r6, r0
 80055ac:	d1d6      	bne.n	800555c <_svfiprintf_r+0x174>
 80055ae:	89ab      	ldrh	r3, [r5, #12]
 80055b0:	065b      	lsls	r3, r3, #25
 80055b2:	f53f af2d 	bmi.w	8005410 <_svfiprintf_r+0x28>
 80055b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80055b8:	e72c      	b.n	8005414 <_svfiprintf_r+0x2c>
 80055ba:	ab03      	add	r3, sp, #12
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	462a      	mov	r2, r5
 80055c0:	4b05      	ldr	r3, [pc, #20]	@ (80055d8 <_svfiprintf_r+0x1f0>)
 80055c2:	a904      	add	r1, sp, #16
 80055c4:	4638      	mov	r0, r7
 80055c6:	f000 f879 	bl	80056bc <_printf_i>
 80055ca:	e7ed      	b.n	80055a8 <_svfiprintf_r+0x1c0>
 80055cc:	08005a84 	.word	0x08005a84
 80055d0:	08005a8e 	.word	0x08005a8e
 80055d4:	00000000 	.word	0x00000000
 80055d8:	08005331 	.word	0x08005331
 80055dc:	08005a8a 	.word	0x08005a8a

080055e0 <_printf_common>:
 80055e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055e4:	4616      	mov	r6, r2
 80055e6:	4698      	mov	r8, r3
 80055e8:	688a      	ldr	r2, [r1, #8]
 80055ea:	690b      	ldr	r3, [r1, #16]
 80055ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80055f0:	4293      	cmp	r3, r2
 80055f2:	bfb8      	it	lt
 80055f4:	4613      	movlt	r3, r2
 80055f6:	6033      	str	r3, [r6, #0]
 80055f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80055fc:	4607      	mov	r7, r0
 80055fe:	460c      	mov	r4, r1
 8005600:	b10a      	cbz	r2, 8005606 <_printf_common+0x26>
 8005602:	3301      	adds	r3, #1
 8005604:	6033      	str	r3, [r6, #0]
 8005606:	6823      	ldr	r3, [r4, #0]
 8005608:	0699      	lsls	r1, r3, #26
 800560a:	bf42      	ittt	mi
 800560c:	6833      	ldrmi	r3, [r6, #0]
 800560e:	3302      	addmi	r3, #2
 8005610:	6033      	strmi	r3, [r6, #0]
 8005612:	6825      	ldr	r5, [r4, #0]
 8005614:	f015 0506 	ands.w	r5, r5, #6
 8005618:	d106      	bne.n	8005628 <_printf_common+0x48>
 800561a:	f104 0a19 	add.w	sl, r4, #25
 800561e:	68e3      	ldr	r3, [r4, #12]
 8005620:	6832      	ldr	r2, [r6, #0]
 8005622:	1a9b      	subs	r3, r3, r2
 8005624:	42ab      	cmp	r3, r5
 8005626:	dc26      	bgt.n	8005676 <_printf_common+0x96>
 8005628:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800562c:	6822      	ldr	r2, [r4, #0]
 800562e:	3b00      	subs	r3, #0
 8005630:	bf18      	it	ne
 8005632:	2301      	movne	r3, #1
 8005634:	0692      	lsls	r2, r2, #26
 8005636:	d42b      	bmi.n	8005690 <_printf_common+0xb0>
 8005638:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800563c:	4641      	mov	r1, r8
 800563e:	4638      	mov	r0, r7
 8005640:	47c8      	blx	r9
 8005642:	3001      	adds	r0, #1
 8005644:	d01e      	beq.n	8005684 <_printf_common+0xa4>
 8005646:	6823      	ldr	r3, [r4, #0]
 8005648:	6922      	ldr	r2, [r4, #16]
 800564a:	f003 0306 	and.w	r3, r3, #6
 800564e:	2b04      	cmp	r3, #4
 8005650:	bf02      	ittt	eq
 8005652:	68e5      	ldreq	r5, [r4, #12]
 8005654:	6833      	ldreq	r3, [r6, #0]
 8005656:	1aed      	subeq	r5, r5, r3
 8005658:	68a3      	ldr	r3, [r4, #8]
 800565a:	bf0c      	ite	eq
 800565c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005660:	2500      	movne	r5, #0
 8005662:	4293      	cmp	r3, r2
 8005664:	bfc4      	itt	gt
 8005666:	1a9b      	subgt	r3, r3, r2
 8005668:	18ed      	addgt	r5, r5, r3
 800566a:	2600      	movs	r6, #0
 800566c:	341a      	adds	r4, #26
 800566e:	42b5      	cmp	r5, r6
 8005670:	d11a      	bne.n	80056a8 <_printf_common+0xc8>
 8005672:	2000      	movs	r0, #0
 8005674:	e008      	b.n	8005688 <_printf_common+0xa8>
 8005676:	2301      	movs	r3, #1
 8005678:	4652      	mov	r2, sl
 800567a:	4641      	mov	r1, r8
 800567c:	4638      	mov	r0, r7
 800567e:	47c8      	blx	r9
 8005680:	3001      	adds	r0, #1
 8005682:	d103      	bne.n	800568c <_printf_common+0xac>
 8005684:	f04f 30ff 	mov.w	r0, #4294967295
 8005688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800568c:	3501      	adds	r5, #1
 800568e:	e7c6      	b.n	800561e <_printf_common+0x3e>
 8005690:	18e1      	adds	r1, r4, r3
 8005692:	1c5a      	adds	r2, r3, #1
 8005694:	2030      	movs	r0, #48	@ 0x30
 8005696:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800569a:	4422      	add	r2, r4
 800569c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80056a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80056a4:	3302      	adds	r3, #2
 80056a6:	e7c7      	b.n	8005638 <_printf_common+0x58>
 80056a8:	2301      	movs	r3, #1
 80056aa:	4622      	mov	r2, r4
 80056ac:	4641      	mov	r1, r8
 80056ae:	4638      	mov	r0, r7
 80056b0:	47c8      	blx	r9
 80056b2:	3001      	adds	r0, #1
 80056b4:	d0e6      	beq.n	8005684 <_printf_common+0xa4>
 80056b6:	3601      	adds	r6, #1
 80056b8:	e7d9      	b.n	800566e <_printf_common+0x8e>
	...

080056bc <_printf_i>:
 80056bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056c0:	7e0f      	ldrb	r7, [r1, #24]
 80056c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80056c4:	2f78      	cmp	r7, #120	@ 0x78
 80056c6:	4691      	mov	r9, r2
 80056c8:	4680      	mov	r8, r0
 80056ca:	460c      	mov	r4, r1
 80056cc:	469a      	mov	sl, r3
 80056ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80056d2:	d807      	bhi.n	80056e4 <_printf_i+0x28>
 80056d4:	2f62      	cmp	r7, #98	@ 0x62
 80056d6:	d80a      	bhi.n	80056ee <_printf_i+0x32>
 80056d8:	2f00      	cmp	r7, #0
 80056da:	f000 80d1 	beq.w	8005880 <_printf_i+0x1c4>
 80056de:	2f58      	cmp	r7, #88	@ 0x58
 80056e0:	f000 80b8 	beq.w	8005854 <_printf_i+0x198>
 80056e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80056ec:	e03a      	b.n	8005764 <_printf_i+0xa8>
 80056ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80056f2:	2b15      	cmp	r3, #21
 80056f4:	d8f6      	bhi.n	80056e4 <_printf_i+0x28>
 80056f6:	a101      	add	r1, pc, #4	@ (adr r1, 80056fc <_printf_i+0x40>)
 80056f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056fc:	08005755 	.word	0x08005755
 8005700:	08005769 	.word	0x08005769
 8005704:	080056e5 	.word	0x080056e5
 8005708:	080056e5 	.word	0x080056e5
 800570c:	080056e5 	.word	0x080056e5
 8005710:	080056e5 	.word	0x080056e5
 8005714:	08005769 	.word	0x08005769
 8005718:	080056e5 	.word	0x080056e5
 800571c:	080056e5 	.word	0x080056e5
 8005720:	080056e5 	.word	0x080056e5
 8005724:	080056e5 	.word	0x080056e5
 8005728:	08005867 	.word	0x08005867
 800572c:	08005793 	.word	0x08005793
 8005730:	08005821 	.word	0x08005821
 8005734:	080056e5 	.word	0x080056e5
 8005738:	080056e5 	.word	0x080056e5
 800573c:	08005889 	.word	0x08005889
 8005740:	080056e5 	.word	0x080056e5
 8005744:	08005793 	.word	0x08005793
 8005748:	080056e5 	.word	0x080056e5
 800574c:	080056e5 	.word	0x080056e5
 8005750:	08005829 	.word	0x08005829
 8005754:	6833      	ldr	r3, [r6, #0]
 8005756:	1d1a      	adds	r2, r3, #4
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	6032      	str	r2, [r6, #0]
 800575c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005760:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005764:	2301      	movs	r3, #1
 8005766:	e09c      	b.n	80058a2 <_printf_i+0x1e6>
 8005768:	6833      	ldr	r3, [r6, #0]
 800576a:	6820      	ldr	r0, [r4, #0]
 800576c:	1d19      	adds	r1, r3, #4
 800576e:	6031      	str	r1, [r6, #0]
 8005770:	0606      	lsls	r6, r0, #24
 8005772:	d501      	bpl.n	8005778 <_printf_i+0xbc>
 8005774:	681d      	ldr	r5, [r3, #0]
 8005776:	e003      	b.n	8005780 <_printf_i+0xc4>
 8005778:	0645      	lsls	r5, r0, #25
 800577a:	d5fb      	bpl.n	8005774 <_printf_i+0xb8>
 800577c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005780:	2d00      	cmp	r5, #0
 8005782:	da03      	bge.n	800578c <_printf_i+0xd0>
 8005784:	232d      	movs	r3, #45	@ 0x2d
 8005786:	426d      	negs	r5, r5
 8005788:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800578c:	4858      	ldr	r0, [pc, #352]	@ (80058f0 <_printf_i+0x234>)
 800578e:	230a      	movs	r3, #10
 8005790:	e011      	b.n	80057b6 <_printf_i+0xfa>
 8005792:	6821      	ldr	r1, [r4, #0]
 8005794:	6833      	ldr	r3, [r6, #0]
 8005796:	0608      	lsls	r0, r1, #24
 8005798:	f853 5b04 	ldr.w	r5, [r3], #4
 800579c:	d402      	bmi.n	80057a4 <_printf_i+0xe8>
 800579e:	0649      	lsls	r1, r1, #25
 80057a0:	bf48      	it	mi
 80057a2:	b2ad      	uxthmi	r5, r5
 80057a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80057a6:	4852      	ldr	r0, [pc, #328]	@ (80058f0 <_printf_i+0x234>)
 80057a8:	6033      	str	r3, [r6, #0]
 80057aa:	bf14      	ite	ne
 80057ac:	230a      	movne	r3, #10
 80057ae:	2308      	moveq	r3, #8
 80057b0:	2100      	movs	r1, #0
 80057b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80057b6:	6866      	ldr	r6, [r4, #4]
 80057b8:	60a6      	str	r6, [r4, #8]
 80057ba:	2e00      	cmp	r6, #0
 80057bc:	db05      	blt.n	80057ca <_printf_i+0x10e>
 80057be:	6821      	ldr	r1, [r4, #0]
 80057c0:	432e      	orrs	r6, r5
 80057c2:	f021 0104 	bic.w	r1, r1, #4
 80057c6:	6021      	str	r1, [r4, #0]
 80057c8:	d04b      	beq.n	8005862 <_printf_i+0x1a6>
 80057ca:	4616      	mov	r6, r2
 80057cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80057d0:	fb03 5711 	mls	r7, r3, r1, r5
 80057d4:	5dc7      	ldrb	r7, [r0, r7]
 80057d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80057da:	462f      	mov	r7, r5
 80057dc:	42bb      	cmp	r3, r7
 80057de:	460d      	mov	r5, r1
 80057e0:	d9f4      	bls.n	80057cc <_printf_i+0x110>
 80057e2:	2b08      	cmp	r3, #8
 80057e4:	d10b      	bne.n	80057fe <_printf_i+0x142>
 80057e6:	6823      	ldr	r3, [r4, #0]
 80057e8:	07df      	lsls	r7, r3, #31
 80057ea:	d508      	bpl.n	80057fe <_printf_i+0x142>
 80057ec:	6923      	ldr	r3, [r4, #16]
 80057ee:	6861      	ldr	r1, [r4, #4]
 80057f0:	4299      	cmp	r1, r3
 80057f2:	bfde      	ittt	le
 80057f4:	2330      	movle	r3, #48	@ 0x30
 80057f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80057fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80057fe:	1b92      	subs	r2, r2, r6
 8005800:	6122      	str	r2, [r4, #16]
 8005802:	f8cd a000 	str.w	sl, [sp]
 8005806:	464b      	mov	r3, r9
 8005808:	aa03      	add	r2, sp, #12
 800580a:	4621      	mov	r1, r4
 800580c:	4640      	mov	r0, r8
 800580e:	f7ff fee7 	bl	80055e0 <_printf_common>
 8005812:	3001      	adds	r0, #1
 8005814:	d14a      	bne.n	80058ac <_printf_i+0x1f0>
 8005816:	f04f 30ff 	mov.w	r0, #4294967295
 800581a:	b004      	add	sp, #16
 800581c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005820:	6823      	ldr	r3, [r4, #0]
 8005822:	f043 0320 	orr.w	r3, r3, #32
 8005826:	6023      	str	r3, [r4, #0]
 8005828:	4832      	ldr	r0, [pc, #200]	@ (80058f4 <_printf_i+0x238>)
 800582a:	2778      	movs	r7, #120	@ 0x78
 800582c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005830:	6823      	ldr	r3, [r4, #0]
 8005832:	6831      	ldr	r1, [r6, #0]
 8005834:	061f      	lsls	r7, r3, #24
 8005836:	f851 5b04 	ldr.w	r5, [r1], #4
 800583a:	d402      	bmi.n	8005842 <_printf_i+0x186>
 800583c:	065f      	lsls	r7, r3, #25
 800583e:	bf48      	it	mi
 8005840:	b2ad      	uxthmi	r5, r5
 8005842:	6031      	str	r1, [r6, #0]
 8005844:	07d9      	lsls	r1, r3, #31
 8005846:	bf44      	itt	mi
 8005848:	f043 0320 	orrmi.w	r3, r3, #32
 800584c:	6023      	strmi	r3, [r4, #0]
 800584e:	b11d      	cbz	r5, 8005858 <_printf_i+0x19c>
 8005850:	2310      	movs	r3, #16
 8005852:	e7ad      	b.n	80057b0 <_printf_i+0xf4>
 8005854:	4826      	ldr	r0, [pc, #152]	@ (80058f0 <_printf_i+0x234>)
 8005856:	e7e9      	b.n	800582c <_printf_i+0x170>
 8005858:	6823      	ldr	r3, [r4, #0]
 800585a:	f023 0320 	bic.w	r3, r3, #32
 800585e:	6023      	str	r3, [r4, #0]
 8005860:	e7f6      	b.n	8005850 <_printf_i+0x194>
 8005862:	4616      	mov	r6, r2
 8005864:	e7bd      	b.n	80057e2 <_printf_i+0x126>
 8005866:	6833      	ldr	r3, [r6, #0]
 8005868:	6825      	ldr	r5, [r4, #0]
 800586a:	6961      	ldr	r1, [r4, #20]
 800586c:	1d18      	adds	r0, r3, #4
 800586e:	6030      	str	r0, [r6, #0]
 8005870:	062e      	lsls	r6, r5, #24
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	d501      	bpl.n	800587a <_printf_i+0x1be>
 8005876:	6019      	str	r1, [r3, #0]
 8005878:	e002      	b.n	8005880 <_printf_i+0x1c4>
 800587a:	0668      	lsls	r0, r5, #25
 800587c:	d5fb      	bpl.n	8005876 <_printf_i+0x1ba>
 800587e:	8019      	strh	r1, [r3, #0]
 8005880:	2300      	movs	r3, #0
 8005882:	6123      	str	r3, [r4, #16]
 8005884:	4616      	mov	r6, r2
 8005886:	e7bc      	b.n	8005802 <_printf_i+0x146>
 8005888:	6833      	ldr	r3, [r6, #0]
 800588a:	1d1a      	adds	r2, r3, #4
 800588c:	6032      	str	r2, [r6, #0]
 800588e:	681e      	ldr	r6, [r3, #0]
 8005890:	6862      	ldr	r2, [r4, #4]
 8005892:	2100      	movs	r1, #0
 8005894:	4630      	mov	r0, r6
 8005896:	f7fa fcab 	bl	80001f0 <memchr>
 800589a:	b108      	cbz	r0, 80058a0 <_printf_i+0x1e4>
 800589c:	1b80      	subs	r0, r0, r6
 800589e:	6060      	str	r0, [r4, #4]
 80058a0:	6863      	ldr	r3, [r4, #4]
 80058a2:	6123      	str	r3, [r4, #16]
 80058a4:	2300      	movs	r3, #0
 80058a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058aa:	e7aa      	b.n	8005802 <_printf_i+0x146>
 80058ac:	6923      	ldr	r3, [r4, #16]
 80058ae:	4632      	mov	r2, r6
 80058b0:	4649      	mov	r1, r9
 80058b2:	4640      	mov	r0, r8
 80058b4:	47d0      	blx	sl
 80058b6:	3001      	adds	r0, #1
 80058b8:	d0ad      	beq.n	8005816 <_printf_i+0x15a>
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	079b      	lsls	r3, r3, #30
 80058be:	d413      	bmi.n	80058e8 <_printf_i+0x22c>
 80058c0:	68e0      	ldr	r0, [r4, #12]
 80058c2:	9b03      	ldr	r3, [sp, #12]
 80058c4:	4298      	cmp	r0, r3
 80058c6:	bfb8      	it	lt
 80058c8:	4618      	movlt	r0, r3
 80058ca:	e7a6      	b.n	800581a <_printf_i+0x15e>
 80058cc:	2301      	movs	r3, #1
 80058ce:	4632      	mov	r2, r6
 80058d0:	4649      	mov	r1, r9
 80058d2:	4640      	mov	r0, r8
 80058d4:	47d0      	blx	sl
 80058d6:	3001      	adds	r0, #1
 80058d8:	d09d      	beq.n	8005816 <_printf_i+0x15a>
 80058da:	3501      	adds	r5, #1
 80058dc:	68e3      	ldr	r3, [r4, #12]
 80058de:	9903      	ldr	r1, [sp, #12]
 80058e0:	1a5b      	subs	r3, r3, r1
 80058e2:	42ab      	cmp	r3, r5
 80058e4:	dcf2      	bgt.n	80058cc <_printf_i+0x210>
 80058e6:	e7eb      	b.n	80058c0 <_printf_i+0x204>
 80058e8:	2500      	movs	r5, #0
 80058ea:	f104 0619 	add.w	r6, r4, #25
 80058ee:	e7f5      	b.n	80058dc <_printf_i+0x220>
 80058f0:	08005a95 	.word	0x08005a95
 80058f4:	08005aa6 	.word	0x08005aa6

080058f8 <memmove>:
 80058f8:	4288      	cmp	r0, r1
 80058fa:	b510      	push	{r4, lr}
 80058fc:	eb01 0402 	add.w	r4, r1, r2
 8005900:	d902      	bls.n	8005908 <memmove+0x10>
 8005902:	4284      	cmp	r4, r0
 8005904:	4623      	mov	r3, r4
 8005906:	d807      	bhi.n	8005918 <memmove+0x20>
 8005908:	1e43      	subs	r3, r0, #1
 800590a:	42a1      	cmp	r1, r4
 800590c:	d008      	beq.n	8005920 <memmove+0x28>
 800590e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005912:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005916:	e7f8      	b.n	800590a <memmove+0x12>
 8005918:	4402      	add	r2, r0
 800591a:	4601      	mov	r1, r0
 800591c:	428a      	cmp	r2, r1
 800591e:	d100      	bne.n	8005922 <memmove+0x2a>
 8005920:	bd10      	pop	{r4, pc}
 8005922:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005926:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800592a:	e7f7      	b.n	800591c <memmove+0x24>

0800592c <_sbrk_r>:
 800592c:	b538      	push	{r3, r4, r5, lr}
 800592e:	4d06      	ldr	r5, [pc, #24]	@ (8005948 <_sbrk_r+0x1c>)
 8005930:	2300      	movs	r3, #0
 8005932:	4604      	mov	r4, r0
 8005934:	4608      	mov	r0, r1
 8005936:	602b      	str	r3, [r5, #0]
 8005938:	f7fb f84c 	bl	80009d4 <_sbrk>
 800593c:	1c43      	adds	r3, r0, #1
 800593e:	d102      	bne.n	8005946 <_sbrk_r+0x1a>
 8005940:	682b      	ldr	r3, [r5, #0]
 8005942:	b103      	cbz	r3, 8005946 <_sbrk_r+0x1a>
 8005944:	6023      	str	r3, [r4, #0]
 8005946:	bd38      	pop	{r3, r4, r5, pc}
 8005948:	20000374 	.word	0x20000374

0800594c <memcpy>:
 800594c:	440a      	add	r2, r1
 800594e:	4291      	cmp	r1, r2
 8005950:	f100 33ff 	add.w	r3, r0, #4294967295
 8005954:	d100      	bne.n	8005958 <memcpy+0xc>
 8005956:	4770      	bx	lr
 8005958:	b510      	push	{r4, lr}
 800595a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800595e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005962:	4291      	cmp	r1, r2
 8005964:	d1f9      	bne.n	800595a <memcpy+0xe>
 8005966:	bd10      	pop	{r4, pc}

08005968 <_realloc_r>:
 8005968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800596c:	4607      	mov	r7, r0
 800596e:	4614      	mov	r4, r2
 8005970:	460d      	mov	r5, r1
 8005972:	b921      	cbnz	r1, 800597e <_realloc_r+0x16>
 8005974:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005978:	4611      	mov	r1, r2
 800597a:	f7ff bc4d 	b.w	8005218 <_malloc_r>
 800597e:	b92a      	cbnz	r2, 800598c <_realloc_r+0x24>
 8005980:	f7ff fbde 	bl	8005140 <_free_r>
 8005984:	4625      	mov	r5, r4
 8005986:	4628      	mov	r0, r5
 8005988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800598c:	f000 f81a 	bl	80059c4 <_malloc_usable_size_r>
 8005990:	4284      	cmp	r4, r0
 8005992:	4606      	mov	r6, r0
 8005994:	d802      	bhi.n	800599c <_realloc_r+0x34>
 8005996:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800599a:	d8f4      	bhi.n	8005986 <_realloc_r+0x1e>
 800599c:	4621      	mov	r1, r4
 800599e:	4638      	mov	r0, r7
 80059a0:	f7ff fc3a 	bl	8005218 <_malloc_r>
 80059a4:	4680      	mov	r8, r0
 80059a6:	b908      	cbnz	r0, 80059ac <_realloc_r+0x44>
 80059a8:	4645      	mov	r5, r8
 80059aa:	e7ec      	b.n	8005986 <_realloc_r+0x1e>
 80059ac:	42b4      	cmp	r4, r6
 80059ae:	4622      	mov	r2, r4
 80059b0:	4629      	mov	r1, r5
 80059b2:	bf28      	it	cs
 80059b4:	4632      	movcs	r2, r6
 80059b6:	f7ff ffc9 	bl	800594c <memcpy>
 80059ba:	4629      	mov	r1, r5
 80059bc:	4638      	mov	r0, r7
 80059be:	f7ff fbbf 	bl	8005140 <_free_r>
 80059c2:	e7f1      	b.n	80059a8 <_realloc_r+0x40>

080059c4 <_malloc_usable_size_r>:
 80059c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059c8:	1f18      	subs	r0, r3, #4
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	bfbc      	itt	lt
 80059ce:	580b      	ldrlt	r3, [r1, r0]
 80059d0:	18c0      	addlt	r0, r0, r3
 80059d2:	4770      	bx	lr

080059d4 <_init>:
 80059d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059d6:	bf00      	nop
 80059d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059da:	bc08      	pop	{r3}
 80059dc:	469e      	mov	lr, r3
 80059de:	4770      	bx	lr

080059e0 <_fini>:
 80059e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059e2:	bf00      	nop
 80059e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059e6:	bc08      	pop	{r3}
 80059e8:	469e      	mov	lr, r3
 80059ea:	4770      	bx	lr
