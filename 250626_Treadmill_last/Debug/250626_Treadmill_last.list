
250626_Treadmill_last.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006384  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08006524  08006524  00007524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065e4  080065e4  00008104  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080065e4  080065e4  000075e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065ec  080065ec  00008104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065ec  080065ec  000075ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080065f0  080065f0  000075f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000104  20000000  080065f4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c8  20000104  080066f8  00008104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004cc  080066f8  000084cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008104  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d36  00000000  00000000  00008134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d8d  00000000  00000000  0001de6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e8  00000000  00000000  00021bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e91  00000000  00000000  00022ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188c1  00000000  00000000  00023d71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b1fb  00000000  00000000  0003c632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091898  00000000  00000000  0005782d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e90c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000509c  00000000  00000000  000e9108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000ee1a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000104 	.word	0x20000104
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800650c 	.word	0x0800650c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000108 	.word	0x20000108
 80001dc:	0800650c 	.word	0x0800650c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	@ 0x28
 80005b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	613b      	str	r3, [r7, #16]
 80005c6:	4b49      	ldr	r3, [pc, #292]	@ (80006ec <MX_GPIO_Init+0x140>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	4a48      	ldr	r2, [pc, #288]	@ (80006ec <MX_GPIO_Init+0x140>)
 80005cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d2:	4b46      	ldr	r3, [pc, #280]	@ (80006ec <MX_GPIO_Init+0x140>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005da:	613b      	str	r3, [r7, #16]
 80005dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	4b42      	ldr	r3, [pc, #264]	@ (80006ec <MX_GPIO_Init+0x140>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	4a41      	ldr	r2, [pc, #260]	@ (80006ec <MX_GPIO_Init+0x140>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ee:	4b3f      	ldr	r3, [pc, #252]	@ (80006ec <MX_GPIO_Init+0x140>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	4b3b      	ldr	r3, [pc, #236]	@ (80006ec <MX_GPIO_Init+0x140>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	4a3a      	ldr	r2, [pc, #232]	@ (80006ec <MX_GPIO_Init+0x140>)
 8000604:	f043 0304 	orr.w	r3, r3, #4
 8000608:	6313      	str	r3, [r2, #48]	@ 0x30
 800060a:	4b38      	ldr	r3, [pc, #224]	@ (80006ec <MX_GPIO_Init+0x140>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060e:	f003 0304 	and.w	r3, r3, #4
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	4b34      	ldr	r3, [pc, #208]	@ (80006ec <MX_GPIO_Init+0x140>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	4a33      	ldr	r2, [pc, #204]	@ (80006ec <MX_GPIO_Init+0x140>)
 8000620:	f043 0302 	orr.w	r3, r3, #2
 8000624:	6313      	str	r3, [r2, #48]	@ 0x30
 8000626:	4b31      	ldr	r3, [pc, #196]	@ (80006ec <MX_GPIO_Init+0x140>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	f003 0302 	and.w	r3, r3, #2
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 8000638:	482d      	ldr	r0, [pc, #180]	@ (80006f0 <MX_GPIO_Init+0x144>)
 800063a:	f002 f905 	bl	8002848 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 800063e:	2200      	movs	r2, #0
 8000640:	f24f 0106 	movw	r1, #61446	@ 0xf006
 8000644:	482b      	ldr	r0, [pc, #172]	@ (80006f4 <MX_GPIO_Init+0x148>)
 8000646:	f002 f8ff 	bl	8002848 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8000650:	4829      	ldr	r0, [pc, #164]	@ (80006f8 <MX_GPIO_Init+0x14c>)
 8000652:	f002 f8f9 	bl	8002848 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC4 PC5 PC6 PC7
                           PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000656:	f44f 73f8 	mov.w	r3, #496	@ 0x1f0
 800065a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	2301      	movs	r3, #1
 800065e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2300      	movs	r3, #0
 8000666:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	4619      	mov	r1, r3
 800066e:	4820      	ldr	r0, [pc, #128]	@ (80006f0 <MX_GPIO_Init+0x144>)
 8000670:	f001 ff4e 	bl	8002510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8000674:	f24f 0306 	movw	r3, #61446	@ 0xf006
 8000678:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067a:	2301      	movs	r3, #1
 800067c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000682:	2300      	movs	r3, #0
 8000684:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	4619      	mov	r1, r3
 800068c:	4819      	ldr	r0, [pc, #100]	@ (80006f4 <MX_GPIO_Init+0x148>)
 800068e:	f001 ff3f 	bl	8002510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000692:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000698:	2300      	movs	r3, #0
 800069a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	4619      	mov	r1, r3
 80006a6:	4814      	ldr	r0, [pc, #80]	@ (80006f8 <MX_GPIO_Init+0x14c>)
 80006a8:	f001 ff32 	bl	8002510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80006ac:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80006b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b2:	2301      	movs	r3, #1
 80006b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ba:	2300      	movs	r3, #0
 80006bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	4619      	mov	r1, r3
 80006c4:	480c      	ldr	r0, [pc, #48]	@ (80006f8 <MX_GPIO_Init+0x14c>)
 80006c6:	f001 ff23 	bl	8002510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80006ca:	2328      	movs	r3, #40	@ 0x28
 80006cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	4619      	mov	r1, r3
 80006dc:	4805      	ldr	r0, [pc, #20]	@ (80006f4 <MX_GPIO_Init+0x148>)
 80006de:	f001 ff17 	bl	8002510 <HAL_GPIO_Init>

}
 80006e2:	bf00      	nop
 80006e4:	3728      	adds	r7, #40	@ 0x28
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40020800 	.word	0x40020800
 80006f4:	40020400 	.word	0x40020400
 80006f8:	40020000 	.word	0x40020000

080006fc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000700:	4b12      	ldr	r3, [pc, #72]	@ (800074c <MX_I2C1_Init+0x50>)
 8000702:	4a13      	ldr	r2, [pc, #76]	@ (8000750 <MX_I2C1_Init+0x54>)
 8000704:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000706:	4b11      	ldr	r3, [pc, #68]	@ (800074c <MX_I2C1_Init+0x50>)
 8000708:	4a12      	ldr	r2, [pc, #72]	@ (8000754 <MX_I2C1_Init+0x58>)
 800070a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800070c:	4b0f      	ldr	r3, [pc, #60]	@ (800074c <MX_I2C1_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000712:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <MX_I2C1_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000718:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <MX_I2C1_Init+0x50>)
 800071a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800071e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000720:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <MX_I2C1_Init+0x50>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000726:	4b09      	ldr	r3, [pc, #36]	@ (800074c <MX_I2C1_Init+0x50>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800072c:	4b07      	ldr	r3, [pc, #28]	@ (800074c <MX_I2C1_Init+0x50>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000732:	4b06      	ldr	r3, [pc, #24]	@ (800074c <MX_I2C1_Init+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	@ (800074c <MX_I2C1_Init+0x50>)
 800073a:	f002 f89f 	bl	800287c <HAL_I2C_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000744:	f000 f8d2 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000120 	.word	0x20000120
 8000750:	40005400 	.word	0x40005400
 8000754:	000186a0 	.word	0x000186a0

08000758 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	@ 0x28
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a19      	ldr	r2, [pc, #100]	@ (80007dc <HAL_I2C_MspInit+0x84>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d12c      	bne.n	80007d4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <HAL_I2C_MspInit+0x88>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a17      	ldr	r2, [pc, #92]	@ (80007e0 <HAL_I2C_MspInit+0x88>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b15      	ldr	r3, [pc, #84]	@ (80007e0 <HAL_I2C_MspInit+0x88>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000796:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800079a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800079c:	2312      	movs	r3, #18
 800079e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a4:	2303      	movs	r3, #3
 80007a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007a8:	2304      	movs	r3, #4
 80007aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	4619      	mov	r1, r3
 80007b2:	480c      	ldr	r0, [pc, #48]	@ (80007e4 <HAL_I2C_MspInit+0x8c>)
 80007b4:	f001 feac 	bl	8002510 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <HAL_I2C_MspInit+0x88>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c0:	4a07      	ldr	r2, [pc, #28]	@ (80007e0 <HAL_I2C_MspInit+0x88>)
 80007c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80007c8:	4b05      	ldr	r3, [pc, #20]	@ (80007e0 <HAL_I2C_MspInit+0x88>)
 80007ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007d4:	bf00      	nop
 80007d6:	3728      	adds	r7, #40	@ 0x28
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40005400 	.word	0x40005400
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40020400 	.word	0x40020400

080007e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ec:	f001 fc56 	bl	800209c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f0:	f000 f814 	bl	800081c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f4:	f7ff feda 	bl	80005ac <MX_GPIO_Init>
  MX_TIM2_Init();
 80007f8:	f000 f9d2 	bl	8000ba0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80007fc:	f000 fbac 	bl	8000f58 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000800:	f7ff ff7c 	bl	80006fc <MX_I2C1_Init>
  MX_TIM3_Init();
 8000804:	f000 fa18 	bl	8000c38 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000808:	f000 f92a 	bl	8000a60 <MX_TIM1_Init>
  MX_TIM4_Init();
 800080c:	f000 fa8c 	bl	8000d28 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  ap_init();
 8000810:	f000 fdcc 	bl	80013ac <ap_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ap_main();
 8000814:	f000 fd88 	bl	8001328 <ap_main>
 8000818:	e7fc      	b.n	8000814 <main+0x2c>
	...

0800081c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b094      	sub	sp, #80	@ 0x50
 8000820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000822:	f107 0320 	add.w	r3, r7, #32
 8000826:	2230      	movs	r2, #48	@ 0x30
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f005 f9f0 	bl	8005c10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000840:	2300      	movs	r3, #0
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	4b27      	ldr	r3, [pc, #156]	@ (80008e4 <SystemClock_Config+0xc8>)
 8000846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000848:	4a26      	ldr	r2, [pc, #152]	@ (80008e4 <SystemClock_Config+0xc8>)
 800084a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800084e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000850:	4b24      	ldr	r3, [pc, #144]	@ (80008e4 <SystemClock_Config+0xc8>)
 8000852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000854:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800085c:	2300      	movs	r3, #0
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	4b21      	ldr	r3, [pc, #132]	@ (80008e8 <SystemClock_Config+0xcc>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a20      	ldr	r2, [pc, #128]	@ (80008e8 <SystemClock_Config+0xcc>)
 8000866:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800086a:	6013      	str	r3, [r2, #0]
 800086c:	4b1e      	ldr	r3, [pc, #120]	@ (80008e8 <SystemClock_Config+0xcc>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000878:	2301      	movs	r3, #1
 800087a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800087c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000880:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000882:	2302      	movs	r3, #2
 8000884:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000886:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800088a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800088c:	2304      	movs	r3, #4
 800088e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000890:	2364      	movs	r3, #100	@ 0x64
 8000892:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000894:	2302      	movs	r3, #2
 8000896:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000898:	2304      	movs	r3, #4
 800089a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089c:	f107 0320 	add.w	r3, r7, #32
 80008a0:	4618      	mov	r0, r3
 80008a2:	f002 fc89 	bl	80031b8 <HAL_RCC_OscConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008ac:	f000 f81e 	bl	80008ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b0:	230f      	movs	r3, #15
 80008b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b4:	2302      	movs	r3, #2
 80008b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008c6:	f107 030c 	add.w	r3, r7, #12
 80008ca:	2103      	movs	r1, #3
 80008cc:	4618      	mov	r0, r3
 80008ce:	f002 feeb 	bl	80036a8 <HAL_RCC_ClockConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008d8:	f000 f808 	bl	80008ec <Error_Handler>
  }
}
 80008dc:	bf00      	nop
 80008de:	3750      	adds	r7, #80	@ 0x50
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40007000 	.word	0x40007000

080008ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f0:	b672      	cpsid	i
}
 80008f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <Error_Handler+0x8>

080008f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	4b10      	ldr	r3, [pc, #64]	@ (8000944 <HAL_MspInit+0x4c>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000906:	4a0f      	ldr	r2, [pc, #60]	@ (8000944 <HAL_MspInit+0x4c>)
 8000908:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800090c:	6453      	str	r3, [r2, #68]	@ 0x44
 800090e:	4b0d      	ldr	r3, [pc, #52]	@ (8000944 <HAL_MspInit+0x4c>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000912:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	603b      	str	r3, [r7, #0]
 800091e:	4b09      	ldr	r3, [pc, #36]	@ (8000944 <HAL_MspInit+0x4c>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000922:	4a08      	ldr	r2, [pc, #32]	@ (8000944 <HAL_MspInit+0x4c>)
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000928:	6413      	str	r3, [r2, #64]	@ 0x40
 800092a:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <HAL_MspInit+0x4c>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800

08000948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <NMI_Handler+0x4>

08000950 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <HardFault_Handler+0x4>

08000958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <MemManage_Handler+0x4>

08000960 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <BusFault_Handler+0x4>

08000968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <UsageFault_Handler+0x4>

08000970 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800099e:	f001 fbcf 	bl	8002140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009ac:	4802      	ldr	r0, [pc, #8]	@ (80009b8 <TIM2_IRQHandler+0x10>)
 80009ae:	f003 fb3d 	bl	800402c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200001c0 	.word	0x200001c0

080009bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009c0:	4802      	ldr	r0, [pc, #8]	@ (80009cc <USART2_IRQHandler+0x10>)
 80009c2:	f004 f9f1 	bl	8004da8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000298 	.word	0x20000298

080009d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009d8:	4a14      	ldr	r2, [pc, #80]	@ (8000a2c <_sbrk+0x5c>)
 80009da:	4b15      	ldr	r3, [pc, #84]	@ (8000a30 <_sbrk+0x60>)
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009e4:	4b13      	ldr	r3, [pc, #76]	@ (8000a34 <_sbrk+0x64>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d102      	bne.n	80009f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009ec:	4b11      	ldr	r3, [pc, #68]	@ (8000a34 <_sbrk+0x64>)
 80009ee:	4a12      	ldr	r2, [pc, #72]	@ (8000a38 <_sbrk+0x68>)
 80009f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009f2:	4b10      	ldr	r3, [pc, #64]	@ (8000a34 <_sbrk+0x64>)
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4413      	add	r3, r2
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d207      	bcs.n	8000a10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a00:	f005 f90e 	bl	8005c20 <__errno>
 8000a04:	4603      	mov	r3, r0
 8000a06:	220c      	movs	r2, #12
 8000a08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a0e:	e009      	b.n	8000a24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a10:	4b08      	ldr	r3, [pc, #32]	@ (8000a34 <_sbrk+0x64>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a16:	4b07      	ldr	r3, [pc, #28]	@ (8000a34 <_sbrk+0x64>)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	4a05      	ldr	r2, [pc, #20]	@ (8000a34 <_sbrk+0x64>)
 8000a20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a22:	68fb      	ldr	r3, [r7, #12]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3718      	adds	r7, #24
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20020000 	.word	0x20020000
 8000a30:	00000400 	.word	0x00000400
 8000a34:	20000174 	.word	0x20000174
 8000a38:	200004d0 	.word	0x200004d0

08000a3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a40:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <SystemInit+0x20>)
 8000a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a46:	4a05      	ldr	r2, [pc, #20]	@ (8000a5c <SystemInit+0x20>)
 8000a48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b096      	sub	sp, #88	@ 0x58
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a66:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a74:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]
 8000a8e:	615a      	str	r2, [r3, #20]
 8000a90:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	2220      	movs	r2, #32
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f005 f8b9 	bl	8005c10 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a9e:	4b3e      	ldr	r3, [pc, #248]	@ (8000b98 <MX_TIM1_Init+0x138>)
 8000aa0:	4a3e      	ldr	r2, [pc, #248]	@ (8000b9c <MX_TIM1_Init+0x13c>)
 8000aa2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8000aa4:	4b3c      	ldr	r3, [pc, #240]	@ (8000b98 <MX_TIM1_Init+0x138>)
 8000aa6:	2263      	movs	r2, #99	@ 0x63
 8000aa8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aaa:	4b3b      	ldr	r3, [pc, #236]	@ (8000b98 <MX_TIM1_Init+0x138>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000ab0:	4b39      	ldr	r3, [pc, #228]	@ (8000b98 <MX_TIM1_Init+0x138>)
 8000ab2:	2263      	movs	r2, #99	@ 0x63
 8000ab4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab6:	4b38      	ldr	r3, [pc, #224]	@ (8000b98 <MX_TIM1_Init+0x138>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000abc:	4b36      	ldr	r3, [pc, #216]	@ (8000b98 <MX_TIM1_Init+0x138>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ac2:	4b35      	ldr	r3, [pc, #212]	@ (8000b98 <MX_TIM1_Init+0x138>)
 8000ac4:	2280      	movs	r2, #128	@ 0x80
 8000ac6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ac8:	4833      	ldr	r0, [pc, #204]	@ (8000b98 <MX_TIM1_Init+0x138>)
 8000aca:	f003 f80d 	bl	8003ae8 <HAL_TIM_Base_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000ad4:	f7ff ff0a 	bl	80008ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ad8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000adc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ade:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	482c      	ldr	r0, [pc, #176]	@ (8000b98 <MX_TIM1_Init+0x138>)
 8000ae6:	f003 fc53 	bl	8004390 <HAL_TIM_ConfigClockSource>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000af0:	f7ff fefc 	bl	80008ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000af4:	4828      	ldr	r0, [pc, #160]	@ (8000b98 <MX_TIM1_Init+0x138>)
 8000af6:	f003 f92b 	bl	8003d50 <HAL_TIM_PWM_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000b00:	f7ff fef4 	bl	80008ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b04:	2300      	movs	r3, #0
 8000b06:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b0c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b10:	4619      	mov	r1, r3
 8000b12:	4821      	ldr	r0, [pc, #132]	@ (8000b98 <MX_TIM1_Init+0x138>)
 8000b14:	f003 fffe 	bl	8004b14 <HAL_TIMEx_MasterConfigSynchronization>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000b1e:	f7ff fee5 	bl	80008ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b22:	2360      	movs	r3, #96	@ 0x60
 8000b24:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 50;
 8000b26:	2332      	movs	r3, #50	@ 0x32
 8000b28:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b32:	2300      	movs	r3, #0
 8000b34:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b36:	2300      	movs	r3, #0
 8000b38:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b42:	2200      	movs	r2, #0
 8000b44:	4619      	mov	r1, r3
 8000b46:	4814      	ldr	r0, [pc, #80]	@ (8000b98 <MX_TIM1_Init+0x138>)
 8000b48:	f003 fb60 	bl	800420c <HAL_TIM_PWM_ConfigChannel>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000b52:	f7ff fecb 	bl	80008ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b6e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	4619      	mov	r1, r3
 8000b78:	4807      	ldr	r0, [pc, #28]	@ (8000b98 <MX_TIM1_Init+0x138>)
 8000b7a:	f004 f839 	bl	8004bf0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000b84:	f7ff feb2 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b88:	4803      	ldr	r0, [pc, #12]	@ (8000b98 <MX_TIM1_Init+0x138>)
 8000b8a:	f000 f983 	bl	8000e94 <HAL_TIM_MspPostInit>

}
 8000b8e:	bf00      	nop
 8000b90:	3758      	adds	r7, #88	@ 0x58
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000178 	.word	0x20000178
 8000b9c:	40010000 	.word	0x40010000

08000ba0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ba6:	f107 0308 	add.w	r3, r7, #8
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8000c34 <MX_TIM2_Init+0x94>)
 8000bbe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bc2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8000bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c34 <MX_TIM2_Init+0x94>)
 8000bc6:	2263      	movs	r2, #99	@ 0x63
 8000bc8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bca:	4b1a      	ldr	r3, [pc, #104]	@ (8000c34 <MX_TIM2_Init+0x94>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000bd0:	4b18      	ldr	r3, [pc, #96]	@ (8000c34 <MX_TIM2_Init+0x94>)
 8000bd2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bd6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd8:	4b16      	ldr	r3, [pc, #88]	@ (8000c34 <MX_TIM2_Init+0x94>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bde:	4b15      	ldr	r3, [pc, #84]	@ (8000c34 <MX_TIM2_Init+0x94>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000be4:	4813      	ldr	r0, [pc, #76]	@ (8000c34 <MX_TIM2_Init+0x94>)
 8000be6:	f002 ff7f 	bl	8003ae8 <HAL_TIM_Base_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000bf0:	f7ff fe7c 	bl	80008ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bf8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bfa:	f107 0308 	add.w	r3, r7, #8
 8000bfe:	4619      	mov	r1, r3
 8000c00:	480c      	ldr	r0, [pc, #48]	@ (8000c34 <MX_TIM2_Init+0x94>)
 8000c02:	f003 fbc5 	bl	8004390 <HAL_TIM_ConfigClockSource>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c0c:	f7ff fe6e 	bl	80008ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c10:	2300      	movs	r3, #0
 8000c12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c14:	2300      	movs	r3, #0
 8000c16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c18:	463b      	mov	r3, r7
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4805      	ldr	r0, [pc, #20]	@ (8000c34 <MX_TIM2_Init+0x94>)
 8000c1e:	f003 ff79 	bl	8004b14 <HAL_TIMEx_MasterConfigSynchronization>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c28:	f7ff fe60 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c2c:	bf00      	nop
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	200001c0 	.word	0x200001c0

08000c38 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08e      	sub	sp, #56	@ 0x38
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c4c:	f107 0320 	add.w	r3, r7, #32
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
 8000c64:	615a      	str	r2, [r3, #20]
 8000c66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c68:	4b2d      	ldr	r3, [pc, #180]	@ (8000d20 <MX_TIM3_Init+0xe8>)
 8000c6a:	4a2e      	ldr	r2, [pc, #184]	@ (8000d24 <MX_TIM3_Init+0xec>)
 8000c6c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8000c6e:	4b2c      	ldr	r3, [pc, #176]	@ (8000d20 <MX_TIM3_Init+0xe8>)
 8000c70:	2263      	movs	r2, #99	@ 0x63
 8000c72:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c74:	4b2a      	ldr	r3, [pc, #168]	@ (8000d20 <MX_TIM3_Init+0xe8>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000c7a:	4b29      	ldr	r3, [pc, #164]	@ (8000d20 <MX_TIM3_Init+0xe8>)
 8000c7c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c80:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c82:	4b27      	ldr	r3, [pc, #156]	@ (8000d20 <MX_TIM3_Init+0xe8>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c88:	4b25      	ldr	r3, [pc, #148]	@ (8000d20 <MX_TIM3_Init+0xe8>)
 8000c8a:	2280      	movs	r2, #128	@ 0x80
 8000c8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c8e:	4824      	ldr	r0, [pc, #144]	@ (8000d20 <MX_TIM3_Init+0xe8>)
 8000c90:	f002 ff2a 	bl	8003ae8 <HAL_TIM_Base_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000c9a:	f7ff fe27 	bl	80008ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ca4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ca8:	4619      	mov	r1, r3
 8000caa:	481d      	ldr	r0, [pc, #116]	@ (8000d20 <MX_TIM3_Init+0xe8>)
 8000cac:	f003 fb70 	bl	8004390 <HAL_TIM_ConfigClockSource>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000cb6:	f7ff fe19 	bl	80008ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000cba:	4819      	ldr	r0, [pc, #100]	@ (8000d20 <MX_TIM3_Init+0xe8>)
 8000cbc:	f003 f848 	bl	8003d50 <HAL_TIM_PWM_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000cc6:	f7ff fe11 	bl	80008ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cd2:	f107 0320 	add.w	r3, r7, #32
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4811      	ldr	r0, [pc, #68]	@ (8000d20 <MX_TIM3_Init+0xe8>)
 8000cda:	f003 ff1b 	bl	8004b14 <HAL_TIMEx_MasterConfigSynchronization>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000ce4:	f7ff fe02 	bl	80008ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ce8:	2360      	movs	r3, #96	@ 0x60
 8000cea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8000cec:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8000cf0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4807      	ldr	r0, [pc, #28]	@ (8000d20 <MX_TIM3_Init+0xe8>)
 8000d02:	f003 fa83 	bl	800420c <HAL_TIM_PWM_ConfigChannel>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000d0c:	f7ff fdee 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d10:	4803      	ldr	r0, [pc, #12]	@ (8000d20 <MX_TIM3_Init+0xe8>)
 8000d12:	f000 f8bf 	bl	8000e94 <HAL_TIM_MspPostInit>

}
 8000d16:	bf00      	nop
 8000d18:	3738      	adds	r7, #56	@ 0x38
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000208 	.word	0x20000208
 8000d24:	40000400 	.word	0x40000400

08000d28 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d2e:	f107 0308 	add.w	r3, r7, #8
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d44:	4b1d      	ldr	r3, [pc, #116]	@ (8000dbc <MX_TIM4_Init+0x94>)
 8000d46:	4a1e      	ldr	r2, [pc, #120]	@ (8000dc0 <MX_TIM4_Init+0x98>)
 8000d48:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8000d4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dbc <MX_TIM4_Init+0x94>)
 8000d4c:	2263      	movs	r2, #99	@ 0x63
 8000d4e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d50:	4b1a      	ldr	r3, [pc, #104]	@ (8000dbc <MX_TIM4_Init+0x94>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 30000;
 8000d56:	4b19      	ldr	r3, [pc, #100]	@ (8000dbc <MX_TIM4_Init+0x94>)
 8000d58:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000d5c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d5e:	4b17      	ldr	r3, [pc, #92]	@ (8000dbc <MX_TIM4_Init+0x94>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d64:	4b15      	ldr	r3, [pc, #84]	@ (8000dbc <MX_TIM4_Init+0x94>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d6a:	4814      	ldr	r0, [pc, #80]	@ (8000dbc <MX_TIM4_Init+0x94>)
 8000d6c:	f002 febc 	bl	8003ae8 <HAL_TIM_Base_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000d76:	f7ff fdb9 	bl	80008ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d80:	f107 0308 	add.w	r3, r7, #8
 8000d84:	4619      	mov	r1, r3
 8000d86:	480d      	ldr	r0, [pc, #52]	@ (8000dbc <MX_TIM4_Init+0x94>)
 8000d88:	f003 fb02 	bl	8004390 <HAL_TIM_ConfigClockSource>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000d92:	f7ff fdab 	bl	80008ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d96:	2300      	movs	r3, #0
 8000d98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d9e:	463b      	mov	r3, r7
 8000da0:	4619      	mov	r1, r3
 8000da2:	4806      	ldr	r0, [pc, #24]	@ (8000dbc <MX_TIM4_Init+0x94>)
 8000da4:	f003 feb6 	bl	8004b14 <HAL_TIMEx_MasterConfigSynchronization>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000dae:	f7ff fd9d 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000db2:	bf00      	nop
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000250 	.word	0x20000250
 8000dc0:	40000800 	.word	0x40000800

08000dc4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a2c      	ldr	r2, [pc, #176]	@ (8000e84 <HAL_TIM_Base_MspInit+0xc0>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d10e      	bne.n	8000df4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
 8000dda:	4b2b      	ldr	r3, [pc, #172]	@ (8000e88 <HAL_TIM_Base_MspInit+0xc4>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dde:	4a2a      	ldr	r2, [pc, #168]	@ (8000e88 <HAL_TIM_Base_MspInit+0xc4>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000de6:	4b28      	ldr	r3, [pc, #160]	@ (8000e88 <HAL_TIM_Base_MspInit+0xc4>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000df2:	e042      	b.n	8000e7a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM2)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000dfc:	d116      	bne.n	8000e2c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	4b21      	ldr	r3, [pc, #132]	@ (8000e88 <HAL_TIM_Base_MspInit+0xc4>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e06:	4a20      	ldr	r2, [pc, #128]	@ (8000e88 <HAL_TIM_Base_MspInit+0xc4>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000e88 <HAL_TIM_Base_MspInit+0xc4>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	201c      	movs	r0, #28
 8000e20:	f001 faad 	bl	800237e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e24:	201c      	movs	r0, #28
 8000e26:	f001 fac6 	bl	80023b6 <HAL_NVIC_EnableIRQ>
}
 8000e2a:	e026      	b.n	8000e7a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM3)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a16      	ldr	r2, [pc, #88]	@ (8000e8c <HAL_TIM_Base_MspInit+0xc8>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d10e      	bne.n	8000e54 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	4b13      	ldr	r3, [pc, #76]	@ (8000e88 <HAL_TIM_Base_MspInit+0xc4>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3e:	4a12      	ldr	r2, [pc, #72]	@ (8000e88 <HAL_TIM_Base_MspInit+0xc4>)
 8000e40:	f043 0302 	orr.w	r3, r3, #2
 8000e44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e46:	4b10      	ldr	r3, [pc, #64]	@ (8000e88 <HAL_TIM_Base_MspInit+0xc4>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
}
 8000e52:	e012      	b.n	8000e7a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM4)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a0d      	ldr	r2, [pc, #52]	@ (8000e90 <HAL_TIM_Base_MspInit+0xcc>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d10d      	bne.n	8000e7a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60bb      	str	r3, [r7, #8]
 8000e62:	4b09      	ldr	r3, [pc, #36]	@ (8000e88 <HAL_TIM_Base_MspInit+0xc4>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e66:	4a08      	ldr	r2, [pc, #32]	@ (8000e88 <HAL_TIM_Base_MspInit+0xc4>)
 8000e68:	f043 0304 	orr.w	r3, r3, #4
 8000e6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e6e:	4b06      	ldr	r3, [pc, #24]	@ (8000e88 <HAL_TIM_Base_MspInit+0xc4>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e72:	f003 0304 	and.w	r3, r3, #4
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
}
 8000e7a:	bf00      	nop
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40010000 	.word	0x40010000
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40000400 	.word	0x40000400
 8000e90:	40000800 	.word	0x40000800

08000e94 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08a      	sub	sp, #40	@ 0x28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a24      	ldr	r2, [pc, #144]	@ (8000f44 <HAL_TIM_MspPostInit+0xb0>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d11f      	bne.n	8000ef6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	4b23      	ldr	r3, [pc, #140]	@ (8000f48 <HAL_TIM_MspPostInit+0xb4>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	4a22      	ldr	r2, [pc, #136]	@ (8000f48 <HAL_TIM_MspPostInit+0xb4>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec6:	4b20      	ldr	r3, [pc, #128]	@ (8000f48 <HAL_TIM_MspPostInit+0xb4>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ed2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	4619      	mov	r1, r3
 8000eee:	4817      	ldr	r0, [pc, #92]	@ (8000f4c <HAL_TIM_MspPostInit+0xb8>)
 8000ef0:	f001 fb0e 	bl	8002510 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ef4:	e022      	b.n	8000f3c <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a15      	ldr	r2, [pc, #84]	@ (8000f50 <HAL_TIM_MspPostInit+0xbc>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d11d      	bne.n	8000f3c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f00:	2300      	movs	r3, #0
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	4b10      	ldr	r3, [pc, #64]	@ (8000f48 <HAL_TIM_MspPostInit+0xb4>)
 8000f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f08:	4a0f      	ldr	r2, [pc, #60]	@ (8000f48 <HAL_TIM_MspPostInit+0xb4>)
 8000f0a:	f043 0302 	orr.w	r3, r3, #2
 8000f0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f10:	4b0d      	ldr	r3, [pc, #52]	@ (8000f48 <HAL_TIM_MspPostInit+0xb4>)
 8000f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f14:	f003 0302 	and.w	r3, r3, #2
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f1c:	2310      	movs	r3, #16
 8000f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	4807      	ldr	r0, [pc, #28]	@ (8000f54 <HAL_TIM_MspPostInit+0xc0>)
 8000f38:	f001 faea 	bl	8002510 <HAL_GPIO_Init>
}
 8000f3c:	bf00      	nop
 8000f3e:	3728      	adds	r7, #40	@ 0x28
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40010000 	.word	0x40010000
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40020000 	.word	0x40020000
 8000f50:	40000400 	.word	0x40000400
 8000f54:	40020400 	.word	0x40020400

08000f58 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	@ (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f5e:	4a12      	ldr	r2, [pc, #72]	@ (8000fa8 <MX_USART2_UART_Init+0x50>)
 8000f60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f62:	4b10      	ldr	r3, [pc, #64]	@ (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f70:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f76:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f7c:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f7e:	220c      	movs	r2, #12
 8000f80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f82:	4b08      	ldr	r3, [pc, #32]	@ (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f88:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f8e:	4805      	ldr	r0, [pc, #20]	@ (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f90:	f003 fe94 	bl	8004cbc <HAL_UART_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f9a:	f7ff fca7 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000298 	.word	0x20000298
 8000fa8:	40004400 	.word	0x40004400

08000fac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	@ 0x28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a1d      	ldr	r2, [pc, #116]	@ (8001040 <HAL_UART_MspInit+0x94>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d133      	bne.n	8001036 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]
 8000fd2:	4b1c      	ldr	r3, [pc, #112]	@ (8001044 <HAL_UART_MspInit+0x98>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd6:	4a1b      	ldr	r2, [pc, #108]	@ (8001044 <HAL_UART_MspInit+0x98>)
 8000fd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fde:	4b19      	ldr	r3, [pc, #100]	@ (8001044 <HAL_UART_MspInit+0x98>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	4b15      	ldr	r3, [pc, #84]	@ (8001044 <HAL_UART_MspInit+0x98>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	4a14      	ldr	r2, [pc, #80]	@ (8001044 <HAL_UART_MspInit+0x98>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffa:	4b12      	ldr	r3, [pc, #72]	@ (8001044 <HAL_UART_MspInit+0x98>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001006:	230c      	movs	r3, #12
 8001008:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001012:	2303      	movs	r3, #3
 8001014:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001016:	2307      	movs	r3, #7
 8001018:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101a:	f107 0314 	add.w	r3, r7, #20
 800101e:	4619      	mov	r1, r3
 8001020:	4809      	ldr	r0, [pc, #36]	@ (8001048 <HAL_UART_MspInit+0x9c>)
 8001022:	f001 fa75 	bl	8002510 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2100      	movs	r1, #0
 800102a:	2026      	movs	r0, #38	@ 0x26
 800102c:	f001 f9a7 	bl	800237e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001030:	2026      	movs	r0, #38	@ 0x26
 8001032:	f001 f9c0 	bl	80023b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001036:	bf00      	nop
 8001038:	3728      	adds	r7, #40	@ 0x28
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40004400 	.word	0x40004400
 8001044:	40023800 	.word	0x40023800
 8001048:	40020000 	.word	0x40020000

0800104c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800104c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001084 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001050:	f7ff fcf4 	bl	8000a3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001054:	480c      	ldr	r0, [pc, #48]	@ (8001088 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001056:	490d      	ldr	r1, [pc, #52]	@ (800108c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001058:	4a0d      	ldr	r2, [pc, #52]	@ (8001090 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800105c:	e002      	b.n	8001064 <LoopCopyDataInit>

0800105e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001062:	3304      	adds	r3, #4

08001064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001068:	d3f9      	bcc.n	800105e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106a:	4a0a      	ldr	r2, [pc, #40]	@ (8001094 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800106c:	4c0a      	ldr	r4, [pc, #40]	@ (8001098 <LoopFillZerobss+0x22>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001070:	e001      	b.n	8001076 <LoopFillZerobss>

08001072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001074:	3204      	adds	r2, #4

08001076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001078:	d3fb      	bcc.n	8001072 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800107a:	f004 fdd7 	bl	8005c2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800107e:	f7ff fbb3 	bl	80007e8 <main>
  bx  lr    
 8001082:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001084:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001088:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800108c:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8001090:	080065f4 	.word	0x080065f4
  ldr r2, =_sbss
 8001094:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8001098:	200004cc 	.word	0x200004cc

0800109c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800109c:	e7fe      	b.n	800109c <ADC_IRQHandler>
	...

080010a0 <Listener_Init>:
static Que_TypeDef uartRxQue;
UltraSonic_TypeDef sensor;
inputData_TypeDef inputData;

void Listener_Init()
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af02      	add	r7, sp, #8
	Button_Init(&hBtnUP, GPIOB, GPIO_PIN_5);
 80010a6:	2220      	movs	r2, #32
 80010a8:	4914      	ldr	r1, [pc, #80]	@ (80010fc <Listener_Init+0x5c>)
 80010aa:	4815      	ldr	r0, [pc, #84]	@ (8001100 <Listener_Init+0x60>)
 80010ac:	f000 faec 	bl	8001688 <Button_Init>
	Button_Init(&hBtnDOWN, GPIOB, GPIO_PIN_3);
 80010b0:	2208      	movs	r2, #8
 80010b2:	4912      	ldr	r1, [pc, #72]	@ (80010fc <Listener_Init+0x5c>)
 80010b4:	4813      	ldr	r0, [pc, #76]	@ (8001104 <Listener_Init+0x64>)
 80010b6:	f000 fae7 	bl	8001688 <Button_Init>
	Button_Init(&hBtnSTOP, GPIOA, GPIO_PIN_10);
 80010ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010be:	4912      	ldr	r1, [pc, #72]	@ (8001108 <Listener_Init+0x68>)
 80010c0:	4812      	ldr	r0, [pc, #72]	@ (800110c <Listener_Init+0x6c>)
 80010c2:	f000 fae1 	bl	8001688 <Button_Init>
	Button_Init(&hBtnSTART, GPIOC, GPIO_PIN_13);
 80010c6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010ca:	4911      	ldr	r1, [pc, #68]	@ (8001110 <Listener_Init+0x70>)
 80010cc:	4811      	ldr	r0, [pc, #68]	@ (8001114 <Listener_Init+0x74>)
 80010ce:	f000 fadb 	bl	8001688 <Button_Init>
	UltraSonic_Init(&sensor, GPIOC, GPIO_PIN_7, GPIOA, GPIO_PIN_9);
 80010d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001108 <Listener_Init+0x68>)
 80010da:	2280      	movs	r2, #128	@ 0x80
 80010dc:	490c      	ldr	r1, [pc, #48]	@ (8001110 <Listener_Init+0x70>)
 80010de:	480e      	ldr	r0, [pc, #56]	@ (8001118 <Listener_Init+0x78>)
 80010e0:	f000 ff5a 	bl	8001f98 <UltraSonic_Init>

	Que_Init(&uartRxQue);
 80010e4:	480d      	ldr	r0, [pc, #52]	@ (800111c <Listener_Init+0x7c>)
 80010e6:	f000 f971 	bl	80013cc <Que_Init>
	HAL_UART_Receive_IT(&huart2, &rcvData, 1); // uart recv interrupt enable
 80010ea:	2201      	movs	r2, #1
 80010ec:	490c      	ldr	r1, [pc, #48]	@ (8001120 <Listener_Init+0x80>)
 80010ee:	480d      	ldr	r0, [pc, #52]	@ (8001124 <Listener_Init+0x84>)
 80010f0:	f003 fe34 	bl	8004d5c <HAL_UART_Receive_IT>
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40020400 	.word	0x40020400
 8001100:	20000330 	.word	0x20000330
 8001104:	2000033c 	.word	0x2000033c
 8001108:	40020000 	.word	0x40020000
 800110c:	20000348 	.word	0x20000348
 8001110:	40020800 	.word	0x40020800
 8001114:	20000354 	.word	0x20000354
 8001118:	200002fc 	.word	0x200002fc
 800111c:	200002e4 	.word	0x200002e4
 8001120:	200002e0 	.word	0x200002e0
 8001124:	20000298 	.word	0x20000298

08001128 <Presenter_Init>:

static watch_t dispData = {TIME_WATCH, 12, 0, 0, 0};
//extern TreadmillState_t state;

void Presenter_Init()
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	LCD_Init(&hi2c1);
 800112c:	4802      	ldr	r0, [pc, #8]	@ (8001138 <Presenter_Init+0x10>)
 800112e:	f000 fd6f 	bl	8001c10 <LCD_Init>
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000120 	.word	0x20000120

0800113c <Presenter_Excute>:
{
	memcpy(&dispData, &watchData, sizeof(watch_t));
}

void Presenter_Excute()
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
	Presenter_DispLcdTreadmill(state);
 8001140:	4b07      	ldr	r3, [pc, #28]	@ (8001160 <Presenter_Excute+0x24>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	4618      	mov	r0, r3
 8001146:	f000 f80f 	bl	8001168 <Presenter_DispLcdTreadmill>
	display_speed(speed, state);
 800114a:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <Presenter_Excute+0x28>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a04      	ldr	r2, [pc, #16]	@ (8001160 <Presenter_Excute+0x24>)
 8001150:	7812      	ldrb	r2, [r2, #0]
 8001152:	4611      	mov	r1, r2
 8001154:	4618      	mov	r0, r3
 8001156:	f000 f879 	bl	800124c <display_speed>
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000005 	.word	0x20000005
 8001164:	20000008 	.word	0x20000008

08001168 <Presenter_DispLcdTreadmill>:
//		prevState = state;
//	}
//}

void Presenter_DispLcdTreadmill(TreadmillState_t state)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b090      	sub	sp, #64	@ 0x40
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
    static TreadmillState_t prevState = -1;
    static uint32_t stopDisplayStartTime = 0;
    static uint8_t isStopDisplayed = 0;

    if (state == NO_RUNNING && isStopDisplayed == 0)
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	2b02      	cmp	r3, #2
 8001176:	d11f      	bne.n	80011b8 <Presenter_DispLcdTreadmill+0x50>
 8001178:	4b2e      	ldr	r3, [pc, #184]	@ (8001234 <Presenter_DispLcdTreadmill+0xcc>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d11b      	bne.n	80011b8 <Presenter_DispLcdTreadmill+0x50>
    {
        char str[50];
        sprintf(str, "Stop");
 8001180:	f107 030c 	add.w	r3, r7, #12
 8001184:	492c      	ldr	r1, [pc, #176]	@ (8001238 <Presenter_DispLcdTreadmill+0xd0>)
 8001186:	4618      	mov	r0, r3
 8001188:	f004 fd20 	bl	8005bcc <siprintf>

        LCD_clear();
 800118c:	f000 fea4 	bl	8001ed8 <LCD_clear>
        LCD_writeStringXY(0, 0, str);
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	461a      	mov	r2, r3
 8001196:	2100      	movs	r1, #0
 8001198:	2000      	movs	r0, #0
 800119a:	f000 fe88 	bl	8001eae <LCD_writeStringXY>

        stopDisplayStartTime = HAL_GetTick(); // 현재 시간 저장
 800119e:	f000 ffe3 	bl	8002168 <HAL_GetTick>
 80011a2:	4603      	mov	r3, r0
 80011a4:	4a25      	ldr	r2, [pc, #148]	@ (800123c <Presenter_DispLcdTreadmill+0xd4>)
 80011a6:	6013      	str	r3, [r2, #0]
        isStopDisplayed = 1; // 표시 시작
 80011a8:	4b22      	ldr	r3, [pc, #136]	@ (8001234 <Presenter_DispLcdTreadmill+0xcc>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	701a      	strb	r2, [r3, #0]
        prevState = state;
 80011ae:	4a24      	ldr	r2, [pc, #144]	@ (8001240 <Presenter_DispLcdTreadmill+0xd8>)
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	7013      	strb	r3, [r2, #0]
    {
 80011b4:	bf00      	nop

        LCD_clear();
        LCD_writeStringXY(0, 0, str);
        prevState = state;
    }
}
 80011b6:	e039      	b.n	800122c <Presenter_DispLcdTreadmill+0xc4>
    else if (isStopDisplayed == 1)
 80011b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001234 <Presenter_DispLcdTreadmill+0xcc>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d10e      	bne.n	80011de <Presenter_DispLcdTreadmill+0x76>
        if (HAL_GetTick() - stopDisplayStartTime >= 2000) // 2000ms = 2초
 80011c0:	f000 ffd2 	bl	8002168 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	4b1d      	ldr	r3, [pc, #116]	@ (800123c <Presenter_DispLcdTreadmill+0xd4>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80011d0:	d32c      	bcc.n	800122c <Presenter_DispLcdTreadmill+0xc4>
            isStopDisplayed = 0; // 표시 종료
 80011d2:	4b18      	ldr	r3, [pc, #96]	@ (8001234 <Presenter_DispLcdTreadmill+0xcc>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	701a      	strb	r2, [r3, #0]
            LCD_clear();
 80011d8:	f000 fe7e 	bl	8001ed8 <LCD_clear>
}
 80011dc:	e026      	b.n	800122c <Presenter_DispLcdTreadmill+0xc4>
    else if (state != prevState && state != NO_RUNNING)
 80011de:	4b18      	ldr	r3, [pc, #96]	@ (8001240 <Presenter_DispLcdTreadmill+0xd8>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	79fa      	ldrb	r2, [r7, #7]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d021      	beq.n	800122c <Presenter_DispLcdTreadmill+0xc4>
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d01e      	beq.n	800122c <Presenter_DispLcdTreadmill+0xc4>
        if (state == RUNNING) {
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d106      	bne.n	8001202 <Presenter_DispLcdTreadmill+0x9a>
            sprintf(str, "Running");
 80011f4:	f107 030c 	add.w	r3, r7, #12
 80011f8:	4912      	ldr	r1, [pc, #72]	@ (8001244 <Presenter_DispLcdTreadmill+0xdc>)
 80011fa:	4618      	mov	r0, r3
 80011fc:	f004 fce6 	bl	8005bcc <siprintf>
 8001200:	e008      	b.n	8001214 <Presenter_DispLcdTreadmill+0xac>
        else if (state == IDLE) {
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d105      	bne.n	8001214 <Presenter_DispLcdTreadmill+0xac>
            sprintf(str, "Press Button");
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	490e      	ldr	r1, [pc, #56]	@ (8001248 <Presenter_DispLcdTreadmill+0xe0>)
 800120e:	4618      	mov	r0, r3
 8001210:	f004 fcdc 	bl	8005bcc <siprintf>
        LCD_clear();
 8001214:	f000 fe60 	bl	8001ed8 <LCD_clear>
        LCD_writeStringXY(0, 0, str);
 8001218:	f107 030c 	add.w	r3, r7, #12
 800121c:	461a      	mov	r2, r3
 800121e:	2100      	movs	r1, #0
 8001220:	2000      	movs	r0, #0
 8001222:	f000 fe44 	bl	8001eae <LCD_writeStringXY>
        prevState = state;
 8001226:	4a06      	ldr	r2, [pc, #24]	@ (8001240 <Presenter_DispLcdTreadmill+0xd8>)
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	7013      	strb	r3, [r2, #0]
}
 800122c:	bf00      	nop
 800122e:	3740      	adds	r7, #64	@ 0x40
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	2000030c 	.word	0x2000030c
 8001238:	0800656c 	.word	0x0800656c
 800123c:	20000310 	.word	0x20000310
 8001240:	20000004 	.word	0x20000004
 8001244:	08006574 	.word	0x08006574
 8001248:	0800657c 	.word	0x0800657c

0800124c <display_speed>:


void display_speed(int speed, TreadmillState_t state)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	70fb      	strb	r3, [r7, #3]
	int led = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]

	if ((speed >= 1) && (speed <= 5)) {
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	dd05      	ble.n	800126e <display_speed+0x22>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b05      	cmp	r3, #5
 8001266:	dc02      	bgt.n	800126e <display_speed+0x22>
		led = 0b00000001;
 8001268:	2301      	movs	r3, #1
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	e03d      	b.n	80012ea <display_speed+0x9e>
	}
	else if ((speed >= 6) && (speed <= 10)) {
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b05      	cmp	r3, #5
 8001272:	dd05      	ble.n	8001280 <display_speed+0x34>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b0a      	cmp	r3, #10
 8001278:	dc02      	bgt.n	8001280 <display_speed+0x34>
		led = 0b00000011;
 800127a:	2303      	movs	r3, #3
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	e034      	b.n	80012ea <display_speed+0x9e>
	}
	else if ((speed >= 11) && (speed <= 15)) {
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2b0a      	cmp	r3, #10
 8001284:	dd05      	ble.n	8001292 <display_speed+0x46>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2b0f      	cmp	r3, #15
 800128a:	dc02      	bgt.n	8001292 <display_speed+0x46>
		led = 0b00000111;
 800128c:	2307      	movs	r3, #7
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	e02b      	b.n	80012ea <display_speed+0x9e>
	}
	else if ((speed >= 15) && (speed <= 20)) {
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b0e      	cmp	r3, #14
 8001296:	dd05      	ble.n	80012a4 <display_speed+0x58>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b14      	cmp	r3, #20
 800129c:	dc02      	bgt.n	80012a4 <display_speed+0x58>
		led = 0b00001111;
 800129e:	230f      	movs	r3, #15
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	e022      	b.n	80012ea <display_speed+0x9e>
	}
	else if ((speed >= 21) && (speed <= 25)) {
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b14      	cmp	r3, #20
 80012a8:	dd05      	ble.n	80012b6 <display_speed+0x6a>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b19      	cmp	r3, #25
 80012ae:	dc02      	bgt.n	80012b6 <display_speed+0x6a>
		led = 0b00011111;
 80012b0:	231f      	movs	r3, #31
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	e019      	b.n	80012ea <display_speed+0x9e>
	}
	else if ((speed >= 26) && (speed <= 30)) {
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b19      	cmp	r3, #25
 80012ba:	dd05      	ble.n	80012c8 <display_speed+0x7c>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b1e      	cmp	r3, #30
 80012c0:	dc02      	bgt.n	80012c8 <display_speed+0x7c>
		led = 0b00111111;
 80012c2:	233f      	movs	r3, #63	@ 0x3f
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	e010      	b.n	80012ea <display_speed+0x9e>
	}
	else if ((speed >= 31) && (speed <= 36)) {
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b1e      	cmp	r3, #30
 80012cc:	dd05      	ble.n	80012da <display_speed+0x8e>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2b24      	cmp	r3, #36	@ 0x24
 80012d2:	dc02      	bgt.n	80012da <display_speed+0x8e>
		led = 0b01111111;
 80012d4:	237f      	movs	r3, #127	@ 0x7f
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	e007      	b.n	80012ea <display_speed+0x9e>
	}
	else if ((speed >= 37) && (speed <= 42)) {
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2b24      	cmp	r3, #36	@ 0x24
 80012de:	dd04      	ble.n	80012ea <display_speed+0x9e>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80012e4:	dc01      	bgt.n	80012ea <display_speed+0x9e>
		led = 0b11111111;
 80012e6:	23ff      	movs	r3, #255	@ 0xff
 80012e8:	60fb      	str	r3, [r7, #12]
	}

	if (state == RUNNING) {
 80012ea:	78fb      	ldrb	r3, [r7, #3]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d105      	bne.n	80012fc <display_speed+0xb0>
		LedBar_Write(led);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	4618      	mov	r0, r3
 80012f6:	f000 fdf9 	bl	8001eec <LedBar_Write>
	} else {
		LedBar_Write(0x00);
	}

}
 80012fa:	e002      	b.n	8001302 <display_speed+0xb6>
		LedBar_Write(0x00);
 80012fc:	2000      	movs	r0, #0
 80012fe:	f000 fdf5 	bl	8001eec <LedBar_Write>
}
 8001302:	bf00      	nop
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_TIM_PeriodElapsedCallback>:


//static uint8_t rcvData = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2) {
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800131a:	d101      	bne.n	8001320 <HAL_TIM_PeriodElapsedCallback+0x16>
		FND_DispDataCallBack();
 800131c:	f000 fae6 	bl	80018ec <FND_DispDataCallBack>
	}
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <ap_main>:




int ap_main()
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Start_IT(&htim2);
 800132e:	4811      	ldr	r0, [pc, #68]	@ (8001374 <ap_main+0x4c>)
 8001330:	f002 fcac 	bl	8003c8c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim4);
 8001334:	4810      	ldr	r0, [pc, #64]	@ (8001378 <ap_main+0x50>)
 8001336:	f002 fc27 	bl	8003b88 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800133a:	2100      	movs	r1, #0
 800133c:	480f      	ldr	r0, [pc, #60]	@ (800137c <ap_main+0x54>)
 800133e:	f002 fd61 	bl	8003e04 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim3);
 8001342:	480f      	ldr	r0, [pc, #60]	@ (8001380 <ap_main+0x58>)
 8001344:	f002 fc20 	bl	8003b88 <HAL_TIM_Base_Start>
	//HAL_UART_Receive_IT(&huart2, &rcvData, 1);
    while (1)
    {
        treadmill_run();
 8001348:	f000 f8e4 	bl	8001514 <treadmill_run>
        treadmill_emergency();
 800134c:	f000 f966 	bl	800161c <treadmill_emergency>
        int dist = UltraSonic_GetDistance(&sensor);
 8001350:	480c      	ldr	r0, [pc, #48]	@ (8001384 <ap_main+0x5c>)
 8001352:	f000 fe3b 	bl	8001fcc <UltraSonic_GetDistance>
 8001356:	6078      	str	r0, [r7, #4]
        FND_WriteData(dist);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	b29b      	uxth	r3, r3
 800135c:	4618      	mov	r0, r3
 800135e:	f000 fab5 	bl	80018cc <FND_WriteData>
        Presenter_Excute();
 8001362:	f7ff feeb 	bl	800113c <Presenter_Excute>

        HAL_Delay(500);
 8001366:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800136a:	f000 ff09 	bl	8002180 <HAL_Delay>
    {
 800136e:	bf00      	nop
 8001370:	e7ea      	b.n	8001348 <ap_main+0x20>
 8001372:	bf00      	nop
 8001374:	200001c0 	.word	0x200001c0
 8001378:	20000250 	.word	0x20000250
 800137c:	20000178 	.word	0x20000178
 8001380:	20000208 	.word	0x20000208
 8001384:	200002fc 	.word	0x200002fc

08001388 <HAL_UART_RxCpltCallback>:

    return 0;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a04      	ldr	r2, [pc, #16]	@ (80013a8 <HAL_UART_RxCpltCallback+0x20>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d101      	bne.n	800139e <HAL_UART_RxCpltCallback+0x16>
		Listener_UartCallBack();
 800139a:	f000 f95f 	bl	800165c <Listener_UartCallBack>
	}
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40004400 	.word	0x40004400

080013ac <ap_init>:


void ap_init()
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
	Listener_Init();
 80013b0:	f7ff fe76 	bl	80010a0 <Listener_Init>
	Presenter_Init();
 80013b4:	f7ff feb8 	bl	8001128 <Presenter_Init>
	Sound_Init();
 80013b8:	f000 f88e 	bl	80014d8 <Sound_Init>
	DC_Motor_Init(&htim1, TIM_CHANNEL_1);
 80013bc:	2100      	movs	r1, #0
 80013be:	4802      	ldr	r0, [pc, #8]	@ (80013c8 <ap_init+0x1c>)
 80013c0:	f000 fa16 	bl	80017f0 <DC_Motor_Init>
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000178 	.word	0x20000178

080013cc <Que_Init>:
#include "queue.h"



void Que_Init(Que_TypeDef *q)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	q->front = 0;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
	q->rear = 0;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	605a      	str	r2, [r3, #4]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <isQueFull>:

int isQueFull(Que_TypeDef *q)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	return q->front == ((q->rear+1) % QUE_SIZE);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	3301      	adds	r3, #1
 80013fe:	4259      	negs	r1, r3
 8001400:	f003 0303 	and.w	r3, r3, #3
 8001404:	f001 0103 	and.w	r1, r1, #3
 8001408:	bf58      	it	pl
 800140a:	424b      	negpl	r3, r1
 800140c:	429a      	cmp	r2, r3
 800140e:	bf0c      	ite	eq
 8001410:	2301      	moveq	r3, #1
 8001412:	2300      	movne	r3, #0
 8001414:	b2db      	uxtb	r3, r3
}
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <isQueEmpty>:

int isQueEmpty(Que_TypeDef *q)
{
 8001422:	b480      	push	{r7}
 8001424:	b083      	sub	sp, #12
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
	return q->front == q->rear;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	429a      	cmp	r2, r3
 8001434:	bf0c      	ite	eq
 8001436:	2301      	moveq	r3, #1
 8001438:	2300      	movne	r3, #0
 800143a:	b2db      	uxtb	r3, r3
}
 800143c:	4618      	mov	r0, r3
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <enQue>:

void enQue(Que_TypeDef *q, int data)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
	if (isQueFull(q)) {
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff ffca 	bl	80013ec <isQueFull>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d113      	bne.n	8001486 <enQue+0x3e>
		return;
	}
	q->queData[q->rear] = data;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685a      	ldr	r2, [r3, #4]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3202      	adds	r2, #2
 8001466:	6839      	ldr	r1, [r7, #0]
 8001468:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	q->rear = (q->rear+1) % QUE_SIZE;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	3301      	adds	r3, #1
 8001472:	425a      	negs	r2, r3
 8001474:	f003 0303 	and.w	r3, r3, #3
 8001478:	f002 0203 	and.w	r2, r2, #3
 800147c:	bf58      	it	pl
 800147e:	4253      	negpl	r3, r2
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	6053      	str	r3, [r2, #4]
 8001484:	e000      	b.n	8001488 <enQue+0x40>
		return;
 8001486:	bf00      	nop
}
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <deQue>:

int deQue(Que_TypeDef *q)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b084      	sub	sp, #16
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
	if (isQueEmpty(q)) {
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff ffc3 	bl	8001422 <isQueEmpty>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d114      	bne.n	80014cc <deQue+0x3e>
		return;
	}
	int data = q->queData[q->front];
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3202      	adds	r2, #2
 80014aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014ae:	60fb      	str	r3, [r7, #12]
	q->front = (q->front+1) % QUE_SIZE;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	3301      	adds	r3, #1
 80014b6:	425a      	negs	r2, r3
 80014b8:	f003 0303 	and.w	r3, r3, #3
 80014bc:	f002 0203 	and.w	r2, r2, #3
 80014c0:	bf58      	it	pl
 80014c2:	4253      	negpl	r3, r2
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	6013      	str	r3, [r2, #0]
	return data;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	e001      	b.n	80014d0 <deQue+0x42>
		return;
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <Sound_Init>:
 *      Author: kccistc
 */
#include "sound.h"

void Sound_Init()
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
	Buzzer_Init(&htim3, TIM_CHANNEL_1);
 80014dc:	2100      	movs	r1, #0
 80014de:	4802      	ldr	r0, [pc, #8]	@ (80014e8 <Sound_Init+0x10>)
 80014e0:	f000 f91a 	bl	8001718 <Buzzer_Init>
}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000208 	.word	0x20000208

080014ec <Sound_PowerOn>:

void Sound_PowerOn()
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
	Buzzer_SetFreq(1047); // 523hz -> 도
 80014f0:	f240 4017 	movw	r0, #1047	@ 0x417
 80014f4:	f000 f926 	bl	8001744 <Buzzer_SetFreq>
	Buzzer_Start();
 80014f8:	f000 f95a 	bl	80017b0 <Buzzer_Start>
	HAL_Delay(100);
 80014fc:	2064      	movs	r0, #100	@ 0x64
 80014fe:	f000 fe3f 	bl	8002180 <HAL_Delay>
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}

08001506 <Sound_PowerOff>:

void Sound_PowerOff()
{
 8001506:	b580      	push	{r7, lr}
 8001508:	af00      	add	r7, sp, #0
	Buzzer_Stop();
 800150a:	f000 f961 	bl	80017d0 <Buzzer_Stop>
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <treadmill_run>:
	}
	return 0;
}

void treadmill_run()
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
	int uartRxData = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]

	if (!isQueEmpty(&uartRxQue)) {
 800151e:	4838      	ldr	r0, [pc, #224]	@ (8001600 <treadmill_run+0xec>)
 8001520:	f7ff ff7f 	bl	8001422 <isQueEmpty>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d103      	bne.n	8001532 <treadmill_run+0x1e>
		uartRxData = deQue(&uartRxQue);
 800152a:	4835      	ldr	r0, [pc, #212]	@ (8001600 <treadmill_run+0xec>)
 800152c:	f7ff ffaf 	bl	800148e <deQue>
 8001530:	6078      	str	r0, [r7, #4]
	}

    switch (state)
 8001532:	4b34      	ldr	r3, [pc, #208]	@ (8001604 <treadmill_run+0xf0>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b02      	cmp	r3, #2
 8001538:	d055      	beq.n	80015e6 <treadmill_run+0xd2>
 800153a:	2b02      	cmp	r3, #2
 800153c:	dc5c      	bgt.n	80015f8 <treadmill_run+0xe4>
 800153e:	2b00      	cmp	r3, #0
 8001540:	d002      	beq.n	8001548 <treadmill_run+0x34>
 8001542:	2b01      	cmp	r3, #1
 8001544:	d00d      	beq.n	8001562 <treadmill_run+0x4e>

        case NO_RUNNING:
            DC_Motor_Stop();
        	state = IDLE;
    }
}
 8001546:	e057      	b.n	80015f8 <treadmill_run+0xe4>
			if (Button_GetState(&hBtnSTART) == ACT_PUSHED || uartRxData == 'R') {
 8001548:	482f      	ldr	r0, [pc, #188]	@ (8001608 <treadmill_run+0xf4>)
 800154a:	f000 f8b3 	bl	80016b4 <Button_GetState>
 800154e:	4603      	mov	r3, r0
 8001550:	2b01      	cmp	r3, #1
 8001552:	d002      	beq.n	800155a <treadmill_run+0x46>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b52      	cmp	r3, #82	@ 0x52
 8001558:	d14b      	bne.n	80015f2 <treadmill_run+0xde>
				state = RUNNING;
 800155a:	4b2a      	ldr	r3, [pc, #168]	@ (8001604 <treadmill_run+0xf0>)
 800155c:	2201      	movs	r2, #1
 800155e:	701a      	strb	r2, [r3, #0]
			break;
 8001560:	e047      	b.n	80015f2 <treadmill_run+0xde>
			DC_Motor_SetFreq(10, speed);
 8001562:	4b2a      	ldr	r3, [pc, #168]	@ (800160c <treadmill_run+0xf8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4619      	mov	r1, r3
 8001568:	200a      	movs	r0, #10
 800156a:	f000 f957 	bl	800181c <DC_Motor_SetFreq>
			DC_Motor_Start();
 800156e:	f000 f98d 	bl	800188c <DC_Motor_Start>
			if (Button_GetState(&hBtnSTOP) == ACT_PUSHED || uartRxData == 'S') {
 8001572:	4827      	ldr	r0, [pc, #156]	@ (8001610 <treadmill_run+0xfc>)
 8001574:	f000 f89e 	bl	80016b4 <Button_GetState>
 8001578:	4603      	mov	r3, r0
 800157a:	2b01      	cmp	r3, #1
 800157c:	d002      	beq.n	8001584 <treadmill_run+0x70>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b53      	cmp	r3, #83	@ 0x53
 8001582:	d103      	bne.n	800158c <treadmill_run+0x78>
				state = NO_RUNNING;
 8001584:	4b1f      	ldr	r3, [pc, #124]	@ (8001604 <treadmill_run+0xf0>)
 8001586:	2202      	movs	r2, #2
 8001588:	701a      	strb	r2, [r3, #0]
 800158a:	e02b      	b.n	80015e4 <treadmill_run+0xd0>
			else if (Button_GetState(&hBtnUP) == ACT_PUSHED || uartRxData == 'U') {
 800158c:	4821      	ldr	r0, [pc, #132]	@ (8001614 <treadmill_run+0x100>)
 800158e:	f000 f891 	bl	80016b4 <Button_GetState>
 8001592:	4603      	mov	r3, r0
 8001594:	2b01      	cmp	r3, #1
 8001596:	d002      	beq.n	800159e <treadmill_run+0x8a>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b55      	cmp	r3, #85	@ 0x55
 800159c:	d10c      	bne.n	80015b8 <treadmill_run+0xa4>
				speed += 2;
 800159e:	4b1b      	ldr	r3, [pc, #108]	@ (800160c <treadmill_run+0xf8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	3302      	adds	r3, #2
 80015a4:	4a19      	ldr	r2, [pc, #100]	@ (800160c <treadmill_run+0xf8>)
 80015a6:	6013      	str	r3, [r2, #0]
				if (speed > MAX_SPEED) speed = MAX_SPEED;
 80015a8:	4b18      	ldr	r3, [pc, #96]	@ (800160c <treadmill_run+0xf8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b64      	cmp	r3, #100	@ 0x64
 80015ae:	dd19      	ble.n	80015e4 <treadmill_run+0xd0>
 80015b0:	4b16      	ldr	r3, [pc, #88]	@ (800160c <treadmill_run+0xf8>)
 80015b2:	2264      	movs	r2, #100	@ 0x64
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	e015      	b.n	80015e4 <treadmill_run+0xd0>
			else if (Button_GetState(&hBtnDOWN) == ACT_PUSHED || uartRxData == 'D') {
 80015b8:	4817      	ldr	r0, [pc, #92]	@ (8001618 <treadmill_run+0x104>)
 80015ba:	f000 f87b 	bl	80016b4 <Button_GetState>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d002      	beq.n	80015ca <treadmill_run+0xb6>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b44      	cmp	r3, #68	@ 0x44
 80015c8:	d115      	bne.n	80015f6 <treadmill_run+0xe2>
				speed -= 2;
 80015ca:	4b10      	ldr	r3, [pc, #64]	@ (800160c <treadmill_run+0xf8>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	3b02      	subs	r3, #2
 80015d0:	4a0e      	ldr	r2, [pc, #56]	@ (800160c <treadmill_run+0xf8>)
 80015d2:	6013      	str	r3, [r2, #0]
				if (speed < MIN_SPEED) speed = MIN_SPEED;
 80015d4:	4b0d      	ldr	r3, [pc, #52]	@ (800160c <treadmill_run+0xf8>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	da0c      	bge.n	80015f6 <treadmill_run+0xe2>
 80015dc:	4b0b      	ldr	r3, [pc, #44]	@ (800160c <treadmill_run+0xf8>)
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
			break;
 80015e2:	e008      	b.n	80015f6 <treadmill_run+0xe2>
 80015e4:	e007      	b.n	80015f6 <treadmill_run+0xe2>
            DC_Motor_Stop();
 80015e6:	f000 f961 	bl	80018ac <DC_Motor_Stop>
        	state = IDLE;
 80015ea:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <treadmill_run+0xf0>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	701a      	strb	r2, [r3, #0]
}
 80015f0:	e002      	b.n	80015f8 <treadmill_run+0xe4>
			break;
 80015f2:	bf00      	nop
 80015f4:	e000      	b.n	80015f8 <treadmill_run+0xe4>
			break;
 80015f6:	bf00      	nop
}
 80015f8:	bf00      	nop
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000318 	.word	0x20000318
 8001604:	20000005 	.word	0x20000005
 8001608:	20000354 	.word	0x20000354
 800160c:	20000008 	.word	0x20000008
 8001610:	20000348 	.word	0x20000348
 8001614:	20000330 	.word	0x20000330
 8001618:	2000033c 	.word	0x2000033c

0800161c <treadmill_emergency>:

void treadmill_emergency()
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
    int dist = UltraSonic_GetDistance(&sensor);
 8001622:	480c      	ldr	r0, [pc, #48]	@ (8001654 <treadmill_emergency+0x38>)
 8001624:	f000 fcd2 	bl	8001fcc <UltraSonic_GetDistance>
 8001628:	6078      	str	r0, [r7, #4]

    if ((dist <= 5) && (dist >= 1) && (state == RUNNING)) {
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b05      	cmp	r3, #5
 800162e:	dc09      	bgt.n	8001644 <treadmill_emergency+0x28>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	dd06      	ble.n	8001644 <treadmill_emergency+0x28>
 8001636:	4b08      	ldr	r3, [pc, #32]	@ (8001658 <treadmill_emergency+0x3c>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d102      	bne.n	8001644 <treadmill_emergency+0x28>
    	Sound_PowerOn();
 800163e:	f7ff ff55 	bl	80014ec <Sound_PowerOn>
 8001642:	e002      	b.n	800164a <treadmill_emergency+0x2e>
    } else {
    	Sound_PowerOff();
 8001644:	f7ff ff5f 	bl	8001506 <Sound_PowerOff>
    }
}
 8001648:	bf00      	nop
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200002fc 	.word	0x200002fc
 8001658:	20000005 	.word	0x20000005

0800165c <Listener_UartCallBack>:

void Listener_UartCallBack()
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
	enQue(&uartRxQue, rcvData);
 8001660:	4b06      	ldr	r3, [pc, #24]	@ (800167c <Listener_UartCallBack+0x20>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	4619      	mov	r1, r3
 8001666:	4806      	ldr	r0, [pc, #24]	@ (8001680 <Listener_UartCallBack+0x24>)
 8001668:	f7ff feee 	bl	8001448 <enQue>
	HAL_UART_Receive_IT(&huart2, &rcvData, 1); // interrupt enable
 800166c:	2201      	movs	r2, #1
 800166e:	4903      	ldr	r1, [pc, #12]	@ (800167c <Listener_UartCallBack+0x20>)
 8001670:	4804      	ldr	r0, [pc, #16]	@ (8001684 <Listener_UartCallBack+0x28>)
 8001672:	f003 fb73 	bl	8004d5c <HAL_UART_Receive_IT>
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000314 	.word	0x20000314
 8001680:	20000318 	.word	0x20000318
 8001684:	20000298 	.word	0x20000298

08001688 <Button_Init>:
Button_Handler_t hBtnSTOP;
Button_Handler_t hBtnSTART;


void Button_Init(Button_Handler_t *hbtn, GPIO_TypeDef *GPIOx, uint16_t pinNum)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	4613      	mov	r3, r2
 8001694:	80fb      	strh	r3, [r7, #6]
	hbtn->GPIOx = GPIOx;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	68ba      	ldr	r2, [r7, #8]
 800169a:	601a      	str	r2, [r3, #0]
	hbtn->pinNum = pinNum;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	88fa      	ldrh	r2, [r7, #6]
 80016a0:	809a      	strh	r2, [r3, #4]
	hbtn->prevState = RELEASED;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2201      	movs	r2, #1
 80016a6:	609a      	str	r2, [r3, #8]
}
 80016a8:	bf00      	nop
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <Button_GetState>:

button_state_t Button_GetState(Button_Handler_t *hbtn)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	uint32_t curState;
	curState = HAL_GPIO_ReadPin(hbtn->GPIOx, hbtn->pinNum); // normal state is high.
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	889b      	ldrh	r3, [r3, #4]
 80016c4:	4619      	mov	r1, r3
 80016c6:	4610      	mov	r0, r2
 80016c8:	f001 f8a6 	bl	8002818 <HAL_GPIO_ReadPin>
 80016cc:	4603      	mov	r3, r0
 80016ce:	60fb      	str	r3, [r7, #12]

	if ((hbtn->prevState == RELEASED) && (curState == PUSHED)) { // button released -> pushed
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d10a      	bne.n	80016ee <Button_GetState+0x3a>
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d107      	bne.n	80016ee <Button_GetState+0x3a>
		HAL_Delay(2); // debounce
 80016de:	2002      	movs	r0, #2
 80016e0:	f000 fd4e 	bl	8002180 <HAL_Delay>
		hbtn->prevState = PUSHED;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
		return ACT_PUSHED;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e00f      	b.n	800170e <Button_GetState+0x5a>
	}
	else if ((hbtn->prevState == PUSHED) && (curState == RELEASED)) { // button pushed -> released
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d10a      	bne.n	800170c <Button_GetState+0x58>
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d107      	bne.n	800170c <Button_GetState+0x58>
		HAL_Delay(2); // debounce
 80016fc:	2002      	movs	r0, #2
 80016fe:	f000 fd3f 	bl	8002180 <HAL_Delay>
		hbtn->prevState = RELEASED;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2201      	movs	r2, #1
 8001706:	609a      	str	r2, [r3, #8]
		return ACT_RELEASED;
 8001708:	2302      	movs	r3, #2
 800170a:	e000      	b.n	800170e <Button_GetState+0x5a>
	}
	return NO_ACT;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <Buzzer_Init>:

static TIM_HandleTypeDef *hbuzzerTim;
static uint32_t buzzerTimChannel;

void Buzzer_Init(TIM_HandleTypeDef *htim, uint32_t channel)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
	hbuzzerTim = htim;
 8001722:	4a06      	ldr	r2, [pc, #24]	@ (800173c <Buzzer_Init+0x24>)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6013      	str	r3, [r2, #0]
	buzzerTimChannel = channel;
 8001728:	4a05      	ldr	r2, [pc, #20]	@ (8001740 <Buzzer_Init+0x28>)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	6013      	str	r3, [r2, #0]
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	20000360 	.word	0x20000360
 8001740:	20000364 	.word	0x20000364

08001744 <Buzzer_SetFreq>:

void Buzzer_SetFreq(uint32_t freq)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	if (freq < 100) freq = 100;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b63      	cmp	r3, #99	@ 0x63
 8001750:	d802      	bhi.n	8001758 <Buzzer_SetFreq+0x14>
 8001752:	2364      	movs	r3, #100	@ 0x64
 8001754:	607b      	str	r3, [r7, #4]
 8001756:	e007      	b.n	8001768 <Buzzer_SetFreq+0x24>
	else if (freq > 10000) freq = 10000;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800175e:	4293      	cmp	r3, r2
 8001760:	d902      	bls.n	8001768 <Buzzer_SetFreq+0x24>
 8001762:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001766:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_AUTORELOAD(&htim3, 1000000/freq - 1);
 8001768:	4a0e      	ldr	r2, [pc, #56]	@ (80017a4 <Buzzer_SetFreq+0x60>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001770:	4b0d      	ldr	r3, [pc, #52]	@ (80017a8 <Buzzer_SetFreq+0x64>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	3a01      	subs	r2, #1
 8001776:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001778:	4a0a      	ldr	r2, [pc, #40]	@ (80017a4 <Buzzer_SetFreq+0x60>)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001780:	3b01      	subs	r3, #1
 8001782:	4a09      	ldr	r2, [pc, #36]	@ (80017a8 <Buzzer_SetFreq+0x64>)
 8001784:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1000000/freq/2 - 1); // duty cycle 50%
 8001786:	4a09      	ldr	r2, [pc, #36]	@ (80017ac <Buzzer_SetFreq+0x68>)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	fbb2 f2f3 	udiv	r2, r2, r3
 800178e:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <Buzzer_SetFreq+0x64>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	3a01      	subs	r2, #1
 8001794:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	000f4240 	.word	0x000f4240
 80017a8:	20000208 	.word	0x20000208
 80017ac:	0007a120 	.word	0x0007a120

080017b0 <Buzzer_Start>:

void Buzzer_Start()
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(hbuzzerTim, buzzerTimChannel);
 80017b4:	4b04      	ldr	r3, [pc, #16]	@ (80017c8 <Buzzer_Start+0x18>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a04      	ldr	r2, [pc, #16]	@ (80017cc <Buzzer_Start+0x1c>)
 80017ba:	6812      	ldr	r2, [r2, #0]
 80017bc:	4611      	mov	r1, r2
 80017be:	4618      	mov	r0, r3
 80017c0:	f002 fb20 	bl	8003e04 <HAL_TIM_PWM_Start>
}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000360 	.word	0x20000360
 80017cc:	20000364 	.word	0x20000364

080017d0 <Buzzer_Stop>:

void Buzzer_Stop()
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(hbuzzerTim, buzzerTimChannel);
 80017d4:	4b04      	ldr	r3, [pc, #16]	@ (80017e8 <Buzzer_Stop+0x18>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a04      	ldr	r2, [pc, #16]	@ (80017ec <Buzzer_Stop+0x1c>)
 80017da:	6812      	ldr	r2, [r2, #0]
 80017dc:	4611      	mov	r1, r2
 80017de:	4618      	mov	r0, r3
 80017e0:	f002 fbc0 	bl	8003f64 <HAL_TIM_PWM_Stop>
}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000360 	.word	0x20000360
 80017ec:	20000364 	.word	0x20000364

080017f0 <DC_Motor_Init>:

static TIM_HandleTypeDef *hmotorTim;
static uint32_t motorTimChannel;

void DC_Motor_Init(TIM_HandleTypeDef *htim, uint32_t channel)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
	hmotorTim = htim;
 80017fa:	4a06      	ldr	r2, [pc, #24]	@ (8001814 <DC_Motor_Init+0x24>)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6013      	str	r3, [r2, #0]
	motorTimChannel = channel;
 8001800:	4a05      	ldr	r2, [pc, #20]	@ (8001818 <DC_Motor_Init+0x28>)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	6013      	str	r3, [r2, #0]
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	20000368 	.word	0x20000368
 8001818:	2000036c 	.word	0x2000036c

0800181c <DC_Motor_SetFreq>:

void DC_Motor_SetFreq(uint32_t freq, int duty)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
	if (duty < 0) duty = 0;
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	da02      	bge.n	8001832 <DC_Motor_SetFreq+0x16>
 800182c:	2300      	movs	r3, #0
 800182e:	603b      	str	r3, [r7, #0]
 8001830:	e004      	b.n	800183c <DC_Motor_SetFreq+0x20>
	else if (duty > 100) duty = 100;
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	2b64      	cmp	r3, #100	@ 0x64
 8001836:	dd01      	ble.n	800183c <DC_Motor_SetFreq+0x20>
 8001838:	2364      	movs	r3, #100	@ 0x64
 800183a:	603b      	str	r3, [r7, #0]

    uint32_t arr = 1000000 / freq - 1;  // 주기 설정
 800183c:	4a10      	ldr	r2, [pc, #64]	@ (8001880 <DC_Motor_SetFreq+0x64>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	fbb2 f3f3 	udiv	r3, r2, r3
 8001844:	3b01      	subs	r3, #1
 8001846:	60fb      	str	r3, [r7, #12]
    uint32_t ccr = (arr + 1) * duty / 100;  // 듀티비 비율 설정
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	3301      	adds	r3, #1
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	fb02 f303 	mul.w	r3, r2, r3
 8001852:	4a0c      	ldr	r2, [pc, #48]	@ (8001884 <DC_Motor_SetFreq+0x68>)
 8001854:	fba2 2303 	umull	r2, r3, r2, r3
 8001858:	095b      	lsrs	r3, r3, #5
 800185a:	60bb      	str	r3, [r7, #8]

	__HAL_TIM_SET_AUTORELOAD(&htim1, arr);
 800185c:	4b0a      	ldr	r3, [pc, #40]	@ (8001888 <DC_Motor_SetFreq+0x6c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001864:	4a08      	ldr	r2, [pc, #32]	@ (8001888 <DC_Motor_SetFreq+0x6c>)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ccr);
 800186a:	4b07      	ldr	r3, [pc, #28]	@ (8001888 <DC_Motor_SetFreq+0x6c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001872:	bf00      	nop
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	000f4240 	.word	0x000f4240
 8001884:	51eb851f 	.word	0x51eb851f
 8001888:	20000178 	.word	0x20000178

0800188c <DC_Motor_Start>:

void DC_Motor_Start()
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(hmotorTim, motorTimChannel);
 8001890:	4b04      	ldr	r3, [pc, #16]	@ (80018a4 <DC_Motor_Start+0x18>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a04      	ldr	r2, [pc, #16]	@ (80018a8 <DC_Motor_Start+0x1c>)
 8001896:	6812      	ldr	r2, [r2, #0]
 8001898:	4611      	mov	r1, r2
 800189a:	4618      	mov	r0, r3
 800189c:	f002 fab2 	bl	8003e04 <HAL_TIM_PWM_Start>
}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000368 	.word	0x20000368
 80018a8:	2000036c 	.word	0x2000036c

080018ac <DC_Motor_Stop>:

void DC_Motor_Stop()
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(hmotorTim, motorTimChannel);
 80018b0:	4b04      	ldr	r3, [pc, #16]	@ (80018c4 <DC_Motor_Stop+0x18>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a04      	ldr	r2, [pc, #16]	@ (80018c8 <DC_Motor_Stop+0x1c>)
 80018b6:	6812      	ldr	r2, [r2, #0]
 80018b8:	4611      	mov	r1, r2
 80018ba:	4618      	mov	r0, r3
 80018bc:	f002 fb52 	bl	8003f64 <HAL_TIM_PWM_Stop>
}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000368 	.word	0x20000368
 80018c8:	2000036c 	.word	0x2000036c

080018cc <FND_WriteData>:
	else
		fndDispDp &= ~dpData;
}

void FND_WriteData(uint16_t data)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	80fb      	strh	r3, [r7, #6]
	fndDispNum = data;
 80018d6:	4a04      	ldr	r2, [pc, #16]	@ (80018e8 <FND_WriteData+0x1c>)
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	8013      	strh	r3, [r2, #0]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	20000370 	.word	0x20000370

080018ec <FND_DispDataCallBack>:
	return fndDispNum;
}

// display fndDispNum
void FND_DispDataCallBack()
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
	static int digitPos = 0;
	// 인터럽트가 발생하면 한 자리씩 출력한다.
	digitPos = (digitPos+1) % 8;
 80018f0:	4b80      	ldr	r3, [pc, #512]	@ (8001af4 <FND_DispDataCallBack+0x208>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	3301      	adds	r3, #1
 80018f6:	425a      	negs	r2, r3
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	f002 0207 	and.w	r2, r2, #7
 8001900:	bf58      	it	pl
 8001902:	4253      	negpl	r3, r2
 8001904:	4a7b      	ldr	r2, [pc, #492]	@ (8001af4 <FND_DispDataCallBack+0x208>)
 8001906:	6013      	str	r3, [r2, #0]
	switch(digitPos)
 8001908:	4b7a      	ldr	r3, [pc, #488]	@ (8001af4 <FND_DispDataCallBack+0x208>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2b07      	cmp	r3, #7
 800190e:	f200 80ee 	bhi.w	8001aee <FND_DispDataCallBack+0x202>
 8001912:	a201      	add	r2, pc, #4	@ (adr r2, 8001918 <FND_DispDataCallBack+0x2c>)
 8001914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001918:	08001939 	.word	0x08001939
 800191c:	08001967 	.word	0x08001967
 8001920:	0800199f 	.word	0x0800199f
 8001924:	080019d7 	.word	0x080019d7
 8001928:	08001a0f 	.word	0x08001a0f
 800192c:	08001a47 	.word	0x08001a47
 8001930:	08001a7f 	.word	0x08001a7f
 8001934:	08001ab7 	.word	0x08001ab7
	{
	case DIGIT_1:
		FND_DispOffAll();
 8001938:	f000 f8e8 	bl	8001b0c <FND_DispOffAll>
		FND_DispDigit(fndDispNum % 10);
 800193c:	4b6e      	ldr	r3, [pc, #440]	@ (8001af8 <FND_DispDataCallBack+0x20c>)
 800193e:	881a      	ldrh	r2, [r3, #0]
 8001940:	4b6e      	ldr	r3, [pc, #440]	@ (8001afc <FND_DispDataCallBack+0x210>)
 8001942:	fba3 1302 	umull	r1, r3, r3, r2
 8001946:	08d9      	lsrs	r1, r3, #3
 8001948:	460b      	mov	r3, r1
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	b29b      	uxth	r3, r3
 8001954:	4618      	mov	r0, r3
 8001956:	f000 f913 	bl	8001b80 <FND_DispDigit>
		FND_DispOn(digitPos);
 800195a:	4b66      	ldr	r3, [pc, #408]	@ (8001af4 <FND_DispDataCallBack+0x208>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f000 f8f6 	bl	8001b50 <FND_DispOn>
		break;
 8001964:	e0c3      	b.n	8001aee <FND_DispDataCallBack+0x202>
	case DIGIT_10:
		FND_DispOffAll();
 8001966:	f000 f8d1 	bl	8001b0c <FND_DispOffAll>
		FND_DispDigit(fndDispNum /10 % 10);
 800196a:	4b63      	ldr	r3, [pc, #396]	@ (8001af8 <FND_DispDataCallBack+0x20c>)
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	4a63      	ldr	r2, [pc, #396]	@ (8001afc <FND_DispDataCallBack+0x210>)
 8001970:	fba2 2303 	umull	r2, r3, r2, r3
 8001974:	08db      	lsrs	r3, r3, #3
 8001976:	b29a      	uxth	r2, r3
 8001978:	4b60      	ldr	r3, [pc, #384]	@ (8001afc <FND_DispDataCallBack+0x210>)
 800197a:	fba3 1302 	umull	r1, r3, r3, r2
 800197e:	08d9      	lsrs	r1, r3, #3
 8001980:	460b      	mov	r3, r1
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	440b      	add	r3, r1
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	b29b      	uxth	r3, r3
 800198c:	4618      	mov	r0, r3
 800198e:	f000 f8f7 	bl	8001b80 <FND_DispDigit>
		FND_DispOn(digitPos);
 8001992:	4b58      	ldr	r3, [pc, #352]	@ (8001af4 <FND_DispDataCallBack+0x208>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f000 f8da 	bl	8001b50 <FND_DispOn>
		break;
 800199c:	e0a7      	b.n	8001aee <FND_DispDataCallBack+0x202>
	case DIGIT_100:
		FND_DispOffAll();
 800199e:	f000 f8b5 	bl	8001b0c <FND_DispOffAll>
		FND_DispDigit(fndDispNum /100 % 10);
 80019a2:	4b55      	ldr	r3, [pc, #340]	@ (8001af8 <FND_DispDataCallBack+0x20c>)
 80019a4:	881b      	ldrh	r3, [r3, #0]
 80019a6:	4a56      	ldr	r2, [pc, #344]	@ (8001b00 <FND_DispDataCallBack+0x214>)
 80019a8:	fba2 2303 	umull	r2, r3, r2, r3
 80019ac:	095b      	lsrs	r3, r3, #5
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	4b52      	ldr	r3, [pc, #328]	@ (8001afc <FND_DispDataCallBack+0x210>)
 80019b2:	fba3 1302 	umull	r1, r3, r3, r2
 80019b6:	08d9      	lsrs	r1, r3, #3
 80019b8:	460b      	mov	r3, r1
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	440b      	add	r3, r1
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	4618      	mov	r0, r3
 80019c6:	f000 f8db 	bl	8001b80 <FND_DispDigit>
		FND_DispOn(digitPos);
 80019ca:	4b4a      	ldr	r3, [pc, #296]	@ (8001af4 <FND_DispDataCallBack+0x208>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 f8be 	bl	8001b50 <FND_DispOn>
		break;
 80019d4:	e08b      	b.n	8001aee <FND_DispDataCallBack+0x202>
	case DIGIT_1000:
		FND_DispOffAll();
 80019d6:	f000 f899 	bl	8001b0c <FND_DispOffAll>
		FND_DispDigit(fndDispNum /1000 % 10);
 80019da:	4b47      	ldr	r3, [pc, #284]	@ (8001af8 <FND_DispDataCallBack+0x20c>)
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	4a49      	ldr	r2, [pc, #292]	@ (8001b04 <FND_DispDataCallBack+0x218>)
 80019e0:	fba2 2303 	umull	r2, r3, r2, r3
 80019e4:	099b      	lsrs	r3, r3, #6
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	4b44      	ldr	r3, [pc, #272]	@ (8001afc <FND_DispDataCallBack+0x210>)
 80019ea:	fba3 1302 	umull	r1, r3, r3, r2
 80019ee:	08d9      	lsrs	r1, r3, #3
 80019f0:	460b      	mov	r3, r1
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	440b      	add	r3, r1
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 f8bf 	bl	8001b80 <FND_DispDigit>
		FND_DispOn(digitPos);
 8001a02:	4b3c      	ldr	r3, [pc, #240]	@ (8001af4 <FND_DispDataCallBack+0x208>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 f8a2 	bl	8001b50 <FND_DispOn>
		break;
 8001a0c:	e06f      	b.n	8001aee <FND_DispDataCallBack+0x202>
	case DIGIT_DP_1:
		FND_DispOffAll();
 8001a0e:	f000 f87d 	bl	8001b0c <FND_DispOffAll>
		if (fndDispDp & (1<<0)) {
 8001a12:	4b3d      	ldr	r3, [pc, #244]	@ (8001b08 <FND_DispDataCallBack+0x21c>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <FND_DispDataCallBack+0x13a>
			FND_DispDigit(10); // DP ON
 8001a1e:	200a      	movs	r0, #10
 8001a20:	f000 f8ae 	bl	8001b80 <FND_DispDigit>
 8001a24:	e002      	b.n	8001a2c <FND_DispDataCallBack+0x140>
		} else {
			FND_DispDigit(11); // ALL OFF
 8001a26:	200b      	movs	r0, #11
 8001a28:	f000 f8aa 	bl	8001b80 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8001a2c:	4b31      	ldr	r3, [pc, #196]	@ (8001af4 <FND_DispDataCallBack+0x208>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	425a      	negs	r2, r3
 8001a32:	f003 0303 	and.w	r3, r3, #3
 8001a36:	f002 0203 	and.w	r2, r2, #3
 8001a3a:	bf58      	it	pl
 8001a3c:	4253      	negpl	r3, r2
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f000 f886 	bl	8001b50 <FND_DispOn>
		break;
 8001a44:	e053      	b.n	8001aee <FND_DispDataCallBack+0x202>
	case DIGIT_DP_10:
		FND_DispOffAll();
 8001a46:	f000 f861 	bl	8001b0c <FND_DispOffAll>
		if (fndDispDp & (1<<1)) {
 8001a4a:	4b2f      	ldr	r3, [pc, #188]	@ (8001b08 <FND_DispDataCallBack+0x21c>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <FND_DispDataCallBack+0x172>
			FND_DispDigit(10); // DP ON
 8001a56:	200a      	movs	r0, #10
 8001a58:	f000 f892 	bl	8001b80 <FND_DispDigit>
 8001a5c:	e002      	b.n	8001a64 <FND_DispDataCallBack+0x178>
		} else {
			FND_DispDigit(11); // ALL OFF
 8001a5e:	200b      	movs	r0, #11
 8001a60:	f000 f88e 	bl	8001b80 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8001a64:	4b23      	ldr	r3, [pc, #140]	@ (8001af4 <FND_DispDataCallBack+0x208>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	425a      	negs	r2, r3
 8001a6a:	f003 0303 	and.w	r3, r3, #3
 8001a6e:	f002 0203 	and.w	r2, r2, #3
 8001a72:	bf58      	it	pl
 8001a74:	4253      	negpl	r3, r2
 8001a76:	4618      	mov	r0, r3
 8001a78:	f000 f86a 	bl	8001b50 <FND_DispOn>
		break;
 8001a7c:	e037      	b.n	8001aee <FND_DispDataCallBack+0x202>
	case DIGIT_DP_100:
		FND_DispOffAll();
 8001a7e:	f000 f845 	bl	8001b0c <FND_DispOffAll>
		if (fndDispDp & (1<<2)) {
 8001a82:	4b21      	ldr	r3, [pc, #132]	@ (8001b08 <FND_DispDataCallBack+0x21c>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	f003 0304 	and.w	r3, r3, #4
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <FND_DispDataCallBack+0x1aa>
			FND_DispDigit(10); // DP ON
 8001a8e:	200a      	movs	r0, #10
 8001a90:	f000 f876 	bl	8001b80 <FND_DispDigit>
 8001a94:	e002      	b.n	8001a9c <FND_DispDataCallBack+0x1b0>
		} else {
			FND_DispDigit(11); // ALL OFF
 8001a96:	200b      	movs	r0, #11
 8001a98:	f000 f872 	bl	8001b80 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8001a9c:	4b15      	ldr	r3, [pc, #84]	@ (8001af4 <FND_DispDataCallBack+0x208>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	425a      	negs	r2, r3
 8001aa2:	f003 0303 	and.w	r3, r3, #3
 8001aa6:	f002 0203 	and.w	r2, r2, #3
 8001aaa:	bf58      	it	pl
 8001aac:	4253      	negpl	r3, r2
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f000 f84e 	bl	8001b50 <FND_DispOn>
		break;
 8001ab4:	e01b      	b.n	8001aee <FND_DispDataCallBack+0x202>
	case DIGIT_DP_1000:
		FND_DispOffAll();
 8001ab6:	f000 f829 	bl	8001b0c <FND_DispOffAll>
		if (fndDispDp & (1<<3)) {
 8001aba:	4b13      	ldr	r3, [pc, #76]	@ (8001b08 <FND_DispDataCallBack+0x21c>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <FND_DispDataCallBack+0x1e2>
			FND_DispDigit(10); // DP ON
 8001ac6:	200a      	movs	r0, #10
 8001ac8:	f000 f85a 	bl	8001b80 <FND_DispDigit>
 8001acc:	e002      	b.n	8001ad4 <FND_DispDataCallBack+0x1e8>
		} else {
			FND_DispDigit(11); // ALL OFF
 8001ace:	200b      	movs	r0, #11
 8001ad0:	f000 f856 	bl	8001b80 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8001ad4:	4b07      	ldr	r3, [pc, #28]	@ (8001af4 <FND_DispDataCallBack+0x208>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	425a      	negs	r2, r3
 8001ada:	f003 0303 	and.w	r3, r3, #3
 8001ade:	f002 0203 	and.w	r2, r2, #3
 8001ae2:	bf58      	it	pl
 8001ae4:	4253      	negpl	r3, r2
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f000 f832 	bl	8001b50 <FND_DispOn>
		break;
 8001aec:	bf00      	nop
	}
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000374 	.word	0x20000374
 8001af8:	20000370 	.word	0x20000370
 8001afc:	cccccccd 	.word	0xcccccccd
 8001b00:	51eb851f 	.word	0x51eb851f
 8001b04:	10624dd3 	.word	0x10624dd3
 8001b08:	20000372 	.word	0x20000372

08001b0c <FND_DispOffAll>:
//		}
//	}
//}

void FND_DispOffAll()
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
	// GPIO_Write(GPIOx, Pin, RESET);
	for (int i=0; i<4; i++) {
 8001b12:	2300      	movs	r3, #0
 8001b14:	607b      	str	r3, [r7, #4]
 8001b16:	e010      	b.n	8001b3a <FND_DispOffAll+0x2e>
		HAL_GPIO_WritePin(fndDigitCom[i].GPIOx, fndDigitCom[i].pinNum, RESET);
 8001b18:	4a0c      	ldr	r2, [pc, #48]	@ (8001b4c <FND_DispOffAll+0x40>)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001b20:	4a0a      	ldr	r2, [pc, #40]	@ (8001b4c <FND_DispOffAll+0x40>)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	4413      	add	r3, r2
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	4619      	mov	r1, r3
 8001b30:	f000 fe8a 	bl	8002848 <HAL_GPIO_WritePin>
	for (int i=0; i<4; i++) {
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3301      	adds	r3, #1
 8001b38:	607b      	str	r3, [r7, #4]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b03      	cmp	r3, #3
 8001b3e:	ddeb      	ble.n	8001b18 <FND_DispOffAll+0xc>
	}
}
 8001b40:	bf00      	nop
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	2000000c 	.word	0x2000000c

08001b50 <FND_DispOn>:

void FND_DispOn(int fndPos)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
	// GPIO_Write(GPIOx, Pin, SET);
	HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, SET);
 8001b58:	4a08      	ldr	r2, [pc, #32]	@ (8001b7c <FND_DispOn+0x2c>)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001b60:	4a06      	ldr	r2, [pc, #24]	@ (8001b7c <FND_DispOn+0x2c>)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	4413      	add	r3, r2
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f000 fe6a 	bl	8002848 <HAL_GPIO_WritePin>
}
 8001b74:	bf00      	nop
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	2000000c 	.word	0x2000000c

08001b80 <FND_DispDigit>:


void FND_DispDigit(uint16_t digit)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	80fb      	strh	r3, [r7, #6]
	const uint8_t segFont[12] = {
 8001b8a:	4a1f      	ldr	r2, [pc, #124]	@ (8001c08 <FND_DispDigit+0x88>)
 8001b8c:	f107 0308 	add.w	r3, r7, #8
 8001b90:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b92:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		    0x90,  // 9
			0x7F,  // dot
			0xFF  // all off
	};

	for (int i=0; i<8; i++) {
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	e02c      	b.n	8001bf6 <FND_DispDigit+0x76>
		if (!(segFont[digit] & (1<<i))) {
 8001b9c:	88fb      	ldrh	r3, [r7, #6]
 8001b9e:	3318      	adds	r3, #24
 8001ba0:	443b      	add	r3, r7
 8001ba2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	fa42 f303 	asr.w	r3, r2, r3
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10e      	bne.n	8001bd4 <FND_DispDigit+0x54>
			HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, RESET); // 0 -> on
 8001bb6:	4a15      	ldr	r2, [pc, #84]	@ (8001c0c <FND_DispDigit+0x8c>)
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001bbe:	4a13      	ldr	r2, [pc, #76]	@ (8001c0c <FND_DispDigit+0x8c>)
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	4413      	add	r3, r2
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	2200      	movs	r2, #0
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f000 fe3b 	bl	8002848 <HAL_GPIO_WritePin>
 8001bd2:	e00d      	b.n	8001bf0 <FND_DispDigit+0x70>
		}
		else {
			HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, SET); // 1 -> off
 8001bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8001c0c <FND_DispDigit+0x8c>)
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001bdc:	4a0b      	ldr	r2, [pc, #44]	@ (8001c0c <FND_DispDigit+0x8c>)
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	4413      	add	r3, r2
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	2201      	movs	r2, #1
 8001bea:	4619      	mov	r1, r3
 8001bec:	f000 fe2c 	bl	8002848 <HAL_GPIO_WritePin>
	for (int i=0; i<8; i++) {
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	617b      	str	r3, [r7, #20]
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	2b07      	cmp	r3, #7
 8001bfa:	ddcf      	ble.n	8001b9c <FND_DispDigit+0x1c>
		}
	}
}
 8001bfc:	bf00      	nop
 8001bfe:	bf00      	nop
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	0800658c 	.word	0x0800658c
 8001c0c:	2000002c 	.word	0x2000002c

08001c10 <LCD_Init>:

static uint8_t lcdData = 0;
static I2C_HandleTypeDef *hLcdI2C;

void LCD_Init(I2C_HandleTypeDef *hI2C)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
	hLcdI2C = hI2C;
 8001c18:	4a18      	ldr	r2, [pc, #96]	@ (8001c7c <LCD_Init+0x6c>)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6013      	str	r3, [r2, #0]
	HAL_Delay(50);
 8001c1e:	2032      	movs	r0, #50	@ 0x32
 8001c20:	f000 faae 	bl	8002180 <HAL_Delay>
	LCD_cmdMode();
 8001c24:	f000 f852 	bl	8001ccc <LCD_cmdMode>
	LCD_writeMode();
 8001c28:	f000 f874 	bl	8001d14 <LCD_writeMode>
	LCD_sendNibbleData(0x30);
 8001c2c:	2030      	movs	r0, #48	@ 0x30
 8001c2e:	f000 f8a7 	bl	8001d80 <LCD_sendNibbleData>
	HAL_Delay(5);
 8001c32:	2005      	movs	r0, #5
 8001c34:	f000 faa4 	bl	8002180 <HAL_Delay>
	LCD_sendNibbleData(0x30);
 8001c38:	2030      	movs	r0, #48	@ 0x30
 8001c3a:	f000 f8a1 	bl	8001d80 <LCD_sendNibbleData>
	HAL_Delay(1);
 8001c3e:	2001      	movs	r0, #1
 8001c40:	f000 fa9e 	bl	8002180 <HAL_Delay>
	LCD_sendNibbleData(0x30);
 8001c44:	2030      	movs	r0, #48	@ 0x30
 8001c46:	f000 f89b 	bl	8001d80 <LCD_sendNibbleData>
	LCD_sendNibbleData(0x20);
 8001c4a:	2020      	movs	r0, #32
 8001c4c:	f000 f898 	bl	8001d80 <LCD_sendNibbleData>
	LCD_sendData(LCD_4BIT_FUNC_SET);
 8001c50:	2028      	movs	r0, #40	@ 0x28
 8001c52:	f000 f8b9 	bl	8001dc8 <LCD_sendData>
	LCD_sendData(LCD_DISP_OFF);
 8001c56:	2008      	movs	r0, #8
 8001c58:	f000 f8b6 	bl	8001dc8 <LCD_sendData>
	LCD_sendData(LCD_DISP_CLEAR);
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	f000 f8b3 	bl	8001dc8 <LCD_sendData>
	LCD_sendData(LCD_ENTRY_MODE_SET);
 8001c62:	2006      	movs	r0, #6
 8001c64:	f000 f8b0 	bl	8001dc8 <LCD_sendData>
	LCD_sendData(LCD_DISP_ON);
 8001c68:	200c      	movs	r0, #12
 8001c6a:	f000 f8ad 	bl	8001dc8 <LCD_sendData>
	LCD_backLightOn();
 8001c6e:	f000 f81d 	bl	8001cac <LCD_backLightOn>
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	2000037c 	.word	0x2000037c

08001c80 <LCD_sendI2C>:

void LCD_sendI2C(uint8_t data)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af02      	add	r7, sp, #8
 8001c86:	4603      	mov	r3, r0
 8001c88:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(hLcdI2C, LCD_DEV_ADDR<<1, &data, 1, 1000);
 8001c8a:	4b07      	ldr	r3, [pc, #28]	@ (8001ca8 <LCD_sendI2C+0x28>)
 8001c8c:	6818      	ldr	r0, [r3, #0]
 8001c8e:	1dfa      	adds	r2, r7, #7
 8001c90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	2301      	movs	r3, #1
 8001c98:	214e      	movs	r1, #78	@ 0x4e
 8001c9a:	f000 ff33 	bl	8002b04 <HAL_I2C_Master_Transmit>
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	2000037c 	.word	0x2000037c

08001cac <LCD_backLightOn>:

void LCD_backLightOn()
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_BL);
 8001cb0:	4b05      	ldr	r3, [pc, #20]	@ (8001cc8 <LCD_backLightOn+0x1c>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	f043 0308 	orr.w	r3, r3, #8
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	4b03      	ldr	r3, [pc, #12]	@ (8001cc8 <LCD_backLightOn+0x1c>)
 8001cbc:	701a      	strb	r2, [r3, #0]
}
 8001cbe:	bf00      	nop
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	20000378 	.word	0x20000378

08001ccc <LCD_cmdMode>:
{
	lcdData &= ~(1<<LCD_BL);
}

void LCD_cmdMode()
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RS);
 8001cd0:	4b06      	ldr	r3, [pc, #24]	@ (8001cec <LCD_cmdMode+0x20>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	f023 0301 	bic.w	r3, r3, #1
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	4b04      	ldr	r3, [pc, #16]	@ (8001cec <LCD_cmdMode+0x20>)
 8001cdc:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001cde:	4b03      	ldr	r3, [pc, #12]	@ (8001cec <LCD_cmdMode+0x20>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff ffcc 	bl	8001c80 <LCD_sendI2C>
}
 8001ce8:	bf00      	nop
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20000378 	.word	0x20000378

08001cf0 <LCD_charMode>:

void LCD_charMode()
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_RS);
 8001cf4:	4b06      	ldr	r3, [pc, #24]	@ (8001d10 <LCD_charMode+0x20>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	4b04      	ldr	r3, [pc, #16]	@ (8001d10 <LCD_charMode+0x20>)
 8001d00:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001d02:	4b03      	ldr	r3, [pc, #12]	@ (8001d10 <LCD_charMode+0x20>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff ffba 	bl	8001c80 <LCD_sendI2C>
}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20000378 	.word	0x20000378

08001d14 <LCD_writeMode>:

void LCD_writeMode()
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RW);
 8001d18:	4b06      	ldr	r3, [pc, #24]	@ (8001d34 <LCD_writeMode+0x20>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	f023 0302 	bic.w	r3, r3, #2
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	4b04      	ldr	r3, [pc, #16]	@ (8001d34 <LCD_writeMode+0x20>)
 8001d24:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001d26:	4b03      	ldr	r3, [pc, #12]	@ (8001d34 <LCD_writeMode+0x20>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff ffa8 	bl	8001c80 <LCD_sendI2C>
}
 8001d30:	bf00      	nop
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20000378 	.word	0x20000378

08001d38 <LCD_E_High>:

void LCD_E_High()
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_E);
 8001d3c:	4b06      	ldr	r3, [pc, #24]	@ (8001d58 <LCD_E_High+0x20>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	f043 0304 	orr.w	r3, r3, #4
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	4b04      	ldr	r3, [pc, #16]	@ (8001d58 <LCD_E_High+0x20>)
 8001d48:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001d4a:	4b03      	ldr	r3, [pc, #12]	@ (8001d58 <LCD_E_High+0x20>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff ff96 	bl	8001c80 <LCD_sendI2C>
}
 8001d54:	bf00      	nop
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	20000378 	.word	0x20000378

08001d5c <LCD_E_Low>:

void LCD_E_Low()
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_E);
 8001d60:	4b06      	ldr	r3, [pc, #24]	@ (8001d7c <LCD_E_Low+0x20>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	f023 0304 	bic.w	r3, r3, #4
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	4b04      	ldr	r3, [pc, #16]	@ (8001d7c <LCD_E_Low+0x20>)
 8001d6c:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001d6e:	4b03      	ldr	r3, [pc, #12]	@ (8001d7c <LCD_E_Low+0x20>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff ff84 	bl	8001c80 <LCD_sendI2C>
}
 8001d78:	bf00      	nop
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20000378 	.word	0x20000378

08001d80 <LCD_sendNibbleData>:

void LCD_sendNibbleData(uint8_t data)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	71fb      	strb	r3, [r7, #7]
	LCD_E_High();
 8001d8a:	f7ff ffd5 	bl	8001d38 <LCD_E_High>
	lcdData = (data & 0xf0) | (lcdData & 0x0f);
 8001d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d92:	f023 030f 	bic.w	r3, r3, #15
 8001d96:	b25a      	sxtb	r2, r3
 8001d98:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc4 <LCD_sendNibbleData+0x44>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	b25b      	sxtb	r3, r3
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	b25b      	sxtb	r3, r3
 8001da4:	4313      	orrs	r3, r2
 8001da6:	b25b      	sxtb	r3, r3
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <LCD_sendNibbleData+0x44>)
 8001dac:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001dae:	4b05      	ldr	r3, [pc, #20]	@ (8001dc4 <LCD_sendNibbleData+0x44>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff ff64 	bl	8001c80 <LCD_sendI2C>
	LCD_E_Low();
 8001db8:	f7ff ffd0 	bl	8001d5c <LCD_E_Low>
}
 8001dbc:	bf00      	nop
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20000378 	.word	0x20000378

08001dc8 <LCD_sendData>:

void LCD_sendData(uint8_t data)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
	// High 4bit
	LCD_sendNibbleData(data);
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff ffd3 	bl	8001d80 <LCD_sendNibbleData>

	data = data << 4;
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	011b      	lsls	r3, r3, #4
 8001dde:	71fb      	strb	r3, [r7, #7]
	// Low 4bit
	LCD_sendNibbleData(data);
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff ffcc 	bl	8001d80 <LCD_sendNibbleData>
}
 8001de8:	bf00      	nop
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <LCD_writeCmdData>:

void LCD_writeCmdData(uint8_t data)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	71fb      	strb	r3, [r7, #7]
	LCD_writeMode();
 8001dfa:	f7ff ff8b 	bl	8001d14 <LCD_writeMode>
	LCD_cmdMode();
 8001dfe:	f7ff ff65 	bl	8001ccc <LCD_cmdMode>
	LCD_sendData(data);
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff ffdf 	bl	8001dc8 <LCD_sendData>
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <LCD_writeCharData>:

void LCD_writeCharData(uint8_t data)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	4603      	mov	r3, r0
 8001e1a:	71fb      	strb	r3, [r7, #7]
	LCD_writeMode();
 8001e1c:	f7ff ff7a 	bl	8001d14 <LCD_writeMode>
	LCD_charMode();
 8001e20:	f7ff ff66 	bl	8001cf0 <LCD_charMode>
	LCD_sendData(data);
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff ffce 	bl	8001dc8 <LCD_sendData>
}
 8001e2c:	bf00      	nop
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <LCD_writeString>:

void LCD_writeString(char *str)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	for (int i=0; str[i]; i++) {
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	e009      	b.n	8001e56 <LCD_writeString+0x22>
		LCD_writeCharData(str[i]);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	4413      	add	r3, r2
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff ffe1 	bl	8001e12 <LCD_writeCharData>
	for (int i=0; str[i]; i++) {
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	3301      	adds	r3, #1
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1ef      	bne.n	8001e42 <LCD_writeString+0xe>
	}
}
 8001e62:	bf00      	nop
 8001e64:	bf00      	nop
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	460a      	mov	r2, r1
 8001e76:	71fb      	strb	r3, [r7, #7]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	71bb      	strb	r3, [r7, #6]
	col %= 16;
 8001e7c:	79bb      	ldrb	r3, [r7, #6]
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	71bb      	strb	r3, [r7, #6]
	row %= 2;
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	71fb      	strb	r3, [r7, #7]

	uint8_t lcdRegAddr = (0x40 * row) +col;
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	019b      	lsls	r3, r3, #6
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	79bb      	ldrb	r3, [r7, #6]
 8001e94:	4413      	add	r3, r2
 8001e96:	73fb      	strb	r3, [r7, #15]
	uint8_t command = 0x80 + lcdRegAddr;
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
 8001e9a:	3b80      	subs	r3, #128	@ 0x80
 8001e9c:	73bb      	strb	r3, [r7, #14]
	LCD_writeCmdData(command);
 8001e9e:	7bbb      	ldrb	r3, [r7, #14]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ffa5 	bl	8001df0 <LCD_writeCmdData>
}
 8001ea6:	bf00      	nop
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <LCD_writeStringXY>:

void LCD_writeStringXY(uint8_t row, uint8_t col, char *str)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	603a      	str	r2, [r7, #0]
 8001eb8:	71fb      	strb	r3, [r7, #7]
 8001eba:	460b      	mov	r3, r1
 8001ebc:	71bb      	strb	r3, [r7, #6]
	LCD_gotoXY(row, col);
 8001ebe:	79ba      	ldrb	r2, [r7, #6]
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	4611      	mov	r1, r2
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff ffd1 	bl	8001e6c <LCD_gotoXY>
	LCD_writeString(str);
 8001eca:	6838      	ldr	r0, [r7, #0]
 8001ecc:	f7ff ffb2 	bl	8001e34 <LCD_writeString>
}
 8001ed0:	bf00      	nop
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <LCD_clear>:

void LCD_clear()
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
    LCD_writeCmdData(LCD_DISP_CLEAR);
 8001edc:	2001      	movs	r0, #1
 8001ede:	f7ff ff87 	bl	8001df0 <LCD_writeCmdData>
    HAL_Delay(2);
 8001ee2:	2002      	movs	r0, #2
 8001ee4:	f000 f94c 	bl	8002180 <HAL_Delay>
}
 8001ee8:	bf00      	nop
 8001eea:	bd80      	pop	{r7, pc}

08001eec <LedBar_Write>:
		{GPIOC, GPIO_PIN_2},
		{GPIOC, GPIO_PIN_3}
};

void LedBar_Write(uint8_t data)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	71fb      	strb	r3, [r7, #7]
	for (int i=0; i<8; i++) {
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	e027      	b.n	8001f4c <LedBar_Write+0x60>
		if ((data & (1<<i)) == 0) {
 8001efc:	79fa      	ldrb	r2, [r7, #7]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	fa42 f303 	asr.w	r3, r2, r3
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d10e      	bne.n	8001f2a <LedBar_Write+0x3e>
			HAL_GPIO_WritePin(ledBar[i].GPIOx, ledBar[i].pinNum, RESET);
 8001f0c:	4a13      	ldr	r2, [pc, #76]	@ (8001f5c <LedBar_Write+0x70>)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001f14:	4a11      	ldr	r2, [pc, #68]	@ (8001f5c <LedBar_Write+0x70>)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	4413      	add	r3, r2
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	2200      	movs	r2, #0
 8001f22:	4619      	mov	r1, r3
 8001f24:	f000 fc90 	bl	8002848 <HAL_GPIO_WritePin>
 8001f28:	e00d      	b.n	8001f46 <LedBar_Write+0x5a>
		}
		else {
			HAL_GPIO_WritePin(ledBar[i].GPIOx, ledBar[i].pinNum, SET);
 8001f2a:	4a0c      	ldr	r2, [pc, #48]	@ (8001f5c <LedBar_Write+0x70>)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001f32:	4a0a      	ldr	r2, [pc, #40]	@ (8001f5c <LedBar_Write+0x70>)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	4413      	add	r3, r2
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	2201      	movs	r2, #1
 8001f40:	4619      	mov	r1, r3
 8001f42:	f000 fc81 	bl	8002848 <HAL_GPIO_WritePin>
	for (int i=0; i<8; i++) {
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2b07      	cmp	r3, #7
 8001f50:	ddd4      	ble.n	8001efc <LedBar_Write+0x10>
		}
	}
}
 8001f52:	bf00      	nop
 8001f54:	bf00      	nop
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	2000006c 	.word	0x2000006c

08001f60 <delay_us>:
#include "UltraSonic.h"
#define FILTER_SIZE 5


void delay_us(uint16_t us)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f94 <delay_us+0x34>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start(&htim4);
 8001f72:	4808      	ldr	r0, [pc, #32]	@ (8001f94 <delay_us+0x34>)
 8001f74:	f001 fe08 	bl	8003b88 <HAL_TIM_Base_Start>

	while(__HAL_TIM_GET_COUNTER(&htim4) < us);
 8001f78:	bf00      	nop
 8001f7a:	4b06      	ldr	r3, [pc, #24]	@ (8001f94 <delay_us+0x34>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f80:	88fb      	ldrh	r3, [r7, #6]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d3f9      	bcc.n	8001f7a <delay_us+0x1a>
	HAL_TIM_Base_Stop(&htim4);
 8001f86:	4803      	ldr	r0, [pc, #12]	@ (8001f94 <delay_us+0x34>)
 8001f88:	f001 fe58 	bl	8003c3c <HAL_TIM_Base_Stop>
}
 8001f8c:	bf00      	nop
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20000250 	.word	0x20000250

08001f98 <UltraSonic_Init>:

void UltraSonic_Init(UltraSonic_TypeDef *hultra, GPIO_TypeDef *Trig_GPIOx, uint16_t Trig_pinNum,  GPIO_TypeDef *Echo_GPIOx, uint16_t Echo_pinNum) {
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	603b      	str	r3, [r7, #0]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	80fb      	strh	r3, [r7, #6]
	hultra->Trig_GPIOx = Trig_GPIOx;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	601a      	str	r2, [r3, #0]
	hultra->Trig_pinNum = Trig_pinNum;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	88fa      	ldrh	r2, [r7, #6]
 8001fb2:	809a      	strh	r2, [r3, #4]
	hultra->Echo_GPIOx = Echo_GPIOx;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	609a      	str	r2, [r3, #8]
	hultra->Echo_pinNum = Echo_pinNum;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8b3a      	ldrh	r2, [r7, #24]
 8001fbe:	819a      	strh	r2, [r3, #12]
}
 8001fc0:	bf00      	nop
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <UltraSonic_GetDistance>:

int UltraSonic_GetDistance (UltraSonic_TypeDef *hultra)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
	uint32_t count = 0;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	613b      	str	r3, [r7, #16]
	int distance = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60fb      	str	r3, [r7, #12]

	// trig
	HAL_GPIO_WritePin(hultra->Trig_GPIOx, hultra->Trig_pinNum, GPIO_PIN_SET);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6818      	ldr	r0, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	889b      	ldrh	r3, [r3, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	f000 fc2e 	bl	8002848 <HAL_GPIO_WritePin>
	delay_us(10);
 8001fec:	200a      	movs	r0, #10
 8001fee:	f7ff ffb7 	bl	8001f60 <delay_us>
	HAL_GPIO_WritePin(hultra->Trig_GPIOx, hultra->Trig_pinNum, GPIO_PIN_RESET);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6818      	ldr	r0, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	889b      	ldrh	r3, [r3, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f000 fc23 	bl	8002848 <HAL_GPIO_WritePin>

	// wait echo -> high
	uint32_t timeout = 30000;
 8002002:	f247 5330 	movw	r3, #30000	@ 0x7530
 8002006:	617b      	str	r3, [r7, #20]
	while(!(HAL_GPIO_ReadPin(hultra->Echo_GPIOx, hultra->Echo_pinNum)))
 8002008:	e008      	b.n	800201c <UltraSonic_GetDistance+0x50>
	{
		if (--timeout == 0)
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	3b01      	subs	r3, #1
 800200e:	617b      	str	r3, [r7, #20]
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d102      	bne.n	800201c <UltraSonic_GetDistance+0x50>
			return -1;
 8002016:	f04f 33ff 	mov.w	r3, #4294967295
 800201a:	e037      	b.n	800208c <UltraSonic_GetDistance+0xc0>
	while(!(HAL_GPIO_ReadPin(hultra->Echo_GPIOx, hultra->Echo_pinNum)))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	899b      	ldrh	r3, [r3, #12]
 8002024:	4619      	mov	r1, r3
 8002026:	4610      	mov	r0, r2
 8002028:	f000 fbf6 	bl	8002818 <HAL_GPIO_ReadPin>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0eb      	beq.n	800200a <UltraSonic_GetDistance+0x3e>
	}

	// timer start
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8002032:	4b18      	ldr	r3, [pc, #96]	@ (8002094 <UltraSonic_GetDistance+0xc8>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2200      	movs	r2, #0
 8002038:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start(&htim4);
 800203a:	4816      	ldr	r0, [pc, #88]	@ (8002094 <UltraSonic_GetDistance+0xc8>)
 800203c:	f001 fda4 	bl	8003b88 <HAL_TIM_Base_Start>

	// wait echo -> low
	timeout = 30000;
 8002040:	f247 5330 	movw	r3, #30000	@ 0x7530
 8002044:	617b      	str	r3, [r7, #20]
	while(HAL_GPIO_ReadPin(hultra->Echo_GPIOx, hultra->Echo_pinNum))
 8002046:	e008      	b.n	800205a <UltraSonic_GetDistance+0x8e>
	{
		if (--timeout == 0)
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	3b01      	subs	r3, #1
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d102      	bne.n	800205a <UltraSonic_GetDistance+0x8e>
			return -1;
 8002054:	f04f 33ff 	mov.w	r3, #4294967295
 8002058:	e018      	b.n	800208c <UltraSonic_GetDistance+0xc0>
	while(HAL_GPIO_ReadPin(hultra->Echo_GPIOx, hultra->Echo_pinNum))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	899b      	ldrh	r3, [r3, #12]
 8002062:	4619      	mov	r1, r3
 8002064:	4610      	mov	r0, r2
 8002066:	f000 fbd7 	bl	8002818 <HAL_GPIO_ReadPin>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1eb      	bne.n	8002048 <UltraSonic_GetDistance+0x7c>
	}

	// timer stop
	HAL_TIM_Base_Stop(&htim4);
 8002070:	4808      	ldr	r0, [pc, #32]	@ (8002094 <UltraSonic_GetDistance+0xc8>)
 8002072:	f001 fde3 	bl	8003c3c <HAL_TIM_Base_Stop>
	count = __HAL_TIM_GET_COUNTER(&htim4);
 8002076:	4b07      	ldr	r3, [pc, #28]	@ (8002094 <UltraSonic_GetDistance+0xc8>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207c:	613b      	str	r3, [r7, #16]

	distance = count / 58;
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	4a05      	ldr	r2, [pc, #20]	@ (8002098 <UltraSonic_GetDistance+0xcc>)
 8002082:	fba2 2303 	umull	r2, r3, r2, r3
 8002086:	095b      	lsrs	r3, r3, #5
 8002088:	60fb      	str	r3, [r7, #12]

	return distance;
 800208a:	68fb      	ldr	r3, [r7, #12]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20000250 	.word	0x20000250
 8002098:	8d3dcb09 	.word	0x8d3dcb09

0800209c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020a0:	4b0e      	ldr	r3, [pc, #56]	@ (80020dc <HAL_Init+0x40>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a0d      	ldr	r2, [pc, #52]	@ (80020dc <HAL_Init+0x40>)
 80020a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020ac:	4b0b      	ldr	r3, [pc, #44]	@ (80020dc <HAL_Init+0x40>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a0a      	ldr	r2, [pc, #40]	@ (80020dc <HAL_Init+0x40>)
 80020b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020b8:	4b08      	ldr	r3, [pc, #32]	@ (80020dc <HAL_Init+0x40>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a07      	ldr	r2, [pc, #28]	@ (80020dc <HAL_Init+0x40>)
 80020be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020c4:	2003      	movs	r0, #3
 80020c6:	f000 f94f 	bl	8002368 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ca:	200f      	movs	r0, #15
 80020cc:	f000 f808 	bl	80020e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020d0:	f7fe fc12 	bl	80008f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40023c00 	.word	0x40023c00

080020e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020e8:	4b12      	ldr	r3, [pc, #72]	@ (8002134 <HAL_InitTick+0x54>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	4b12      	ldr	r3, [pc, #72]	@ (8002138 <HAL_InitTick+0x58>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	4619      	mov	r1, r3
 80020f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fe:	4618      	mov	r0, r3
 8002100:	f000 f967 	bl	80023d2 <HAL_SYSTICK_Config>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e00e      	b.n	800212c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b0f      	cmp	r3, #15
 8002112:	d80a      	bhi.n	800212a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002114:	2200      	movs	r2, #0
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	f04f 30ff 	mov.w	r0, #4294967295
 800211c:	f000 f92f 	bl	800237e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002120:	4a06      	ldr	r2, [pc, #24]	@ (800213c <HAL_InitTick+0x5c>)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002126:	2300      	movs	r3, #0
 8002128:	e000      	b.n	800212c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
}
 800212c:	4618      	mov	r0, r3
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	20000000 	.word	0x20000000
 8002138:	200000b0 	.word	0x200000b0
 800213c:	200000ac 	.word	0x200000ac

08002140 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002144:	4b06      	ldr	r3, [pc, #24]	@ (8002160 <HAL_IncTick+0x20>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	461a      	mov	r2, r3
 800214a:	4b06      	ldr	r3, [pc, #24]	@ (8002164 <HAL_IncTick+0x24>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4413      	add	r3, r2
 8002150:	4a04      	ldr	r2, [pc, #16]	@ (8002164 <HAL_IncTick+0x24>)
 8002152:	6013      	str	r3, [r2, #0]
}
 8002154:	bf00      	nop
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	200000b0 	.word	0x200000b0
 8002164:	20000380 	.word	0x20000380

08002168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return uwTick;
 800216c:	4b03      	ldr	r3, [pc, #12]	@ (800217c <HAL_GetTick+0x14>)
 800216e:	681b      	ldr	r3, [r3, #0]
}
 8002170:	4618      	mov	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	20000380 	.word	0x20000380

08002180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002188:	f7ff ffee 	bl	8002168 <HAL_GetTick>
 800218c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002198:	d005      	beq.n	80021a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800219a:	4b0a      	ldr	r3, [pc, #40]	@ (80021c4 <HAL_Delay+0x44>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	461a      	mov	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	4413      	add	r3, r2
 80021a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021a6:	bf00      	nop
 80021a8:	f7ff ffde 	bl	8002168 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d8f7      	bhi.n	80021a8 <HAL_Delay+0x28>
  {
  }
}
 80021b8:	bf00      	nop
 80021ba:	bf00      	nop
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	200000b0 	.word	0x200000b0

080021c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021d8:	4b0c      	ldr	r3, [pc, #48]	@ (800220c <__NVIC_SetPriorityGrouping+0x44>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021e4:	4013      	ands	r3, r2
 80021e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021fa:	4a04      	ldr	r2, [pc, #16]	@ (800220c <__NVIC_SetPriorityGrouping+0x44>)
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	60d3      	str	r3, [r2, #12]
}
 8002200:	bf00      	nop
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002214:	4b04      	ldr	r3, [pc, #16]	@ (8002228 <__NVIC_GetPriorityGrouping+0x18>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	0a1b      	lsrs	r3, r3, #8
 800221a:	f003 0307 	and.w	r3, r3, #7
}
 800221e:	4618      	mov	r0, r3
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	e000ed00 	.word	0xe000ed00

0800222c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	2b00      	cmp	r3, #0
 800223c:	db0b      	blt.n	8002256 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800223e:	79fb      	ldrb	r3, [r7, #7]
 8002240:	f003 021f 	and.w	r2, r3, #31
 8002244:	4907      	ldr	r1, [pc, #28]	@ (8002264 <__NVIC_EnableIRQ+0x38>)
 8002246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224a:	095b      	lsrs	r3, r3, #5
 800224c:	2001      	movs	r0, #1
 800224e:	fa00 f202 	lsl.w	r2, r0, r2
 8002252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	e000e100 	.word	0xe000e100

08002268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	6039      	str	r1, [r7, #0]
 8002272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002278:	2b00      	cmp	r3, #0
 800227a:	db0a      	blt.n	8002292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	b2da      	uxtb	r2, r3
 8002280:	490c      	ldr	r1, [pc, #48]	@ (80022b4 <__NVIC_SetPriority+0x4c>)
 8002282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002286:	0112      	lsls	r2, r2, #4
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	440b      	add	r3, r1
 800228c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002290:	e00a      	b.n	80022a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	b2da      	uxtb	r2, r3
 8002296:	4908      	ldr	r1, [pc, #32]	@ (80022b8 <__NVIC_SetPriority+0x50>)
 8002298:	79fb      	ldrb	r3, [r7, #7]
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	3b04      	subs	r3, #4
 80022a0:	0112      	lsls	r2, r2, #4
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	440b      	add	r3, r1
 80022a6:	761a      	strb	r2, [r3, #24]
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	e000e100 	.word	0xe000e100
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022bc:	b480      	push	{r7}
 80022be:	b089      	sub	sp, #36	@ 0x24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	f1c3 0307 	rsb	r3, r3, #7
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	bf28      	it	cs
 80022da:	2304      	movcs	r3, #4
 80022dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	3304      	adds	r3, #4
 80022e2:	2b06      	cmp	r3, #6
 80022e4:	d902      	bls.n	80022ec <NVIC_EncodePriority+0x30>
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	3b03      	subs	r3, #3
 80022ea:	e000      	b.n	80022ee <NVIC_EncodePriority+0x32>
 80022ec:	2300      	movs	r3, #0
 80022ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f0:	f04f 32ff 	mov.w	r2, #4294967295
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43da      	mvns	r2, r3
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	401a      	ands	r2, r3
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002304:	f04f 31ff 	mov.w	r1, #4294967295
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	fa01 f303 	lsl.w	r3, r1, r3
 800230e:	43d9      	mvns	r1, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002314:	4313      	orrs	r3, r2
         );
}
 8002316:	4618      	mov	r0, r3
 8002318:	3724      	adds	r7, #36	@ 0x24
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
	...

08002324 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3b01      	subs	r3, #1
 8002330:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002334:	d301      	bcc.n	800233a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002336:	2301      	movs	r3, #1
 8002338:	e00f      	b.n	800235a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800233a:	4a0a      	ldr	r2, [pc, #40]	@ (8002364 <SysTick_Config+0x40>)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3b01      	subs	r3, #1
 8002340:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002342:	210f      	movs	r1, #15
 8002344:	f04f 30ff 	mov.w	r0, #4294967295
 8002348:	f7ff ff8e 	bl	8002268 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800234c:	4b05      	ldr	r3, [pc, #20]	@ (8002364 <SysTick_Config+0x40>)
 800234e:	2200      	movs	r2, #0
 8002350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002352:	4b04      	ldr	r3, [pc, #16]	@ (8002364 <SysTick_Config+0x40>)
 8002354:	2207      	movs	r2, #7
 8002356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	e000e010 	.word	0xe000e010

08002368 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f7ff ff29 	bl	80021c8 <__NVIC_SetPriorityGrouping>
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800237e:	b580      	push	{r7, lr}
 8002380:	b086      	sub	sp, #24
 8002382:	af00      	add	r7, sp, #0
 8002384:	4603      	mov	r3, r0
 8002386:	60b9      	str	r1, [r7, #8]
 8002388:	607a      	str	r2, [r7, #4]
 800238a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002390:	f7ff ff3e 	bl	8002210 <__NVIC_GetPriorityGrouping>
 8002394:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	68b9      	ldr	r1, [r7, #8]
 800239a:	6978      	ldr	r0, [r7, #20]
 800239c:	f7ff ff8e 	bl	80022bc <NVIC_EncodePriority>
 80023a0:	4602      	mov	r2, r0
 80023a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023a6:	4611      	mov	r1, r2
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff ff5d 	bl	8002268 <__NVIC_SetPriority>
}
 80023ae:	bf00      	nop
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b082      	sub	sp, #8
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	4603      	mov	r3, r0
 80023be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff ff31 	bl	800222c <__NVIC_EnableIRQ>
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff ffa2 	bl	8002324 <SysTick_Config>
 80023e0:	4603      	mov	r3, r0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b084      	sub	sp, #16
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023f8:	f7ff feb6 	bl	8002168 <HAL_GetTick>
 80023fc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d008      	beq.n	800241c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2280      	movs	r2, #128	@ 0x80
 800240e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e052      	b.n	80024c2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 0216 	bic.w	r2, r2, #22
 800242a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	695a      	ldr	r2, [r3, #20]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800243a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002440:	2b00      	cmp	r3, #0
 8002442:	d103      	bne.n	800244c <HAL_DMA_Abort+0x62>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002448:	2b00      	cmp	r3, #0
 800244a:	d007      	beq.n	800245c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 0208 	bic.w	r2, r2, #8
 800245a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 0201 	bic.w	r2, r2, #1
 800246a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800246c:	e013      	b.n	8002496 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800246e:	f7ff fe7b 	bl	8002168 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b05      	cmp	r3, #5
 800247a:	d90c      	bls.n	8002496 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2220      	movs	r2, #32
 8002480:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2203      	movs	r2, #3
 8002486:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e015      	b.n	80024c2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1e4      	bne.n	800246e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a8:	223f      	movs	r2, #63	@ 0x3f
 80024aa:	409a      	lsls	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d004      	beq.n	80024e8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2280      	movs	r2, #128	@ 0x80
 80024e2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e00c      	b.n	8002502 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2205      	movs	r2, #5
 80024ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 0201 	bic.w	r2, r2, #1
 80024fe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
	...

08002510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002510:	b480      	push	{r7}
 8002512:	b089      	sub	sp, #36	@ 0x24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800251a:	2300      	movs	r3, #0
 800251c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800251e:	2300      	movs	r3, #0
 8002520:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002522:	2300      	movs	r3, #0
 8002524:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002526:	2300      	movs	r3, #0
 8002528:	61fb      	str	r3, [r7, #28]
 800252a:	e159      	b.n	80027e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800252c:	2201      	movs	r2, #1
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	4013      	ands	r3, r2
 800253e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	429a      	cmp	r2, r3
 8002546:	f040 8148 	bne.w	80027da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	2b01      	cmp	r3, #1
 8002554:	d005      	beq.n	8002562 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800255e:	2b02      	cmp	r3, #2
 8002560:	d130      	bne.n	80025c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	2203      	movs	r2, #3
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43db      	mvns	r3, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4013      	ands	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	68da      	ldr	r2, [r3, #12]
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4313      	orrs	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002598:	2201      	movs	r2, #1
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	091b      	lsrs	r3, r3, #4
 80025ae:	f003 0201 	and.w	r2, r3, #1
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 0303 	and.w	r3, r3, #3
 80025cc:	2b03      	cmp	r3, #3
 80025ce:	d017      	beq.n	8002600 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	2203      	movs	r2, #3
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d123      	bne.n	8002654 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	08da      	lsrs	r2, r3, #3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3208      	adds	r2, #8
 8002614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002618:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	220f      	movs	r2, #15
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43db      	mvns	r3, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	691a      	ldr	r2, [r3, #16]
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4313      	orrs	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	08da      	lsrs	r2, r3, #3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	3208      	adds	r2, #8
 800264e:	69b9      	ldr	r1, [r7, #24]
 8002650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	2203      	movs	r2, #3
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 0203 	and.w	r2, r3, #3
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 80a2 	beq.w	80027da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	4b57      	ldr	r3, [pc, #348]	@ (80027f8 <HAL_GPIO_Init+0x2e8>)
 800269c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269e:	4a56      	ldr	r2, [pc, #344]	@ (80027f8 <HAL_GPIO_Init+0x2e8>)
 80026a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80026a6:	4b54      	ldr	r3, [pc, #336]	@ (80027f8 <HAL_GPIO_Init+0x2e8>)
 80026a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026b2:	4a52      	ldr	r2, [pc, #328]	@ (80027fc <HAL_GPIO_Init+0x2ec>)
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	089b      	lsrs	r3, r3, #2
 80026b8:	3302      	adds	r3, #2
 80026ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	220f      	movs	r2, #15
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43db      	mvns	r3, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4013      	ands	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a49      	ldr	r2, [pc, #292]	@ (8002800 <HAL_GPIO_Init+0x2f0>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d019      	beq.n	8002712 <HAL_GPIO_Init+0x202>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a48      	ldr	r2, [pc, #288]	@ (8002804 <HAL_GPIO_Init+0x2f4>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d013      	beq.n	800270e <HAL_GPIO_Init+0x1fe>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a47      	ldr	r2, [pc, #284]	@ (8002808 <HAL_GPIO_Init+0x2f8>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d00d      	beq.n	800270a <HAL_GPIO_Init+0x1fa>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a46      	ldr	r2, [pc, #280]	@ (800280c <HAL_GPIO_Init+0x2fc>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d007      	beq.n	8002706 <HAL_GPIO_Init+0x1f6>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a45      	ldr	r2, [pc, #276]	@ (8002810 <HAL_GPIO_Init+0x300>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d101      	bne.n	8002702 <HAL_GPIO_Init+0x1f2>
 80026fe:	2304      	movs	r3, #4
 8002700:	e008      	b.n	8002714 <HAL_GPIO_Init+0x204>
 8002702:	2307      	movs	r3, #7
 8002704:	e006      	b.n	8002714 <HAL_GPIO_Init+0x204>
 8002706:	2303      	movs	r3, #3
 8002708:	e004      	b.n	8002714 <HAL_GPIO_Init+0x204>
 800270a:	2302      	movs	r3, #2
 800270c:	e002      	b.n	8002714 <HAL_GPIO_Init+0x204>
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <HAL_GPIO_Init+0x204>
 8002712:	2300      	movs	r3, #0
 8002714:	69fa      	ldr	r2, [r7, #28]
 8002716:	f002 0203 	and.w	r2, r2, #3
 800271a:	0092      	lsls	r2, r2, #2
 800271c:	4093      	lsls	r3, r2
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002724:	4935      	ldr	r1, [pc, #212]	@ (80027fc <HAL_GPIO_Init+0x2ec>)
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	089b      	lsrs	r3, r3, #2
 800272a:	3302      	adds	r3, #2
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002732:	4b38      	ldr	r3, [pc, #224]	@ (8002814 <HAL_GPIO_Init+0x304>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	43db      	mvns	r3, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4013      	ands	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002756:	4a2f      	ldr	r2, [pc, #188]	@ (8002814 <HAL_GPIO_Init+0x304>)
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800275c:	4b2d      	ldr	r3, [pc, #180]	@ (8002814 <HAL_GPIO_Init+0x304>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4313      	orrs	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002780:	4a24      	ldr	r2, [pc, #144]	@ (8002814 <HAL_GPIO_Init+0x304>)
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002786:	4b23      	ldr	r3, [pc, #140]	@ (8002814 <HAL_GPIO_Init+0x304>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	43db      	mvns	r3, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4013      	ands	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027aa:	4a1a      	ldr	r2, [pc, #104]	@ (8002814 <HAL_GPIO_Init+0x304>)
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027b0:	4b18      	ldr	r3, [pc, #96]	@ (8002814 <HAL_GPIO_Init+0x304>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027d4:	4a0f      	ldr	r2, [pc, #60]	@ (8002814 <HAL_GPIO_Init+0x304>)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	3301      	adds	r3, #1
 80027de:	61fb      	str	r3, [r7, #28]
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	2b0f      	cmp	r3, #15
 80027e4:	f67f aea2 	bls.w	800252c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027e8:	bf00      	nop
 80027ea:	bf00      	nop
 80027ec:	3724      	adds	r7, #36	@ 0x24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40013800 	.word	0x40013800
 8002800:	40020000 	.word	0x40020000
 8002804:	40020400 	.word	0x40020400
 8002808:	40020800 	.word	0x40020800
 800280c:	40020c00 	.word	0x40020c00
 8002810:	40021000 	.word	0x40021000
 8002814:	40013c00 	.word	0x40013c00

08002818 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	460b      	mov	r3, r1
 8002822:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691a      	ldr	r2, [r3, #16]
 8002828:	887b      	ldrh	r3, [r7, #2]
 800282a:	4013      	ands	r3, r2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d002      	beq.n	8002836 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002830:	2301      	movs	r3, #1
 8002832:	73fb      	strb	r3, [r7, #15]
 8002834:	e001      	b.n	800283a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002836:	2300      	movs	r3, #0
 8002838:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800283a:	7bfb      	ldrb	r3, [r7, #15]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	460b      	mov	r3, r1
 8002852:	807b      	strh	r3, [r7, #2]
 8002854:	4613      	mov	r3, r2
 8002856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002858:	787b      	ldrb	r3, [r7, #1]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800285e:	887a      	ldrh	r2, [r7, #2]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002864:	e003      	b.n	800286e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002866:	887b      	ldrh	r3, [r7, #2]
 8002868:	041a      	lsls	r2, r3, #16
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	619a      	str	r2, [r3, #24]
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
	...

0800287c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e12b      	b.n	8002ae6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d106      	bne.n	80028a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7fd ff58 	bl	8000758 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2224      	movs	r2, #36	@ 0x24
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 0201 	bic.w	r2, r2, #1
 80028be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80028ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028e0:	f001 f8da 	bl	8003a98 <HAL_RCC_GetPCLK1Freq>
 80028e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	4a81      	ldr	r2, [pc, #516]	@ (8002af0 <HAL_I2C_Init+0x274>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d807      	bhi.n	8002900 <HAL_I2C_Init+0x84>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4a80      	ldr	r2, [pc, #512]	@ (8002af4 <HAL_I2C_Init+0x278>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	bf94      	ite	ls
 80028f8:	2301      	movls	r3, #1
 80028fa:	2300      	movhi	r3, #0
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	e006      	b.n	800290e <HAL_I2C_Init+0x92>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4a7d      	ldr	r2, [pc, #500]	@ (8002af8 <HAL_I2C_Init+0x27c>)
 8002904:	4293      	cmp	r3, r2
 8002906:	bf94      	ite	ls
 8002908:	2301      	movls	r3, #1
 800290a:	2300      	movhi	r3, #0
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e0e7      	b.n	8002ae6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	4a78      	ldr	r2, [pc, #480]	@ (8002afc <HAL_I2C_Init+0x280>)
 800291a:	fba2 2303 	umull	r2, r3, r2, r3
 800291e:	0c9b      	lsrs	r3, r3, #18
 8002920:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	430a      	orrs	r2, r1
 8002934:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	4a6a      	ldr	r2, [pc, #424]	@ (8002af0 <HAL_I2C_Init+0x274>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d802      	bhi.n	8002950 <HAL_I2C_Init+0xd4>
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	3301      	adds	r3, #1
 800294e:	e009      	b.n	8002964 <HAL_I2C_Init+0xe8>
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002956:	fb02 f303 	mul.w	r3, r2, r3
 800295a:	4a69      	ldr	r2, [pc, #420]	@ (8002b00 <HAL_I2C_Init+0x284>)
 800295c:	fba2 2303 	umull	r2, r3, r2, r3
 8002960:	099b      	lsrs	r3, r3, #6
 8002962:	3301      	adds	r3, #1
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	430b      	orrs	r3, r1
 800296a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002976:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	495c      	ldr	r1, [pc, #368]	@ (8002af0 <HAL_I2C_Init+0x274>)
 8002980:	428b      	cmp	r3, r1
 8002982:	d819      	bhi.n	80029b8 <HAL_I2C_Init+0x13c>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	1e59      	subs	r1, r3, #1
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002992:	1c59      	adds	r1, r3, #1
 8002994:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002998:	400b      	ands	r3, r1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00a      	beq.n	80029b4 <HAL_I2C_Init+0x138>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	1e59      	subs	r1, r3, #1
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80029ac:	3301      	adds	r3, #1
 80029ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b2:	e051      	b.n	8002a58 <HAL_I2C_Init+0x1dc>
 80029b4:	2304      	movs	r3, #4
 80029b6:	e04f      	b.n	8002a58 <HAL_I2C_Init+0x1dc>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d111      	bne.n	80029e4 <HAL_I2C_Init+0x168>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	1e58      	subs	r0, r3, #1
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6859      	ldr	r1, [r3, #4]
 80029c8:	460b      	mov	r3, r1
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	440b      	add	r3, r1
 80029ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80029d2:	3301      	adds	r3, #1
 80029d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029d8:	2b00      	cmp	r3, #0
 80029da:	bf0c      	ite	eq
 80029dc:	2301      	moveq	r3, #1
 80029de:	2300      	movne	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	e012      	b.n	8002a0a <HAL_I2C_Init+0x18e>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	1e58      	subs	r0, r3, #1
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6859      	ldr	r1, [r3, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	0099      	lsls	r1, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029fa:	3301      	adds	r3, #1
 80029fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	bf0c      	ite	eq
 8002a04:	2301      	moveq	r3, #1
 8002a06:	2300      	movne	r3, #0
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_I2C_Init+0x196>
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e022      	b.n	8002a58 <HAL_I2C_Init+0x1dc>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10e      	bne.n	8002a38 <HAL_I2C_Init+0x1bc>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	1e58      	subs	r0, r3, #1
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6859      	ldr	r1, [r3, #4]
 8002a22:	460b      	mov	r3, r1
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	440b      	add	r3, r1
 8002a28:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a36:	e00f      	b.n	8002a58 <HAL_I2C_Init+0x1dc>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	1e58      	subs	r0, r3, #1
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6859      	ldr	r1, [r3, #4]
 8002a40:	460b      	mov	r3, r1
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	0099      	lsls	r1, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a4e:	3301      	adds	r3, #1
 8002a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	6809      	ldr	r1, [r1, #0]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69da      	ldr	r2, [r3, #28]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002a86:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6911      	ldr	r1, [r2, #16]
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	68d2      	ldr	r2, [r2, #12]
 8002a92:	4311      	orrs	r1, r2
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6812      	ldr	r2, [r2, #0]
 8002a98:	430b      	orrs	r3, r1
 8002a9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	695a      	ldr	r2, [r3, #20]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f042 0201 	orr.w	r2, r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	000186a0 	.word	0x000186a0
 8002af4:	001e847f 	.word	0x001e847f
 8002af8:	003d08ff 	.word	0x003d08ff
 8002afc:	431bde83 	.word	0x431bde83
 8002b00:	10624dd3 	.word	0x10624dd3

08002b04 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b088      	sub	sp, #32
 8002b08:	af02      	add	r7, sp, #8
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	607a      	str	r2, [r7, #4]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	460b      	mov	r3, r1
 8002b12:	817b      	strh	r3, [r7, #10]
 8002b14:	4613      	mov	r3, r2
 8002b16:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b18:	f7ff fb26 	bl	8002168 <HAL_GetTick>
 8002b1c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b20      	cmp	r3, #32
 8002b28:	f040 80e0 	bne.w	8002cec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	2319      	movs	r3, #25
 8002b32:	2201      	movs	r2, #1
 8002b34:	4970      	ldr	r1, [pc, #448]	@ (8002cf8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f000 f964 	bl	8002e04 <I2C_WaitOnFlagUntilTimeout>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b42:	2302      	movs	r3, #2
 8002b44:	e0d3      	b.n	8002cee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d101      	bne.n	8002b54 <HAL_I2C_Master_Transmit+0x50>
 8002b50:	2302      	movs	r3, #2
 8002b52:	e0cc      	b.n	8002cee <HAL_I2C_Master_Transmit+0x1ea>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d007      	beq.n	8002b7a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f042 0201 	orr.w	r2, r2, #1
 8002b78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2221      	movs	r2, #33	@ 0x21
 8002b8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2210      	movs	r2, #16
 8002b96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	893a      	ldrh	r2, [r7, #8]
 8002baa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	4a50      	ldr	r2, [pc, #320]	@ (8002cfc <HAL_I2C_Master_Transmit+0x1f8>)
 8002bba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002bbc:	8979      	ldrh	r1, [r7, #10]
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	6a3a      	ldr	r2, [r7, #32]
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f000 f89c 	bl	8002d00 <I2C_MasterRequestWrite>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e08d      	b.n	8002cee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	613b      	str	r3, [r7, #16]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	613b      	str	r3, [r7, #16]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	613b      	str	r3, [r7, #16]
 8002be6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002be8:	e066      	b.n	8002cb8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	6a39      	ldr	r1, [r7, #32]
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 fa22 	bl	8003038 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00d      	beq.n	8002c16 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d107      	bne.n	8002c12 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e06b      	b.n	8002cee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1a:	781a      	ldrb	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c26:	1c5a      	adds	r2, r3, #1
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	3b01      	subs	r3, #1
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b04      	cmp	r3, #4
 8002c52:	d11b      	bne.n	8002c8c <HAL_I2C_Master_Transmit+0x188>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d017      	beq.n	8002c8c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c60:	781a      	ldrb	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6c:	1c5a      	adds	r2, r3, #1
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c84:	3b01      	subs	r3, #1
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	6a39      	ldr	r1, [r7, #32]
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 fa19 	bl	80030c8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00d      	beq.n	8002cb8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d107      	bne.n	8002cb4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cb2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e01a      	b.n	8002cee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d194      	bne.n	8002bea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	e000      	b.n	8002cee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002cec:	2302      	movs	r3, #2
  }
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3718      	adds	r7, #24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	00100002 	.word	0x00100002
 8002cfc:	ffff0000 	.word	0xffff0000

08002d00 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b088      	sub	sp, #32
 8002d04:	af02      	add	r7, sp, #8
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	607a      	str	r2, [r7, #4]
 8002d0a:	603b      	str	r3, [r7, #0]
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d14:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	2b08      	cmp	r3, #8
 8002d1a:	d006      	beq.n	8002d2a <I2C_MasterRequestWrite+0x2a>
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d003      	beq.n	8002d2a <I2C_MasterRequestWrite+0x2a>
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d28:	d108      	bne.n	8002d3c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	e00b      	b.n	8002d54 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d40:	2b12      	cmp	r3, #18
 8002d42:	d107      	bne.n	8002d54 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d52:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f000 f84f 	bl	8002e04 <I2C_WaitOnFlagUntilTimeout>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00d      	beq.n	8002d88 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d7a:	d103      	bne.n	8002d84 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d82:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e035      	b.n	8002df4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d90:	d108      	bne.n	8002da4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d92:	897b      	ldrh	r3, [r7, #10]
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	461a      	mov	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002da0:	611a      	str	r2, [r3, #16]
 8002da2:	e01b      	b.n	8002ddc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002da4:	897b      	ldrh	r3, [r7, #10]
 8002da6:	11db      	asrs	r3, r3, #7
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	f003 0306 	and.w	r3, r3, #6
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	f063 030f 	orn	r3, r3, #15
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	490e      	ldr	r1, [pc, #56]	@ (8002dfc <I2C_MasterRequestWrite+0xfc>)
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f000 f898 	bl	8002ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e010      	b.n	8002df4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002dd2:	897b      	ldrh	r3, [r7, #10]
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	4907      	ldr	r1, [pc, #28]	@ (8002e00 <I2C_MasterRequestWrite+0x100>)
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 f888 	bl	8002ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	00010008 	.word	0x00010008
 8002e00:	00010002 	.word	0x00010002

08002e04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	603b      	str	r3, [r7, #0]
 8002e10:	4613      	mov	r3, r2
 8002e12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e14:	e048      	b.n	8002ea8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e1c:	d044      	beq.n	8002ea8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e1e:	f7ff f9a3 	bl	8002168 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d302      	bcc.n	8002e34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d139      	bne.n	8002ea8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	0c1b      	lsrs	r3, r3, #16
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d10d      	bne.n	8002e5a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	43da      	mvns	r2, r3
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	bf0c      	ite	eq
 8002e50:	2301      	moveq	r3, #1
 8002e52:	2300      	movne	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	461a      	mov	r2, r3
 8002e58:	e00c      	b.n	8002e74 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	43da      	mvns	r2, r3
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	4013      	ands	r3, r2
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	bf0c      	ite	eq
 8002e6c:	2301      	moveq	r3, #1
 8002e6e:	2300      	movne	r3, #0
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	461a      	mov	r2, r3
 8002e74:	79fb      	ldrb	r3, [r7, #7]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d116      	bne.n	8002ea8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2220      	movs	r2, #32
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e94:	f043 0220 	orr.w	r2, r3, #32
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e023      	b.n	8002ef0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	0c1b      	lsrs	r3, r3, #16
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d10d      	bne.n	8002ece <I2C_WaitOnFlagUntilTimeout+0xca>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	43da      	mvns	r2, r3
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	bf0c      	ite	eq
 8002ec4:	2301      	moveq	r3, #1
 8002ec6:	2300      	movne	r3, #0
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	461a      	mov	r2, r3
 8002ecc:	e00c      	b.n	8002ee8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	43da      	mvns	r2, r3
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	bf0c      	ite	eq
 8002ee0:	2301      	moveq	r3, #1
 8002ee2:	2300      	movne	r3, #0
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	79fb      	ldrb	r3, [r7, #7]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d093      	beq.n	8002e16 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
 8002f04:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f06:	e071      	b.n	8002fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f16:	d123      	bne.n	8002f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f26:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4c:	f043 0204 	orr.w	r2, r3, #4
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e067      	b.n	8003030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f66:	d041      	beq.n	8002fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f68:	f7ff f8fe 	bl	8002168 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d302      	bcc.n	8002f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d136      	bne.n	8002fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	0c1b      	lsrs	r3, r3, #16
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d10c      	bne.n	8002fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	43da      	mvns	r2, r3
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	4013      	ands	r3, r2
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	bf14      	ite	ne
 8002f9a:	2301      	movne	r3, #1
 8002f9c:	2300      	moveq	r3, #0
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	e00b      	b.n	8002fba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	43da      	mvns	r2, r3
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	4013      	ands	r3, r2
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	bf14      	ite	ne
 8002fb4:	2301      	movne	r3, #1
 8002fb6:	2300      	moveq	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d016      	beq.n	8002fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd8:	f043 0220 	orr.w	r2, r3, #32
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e021      	b.n	8003030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	0c1b      	lsrs	r3, r3, #16
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d10c      	bne.n	8003010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	43da      	mvns	r2, r3
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	4013      	ands	r3, r2
 8003002:	b29b      	uxth	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	bf14      	ite	ne
 8003008:	2301      	movne	r3, #1
 800300a:	2300      	moveq	r3, #0
 800300c:	b2db      	uxtb	r3, r3
 800300e:	e00b      	b.n	8003028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	43da      	mvns	r2, r3
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	4013      	ands	r3, r2
 800301c:	b29b      	uxth	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	bf14      	ite	ne
 8003022:	2301      	movne	r3, #1
 8003024:	2300      	moveq	r3, #0
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b00      	cmp	r3, #0
 800302a:	f47f af6d 	bne.w	8002f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003044:	e034      	b.n	80030b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 f886 	bl	8003158 <I2C_IsAcknowledgeFailed>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e034      	b.n	80030c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305c:	d028      	beq.n	80030b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800305e:	f7ff f883 	bl	8002168 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	429a      	cmp	r2, r3
 800306c:	d302      	bcc.n	8003074 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d11d      	bne.n	80030b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800307e:	2b80      	cmp	r3, #128	@ 0x80
 8003080:	d016      	beq.n	80030b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2220      	movs	r2, #32
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309c:	f043 0220 	orr.w	r2, r3, #32
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e007      	b.n	80030c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ba:	2b80      	cmp	r3, #128	@ 0x80
 80030bc:	d1c3      	bne.n	8003046 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030d4:	e034      	b.n	8003140 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 f83e 	bl	8003158 <I2C_IsAcknowledgeFailed>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e034      	b.n	8003150 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ec:	d028      	beq.n	8003140 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ee:	f7ff f83b 	bl	8002168 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d302      	bcc.n	8003104 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d11d      	bne.n	8003140 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	f003 0304 	and.w	r3, r3, #4
 800310e:	2b04      	cmp	r3, #4
 8003110:	d016      	beq.n	8003140 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2220      	movs	r2, #32
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312c:	f043 0220 	orr.w	r2, r3, #32
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e007      	b.n	8003150 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	f003 0304 	and.w	r3, r3, #4
 800314a:	2b04      	cmp	r3, #4
 800314c:	d1c3      	bne.n	80030d6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800316a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800316e:	d11b      	bne.n	80031a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003178:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2220      	movs	r2, #32
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003194:	f043 0204 	orr.w	r2, r3, #4
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e000      	b.n	80031aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
	...

080031b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e267      	b.n	800369a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d075      	beq.n	80032c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80031d6:	4b88      	ldr	r3, [pc, #544]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 030c 	and.w	r3, r3, #12
 80031de:	2b04      	cmp	r3, #4
 80031e0:	d00c      	beq.n	80031fc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031e2:	4b85      	ldr	r3, [pc, #532]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80031ea:	2b08      	cmp	r3, #8
 80031ec:	d112      	bne.n	8003214 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031ee:	4b82      	ldr	r3, [pc, #520]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031fa:	d10b      	bne.n	8003214 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031fc:	4b7e      	ldr	r3, [pc, #504]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d05b      	beq.n	80032c0 <HAL_RCC_OscConfig+0x108>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d157      	bne.n	80032c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e242      	b.n	800369a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800321c:	d106      	bne.n	800322c <HAL_RCC_OscConfig+0x74>
 800321e:	4b76      	ldr	r3, [pc, #472]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a75      	ldr	r2, [pc, #468]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 8003224:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	e01d      	b.n	8003268 <HAL_RCC_OscConfig+0xb0>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003234:	d10c      	bne.n	8003250 <HAL_RCC_OscConfig+0x98>
 8003236:	4b70      	ldr	r3, [pc, #448]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a6f      	ldr	r2, [pc, #444]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 800323c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	4b6d      	ldr	r3, [pc, #436]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a6c      	ldr	r2, [pc, #432]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 8003248:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800324c:	6013      	str	r3, [r2, #0]
 800324e:	e00b      	b.n	8003268 <HAL_RCC_OscConfig+0xb0>
 8003250:	4b69      	ldr	r3, [pc, #420]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a68      	ldr	r2, [pc, #416]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 8003256:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800325a:	6013      	str	r3, [r2, #0]
 800325c:	4b66      	ldr	r3, [pc, #408]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a65      	ldr	r2, [pc, #404]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 8003262:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003266:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d013      	beq.n	8003298 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003270:	f7fe ff7a 	bl	8002168 <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003278:	f7fe ff76 	bl	8002168 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b64      	cmp	r3, #100	@ 0x64
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e207      	b.n	800369a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328a:	4b5b      	ldr	r3, [pc, #364]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d0f0      	beq.n	8003278 <HAL_RCC_OscConfig+0xc0>
 8003296:	e014      	b.n	80032c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003298:	f7fe ff66 	bl	8002168 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a0:	f7fe ff62 	bl	8002168 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b64      	cmp	r3, #100	@ 0x64
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e1f3      	b.n	800369a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032b2:	4b51      	ldr	r3, [pc, #324]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1f0      	bne.n	80032a0 <HAL_RCC_OscConfig+0xe8>
 80032be:	e000      	b.n	80032c2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d063      	beq.n	8003396 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80032ce:	4b4a      	ldr	r3, [pc, #296]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 030c 	and.w	r3, r3, #12
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00b      	beq.n	80032f2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032da:	4b47      	ldr	r3, [pc, #284]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80032e2:	2b08      	cmp	r3, #8
 80032e4:	d11c      	bne.n	8003320 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032e6:	4b44      	ldr	r3, [pc, #272]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d116      	bne.n	8003320 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032f2:	4b41      	ldr	r3, [pc, #260]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d005      	beq.n	800330a <HAL_RCC_OscConfig+0x152>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d001      	beq.n	800330a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e1c7      	b.n	800369a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800330a:	4b3b      	ldr	r3, [pc, #236]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	4937      	ldr	r1, [pc, #220]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 800331a:	4313      	orrs	r3, r2
 800331c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800331e:	e03a      	b.n	8003396 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d020      	beq.n	800336a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003328:	4b34      	ldr	r3, [pc, #208]	@ (80033fc <HAL_RCC_OscConfig+0x244>)
 800332a:	2201      	movs	r2, #1
 800332c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332e:	f7fe ff1b 	bl	8002168 <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003336:	f7fe ff17 	bl	8002168 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e1a8      	b.n	800369a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003348:	4b2b      	ldr	r3, [pc, #172]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0f0      	beq.n	8003336 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003354:	4b28      	ldr	r3, [pc, #160]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	4925      	ldr	r1, [pc, #148]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 8003364:	4313      	orrs	r3, r2
 8003366:	600b      	str	r3, [r1, #0]
 8003368:	e015      	b.n	8003396 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800336a:	4b24      	ldr	r3, [pc, #144]	@ (80033fc <HAL_RCC_OscConfig+0x244>)
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003370:	f7fe fefa 	bl	8002168 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003378:	f7fe fef6 	bl	8002168 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e187      	b.n	800369a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800338a:	4b1b      	ldr	r3, [pc, #108]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1f0      	bne.n	8003378 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d036      	beq.n	8003410 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d016      	beq.n	80033d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033aa:	4b15      	ldr	r3, [pc, #84]	@ (8003400 <HAL_RCC_OscConfig+0x248>)
 80033ac:	2201      	movs	r2, #1
 80033ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b0:	f7fe feda 	bl	8002168 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033b8:	f7fe fed6 	bl	8002168 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e167      	b.n	800369a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ca:	4b0b      	ldr	r3, [pc, #44]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 80033cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d0f0      	beq.n	80033b8 <HAL_RCC_OscConfig+0x200>
 80033d6:	e01b      	b.n	8003410 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033d8:	4b09      	ldr	r3, [pc, #36]	@ (8003400 <HAL_RCC_OscConfig+0x248>)
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033de:	f7fe fec3 	bl	8002168 <HAL_GetTick>
 80033e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e4:	e00e      	b.n	8003404 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033e6:	f7fe febf 	bl	8002168 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d907      	bls.n	8003404 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e150      	b.n	800369a <HAL_RCC_OscConfig+0x4e2>
 80033f8:	40023800 	.word	0x40023800
 80033fc:	42470000 	.word	0x42470000
 8003400:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003404:	4b88      	ldr	r3, [pc, #544]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 8003406:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1ea      	bne.n	80033e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 8097 	beq.w	800354c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800341e:	2300      	movs	r3, #0
 8003420:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003422:	4b81      	ldr	r3, [pc, #516]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 8003424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10f      	bne.n	800344e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800342e:	2300      	movs	r3, #0
 8003430:	60bb      	str	r3, [r7, #8]
 8003432:	4b7d      	ldr	r3, [pc, #500]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 8003434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003436:	4a7c      	ldr	r2, [pc, #496]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 8003438:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800343c:	6413      	str	r3, [r2, #64]	@ 0x40
 800343e:	4b7a      	ldr	r3, [pc, #488]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 8003440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003446:	60bb      	str	r3, [r7, #8]
 8003448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800344a:	2301      	movs	r3, #1
 800344c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800344e:	4b77      	ldr	r3, [pc, #476]	@ (800362c <HAL_RCC_OscConfig+0x474>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003456:	2b00      	cmp	r3, #0
 8003458:	d118      	bne.n	800348c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800345a:	4b74      	ldr	r3, [pc, #464]	@ (800362c <HAL_RCC_OscConfig+0x474>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a73      	ldr	r2, [pc, #460]	@ (800362c <HAL_RCC_OscConfig+0x474>)
 8003460:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003466:	f7fe fe7f 	bl	8002168 <HAL_GetTick>
 800346a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800346c:	e008      	b.n	8003480 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800346e:	f7fe fe7b 	bl	8002168 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e10c      	b.n	800369a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003480:	4b6a      	ldr	r3, [pc, #424]	@ (800362c <HAL_RCC_OscConfig+0x474>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0f0      	beq.n	800346e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d106      	bne.n	80034a2 <HAL_RCC_OscConfig+0x2ea>
 8003494:	4b64      	ldr	r3, [pc, #400]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 8003496:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003498:	4a63      	ldr	r2, [pc, #396]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 800349a:	f043 0301 	orr.w	r3, r3, #1
 800349e:	6713      	str	r3, [r2, #112]	@ 0x70
 80034a0:	e01c      	b.n	80034dc <HAL_RCC_OscConfig+0x324>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	2b05      	cmp	r3, #5
 80034a8:	d10c      	bne.n	80034c4 <HAL_RCC_OscConfig+0x30c>
 80034aa:	4b5f      	ldr	r3, [pc, #380]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 80034ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ae:	4a5e      	ldr	r2, [pc, #376]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 80034b0:	f043 0304 	orr.w	r3, r3, #4
 80034b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80034b6:	4b5c      	ldr	r3, [pc, #368]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 80034b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ba:	4a5b      	ldr	r2, [pc, #364]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 80034bc:	f043 0301 	orr.w	r3, r3, #1
 80034c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80034c2:	e00b      	b.n	80034dc <HAL_RCC_OscConfig+0x324>
 80034c4:	4b58      	ldr	r3, [pc, #352]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 80034c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034c8:	4a57      	ldr	r2, [pc, #348]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 80034ca:	f023 0301 	bic.w	r3, r3, #1
 80034ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80034d0:	4b55      	ldr	r3, [pc, #340]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 80034d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034d4:	4a54      	ldr	r2, [pc, #336]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 80034d6:	f023 0304 	bic.w	r3, r3, #4
 80034da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d015      	beq.n	8003510 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e4:	f7fe fe40 	bl	8002168 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ea:	e00a      	b.n	8003502 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ec:	f7fe fe3c 	bl	8002168 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e0cb      	b.n	800369a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003502:	4b49      	ldr	r3, [pc, #292]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 8003504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d0ee      	beq.n	80034ec <HAL_RCC_OscConfig+0x334>
 800350e:	e014      	b.n	800353a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003510:	f7fe fe2a 	bl	8002168 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003516:	e00a      	b.n	800352e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003518:	f7fe fe26 	bl	8002168 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003526:	4293      	cmp	r3, r2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e0b5      	b.n	800369a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800352e:	4b3e      	ldr	r3, [pc, #248]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 8003530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1ee      	bne.n	8003518 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800353a:	7dfb      	ldrb	r3, [r7, #23]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d105      	bne.n	800354c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003540:	4b39      	ldr	r3, [pc, #228]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 8003542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003544:	4a38      	ldr	r2, [pc, #224]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 8003546:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800354a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	2b00      	cmp	r3, #0
 8003552:	f000 80a1 	beq.w	8003698 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003556:	4b34      	ldr	r3, [pc, #208]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 030c 	and.w	r3, r3, #12
 800355e:	2b08      	cmp	r3, #8
 8003560:	d05c      	beq.n	800361c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	2b02      	cmp	r3, #2
 8003568:	d141      	bne.n	80035ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800356a:	4b31      	ldr	r3, [pc, #196]	@ (8003630 <HAL_RCC_OscConfig+0x478>)
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003570:	f7fe fdfa 	bl	8002168 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003578:	f7fe fdf6 	bl	8002168 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e087      	b.n	800369a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358a:	4b27      	ldr	r3, [pc, #156]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f0      	bne.n	8003578 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	69da      	ldr	r2, [r3, #28]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	431a      	orrs	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a4:	019b      	lsls	r3, r3, #6
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ac:	085b      	lsrs	r3, r3, #1
 80035ae:	3b01      	subs	r3, #1
 80035b0:	041b      	lsls	r3, r3, #16
 80035b2:	431a      	orrs	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b8:	061b      	lsls	r3, r3, #24
 80035ba:	491b      	ldr	r1, [pc, #108]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003630 <HAL_RCC_OscConfig+0x478>)
 80035c2:	2201      	movs	r2, #1
 80035c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c6:	f7fe fdcf 	bl	8002168 <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035cc:	e008      	b.n	80035e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ce:	f7fe fdcb 	bl	8002168 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e05c      	b.n	800369a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035e0:	4b11      	ldr	r3, [pc, #68]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d0f0      	beq.n	80035ce <HAL_RCC_OscConfig+0x416>
 80035ec:	e054      	b.n	8003698 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ee:	4b10      	ldr	r3, [pc, #64]	@ (8003630 <HAL_RCC_OscConfig+0x478>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f4:	f7fe fdb8 	bl	8002168 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035fc:	f7fe fdb4 	bl	8002168 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e045      	b.n	800369a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800360e:	4b06      	ldr	r3, [pc, #24]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f0      	bne.n	80035fc <HAL_RCC_OscConfig+0x444>
 800361a:	e03d      	b.n	8003698 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d107      	bne.n	8003634 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e038      	b.n	800369a <HAL_RCC_OscConfig+0x4e2>
 8003628:	40023800 	.word	0x40023800
 800362c:	40007000 	.word	0x40007000
 8003630:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003634:	4b1b      	ldr	r3, [pc, #108]	@ (80036a4 <HAL_RCC_OscConfig+0x4ec>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d028      	beq.n	8003694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800364c:	429a      	cmp	r2, r3
 800364e:	d121      	bne.n	8003694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800365a:	429a      	cmp	r2, r3
 800365c:	d11a      	bne.n	8003694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003664:	4013      	ands	r3, r2
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800366a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800366c:	4293      	cmp	r3, r2
 800366e:	d111      	bne.n	8003694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800367a:	085b      	lsrs	r3, r3, #1
 800367c:	3b01      	subs	r3, #1
 800367e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003680:	429a      	cmp	r2, r3
 8003682:	d107      	bne.n	8003694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003690:	429a      	cmp	r2, r3
 8003692:	d001      	beq.n	8003698 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e000      	b.n	800369a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	40023800 	.word	0x40023800

080036a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e0cc      	b.n	8003856 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036bc:	4b68      	ldr	r3, [pc, #416]	@ (8003860 <HAL_RCC_ClockConfig+0x1b8>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d90c      	bls.n	80036e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ca:	4b65      	ldr	r3, [pc, #404]	@ (8003860 <HAL_RCC_ClockConfig+0x1b8>)
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	b2d2      	uxtb	r2, r2
 80036d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d2:	4b63      	ldr	r3, [pc, #396]	@ (8003860 <HAL_RCC_ClockConfig+0x1b8>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d001      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e0b8      	b.n	8003856 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d020      	beq.n	8003732 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d005      	beq.n	8003708 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036fc:	4b59      	ldr	r3, [pc, #356]	@ (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	4a58      	ldr	r2, [pc, #352]	@ (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 8003702:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003706:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0308 	and.w	r3, r3, #8
 8003710:	2b00      	cmp	r3, #0
 8003712:	d005      	beq.n	8003720 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003714:	4b53      	ldr	r3, [pc, #332]	@ (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	4a52      	ldr	r2, [pc, #328]	@ (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 800371a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800371e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003720:	4b50      	ldr	r3, [pc, #320]	@ (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	494d      	ldr	r1, [pc, #308]	@ (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 800372e:	4313      	orrs	r3, r2
 8003730:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d044      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d107      	bne.n	8003756 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003746:	4b47      	ldr	r3, [pc, #284]	@ (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d119      	bne.n	8003786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e07f      	b.n	8003856 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2b02      	cmp	r3, #2
 800375c:	d003      	beq.n	8003766 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003762:	2b03      	cmp	r3, #3
 8003764:	d107      	bne.n	8003776 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003766:	4b3f      	ldr	r3, [pc, #252]	@ (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d109      	bne.n	8003786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e06f      	b.n	8003856 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003776:	4b3b      	ldr	r3, [pc, #236]	@ (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e067      	b.n	8003856 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003786:	4b37      	ldr	r3, [pc, #220]	@ (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f023 0203 	bic.w	r2, r3, #3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	4934      	ldr	r1, [pc, #208]	@ (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 8003794:	4313      	orrs	r3, r2
 8003796:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003798:	f7fe fce6 	bl	8002168 <HAL_GetTick>
 800379c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379e:	e00a      	b.n	80037b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a0:	f7fe fce2 	bl	8002168 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e04f      	b.n	8003856 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b6:	4b2b      	ldr	r3, [pc, #172]	@ (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f003 020c 	and.w	r2, r3, #12
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d1eb      	bne.n	80037a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037c8:	4b25      	ldr	r3, [pc, #148]	@ (8003860 <HAL_RCC_ClockConfig+0x1b8>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d20c      	bcs.n	80037f0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d6:	4b22      	ldr	r3, [pc, #136]	@ (8003860 <HAL_RCC_ClockConfig+0x1b8>)
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	b2d2      	uxtb	r2, r2
 80037dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037de:	4b20      	ldr	r3, [pc, #128]	@ (8003860 <HAL_RCC_ClockConfig+0x1b8>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d001      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e032      	b.n	8003856 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0304 	and.w	r3, r3, #4
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d008      	beq.n	800380e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037fc:	4b19      	ldr	r3, [pc, #100]	@ (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	4916      	ldr	r1, [pc, #88]	@ (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 800380a:	4313      	orrs	r3, r2
 800380c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0308 	and.w	r3, r3, #8
 8003816:	2b00      	cmp	r3, #0
 8003818:	d009      	beq.n	800382e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800381a:	4b12      	ldr	r3, [pc, #72]	@ (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	00db      	lsls	r3, r3, #3
 8003828:	490e      	ldr	r1, [pc, #56]	@ (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 800382a:	4313      	orrs	r3, r2
 800382c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800382e:	f000 f821 	bl	8003874 <HAL_RCC_GetSysClockFreq>
 8003832:	4602      	mov	r2, r0
 8003834:	4b0b      	ldr	r3, [pc, #44]	@ (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	091b      	lsrs	r3, r3, #4
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	490a      	ldr	r1, [pc, #40]	@ (8003868 <HAL_RCC_ClockConfig+0x1c0>)
 8003840:	5ccb      	ldrb	r3, [r1, r3]
 8003842:	fa22 f303 	lsr.w	r3, r2, r3
 8003846:	4a09      	ldr	r2, [pc, #36]	@ (800386c <HAL_RCC_ClockConfig+0x1c4>)
 8003848:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800384a:	4b09      	ldr	r3, [pc, #36]	@ (8003870 <HAL_RCC_ClockConfig+0x1c8>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f7fe fc46 	bl	80020e0 <HAL_InitTick>

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	40023c00 	.word	0x40023c00
 8003864:	40023800 	.word	0x40023800
 8003868:	08006598 	.word	0x08006598
 800386c:	20000000 	.word	0x20000000
 8003870:	200000ac 	.word	0x200000ac

08003874 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003878:	b094      	sub	sp, #80	@ 0x50
 800387a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800387c:	2300      	movs	r3, #0
 800387e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003888:	2300      	movs	r3, #0
 800388a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800388c:	4b79      	ldr	r3, [pc, #484]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x200>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 030c 	and.w	r3, r3, #12
 8003894:	2b08      	cmp	r3, #8
 8003896:	d00d      	beq.n	80038b4 <HAL_RCC_GetSysClockFreq+0x40>
 8003898:	2b08      	cmp	r3, #8
 800389a:	f200 80e1 	bhi.w	8003a60 <HAL_RCC_GetSysClockFreq+0x1ec>
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d002      	beq.n	80038a8 <HAL_RCC_GetSysClockFreq+0x34>
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	d003      	beq.n	80038ae <HAL_RCC_GetSysClockFreq+0x3a>
 80038a6:	e0db      	b.n	8003a60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038a8:	4b73      	ldr	r3, [pc, #460]	@ (8003a78 <HAL_RCC_GetSysClockFreq+0x204>)
 80038aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038ac:	e0db      	b.n	8003a66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038ae:	4b73      	ldr	r3, [pc, #460]	@ (8003a7c <HAL_RCC_GetSysClockFreq+0x208>)
 80038b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038b2:	e0d8      	b.n	8003a66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038b4:	4b6f      	ldr	r3, [pc, #444]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x200>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038bc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038be:	4b6d      	ldr	r3, [pc, #436]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x200>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d063      	beq.n	8003992 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ca:	4b6a      	ldr	r3, [pc, #424]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x200>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	099b      	lsrs	r3, r3, #6
 80038d0:	2200      	movs	r2, #0
 80038d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80038d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80038de:	2300      	movs	r3, #0
 80038e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80038e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80038e6:	4622      	mov	r2, r4
 80038e8:	462b      	mov	r3, r5
 80038ea:	f04f 0000 	mov.w	r0, #0
 80038ee:	f04f 0100 	mov.w	r1, #0
 80038f2:	0159      	lsls	r1, r3, #5
 80038f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038f8:	0150      	lsls	r0, r2, #5
 80038fa:	4602      	mov	r2, r0
 80038fc:	460b      	mov	r3, r1
 80038fe:	4621      	mov	r1, r4
 8003900:	1a51      	subs	r1, r2, r1
 8003902:	6139      	str	r1, [r7, #16]
 8003904:	4629      	mov	r1, r5
 8003906:	eb63 0301 	sbc.w	r3, r3, r1
 800390a:	617b      	str	r3, [r7, #20]
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	f04f 0300 	mov.w	r3, #0
 8003914:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003918:	4659      	mov	r1, fp
 800391a:	018b      	lsls	r3, r1, #6
 800391c:	4651      	mov	r1, sl
 800391e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003922:	4651      	mov	r1, sl
 8003924:	018a      	lsls	r2, r1, #6
 8003926:	4651      	mov	r1, sl
 8003928:	ebb2 0801 	subs.w	r8, r2, r1
 800392c:	4659      	mov	r1, fp
 800392e:	eb63 0901 	sbc.w	r9, r3, r1
 8003932:	f04f 0200 	mov.w	r2, #0
 8003936:	f04f 0300 	mov.w	r3, #0
 800393a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800393e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003942:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003946:	4690      	mov	r8, r2
 8003948:	4699      	mov	r9, r3
 800394a:	4623      	mov	r3, r4
 800394c:	eb18 0303 	adds.w	r3, r8, r3
 8003950:	60bb      	str	r3, [r7, #8]
 8003952:	462b      	mov	r3, r5
 8003954:	eb49 0303 	adc.w	r3, r9, r3
 8003958:	60fb      	str	r3, [r7, #12]
 800395a:	f04f 0200 	mov.w	r2, #0
 800395e:	f04f 0300 	mov.w	r3, #0
 8003962:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003966:	4629      	mov	r1, r5
 8003968:	024b      	lsls	r3, r1, #9
 800396a:	4621      	mov	r1, r4
 800396c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003970:	4621      	mov	r1, r4
 8003972:	024a      	lsls	r2, r1, #9
 8003974:	4610      	mov	r0, r2
 8003976:	4619      	mov	r1, r3
 8003978:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800397a:	2200      	movs	r2, #0
 800397c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800397e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003980:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003984:	f7fc fc7c 	bl	8000280 <__aeabi_uldivmod>
 8003988:	4602      	mov	r2, r0
 800398a:	460b      	mov	r3, r1
 800398c:	4613      	mov	r3, r2
 800398e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003990:	e058      	b.n	8003a44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003992:	4b38      	ldr	r3, [pc, #224]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	099b      	lsrs	r3, r3, #6
 8003998:	2200      	movs	r2, #0
 800399a:	4618      	mov	r0, r3
 800399c:	4611      	mov	r1, r2
 800399e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039a2:	623b      	str	r3, [r7, #32]
 80039a4:	2300      	movs	r3, #0
 80039a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80039a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80039ac:	4642      	mov	r2, r8
 80039ae:	464b      	mov	r3, r9
 80039b0:	f04f 0000 	mov.w	r0, #0
 80039b4:	f04f 0100 	mov.w	r1, #0
 80039b8:	0159      	lsls	r1, r3, #5
 80039ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039be:	0150      	lsls	r0, r2, #5
 80039c0:	4602      	mov	r2, r0
 80039c2:	460b      	mov	r3, r1
 80039c4:	4641      	mov	r1, r8
 80039c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80039ca:	4649      	mov	r1, r9
 80039cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80039d0:	f04f 0200 	mov.w	r2, #0
 80039d4:	f04f 0300 	mov.w	r3, #0
 80039d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039e4:	ebb2 040a 	subs.w	r4, r2, sl
 80039e8:	eb63 050b 	sbc.w	r5, r3, fp
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	f04f 0300 	mov.w	r3, #0
 80039f4:	00eb      	lsls	r3, r5, #3
 80039f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039fa:	00e2      	lsls	r2, r4, #3
 80039fc:	4614      	mov	r4, r2
 80039fe:	461d      	mov	r5, r3
 8003a00:	4643      	mov	r3, r8
 8003a02:	18e3      	adds	r3, r4, r3
 8003a04:	603b      	str	r3, [r7, #0]
 8003a06:	464b      	mov	r3, r9
 8003a08:	eb45 0303 	adc.w	r3, r5, r3
 8003a0c:	607b      	str	r3, [r7, #4]
 8003a0e:	f04f 0200 	mov.w	r2, #0
 8003a12:	f04f 0300 	mov.w	r3, #0
 8003a16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a1a:	4629      	mov	r1, r5
 8003a1c:	028b      	lsls	r3, r1, #10
 8003a1e:	4621      	mov	r1, r4
 8003a20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a24:	4621      	mov	r1, r4
 8003a26:	028a      	lsls	r2, r1, #10
 8003a28:	4610      	mov	r0, r2
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a2e:	2200      	movs	r2, #0
 8003a30:	61bb      	str	r3, [r7, #24]
 8003a32:	61fa      	str	r2, [r7, #28]
 8003a34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a38:	f7fc fc22 	bl	8000280 <__aeabi_uldivmod>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4613      	mov	r3, r2
 8003a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003a44:	4b0b      	ldr	r3, [pc, #44]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	0c1b      	lsrs	r3, r3, #16
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	3301      	adds	r3, #1
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003a54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a5e:	e002      	b.n	8003a66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a60:	4b05      	ldr	r3, [pc, #20]	@ (8003a78 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a62:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3750      	adds	r7, #80	@ 0x50
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a72:	bf00      	nop
 8003a74:	40023800 	.word	0x40023800
 8003a78:	00f42400 	.word	0x00f42400
 8003a7c:	007a1200 	.word	0x007a1200

08003a80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a84:	4b03      	ldr	r3, [pc, #12]	@ (8003a94 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a86:	681b      	ldr	r3, [r3, #0]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	20000000 	.word	0x20000000

08003a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a9c:	f7ff fff0 	bl	8003a80 <HAL_RCC_GetHCLKFreq>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	4b05      	ldr	r3, [pc, #20]	@ (8003ab8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	0a9b      	lsrs	r3, r3, #10
 8003aa8:	f003 0307 	and.w	r3, r3, #7
 8003aac:	4903      	ldr	r1, [pc, #12]	@ (8003abc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aae:	5ccb      	ldrb	r3, [r1, r3]
 8003ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40023800 	.word	0x40023800
 8003abc:	080065a8 	.word	0x080065a8

08003ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ac4:	f7ff ffdc 	bl	8003a80 <HAL_RCC_GetHCLKFreq>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	4b05      	ldr	r3, [pc, #20]	@ (8003ae0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	0b5b      	lsrs	r3, r3, #13
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	4903      	ldr	r1, [pc, #12]	@ (8003ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ad6:	5ccb      	ldrb	r3, [r1, r3]
 8003ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40023800 	.word	0x40023800
 8003ae4:	080065a8 	.word	0x080065a8

08003ae8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e041      	b.n	8003b7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d106      	bne.n	8003b14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7fd f958 	bl	8000dc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2202      	movs	r2, #2
 8003b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3304      	adds	r3, #4
 8003b24:	4619      	mov	r1, r3
 8003b26:	4610      	mov	r0, r2
 8003b28:	f000 fd22 	bl	8004570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
	...

08003b88 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d001      	beq.n	8003ba0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e03c      	b.n	8003c1a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a1e      	ldr	r2, [pc, #120]	@ (8003c28 <HAL_TIM_Base_Start+0xa0>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d018      	beq.n	8003be4 <HAL_TIM_Base_Start+0x5c>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bba:	d013      	beq.n	8003be4 <HAL_TIM_Base_Start+0x5c>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a1a      	ldr	r2, [pc, #104]	@ (8003c2c <HAL_TIM_Base_Start+0xa4>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d00e      	beq.n	8003be4 <HAL_TIM_Base_Start+0x5c>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a19      	ldr	r2, [pc, #100]	@ (8003c30 <HAL_TIM_Base_Start+0xa8>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d009      	beq.n	8003be4 <HAL_TIM_Base_Start+0x5c>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a17      	ldr	r2, [pc, #92]	@ (8003c34 <HAL_TIM_Base_Start+0xac>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d004      	beq.n	8003be4 <HAL_TIM_Base_Start+0x5c>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a16      	ldr	r2, [pc, #88]	@ (8003c38 <HAL_TIM_Base_Start+0xb0>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d111      	bne.n	8003c08 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2b06      	cmp	r3, #6
 8003bf4:	d010      	beq.n	8003c18 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f042 0201 	orr.w	r2, r2, #1
 8003c04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c06:	e007      	b.n	8003c18 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0201 	orr.w	r2, r2, #1
 8003c16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	40010000 	.word	0x40010000
 8003c2c:	40000400 	.word	0x40000400
 8003c30:	40000800 	.word	0x40000800
 8003c34:	40000c00 	.word	0x40000c00
 8003c38:	40014000 	.word	0x40014000

08003c3c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6a1a      	ldr	r2, [r3, #32]
 8003c4a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003c4e:	4013      	ands	r3, r2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10f      	bne.n	8003c74 <HAL_TIM_Base_Stop+0x38>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6a1a      	ldr	r2, [r3, #32]
 8003c5a:	f240 4344 	movw	r3, #1092	@ 0x444
 8003c5e:	4013      	ands	r3, r2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d107      	bne.n	8003c74 <HAL_TIM_Base_Stop+0x38>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0201 	bic.w	r2, r2, #1
 8003c72:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
	...

08003c8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d001      	beq.n	8003ca4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e044      	b.n	8003d2e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68da      	ldr	r2, [r3, #12]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f042 0201 	orr.w	r2, r2, #1
 8003cba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a1e      	ldr	r2, [pc, #120]	@ (8003d3c <HAL_TIM_Base_Start_IT+0xb0>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d018      	beq.n	8003cf8 <HAL_TIM_Base_Start_IT+0x6c>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cce:	d013      	beq.n	8003cf8 <HAL_TIM_Base_Start_IT+0x6c>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a1a      	ldr	r2, [pc, #104]	@ (8003d40 <HAL_TIM_Base_Start_IT+0xb4>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d00e      	beq.n	8003cf8 <HAL_TIM_Base_Start_IT+0x6c>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a19      	ldr	r2, [pc, #100]	@ (8003d44 <HAL_TIM_Base_Start_IT+0xb8>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d009      	beq.n	8003cf8 <HAL_TIM_Base_Start_IT+0x6c>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a17      	ldr	r2, [pc, #92]	@ (8003d48 <HAL_TIM_Base_Start_IT+0xbc>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d004      	beq.n	8003cf8 <HAL_TIM_Base_Start_IT+0x6c>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a16      	ldr	r2, [pc, #88]	@ (8003d4c <HAL_TIM_Base_Start_IT+0xc0>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d111      	bne.n	8003d1c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2b06      	cmp	r3, #6
 8003d08:	d010      	beq.n	8003d2c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f042 0201 	orr.w	r2, r2, #1
 8003d18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d1a:	e007      	b.n	8003d2c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f042 0201 	orr.w	r2, r2, #1
 8003d2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3714      	adds	r7, #20
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	40010000 	.word	0x40010000
 8003d40:	40000400 	.word	0x40000400
 8003d44:	40000800 	.word	0x40000800
 8003d48:	40000c00 	.word	0x40000c00
 8003d4c:	40014000 	.word	0x40014000

08003d50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e041      	b.n	8003de6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d106      	bne.n	8003d7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f839 	bl	8003dee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3304      	adds	r3, #4
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	4610      	mov	r0, r2
 8003d90:	f000 fbee 	bl	8004570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
	...

08003e04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d109      	bne.n	8003e28 <HAL_TIM_PWM_Start+0x24>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	bf14      	ite	ne
 8003e20:	2301      	movne	r3, #1
 8003e22:	2300      	moveq	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	e022      	b.n	8003e6e <HAL_TIM_PWM_Start+0x6a>
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	2b04      	cmp	r3, #4
 8003e2c:	d109      	bne.n	8003e42 <HAL_TIM_PWM_Start+0x3e>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	bf14      	ite	ne
 8003e3a:	2301      	movne	r3, #1
 8003e3c:	2300      	moveq	r3, #0
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	e015      	b.n	8003e6e <HAL_TIM_PWM_Start+0x6a>
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	2b08      	cmp	r3, #8
 8003e46:	d109      	bne.n	8003e5c <HAL_TIM_PWM_Start+0x58>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	bf14      	ite	ne
 8003e54:	2301      	movne	r3, #1
 8003e56:	2300      	moveq	r3, #0
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	e008      	b.n	8003e6e <HAL_TIM_PWM_Start+0x6a>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	bf14      	ite	ne
 8003e68:	2301      	movne	r3, #1
 8003e6a:	2300      	moveq	r3, #0
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e068      	b.n	8003f48 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d104      	bne.n	8003e86 <HAL_TIM_PWM_Start+0x82>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e84:	e013      	b.n	8003eae <HAL_TIM_PWM_Start+0xaa>
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	2b04      	cmp	r3, #4
 8003e8a:	d104      	bne.n	8003e96 <HAL_TIM_PWM_Start+0x92>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2202      	movs	r2, #2
 8003e90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e94:	e00b      	b.n	8003eae <HAL_TIM_PWM_Start+0xaa>
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	2b08      	cmp	r3, #8
 8003e9a:	d104      	bne.n	8003ea6 <HAL_TIM_PWM_Start+0xa2>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ea4:	e003      	b.n	8003eae <HAL_TIM_PWM_Start+0xaa>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2202      	movs	r2, #2
 8003eaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	6839      	ldr	r1, [r7, #0]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 fe06 	bl	8004ac8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a23      	ldr	r2, [pc, #140]	@ (8003f50 <HAL_TIM_PWM_Start+0x14c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d107      	bne.n	8003ed6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ed4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a1d      	ldr	r2, [pc, #116]	@ (8003f50 <HAL_TIM_PWM_Start+0x14c>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d018      	beq.n	8003f12 <HAL_TIM_PWM_Start+0x10e>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ee8:	d013      	beq.n	8003f12 <HAL_TIM_PWM_Start+0x10e>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a19      	ldr	r2, [pc, #100]	@ (8003f54 <HAL_TIM_PWM_Start+0x150>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d00e      	beq.n	8003f12 <HAL_TIM_PWM_Start+0x10e>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a17      	ldr	r2, [pc, #92]	@ (8003f58 <HAL_TIM_PWM_Start+0x154>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d009      	beq.n	8003f12 <HAL_TIM_PWM_Start+0x10e>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a16      	ldr	r2, [pc, #88]	@ (8003f5c <HAL_TIM_PWM_Start+0x158>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d004      	beq.n	8003f12 <HAL_TIM_PWM_Start+0x10e>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a14      	ldr	r2, [pc, #80]	@ (8003f60 <HAL_TIM_PWM_Start+0x15c>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d111      	bne.n	8003f36 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f003 0307 	and.w	r3, r3, #7
 8003f1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2b06      	cmp	r3, #6
 8003f22:	d010      	beq.n	8003f46 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f042 0201 	orr.w	r2, r2, #1
 8003f32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f34:	e007      	b.n	8003f46 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f042 0201 	orr.w	r2, r2, #1
 8003f44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	40010000 	.word	0x40010000
 8003f54:	40000400 	.word	0x40000400
 8003f58:	40000800 	.word	0x40000800
 8003f5c:	40000c00 	.word	0x40000c00
 8003f60:	40014000 	.word	0x40014000

08003f64 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2200      	movs	r2, #0
 8003f74:	6839      	ldr	r1, [r7, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 fda6 	bl	8004ac8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a29      	ldr	r2, [pc, #164]	@ (8004028 <HAL_TIM_PWM_Stop+0xc4>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d117      	bne.n	8003fb6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6a1a      	ldr	r2, [r3, #32]
 8003f8c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003f90:	4013      	ands	r3, r2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10f      	bne.n	8003fb6 <HAL_TIM_PWM_Stop+0x52>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	6a1a      	ldr	r2, [r3, #32]
 8003f9c:	f240 4344 	movw	r3, #1092	@ 0x444
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d107      	bne.n	8003fb6 <HAL_TIM_PWM_Stop+0x52>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fb4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	6a1a      	ldr	r2, [r3, #32]
 8003fbc:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10f      	bne.n	8003fe6 <HAL_TIM_PWM_Stop+0x82>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	6a1a      	ldr	r2, [r3, #32]
 8003fcc:	f240 4344 	movw	r3, #1092	@ 0x444
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d107      	bne.n	8003fe6 <HAL_TIM_PWM_Stop+0x82>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 0201 	bic.w	r2, r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d104      	bne.n	8003ff6 <HAL_TIM_PWM_Stop+0x92>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ff4:	e013      	b.n	800401e <HAL_TIM_PWM_Stop+0xba>
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	2b04      	cmp	r3, #4
 8003ffa:	d104      	bne.n	8004006 <HAL_TIM_PWM_Stop+0xa2>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004004:	e00b      	b.n	800401e <HAL_TIM_PWM_Stop+0xba>
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	2b08      	cmp	r3, #8
 800400a:	d104      	bne.n	8004016 <HAL_TIM_PWM_Stop+0xb2>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004014:	e003      	b.n	800401e <HAL_TIM_PWM_Stop+0xba>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3708      	adds	r7, #8
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	40010000 	.word	0x40010000

0800402c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d020      	beq.n	8004090 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d01b      	beq.n	8004090 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f06f 0202 	mvn.w	r2, #2
 8004060:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	f003 0303 	and.w	r3, r3, #3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 fa5b 	bl	8004532 <HAL_TIM_IC_CaptureCallback>
 800407c:	e005      	b.n	800408a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 fa4d 	bl	800451e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 fa5e 	bl	8004546 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	f003 0304 	and.w	r3, r3, #4
 8004096:	2b00      	cmp	r3, #0
 8004098:	d020      	beq.n	80040dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d01b      	beq.n	80040dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f06f 0204 	mvn.w	r2, #4
 80040ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2202      	movs	r2, #2
 80040b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 fa35 	bl	8004532 <HAL_TIM_IC_CaptureCallback>
 80040c8:	e005      	b.n	80040d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 fa27 	bl	800451e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 fa38 	bl	8004546 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d020      	beq.n	8004128 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f003 0308 	and.w	r3, r3, #8
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d01b      	beq.n	8004128 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f06f 0208 	mvn.w	r2, #8
 80040f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2204      	movs	r2, #4
 80040fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	f003 0303 	and.w	r3, r3, #3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 fa0f 	bl	8004532 <HAL_TIM_IC_CaptureCallback>
 8004114:	e005      	b.n	8004122 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 fa01 	bl	800451e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 fa12 	bl	8004546 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	f003 0310 	and.w	r3, r3, #16
 800412e:	2b00      	cmp	r3, #0
 8004130:	d020      	beq.n	8004174 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f003 0310 	and.w	r3, r3, #16
 8004138:	2b00      	cmp	r3, #0
 800413a:	d01b      	beq.n	8004174 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f06f 0210 	mvn.w	r2, #16
 8004144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2208      	movs	r2, #8
 800414a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f9e9 	bl	8004532 <HAL_TIM_IC_CaptureCallback>
 8004160:	e005      	b.n	800416e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f9db 	bl	800451e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 f9ec 	bl	8004546 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00c      	beq.n	8004198 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	2b00      	cmp	r3, #0
 8004186:	d007      	beq.n	8004198 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f06f 0201 	mvn.w	r2, #1
 8004190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7fd f8b9 	bl	800130a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00c      	beq.n	80041bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d007      	beq.n	80041bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80041b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 fd76 	bl	8004ca8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00c      	beq.n	80041e0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d007      	beq.n	80041e0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80041d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f9bd 	bl	800455a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	f003 0320 	and.w	r3, r3, #32
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00c      	beq.n	8004204 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f003 0320 	and.w	r3, r3, #32
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d007      	beq.n	8004204 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f06f 0220 	mvn.w	r2, #32
 80041fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 fd48 	bl	8004c94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004204:	bf00      	nop
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004218:	2300      	movs	r3, #0
 800421a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004222:	2b01      	cmp	r3, #1
 8004224:	d101      	bne.n	800422a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004226:	2302      	movs	r3, #2
 8004228:	e0ae      	b.n	8004388 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2b0c      	cmp	r3, #12
 8004236:	f200 809f 	bhi.w	8004378 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800423a:	a201      	add	r2, pc, #4	@ (adr r2, 8004240 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800423c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004240:	08004275 	.word	0x08004275
 8004244:	08004379 	.word	0x08004379
 8004248:	08004379 	.word	0x08004379
 800424c:	08004379 	.word	0x08004379
 8004250:	080042b5 	.word	0x080042b5
 8004254:	08004379 	.word	0x08004379
 8004258:	08004379 	.word	0x08004379
 800425c:	08004379 	.word	0x08004379
 8004260:	080042f7 	.word	0x080042f7
 8004264:	08004379 	.word	0x08004379
 8004268:	08004379 	.word	0x08004379
 800426c:	08004379 	.word	0x08004379
 8004270:	08004337 	.word	0x08004337
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68b9      	ldr	r1, [r7, #8]
 800427a:	4618      	mov	r0, r3
 800427c:	f000 f9fe 	bl	800467c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	699a      	ldr	r2, [r3, #24]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0208 	orr.w	r2, r2, #8
 800428e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	699a      	ldr	r2, [r3, #24]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0204 	bic.w	r2, r2, #4
 800429e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6999      	ldr	r1, [r3, #24]
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	691a      	ldr	r2, [r3, #16]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	619a      	str	r2, [r3, #24]
      break;
 80042b2:	e064      	b.n	800437e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68b9      	ldr	r1, [r7, #8]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 fa44 	bl	8004748 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	699a      	ldr	r2, [r3, #24]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	699a      	ldr	r2, [r3, #24]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6999      	ldr	r1, [r3, #24]
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	021a      	lsls	r2, r3, #8
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	619a      	str	r2, [r3, #24]
      break;
 80042f4:	e043      	b.n	800437e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68b9      	ldr	r1, [r7, #8]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f000 fa8f 	bl	8004820 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	69da      	ldr	r2, [r3, #28]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f042 0208 	orr.w	r2, r2, #8
 8004310:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	69da      	ldr	r2, [r3, #28]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0204 	bic.w	r2, r2, #4
 8004320:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	69d9      	ldr	r1, [r3, #28]
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	691a      	ldr	r2, [r3, #16]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	430a      	orrs	r2, r1
 8004332:	61da      	str	r2, [r3, #28]
      break;
 8004334:	e023      	b.n	800437e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68b9      	ldr	r1, [r7, #8]
 800433c:	4618      	mov	r0, r3
 800433e:	f000 fad9 	bl	80048f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	69da      	ldr	r2, [r3, #28]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004350:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	69da      	ldr	r2, [r3, #28]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004360:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	69d9      	ldr	r1, [r3, #28]
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	021a      	lsls	r2, r3, #8
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	61da      	str	r2, [r3, #28]
      break;
 8004376:	e002      	b.n	800437e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	75fb      	strb	r3, [r7, #23]
      break;
 800437c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004386:	7dfb      	ldrb	r3, [r7, #23]
}
 8004388:	4618      	mov	r0, r3
 800438a:	3718      	adds	r7, #24
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800439a:	2300      	movs	r3, #0
 800439c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d101      	bne.n	80043ac <HAL_TIM_ConfigClockSource+0x1c>
 80043a8:	2302      	movs	r3, #2
 80043aa:	e0b4      	b.n	8004516 <HAL_TIM_ConfigClockSource+0x186>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2202      	movs	r2, #2
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80043ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80043d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68ba      	ldr	r2, [r7, #8]
 80043da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043e4:	d03e      	beq.n	8004464 <HAL_TIM_ConfigClockSource+0xd4>
 80043e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043ea:	f200 8087 	bhi.w	80044fc <HAL_TIM_ConfigClockSource+0x16c>
 80043ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043f2:	f000 8086 	beq.w	8004502 <HAL_TIM_ConfigClockSource+0x172>
 80043f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043fa:	d87f      	bhi.n	80044fc <HAL_TIM_ConfigClockSource+0x16c>
 80043fc:	2b70      	cmp	r3, #112	@ 0x70
 80043fe:	d01a      	beq.n	8004436 <HAL_TIM_ConfigClockSource+0xa6>
 8004400:	2b70      	cmp	r3, #112	@ 0x70
 8004402:	d87b      	bhi.n	80044fc <HAL_TIM_ConfigClockSource+0x16c>
 8004404:	2b60      	cmp	r3, #96	@ 0x60
 8004406:	d050      	beq.n	80044aa <HAL_TIM_ConfigClockSource+0x11a>
 8004408:	2b60      	cmp	r3, #96	@ 0x60
 800440a:	d877      	bhi.n	80044fc <HAL_TIM_ConfigClockSource+0x16c>
 800440c:	2b50      	cmp	r3, #80	@ 0x50
 800440e:	d03c      	beq.n	800448a <HAL_TIM_ConfigClockSource+0xfa>
 8004410:	2b50      	cmp	r3, #80	@ 0x50
 8004412:	d873      	bhi.n	80044fc <HAL_TIM_ConfigClockSource+0x16c>
 8004414:	2b40      	cmp	r3, #64	@ 0x40
 8004416:	d058      	beq.n	80044ca <HAL_TIM_ConfigClockSource+0x13a>
 8004418:	2b40      	cmp	r3, #64	@ 0x40
 800441a:	d86f      	bhi.n	80044fc <HAL_TIM_ConfigClockSource+0x16c>
 800441c:	2b30      	cmp	r3, #48	@ 0x30
 800441e:	d064      	beq.n	80044ea <HAL_TIM_ConfigClockSource+0x15a>
 8004420:	2b30      	cmp	r3, #48	@ 0x30
 8004422:	d86b      	bhi.n	80044fc <HAL_TIM_ConfigClockSource+0x16c>
 8004424:	2b20      	cmp	r3, #32
 8004426:	d060      	beq.n	80044ea <HAL_TIM_ConfigClockSource+0x15a>
 8004428:	2b20      	cmp	r3, #32
 800442a:	d867      	bhi.n	80044fc <HAL_TIM_ConfigClockSource+0x16c>
 800442c:	2b00      	cmp	r3, #0
 800442e:	d05c      	beq.n	80044ea <HAL_TIM_ConfigClockSource+0x15a>
 8004430:	2b10      	cmp	r3, #16
 8004432:	d05a      	beq.n	80044ea <HAL_TIM_ConfigClockSource+0x15a>
 8004434:	e062      	b.n	80044fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004446:	f000 fb1f 	bl	8004a88 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004458:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	609a      	str	r2, [r3, #8]
      break;
 8004462:	e04f      	b.n	8004504 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004474:	f000 fb08 	bl	8004a88 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	689a      	ldr	r2, [r3, #8]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004486:	609a      	str	r2, [r3, #8]
      break;
 8004488:	e03c      	b.n	8004504 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004496:	461a      	mov	r2, r3
 8004498:	f000 fa7c 	bl	8004994 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2150      	movs	r1, #80	@ 0x50
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 fad5 	bl	8004a52 <TIM_ITRx_SetConfig>
      break;
 80044a8:	e02c      	b.n	8004504 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044b6:	461a      	mov	r2, r3
 80044b8:	f000 fa9b 	bl	80049f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2160      	movs	r1, #96	@ 0x60
 80044c2:	4618      	mov	r0, r3
 80044c4:	f000 fac5 	bl	8004a52 <TIM_ITRx_SetConfig>
      break;
 80044c8:	e01c      	b.n	8004504 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044d6:	461a      	mov	r2, r3
 80044d8:	f000 fa5c 	bl	8004994 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2140      	movs	r1, #64	@ 0x40
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 fab5 	bl	8004a52 <TIM_ITRx_SetConfig>
      break;
 80044e8:	e00c      	b.n	8004504 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4619      	mov	r1, r3
 80044f4:	4610      	mov	r0, r2
 80044f6:	f000 faac 	bl	8004a52 <TIM_ITRx_SetConfig>
      break;
 80044fa:	e003      	b.n	8004504 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004500:	e000      	b.n	8004504 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004502:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004514:	7bfb      	ldrb	r3, [r7, #15]
}
 8004516:	4618      	mov	r0, r3
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800451e:	b480      	push	{r7}
 8004520:	b083      	sub	sp, #12
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004532:	b480      	push	{r7}
 8004534:	b083      	sub	sp, #12
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800453a:	bf00      	nop
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004546:	b480      	push	{r7}
 8004548:	b083      	sub	sp, #12
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800454e:	bf00      	nop
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800455a:	b480      	push	{r7}
 800455c:	b083      	sub	sp, #12
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004562:	bf00      	nop
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
	...

08004570 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a37      	ldr	r2, [pc, #220]	@ (8004660 <TIM_Base_SetConfig+0xf0>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d00f      	beq.n	80045a8 <TIM_Base_SetConfig+0x38>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800458e:	d00b      	beq.n	80045a8 <TIM_Base_SetConfig+0x38>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a34      	ldr	r2, [pc, #208]	@ (8004664 <TIM_Base_SetConfig+0xf4>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d007      	beq.n	80045a8 <TIM_Base_SetConfig+0x38>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a33      	ldr	r2, [pc, #204]	@ (8004668 <TIM_Base_SetConfig+0xf8>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d003      	beq.n	80045a8 <TIM_Base_SetConfig+0x38>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a32      	ldr	r2, [pc, #200]	@ (800466c <TIM_Base_SetConfig+0xfc>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d108      	bne.n	80045ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a28      	ldr	r2, [pc, #160]	@ (8004660 <TIM_Base_SetConfig+0xf0>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d01b      	beq.n	80045fa <TIM_Base_SetConfig+0x8a>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045c8:	d017      	beq.n	80045fa <TIM_Base_SetConfig+0x8a>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a25      	ldr	r2, [pc, #148]	@ (8004664 <TIM_Base_SetConfig+0xf4>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d013      	beq.n	80045fa <TIM_Base_SetConfig+0x8a>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a24      	ldr	r2, [pc, #144]	@ (8004668 <TIM_Base_SetConfig+0xf8>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d00f      	beq.n	80045fa <TIM_Base_SetConfig+0x8a>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a23      	ldr	r2, [pc, #140]	@ (800466c <TIM_Base_SetConfig+0xfc>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d00b      	beq.n	80045fa <TIM_Base_SetConfig+0x8a>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a22      	ldr	r2, [pc, #136]	@ (8004670 <TIM_Base_SetConfig+0x100>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d007      	beq.n	80045fa <TIM_Base_SetConfig+0x8a>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a21      	ldr	r2, [pc, #132]	@ (8004674 <TIM_Base_SetConfig+0x104>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d003      	beq.n	80045fa <TIM_Base_SetConfig+0x8a>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a20      	ldr	r2, [pc, #128]	@ (8004678 <TIM_Base_SetConfig+0x108>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d108      	bne.n	800460c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004600:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	4313      	orrs	r3, r2
 800460a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	4313      	orrs	r3, r2
 8004618:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	689a      	ldr	r2, [r3, #8]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a0c      	ldr	r2, [pc, #48]	@ (8004660 <TIM_Base_SetConfig+0xf0>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d103      	bne.n	800463a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	691a      	ldr	r2, [r3, #16]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f043 0204 	orr.w	r2, r3, #4
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	601a      	str	r2, [r3, #0]
}
 8004652:	bf00      	nop
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	40010000 	.word	0x40010000
 8004664:	40000400 	.word	0x40000400
 8004668:	40000800 	.word	0x40000800
 800466c:	40000c00 	.word	0x40000c00
 8004670:	40014000 	.word	0x40014000
 8004674:	40014400 	.word	0x40014400
 8004678:	40014800 	.word	0x40014800

0800467c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800467c:	b480      	push	{r7}
 800467e:	b087      	sub	sp, #28
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	f023 0201 	bic.w	r2, r3, #1
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f023 0303 	bic.w	r3, r3, #3
 80046b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f023 0302 	bic.w	r3, r3, #2
 80046c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004744 <TIM_OC1_SetConfig+0xc8>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d10c      	bne.n	80046f2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	f023 0308 	bic.w	r3, r3, #8
 80046de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f023 0304 	bic.w	r3, r3, #4
 80046f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a13      	ldr	r2, [pc, #76]	@ (8004744 <TIM_OC1_SetConfig+0xc8>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d111      	bne.n	800471e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004700:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004708:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	4313      	orrs	r3, r2
 8004712:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	4313      	orrs	r3, r2
 800471c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	621a      	str	r2, [r3, #32]
}
 8004738:	bf00      	nop
 800473a:	371c      	adds	r7, #28
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	40010000 	.word	0x40010000

08004748 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004748:	b480      	push	{r7}
 800474a:	b087      	sub	sp, #28
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	f023 0210 	bic.w	r2, r3, #16
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800477e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	021b      	lsls	r3, r3, #8
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	4313      	orrs	r3, r2
 800478a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f023 0320 	bic.w	r3, r3, #32
 8004792:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	011b      	lsls	r3, r3, #4
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	4313      	orrs	r3, r2
 800479e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a1e      	ldr	r2, [pc, #120]	@ (800481c <TIM_OC2_SetConfig+0xd4>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d10d      	bne.n	80047c4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	011b      	lsls	r3, r3, #4
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a15      	ldr	r2, [pc, #84]	@ (800481c <TIM_OC2_SetConfig+0xd4>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d113      	bne.n	80047f4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80047d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80047da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	621a      	str	r2, [r3, #32]
}
 800480e:	bf00      	nop
 8004810:	371c      	adds	r7, #28
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	40010000 	.word	0x40010000

08004820 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004820:	b480      	push	{r7}
 8004822:	b087      	sub	sp, #28
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800484e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f023 0303 	bic.w	r3, r3, #3
 8004856:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	4313      	orrs	r3, r2
 8004860:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004868:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	021b      	lsls	r3, r3, #8
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	4313      	orrs	r3, r2
 8004874:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a1d      	ldr	r2, [pc, #116]	@ (80048f0 <TIM_OC3_SetConfig+0xd0>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d10d      	bne.n	800489a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004884:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	021b      	lsls	r3, r3, #8
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	4313      	orrs	r3, r2
 8004890:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004898:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a14      	ldr	r2, [pc, #80]	@ (80048f0 <TIM_OC3_SetConfig+0xd0>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d113      	bne.n	80048ca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80048a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80048b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	011b      	lsls	r3, r3, #4
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	621a      	str	r2, [r3, #32]
}
 80048e4:	bf00      	nop
 80048e6:	371c      	adds	r7, #28
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr
 80048f0:	40010000 	.word	0x40010000

080048f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b087      	sub	sp, #28
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a1b      	ldr	r3, [r3, #32]
 8004908:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800492a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	021b      	lsls	r3, r3, #8
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	4313      	orrs	r3, r2
 8004936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800493e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	031b      	lsls	r3, r3, #12
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	4313      	orrs	r3, r2
 800494a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a10      	ldr	r2, [pc, #64]	@ (8004990 <TIM_OC4_SetConfig+0x9c>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d109      	bne.n	8004968 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800495a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	019b      	lsls	r3, r3, #6
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	4313      	orrs	r3, r2
 8004966:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	621a      	str	r2, [r3, #32]
}
 8004982:	bf00      	nop
 8004984:	371c      	adds	r7, #28
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	40010000 	.word	0x40010000

08004994 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004994:	b480      	push	{r7}
 8004996:	b087      	sub	sp, #28
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6a1b      	ldr	r3, [r3, #32]
 80049a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	f023 0201 	bic.w	r2, r3, #1
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	011b      	lsls	r3, r3, #4
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f023 030a 	bic.w	r3, r3, #10
 80049d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	621a      	str	r2, [r3, #32]
}
 80049e6:	bf00      	nop
 80049e8:	371c      	adds	r7, #28
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr

080049f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b087      	sub	sp, #28
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	60f8      	str	r0, [r7, #12]
 80049fa:	60b9      	str	r1, [r7, #8]
 80049fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	f023 0210 	bic.w	r2, r3, #16
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	031b      	lsls	r3, r3, #12
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004a2e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	011b      	lsls	r3, r3, #4
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	621a      	str	r2, [r3, #32]
}
 8004a46:	bf00      	nop
 8004a48:	371c      	adds	r7, #28
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b085      	sub	sp, #20
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
 8004a5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a6a:	683a      	ldr	r2, [r7, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	f043 0307 	orr.w	r3, r3, #7
 8004a74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	609a      	str	r2, [r3, #8]
}
 8004a7c:	bf00      	nop
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b087      	sub	sp, #28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
 8004a94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004aa2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	021a      	lsls	r2, r3, #8
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	609a      	str	r2, [r3, #8]
}
 8004abc:	bf00      	nop
 8004abe:	371c      	adds	r7, #28
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b087      	sub	sp, #28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	f003 031f 	and.w	r3, r3, #31
 8004ada:	2201      	movs	r2, #1
 8004adc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6a1a      	ldr	r2, [r3, #32]
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	43db      	mvns	r3, r3
 8004aea:	401a      	ands	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6a1a      	ldr	r2, [r3, #32]
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	f003 031f 	and.w	r3, r3, #31
 8004afa:	6879      	ldr	r1, [r7, #4]
 8004afc:	fa01 f303 	lsl.w	r3, r1, r3
 8004b00:	431a      	orrs	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	621a      	str	r2, [r3, #32]
}
 8004b06:	bf00      	nop
 8004b08:	371c      	adds	r7, #28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
	...

08004b14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d101      	bne.n	8004b2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b28:	2302      	movs	r3, #2
 8004b2a:	e050      	b.n	8004bce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a1c      	ldr	r2, [pc, #112]	@ (8004bdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d018      	beq.n	8004ba2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b78:	d013      	beq.n	8004ba2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a18      	ldr	r2, [pc, #96]	@ (8004be0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d00e      	beq.n	8004ba2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a16      	ldr	r2, [pc, #88]	@ (8004be4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d009      	beq.n	8004ba2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a15      	ldr	r2, [pc, #84]	@ (8004be8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d004      	beq.n	8004ba2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a13      	ldr	r2, [pc, #76]	@ (8004bec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d10c      	bne.n	8004bbc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ba8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	68ba      	ldr	r2, [r7, #8]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68ba      	ldr	r2, [r7, #8]
 8004bba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3714      	adds	r7, #20
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	40010000 	.word	0x40010000
 8004be0:	40000400 	.word	0x40000400
 8004be4:	40000800 	.word	0x40000800
 8004be8:	40000c00 	.word	0x40000c00
 8004bec:	40014000 	.word	0x40014000

08004bf0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d101      	bne.n	8004c0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004c08:	2302      	movs	r3, #2
 8004c0a:	e03d      	b.n	8004c88 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3714      	adds	r7, #20
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e042      	b.n	8004d54 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d106      	bne.n	8004ce8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7fc f962 	bl	8000fac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2224      	movs	r2, #36	@ 0x24
 8004cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68da      	ldr	r2, [r3, #12]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004cfe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 fcef 	bl	80056e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	691a      	ldr	r2, [r3, #16]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	695a      	ldr	r2, [r3, #20]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68da      	ldr	r2, [r3, #12]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2220      	movs	r2, #32
 8004d48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	4613      	mov	r3, r2
 8004d68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b20      	cmp	r3, #32
 8004d74:	d112      	bne.n	8004d9c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d002      	beq.n	8004d82 <HAL_UART_Receive_IT+0x26>
 8004d7c:	88fb      	ldrh	r3, [r7, #6]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e00b      	b.n	8004d9e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004d8c:	88fb      	ldrh	r3, [r7, #6]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	68b9      	ldr	r1, [r7, #8]
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f000 fad2 	bl	800533c <UART_Start_Receive_IT>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	e000      	b.n	8004d9e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004d9c:	2302      	movs	r3, #2
  }
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
	...

08004da8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b0ba      	sub	sp, #232	@ 0xe8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dde:	f003 030f 	and.w	r3, r3, #15
 8004de2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004de6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10f      	bne.n	8004e0e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004df2:	f003 0320 	and.w	r3, r3, #32
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d009      	beq.n	8004e0e <HAL_UART_IRQHandler+0x66>
 8004dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dfe:	f003 0320 	and.w	r3, r3, #32
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d003      	beq.n	8004e0e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 fbae 	bl	8005568 <UART_Receive_IT>
      return;
 8004e0c:	e273      	b.n	80052f6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004e0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f000 80de 	beq.w	8004fd4 <HAL_UART_IRQHandler+0x22c>
 8004e18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d106      	bne.n	8004e32 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e28:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 80d1 	beq.w	8004fd4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00b      	beq.n	8004e56 <HAL_UART_IRQHandler+0xae>
 8004e3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d005      	beq.n	8004e56 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e4e:	f043 0201 	orr.w	r2, r3, #1
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e5a:	f003 0304 	and.w	r3, r3, #4
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00b      	beq.n	8004e7a <HAL_UART_IRQHandler+0xd2>
 8004e62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d005      	beq.n	8004e7a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e72:	f043 0202 	orr.w	r2, r3, #2
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00b      	beq.n	8004e9e <HAL_UART_IRQHandler+0xf6>
 8004e86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d005      	beq.n	8004e9e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e96:	f043 0204 	orr.w	r2, r3, #4
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ea2:	f003 0308 	and.w	r3, r3, #8
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d011      	beq.n	8004ece <HAL_UART_IRQHandler+0x126>
 8004eaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004eae:	f003 0320 	and.w	r3, r3, #32
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d105      	bne.n	8004ec2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004eb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d005      	beq.n	8004ece <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ec6:	f043 0208 	orr.w	r2, r3, #8
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 820a 	beq.w	80052ec <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004edc:	f003 0320 	and.w	r3, r3, #32
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d008      	beq.n	8004ef6 <HAL_UART_IRQHandler+0x14e>
 8004ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ee8:	f003 0320 	and.w	r3, r3, #32
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d002      	beq.n	8004ef6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 fb39 	bl	8005568 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f00:	2b40      	cmp	r3, #64	@ 0x40
 8004f02:	bf0c      	ite	eq
 8004f04:	2301      	moveq	r3, #1
 8004f06:	2300      	movne	r3, #0
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f12:	f003 0308 	and.w	r3, r3, #8
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d103      	bne.n	8004f22 <HAL_UART_IRQHandler+0x17a>
 8004f1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d04f      	beq.n	8004fc2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 fa44 	bl	80053b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f32:	2b40      	cmp	r3, #64	@ 0x40
 8004f34:	d141      	bne.n	8004fba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	3314      	adds	r3, #20
 8004f3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f40:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f44:	e853 3f00 	ldrex	r3, [r3]
 8004f48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004f4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	3314      	adds	r3, #20
 8004f5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004f62:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004f66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004f6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004f72:	e841 2300 	strex	r3, r2, [r1]
 8004f76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004f7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1d9      	bne.n	8004f36 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d013      	beq.n	8004fb2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f8e:	4a8a      	ldr	r2, [pc, #552]	@ (80051b8 <HAL_UART_IRQHandler+0x410>)
 8004f90:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fd fa97 	bl	80024ca <HAL_DMA_Abort_IT>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d016      	beq.n	8004fd0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004fac:	4610      	mov	r0, r2
 8004fae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fb0:	e00e      	b.n	8004fd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f9ac 	bl	8005310 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fb8:	e00a      	b.n	8004fd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f9a8 	bl	8005310 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc0:	e006      	b.n	8004fd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f9a4 	bl	8005310 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004fce:	e18d      	b.n	80052ec <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd0:	bf00      	nop
    return;
 8004fd2:	e18b      	b.n	80052ec <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	f040 8167 	bne.w	80052ac <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fe2:	f003 0310 	and.w	r3, r3, #16
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f000 8160 	beq.w	80052ac <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ff0:	f003 0310 	and.w	r3, r3, #16
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 8159 	beq.w	80052ac <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	60bb      	str	r3, [r7, #8]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	60bb      	str	r3, [r7, #8]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	60bb      	str	r3, [r7, #8]
 800500e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800501a:	2b40      	cmp	r3, #64	@ 0x40
 800501c:	f040 80ce 	bne.w	80051bc <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800502c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005030:	2b00      	cmp	r3, #0
 8005032:	f000 80a9 	beq.w	8005188 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800503a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800503e:	429a      	cmp	r2, r3
 8005040:	f080 80a2 	bcs.w	8005188 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800504a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005050:	69db      	ldr	r3, [r3, #28]
 8005052:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005056:	f000 8088 	beq.w	800516a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	330c      	adds	r3, #12
 8005060:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005064:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005068:	e853 3f00 	ldrex	r3, [r3]
 800506c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005070:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005074:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005078:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	330c      	adds	r3, #12
 8005082:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005086:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800508a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005092:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005096:	e841 2300 	strex	r3, r2, [r1]
 800509a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800509e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1d9      	bne.n	800505a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	3314      	adds	r3, #20
 80050ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050b0:	e853 3f00 	ldrex	r3, [r3]
 80050b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80050b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050b8:	f023 0301 	bic.w	r3, r3, #1
 80050bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	3314      	adds	r3, #20
 80050c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80050ca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80050ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80050d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80050d6:	e841 2300 	strex	r3, r2, [r1]
 80050da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80050dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1e1      	bne.n	80050a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	3314      	adds	r3, #20
 80050e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050ec:	e853 3f00 	ldrex	r3, [r3]
 80050f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80050f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	3314      	adds	r3, #20
 8005102:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005106:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005108:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800510c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800510e:	e841 2300 	strex	r3, r2, [r1]
 8005112:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005114:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1e3      	bne.n	80050e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2220      	movs	r2, #32
 800511e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	330c      	adds	r3, #12
 800512e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005130:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005132:	e853 3f00 	ldrex	r3, [r3]
 8005136:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005138:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800513a:	f023 0310 	bic.w	r3, r3, #16
 800513e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	330c      	adds	r3, #12
 8005148:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800514c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800514e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005150:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005152:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005154:	e841 2300 	strex	r3, r2, [r1]
 8005158:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800515a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1e3      	bne.n	8005128 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005164:	4618      	mov	r0, r3
 8005166:	f7fd f940 	bl	80023ea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2202      	movs	r2, #2
 800516e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005178:	b29b      	uxth	r3, r3
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	b29b      	uxth	r3, r3
 800517e:	4619      	mov	r1, r3
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 f8cf 	bl	8005324 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005186:	e0b3      	b.n	80052f0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800518c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005190:	429a      	cmp	r2, r3
 8005192:	f040 80ad 	bne.w	80052f0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800519a:	69db      	ldr	r3, [r3, #28]
 800519c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051a0:	f040 80a6 	bne.w	80052f0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2202      	movs	r2, #2
 80051a8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80051ae:	4619      	mov	r1, r3
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 f8b7 	bl	8005324 <HAL_UARTEx_RxEventCallback>
      return;
 80051b6:	e09b      	b.n	80052f0 <HAL_UART_IRQHandler+0x548>
 80051b8:	08005477 	.word	0x08005477
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	f000 808e 	beq.w	80052f4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80051d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f000 8089 	beq.w	80052f4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	330c      	adds	r3, #12
 80051e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ec:	e853 3f00 	ldrex	r3, [r3]
 80051f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	330c      	adds	r3, #12
 8005202:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005206:	647a      	str	r2, [r7, #68]	@ 0x44
 8005208:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800520c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800520e:	e841 2300 	strex	r3, r2, [r1]
 8005212:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005214:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1e3      	bne.n	80051e2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	3314      	adds	r3, #20
 8005220:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005224:	e853 3f00 	ldrex	r3, [r3]
 8005228:	623b      	str	r3, [r7, #32]
   return(result);
 800522a:	6a3b      	ldr	r3, [r7, #32]
 800522c:	f023 0301 	bic.w	r3, r3, #1
 8005230:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	3314      	adds	r3, #20
 800523a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800523e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005240:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005242:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005244:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005246:	e841 2300 	strex	r3, r2, [r1]
 800524a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800524c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1e3      	bne.n	800521a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2220      	movs	r2, #32
 8005256:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	330c      	adds	r3, #12
 8005266:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	e853 3f00 	ldrex	r3, [r3]
 800526e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f023 0310 	bic.w	r3, r3, #16
 8005276:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	330c      	adds	r3, #12
 8005280:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005284:	61fa      	str	r2, [r7, #28]
 8005286:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005288:	69b9      	ldr	r1, [r7, #24]
 800528a:	69fa      	ldr	r2, [r7, #28]
 800528c:	e841 2300 	strex	r3, r2, [r1]
 8005290:	617b      	str	r3, [r7, #20]
   return(result);
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1e3      	bne.n	8005260 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2202      	movs	r2, #2
 800529c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800529e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80052a2:	4619      	mov	r1, r3
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 f83d 	bl	8005324 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052aa:	e023      	b.n	80052f4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80052ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d009      	beq.n	80052cc <HAL_UART_IRQHandler+0x524>
 80052b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d003      	beq.n	80052cc <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 f8e7 	bl	8005498 <UART_Transmit_IT>
    return;
 80052ca:	e014      	b.n	80052f6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80052cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00e      	beq.n	80052f6 <HAL_UART_IRQHandler+0x54e>
 80052d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d008      	beq.n	80052f6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 f927 	bl	8005538 <UART_EndTransmit_IT>
    return;
 80052ea:	e004      	b.n	80052f6 <HAL_UART_IRQHandler+0x54e>
    return;
 80052ec:	bf00      	nop
 80052ee:	e002      	b.n	80052f6 <HAL_UART_IRQHandler+0x54e>
      return;
 80052f0:	bf00      	nop
 80052f2:	e000      	b.n	80052f6 <HAL_UART_IRQHandler+0x54e>
      return;
 80052f4:	bf00      	nop
  }
}
 80052f6:	37e8      	adds	r7, #232	@ 0xe8
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	460b      	mov	r3, r1
 800532e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	4613      	mov	r3, r2
 8005348:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	88fa      	ldrh	r2, [r7, #6]
 8005354:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	88fa      	ldrh	r2, [r7, #6]
 800535a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2222      	movs	r2, #34	@ 0x22
 8005366:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d007      	beq.n	8005382 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68da      	ldr	r2, [r3, #12]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005380:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	695a      	ldr	r2, [r3, #20]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f042 0201 	orr.w	r2, r2, #1
 8005390:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68da      	ldr	r2, [r3, #12]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f042 0220 	orr.w	r2, r2, #32
 80053a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3714      	adds	r7, #20
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b095      	sub	sp, #84	@ 0x54
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	330c      	adds	r3, #12
 80053be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053c2:	e853 3f00 	ldrex	r3, [r3]
 80053c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	330c      	adds	r3, #12
 80053d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80053d8:	643a      	str	r2, [r7, #64]	@ 0x40
 80053da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80053de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80053e0:	e841 2300 	strex	r3, r2, [r1]
 80053e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80053e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1e5      	bne.n	80053b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	3314      	adds	r3, #20
 80053f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f4:	6a3b      	ldr	r3, [r7, #32]
 80053f6:	e853 3f00 	ldrex	r3, [r3]
 80053fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	f023 0301 	bic.w	r3, r3, #1
 8005402:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	3314      	adds	r3, #20
 800540a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800540c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800540e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005410:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005412:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005414:	e841 2300 	strex	r3, r2, [r1]
 8005418:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800541a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1e5      	bne.n	80053ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005424:	2b01      	cmp	r3, #1
 8005426:	d119      	bne.n	800545c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	330c      	adds	r3, #12
 800542e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	e853 3f00 	ldrex	r3, [r3]
 8005436:	60bb      	str	r3, [r7, #8]
   return(result);
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	f023 0310 	bic.w	r3, r3, #16
 800543e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	330c      	adds	r3, #12
 8005446:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005448:	61ba      	str	r2, [r7, #24]
 800544a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544c:	6979      	ldr	r1, [r7, #20]
 800544e:	69ba      	ldr	r2, [r7, #24]
 8005450:	e841 2300 	strex	r3, r2, [r1]
 8005454:	613b      	str	r3, [r7, #16]
   return(result);
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1e5      	bne.n	8005428 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2220      	movs	r2, #32
 8005460:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800546a:	bf00      	nop
 800546c:	3754      	adds	r7, #84	@ 0x54
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b084      	sub	sp, #16
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005482:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f7ff ff40 	bl	8005310 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005490:	bf00      	nop
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b21      	cmp	r3, #33	@ 0x21
 80054aa:	d13e      	bne.n	800552a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054b4:	d114      	bne.n	80054e0 <UART_Transmit_IT+0x48>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d110      	bne.n	80054e0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	881b      	ldrh	r3, [r3, #0]
 80054c8:	461a      	mov	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054d2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	1c9a      	adds	r2, r3, #2
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	621a      	str	r2, [r3, #32]
 80054de:	e008      	b.n	80054f2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a1b      	ldr	r3, [r3, #32]
 80054e4:	1c59      	adds	r1, r3, #1
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	6211      	str	r1, [r2, #32]
 80054ea:	781a      	ldrb	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	3b01      	subs	r3, #1
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	4619      	mov	r1, r3
 8005500:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10f      	bne.n	8005526 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68da      	ldr	r2, [r3, #12]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005514:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68da      	ldr	r2, [r3, #12]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005524:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005526:	2300      	movs	r3, #0
 8005528:	e000      	b.n	800552c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800552a:	2302      	movs	r3, #2
  }
}
 800552c:	4618      	mov	r0, r3
 800552e:	3714      	adds	r7, #20
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68da      	ldr	r2, [r3, #12]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800554e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2220      	movs	r2, #32
 8005554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f7ff fecf 	bl	80052fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	3708      	adds	r7, #8
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b08c      	sub	sp, #48	@ 0x30
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005570:	2300      	movs	r3, #0
 8005572:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005574:	2300      	movs	r3, #0
 8005576:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800557e:	b2db      	uxtb	r3, r3
 8005580:	2b22      	cmp	r3, #34	@ 0x22
 8005582:	f040 80aa 	bne.w	80056da <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800558e:	d115      	bne.n	80055bc <UART_Receive_IT+0x54>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d111      	bne.n	80055bc <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800559c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b4:	1c9a      	adds	r2, r3, #2
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80055ba:	e024      	b.n	8005606 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055ca:	d007      	beq.n	80055dc <UART_Receive_IT+0x74>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d10a      	bne.n	80055ea <UART_Receive_IT+0x82>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d106      	bne.n	80055ea <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055e6:	701a      	strb	r2, [r3, #0]
 80055e8:	e008      	b.n	80055fc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055f6:	b2da      	uxtb	r2, r3
 80055f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055fa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005600:	1c5a      	adds	r2, r3, #1
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800560a:	b29b      	uxth	r3, r3
 800560c:	3b01      	subs	r3, #1
 800560e:	b29b      	uxth	r3, r3
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	4619      	mov	r1, r3
 8005614:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005616:	2b00      	cmp	r3, #0
 8005618:	d15d      	bne.n	80056d6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68da      	ldr	r2, [r3, #12]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f022 0220 	bic.w	r2, r2, #32
 8005628:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68da      	ldr	r2, [r3, #12]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005638:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	695a      	ldr	r2, [r3, #20]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f022 0201 	bic.w	r2, r2, #1
 8005648:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2220      	movs	r2, #32
 800564e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800565c:	2b01      	cmp	r3, #1
 800565e:	d135      	bne.n	80056cc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	330c      	adds	r3, #12
 800566c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	e853 3f00 	ldrex	r3, [r3]
 8005674:	613b      	str	r3, [r7, #16]
   return(result);
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	f023 0310 	bic.w	r3, r3, #16
 800567c:	627b      	str	r3, [r7, #36]	@ 0x24
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	330c      	adds	r3, #12
 8005684:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005686:	623a      	str	r2, [r7, #32]
 8005688:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568a:	69f9      	ldr	r1, [r7, #28]
 800568c:	6a3a      	ldr	r2, [r7, #32]
 800568e:	e841 2300 	strex	r3, r2, [r1]
 8005692:	61bb      	str	r3, [r7, #24]
   return(result);
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1e5      	bne.n	8005666 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0310 	and.w	r3, r3, #16
 80056a4:	2b10      	cmp	r3, #16
 80056a6:	d10a      	bne.n	80056be <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056a8:	2300      	movs	r3, #0
 80056aa:	60fb      	str	r3, [r7, #12]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	60fb      	str	r3, [r7, #12]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	60fb      	str	r3, [r7, #12]
 80056bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80056c2:	4619      	mov	r1, r3
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f7ff fe2d 	bl	8005324 <HAL_UARTEx_RxEventCallback>
 80056ca:	e002      	b.n	80056d2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f7fb fe5b 	bl	8001388 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80056d2:	2300      	movs	r3, #0
 80056d4:	e002      	b.n	80056dc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80056d6:	2300      	movs	r3, #0
 80056d8:	e000      	b.n	80056dc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80056da:	2302      	movs	r3, #2
  }
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3730      	adds	r7, #48	@ 0x30
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056e8:	b0c0      	sub	sp, #256	@ 0x100
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80056fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005700:	68d9      	ldr	r1, [r3, #12]
 8005702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	ea40 0301 	orr.w	r3, r0, r1
 800570c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800570e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005712:	689a      	ldr	r2, [r3, #8]
 8005714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	431a      	orrs	r2, r3
 800571c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	431a      	orrs	r2, r3
 8005724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005728:	69db      	ldr	r3, [r3, #28]
 800572a:	4313      	orrs	r3, r2
 800572c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800573c:	f021 010c 	bic.w	r1, r1, #12
 8005740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800574a:	430b      	orrs	r3, r1
 800574c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800574e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800575a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800575e:	6999      	ldr	r1, [r3, #24]
 8005760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	ea40 0301 	orr.w	r3, r0, r1
 800576a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800576c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	4b8f      	ldr	r3, [pc, #572]	@ (80059b0 <UART_SetConfig+0x2cc>)
 8005774:	429a      	cmp	r2, r3
 8005776:	d005      	beq.n	8005784 <UART_SetConfig+0xa0>
 8005778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	4b8d      	ldr	r3, [pc, #564]	@ (80059b4 <UART_SetConfig+0x2d0>)
 8005780:	429a      	cmp	r2, r3
 8005782:	d104      	bne.n	800578e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005784:	f7fe f99c 	bl	8003ac0 <HAL_RCC_GetPCLK2Freq>
 8005788:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800578c:	e003      	b.n	8005796 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800578e:	f7fe f983 	bl	8003a98 <HAL_RCC_GetPCLK1Freq>
 8005792:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800579a:	69db      	ldr	r3, [r3, #28]
 800579c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057a0:	f040 810c 	bne.w	80059bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057a8:	2200      	movs	r2, #0
 80057aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80057ae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80057b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80057b6:	4622      	mov	r2, r4
 80057b8:	462b      	mov	r3, r5
 80057ba:	1891      	adds	r1, r2, r2
 80057bc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80057be:	415b      	adcs	r3, r3
 80057c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80057c6:	4621      	mov	r1, r4
 80057c8:	eb12 0801 	adds.w	r8, r2, r1
 80057cc:	4629      	mov	r1, r5
 80057ce:	eb43 0901 	adc.w	r9, r3, r1
 80057d2:	f04f 0200 	mov.w	r2, #0
 80057d6:	f04f 0300 	mov.w	r3, #0
 80057da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057e6:	4690      	mov	r8, r2
 80057e8:	4699      	mov	r9, r3
 80057ea:	4623      	mov	r3, r4
 80057ec:	eb18 0303 	adds.w	r3, r8, r3
 80057f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80057f4:	462b      	mov	r3, r5
 80057f6:	eb49 0303 	adc.w	r3, r9, r3
 80057fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80057fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800580a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800580e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005812:	460b      	mov	r3, r1
 8005814:	18db      	adds	r3, r3, r3
 8005816:	653b      	str	r3, [r7, #80]	@ 0x50
 8005818:	4613      	mov	r3, r2
 800581a:	eb42 0303 	adc.w	r3, r2, r3
 800581e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005820:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005824:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005828:	f7fa fd2a 	bl	8000280 <__aeabi_uldivmod>
 800582c:	4602      	mov	r2, r0
 800582e:	460b      	mov	r3, r1
 8005830:	4b61      	ldr	r3, [pc, #388]	@ (80059b8 <UART_SetConfig+0x2d4>)
 8005832:	fba3 2302 	umull	r2, r3, r3, r2
 8005836:	095b      	lsrs	r3, r3, #5
 8005838:	011c      	lsls	r4, r3, #4
 800583a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800583e:	2200      	movs	r2, #0
 8005840:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005844:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005848:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800584c:	4642      	mov	r2, r8
 800584e:	464b      	mov	r3, r9
 8005850:	1891      	adds	r1, r2, r2
 8005852:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005854:	415b      	adcs	r3, r3
 8005856:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005858:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800585c:	4641      	mov	r1, r8
 800585e:	eb12 0a01 	adds.w	sl, r2, r1
 8005862:	4649      	mov	r1, r9
 8005864:	eb43 0b01 	adc.w	fp, r3, r1
 8005868:	f04f 0200 	mov.w	r2, #0
 800586c:	f04f 0300 	mov.w	r3, #0
 8005870:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005874:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005878:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800587c:	4692      	mov	sl, r2
 800587e:	469b      	mov	fp, r3
 8005880:	4643      	mov	r3, r8
 8005882:	eb1a 0303 	adds.w	r3, sl, r3
 8005886:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800588a:	464b      	mov	r3, r9
 800588c:	eb4b 0303 	adc.w	r3, fp, r3
 8005890:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80058a0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80058a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80058a8:	460b      	mov	r3, r1
 80058aa:	18db      	adds	r3, r3, r3
 80058ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80058ae:	4613      	mov	r3, r2
 80058b0:	eb42 0303 	adc.w	r3, r2, r3
 80058b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80058b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80058ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80058be:	f7fa fcdf 	bl	8000280 <__aeabi_uldivmod>
 80058c2:	4602      	mov	r2, r0
 80058c4:	460b      	mov	r3, r1
 80058c6:	4611      	mov	r1, r2
 80058c8:	4b3b      	ldr	r3, [pc, #236]	@ (80059b8 <UART_SetConfig+0x2d4>)
 80058ca:	fba3 2301 	umull	r2, r3, r3, r1
 80058ce:	095b      	lsrs	r3, r3, #5
 80058d0:	2264      	movs	r2, #100	@ 0x64
 80058d2:	fb02 f303 	mul.w	r3, r2, r3
 80058d6:	1acb      	subs	r3, r1, r3
 80058d8:	00db      	lsls	r3, r3, #3
 80058da:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80058de:	4b36      	ldr	r3, [pc, #216]	@ (80059b8 <UART_SetConfig+0x2d4>)
 80058e0:	fba3 2302 	umull	r2, r3, r3, r2
 80058e4:	095b      	lsrs	r3, r3, #5
 80058e6:	005b      	lsls	r3, r3, #1
 80058e8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80058ec:	441c      	add	r4, r3
 80058ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058f2:	2200      	movs	r2, #0
 80058f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80058f8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80058fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005900:	4642      	mov	r2, r8
 8005902:	464b      	mov	r3, r9
 8005904:	1891      	adds	r1, r2, r2
 8005906:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005908:	415b      	adcs	r3, r3
 800590a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800590c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005910:	4641      	mov	r1, r8
 8005912:	1851      	adds	r1, r2, r1
 8005914:	6339      	str	r1, [r7, #48]	@ 0x30
 8005916:	4649      	mov	r1, r9
 8005918:	414b      	adcs	r3, r1
 800591a:	637b      	str	r3, [r7, #52]	@ 0x34
 800591c:	f04f 0200 	mov.w	r2, #0
 8005920:	f04f 0300 	mov.w	r3, #0
 8005924:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005928:	4659      	mov	r1, fp
 800592a:	00cb      	lsls	r3, r1, #3
 800592c:	4651      	mov	r1, sl
 800592e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005932:	4651      	mov	r1, sl
 8005934:	00ca      	lsls	r2, r1, #3
 8005936:	4610      	mov	r0, r2
 8005938:	4619      	mov	r1, r3
 800593a:	4603      	mov	r3, r0
 800593c:	4642      	mov	r2, r8
 800593e:	189b      	adds	r3, r3, r2
 8005940:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005944:	464b      	mov	r3, r9
 8005946:	460a      	mov	r2, r1
 8005948:	eb42 0303 	adc.w	r3, r2, r3
 800594c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800595c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005960:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005964:	460b      	mov	r3, r1
 8005966:	18db      	adds	r3, r3, r3
 8005968:	62bb      	str	r3, [r7, #40]	@ 0x28
 800596a:	4613      	mov	r3, r2
 800596c:	eb42 0303 	adc.w	r3, r2, r3
 8005970:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005972:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005976:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800597a:	f7fa fc81 	bl	8000280 <__aeabi_uldivmod>
 800597e:	4602      	mov	r2, r0
 8005980:	460b      	mov	r3, r1
 8005982:	4b0d      	ldr	r3, [pc, #52]	@ (80059b8 <UART_SetConfig+0x2d4>)
 8005984:	fba3 1302 	umull	r1, r3, r3, r2
 8005988:	095b      	lsrs	r3, r3, #5
 800598a:	2164      	movs	r1, #100	@ 0x64
 800598c:	fb01 f303 	mul.w	r3, r1, r3
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	00db      	lsls	r3, r3, #3
 8005994:	3332      	adds	r3, #50	@ 0x32
 8005996:	4a08      	ldr	r2, [pc, #32]	@ (80059b8 <UART_SetConfig+0x2d4>)
 8005998:	fba2 2303 	umull	r2, r3, r2, r3
 800599c:	095b      	lsrs	r3, r3, #5
 800599e:	f003 0207 	and.w	r2, r3, #7
 80059a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4422      	add	r2, r4
 80059aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80059ac:	e106      	b.n	8005bbc <UART_SetConfig+0x4d8>
 80059ae:	bf00      	nop
 80059b0:	40011000 	.word	0x40011000
 80059b4:	40011400 	.word	0x40011400
 80059b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059c0:	2200      	movs	r2, #0
 80059c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80059c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80059ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80059ce:	4642      	mov	r2, r8
 80059d0:	464b      	mov	r3, r9
 80059d2:	1891      	adds	r1, r2, r2
 80059d4:	6239      	str	r1, [r7, #32]
 80059d6:	415b      	adcs	r3, r3
 80059d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80059da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059de:	4641      	mov	r1, r8
 80059e0:	1854      	adds	r4, r2, r1
 80059e2:	4649      	mov	r1, r9
 80059e4:	eb43 0501 	adc.w	r5, r3, r1
 80059e8:	f04f 0200 	mov.w	r2, #0
 80059ec:	f04f 0300 	mov.w	r3, #0
 80059f0:	00eb      	lsls	r3, r5, #3
 80059f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059f6:	00e2      	lsls	r2, r4, #3
 80059f8:	4614      	mov	r4, r2
 80059fa:	461d      	mov	r5, r3
 80059fc:	4643      	mov	r3, r8
 80059fe:	18e3      	adds	r3, r4, r3
 8005a00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005a04:	464b      	mov	r3, r9
 8005a06:	eb45 0303 	adc.w	r3, r5, r3
 8005a0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a1a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a1e:	f04f 0200 	mov.w	r2, #0
 8005a22:	f04f 0300 	mov.w	r3, #0
 8005a26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005a2a:	4629      	mov	r1, r5
 8005a2c:	008b      	lsls	r3, r1, #2
 8005a2e:	4621      	mov	r1, r4
 8005a30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a34:	4621      	mov	r1, r4
 8005a36:	008a      	lsls	r2, r1, #2
 8005a38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005a3c:	f7fa fc20 	bl	8000280 <__aeabi_uldivmod>
 8005a40:	4602      	mov	r2, r0
 8005a42:	460b      	mov	r3, r1
 8005a44:	4b60      	ldr	r3, [pc, #384]	@ (8005bc8 <UART_SetConfig+0x4e4>)
 8005a46:	fba3 2302 	umull	r2, r3, r3, r2
 8005a4a:	095b      	lsrs	r3, r3, #5
 8005a4c:	011c      	lsls	r4, r3, #4
 8005a4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a52:	2200      	movs	r2, #0
 8005a54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a58:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005a5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005a60:	4642      	mov	r2, r8
 8005a62:	464b      	mov	r3, r9
 8005a64:	1891      	adds	r1, r2, r2
 8005a66:	61b9      	str	r1, [r7, #24]
 8005a68:	415b      	adcs	r3, r3
 8005a6a:	61fb      	str	r3, [r7, #28]
 8005a6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a70:	4641      	mov	r1, r8
 8005a72:	1851      	adds	r1, r2, r1
 8005a74:	6139      	str	r1, [r7, #16]
 8005a76:	4649      	mov	r1, r9
 8005a78:	414b      	adcs	r3, r1
 8005a7a:	617b      	str	r3, [r7, #20]
 8005a7c:	f04f 0200 	mov.w	r2, #0
 8005a80:	f04f 0300 	mov.w	r3, #0
 8005a84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a88:	4659      	mov	r1, fp
 8005a8a:	00cb      	lsls	r3, r1, #3
 8005a8c:	4651      	mov	r1, sl
 8005a8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a92:	4651      	mov	r1, sl
 8005a94:	00ca      	lsls	r2, r1, #3
 8005a96:	4610      	mov	r0, r2
 8005a98:	4619      	mov	r1, r3
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	4642      	mov	r2, r8
 8005a9e:	189b      	adds	r3, r3, r2
 8005aa0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005aa4:	464b      	mov	r3, r9
 8005aa6:	460a      	mov	r2, r1
 8005aa8:	eb42 0303 	adc.w	r3, r2, r3
 8005aac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005aba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005abc:	f04f 0200 	mov.w	r2, #0
 8005ac0:	f04f 0300 	mov.w	r3, #0
 8005ac4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005ac8:	4649      	mov	r1, r9
 8005aca:	008b      	lsls	r3, r1, #2
 8005acc:	4641      	mov	r1, r8
 8005ace:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ad2:	4641      	mov	r1, r8
 8005ad4:	008a      	lsls	r2, r1, #2
 8005ad6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005ada:	f7fa fbd1 	bl	8000280 <__aeabi_uldivmod>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	4611      	mov	r1, r2
 8005ae4:	4b38      	ldr	r3, [pc, #224]	@ (8005bc8 <UART_SetConfig+0x4e4>)
 8005ae6:	fba3 2301 	umull	r2, r3, r3, r1
 8005aea:	095b      	lsrs	r3, r3, #5
 8005aec:	2264      	movs	r2, #100	@ 0x64
 8005aee:	fb02 f303 	mul.w	r3, r2, r3
 8005af2:	1acb      	subs	r3, r1, r3
 8005af4:	011b      	lsls	r3, r3, #4
 8005af6:	3332      	adds	r3, #50	@ 0x32
 8005af8:	4a33      	ldr	r2, [pc, #204]	@ (8005bc8 <UART_SetConfig+0x4e4>)
 8005afa:	fba2 2303 	umull	r2, r3, r2, r3
 8005afe:	095b      	lsrs	r3, r3, #5
 8005b00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b04:	441c      	add	r4, r3
 8005b06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005b0e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005b10:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005b14:	4642      	mov	r2, r8
 8005b16:	464b      	mov	r3, r9
 8005b18:	1891      	adds	r1, r2, r2
 8005b1a:	60b9      	str	r1, [r7, #8]
 8005b1c:	415b      	adcs	r3, r3
 8005b1e:	60fb      	str	r3, [r7, #12]
 8005b20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b24:	4641      	mov	r1, r8
 8005b26:	1851      	adds	r1, r2, r1
 8005b28:	6039      	str	r1, [r7, #0]
 8005b2a:	4649      	mov	r1, r9
 8005b2c:	414b      	adcs	r3, r1
 8005b2e:	607b      	str	r3, [r7, #4]
 8005b30:	f04f 0200 	mov.w	r2, #0
 8005b34:	f04f 0300 	mov.w	r3, #0
 8005b38:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b3c:	4659      	mov	r1, fp
 8005b3e:	00cb      	lsls	r3, r1, #3
 8005b40:	4651      	mov	r1, sl
 8005b42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b46:	4651      	mov	r1, sl
 8005b48:	00ca      	lsls	r2, r1, #3
 8005b4a:	4610      	mov	r0, r2
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	4603      	mov	r3, r0
 8005b50:	4642      	mov	r2, r8
 8005b52:	189b      	adds	r3, r3, r2
 8005b54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b56:	464b      	mov	r3, r9
 8005b58:	460a      	mov	r2, r1
 8005b5a:	eb42 0303 	adc.w	r3, r2, r3
 8005b5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b6a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005b6c:	f04f 0200 	mov.w	r2, #0
 8005b70:	f04f 0300 	mov.w	r3, #0
 8005b74:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005b78:	4649      	mov	r1, r9
 8005b7a:	008b      	lsls	r3, r1, #2
 8005b7c:	4641      	mov	r1, r8
 8005b7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b82:	4641      	mov	r1, r8
 8005b84:	008a      	lsls	r2, r1, #2
 8005b86:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005b8a:	f7fa fb79 	bl	8000280 <__aeabi_uldivmod>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	460b      	mov	r3, r1
 8005b92:	4b0d      	ldr	r3, [pc, #52]	@ (8005bc8 <UART_SetConfig+0x4e4>)
 8005b94:	fba3 1302 	umull	r1, r3, r3, r2
 8005b98:	095b      	lsrs	r3, r3, #5
 8005b9a:	2164      	movs	r1, #100	@ 0x64
 8005b9c:	fb01 f303 	mul.w	r3, r1, r3
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	011b      	lsls	r3, r3, #4
 8005ba4:	3332      	adds	r3, #50	@ 0x32
 8005ba6:	4a08      	ldr	r2, [pc, #32]	@ (8005bc8 <UART_SetConfig+0x4e4>)
 8005ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bac:	095b      	lsrs	r3, r3, #5
 8005bae:	f003 020f 	and.w	r2, r3, #15
 8005bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4422      	add	r2, r4
 8005bba:	609a      	str	r2, [r3, #8]
}
 8005bbc:	bf00      	nop
 8005bbe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bc8:	51eb851f 	.word	0x51eb851f

08005bcc <siprintf>:
 8005bcc:	b40e      	push	{r1, r2, r3}
 8005bce:	b510      	push	{r4, lr}
 8005bd0:	b09d      	sub	sp, #116	@ 0x74
 8005bd2:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005bd4:	9002      	str	r0, [sp, #8]
 8005bd6:	9006      	str	r0, [sp, #24]
 8005bd8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005bdc:	480a      	ldr	r0, [pc, #40]	@ (8005c08 <siprintf+0x3c>)
 8005bde:	9107      	str	r1, [sp, #28]
 8005be0:	9104      	str	r1, [sp, #16]
 8005be2:	490a      	ldr	r1, [pc, #40]	@ (8005c0c <siprintf+0x40>)
 8005be4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005be8:	9105      	str	r1, [sp, #20]
 8005bea:	2400      	movs	r4, #0
 8005bec:	a902      	add	r1, sp, #8
 8005bee:	6800      	ldr	r0, [r0, #0]
 8005bf0:	9301      	str	r3, [sp, #4]
 8005bf2:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005bf4:	f000 f994 	bl	8005f20 <_svfiprintf_r>
 8005bf8:	9b02      	ldr	r3, [sp, #8]
 8005bfa:	701c      	strb	r4, [r3, #0]
 8005bfc:	b01d      	add	sp, #116	@ 0x74
 8005bfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c02:	b003      	add	sp, #12
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	200000b4 	.word	0x200000b4
 8005c0c:	ffff0208 	.word	0xffff0208

08005c10 <memset>:
 8005c10:	4402      	add	r2, r0
 8005c12:	4603      	mov	r3, r0
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d100      	bne.n	8005c1a <memset+0xa>
 8005c18:	4770      	bx	lr
 8005c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8005c1e:	e7f9      	b.n	8005c14 <memset+0x4>

08005c20 <__errno>:
 8005c20:	4b01      	ldr	r3, [pc, #4]	@ (8005c28 <__errno+0x8>)
 8005c22:	6818      	ldr	r0, [r3, #0]
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	200000b4 	.word	0x200000b4

08005c2c <__libc_init_array>:
 8005c2c:	b570      	push	{r4, r5, r6, lr}
 8005c2e:	4d0d      	ldr	r5, [pc, #52]	@ (8005c64 <__libc_init_array+0x38>)
 8005c30:	4c0d      	ldr	r4, [pc, #52]	@ (8005c68 <__libc_init_array+0x3c>)
 8005c32:	1b64      	subs	r4, r4, r5
 8005c34:	10a4      	asrs	r4, r4, #2
 8005c36:	2600      	movs	r6, #0
 8005c38:	42a6      	cmp	r6, r4
 8005c3a:	d109      	bne.n	8005c50 <__libc_init_array+0x24>
 8005c3c:	4d0b      	ldr	r5, [pc, #44]	@ (8005c6c <__libc_init_array+0x40>)
 8005c3e:	4c0c      	ldr	r4, [pc, #48]	@ (8005c70 <__libc_init_array+0x44>)
 8005c40:	f000 fc64 	bl	800650c <_init>
 8005c44:	1b64      	subs	r4, r4, r5
 8005c46:	10a4      	asrs	r4, r4, #2
 8005c48:	2600      	movs	r6, #0
 8005c4a:	42a6      	cmp	r6, r4
 8005c4c:	d105      	bne.n	8005c5a <__libc_init_array+0x2e>
 8005c4e:	bd70      	pop	{r4, r5, r6, pc}
 8005c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c54:	4798      	blx	r3
 8005c56:	3601      	adds	r6, #1
 8005c58:	e7ee      	b.n	8005c38 <__libc_init_array+0xc>
 8005c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c5e:	4798      	blx	r3
 8005c60:	3601      	adds	r6, #1
 8005c62:	e7f2      	b.n	8005c4a <__libc_init_array+0x1e>
 8005c64:	080065ec 	.word	0x080065ec
 8005c68:	080065ec 	.word	0x080065ec
 8005c6c:	080065ec 	.word	0x080065ec
 8005c70:	080065f0 	.word	0x080065f0

08005c74 <__retarget_lock_acquire_recursive>:
 8005c74:	4770      	bx	lr

08005c76 <__retarget_lock_release_recursive>:
 8005c76:	4770      	bx	lr

08005c78 <_free_r>:
 8005c78:	b538      	push	{r3, r4, r5, lr}
 8005c7a:	4605      	mov	r5, r0
 8005c7c:	2900      	cmp	r1, #0
 8005c7e:	d041      	beq.n	8005d04 <_free_r+0x8c>
 8005c80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c84:	1f0c      	subs	r4, r1, #4
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	bfb8      	it	lt
 8005c8a:	18e4      	addlt	r4, r4, r3
 8005c8c:	f000 f8e0 	bl	8005e50 <__malloc_lock>
 8005c90:	4a1d      	ldr	r2, [pc, #116]	@ (8005d08 <_free_r+0x90>)
 8005c92:	6813      	ldr	r3, [r2, #0]
 8005c94:	b933      	cbnz	r3, 8005ca4 <_free_r+0x2c>
 8005c96:	6063      	str	r3, [r4, #4]
 8005c98:	6014      	str	r4, [r2, #0]
 8005c9a:	4628      	mov	r0, r5
 8005c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ca0:	f000 b8dc 	b.w	8005e5c <__malloc_unlock>
 8005ca4:	42a3      	cmp	r3, r4
 8005ca6:	d908      	bls.n	8005cba <_free_r+0x42>
 8005ca8:	6820      	ldr	r0, [r4, #0]
 8005caa:	1821      	adds	r1, r4, r0
 8005cac:	428b      	cmp	r3, r1
 8005cae:	bf01      	itttt	eq
 8005cb0:	6819      	ldreq	r1, [r3, #0]
 8005cb2:	685b      	ldreq	r3, [r3, #4]
 8005cb4:	1809      	addeq	r1, r1, r0
 8005cb6:	6021      	streq	r1, [r4, #0]
 8005cb8:	e7ed      	b.n	8005c96 <_free_r+0x1e>
 8005cba:	461a      	mov	r2, r3
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	b10b      	cbz	r3, 8005cc4 <_free_r+0x4c>
 8005cc0:	42a3      	cmp	r3, r4
 8005cc2:	d9fa      	bls.n	8005cba <_free_r+0x42>
 8005cc4:	6811      	ldr	r1, [r2, #0]
 8005cc6:	1850      	adds	r0, r2, r1
 8005cc8:	42a0      	cmp	r0, r4
 8005cca:	d10b      	bne.n	8005ce4 <_free_r+0x6c>
 8005ccc:	6820      	ldr	r0, [r4, #0]
 8005cce:	4401      	add	r1, r0
 8005cd0:	1850      	adds	r0, r2, r1
 8005cd2:	4283      	cmp	r3, r0
 8005cd4:	6011      	str	r1, [r2, #0]
 8005cd6:	d1e0      	bne.n	8005c9a <_free_r+0x22>
 8005cd8:	6818      	ldr	r0, [r3, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	6053      	str	r3, [r2, #4]
 8005cde:	4408      	add	r0, r1
 8005ce0:	6010      	str	r0, [r2, #0]
 8005ce2:	e7da      	b.n	8005c9a <_free_r+0x22>
 8005ce4:	d902      	bls.n	8005cec <_free_r+0x74>
 8005ce6:	230c      	movs	r3, #12
 8005ce8:	602b      	str	r3, [r5, #0]
 8005cea:	e7d6      	b.n	8005c9a <_free_r+0x22>
 8005cec:	6820      	ldr	r0, [r4, #0]
 8005cee:	1821      	adds	r1, r4, r0
 8005cf0:	428b      	cmp	r3, r1
 8005cf2:	bf04      	itt	eq
 8005cf4:	6819      	ldreq	r1, [r3, #0]
 8005cf6:	685b      	ldreq	r3, [r3, #4]
 8005cf8:	6063      	str	r3, [r4, #4]
 8005cfa:	bf04      	itt	eq
 8005cfc:	1809      	addeq	r1, r1, r0
 8005cfe:	6021      	streq	r1, [r4, #0]
 8005d00:	6054      	str	r4, [r2, #4]
 8005d02:	e7ca      	b.n	8005c9a <_free_r+0x22>
 8005d04:	bd38      	pop	{r3, r4, r5, pc}
 8005d06:	bf00      	nop
 8005d08:	200004c8 	.word	0x200004c8

08005d0c <sbrk_aligned>:
 8005d0c:	b570      	push	{r4, r5, r6, lr}
 8005d0e:	4e0f      	ldr	r6, [pc, #60]	@ (8005d4c <sbrk_aligned+0x40>)
 8005d10:	460c      	mov	r4, r1
 8005d12:	6831      	ldr	r1, [r6, #0]
 8005d14:	4605      	mov	r5, r0
 8005d16:	b911      	cbnz	r1, 8005d1e <sbrk_aligned+0x12>
 8005d18:	f000 fba4 	bl	8006464 <_sbrk_r>
 8005d1c:	6030      	str	r0, [r6, #0]
 8005d1e:	4621      	mov	r1, r4
 8005d20:	4628      	mov	r0, r5
 8005d22:	f000 fb9f 	bl	8006464 <_sbrk_r>
 8005d26:	1c43      	adds	r3, r0, #1
 8005d28:	d103      	bne.n	8005d32 <sbrk_aligned+0x26>
 8005d2a:	f04f 34ff 	mov.w	r4, #4294967295
 8005d2e:	4620      	mov	r0, r4
 8005d30:	bd70      	pop	{r4, r5, r6, pc}
 8005d32:	1cc4      	adds	r4, r0, #3
 8005d34:	f024 0403 	bic.w	r4, r4, #3
 8005d38:	42a0      	cmp	r0, r4
 8005d3a:	d0f8      	beq.n	8005d2e <sbrk_aligned+0x22>
 8005d3c:	1a21      	subs	r1, r4, r0
 8005d3e:	4628      	mov	r0, r5
 8005d40:	f000 fb90 	bl	8006464 <_sbrk_r>
 8005d44:	3001      	adds	r0, #1
 8005d46:	d1f2      	bne.n	8005d2e <sbrk_aligned+0x22>
 8005d48:	e7ef      	b.n	8005d2a <sbrk_aligned+0x1e>
 8005d4a:	bf00      	nop
 8005d4c:	200004c4 	.word	0x200004c4

08005d50 <_malloc_r>:
 8005d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d54:	1ccd      	adds	r5, r1, #3
 8005d56:	f025 0503 	bic.w	r5, r5, #3
 8005d5a:	3508      	adds	r5, #8
 8005d5c:	2d0c      	cmp	r5, #12
 8005d5e:	bf38      	it	cc
 8005d60:	250c      	movcc	r5, #12
 8005d62:	2d00      	cmp	r5, #0
 8005d64:	4606      	mov	r6, r0
 8005d66:	db01      	blt.n	8005d6c <_malloc_r+0x1c>
 8005d68:	42a9      	cmp	r1, r5
 8005d6a:	d904      	bls.n	8005d76 <_malloc_r+0x26>
 8005d6c:	230c      	movs	r3, #12
 8005d6e:	6033      	str	r3, [r6, #0]
 8005d70:	2000      	movs	r0, #0
 8005d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005e4c <_malloc_r+0xfc>
 8005d7a:	f000 f869 	bl	8005e50 <__malloc_lock>
 8005d7e:	f8d8 3000 	ldr.w	r3, [r8]
 8005d82:	461c      	mov	r4, r3
 8005d84:	bb44      	cbnz	r4, 8005dd8 <_malloc_r+0x88>
 8005d86:	4629      	mov	r1, r5
 8005d88:	4630      	mov	r0, r6
 8005d8a:	f7ff ffbf 	bl	8005d0c <sbrk_aligned>
 8005d8e:	1c43      	adds	r3, r0, #1
 8005d90:	4604      	mov	r4, r0
 8005d92:	d158      	bne.n	8005e46 <_malloc_r+0xf6>
 8005d94:	f8d8 4000 	ldr.w	r4, [r8]
 8005d98:	4627      	mov	r7, r4
 8005d9a:	2f00      	cmp	r7, #0
 8005d9c:	d143      	bne.n	8005e26 <_malloc_r+0xd6>
 8005d9e:	2c00      	cmp	r4, #0
 8005da0:	d04b      	beq.n	8005e3a <_malloc_r+0xea>
 8005da2:	6823      	ldr	r3, [r4, #0]
 8005da4:	4639      	mov	r1, r7
 8005da6:	4630      	mov	r0, r6
 8005da8:	eb04 0903 	add.w	r9, r4, r3
 8005dac:	f000 fb5a 	bl	8006464 <_sbrk_r>
 8005db0:	4581      	cmp	r9, r0
 8005db2:	d142      	bne.n	8005e3a <_malloc_r+0xea>
 8005db4:	6821      	ldr	r1, [r4, #0]
 8005db6:	1a6d      	subs	r5, r5, r1
 8005db8:	4629      	mov	r1, r5
 8005dba:	4630      	mov	r0, r6
 8005dbc:	f7ff ffa6 	bl	8005d0c <sbrk_aligned>
 8005dc0:	3001      	adds	r0, #1
 8005dc2:	d03a      	beq.n	8005e3a <_malloc_r+0xea>
 8005dc4:	6823      	ldr	r3, [r4, #0]
 8005dc6:	442b      	add	r3, r5
 8005dc8:	6023      	str	r3, [r4, #0]
 8005dca:	f8d8 3000 	ldr.w	r3, [r8]
 8005dce:	685a      	ldr	r2, [r3, #4]
 8005dd0:	bb62      	cbnz	r2, 8005e2c <_malloc_r+0xdc>
 8005dd2:	f8c8 7000 	str.w	r7, [r8]
 8005dd6:	e00f      	b.n	8005df8 <_malloc_r+0xa8>
 8005dd8:	6822      	ldr	r2, [r4, #0]
 8005dda:	1b52      	subs	r2, r2, r5
 8005ddc:	d420      	bmi.n	8005e20 <_malloc_r+0xd0>
 8005dde:	2a0b      	cmp	r2, #11
 8005de0:	d917      	bls.n	8005e12 <_malloc_r+0xc2>
 8005de2:	1961      	adds	r1, r4, r5
 8005de4:	42a3      	cmp	r3, r4
 8005de6:	6025      	str	r5, [r4, #0]
 8005de8:	bf18      	it	ne
 8005dea:	6059      	strne	r1, [r3, #4]
 8005dec:	6863      	ldr	r3, [r4, #4]
 8005dee:	bf08      	it	eq
 8005df0:	f8c8 1000 	streq.w	r1, [r8]
 8005df4:	5162      	str	r2, [r4, r5]
 8005df6:	604b      	str	r3, [r1, #4]
 8005df8:	4630      	mov	r0, r6
 8005dfa:	f000 f82f 	bl	8005e5c <__malloc_unlock>
 8005dfe:	f104 000b 	add.w	r0, r4, #11
 8005e02:	1d23      	adds	r3, r4, #4
 8005e04:	f020 0007 	bic.w	r0, r0, #7
 8005e08:	1ac2      	subs	r2, r0, r3
 8005e0a:	bf1c      	itt	ne
 8005e0c:	1a1b      	subne	r3, r3, r0
 8005e0e:	50a3      	strne	r3, [r4, r2]
 8005e10:	e7af      	b.n	8005d72 <_malloc_r+0x22>
 8005e12:	6862      	ldr	r2, [r4, #4]
 8005e14:	42a3      	cmp	r3, r4
 8005e16:	bf0c      	ite	eq
 8005e18:	f8c8 2000 	streq.w	r2, [r8]
 8005e1c:	605a      	strne	r2, [r3, #4]
 8005e1e:	e7eb      	b.n	8005df8 <_malloc_r+0xa8>
 8005e20:	4623      	mov	r3, r4
 8005e22:	6864      	ldr	r4, [r4, #4]
 8005e24:	e7ae      	b.n	8005d84 <_malloc_r+0x34>
 8005e26:	463c      	mov	r4, r7
 8005e28:	687f      	ldr	r7, [r7, #4]
 8005e2a:	e7b6      	b.n	8005d9a <_malloc_r+0x4a>
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	42a3      	cmp	r3, r4
 8005e32:	d1fb      	bne.n	8005e2c <_malloc_r+0xdc>
 8005e34:	2300      	movs	r3, #0
 8005e36:	6053      	str	r3, [r2, #4]
 8005e38:	e7de      	b.n	8005df8 <_malloc_r+0xa8>
 8005e3a:	230c      	movs	r3, #12
 8005e3c:	6033      	str	r3, [r6, #0]
 8005e3e:	4630      	mov	r0, r6
 8005e40:	f000 f80c 	bl	8005e5c <__malloc_unlock>
 8005e44:	e794      	b.n	8005d70 <_malloc_r+0x20>
 8005e46:	6005      	str	r5, [r0, #0]
 8005e48:	e7d6      	b.n	8005df8 <_malloc_r+0xa8>
 8005e4a:	bf00      	nop
 8005e4c:	200004c8 	.word	0x200004c8

08005e50 <__malloc_lock>:
 8005e50:	4801      	ldr	r0, [pc, #4]	@ (8005e58 <__malloc_lock+0x8>)
 8005e52:	f7ff bf0f 	b.w	8005c74 <__retarget_lock_acquire_recursive>
 8005e56:	bf00      	nop
 8005e58:	200004c0 	.word	0x200004c0

08005e5c <__malloc_unlock>:
 8005e5c:	4801      	ldr	r0, [pc, #4]	@ (8005e64 <__malloc_unlock+0x8>)
 8005e5e:	f7ff bf0a 	b.w	8005c76 <__retarget_lock_release_recursive>
 8005e62:	bf00      	nop
 8005e64:	200004c0 	.word	0x200004c0

08005e68 <__ssputs_r>:
 8005e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e6c:	688e      	ldr	r6, [r1, #8]
 8005e6e:	461f      	mov	r7, r3
 8005e70:	42be      	cmp	r6, r7
 8005e72:	680b      	ldr	r3, [r1, #0]
 8005e74:	4682      	mov	sl, r0
 8005e76:	460c      	mov	r4, r1
 8005e78:	4690      	mov	r8, r2
 8005e7a:	d82d      	bhi.n	8005ed8 <__ssputs_r+0x70>
 8005e7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005e80:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005e84:	d026      	beq.n	8005ed4 <__ssputs_r+0x6c>
 8005e86:	6965      	ldr	r5, [r4, #20]
 8005e88:	6909      	ldr	r1, [r1, #16]
 8005e8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e8e:	eba3 0901 	sub.w	r9, r3, r1
 8005e92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e96:	1c7b      	adds	r3, r7, #1
 8005e98:	444b      	add	r3, r9
 8005e9a:	106d      	asrs	r5, r5, #1
 8005e9c:	429d      	cmp	r5, r3
 8005e9e:	bf38      	it	cc
 8005ea0:	461d      	movcc	r5, r3
 8005ea2:	0553      	lsls	r3, r2, #21
 8005ea4:	d527      	bpl.n	8005ef6 <__ssputs_r+0x8e>
 8005ea6:	4629      	mov	r1, r5
 8005ea8:	f7ff ff52 	bl	8005d50 <_malloc_r>
 8005eac:	4606      	mov	r6, r0
 8005eae:	b360      	cbz	r0, 8005f0a <__ssputs_r+0xa2>
 8005eb0:	6921      	ldr	r1, [r4, #16]
 8005eb2:	464a      	mov	r2, r9
 8005eb4:	f000 fae6 	bl	8006484 <memcpy>
 8005eb8:	89a3      	ldrh	r3, [r4, #12]
 8005eba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005ebe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ec2:	81a3      	strh	r3, [r4, #12]
 8005ec4:	6126      	str	r6, [r4, #16]
 8005ec6:	6165      	str	r5, [r4, #20]
 8005ec8:	444e      	add	r6, r9
 8005eca:	eba5 0509 	sub.w	r5, r5, r9
 8005ece:	6026      	str	r6, [r4, #0]
 8005ed0:	60a5      	str	r5, [r4, #8]
 8005ed2:	463e      	mov	r6, r7
 8005ed4:	42be      	cmp	r6, r7
 8005ed6:	d900      	bls.n	8005eda <__ssputs_r+0x72>
 8005ed8:	463e      	mov	r6, r7
 8005eda:	6820      	ldr	r0, [r4, #0]
 8005edc:	4632      	mov	r2, r6
 8005ede:	4641      	mov	r1, r8
 8005ee0:	f000 faa6 	bl	8006430 <memmove>
 8005ee4:	68a3      	ldr	r3, [r4, #8]
 8005ee6:	1b9b      	subs	r3, r3, r6
 8005ee8:	60a3      	str	r3, [r4, #8]
 8005eea:	6823      	ldr	r3, [r4, #0]
 8005eec:	4433      	add	r3, r6
 8005eee:	6023      	str	r3, [r4, #0]
 8005ef0:	2000      	movs	r0, #0
 8005ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ef6:	462a      	mov	r2, r5
 8005ef8:	f000 fad2 	bl	80064a0 <_realloc_r>
 8005efc:	4606      	mov	r6, r0
 8005efe:	2800      	cmp	r0, #0
 8005f00:	d1e0      	bne.n	8005ec4 <__ssputs_r+0x5c>
 8005f02:	6921      	ldr	r1, [r4, #16]
 8005f04:	4650      	mov	r0, sl
 8005f06:	f7ff feb7 	bl	8005c78 <_free_r>
 8005f0a:	230c      	movs	r3, #12
 8005f0c:	f8ca 3000 	str.w	r3, [sl]
 8005f10:	89a3      	ldrh	r3, [r4, #12]
 8005f12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f16:	81a3      	strh	r3, [r4, #12]
 8005f18:	f04f 30ff 	mov.w	r0, #4294967295
 8005f1c:	e7e9      	b.n	8005ef2 <__ssputs_r+0x8a>
	...

08005f20 <_svfiprintf_r>:
 8005f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f24:	4698      	mov	r8, r3
 8005f26:	898b      	ldrh	r3, [r1, #12]
 8005f28:	061b      	lsls	r3, r3, #24
 8005f2a:	b09d      	sub	sp, #116	@ 0x74
 8005f2c:	4607      	mov	r7, r0
 8005f2e:	460d      	mov	r5, r1
 8005f30:	4614      	mov	r4, r2
 8005f32:	d510      	bpl.n	8005f56 <_svfiprintf_r+0x36>
 8005f34:	690b      	ldr	r3, [r1, #16]
 8005f36:	b973      	cbnz	r3, 8005f56 <_svfiprintf_r+0x36>
 8005f38:	2140      	movs	r1, #64	@ 0x40
 8005f3a:	f7ff ff09 	bl	8005d50 <_malloc_r>
 8005f3e:	6028      	str	r0, [r5, #0]
 8005f40:	6128      	str	r0, [r5, #16]
 8005f42:	b930      	cbnz	r0, 8005f52 <_svfiprintf_r+0x32>
 8005f44:	230c      	movs	r3, #12
 8005f46:	603b      	str	r3, [r7, #0]
 8005f48:	f04f 30ff 	mov.w	r0, #4294967295
 8005f4c:	b01d      	add	sp, #116	@ 0x74
 8005f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f52:	2340      	movs	r3, #64	@ 0x40
 8005f54:	616b      	str	r3, [r5, #20]
 8005f56:	2300      	movs	r3, #0
 8005f58:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f5a:	2320      	movs	r3, #32
 8005f5c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005f60:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f64:	2330      	movs	r3, #48	@ 0x30
 8005f66:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006104 <_svfiprintf_r+0x1e4>
 8005f6a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005f6e:	f04f 0901 	mov.w	r9, #1
 8005f72:	4623      	mov	r3, r4
 8005f74:	469a      	mov	sl, r3
 8005f76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f7a:	b10a      	cbz	r2, 8005f80 <_svfiprintf_r+0x60>
 8005f7c:	2a25      	cmp	r2, #37	@ 0x25
 8005f7e:	d1f9      	bne.n	8005f74 <_svfiprintf_r+0x54>
 8005f80:	ebba 0b04 	subs.w	fp, sl, r4
 8005f84:	d00b      	beq.n	8005f9e <_svfiprintf_r+0x7e>
 8005f86:	465b      	mov	r3, fp
 8005f88:	4622      	mov	r2, r4
 8005f8a:	4629      	mov	r1, r5
 8005f8c:	4638      	mov	r0, r7
 8005f8e:	f7ff ff6b 	bl	8005e68 <__ssputs_r>
 8005f92:	3001      	adds	r0, #1
 8005f94:	f000 80a7 	beq.w	80060e6 <_svfiprintf_r+0x1c6>
 8005f98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f9a:	445a      	add	r2, fp
 8005f9c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f9e:	f89a 3000 	ldrb.w	r3, [sl]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f000 809f 	beq.w	80060e6 <_svfiprintf_r+0x1c6>
 8005fa8:	2300      	movs	r3, #0
 8005faa:	f04f 32ff 	mov.w	r2, #4294967295
 8005fae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fb2:	f10a 0a01 	add.w	sl, sl, #1
 8005fb6:	9304      	str	r3, [sp, #16]
 8005fb8:	9307      	str	r3, [sp, #28]
 8005fba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005fbe:	931a      	str	r3, [sp, #104]	@ 0x68
 8005fc0:	4654      	mov	r4, sl
 8005fc2:	2205      	movs	r2, #5
 8005fc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fc8:	484e      	ldr	r0, [pc, #312]	@ (8006104 <_svfiprintf_r+0x1e4>)
 8005fca:	f7fa f909 	bl	80001e0 <memchr>
 8005fce:	9a04      	ldr	r2, [sp, #16]
 8005fd0:	b9d8      	cbnz	r0, 800600a <_svfiprintf_r+0xea>
 8005fd2:	06d0      	lsls	r0, r2, #27
 8005fd4:	bf44      	itt	mi
 8005fd6:	2320      	movmi	r3, #32
 8005fd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005fdc:	0711      	lsls	r1, r2, #28
 8005fde:	bf44      	itt	mi
 8005fe0:	232b      	movmi	r3, #43	@ 0x2b
 8005fe2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005fe6:	f89a 3000 	ldrb.w	r3, [sl]
 8005fea:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fec:	d015      	beq.n	800601a <_svfiprintf_r+0xfa>
 8005fee:	9a07      	ldr	r2, [sp, #28]
 8005ff0:	4654      	mov	r4, sl
 8005ff2:	2000      	movs	r0, #0
 8005ff4:	f04f 0c0a 	mov.w	ip, #10
 8005ff8:	4621      	mov	r1, r4
 8005ffa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ffe:	3b30      	subs	r3, #48	@ 0x30
 8006000:	2b09      	cmp	r3, #9
 8006002:	d94b      	bls.n	800609c <_svfiprintf_r+0x17c>
 8006004:	b1b0      	cbz	r0, 8006034 <_svfiprintf_r+0x114>
 8006006:	9207      	str	r2, [sp, #28]
 8006008:	e014      	b.n	8006034 <_svfiprintf_r+0x114>
 800600a:	eba0 0308 	sub.w	r3, r0, r8
 800600e:	fa09 f303 	lsl.w	r3, r9, r3
 8006012:	4313      	orrs	r3, r2
 8006014:	9304      	str	r3, [sp, #16]
 8006016:	46a2      	mov	sl, r4
 8006018:	e7d2      	b.n	8005fc0 <_svfiprintf_r+0xa0>
 800601a:	9b03      	ldr	r3, [sp, #12]
 800601c:	1d19      	adds	r1, r3, #4
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	9103      	str	r1, [sp, #12]
 8006022:	2b00      	cmp	r3, #0
 8006024:	bfbb      	ittet	lt
 8006026:	425b      	neglt	r3, r3
 8006028:	f042 0202 	orrlt.w	r2, r2, #2
 800602c:	9307      	strge	r3, [sp, #28]
 800602e:	9307      	strlt	r3, [sp, #28]
 8006030:	bfb8      	it	lt
 8006032:	9204      	strlt	r2, [sp, #16]
 8006034:	7823      	ldrb	r3, [r4, #0]
 8006036:	2b2e      	cmp	r3, #46	@ 0x2e
 8006038:	d10a      	bne.n	8006050 <_svfiprintf_r+0x130>
 800603a:	7863      	ldrb	r3, [r4, #1]
 800603c:	2b2a      	cmp	r3, #42	@ 0x2a
 800603e:	d132      	bne.n	80060a6 <_svfiprintf_r+0x186>
 8006040:	9b03      	ldr	r3, [sp, #12]
 8006042:	1d1a      	adds	r2, r3, #4
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	9203      	str	r2, [sp, #12]
 8006048:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800604c:	3402      	adds	r4, #2
 800604e:	9305      	str	r3, [sp, #20]
 8006050:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006114 <_svfiprintf_r+0x1f4>
 8006054:	7821      	ldrb	r1, [r4, #0]
 8006056:	2203      	movs	r2, #3
 8006058:	4650      	mov	r0, sl
 800605a:	f7fa f8c1 	bl	80001e0 <memchr>
 800605e:	b138      	cbz	r0, 8006070 <_svfiprintf_r+0x150>
 8006060:	9b04      	ldr	r3, [sp, #16]
 8006062:	eba0 000a 	sub.w	r0, r0, sl
 8006066:	2240      	movs	r2, #64	@ 0x40
 8006068:	4082      	lsls	r2, r0
 800606a:	4313      	orrs	r3, r2
 800606c:	3401      	adds	r4, #1
 800606e:	9304      	str	r3, [sp, #16]
 8006070:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006074:	4824      	ldr	r0, [pc, #144]	@ (8006108 <_svfiprintf_r+0x1e8>)
 8006076:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800607a:	2206      	movs	r2, #6
 800607c:	f7fa f8b0 	bl	80001e0 <memchr>
 8006080:	2800      	cmp	r0, #0
 8006082:	d036      	beq.n	80060f2 <_svfiprintf_r+0x1d2>
 8006084:	4b21      	ldr	r3, [pc, #132]	@ (800610c <_svfiprintf_r+0x1ec>)
 8006086:	bb1b      	cbnz	r3, 80060d0 <_svfiprintf_r+0x1b0>
 8006088:	9b03      	ldr	r3, [sp, #12]
 800608a:	3307      	adds	r3, #7
 800608c:	f023 0307 	bic.w	r3, r3, #7
 8006090:	3308      	adds	r3, #8
 8006092:	9303      	str	r3, [sp, #12]
 8006094:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006096:	4433      	add	r3, r6
 8006098:	9309      	str	r3, [sp, #36]	@ 0x24
 800609a:	e76a      	b.n	8005f72 <_svfiprintf_r+0x52>
 800609c:	fb0c 3202 	mla	r2, ip, r2, r3
 80060a0:	460c      	mov	r4, r1
 80060a2:	2001      	movs	r0, #1
 80060a4:	e7a8      	b.n	8005ff8 <_svfiprintf_r+0xd8>
 80060a6:	2300      	movs	r3, #0
 80060a8:	3401      	adds	r4, #1
 80060aa:	9305      	str	r3, [sp, #20]
 80060ac:	4619      	mov	r1, r3
 80060ae:	f04f 0c0a 	mov.w	ip, #10
 80060b2:	4620      	mov	r0, r4
 80060b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060b8:	3a30      	subs	r2, #48	@ 0x30
 80060ba:	2a09      	cmp	r2, #9
 80060bc:	d903      	bls.n	80060c6 <_svfiprintf_r+0x1a6>
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d0c6      	beq.n	8006050 <_svfiprintf_r+0x130>
 80060c2:	9105      	str	r1, [sp, #20]
 80060c4:	e7c4      	b.n	8006050 <_svfiprintf_r+0x130>
 80060c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80060ca:	4604      	mov	r4, r0
 80060cc:	2301      	movs	r3, #1
 80060ce:	e7f0      	b.n	80060b2 <_svfiprintf_r+0x192>
 80060d0:	ab03      	add	r3, sp, #12
 80060d2:	9300      	str	r3, [sp, #0]
 80060d4:	462a      	mov	r2, r5
 80060d6:	4b0e      	ldr	r3, [pc, #56]	@ (8006110 <_svfiprintf_r+0x1f0>)
 80060d8:	a904      	add	r1, sp, #16
 80060da:	4638      	mov	r0, r7
 80060dc:	f3af 8000 	nop.w
 80060e0:	1c42      	adds	r2, r0, #1
 80060e2:	4606      	mov	r6, r0
 80060e4:	d1d6      	bne.n	8006094 <_svfiprintf_r+0x174>
 80060e6:	89ab      	ldrh	r3, [r5, #12]
 80060e8:	065b      	lsls	r3, r3, #25
 80060ea:	f53f af2d 	bmi.w	8005f48 <_svfiprintf_r+0x28>
 80060ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80060f0:	e72c      	b.n	8005f4c <_svfiprintf_r+0x2c>
 80060f2:	ab03      	add	r3, sp, #12
 80060f4:	9300      	str	r3, [sp, #0]
 80060f6:	462a      	mov	r2, r5
 80060f8:	4b05      	ldr	r3, [pc, #20]	@ (8006110 <_svfiprintf_r+0x1f0>)
 80060fa:	a904      	add	r1, sp, #16
 80060fc:	4638      	mov	r0, r7
 80060fe:	f000 f879 	bl	80061f4 <_printf_i>
 8006102:	e7ed      	b.n	80060e0 <_svfiprintf_r+0x1c0>
 8006104:	080065b0 	.word	0x080065b0
 8006108:	080065ba 	.word	0x080065ba
 800610c:	00000000 	.word	0x00000000
 8006110:	08005e69 	.word	0x08005e69
 8006114:	080065b6 	.word	0x080065b6

08006118 <_printf_common>:
 8006118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800611c:	4616      	mov	r6, r2
 800611e:	4698      	mov	r8, r3
 8006120:	688a      	ldr	r2, [r1, #8]
 8006122:	690b      	ldr	r3, [r1, #16]
 8006124:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006128:	4293      	cmp	r3, r2
 800612a:	bfb8      	it	lt
 800612c:	4613      	movlt	r3, r2
 800612e:	6033      	str	r3, [r6, #0]
 8006130:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006134:	4607      	mov	r7, r0
 8006136:	460c      	mov	r4, r1
 8006138:	b10a      	cbz	r2, 800613e <_printf_common+0x26>
 800613a:	3301      	adds	r3, #1
 800613c:	6033      	str	r3, [r6, #0]
 800613e:	6823      	ldr	r3, [r4, #0]
 8006140:	0699      	lsls	r1, r3, #26
 8006142:	bf42      	ittt	mi
 8006144:	6833      	ldrmi	r3, [r6, #0]
 8006146:	3302      	addmi	r3, #2
 8006148:	6033      	strmi	r3, [r6, #0]
 800614a:	6825      	ldr	r5, [r4, #0]
 800614c:	f015 0506 	ands.w	r5, r5, #6
 8006150:	d106      	bne.n	8006160 <_printf_common+0x48>
 8006152:	f104 0a19 	add.w	sl, r4, #25
 8006156:	68e3      	ldr	r3, [r4, #12]
 8006158:	6832      	ldr	r2, [r6, #0]
 800615a:	1a9b      	subs	r3, r3, r2
 800615c:	42ab      	cmp	r3, r5
 800615e:	dc26      	bgt.n	80061ae <_printf_common+0x96>
 8006160:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006164:	6822      	ldr	r2, [r4, #0]
 8006166:	3b00      	subs	r3, #0
 8006168:	bf18      	it	ne
 800616a:	2301      	movne	r3, #1
 800616c:	0692      	lsls	r2, r2, #26
 800616e:	d42b      	bmi.n	80061c8 <_printf_common+0xb0>
 8006170:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006174:	4641      	mov	r1, r8
 8006176:	4638      	mov	r0, r7
 8006178:	47c8      	blx	r9
 800617a:	3001      	adds	r0, #1
 800617c:	d01e      	beq.n	80061bc <_printf_common+0xa4>
 800617e:	6823      	ldr	r3, [r4, #0]
 8006180:	6922      	ldr	r2, [r4, #16]
 8006182:	f003 0306 	and.w	r3, r3, #6
 8006186:	2b04      	cmp	r3, #4
 8006188:	bf02      	ittt	eq
 800618a:	68e5      	ldreq	r5, [r4, #12]
 800618c:	6833      	ldreq	r3, [r6, #0]
 800618e:	1aed      	subeq	r5, r5, r3
 8006190:	68a3      	ldr	r3, [r4, #8]
 8006192:	bf0c      	ite	eq
 8006194:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006198:	2500      	movne	r5, #0
 800619a:	4293      	cmp	r3, r2
 800619c:	bfc4      	itt	gt
 800619e:	1a9b      	subgt	r3, r3, r2
 80061a0:	18ed      	addgt	r5, r5, r3
 80061a2:	2600      	movs	r6, #0
 80061a4:	341a      	adds	r4, #26
 80061a6:	42b5      	cmp	r5, r6
 80061a8:	d11a      	bne.n	80061e0 <_printf_common+0xc8>
 80061aa:	2000      	movs	r0, #0
 80061ac:	e008      	b.n	80061c0 <_printf_common+0xa8>
 80061ae:	2301      	movs	r3, #1
 80061b0:	4652      	mov	r2, sl
 80061b2:	4641      	mov	r1, r8
 80061b4:	4638      	mov	r0, r7
 80061b6:	47c8      	blx	r9
 80061b8:	3001      	adds	r0, #1
 80061ba:	d103      	bne.n	80061c4 <_printf_common+0xac>
 80061bc:	f04f 30ff 	mov.w	r0, #4294967295
 80061c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061c4:	3501      	adds	r5, #1
 80061c6:	e7c6      	b.n	8006156 <_printf_common+0x3e>
 80061c8:	18e1      	adds	r1, r4, r3
 80061ca:	1c5a      	adds	r2, r3, #1
 80061cc:	2030      	movs	r0, #48	@ 0x30
 80061ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80061d2:	4422      	add	r2, r4
 80061d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80061d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80061dc:	3302      	adds	r3, #2
 80061de:	e7c7      	b.n	8006170 <_printf_common+0x58>
 80061e0:	2301      	movs	r3, #1
 80061e2:	4622      	mov	r2, r4
 80061e4:	4641      	mov	r1, r8
 80061e6:	4638      	mov	r0, r7
 80061e8:	47c8      	blx	r9
 80061ea:	3001      	adds	r0, #1
 80061ec:	d0e6      	beq.n	80061bc <_printf_common+0xa4>
 80061ee:	3601      	adds	r6, #1
 80061f0:	e7d9      	b.n	80061a6 <_printf_common+0x8e>
	...

080061f4 <_printf_i>:
 80061f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061f8:	7e0f      	ldrb	r7, [r1, #24]
 80061fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80061fc:	2f78      	cmp	r7, #120	@ 0x78
 80061fe:	4691      	mov	r9, r2
 8006200:	4680      	mov	r8, r0
 8006202:	460c      	mov	r4, r1
 8006204:	469a      	mov	sl, r3
 8006206:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800620a:	d807      	bhi.n	800621c <_printf_i+0x28>
 800620c:	2f62      	cmp	r7, #98	@ 0x62
 800620e:	d80a      	bhi.n	8006226 <_printf_i+0x32>
 8006210:	2f00      	cmp	r7, #0
 8006212:	f000 80d1 	beq.w	80063b8 <_printf_i+0x1c4>
 8006216:	2f58      	cmp	r7, #88	@ 0x58
 8006218:	f000 80b8 	beq.w	800638c <_printf_i+0x198>
 800621c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006220:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006224:	e03a      	b.n	800629c <_printf_i+0xa8>
 8006226:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800622a:	2b15      	cmp	r3, #21
 800622c:	d8f6      	bhi.n	800621c <_printf_i+0x28>
 800622e:	a101      	add	r1, pc, #4	@ (adr r1, 8006234 <_printf_i+0x40>)
 8006230:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006234:	0800628d 	.word	0x0800628d
 8006238:	080062a1 	.word	0x080062a1
 800623c:	0800621d 	.word	0x0800621d
 8006240:	0800621d 	.word	0x0800621d
 8006244:	0800621d 	.word	0x0800621d
 8006248:	0800621d 	.word	0x0800621d
 800624c:	080062a1 	.word	0x080062a1
 8006250:	0800621d 	.word	0x0800621d
 8006254:	0800621d 	.word	0x0800621d
 8006258:	0800621d 	.word	0x0800621d
 800625c:	0800621d 	.word	0x0800621d
 8006260:	0800639f 	.word	0x0800639f
 8006264:	080062cb 	.word	0x080062cb
 8006268:	08006359 	.word	0x08006359
 800626c:	0800621d 	.word	0x0800621d
 8006270:	0800621d 	.word	0x0800621d
 8006274:	080063c1 	.word	0x080063c1
 8006278:	0800621d 	.word	0x0800621d
 800627c:	080062cb 	.word	0x080062cb
 8006280:	0800621d 	.word	0x0800621d
 8006284:	0800621d 	.word	0x0800621d
 8006288:	08006361 	.word	0x08006361
 800628c:	6833      	ldr	r3, [r6, #0]
 800628e:	1d1a      	adds	r2, r3, #4
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	6032      	str	r2, [r6, #0]
 8006294:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006298:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800629c:	2301      	movs	r3, #1
 800629e:	e09c      	b.n	80063da <_printf_i+0x1e6>
 80062a0:	6833      	ldr	r3, [r6, #0]
 80062a2:	6820      	ldr	r0, [r4, #0]
 80062a4:	1d19      	adds	r1, r3, #4
 80062a6:	6031      	str	r1, [r6, #0]
 80062a8:	0606      	lsls	r6, r0, #24
 80062aa:	d501      	bpl.n	80062b0 <_printf_i+0xbc>
 80062ac:	681d      	ldr	r5, [r3, #0]
 80062ae:	e003      	b.n	80062b8 <_printf_i+0xc4>
 80062b0:	0645      	lsls	r5, r0, #25
 80062b2:	d5fb      	bpl.n	80062ac <_printf_i+0xb8>
 80062b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80062b8:	2d00      	cmp	r5, #0
 80062ba:	da03      	bge.n	80062c4 <_printf_i+0xd0>
 80062bc:	232d      	movs	r3, #45	@ 0x2d
 80062be:	426d      	negs	r5, r5
 80062c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062c4:	4858      	ldr	r0, [pc, #352]	@ (8006428 <_printf_i+0x234>)
 80062c6:	230a      	movs	r3, #10
 80062c8:	e011      	b.n	80062ee <_printf_i+0xfa>
 80062ca:	6821      	ldr	r1, [r4, #0]
 80062cc:	6833      	ldr	r3, [r6, #0]
 80062ce:	0608      	lsls	r0, r1, #24
 80062d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80062d4:	d402      	bmi.n	80062dc <_printf_i+0xe8>
 80062d6:	0649      	lsls	r1, r1, #25
 80062d8:	bf48      	it	mi
 80062da:	b2ad      	uxthmi	r5, r5
 80062dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80062de:	4852      	ldr	r0, [pc, #328]	@ (8006428 <_printf_i+0x234>)
 80062e0:	6033      	str	r3, [r6, #0]
 80062e2:	bf14      	ite	ne
 80062e4:	230a      	movne	r3, #10
 80062e6:	2308      	moveq	r3, #8
 80062e8:	2100      	movs	r1, #0
 80062ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80062ee:	6866      	ldr	r6, [r4, #4]
 80062f0:	60a6      	str	r6, [r4, #8]
 80062f2:	2e00      	cmp	r6, #0
 80062f4:	db05      	blt.n	8006302 <_printf_i+0x10e>
 80062f6:	6821      	ldr	r1, [r4, #0]
 80062f8:	432e      	orrs	r6, r5
 80062fa:	f021 0104 	bic.w	r1, r1, #4
 80062fe:	6021      	str	r1, [r4, #0]
 8006300:	d04b      	beq.n	800639a <_printf_i+0x1a6>
 8006302:	4616      	mov	r6, r2
 8006304:	fbb5 f1f3 	udiv	r1, r5, r3
 8006308:	fb03 5711 	mls	r7, r3, r1, r5
 800630c:	5dc7      	ldrb	r7, [r0, r7]
 800630e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006312:	462f      	mov	r7, r5
 8006314:	42bb      	cmp	r3, r7
 8006316:	460d      	mov	r5, r1
 8006318:	d9f4      	bls.n	8006304 <_printf_i+0x110>
 800631a:	2b08      	cmp	r3, #8
 800631c:	d10b      	bne.n	8006336 <_printf_i+0x142>
 800631e:	6823      	ldr	r3, [r4, #0]
 8006320:	07df      	lsls	r7, r3, #31
 8006322:	d508      	bpl.n	8006336 <_printf_i+0x142>
 8006324:	6923      	ldr	r3, [r4, #16]
 8006326:	6861      	ldr	r1, [r4, #4]
 8006328:	4299      	cmp	r1, r3
 800632a:	bfde      	ittt	le
 800632c:	2330      	movle	r3, #48	@ 0x30
 800632e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006332:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006336:	1b92      	subs	r2, r2, r6
 8006338:	6122      	str	r2, [r4, #16]
 800633a:	f8cd a000 	str.w	sl, [sp]
 800633e:	464b      	mov	r3, r9
 8006340:	aa03      	add	r2, sp, #12
 8006342:	4621      	mov	r1, r4
 8006344:	4640      	mov	r0, r8
 8006346:	f7ff fee7 	bl	8006118 <_printf_common>
 800634a:	3001      	adds	r0, #1
 800634c:	d14a      	bne.n	80063e4 <_printf_i+0x1f0>
 800634e:	f04f 30ff 	mov.w	r0, #4294967295
 8006352:	b004      	add	sp, #16
 8006354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006358:	6823      	ldr	r3, [r4, #0]
 800635a:	f043 0320 	orr.w	r3, r3, #32
 800635e:	6023      	str	r3, [r4, #0]
 8006360:	4832      	ldr	r0, [pc, #200]	@ (800642c <_printf_i+0x238>)
 8006362:	2778      	movs	r7, #120	@ 0x78
 8006364:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006368:	6823      	ldr	r3, [r4, #0]
 800636a:	6831      	ldr	r1, [r6, #0]
 800636c:	061f      	lsls	r7, r3, #24
 800636e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006372:	d402      	bmi.n	800637a <_printf_i+0x186>
 8006374:	065f      	lsls	r7, r3, #25
 8006376:	bf48      	it	mi
 8006378:	b2ad      	uxthmi	r5, r5
 800637a:	6031      	str	r1, [r6, #0]
 800637c:	07d9      	lsls	r1, r3, #31
 800637e:	bf44      	itt	mi
 8006380:	f043 0320 	orrmi.w	r3, r3, #32
 8006384:	6023      	strmi	r3, [r4, #0]
 8006386:	b11d      	cbz	r5, 8006390 <_printf_i+0x19c>
 8006388:	2310      	movs	r3, #16
 800638a:	e7ad      	b.n	80062e8 <_printf_i+0xf4>
 800638c:	4826      	ldr	r0, [pc, #152]	@ (8006428 <_printf_i+0x234>)
 800638e:	e7e9      	b.n	8006364 <_printf_i+0x170>
 8006390:	6823      	ldr	r3, [r4, #0]
 8006392:	f023 0320 	bic.w	r3, r3, #32
 8006396:	6023      	str	r3, [r4, #0]
 8006398:	e7f6      	b.n	8006388 <_printf_i+0x194>
 800639a:	4616      	mov	r6, r2
 800639c:	e7bd      	b.n	800631a <_printf_i+0x126>
 800639e:	6833      	ldr	r3, [r6, #0]
 80063a0:	6825      	ldr	r5, [r4, #0]
 80063a2:	6961      	ldr	r1, [r4, #20]
 80063a4:	1d18      	adds	r0, r3, #4
 80063a6:	6030      	str	r0, [r6, #0]
 80063a8:	062e      	lsls	r6, r5, #24
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	d501      	bpl.n	80063b2 <_printf_i+0x1be>
 80063ae:	6019      	str	r1, [r3, #0]
 80063b0:	e002      	b.n	80063b8 <_printf_i+0x1c4>
 80063b2:	0668      	lsls	r0, r5, #25
 80063b4:	d5fb      	bpl.n	80063ae <_printf_i+0x1ba>
 80063b6:	8019      	strh	r1, [r3, #0]
 80063b8:	2300      	movs	r3, #0
 80063ba:	6123      	str	r3, [r4, #16]
 80063bc:	4616      	mov	r6, r2
 80063be:	e7bc      	b.n	800633a <_printf_i+0x146>
 80063c0:	6833      	ldr	r3, [r6, #0]
 80063c2:	1d1a      	adds	r2, r3, #4
 80063c4:	6032      	str	r2, [r6, #0]
 80063c6:	681e      	ldr	r6, [r3, #0]
 80063c8:	6862      	ldr	r2, [r4, #4]
 80063ca:	2100      	movs	r1, #0
 80063cc:	4630      	mov	r0, r6
 80063ce:	f7f9 ff07 	bl	80001e0 <memchr>
 80063d2:	b108      	cbz	r0, 80063d8 <_printf_i+0x1e4>
 80063d4:	1b80      	subs	r0, r0, r6
 80063d6:	6060      	str	r0, [r4, #4]
 80063d8:	6863      	ldr	r3, [r4, #4]
 80063da:	6123      	str	r3, [r4, #16]
 80063dc:	2300      	movs	r3, #0
 80063de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063e2:	e7aa      	b.n	800633a <_printf_i+0x146>
 80063e4:	6923      	ldr	r3, [r4, #16]
 80063e6:	4632      	mov	r2, r6
 80063e8:	4649      	mov	r1, r9
 80063ea:	4640      	mov	r0, r8
 80063ec:	47d0      	blx	sl
 80063ee:	3001      	adds	r0, #1
 80063f0:	d0ad      	beq.n	800634e <_printf_i+0x15a>
 80063f2:	6823      	ldr	r3, [r4, #0]
 80063f4:	079b      	lsls	r3, r3, #30
 80063f6:	d413      	bmi.n	8006420 <_printf_i+0x22c>
 80063f8:	68e0      	ldr	r0, [r4, #12]
 80063fa:	9b03      	ldr	r3, [sp, #12]
 80063fc:	4298      	cmp	r0, r3
 80063fe:	bfb8      	it	lt
 8006400:	4618      	movlt	r0, r3
 8006402:	e7a6      	b.n	8006352 <_printf_i+0x15e>
 8006404:	2301      	movs	r3, #1
 8006406:	4632      	mov	r2, r6
 8006408:	4649      	mov	r1, r9
 800640a:	4640      	mov	r0, r8
 800640c:	47d0      	blx	sl
 800640e:	3001      	adds	r0, #1
 8006410:	d09d      	beq.n	800634e <_printf_i+0x15a>
 8006412:	3501      	adds	r5, #1
 8006414:	68e3      	ldr	r3, [r4, #12]
 8006416:	9903      	ldr	r1, [sp, #12]
 8006418:	1a5b      	subs	r3, r3, r1
 800641a:	42ab      	cmp	r3, r5
 800641c:	dcf2      	bgt.n	8006404 <_printf_i+0x210>
 800641e:	e7eb      	b.n	80063f8 <_printf_i+0x204>
 8006420:	2500      	movs	r5, #0
 8006422:	f104 0619 	add.w	r6, r4, #25
 8006426:	e7f5      	b.n	8006414 <_printf_i+0x220>
 8006428:	080065c1 	.word	0x080065c1
 800642c:	080065d2 	.word	0x080065d2

08006430 <memmove>:
 8006430:	4288      	cmp	r0, r1
 8006432:	b510      	push	{r4, lr}
 8006434:	eb01 0402 	add.w	r4, r1, r2
 8006438:	d902      	bls.n	8006440 <memmove+0x10>
 800643a:	4284      	cmp	r4, r0
 800643c:	4623      	mov	r3, r4
 800643e:	d807      	bhi.n	8006450 <memmove+0x20>
 8006440:	1e43      	subs	r3, r0, #1
 8006442:	42a1      	cmp	r1, r4
 8006444:	d008      	beq.n	8006458 <memmove+0x28>
 8006446:	f811 2b01 	ldrb.w	r2, [r1], #1
 800644a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800644e:	e7f8      	b.n	8006442 <memmove+0x12>
 8006450:	4402      	add	r2, r0
 8006452:	4601      	mov	r1, r0
 8006454:	428a      	cmp	r2, r1
 8006456:	d100      	bne.n	800645a <memmove+0x2a>
 8006458:	bd10      	pop	{r4, pc}
 800645a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800645e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006462:	e7f7      	b.n	8006454 <memmove+0x24>

08006464 <_sbrk_r>:
 8006464:	b538      	push	{r3, r4, r5, lr}
 8006466:	4d06      	ldr	r5, [pc, #24]	@ (8006480 <_sbrk_r+0x1c>)
 8006468:	2300      	movs	r3, #0
 800646a:	4604      	mov	r4, r0
 800646c:	4608      	mov	r0, r1
 800646e:	602b      	str	r3, [r5, #0]
 8006470:	f7fa faae 	bl	80009d0 <_sbrk>
 8006474:	1c43      	adds	r3, r0, #1
 8006476:	d102      	bne.n	800647e <_sbrk_r+0x1a>
 8006478:	682b      	ldr	r3, [r5, #0]
 800647a:	b103      	cbz	r3, 800647e <_sbrk_r+0x1a>
 800647c:	6023      	str	r3, [r4, #0]
 800647e:	bd38      	pop	{r3, r4, r5, pc}
 8006480:	200004bc 	.word	0x200004bc

08006484 <memcpy>:
 8006484:	440a      	add	r2, r1
 8006486:	4291      	cmp	r1, r2
 8006488:	f100 33ff 	add.w	r3, r0, #4294967295
 800648c:	d100      	bne.n	8006490 <memcpy+0xc>
 800648e:	4770      	bx	lr
 8006490:	b510      	push	{r4, lr}
 8006492:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006496:	f803 4f01 	strb.w	r4, [r3, #1]!
 800649a:	4291      	cmp	r1, r2
 800649c:	d1f9      	bne.n	8006492 <memcpy+0xe>
 800649e:	bd10      	pop	{r4, pc}

080064a0 <_realloc_r>:
 80064a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064a4:	4607      	mov	r7, r0
 80064a6:	4614      	mov	r4, r2
 80064a8:	460d      	mov	r5, r1
 80064aa:	b921      	cbnz	r1, 80064b6 <_realloc_r+0x16>
 80064ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064b0:	4611      	mov	r1, r2
 80064b2:	f7ff bc4d 	b.w	8005d50 <_malloc_r>
 80064b6:	b92a      	cbnz	r2, 80064c4 <_realloc_r+0x24>
 80064b8:	f7ff fbde 	bl	8005c78 <_free_r>
 80064bc:	4625      	mov	r5, r4
 80064be:	4628      	mov	r0, r5
 80064c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064c4:	f000 f81a 	bl	80064fc <_malloc_usable_size_r>
 80064c8:	4284      	cmp	r4, r0
 80064ca:	4606      	mov	r6, r0
 80064cc:	d802      	bhi.n	80064d4 <_realloc_r+0x34>
 80064ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80064d2:	d8f4      	bhi.n	80064be <_realloc_r+0x1e>
 80064d4:	4621      	mov	r1, r4
 80064d6:	4638      	mov	r0, r7
 80064d8:	f7ff fc3a 	bl	8005d50 <_malloc_r>
 80064dc:	4680      	mov	r8, r0
 80064de:	b908      	cbnz	r0, 80064e4 <_realloc_r+0x44>
 80064e0:	4645      	mov	r5, r8
 80064e2:	e7ec      	b.n	80064be <_realloc_r+0x1e>
 80064e4:	42b4      	cmp	r4, r6
 80064e6:	4622      	mov	r2, r4
 80064e8:	4629      	mov	r1, r5
 80064ea:	bf28      	it	cs
 80064ec:	4632      	movcs	r2, r6
 80064ee:	f7ff ffc9 	bl	8006484 <memcpy>
 80064f2:	4629      	mov	r1, r5
 80064f4:	4638      	mov	r0, r7
 80064f6:	f7ff fbbf 	bl	8005c78 <_free_r>
 80064fa:	e7f1      	b.n	80064e0 <_realloc_r+0x40>

080064fc <_malloc_usable_size_r>:
 80064fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006500:	1f18      	subs	r0, r3, #4
 8006502:	2b00      	cmp	r3, #0
 8006504:	bfbc      	itt	lt
 8006506:	580b      	ldrlt	r3, [r1, r0]
 8006508:	18c0      	addlt	r0, r0, r3
 800650a:	4770      	bx	lr

0800650c <_init>:
 800650c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800650e:	bf00      	nop
 8006510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006512:	bc08      	pop	{r3}
 8006514:	469e      	mov	lr, r3
 8006516:	4770      	bx	lr

08006518 <_fini>:
 8006518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800651a:	bf00      	nop
 800651c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800651e:	bc08      	pop	{r3}
 8006520:	469e      	mov	lr, r3
 8006522:	4770      	bx	lr
