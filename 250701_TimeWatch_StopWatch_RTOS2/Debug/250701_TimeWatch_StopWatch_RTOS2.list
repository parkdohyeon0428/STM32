
250701_TimeWatch_StopWatch_RTOS2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058dc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08005a7c  08005a7c  00006a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b54  08005b54  000070d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005b54  08005b54  00006b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b5c  08005b5c  000070d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b5c  08005b5c  00006b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b60  08005b60  00006b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d8  20000000  08005b64  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000431c  200000d8  08005c3c  000070d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200043f4  08005c3c  000073f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000070d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018edf  00000000  00000000  00007108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044ba  00000000  00000000  0001ffe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b0  00000000  00000000  000244a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001171  00000000  00000000  00025b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b33c  00000000  00000000  00026cc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f6ca  00000000  00000000  00042005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a160  00000000  00000000  000616cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fb82f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e6c  00000000  00000000  000fb874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  001016e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d8 	.word	0x200000d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005a64 	.word	0x08005a64

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000dc 	.word	0x200000dc
 80001dc:	08005a64 	.word	0x08005a64

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b988 	b.w	8000508 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	468e      	mov	lr, r1
 8000218:	4604      	mov	r4, r0
 800021a:	4688      	mov	r8, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d962      	bls.n	80002ec <__udivmoddi4+0xdc>
 8000226:	fab2 f682 	clz	r6, r2
 800022a:	b14e      	cbz	r6, 8000240 <__udivmoddi4+0x30>
 800022c:	f1c6 0320 	rsb	r3, r6, #32
 8000230:	fa01 f806 	lsl.w	r8, r1, r6
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	40b7      	lsls	r7, r6
 800023a:	ea43 0808 	orr.w	r8, r3, r8
 800023e:	40b4      	lsls	r4, r6
 8000240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000244:	fa1f fc87 	uxth.w	ip, r7
 8000248:	fbb8 f1fe 	udiv	r1, r8, lr
 800024c:	0c23      	lsrs	r3, r4, #16
 800024e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000252:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000256:	fb01 f20c 	mul.w	r2, r1, ip
 800025a:	429a      	cmp	r2, r3
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0x62>
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	f101 30ff 	add.w	r0, r1, #4294967295
 8000264:	f080 80ea 	bcs.w	800043c <__udivmoddi4+0x22c>
 8000268:	429a      	cmp	r2, r3
 800026a:	f240 80e7 	bls.w	800043c <__udivmoddi4+0x22c>
 800026e:	3902      	subs	r1, #2
 8000270:	443b      	add	r3, r7
 8000272:	1a9a      	subs	r2, r3, r2
 8000274:	b2a3      	uxth	r3, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000282:	fb00 fc0c 	mul.w	ip, r0, ip
 8000286:	459c      	cmp	ip, r3
 8000288:	d909      	bls.n	800029e <__udivmoddi4+0x8e>
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000290:	f080 80d6 	bcs.w	8000440 <__udivmoddi4+0x230>
 8000294:	459c      	cmp	ip, r3
 8000296:	f240 80d3 	bls.w	8000440 <__udivmoddi4+0x230>
 800029a:	443b      	add	r3, r7
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a2:	eba3 030c 	sub.w	r3, r3, ip
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40f3      	lsrs	r3, r6
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xb6>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb0>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x14c>
 80002ce:	4573      	cmp	r3, lr
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xc8>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 8105 	bhi.w	80004e2 <__udivmoddi4+0x2d2>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb6e 0203 	sbc.w	r2, lr, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4690      	mov	r8, r2
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e5      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002e6:	e9c5 4800 	strd	r4, r8, [r5]
 80002ea:	e7e2      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f000 8090 	beq.w	8000412 <__udivmoddi4+0x202>
 80002f2:	fab2 f682 	clz	r6, r2
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	f040 80a4 	bne.w	8000444 <__udivmoddi4+0x234>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	0c03      	lsrs	r3, r0, #16
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	b280      	uxth	r0, r0
 8000306:	b2bc      	uxth	r4, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb2 fcfe 	udiv	ip, r2, lr
 800030e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb04 f20c 	mul.w	r2, r4, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x11e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x11c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 80e0 	bhi.w	80004ec <__udivmoddi4+0x2dc>
 800032c:	46c4      	mov	ip, r8
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	fbb3 f2fe 	udiv	r2, r3, lr
 8000334:	fb0e 3312 	mls	r3, lr, r2, r3
 8000338:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800033c:	fb02 f404 	mul.w	r4, r2, r4
 8000340:	429c      	cmp	r4, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x144>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f102 30ff 	add.w	r0, r2, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x142>
 800034c:	429c      	cmp	r4, r3
 800034e:	f200 80ca 	bhi.w	80004e6 <__udivmoddi4+0x2d6>
 8000352:	4602      	mov	r2, r0
 8000354:	1b1b      	subs	r3, r3, r4
 8000356:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x98>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa0e f401 	lsl.w	r4, lr, r1
 800036c:	fa20 f306 	lsr.w	r3, r0, r6
 8000370:	fa2e fe06 	lsr.w	lr, lr, r6
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	fa1f fc87 	uxth.w	ip, r7
 8000382:	fbbe f0f9 	udiv	r0, lr, r9
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	fb09 ee10 	mls	lr, r9, r0, lr
 800038c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000390:	fb00 fe0c 	mul.w	lr, r0, ip
 8000394:	45a6      	cmp	lr, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x1a0>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 3aff 	add.w	sl, r0, #4294967295
 80003a2:	f080 809c 	bcs.w	80004de <__udivmoddi4+0x2ce>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f240 8099 	bls.w	80004de <__udivmoddi4+0x2ce>
 80003ac:	3802      	subs	r0, #2
 80003ae:	443c      	add	r4, r7
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	fa1f fe83 	uxth.w	lr, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c8:	45a4      	cmp	ip, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1ce>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80003d2:	f080 8082 	bcs.w	80004da <__udivmoddi4+0x2ca>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d97f      	bls.n	80004da <__udivmoddi4+0x2ca>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ea:	4564      	cmp	r4, ip
 80003ec:	4673      	mov	r3, lr
 80003ee:	46e1      	mov	r9, ip
 80003f0:	d362      	bcc.n	80004b8 <__udivmoddi4+0x2a8>
 80003f2:	d05f      	beq.n	80004b4 <__udivmoddi4+0x2a4>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x1fe>
 80003f6:	ebb8 0203 	subs.w	r2, r8, r3
 80003fa:	eb64 0409 	sbc.w	r4, r4, r9
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	fa22 f301 	lsr.w	r3, r2, r1
 8000406:	431e      	orrs	r6, r3
 8000408:	40cc      	lsrs	r4, r1
 800040a:	e9c5 6400 	strd	r6, r4, [r5]
 800040e:	2100      	movs	r1, #0
 8000410:	e74f      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000412:	fbb1 fcf2 	udiv	ip, r1, r2
 8000416:	0c01      	lsrs	r1, r0, #16
 8000418:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000422:	463b      	mov	r3, r7
 8000424:	4638      	mov	r0, r7
 8000426:	463c      	mov	r4, r7
 8000428:	46b8      	mov	r8, r7
 800042a:	46be      	mov	lr, r7
 800042c:	2620      	movs	r6, #32
 800042e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000432:	eba2 0208 	sub.w	r2, r2, r8
 8000436:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043a:	e766      	b.n	800030a <__udivmoddi4+0xfa>
 800043c:	4601      	mov	r1, r0
 800043e:	e718      	b.n	8000272 <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e72c      	b.n	800029e <__udivmoddi4+0x8e>
 8000444:	f1c6 0220 	rsb	r2, r6, #32
 8000448:	fa2e f302 	lsr.w	r3, lr, r2
 800044c:	40b7      	lsls	r7, r6
 800044e:	40b1      	lsls	r1, r6
 8000450:	fa20 f202 	lsr.w	r2, r0, r2
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	430a      	orrs	r2, r1
 800045a:	fbb3 f8fe 	udiv	r8, r3, lr
 800045e:	b2bc      	uxth	r4, r7
 8000460:	fb0e 3318 	mls	r3, lr, r8, r3
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb08 f904 	mul.w	r9, r8, r4
 800046e:	40b0      	lsls	r0, r6
 8000470:	4589      	cmp	r9, r1
 8000472:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000476:	b280      	uxth	r0, r0
 8000478:	d93e      	bls.n	80004f8 <__udivmoddi4+0x2e8>
 800047a:	1879      	adds	r1, r7, r1
 800047c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000480:	d201      	bcs.n	8000486 <__udivmoddi4+0x276>
 8000482:	4589      	cmp	r9, r1
 8000484:	d81f      	bhi.n	80004c6 <__udivmoddi4+0x2b6>
 8000486:	eba1 0109 	sub.w	r1, r1, r9
 800048a:	fbb1 f9fe 	udiv	r9, r1, lr
 800048e:	fb09 f804 	mul.w	r8, r9, r4
 8000492:	fb0e 1119 	mls	r1, lr, r9, r1
 8000496:	b292      	uxth	r2, r2
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	4542      	cmp	r2, r8
 800049e:	d229      	bcs.n	80004f4 <__udivmoddi4+0x2e4>
 80004a0:	18ba      	adds	r2, r7, r2
 80004a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004a6:	d2c4      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d2c2      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004ac:	f1a9 0102 	sub.w	r1, r9, #2
 80004b0:	443a      	add	r2, r7
 80004b2:	e7be      	b.n	8000432 <__udivmoddi4+0x222>
 80004b4:	45f0      	cmp	r8, lr
 80004b6:	d29d      	bcs.n	80003f4 <__udivmoddi4+0x1e4>
 80004b8:	ebbe 0302 	subs.w	r3, lr, r2
 80004bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c0:	3801      	subs	r0, #1
 80004c2:	46e1      	mov	r9, ip
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1e4>
 80004c6:	eba7 0909 	sub.w	r9, r7, r9
 80004ca:	4449      	add	r1, r9
 80004cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d4:	fb09 f804 	mul.w	r8, r9, r4
 80004d8:	e7db      	b.n	8000492 <__udivmoddi4+0x282>
 80004da:	4673      	mov	r3, lr
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1ce>
 80004de:	4650      	mov	r0, sl
 80004e0:	e766      	b.n	80003b0 <__udivmoddi4+0x1a0>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e6fd      	b.n	80002e2 <__udivmoddi4+0xd2>
 80004e6:	443b      	add	r3, r7
 80004e8:	3a02      	subs	r2, #2
 80004ea:	e733      	b.n	8000354 <__udivmoddi4+0x144>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	443b      	add	r3, r7
 80004f2:	e71c      	b.n	800032e <__udivmoddi4+0x11e>
 80004f4:	4649      	mov	r1, r9
 80004f6:	e79c      	b.n	8000432 <__udivmoddi4+0x222>
 80004f8:	eba1 0109 	sub.w	r1, r1, r9
 80004fc:	46c4      	mov	ip, r8
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fb09 f804 	mul.w	r8, r9, r4
 8000506:	e7c4      	b.n	8000492 <__udivmoddi4+0x282>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	@ (8000538 <vApplicationGetIdleTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	@ (800053c <vApplicationGetIdleTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2280      	movs	r2, #128	@ 0x80
 8000528:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	20000104 	.word	0x20000104
 800053c:	200001a4 	.word	0x200001a4

08000540 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000540:	b5b0      	push	{r4, r5, r7, lr}
 8000542:	b09c      	sub	sp, #112	@ 0x70
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	Model_Init();
 8000546:	f000 fd1b 	bl	8000f80 <Model_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800054a:	4b27      	ldr	r3, [pc, #156]	@ (80005e8 <MX_FREERTOS_Init+0xa8>)
 800054c:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000550:	461d      	mov	r5, r3
 8000552:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000554:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000556:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800055a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800055e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000562:	2100      	movs	r1, #0
 8000564:	4618      	mov	r0, r3
 8000566:	f003 fe62 	bl	800422e <osThreadCreate>
 800056a:	4603      	mov	r3, r0
 800056c:	4a1f      	ldr	r2, [pc, #124]	@ (80005ec <MX_FREERTOS_Init+0xac>)
 800056e:	6013      	str	r3, [r2, #0]

  /* definition and creation of ListenerThread */
  osThreadDef(ListenerThread, ListenerTask, osPriorityNormal, 0, 128);
 8000570:	4b1f      	ldr	r3, [pc, #124]	@ (80005f0 <MX_FREERTOS_Init+0xb0>)
 8000572:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000576:	461d      	mov	r5, r3
 8000578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800057a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800057c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000580:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ListenerThreadHandle = osThreadCreate(osThread(ListenerThread), NULL);
 8000584:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f003 fe4f 	bl	800422e <osThreadCreate>
 8000590:	4603      	mov	r3, r0
 8000592:	4a18      	ldr	r2, [pc, #96]	@ (80005f4 <MX_FREERTOS_Init+0xb4>)
 8000594:	6013      	str	r3, [r2, #0]

  /* definition and creation of ControllerThrea */
  osThreadDef(ControllerThrea, ControllerTask, osPriorityNormal, 0, 128);
 8000596:	4b18      	ldr	r3, [pc, #96]	@ (80005f8 <MX_FREERTOS_Init+0xb8>)
 8000598:	f107 041c 	add.w	r4, r7, #28
 800059c:	461d      	mov	r5, r3
 800059e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ControllerThreaHandle = osThreadCreate(osThread(ControllerThrea), NULL);
 80005aa:	f107 031c 	add.w	r3, r7, #28
 80005ae:	2100      	movs	r1, #0
 80005b0:	4618      	mov	r0, r3
 80005b2:	f003 fe3c 	bl	800422e <osThreadCreate>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a10      	ldr	r2, [pc, #64]	@ (80005fc <MX_FREERTOS_Init+0xbc>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* definition and creation of PresenterThread */
  osThreadDef(PresenterThread, PresenterTask, osPriorityNormal, 0, 128);
 80005bc:	4b10      	ldr	r3, [pc, #64]	@ (8000600 <MX_FREERTOS_Init+0xc0>)
 80005be:	463c      	mov	r4, r7
 80005c0:	461d      	mov	r5, r3
 80005c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PresenterThreadHandle = osThreadCreate(osThread(PresenterThread), NULL);
 80005ce:	463b      	mov	r3, r7
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f003 fe2b 	bl	800422e <osThreadCreate>
 80005d8:	4603      	mov	r3, r0
 80005da:	4a0a      	ldr	r2, [pc, #40]	@ (8000604 <MX_FREERTOS_Init+0xc4>)
 80005dc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80005de:	bf00      	nop
 80005e0:	3770      	adds	r7, #112	@ 0x70
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bdb0      	pop	{r4, r5, r7, pc}
 80005e6:	bf00      	nop
 80005e8:	08005a88 	.word	0x08005a88
 80005ec:	200000f4 	.word	0x200000f4
 80005f0:	08005ab4 	.word	0x08005ab4
 80005f4:	200000f8 	.word	0x200000f8
 80005f8:	08005ae0 	.word	0x08005ae0
 80005fc:	200000fc 	.word	0x200000fc
 8000600:	08005b0c 	.word	0x08005b0c
 8000604:	20000100 	.word	0x20000100

08000608 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000610:	2001      	movs	r0, #1
 8000612:	f003 fe58 	bl	80042c6 <osDelay>
 8000616:	e7fb      	b.n	8000610 <StartDefaultTask+0x8>

08000618 <ListenerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ListenerTask */
void ListenerTask(void const * argument)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ListenerTask */
  /* Infinite loop */

  for(;;)
  {
	  Listener_Excute();
 8000620:	f000 fc5e 	bl	8000ee0 <Listener_Excute>
    osDelay(1);
 8000624:	2001      	movs	r0, #1
 8000626:	f003 fe4e 	bl	80042c6 <osDelay>
  {
 800062a:	bf00      	nop
 800062c:	e7f8      	b.n	8000620 <ListenerTask+0x8>

0800062e <ControllerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ControllerTask */
void ControllerTask(void const * argument)
{
 800062e:	b580      	push	{r7, lr}
 8000630:	b082      	sub	sp, #8
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ControllerTask */
  /* Infinite loop */
  for(;;)
  {
	  Controller_Excute();
 8000636:	f000 fbf6 	bl	8000e26 <Controller_Excute>
    osDelay(1);
 800063a:	2001      	movs	r0, #1
 800063c:	f003 fe43 	bl	80042c6 <osDelay>
  {
 8000640:	bf00      	nop
 8000642:	e7f8      	b.n	8000636 <ControllerTask+0x8>

08000644 <PresenterTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_PresenterTask */
void PresenterTask(void const * argument)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PresenterTask */
  /* Infinite loop */
  for(;;)
  {
	  Presenter_Excute();
 800064c:	f000 fcb6 	bl	8000fbc <Presenter_Excute>
    osDelay(1);
 8000650:	2001      	movs	r0, #1
 8000652:	f003 fe38 	bl	80042c6 <osDelay>
  {
 8000656:	bf00      	nop
 8000658:	e7f8      	b.n	800064c <PresenterTask+0x8>
	...

0800065c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	@ 0x28
 8000660:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	613b      	str	r3, [r7, #16]
 8000676:	4b49      	ldr	r3, [pc, #292]	@ (800079c <MX_GPIO_Init+0x140>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	4a48      	ldr	r2, [pc, #288]	@ (800079c <MX_GPIO_Init+0x140>)
 800067c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000680:	6313      	str	r3, [r2, #48]	@ 0x30
 8000682:	4b46      	ldr	r3, [pc, #280]	@ (800079c <MX_GPIO_Init+0x140>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800068a:	613b      	str	r3, [r7, #16]
 800068c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	60fb      	str	r3, [r7, #12]
 8000692:	4b42      	ldr	r3, [pc, #264]	@ (800079c <MX_GPIO_Init+0x140>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	4a41      	ldr	r2, [pc, #260]	@ (800079c <MX_GPIO_Init+0x140>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	6313      	str	r3, [r2, #48]	@ 0x30
 800069e:	4b3f      	ldr	r3, [pc, #252]	@ (800079c <MX_GPIO_Init+0x140>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	4b3b      	ldr	r3, [pc, #236]	@ (800079c <MX_GPIO_Init+0x140>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	4a3a      	ldr	r2, [pc, #232]	@ (800079c <MX_GPIO_Init+0x140>)
 80006b4:	f043 0304 	orr.w	r3, r3, #4
 80006b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ba:	4b38      	ldr	r3, [pc, #224]	@ (800079c <MX_GPIO_Init+0x140>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	f003 0304 	and.w	r3, r3, #4
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	4b34      	ldr	r3, [pc, #208]	@ (800079c <MX_GPIO_Init+0x140>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	4a33      	ldr	r2, [pc, #204]	@ (800079c <MX_GPIO_Init+0x140>)
 80006d0:	f043 0302 	orr.w	r3, r3, #2
 80006d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d6:	4b31      	ldr	r3, [pc, #196]	@ (800079c <MX_GPIO_Init+0x140>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	f003 0302 	and.w	r3, r3, #2
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 80006e8:	482d      	ldr	r0, [pc, #180]	@ (80007a0 <MX_GPIO_Init+0x144>)
 80006ea:	f001 fd07 	bl	80020fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 80006ee:	2200      	movs	r2, #0
 80006f0:	f24f 0106 	movw	r1, #61446	@ 0xf006
 80006f4:	482b      	ldr	r0, [pc, #172]	@ (80007a4 <MX_GPIO_Init+0x148>)
 80006f6:	f001 fd01 	bl	80020fc <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8000700:	4829      	ldr	r0, [pc, #164]	@ (80007a8 <MX_GPIO_Init+0x14c>)
 8000702:	f001 fcfb 	bl	80020fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC4 PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 8000706:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 800070a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070c:	2301      	movs	r3, #1
 800070e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	2300      	movs	r3, #0
 8000716:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	4619      	mov	r1, r3
 800071e:	4820      	ldr	r0, [pc, #128]	@ (80007a0 <MX_GPIO_Init+0x144>)
 8000720:	f001 fb50 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8000724:	f24f 0306 	movw	r3, #61446	@ 0xf006
 8000728:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072a:	2301      	movs	r3, #1
 800072c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000732:	2300      	movs	r3, #0
 8000734:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	4619      	mov	r1, r3
 800073c:	4819      	ldr	r0, [pc, #100]	@ (80007a4 <MX_GPIO_Init+0x148>)
 800073e:	f001 fb41 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000742:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000748:	2300      	movs	r3, #0
 800074a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	4619      	mov	r1, r3
 8000756:	4814      	ldr	r0, [pc, #80]	@ (80007a8 <MX_GPIO_Init+0x14c>)
 8000758:	f001 fb34 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800075c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	2301      	movs	r3, #1
 8000764:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	4619      	mov	r1, r3
 8000774:	480c      	ldr	r0, [pc, #48]	@ (80007a8 <MX_GPIO_Init+0x14c>)
 8000776:	f001 fb25 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800077a:	2328      	movs	r3, #40	@ 0x28
 800077c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800077e:	2300      	movs	r3, #0
 8000780:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	4619      	mov	r1, r3
 800078c:	4805      	ldr	r0, [pc, #20]	@ (80007a4 <MX_GPIO_Init+0x148>)
 800078e:	f001 fb19 	bl	8001dc4 <HAL_GPIO_Init>

}
 8000792:	bf00      	nop
 8000794:	3728      	adds	r7, #40	@ 0x28
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800
 80007a0:	40020800 	.word	0x40020800
 80007a4:	40020400 	.word	0x40020400
 80007a8:	40020000 	.word	0x40020000

080007ac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007b0:	4b12      	ldr	r3, [pc, #72]	@ (80007fc <MX_I2C1_Init+0x50>)
 80007b2:	4a13      	ldr	r2, [pc, #76]	@ (8000800 <MX_I2C1_Init+0x54>)
 80007b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007b6:	4b11      	ldr	r3, [pc, #68]	@ (80007fc <MX_I2C1_Init+0x50>)
 80007b8:	4a12      	ldr	r2, [pc, #72]	@ (8000804 <MX_I2C1_Init+0x58>)
 80007ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	@ (80007fc <MX_I2C1_Init+0x50>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	@ (80007fc <MX_I2C1_Init+0x50>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <MX_I2C1_Init+0x50>)
 80007ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d0:	4b0a      	ldr	r3, [pc, #40]	@ (80007fc <MX_I2C1_Init+0x50>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007d6:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <MX_I2C1_Init+0x50>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007dc:	4b07      	ldr	r3, [pc, #28]	@ (80007fc <MX_I2C1_Init+0x50>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e2:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <MX_I2C1_Init+0x50>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007e8:	4804      	ldr	r0, [pc, #16]	@ (80007fc <MX_I2C1_Init+0x50>)
 80007ea:	f001 fca1 	bl	8002130 <HAL_I2C_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007f4:	f000 f8ee 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	200003a4 	.word	0x200003a4
 8000800:	40005400 	.word	0x40005400
 8000804:	000186a0 	.word	0x000186a0

08000808 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08a      	sub	sp, #40	@ 0x28
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a19      	ldr	r2, [pc, #100]	@ (800088c <HAL_I2C_MspInit+0x84>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d12c      	bne.n	8000884 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
 800082e:	4b18      	ldr	r3, [pc, #96]	@ (8000890 <HAL_I2C_MspInit+0x88>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a17      	ldr	r2, [pc, #92]	@ (8000890 <HAL_I2C_MspInit+0x88>)
 8000834:	f043 0302 	orr.w	r3, r3, #2
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b15      	ldr	r3, [pc, #84]	@ (8000890 <HAL_I2C_MspInit+0x88>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0302 	and.w	r3, r3, #2
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000846:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800084a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800084c:	2312      	movs	r3, #18
 800084e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000854:	2303      	movs	r3, #3
 8000856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000858:	2304      	movs	r3, #4
 800085a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4619      	mov	r1, r3
 8000862:	480c      	ldr	r0, [pc, #48]	@ (8000894 <HAL_I2C_MspInit+0x8c>)
 8000864:	f001 faae 	bl	8001dc4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000868:	2300      	movs	r3, #0
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	4b08      	ldr	r3, [pc, #32]	@ (8000890 <HAL_I2C_MspInit+0x88>)
 800086e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000870:	4a07      	ldr	r2, [pc, #28]	@ (8000890 <HAL_I2C_MspInit+0x88>)
 8000872:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000876:	6413      	str	r3, [r2, #64]	@ 0x40
 8000878:	4b05      	ldr	r3, [pc, #20]	@ (8000890 <HAL_I2C_MspInit+0x88>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000884:	bf00      	nop
 8000886:	3728      	adds	r7, #40	@ 0x28
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40005400 	.word	0x40005400
 8000890:	40023800 	.word	0x40023800
 8000894:	40020400 	.word	0x40020400

08000898 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800089c:	f001 f94a 	bl	8001b34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a0:	f000 f814 	bl	80008cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a4:	f7ff feda 	bl	800065c <MX_GPIO_Init>
  MX_TIM2_Init();
 80008a8:	f000 f9b0 	bl	8000c0c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80008ac:	f000 fa20 	bl	8000cf0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80008b0:	f7ff ff7c 	bl	80007ac <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ap_init();
 80008b4:	f000 fc4c 	bl	8001150 <ap_init>
  Model_Init();
 80008b8:	f000 fb62 	bl	8000f80 <Model_Init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80008bc:	f7ff fe40 	bl	8000540 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80008c0:	f003 fcae 	bl	8004220 <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ap_main();
 80008c4:	f000 fc40 	bl	8001148 <ap_main>
 80008c8:	e7fc      	b.n	80008c4 <main+0x2c>
	...

080008cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b094      	sub	sp, #80	@ 0x50
 80008d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d2:	f107 0320 	add.w	r3, r7, #32
 80008d6:	2230      	movs	r2, #48	@ 0x30
 80008d8:	2100      	movs	r1, #0
 80008da:	4618      	mov	r0, r3
 80008dc:	f004 ffc8 	bl	8005870 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e0:	f107 030c 	add.w	r3, r7, #12
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f0:	2300      	movs	r3, #0
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	4b27      	ldr	r3, [pc, #156]	@ (8000994 <SystemClock_Config+0xc8>)
 80008f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f8:	4a26      	ldr	r2, [pc, #152]	@ (8000994 <SystemClock_Config+0xc8>)
 80008fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000900:	4b24      	ldr	r3, [pc, #144]	@ (8000994 <SystemClock_Config+0xc8>)
 8000902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000904:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800090c:	2300      	movs	r3, #0
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	4b21      	ldr	r3, [pc, #132]	@ (8000998 <SystemClock_Config+0xcc>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a20      	ldr	r2, [pc, #128]	@ (8000998 <SystemClock_Config+0xcc>)
 8000916:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800091a:	6013      	str	r3, [r2, #0]
 800091c:	4b1e      	ldr	r3, [pc, #120]	@ (8000998 <SystemClock_Config+0xcc>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000928:	2301      	movs	r3, #1
 800092a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800092c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000930:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000932:	2302      	movs	r3, #2
 8000934:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000936:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800093a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800093c:	2304      	movs	r3, #4
 800093e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000940:	2364      	movs	r3, #100	@ 0x64
 8000942:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000944:	2302      	movs	r3, #2
 8000946:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000948:	2304      	movs	r3, #4
 800094a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094c:	f107 0320 	add.w	r3, r7, #32
 8000950:	4618      	mov	r0, r3
 8000952:	f002 f88b 	bl	8002a6c <HAL_RCC_OscConfig>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800095c:	f000 f83a 	bl	80009d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000960:	230f      	movs	r3, #15
 8000962:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000964:	2302      	movs	r3, #2
 8000966:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800096c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000970:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000972:	2300      	movs	r3, #0
 8000974:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000976:	f107 030c 	add.w	r3, r7, #12
 800097a:	2103      	movs	r1, #3
 800097c:	4618      	mov	r0, r3
 800097e:	f002 faed 	bl	8002f5c <HAL_RCC_ClockConfig>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000988:	f000 f824 	bl	80009d4 <Error_Handler>
  }
}
 800098c:	bf00      	nop
 800098e:	3750      	adds	r7, #80	@ 0x50
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40023800 	.word	0x40023800
 8000998:	40007000 	.word	0x40007000

0800099c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a09      	ldr	r2, [pc, #36]	@ (80009d0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d101      	bne.n	80009b2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {

	  //  }
    HAL_IncTick();
 80009ae:	f001 f8e3 	bl	8001b78 <HAL_IncTick>
  }


  /* USER CODE BEGIN Callback 1 */
  if(htim->Instance == TIM2){
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009ba:	d105      	bne.n	80009c8 <HAL_TIM_PeriodElapsedCallback+0x2c>
	  FND_DispDataCallBack();
 80009bc:	f000 fe18 	bl	80015f0 <FND_DispDataCallBack>

	  TimeWatch_IncTimeCallBack();
 80009c0:	f000 fd42 	bl	8001448 <TimeWatch_IncTimeCallBack>
	  StopWatch_IncTimeCallBack();
 80009c4:	f000 fc80 	bl	80012c8 <StopWatch_IncTimeCallBack>
  }
  /* USER CODE END Callback 1 */
}
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40014800 	.word	0x40014800

080009d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d8:	b672      	cpsid	i
}
 80009da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <Error_Handler+0x8>

080009e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	4b12      	ldr	r3, [pc, #72]	@ (8000a34 <HAL_MspInit+0x54>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ee:	4a11      	ldr	r2, [pc, #68]	@ (8000a34 <HAL_MspInit+0x54>)
 80009f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a34 <HAL_MspInit+0x54>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	603b      	str	r3, [r7, #0]
 8000a06:	4b0b      	ldr	r3, [pc, #44]	@ (8000a34 <HAL_MspInit+0x54>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a34 <HAL_MspInit+0x54>)
 8000a0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a12:	4b08      	ldr	r3, [pc, #32]	@ (8000a34 <HAL_MspInit+0x54>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	210f      	movs	r1, #15
 8000a22:	f06f 0001 	mvn.w	r0, #1
 8000a26:	f001 f9a3 	bl	8001d70 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800

08000a38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08c      	sub	sp, #48	@ 0x30
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a44:	2300      	movs	r3, #0
 8000a46:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	4b2e      	ldr	r3, [pc, #184]	@ (8000b08 <HAL_InitTick+0xd0>)
 8000a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a50:	4a2d      	ldr	r2, [pc, #180]	@ (8000b08 <HAL_InitTick+0xd0>)
 8000a52:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a56:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a58:	4b2b      	ldr	r3, [pc, #172]	@ (8000b08 <HAL_InitTick+0xd0>)
 8000a5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a64:	f107 020c 	add.w	r2, r7, #12
 8000a68:	f107 0310 	add.w	r3, r7, #16
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f002 fc94 	bl	800339c <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a74:	f002 fc7e 	bl	8003374 <HAL_RCC_GetPCLK2Freq>
 8000a78:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a7c:	4a23      	ldr	r2, [pc, #140]	@ (8000b0c <HAL_InitTick+0xd4>)
 8000a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a82:	0c9b      	lsrs	r3, r3, #18
 8000a84:	3b01      	subs	r3, #1
 8000a86:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000a88:	4b21      	ldr	r3, [pc, #132]	@ (8000b10 <HAL_InitTick+0xd8>)
 8000a8a:	4a22      	ldr	r2, [pc, #136]	@ (8000b14 <HAL_InitTick+0xdc>)
 8000a8c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000a8e:	4b20      	ldr	r3, [pc, #128]	@ (8000b10 <HAL_InitTick+0xd8>)
 8000a90:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a94:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000a96:	4a1e      	ldr	r2, [pc, #120]	@ (8000b10 <HAL_InitTick+0xd8>)
 8000a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a9a:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000a9c:	4b1c      	ldr	r3, [pc, #112]	@ (8000b10 <HAL_InitTick+0xd8>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b10 <HAL_InitTick+0xd8>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa8:	4b19      	ldr	r3, [pc, #100]	@ (8000b10 <HAL_InitTick+0xd8>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8000aae:	4818      	ldr	r0, [pc, #96]	@ (8000b10 <HAL_InitTick+0xd8>)
 8000ab0:	f002 fca6 	bl	8003400 <HAL_TIM_Base_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000aba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d11b      	bne.n	8000afa <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8000ac2:	4813      	ldr	r0, [pc, #76]	@ (8000b10 <HAL_InitTick+0xd8>)
 8000ac4:	f002 fcec 	bl	80034a0 <HAL_TIM_Base_Start_IT>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000ace:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d111      	bne.n	8000afa <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000ad6:	201a      	movs	r0, #26
 8000ad8:	f001 f966 	bl	8001da8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2b0f      	cmp	r3, #15
 8000ae0:	d808      	bhi.n	8000af4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	6879      	ldr	r1, [r7, #4]
 8000ae6:	201a      	movs	r0, #26
 8000ae8:	f001 f942 	bl	8001d70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aec:	4a0a      	ldr	r2, [pc, #40]	@ (8000b18 <HAL_InitTick+0xe0>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6013      	str	r3, [r2, #0]
 8000af2:	e002      	b.n	8000afa <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000af4:	2301      	movs	r3, #1
 8000af6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000afa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3730      	adds	r7, #48	@ 0x30
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	431bde83 	.word	0x431bde83
 8000b10:	200003f8 	.word	0x200003f8
 8000b14:	40014800 	.word	0x40014800
 8000b18:	2000007c 	.word	0x2000007c

08000b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <NMI_Handler+0x4>

08000b24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <HardFault_Handler+0x4>

08000b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <MemManage_Handler+0x4>

08000b34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <BusFault_Handler+0x4>

08000b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <UsageFault_Handler+0x4>

08000b44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
	...

08000b54 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000b58:	4802      	ldr	r0, [pc, #8]	@ (8000b64 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000b5a:	f002 fd03 	bl	8003564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200003f8 	.word	0x200003f8

08000b68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b6c:	4802      	ldr	r0, [pc, #8]	@ (8000b78 <TIM2_IRQHandler+0x10>)
 8000b6e:	f002 fcf9 	bl	8003564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000444 	.word	0x20000444

08000b7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b84:	4a14      	ldr	r2, [pc, #80]	@ (8000bd8 <_sbrk+0x5c>)
 8000b86:	4b15      	ldr	r3, [pc, #84]	@ (8000bdc <_sbrk+0x60>)
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b90:	4b13      	ldr	r3, [pc, #76]	@ (8000be0 <_sbrk+0x64>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d102      	bne.n	8000b9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b98:	4b11      	ldr	r3, [pc, #68]	@ (8000be0 <_sbrk+0x64>)
 8000b9a:	4a12      	ldr	r2, [pc, #72]	@ (8000be4 <_sbrk+0x68>)
 8000b9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b9e:	4b10      	ldr	r3, [pc, #64]	@ (8000be0 <_sbrk+0x64>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d207      	bcs.n	8000bbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bac:	f004 fed6 	bl	800595c <__errno>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bba:	e009      	b.n	8000bd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bbc:	4b08      	ldr	r3, [pc, #32]	@ (8000be0 <_sbrk+0x64>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bc2:	4b07      	ldr	r3, [pc, #28]	@ (8000be0 <_sbrk+0x64>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	4a05      	ldr	r2, [pc, #20]	@ (8000be0 <_sbrk+0x64>)
 8000bcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bce:	68fb      	ldr	r3, [r7, #12]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3718      	adds	r7, #24
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20020000 	.word	0x20020000
 8000bdc:	00000400 	.word	0x00000400
 8000be0:	20000440 	.word	0x20000440
 8000be4:	200043f8 	.word	0x200043f8

08000be8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bec:	4b06      	ldr	r3, [pc, #24]	@ (8000c08 <SystemInit+0x20>)
 8000bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bf2:	4a05      	ldr	r2, [pc, #20]	@ (8000c08 <SystemInit+0x20>)
 8000bf4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bf8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c12:	f107 0308 	add.w	r3, r7, #8
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c20:	463b      	mov	r3, r7
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c28:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca0 <MX_TIM2_Init+0x94>)
 8000c2a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8000c30:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca0 <MX_TIM2_Init+0x94>)
 8000c32:	2263      	movs	r2, #99	@ 0x63
 8000c34:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c36:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca0 <MX_TIM2_Init+0x94>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000c3c:	4b18      	ldr	r3, [pc, #96]	@ (8000ca0 <MX_TIM2_Init+0x94>)
 8000c3e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c44:	4b16      	ldr	r3, [pc, #88]	@ (8000ca0 <MX_TIM2_Init+0x94>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ca0 <MX_TIM2_Init+0x94>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c50:	4813      	ldr	r0, [pc, #76]	@ (8000ca0 <MX_TIM2_Init+0x94>)
 8000c52:	f002 fbd5 	bl	8003400 <HAL_TIM_Base_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c5c:	f7ff feba 	bl	80009d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c66:	f107 0308 	add.w	r3, r7, #8
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	480c      	ldr	r0, [pc, #48]	@ (8000ca0 <MX_TIM2_Init+0x94>)
 8000c6e:	f002 fd69 	bl	8003744 <HAL_TIM_ConfigClockSource>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c78:	f7ff feac 	bl	80009d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c80:	2300      	movs	r3, #0
 8000c82:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c84:	463b      	mov	r3, r7
 8000c86:	4619      	mov	r1, r3
 8000c88:	4805      	ldr	r0, [pc, #20]	@ (8000ca0 <MX_TIM2_Init+0x94>)
 8000c8a:	f002 ff6b 	bl	8003b64 <HAL_TIMEx_MasterConfigSynchronization>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c94:	f7ff fe9e 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c98:	bf00      	nop
 8000c9a:	3718      	adds	r7, #24
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000444 	.word	0x20000444

08000ca4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cb4:	d115      	bne.n	8000ce2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <HAL_TIM_Base_MspInit+0x48>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cbe:	4a0b      	ldr	r2, [pc, #44]	@ (8000cec <HAL_TIM_Base_MspInit+0x48>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cc6:	4b09      	ldr	r3, [pc, #36]	@ (8000cec <HAL_TIM_Base_MspInit+0x48>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2105      	movs	r1, #5
 8000cd6:	201c      	movs	r0, #28
 8000cd8:	f001 f84a 	bl	8001d70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cdc:	201c      	movs	r0, #28
 8000cde:	f001 f863 	bl	8001da8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000ce2:	bf00      	nop
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40023800 	.word	0x40023800

08000cf0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cf4:	4b11      	ldr	r3, [pc, #68]	@ (8000d3c <MX_USART2_UART_Init+0x4c>)
 8000cf6:	4a12      	ldr	r2, [pc, #72]	@ (8000d40 <MX_USART2_UART_Init+0x50>)
 8000cf8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cfa:	4b10      	ldr	r3, [pc, #64]	@ (8000d3c <MX_USART2_UART_Init+0x4c>)
 8000cfc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	@ (8000d3c <MX_USART2_UART_Init+0x4c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d08:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <MX_USART2_UART_Init+0x4c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d3c <MX_USART2_UART_Init+0x4c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d14:	4b09      	ldr	r3, [pc, #36]	@ (8000d3c <MX_USART2_UART_Init+0x4c>)
 8000d16:	220c      	movs	r2, #12
 8000d18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1a:	4b08      	ldr	r3, [pc, #32]	@ (8000d3c <MX_USART2_UART_Init+0x4c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d20:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <MX_USART2_UART_Init+0x4c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d26:	4805      	ldr	r0, [pc, #20]	@ (8000d3c <MX_USART2_UART_Init+0x4c>)
 8000d28:	f002 ff9e 	bl	8003c68 <HAL_UART_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d32:	f7ff fe4f 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	2000048c 	.word	0x2000048c
 8000d40:	40004400 	.word	0x40004400

08000d44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	@ 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a19      	ldr	r2, [pc, #100]	@ (8000dc8 <HAL_UART_MspInit+0x84>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d12b      	bne.n	8000dbe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	4b18      	ldr	r3, [pc, #96]	@ (8000dcc <HAL_UART_MspInit+0x88>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6e:	4a17      	ldr	r2, [pc, #92]	@ (8000dcc <HAL_UART_MspInit+0x88>)
 8000d70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d76:	4b15      	ldr	r3, [pc, #84]	@ (8000dcc <HAL_UART_MspInit+0x88>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	4b11      	ldr	r3, [pc, #68]	@ (8000dcc <HAL_UART_MspInit+0x88>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	4a10      	ldr	r2, [pc, #64]	@ (8000dcc <HAL_UART_MspInit+0x88>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d92:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <HAL_UART_MspInit+0x88>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d9e:	230c      	movs	r3, #12
 8000da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	2302      	movs	r3, #2
 8000da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000daa:	2303      	movs	r3, #3
 8000dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dae:	2307      	movs	r3, #7
 8000db0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4619      	mov	r1, r3
 8000db8:	4805      	ldr	r0, [pc, #20]	@ (8000dd0 <HAL_UART_MspInit+0x8c>)
 8000dba:	f001 f803 	bl	8001dc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	3728      	adds	r7, #40	@ 0x28
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40004400 	.word	0x40004400
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40020000 	.word	0x40020000

08000dd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e0c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dd8:	f7ff ff06 	bl	8000be8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ddc:	480c      	ldr	r0, [pc, #48]	@ (8000e10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dde:	490d      	ldr	r1, [pc, #52]	@ (8000e14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000de0:	4a0d      	ldr	r2, [pc, #52]	@ (8000e18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de4:	e002      	b.n	8000dec <LoopCopyDataInit>

08000de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dea:	3304      	adds	r3, #4

08000dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df0:	d3f9      	bcc.n	8000de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df2:	4a0a      	ldr	r2, [pc, #40]	@ (8000e1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000df4:	4c0a      	ldr	r4, [pc, #40]	@ (8000e20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df8:	e001      	b.n	8000dfe <LoopFillZerobss>

08000dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dfc:	3204      	adds	r2, #4

08000dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e00:	d3fb      	bcc.n	8000dfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e02:	f004 fdb1 	bl	8005968 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e06:	f7ff fd47 	bl	8000898 <main>
  bx  lr    
 8000e0a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e14:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8000e18:	08005b64 	.word	0x08005b64
  ldr r2, =_sbss
 8000e1c:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8000e20:	200043f4 	.word	0x200043f4

08000e24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e24:	e7fe      	b.n	8000e24 <ADC_IRQHandler>

08000e26 <Controller_Excute>:

static button_t btnWatch = {0};


void Controller_Excute()
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	af00      	add	r7, sp, #0
	Controller_Mode();
 8000e2a:	f000 f803 	bl	8000e34 <Controller_Mode>
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <Controller_Mode>:
//		controlData.data = STOPWATCH_ACT;
//	}
//}

void Controller_Mode()
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
	if (!isQueEmpty(&btnQue)) {
 8000e38:	4817      	ldr	r0, [pc, #92]	@ (8000e98 <Controller_Mode+0x64>)
 8000e3a:	f000 f9d5 	bl	80011e8 <isQueEmpty>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d103      	bne.n	8000e4c <Controller_Mode+0x18>
		deQue(&btnQue, &btnWatch);
 8000e44:	4915      	ldr	r1, [pc, #84]	@ (8000e9c <Controller_Mode+0x68>)
 8000e46:	4814      	ldr	r0, [pc, #80]	@ (8000e98 <Controller_Mode+0x64>)
 8000e48:	f000 fa0b 	bl	8001262 <deQue>
	}

	switch(modeState)
 8000e4c:	4b14      	ldr	r3, [pc, #80]	@ (8000ea0 <Controller_Mode+0x6c>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d002      	beq.n	8000e5a <Controller_Mode+0x26>
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d00e      	beq.n	8000e76 <Controller_Mode+0x42>
		}
		StopWatch_Excute(&btnWatch);
		btnWatch.id = NOT;
		break;
	}
}
 8000e58:	e01b      	b.n	8000e92 <Controller_Mode+0x5e>
		if (btnWatch.id == BTN_MODE) {
 8000e5a:	4b10      	ldr	r3, [pc, #64]	@ (8000e9c <Controller_Mode+0x68>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d102      	bne.n	8000e68 <Controller_Mode+0x34>
			modeState = S_STOP_WATCH;
 8000e62:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea0 <Controller_Mode+0x6c>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	701a      	strb	r2, [r3, #0]
		TimeWatch_Excute(&btnWatch);
 8000e68:	480c      	ldr	r0, [pc, #48]	@ (8000e9c <Controller_Mode+0x68>)
 8000e6a:	f000 fb2f 	bl	80014cc <TimeWatch_Excute>
		btnWatch.id = NOT;
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e9c <Controller_Mode+0x68>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]
		break;
 8000e74:	e00d      	b.n	8000e92 <Controller_Mode+0x5e>
		if (btnWatch.id == BTN_MODE) {
 8000e76:	4b09      	ldr	r3, [pc, #36]	@ (8000e9c <Controller_Mode+0x68>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d102      	bne.n	8000e84 <Controller_Mode+0x50>
			modeState = S_TIME_WATCH;
 8000e7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ea0 <Controller_Mode+0x6c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	701a      	strb	r2, [r3, #0]
		StopWatch_Excute(&btnWatch);
 8000e84:	4805      	ldr	r0, [pc, #20]	@ (8000e9c <Controller_Mode+0x68>)
 8000e86:	f000 fa6d 	bl	8001364 <StopWatch_Excute>
		btnWatch.id = NOT;
 8000e8a:	4b04      	ldr	r3, [pc, #16]	@ (8000e9c <Controller_Mode+0x68>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]
		break;
 8000e90:	bf00      	nop
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200004e4 	.word	0x200004e4
 8000e9c:	200004d8 	.word	0x200004d8
 8000ea0:	200004d4 	.word	0x200004d4

08000ea4 <Listener_Init>:

static button_t btnWatch = {0};


void Listener_Init()
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
	Button_Init(&hBtnMode, GPIOB, GPIO_PIN_5);
 8000ea8:	2220      	movs	r2, #32
 8000eaa:	4908      	ldr	r1, [pc, #32]	@ (8000ecc <Listener_Init+0x28>)
 8000eac:	4808      	ldr	r0, [pc, #32]	@ (8000ed0 <Listener_Init+0x2c>)
 8000eae:	f000 fb1d 	bl	80014ec <Button_Init>
	Button_Init(&hBtnRunStop, GPIOB, GPIO_PIN_3);
 8000eb2:	2208      	movs	r2, #8
 8000eb4:	4905      	ldr	r1, [pc, #20]	@ (8000ecc <Listener_Init+0x28>)
 8000eb6:	4807      	ldr	r0, [pc, #28]	@ (8000ed4 <Listener_Init+0x30>)
 8000eb8:	f000 fb18 	bl	80014ec <Button_Init>
	Button_Init(&hBtnClear, GPIOA, GPIO_PIN_10);
 8000ebc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ec0:	4905      	ldr	r1, [pc, #20]	@ (8000ed8 <Listener_Init+0x34>)
 8000ec2:	4806      	ldr	r0, [pc, #24]	@ (8000edc <Listener_Init+0x38>)
 8000ec4:	f000 fb12 	bl	80014ec <Button_Init>
}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40020400 	.word	0x40020400
 8000ed0:	20000520 	.word	0x20000520
 8000ed4:	2000052c 	.word	0x2000052c
 8000ed8:	40020000 	.word	0x40020000
 8000edc:	20000538 	.word	0x20000538

08000ee0 <Listener_Excute>:

void Listener_Excute()
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
	Listener_CheckButton();
 8000ee4:	f000 f802 	bl	8000eec <Listener_CheckButton>
}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}

08000eec <Listener_CheckButton>:

void Listener_CheckButton()
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
	static uint32_t prevChkTime = 0;
	uint32_t curTick = HAL_GetTick();
 8000ef2:	f000 fe55 	bl	8001ba0 <HAL_GetTick>
 8000ef6:	6078      	str	r0, [r7, #4]
	if (curTick - prevChkTime < 100) return;
 8000ef8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f68 <Listener_CheckButton+0x7c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	2b63      	cmp	r3, #99	@ 0x63
 8000f02:	d92c      	bls.n	8000f5e <Listener_CheckButton+0x72>
	prevChkTime = curTick;
 8000f04:	4a18      	ldr	r2, [pc, #96]	@ (8000f68 <Listener_CheckButton+0x7c>)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6013      	str	r3, [r2, #0]


	if (Button_GetState(&hBtnMode) == ACT_RELEASED) {
 8000f0a:	4818      	ldr	r0, [pc, #96]	@ (8000f6c <Listener_CheckButton+0x80>)
 8000f0c:	f000 fb04 	bl	8001518 <Button_GetState>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d107      	bne.n	8000f26 <Listener_CheckButton+0x3a>
		btnWatch.id = BTN_MODE;
 8000f16:	4b16      	ldr	r3, [pc, #88]	@ (8000f70 <Listener_CheckButton+0x84>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	701a      	strb	r2, [r3, #0]
		enQue(&btnQue, &btnWatch);
 8000f1c:	4914      	ldr	r1, [pc, #80]	@ (8000f70 <Listener_CheckButton+0x84>)
 8000f1e:	4815      	ldr	r0, [pc, #84]	@ (8000f74 <Listener_CheckButton+0x88>)
 8000f20:	f000 f975 	bl	800120e <enQue>
 8000f24:	e01c      	b.n	8000f60 <Listener_CheckButton+0x74>
	}
	else if (Button_GetState(&hBtnRunStop) == ACT_PUSHED) {
 8000f26:	4814      	ldr	r0, [pc, #80]	@ (8000f78 <Listener_CheckButton+0x8c>)
 8000f28:	f000 faf6 	bl	8001518 <Button_GetState>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d107      	bne.n	8000f42 <Listener_CheckButton+0x56>
		btnWatch.id = BTN_RUN_STOP;
 8000f32:	4b0f      	ldr	r3, [pc, #60]	@ (8000f70 <Listener_CheckButton+0x84>)
 8000f34:	2202      	movs	r2, #2
 8000f36:	701a      	strb	r2, [r3, #0]
		enQue(&btnQue, &btnWatch);
 8000f38:	490d      	ldr	r1, [pc, #52]	@ (8000f70 <Listener_CheckButton+0x84>)
 8000f3a:	480e      	ldr	r0, [pc, #56]	@ (8000f74 <Listener_CheckButton+0x88>)
 8000f3c:	f000 f967 	bl	800120e <enQue>
 8000f40:	e00e      	b.n	8000f60 <Listener_CheckButton+0x74>
	}
	else if (Button_GetState(&hBtnClear) == ACT_PUSHED) {
 8000f42:	480e      	ldr	r0, [pc, #56]	@ (8000f7c <Listener_CheckButton+0x90>)
 8000f44:	f000 fae8 	bl	8001518 <Button_GetState>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d108      	bne.n	8000f60 <Listener_CheckButton+0x74>
		btnWatch.id = BTN_CLEAR;
 8000f4e:	4b08      	ldr	r3, [pc, #32]	@ (8000f70 <Listener_CheckButton+0x84>)
 8000f50:	2203      	movs	r2, #3
 8000f52:	701a      	strb	r2, [r3, #0]
		enQue(&btnQue, &btnWatch);
 8000f54:	4906      	ldr	r1, [pc, #24]	@ (8000f70 <Listener_CheckButton+0x84>)
 8000f56:	4807      	ldr	r0, [pc, #28]	@ (8000f74 <Listener_CheckButton+0x88>)
 8000f58:	f000 f959 	bl	800120e <enQue>
 8000f5c:	e000      	b.n	8000f60 <Listener_CheckButton+0x74>
	if (curTick - prevChkTime < 100) return;
 8000f5e:	bf00      	nop
	}
}
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200004e0 	.word	0x200004e0
 8000f6c:	20000520 	.word	0x20000520
 8000f70:	200004dc 	.word	0x200004dc
 8000f74:	200004e4 	.word	0x200004e4
 8000f78:	2000052c 	.word	0x2000052c
 8000f7c:	20000538 	.word	0x20000538

08000f80 <Model_Init>:

Que_TypeDef btnQue;
Que_TypeDef stopWatchQue;

void Model_Init()
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	Que_Init(&btnQue, sizeof(button_t));
 8000f84:	2101      	movs	r1, #1
 8000f86:	4804      	ldr	r0, [pc, #16]	@ (8000f98 <Model_Init+0x18>)
 8000f88:	f000 f8ea 	bl	8001160 <Que_Init>
	Que_Init(&stopWatchQue, sizeof(watch_t));
 8000f8c:	2106      	movs	r1, #6
 8000f8e:	4803      	ldr	r0, [pc, #12]	@ (8000f9c <Model_Init+0x1c>)
 8000f90:	f000 f8e6 	bl	8001160 <Que_Init>
}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	200004e4 	.word	0x200004e4
 8000f9c:	20000500 	.word	0x20000500

08000fa0 <Presenter_Init>:
static void Presenter_DispMonitorStopWatch(watch_t watchData);

static watch_t dispData = {TIME_WATCH,12,0,0,0};

void Presenter_Init()
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8000fa4:	4803      	ldr	r0, [pc, #12]	@ (8000fb4 <Presenter_Init+0x14>)
 8000fa6:	f002 fa7b 	bl	80034a0 <HAL_TIM_Base_Start_IT>
	LCD_Init(&hi2c1);
 8000faa:	4803      	ldr	r0, [pc, #12]	@ (8000fb8 <Presenter_Init+0x18>)
 8000fac:	f000 fce4 	bl	8001978 <LCD_Init>
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000444 	.word	0x20000444
 8000fb8:	200003a4 	.word	0x200003a4

08000fbc <Presenter_Excute>:
{
   memcpy(&dispData, &watchData, sizeof(watch_t)); // data copy (watchData -> dispData)
}

void Presenter_Excute()
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
	if (!isQueEmpty(&stopWatchQue)) {
 8000fc0:	480d      	ldr	r0, [pc, #52]	@ (8000ff8 <Presenter_Excute+0x3c>)
 8000fc2:	f000 f911 	bl	80011e8 <isQueEmpty>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d103      	bne.n	8000fd4 <Presenter_Excute+0x18>
		deQue(&stopWatchQue, &dispData);
 8000fcc:	490b      	ldr	r1, [pc, #44]	@ (8000ffc <Presenter_Excute+0x40>)
 8000fce:	480a      	ldr	r0, [pc, #40]	@ (8000ff8 <Presenter_Excute+0x3c>)
 8000fd0:	f000 f947 	bl	8001262 <deQue>
	}
   if (dispData.id == TIME_WATCH) {
 8000fd4:	4b09      	ldr	r3, [pc, #36]	@ (8000ffc <Presenter_Excute+0x40>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d105      	bne.n	8000fe8 <Presenter_Excute+0x2c>
      Presenter_DispTimeWatch(dispData);
 8000fdc:	4b07      	ldr	r3, [pc, #28]	@ (8000ffc <Presenter_Excute+0x40>)
 8000fde:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000fe2:	f000 f80d 	bl	8001000 <Presenter_DispTimeWatch>
   } else {
      Presenter_DispStopWatch(dispData);
   }
}
 8000fe6:	e004      	b.n	8000ff2 <Presenter_Excute+0x36>
      Presenter_DispStopWatch(dispData);
 8000fe8:	4b04      	ldr	r3, [pc, #16]	@ (8000ffc <Presenter_Excute+0x40>)
 8000fea:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000fee:	f000 f816 	bl	800101e <Presenter_DispStopWatch>
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000500 	.word	0x20000500
 8000ffc:	20000004 	.word	0x20000004

08001000 <Presenter_DispTimeWatch>:

void Presenter_DispTimeWatch(watch_t watchData)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	463b      	mov	r3, r7
 8001008:	e883 0003 	stmia.w	r3, {r0, r1}
   Presenter_DispFndTimeWatch(watchData);
 800100c:	463b      	mov	r3, r7
 800100e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001012:	f000 f813 	bl	800103c <Presenter_DispFndTimeWatch>
//   Presenter_DispMonitorTimeWatch(watchData);
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <Presenter_DispStopWatch>:

void Presenter_DispStopWatch(watch_t watchData)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	463b      	mov	r3, r7
 8001026:	e883 0003 	stmia.w	r3, {r0, r1}
   Presenter_DispFndStopWatch(watchData);
 800102a:	463b      	mov	r3, r7
 800102c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001030:	f000 f830 	bl	8001094 <Presenter_DispFndStopWatch>
//   Presenter_DispMonitorStopWatch(watchData);
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <Presenter_DispFndTimeWatch>:

void Presenter_DispFndTimeWatch(watch_t watchData)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	463b      	mov	r3, r7
 8001044:	e883 0003 	stmia.w	r3, {r0, r1}
   FND_WriteData(watchData.hour*100 + watchData.min);
 8001048:	787b      	ldrb	r3, [r7, #1]
 800104a:	461a      	mov	r2, r3
 800104c:	0092      	lsls	r2, r2, #2
 800104e:	4413      	add	r3, r2
 8001050:	461a      	mov	r2, r3
 8001052:	0091      	lsls	r1, r2, #2
 8001054:	461a      	mov	r2, r3
 8001056:	460b      	mov	r3, r1
 8001058:	4413      	add	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	b29b      	uxth	r3, r3
 800105e:	78ba      	ldrb	r2, [r7, #2]
 8001060:	4413      	add	r3, r2
 8001062:	b29b      	uxth	r3, r3
 8001064:	4618      	mov	r0, r3
 8001066:	f000 fab3 	bl	80015d0 <FND_WriteData>

   FND_WriteDp(FND_DP_1000|FND_DP_1|FND_DP_10, FND_DP_OFF);
 800106a:	2100      	movs	r1, #0
 800106c:	200b      	movs	r0, #11
 800106e:	f000 fa85 	bl	800157c <FND_WriteDp>

   if(watchData.msec < 500){
 8001072:	88bb      	ldrh	r3, [r7, #4]
 8001074:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001078:	d204      	bcs.n	8001084 <Presenter_DispFndTimeWatch+0x48>
      FND_WriteDp(FND_DP_100, FND_DP_ON);
 800107a:	2101      	movs	r1, #1
 800107c:	2004      	movs	r0, #4
 800107e:	f000 fa7d 	bl	800157c <FND_WriteDp>
   } else {
       FND_WriteDp(FND_DP_100, FND_DP_OFF);
   }
}
 8001082:	e003      	b.n	800108c <Presenter_DispFndTimeWatch+0x50>
       FND_WriteDp(FND_DP_100, FND_DP_OFF);
 8001084:	2100      	movs	r1, #0
 8001086:	2004      	movs	r0, #4
 8001088:	f000 fa78 	bl	800157c <FND_WriteDp>
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <Presenter_DispFndStopWatch>:

void Presenter_DispFndStopWatch(watch_t watchData)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	463b      	mov	r3, r7
 800109c:	e883 0003 	stmia.w	r3, {r0, r1}
   FND_WriteData((watchData.min %10 * 1000) + (watchData.sec*10)+(watchData.msec/100));
 80010a0:	78ba      	ldrb	r2, [r7, #2]
 80010a2:	4b27      	ldr	r3, [pc, #156]	@ (8001140 <Presenter_DispFndStopWatch+0xac>)
 80010a4:	fba3 1302 	umull	r1, r3, r3, r2
 80010a8:	08d9      	lsrs	r1, r3, #3
 80010aa:	460b      	mov	r3, r1
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	440b      	add	r3, r1
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	461a      	mov	r2, r3
 80010b8:	0152      	lsls	r2, r2, #5
 80010ba:	1ad2      	subs	r2, r2, r3
 80010bc:	0092      	lsls	r2, r2, #2
 80010be:	4413      	add	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	78fb      	ldrb	r3, [r7, #3]
 80010c6:	4619      	mov	r1, r3
 80010c8:	0089      	lsls	r1, r1, #2
 80010ca:	440b      	add	r3, r1
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	4413      	add	r3, r2
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	88bb      	ldrh	r3, [r7, #4]
 80010d6:	491b      	ldr	r1, [pc, #108]	@ (8001144 <Presenter_DispFndStopWatch+0xb0>)
 80010d8:	fba1 1303 	umull	r1, r3, r1, r3
 80010dc:	095b      	lsrs	r3, r3, #5
 80010de:	b29b      	uxth	r3, r3
 80010e0:	4413      	add	r3, r2
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	4618      	mov	r0, r3
 80010e6:	f000 fa73 	bl	80015d0 <FND_WriteData>

   FND_WriteDp(FND_DP_100|FND_DP_1, FND_DP_OFF);
 80010ea:	2100      	movs	r1, #0
 80010ec:	2005      	movs	r0, #5
 80010ee:	f000 fa45 	bl	800157c <FND_WriteDp>

   if (watchData.msec%100 < 50){            //
 80010f2:	88bb      	ldrh	r3, [r7, #4]
 80010f4:	4a13      	ldr	r2, [pc, #76]	@ (8001144 <Presenter_DispFndStopWatch+0xb0>)
 80010f6:	fba2 1203 	umull	r1, r2, r2, r3
 80010fa:	0952      	lsrs	r2, r2, #5
 80010fc:	2164      	movs	r1, #100	@ 0x64
 80010fe:	fb01 f202 	mul.w	r2, r1, r2
 8001102:	1a9b      	subs	r3, r3, r2
 8001104:	b29b      	uxth	r3, r3
 8001106:	2b31      	cmp	r3, #49	@ 0x31
 8001108:	d804      	bhi.n	8001114 <Presenter_DispFndStopWatch+0x80>
      FND_WriteDp(FND_DP_10, FND_DP_ON);
 800110a:	2101      	movs	r1, #1
 800110c:	2002      	movs	r0, #2
 800110e:	f000 fa35 	bl	800157c <FND_WriteDp>
 8001112:	e003      	b.n	800111c <Presenter_DispFndStopWatch+0x88>
   } else {
      FND_WriteDp(FND_DP_10, FND_DP_OFF);
 8001114:	2100      	movs	r1, #0
 8001116:	2002      	movs	r0, #2
 8001118:	f000 fa30 	bl	800157c <FND_WriteDp>
   }

   if (watchData.msec < 500){
 800111c:	88bb      	ldrh	r3, [r7, #4]
 800111e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001122:	d204      	bcs.n	800112e <Presenter_DispFndStopWatch+0x9a>
      FND_WriteDp(FND_DP_1000, FND_DP_ON);
 8001124:	2101      	movs	r1, #1
 8001126:	2008      	movs	r0, #8
 8001128:	f000 fa28 	bl	800157c <FND_WriteDp>
   } else {
      FND_WriteDp(FND_DP_1000, FND_DP_OFF);
   }
}
 800112c:	e003      	b.n	8001136 <Presenter_DispFndStopWatch+0xa2>
      FND_WriteDp(FND_DP_1000, FND_DP_OFF);
 800112e:	2100      	movs	r1, #0
 8001130:	2008      	movs	r0, #8
 8001132:	f000 fa23 	bl	800157c <FND_WriteDp>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	cccccccd 	.word	0xcccccccd
 8001144:	51eb851f 	.word	0x51eb851f

08001148 <ap_main>:
//	  StopWatch_IncTimeCallBack();
//  }
//}

int ap_main()
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0

	//HAL_TIM_Base_Start_IT(&htim2);
	while(1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <ap_main+0x4>

08001150 <ap_init>:
	return 0;
}


void ap_init()
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	Listener_Init();
 8001154:	f7ff fea6 	bl	8000ea4 <Listener_Init>
	Presenter_Init();
 8001158:	f7ff ff22 	bl	8000fa0 <Presenter_Init>
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}

08001160 <Que_Init>:

#include <my_queue.h>


void Que_Init(Que_TypeDef *q, int type_size)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
	q->front = 0;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
	q->rear = 0;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	605a      	str	r2, [r3, #4]
	q->typeSize = type_size;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	609a      	str	r2, [r3, #8]
	for (int i=0; i<QUE_SIZE; i++) {
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	e00f      	b.n	80011a2 <Que_Init+0x42>
		q->queData[i] = malloc(q->typeSize);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	4618      	mov	r0, r3
 8001188:	f004 fabc 	bl	8005704 <malloc>
 800118c:	4603      	mov	r3, r0
 800118e:	4619      	mov	r1, r3
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	3302      	adds	r3, #2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	4413      	add	r3, r2
 800119a:	6059      	str	r1, [r3, #4]
	for (int i=0; i<QUE_SIZE; i++) {
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	3301      	adds	r3, #1
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2b03      	cmp	r3, #3
 80011a6:	ddec      	ble.n	8001182 <Que_Init+0x22>
	}
}
 80011a8:	bf00      	nop
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <isQueFull>:
		free(q->queData[i]);
	}
}

int isQueFull(Que_TypeDef *q)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b083      	sub	sp, #12
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
	return q->front == ((q->rear+1) % QUE_SIZE);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	3301      	adds	r3, #1
 80011c4:	4259      	negs	r1, r3
 80011c6:	f003 0303 	and.w	r3, r3, #3
 80011ca:	f001 0103 	and.w	r1, r1, #3
 80011ce:	bf58      	it	pl
 80011d0:	424b      	negpl	r3, r1
 80011d2:	429a      	cmp	r2, r3
 80011d4:	bf0c      	ite	eq
 80011d6:	2301      	moveq	r3, #1
 80011d8:	2300      	movne	r3, #0
 80011da:	b2db      	uxtb	r3, r3
}
 80011dc:	4618      	mov	r0, r3
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <isQueEmpty>:

int isQueEmpty(Que_TypeDef *q)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	return q->front == q->rear;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	bf0c      	ite	eq
 80011fc:	2301      	moveq	r3, #1
 80011fe:	2300      	movne	r3, #0
 8001200:	b2db      	uxtb	r3, r3
}
 8001202:	4618      	mov	r0, r3
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <enQue>:

bool enQue(Que_TypeDef *q, void *pData)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
 8001216:	6039      	str	r1, [r7, #0]
	if (isQueFull(q)) {
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff ffca 	bl	80011b2 <isQueFull>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <enQue+0x1a>
		return true;
 8001224:	2301      	movs	r3, #1
 8001226:	e018      	b.n	800125a <enQue+0x4c>
	}
	memcpy(q->queData[q->rear], pData, q->typeSize);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	3302      	adds	r3, #2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	6858      	ldr	r0, [r3, #4]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	461a      	mov	r2, r3
 800123c:	6839      	ldr	r1, [r7, #0]
 800123e:	f004 fbb9 	bl	80059b4 <memcpy>

	q->rear = (q->rear+1) % QUE_SIZE;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	3301      	adds	r3, #1
 8001248:	425a      	negs	r2, r3
 800124a:	f003 0303 	and.w	r3, r3, #3
 800124e:	f002 0203 	and.w	r2, r2, #3
 8001252:	bf58      	it	pl
 8001254:	4253      	negpl	r3, r2
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	6053      	str	r3, [r2, #4]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <deQue>:

bool deQue(Que_TypeDef *q, void *pData)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b084      	sub	sp, #16
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	6039      	str	r1, [r7, #0]
	if (isQueEmpty(q)) {
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ffbb 	bl	80011e8 <isQueEmpty>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <deQue+0x1a>
		return false;
 8001278:	2300      	movs	r3, #0
 800127a:	e021      	b.n	80012c0 <deQue+0x5e>
	}
	memcpy(pData, q->queData[q->front], q->typeSize);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	3302      	adds	r3, #2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4413      	add	r3, r2
 8001288:	6859      	ldr	r1, [r3, #4]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	461a      	mov	r2, r3
 8001290:	6838      	ldr	r0, [r7, #0]
 8001292:	f004 fb8f 	bl	80059b4 <memcpy>

	int data = q->queData[q->front];
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	3302      	adds	r3, #2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	4413      	add	r3, r2
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	60fb      	str	r3, [r7, #12]
	q->front = (q->front+1) % QUE_SIZE;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	3301      	adds	r3, #1
 80012ac:	425a      	negs	r2, r3
 80012ae:	f003 0303 	and.w	r3, r3, #3
 80012b2:	f002 0203 	and.w	r2, r2, #3
 80012b6:	bf58      	it	pl
 80012b8:	4253      	negpl	r3, r2
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	6013      	str	r3, [r2, #0]
	return false;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <StopWatch_IncTimeCallBack>:
static watch_t stopWatch = {STOP_WATCH, 0, 0, 0, 0};



void StopWatch_IncTimeCallBack()
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
   if (stopWatchState == RUN){
 80012cc:	4b03      	ldr	r3, [pc, #12]	@ (80012dc <StopWatch_IncTimeCallBack+0x14>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d101      	bne.n	80012d8 <StopWatch_IncTimeCallBack+0x10>
      StopWatch_IncTime();
 80012d4:	f000 f804 	bl	80012e0 <StopWatch_IncTime>
   }
}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	2000051c 	.word	0x2000051c

080012e0 <StopWatch_IncTime>:

void StopWatch_IncTime()
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
   if(stopWatch.msec < 1000-1){
 80012e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001360 <StopWatch_IncTime+0x80>)
 80012e6:	889b      	ldrh	r3, [r3, #4]
 80012e8:	f240 32e6 	movw	r2, #998	@ 0x3e6
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d806      	bhi.n	80012fe <StopWatch_IncTime+0x1e>
      stopWatch.msec++;
 80012f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001360 <StopWatch_IncTime+0x80>)
 80012f2:	889b      	ldrh	r3, [r3, #4]
 80012f4:	3301      	adds	r3, #1
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	4b19      	ldr	r3, [pc, #100]	@ (8001360 <StopWatch_IncTime+0x80>)
 80012fa:	809a      	strh	r2, [r3, #4]
      return;
 80012fc:	e02c      	b.n	8001358 <StopWatch_IncTime+0x78>
   }
   stopWatch.msec = 0;
 80012fe:	4b18      	ldr	r3, [pc, #96]	@ (8001360 <StopWatch_IncTime+0x80>)
 8001300:	2200      	movs	r2, #0
 8001302:	809a      	strh	r2, [r3, #4]

   if (stopWatch.sec < 60-1) {
 8001304:	4b16      	ldr	r3, [pc, #88]	@ (8001360 <StopWatch_IncTime+0x80>)
 8001306:	78db      	ldrb	r3, [r3, #3]
 8001308:	2b3a      	cmp	r3, #58	@ 0x3a
 800130a:	d806      	bhi.n	800131a <StopWatch_IncTime+0x3a>
      stopWatch.sec++;
 800130c:	4b14      	ldr	r3, [pc, #80]	@ (8001360 <StopWatch_IncTime+0x80>)
 800130e:	78db      	ldrb	r3, [r3, #3]
 8001310:	3301      	adds	r3, #1
 8001312:	b2da      	uxtb	r2, r3
 8001314:	4b12      	ldr	r3, [pc, #72]	@ (8001360 <StopWatch_IncTime+0x80>)
 8001316:	70da      	strb	r2, [r3, #3]
      return;
 8001318:	e01e      	b.n	8001358 <StopWatch_IncTime+0x78>
   }
   stopWatch.sec = 0;
 800131a:	4b11      	ldr	r3, [pc, #68]	@ (8001360 <StopWatch_IncTime+0x80>)
 800131c:	2200      	movs	r2, #0
 800131e:	70da      	strb	r2, [r3, #3]

   if (stopWatch.min < 60-1) {
 8001320:	4b0f      	ldr	r3, [pc, #60]	@ (8001360 <StopWatch_IncTime+0x80>)
 8001322:	789b      	ldrb	r3, [r3, #2]
 8001324:	2b3a      	cmp	r3, #58	@ 0x3a
 8001326:	d806      	bhi.n	8001336 <StopWatch_IncTime+0x56>
      stopWatch.min++;
 8001328:	4b0d      	ldr	r3, [pc, #52]	@ (8001360 <StopWatch_IncTime+0x80>)
 800132a:	789b      	ldrb	r3, [r3, #2]
 800132c:	3301      	adds	r3, #1
 800132e:	b2da      	uxtb	r2, r3
 8001330:	4b0b      	ldr	r3, [pc, #44]	@ (8001360 <StopWatch_IncTime+0x80>)
 8001332:	709a      	strb	r2, [r3, #2]
      return;
 8001334:	e010      	b.n	8001358 <StopWatch_IncTime+0x78>
   }
   stopWatch.min = 0;
 8001336:	4b0a      	ldr	r3, [pc, #40]	@ (8001360 <StopWatch_IncTime+0x80>)
 8001338:	2200      	movs	r2, #0
 800133a:	709a      	strb	r2, [r3, #2]

   if (stopWatch.hour < 24-1) {
 800133c:	4b08      	ldr	r3, [pc, #32]	@ (8001360 <StopWatch_IncTime+0x80>)
 800133e:	785b      	ldrb	r3, [r3, #1]
 8001340:	2b16      	cmp	r3, #22
 8001342:	d806      	bhi.n	8001352 <StopWatch_IncTime+0x72>
      stopWatch.hour++;
 8001344:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <StopWatch_IncTime+0x80>)
 8001346:	785b      	ldrb	r3, [r3, #1]
 8001348:	3301      	adds	r3, #1
 800134a:	b2da      	uxtb	r2, r3
 800134c:	4b04      	ldr	r3, [pc, #16]	@ (8001360 <StopWatch_IncTime+0x80>)
 800134e:	705a      	strb	r2, [r3, #1]
      return;
 8001350:	e002      	b.n	8001358 <StopWatch_IncTime+0x78>
   }
   stopWatch.hour = 0;
 8001352:	4b03      	ldr	r3, [pc, #12]	@ (8001360 <StopWatch_IncTime+0x80>)
 8001354:	2200      	movs	r2, #0
 8001356:	705a      	strb	r2, [r3, #1]
}
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	2000000c 	.word	0x2000000c

08001364 <StopWatch_Excute>:

void StopWatch_Excute(button_t* watch)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
   switch (stopWatchState)
 800136c:	4b0e      	ldr	r3, [pc, #56]	@ (80013a8 <StopWatch_Excute+0x44>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b02      	cmp	r3, #2
 8001372:	d00e      	beq.n	8001392 <StopWatch_Excute+0x2e>
 8001374:	2b02      	cmp	r3, #2
 8001376:	dc0f      	bgt.n	8001398 <StopWatch_Excute+0x34>
 8001378:	2b00      	cmp	r3, #0
 800137a:	d002      	beq.n	8001382 <StopWatch_Excute+0x1e>
 800137c:	2b01      	cmp	r3, #1
 800137e:	d004      	beq.n	800138a <StopWatch_Excute+0x26>
 8001380:	e00a      	b.n	8001398 <StopWatch_Excute+0x34>
   {

   case STOP:
      StopWatch_Stop(watch);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 f816 	bl	80013b4 <StopWatch_Stop>
      break;
 8001388:	e006      	b.n	8001398 <StopWatch_Excute+0x34>
   case RUN:
      StopWatch_Run(watch);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 f82e 	bl	80013ec <StopWatch_Run>
      break;
 8001390:	e002      	b.n	8001398 <StopWatch_Excute+0x34>
   case CLEAR:
      StopWatch_Clear();
 8001392:	f000 f83f 	bl	8001414 <StopWatch_Clear>
      break;
 8001396:	bf00      	nop
   }
   enQue(&stopWatchQue, &stopWatch);
 8001398:	4904      	ldr	r1, [pc, #16]	@ (80013ac <StopWatch_Excute+0x48>)
 800139a:	4805      	ldr	r0, [pc, #20]	@ (80013b0 <StopWatch_Excute+0x4c>)
 800139c:	f7ff ff37 	bl	800120e <enQue>
}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	2000051c 	.word	0x2000051c
 80013ac:	2000000c 	.word	0x2000000c
 80013b0:	20000500 	.word	0x20000500

080013b4 <StopWatch_Stop>:

void StopWatch_Stop(button_t* watch)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
   if (watch->id == BTN_RUN_STOP) {
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d103      	bne.n	80013cc <StopWatch_Stop+0x18>
	   //controlData.id = NO_CONTROL;
       stopWatchState = RUN;
 80013c4:	4b08      	ldr	r3, [pc, #32]	@ (80013e8 <StopWatch_Stop+0x34>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	701a      	strb	r2, [r3, #0]
   else if (watch->id == BTN_CLEAR) {
	   //controlData.id = NO_CONTROL;
       stopWatchState = CLEAR;
   }
   //FND_WriteData((stopWatch.min % 10 * 1000) + (stopWatch.sec * 10) + (stopWatch.msec/100));
}
 80013ca:	e006      	b.n	80013da <StopWatch_Stop+0x26>
   else if (watch->id == BTN_CLEAR) {
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b03      	cmp	r3, #3
 80013d2:	d102      	bne.n	80013da <StopWatch_Stop+0x26>
       stopWatchState = CLEAR;
 80013d4:	4b04      	ldr	r3, [pc, #16]	@ (80013e8 <StopWatch_Stop+0x34>)
 80013d6:	2202      	movs	r2, #2
 80013d8:	701a      	strb	r2, [r3, #0]
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	2000051c 	.word	0x2000051c

080013ec <StopWatch_Run>:

void StopWatch_Run(button_t* watch)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	if (watch->id == BTN_RUN_STOP) {
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d102      	bne.n	8001402 <StopWatch_Run+0x16>
	  //controlData.id = NO_CONTROL;
      stopWatchState = STOP;
 80013fc:	4b04      	ldr	r3, [pc, #16]	@ (8001410 <StopWatch_Run+0x24>)
 80013fe:	2200      	movs	r2, #0
 8001400:	701a      	strb	r2, [r3, #0]
   }
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	2000051c 	.word	0x2000051c

08001414 <StopWatch_Clear>:

void StopWatch_Clear()
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
   stopWatchState = STOP;
 8001418:	4b09      	ldr	r3, [pc, #36]	@ (8001440 <StopWatch_Clear+0x2c>)
 800141a:	2200      	movs	r2, #0
 800141c:	701a      	strb	r2, [r3, #0]
   stopWatch.msec = 0;
 800141e:	4b09      	ldr	r3, [pc, #36]	@ (8001444 <StopWatch_Clear+0x30>)
 8001420:	2200      	movs	r2, #0
 8001422:	809a      	strh	r2, [r3, #4]
   stopWatch.sec = 0;
 8001424:	4b07      	ldr	r3, [pc, #28]	@ (8001444 <StopWatch_Clear+0x30>)
 8001426:	2200      	movs	r2, #0
 8001428:	70da      	strb	r2, [r3, #3]
   stopWatch.min = 0;
 800142a:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <StopWatch_Clear+0x30>)
 800142c:	2200      	movs	r2, #0
 800142e:	709a      	strb	r2, [r3, #2]
   stopWatch.hour = 0;
 8001430:	4b04      	ldr	r3, [pc, #16]	@ (8001444 <StopWatch_Clear+0x30>)
 8001432:	2200      	movs	r2, #0
 8001434:	705a      	strb	r2, [r3, #1]
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	2000051c 	.word	0x2000051c
 8001444:	2000000c 	.word	0x2000000c

08001448 <TimeWatch_IncTimeCallBack>:
#include "timeWatch.h"

static watch_t timeWatch = {TIME_WATCH, 12,0,0,0};

void TimeWatch_IncTimeCallBack()
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
   if(timeWatch.msec < 1000-1){
 800144c:	4b1e      	ldr	r3, [pc, #120]	@ (80014c8 <TimeWatch_IncTimeCallBack+0x80>)
 800144e:	889b      	ldrh	r3, [r3, #4]
 8001450:	f240 32e6 	movw	r2, #998	@ 0x3e6
 8001454:	4293      	cmp	r3, r2
 8001456:	d806      	bhi.n	8001466 <TimeWatch_IncTimeCallBack+0x1e>
      timeWatch.msec++;
 8001458:	4b1b      	ldr	r3, [pc, #108]	@ (80014c8 <TimeWatch_IncTimeCallBack+0x80>)
 800145a:	889b      	ldrh	r3, [r3, #4]
 800145c:	3301      	adds	r3, #1
 800145e:	b29a      	uxth	r2, r3
 8001460:	4b19      	ldr	r3, [pc, #100]	@ (80014c8 <TimeWatch_IncTimeCallBack+0x80>)
 8001462:	809a      	strh	r2, [r3, #4]
      return;
 8001464:	e02c      	b.n	80014c0 <TimeWatch_IncTimeCallBack+0x78>
   }
   timeWatch.msec = 0;
 8001466:	4b18      	ldr	r3, [pc, #96]	@ (80014c8 <TimeWatch_IncTimeCallBack+0x80>)
 8001468:	2200      	movs	r2, #0
 800146a:	809a      	strh	r2, [r3, #4]

   if (timeWatch.sec < 60-1) {
 800146c:	4b16      	ldr	r3, [pc, #88]	@ (80014c8 <TimeWatch_IncTimeCallBack+0x80>)
 800146e:	78db      	ldrb	r3, [r3, #3]
 8001470:	2b3a      	cmp	r3, #58	@ 0x3a
 8001472:	d806      	bhi.n	8001482 <TimeWatch_IncTimeCallBack+0x3a>
      timeWatch.sec++;
 8001474:	4b14      	ldr	r3, [pc, #80]	@ (80014c8 <TimeWatch_IncTimeCallBack+0x80>)
 8001476:	78db      	ldrb	r3, [r3, #3]
 8001478:	3301      	adds	r3, #1
 800147a:	b2da      	uxtb	r2, r3
 800147c:	4b12      	ldr	r3, [pc, #72]	@ (80014c8 <TimeWatch_IncTimeCallBack+0x80>)
 800147e:	70da      	strb	r2, [r3, #3]
      return;
 8001480:	e01e      	b.n	80014c0 <TimeWatch_IncTimeCallBack+0x78>
   }
   timeWatch.sec = 0;
 8001482:	4b11      	ldr	r3, [pc, #68]	@ (80014c8 <TimeWatch_IncTimeCallBack+0x80>)
 8001484:	2200      	movs	r2, #0
 8001486:	70da      	strb	r2, [r3, #3]

   if (timeWatch.min < 60-1) {
 8001488:	4b0f      	ldr	r3, [pc, #60]	@ (80014c8 <TimeWatch_IncTimeCallBack+0x80>)
 800148a:	789b      	ldrb	r3, [r3, #2]
 800148c:	2b3a      	cmp	r3, #58	@ 0x3a
 800148e:	d806      	bhi.n	800149e <TimeWatch_IncTimeCallBack+0x56>
      timeWatch.min++;
 8001490:	4b0d      	ldr	r3, [pc, #52]	@ (80014c8 <TimeWatch_IncTimeCallBack+0x80>)
 8001492:	789b      	ldrb	r3, [r3, #2]
 8001494:	3301      	adds	r3, #1
 8001496:	b2da      	uxtb	r2, r3
 8001498:	4b0b      	ldr	r3, [pc, #44]	@ (80014c8 <TimeWatch_IncTimeCallBack+0x80>)
 800149a:	709a      	strb	r2, [r3, #2]
      return;
 800149c:	e010      	b.n	80014c0 <TimeWatch_IncTimeCallBack+0x78>
   }
   timeWatch.min = 0;
 800149e:	4b0a      	ldr	r3, [pc, #40]	@ (80014c8 <TimeWatch_IncTimeCallBack+0x80>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	709a      	strb	r2, [r3, #2]

   if (timeWatch.hour < 24-1) {
 80014a4:	4b08      	ldr	r3, [pc, #32]	@ (80014c8 <TimeWatch_IncTimeCallBack+0x80>)
 80014a6:	785b      	ldrb	r3, [r3, #1]
 80014a8:	2b16      	cmp	r3, #22
 80014aa:	d806      	bhi.n	80014ba <TimeWatch_IncTimeCallBack+0x72>
      timeWatch.hour++;
 80014ac:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <TimeWatch_IncTimeCallBack+0x80>)
 80014ae:	785b      	ldrb	r3, [r3, #1]
 80014b0:	3301      	adds	r3, #1
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	4b04      	ldr	r3, [pc, #16]	@ (80014c8 <TimeWatch_IncTimeCallBack+0x80>)
 80014b6:	705a      	strb	r2, [r3, #1]
      return;
 80014b8:	e002      	b.n	80014c0 <TimeWatch_IncTimeCallBack+0x78>
   }
   timeWatch.hour = 0;
 80014ba:	4b03      	ldr	r3, [pc, #12]	@ (80014c8 <TimeWatch_IncTimeCallBack+0x80>)
 80014bc:	2200      	movs	r2, #0
 80014be:	705a      	strb	r2, [r3, #1]
}
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	20000014 	.word	0x20000014

080014cc <TimeWatch_Excute>:

void TimeWatch_Excute(btnWatch)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]

	enQue(&stopWatchQue, &timeWatch);
 80014d4:	4903      	ldr	r1, [pc, #12]	@ (80014e4 <TimeWatch_Excute+0x18>)
 80014d6:	4804      	ldr	r0, [pc, #16]	@ (80014e8 <TimeWatch_Excute+0x1c>)
 80014d8:	f7ff fe99 	bl	800120e <enQue>

}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000014 	.word	0x20000014
 80014e8:	20000500 	.word	0x20000500

080014ec <Button_Init>:
Button_Handler_t hBtnMode;
Button_Handler_t hBtnRunStop;
Button_Handler_t hBtnClear;

void Button_Init(Button_Handler_t *hbtn, GPIO_TypeDef * GPIOx, uint16_t pinNum)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	4613      	mov	r3, r2
 80014f8:	80fb      	strh	r3, [r7, #6]
   hbtn->GPIOx = GPIOx;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	68ba      	ldr	r2, [r7, #8]
 80014fe:	601a      	str	r2, [r3, #0]
   hbtn->pinNum = pinNum;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	88fa      	ldrh	r2, [r7, #6]
 8001504:	809a      	strh	r2, [r3, #4]
   hbtn->prevState = RELEASED;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2201      	movs	r2, #1
 800150a:	609a      	str	r2, [r3, #8]
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <Button_GetState>:

button_state_t Button_GetState(Button_Handler_t *hbtn)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

   uint32_t curState;
   curState = HAL_GPIO_ReadPin(hbtn->GPIOx, hbtn->pinNum);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	889b      	ldrh	r3, [r3, #4]
 8001528:	4619      	mov	r1, r3
 800152a:	4610      	mov	r0, r2
 800152c:	f000 fdce 	bl	80020cc <HAL_GPIO_ReadPin>
 8001530:	4603      	mov	r3, r0
 8001532:	60fb      	str	r3, [r7, #12]

   if ((hbtn->prevState == RELEASED) && (curState == PUSHED)) { // button released -> pushed
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d10a      	bne.n	8001552 <Button_GetState+0x3a>
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d107      	bne.n	8001552 <Button_GetState+0x3a>
      HAL_Delay(2); // debounce
 8001542:	2002      	movs	r0, #2
 8001544:	f000 fb38 	bl	8001bb8 <HAL_Delay>
      hbtn->prevState = PUSHED;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
      return ACT_PUSHED;
 800154e:	2301      	movs	r3, #1
 8001550:	e00f      	b.n	8001572 <Button_GetState+0x5a>
   }
   else if ((hbtn->prevState == PUSHED) && (curState == RELEASED)) { // button pushed -> released
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d10a      	bne.n	8001570 <Button_GetState+0x58>
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d107      	bne.n	8001570 <Button_GetState+0x58>
      HAL_Delay(2); // debounce
 8001560:	2002      	movs	r0, #2
 8001562:	f000 fb29 	bl	8001bb8 <HAL_Delay>
      hbtn->prevState = RELEASED;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2201      	movs	r2, #1
 800156a:	609a      	str	r2, [r3, #8]
      return ACT_RELEASED;
 800156c:	2302      	movs	r3, #2
 800156e:	e000      	b.n	8001572 <Button_GetState+0x5a>
   }
   return NO_ACT;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <FND_WriteDp>:




void FND_WriteDp(uint8_t dpData, uint8_t dpState)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	460a      	mov	r2, r1
 8001586:	71fb      	strb	r3, [r7, #7]
 8001588:	4613      	mov	r3, r2
 800158a:	71bb      	strb	r3, [r7, #6]
   if(dpState == FND_DP_ON)
 800158c:	79bb      	ldrb	r3, [r7, #6]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d107      	bne.n	80015a2 <FND_WriteDp+0x26>
      fndDispDp |= dpData;
 8001592:	4b0e      	ldr	r3, [pc, #56]	@ (80015cc <FND_WriteDp+0x50>)
 8001594:	781a      	ldrb	r2, [r3, #0]
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	4313      	orrs	r3, r2
 800159a:	b2da      	uxtb	r2, r3
 800159c:	4b0b      	ldr	r3, [pc, #44]	@ (80015cc <FND_WriteDp+0x50>)
 800159e:	701a      	strb	r2, [r3, #0]
   else if(dpState == FND_DP_OFF)
      fndDispDp &= ~dpData;
}
 80015a0:	e00e      	b.n	80015c0 <FND_WriteDp+0x44>
   else if(dpState == FND_DP_OFF)
 80015a2:	79bb      	ldrb	r3, [r7, #6]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d10b      	bne.n	80015c0 <FND_WriteDp+0x44>
      fndDispDp &= ~dpData;
 80015a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ac:	43db      	mvns	r3, r3
 80015ae:	b25a      	sxtb	r2, r3
 80015b0:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <FND_WriteDp+0x50>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	b25b      	sxtb	r3, r3
 80015b6:	4013      	ands	r3, r2
 80015b8:	b25b      	sxtb	r3, r3
 80015ba:	b2da      	uxtb	r2, r3
 80015bc:	4b03      	ldr	r3, [pc, #12]	@ (80015cc <FND_WriteDp+0x50>)
 80015be:	701a      	strb	r2, [r3, #0]
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	20000546 	.word	0x20000546

080015d0 <FND_WriteData>:

// write fndDispNum
void FND_WriteData(uint16_t data)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	80fb      	strh	r3, [r7, #6]
   fndDispNum = data;
 80015da:	4a04      	ldr	r2, [pc, #16]	@ (80015ec <FND_WriteData+0x1c>)
 80015dc:	88fb      	ldrh	r3, [r7, #6]
 80015de:	8013      	strh	r3, [r2, #0]
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	20000544 	.word	0x20000544

080015f0 <FND_DispDataCallBack>:
{
   return fndDispNum;
}
// display fndDispNum
void FND_DispDataCallBack()
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
   static int digitPos = 0;
   // 인터럽트가 발생하면 한 자리씩 출력한다.
   FND_DispOffAll();
 80015f4:	f000 f956 	bl	80018a4 <FND_DispOffAll>
   digitPos = (digitPos+1) % 8; // 4에서 8로 변경 0부터 7찍을 수 있게.
 80015f8:	4b8c      	ldr	r3, [pc, #560]	@ (800182c <FND_DispDataCallBack+0x23c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	3301      	adds	r3, #1
 80015fe:	425a      	negs	r2, r3
 8001600:	f003 0307 	and.w	r3, r3, #7
 8001604:	f002 0207 	and.w	r2, r2, #7
 8001608:	bf58      	it	pl
 800160a:	4253      	negpl	r3, r2
 800160c:	4a87      	ldr	r2, [pc, #540]	@ (800182c <FND_DispDataCallBack+0x23c>)
 800160e:	6013      	str	r3, [r2, #0]
   switch(digitPos)      // 1ms마다 각 자리를 찍는다?
 8001610:	4b86      	ldr	r3, [pc, #536]	@ (800182c <FND_DispDataCallBack+0x23c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b07      	cmp	r3, #7
 8001616:	f200 8106 	bhi.w	8001826 <FND_DispDataCallBack+0x236>
 800161a:	a201      	add	r2, pc, #4	@ (adr r2, 8001620 <FND_DispDataCallBack+0x30>)
 800161c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001620:	08001641 	.word	0x08001641
 8001624:	08001675 	.word	0x08001675
 8001628:	080016b3 	.word	0x080016b3
 800162c:	080016f1 	.word	0x080016f1
 8001630:	0800172f 	.word	0x0800172f
 8001634:	0800176d 	.word	0x0800176d
 8001638:	080017ab 	.word	0x080017ab
 800163c:	080017e9 	.word	0x080017e9
   {
   case DIGIT_1:
      FND_DispOff(digitPos);
 8001640:	4b7a      	ldr	r3, [pc, #488]	@ (800182c <FND_DispDataCallBack+0x23c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f000 f8fd 	bl	8001844 <FND_DispOff>
      FND_DispDigit(fndDispNum%10);
 800164a:	4b79      	ldr	r3, [pc, #484]	@ (8001830 <FND_DispDataCallBack+0x240>)
 800164c:	881a      	ldrh	r2, [r3, #0]
 800164e:	4b79      	ldr	r3, [pc, #484]	@ (8001834 <FND_DispDataCallBack+0x244>)
 8001650:	fba3 1302 	umull	r1, r3, r3, r2
 8001654:	08d9      	lsrs	r1, r3, #3
 8001656:	460b      	mov	r3, r1
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	440b      	add	r3, r1
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	b29b      	uxth	r3, r3
 8001662:	4618      	mov	r0, r3
 8001664:	f000 f940 	bl	80018e8 <FND_DispDigit>
      FND_DispOn(digitPos);
 8001668:	4b70      	ldr	r3, [pc, #448]	@ (800182c <FND_DispDataCallBack+0x23c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f000 f901 	bl	8001874 <FND_DispOn>
      break;
 8001672:	e0d8      	b.n	8001826 <FND_DispDataCallBack+0x236>
   case DIGIT_10:
      FND_DispOff(digitPos);
 8001674:	4b6d      	ldr	r3, [pc, #436]	@ (800182c <FND_DispDataCallBack+0x23c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f000 f8e3 	bl	8001844 <FND_DispOff>
      FND_DispDigit(fndDispNum/10%10);
 800167e:	4b6c      	ldr	r3, [pc, #432]	@ (8001830 <FND_DispDataCallBack+0x240>)
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	4a6c      	ldr	r2, [pc, #432]	@ (8001834 <FND_DispDataCallBack+0x244>)
 8001684:	fba2 2303 	umull	r2, r3, r2, r3
 8001688:	08db      	lsrs	r3, r3, #3
 800168a:	b29a      	uxth	r2, r3
 800168c:	4b69      	ldr	r3, [pc, #420]	@ (8001834 <FND_DispDataCallBack+0x244>)
 800168e:	fba3 1302 	umull	r1, r3, r3, r2
 8001692:	08d9      	lsrs	r1, r3, #3
 8001694:	460b      	mov	r3, r1
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	440b      	add	r3, r1
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	b29b      	uxth	r3, r3
 80016a0:	4618      	mov	r0, r3
 80016a2:	f000 f921 	bl	80018e8 <FND_DispDigit>
      FND_DispOn(digitPos);
 80016a6:	4b61      	ldr	r3, [pc, #388]	@ (800182c <FND_DispDataCallBack+0x23c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 f8e2 	bl	8001874 <FND_DispOn>
      break;
 80016b0:	e0b9      	b.n	8001826 <FND_DispDataCallBack+0x236>
   case DIGIT_100:
      FND_DispOff(digitPos);
 80016b2:	4b5e      	ldr	r3, [pc, #376]	@ (800182c <FND_DispDataCallBack+0x23c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 f8c4 	bl	8001844 <FND_DispOff>
      FND_DispDigit(fndDispNum/100%10);
 80016bc:	4b5c      	ldr	r3, [pc, #368]	@ (8001830 <FND_DispDataCallBack+0x240>)
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	4a5d      	ldr	r2, [pc, #372]	@ (8001838 <FND_DispDataCallBack+0x248>)
 80016c2:	fba2 2303 	umull	r2, r3, r2, r3
 80016c6:	095b      	lsrs	r3, r3, #5
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	4b5a      	ldr	r3, [pc, #360]	@ (8001834 <FND_DispDataCallBack+0x244>)
 80016cc:	fba3 1302 	umull	r1, r3, r3, r2
 80016d0:	08d9      	lsrs	r1, r3, #3
 80016d2:	460b      	mov	r3, r1
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	440b      	add	r3, r1
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	b29b      	uxth	r3, r3
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 f902 	bl	80018e8 <FND_DispDigit>
      FND_DispOn(digitPos);
 80016e4:	4b51      	ldr	r3, [pc, #324]	@ (800182c <FND_DispDataCallBack+0x23c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f000 f8c3 	bl	8001874 <FND_DispOn>
      break;
 80016ee:	e09a      	b.n	8001826 <FND_DispDataCallBack+0x236>
   case DIGIT_1000:
      FND_DispOff(digitPos);
 80016f0:	4b4e      	ldr	r3, [pc, #312]	@ (800182c <FND_DispDataCallBack+0x23c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f000 f8a5 	bl	8001844 <FND_DispOff>
      FND_DispDigit(fndDispNum/1000%10);
 80016fa:	4b4d      	ldr	r3, [pc, #308]	@ (8001830 <FND_DispDataCallBack+0x240>)
 80016fc:	881b      	ldrh	r3, [r3, #0]
 80016fe:	4a4f      	ldr	r2, [pc, #316]	@ (800183c <FND_DispDataCallBack+0x24c>)
 8001700:	fba2 2303 	umull	r2, r3, r2, r3
 8001704:	099b      	lsrs	r3, r3, #6
 8001706:	b29a      	uxth	r2, r3
 8001708:	4b4a      	ldr	r3, [pc, #296]	@ (8001834 <FND_DispDataCallBack+0x244>)
 800170a:	fba3 1302 	umull	r1, r3, r3, r2
 800170e:	08d9      	lsrs	r1, r3, #3
 8001710:	460b      	mov	r3, r1
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	440b      	add	r3, r1
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	b29b      	uxth	r3, r3
 800171c:	4618      	mov	r0, r3
 800171e:	f000 f8e3 	bl	80018e8 <FND_DispDigit>
      FND_DispOn(digitPos);
 8001722:	4b42      	ldr	r3, [pc, #264]	@ (800182c <FND_DispDataCallBack+0x23c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f000 f8a4 	bl	8001874 <FND_DispOn>
      break;
 800172c:	e07b      	b.n	8001826 <FND_DispDataCallBack+0x236>
   case DIGIT_DP_1:
      FND_DispOff(digitPos);
 800172e:	4b3f      	ldr	r3, [pc, #252]	@ (800182c <FND_DispDataCallBack+0x23c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f000 f886 	bl	8001844 <FND_DispOff>
      if( fndDispDp & (1<<0)) {
 8001738:	4b41      	ldr	r3, [pc, #260]	@ (8001840 <FND_DispDataCallBack+0x250>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	2b00      	cmp	r3, #0
 8001742:	d003      	beq.n	800174c <FND_DispDataCallBack+0x15c>
         FND_DispDigit(10);
 8001744:	200a      	movs	r0, #10
 8001746:	f000 f8cf 	bl	80018e8 <FND_DispDigit>
 800174a:	e002      	b.n	8001752 <FND_DispDataCallBack+0x162>
      }
      else {
         FND_DispDigit(11);
 800174c:	200b      	movs	r0, #11
 800174e:	f000 f8cb 	bl	80018e8 <FND_DispDigit>
      }
      FND_DispOn(digitPos%4);
 8001752:	4b36      	ldr	r3, [pc, #216]	@ (800182c <FND_DispDataCallBack+0x23c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	425a      	negs	r2, r3
 8001758:	f003 0303 	and.w	r3, r3, #3
 800175c:	f002 0203 	and.w	r2, r2, #3
 8001760:	bf58      	it	pl
 8001762:	4253      	negpl	r3, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f000 f885 	bl	8001874 <FND_DispOn>
      break;
 800176a:	e05c      	b.n	8001826 <FND_DispDataCallBack+0x236>
   case DIGIT_DP_10:
      FND_DispOff(digitPos);
 800176c:	4b2f      	ldr	r3, [pc, #188]	@ (800182c <FND_DispDataCallBack+0x23c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f000 f867 	bl	8001844 <FND_DispOff>
      if( fndDispDp & (1<<1)) {
 8001776:	4b32      	ldr	r3, [pc, #200]	@ (8001840 <FND_DispDataCallBack+0x250>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <FND_DispDataCallBack+0x19a>
         FND_DispDigit(10);
 8001782:	200a      	movs	r0, #10
 8001784:	f000 f8b0 	bl	80018e8 <FND_DispDigit>
 8001788:	e002      	b.n	8001790 <FND_DispDataCallBack+0x1a0>
      }
      else {
         FND_DispDigit(11);
 800178a:	200b      	movs	r0, #11
 800178c:	f000 f8ac 	bl	80018e8 <FND_DispDigit>
      }
      FND_DispOn(digitPos%4);
 8001790:	4b26      	ldr	r3, [pc, #152]	@ (800182c <FND_DispDataCallBack+0x23c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	425a      	negs	r2, r3
 8001796:	f003 0303 	and.w	r3, r3, #3
 800179a:	f002 0203 	and.w	r2, r2, #3
 800179e:	bf58      	it	pl
 80017a0:	4253      	negpl	r3, r2
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 f866 	bl	8001874 <FND_DispOn>
      break;
 80017a8:	e03d      	b.n	8001826 <FND_DispDataCallBack+0x236>
   case DIGIT_DP_100:
      FND_DispOff(digitPos);
 80017aa:	4b20      	ldr	r3, [pc, #128]	@ (800182c <FND_DispDataCallBack+0x23c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f000 f848 	bl	8001844 <FND_DispOff>
      if( fndDispDp & (1<<2)) {
 80017b4:	4b22      	ldr	r3, [pc, #136]	@ (8001840 <FND_DispDataCallBack+0x250>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d003      	beq.n	80017c8 <FND_DispDataCallBack+0x1d8>
         FND_DispDigit(10);
 80017c0:	200a      	movs	r0, #10
 80017c2:	f000 f891 	bl	80018e8 <FND_DispDigit>
 80017c6:	e002      	b.n	80017ce <FND_DispDataCallBack+0x1de>
      }
      else {
         FND_DispDigit(11);
 80017c8:	200b      	movs	r0, #11
 80017ca:	f000 f88d 	bl	80018e8 <FND_DispDigit>
      }
      FND_DispOn(digitPos%4);
 80017ce:	4b17      	ldr	r3, [pc, #92]	@ (800182c <FND_DispDataCallBack+0x23c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	425a      	negs	r2, r3
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	f002 0203 	and.w	r2, r2, #3
 80017dc:	bf58      	it	pl
 80017de:	4253      	negpl	r3, r2
 80017e0:	4618      	mov	r0, r3
 80017e2:	f000 f847 	bl	8001874 <FND_DispOn>
      break;
 80017e6:	e01e      	b.n	8001826 <FND_DispDataCallBack+0x236>
   case DIGIT_DP_1000:
      FND_DispOff(digitPos);
 80017e8:	4b10      	ldr	r3, [pc, #64]	@ (800182c <FND_DispDataCallBack+0x23c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f000 f829 	bl	8001844 <FND_DispOff>
      if( fndDispDp & (1<<3)) {
 80017f2:	4b13      	ldr	r3, [pc, #76]	@ (8001840 <FND_DispDataCallBack+0x250>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	f003 0308 	and.w	r3, r3, #8
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <FND_DispDataCallBack+0x216>
         FND_DispDigit(10);
 80017fe:	200a      	movs	r0, #10
 8001800:	f000 f872 	bl	80018e8 <FND_DispDigit>
 8001804:	e002      	b.n	800180c <FND_DispDataCallBack+0x21c>
      }
      else {
         FND_DispDigit(11);
 8001806:	200b      	movs	r0, #11
 8001808:	f000 f86e 	bl	80018e8 <FND_DispDigit>
      }
      FND_DispOn(digitPos%4);
 800180c:	4b07      	ldr	r3, [pc, #28]	@ (800182c <FND_DispDataCallBack+0x23c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	425a      	negs	r2, r3
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	f002 0203 	and.w	r2, r2, #3
 800181a:	bf58      	it	pl
 800181c:	4253      	negpl	r3, r2
 800181e:	4618      	mov	r0, r3
 8001820:	f000 f828 	bl	8001874 <FND_DispOn>
      break;
 8001824:	bf00      	nop

   }
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000548 	.word	0x20000548
 8001830:	20000544 	.word	0x20000544
 8001834:	cccccccd 	.word	0xcccccccd
 8001838:	51eb851f 	.word	0x51eb851f
 800183c:	10624dd3 	.word	0x10624dd3
 8001840:	20000546 	.word	0x20000546

08001844 <FND_DispOff>:


void FND_DispOff(int fndPos)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
   // GPIO_Write(GPIOx, PIn, SET);
   HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, SET);
 800184c:	4a08      	ldr	r2, [pc, #32]	@ (8001870 <FND_DispOff+0x2c>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001854:	4a06      	ldr	r2, [pc, #24]	@ (8001870 <FND_DispOff+0x2c>)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	4413      	add	r3, r2
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	b29b      	uxth	r3, r3
 8001860:	2201      	movs	r2, #1
 8001862:	4619      	mov	r1, r3
 8001864:	f000 fc4a 	bl	80020fc <HAL_GPIO_WritePin>
}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	2000001c 	.word	0x2000001c

08001874 <FND_DispOn>:
void FND_DispOn(int fndPos)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
   // GPIO_Write(GPIOx, Pin, RESET);
   HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, RESET);
 800187c:	4a08      	ldr	r2, [pc, #32]	@ (80018a0 <FND_DispOn+0x2c>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001884:	4a06      	ldr	r2, [pc, #24]	@ (80018a0 <FND_DispOn+0x2c>)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	4413      	add	r3, r2
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	b29b      	uxth	r3, r3
 8001890:	2200      	movs	r2, #0
 8001892:	4619      	mov	r1, r3
 8001894:	f000 fc32 	bl	80020fc <HAL_GPIO_WritePin>
}
 8001898:	bf00      	nop
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	2000001c 	.word	0x2000001c

080018a4 <FND_DispOffAll>:
void FND_DispOffAll()
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
   for(int i = 0;i<4;i++){
 80018aa:	2300      	movs	r3, #0
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	e010      	b.n	80018d2 <FND_DispOffAll+0x2e>
      HAL_GPIO_WritePin(fndDigitCom[i].GPIOx, fndDigitCom[i].pinNum, SET);
 80018b0:	4a0c      	ldr	r2, [pc, #48]	@ (80018e4 <FND_DispOffAll+0x40>)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80018b8:	4a0a      	ldr	r2, [pc, #40]	@ (80018e4 <FND_DispOffAll+0x40>)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	4413      	add	r3, r2
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	2201      	movs	r2, #1
 80018c6:	4619      	mov	r1, r3
 80018c8:	f000 fc18 	bl	80020fc <HAL_GPIO_WritePin>
   for(int i = 0;i<4;i++){
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3301      	adds	r3, #1
 80018d0:	607b      	str	r3, [r7, #4]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2b03      	cmp	r3, #3
 80018d6:	ddeb      	ble.n	80018b0 <FND_DispOffAll+0xc>
   }
}
 80018d8:	bf00      	nop
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	2000001c 	.word	0x2000001c

080018e8 <FND_DispDigit>:

void FND_DispDigit(uint16_t digit)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	80fb      	strh	r3, [r7, #6]
   const uint8_t segFont[12] = {
 80018f2:	4a1f      	ldr	r2, [pc, #124]	@ (8001970 <FND_DispDigit+0x88>)
 80018f4:	f107 0308 	add.w	r3, r7, #8
 80018f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80018fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
         0x6F,  // 9 => 01101111
         0x80,  // 10(dp) => 1000000
       0x00,  // 11(off) => 0000000
      };

   for (int i = 0; i<8;i++){
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	e02c      	b.n	800195e <FND_DispDigit+0x76>
      if(!(segFont[digit] & (1<<i))){
 8001904:	88fb      	ldrh	r3, [r7, #6]
 8001906:	3318      	adds	r3, #24
 8001908:	443b      	add	r3, r7
 800190a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800190e:	461a      	mov	r2, r3
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	fa42 f303 	asr.w	r3, r2, r3
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	d10e      	bne.n	800193c <FND_DispDigit+0x54>
         HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, RESET);
 800191e:	4a15      	ldr	r2, [pc, #84]	@ (8001974 <FND_DispDigit+0x8c>)
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001926:	4a13      	ldr	r2, [pc, #76]	@ (8001974 <FND_DispDigit+0x8c>)
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	4413      	add	r3, r2
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	b29b      	uxth	r3, r3
 8001932:	2200      	movs	r2, #0
 8001934:	4619      	mov	r1, r3
 8001936:	f000 fbe1 	bl	80020fc <HAL_GPIO_WritePin>
 800193a:	e00d      	b.n	8001958 <FND_DispDigit+0x70>
      }
      else {
         HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, SET);
 800193c:	4a0d      	ldr	r2, [pc, #52]	@ (8001974 <FND_DispDigit+0x8c>)
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001944:	4a0b      	ldr	r2, [pc, #44]	@ (8001974 <FND_DispDigit+0x8c>)
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	4413      	add	r3, r2
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	b29b      	uxth	r3, r3
 8001950:	2201      	movs	r2, #1
 8001952:	4619      	mov	r1, r3
 8001954:	f000 fbd2 	bl	80020fc <HAL_GPIO_WritePin>
   for (int i = 0; i<8;i++){
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	3301      	adds	r3, #1
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	2b07      	cmp	r3, #7
 8001962:	ddcf      	ble.n	8001904 <FND_DispDigit+0x1c>
      }
   }
}
 8001964:	bf00      	nop
 8001966:	bf00      	nop
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	08005b28 	.word	0x08005b28
 8001974:	2000003c 	.word	0x2000003c

08001978 <LCD_Init>:

static uint8_t lcdData = 0;
static I2C_HandleTypeDef *hLcdI2C;

void LCD_Init(I2C_HandleTypeDef *hI2C)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
	hLcdI2C = hI2C;
 8001980:	4a18      	ldr	r2, [pc, #96]	@ (80019e4 <LCD_Init+0x6c>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6013      	str	r3, [r2, #0]
	HAL_Delay(50);
 8001986:	2032      	movs	r0, #50	@ 0x32
 8001988:	f000 f916 	bl	8001bb8 <HAL_Delay>
	LCD_cmdMode();
 800198c:	f000 f852 	bl	8001a34 <LCD_cmdMode>
	LCD_writeMode();
 8001990:	f000 f862 	bl	8001a58 <LCD_writeMode>
	LCD_sendNibbleData(0x30);
 8001994:	2030      	movs	r0, #48	@ 0x30
 8001996:	f000 f895 	bl	8001ac4 <LCD_sendNibbleData>
	HAL_Delay(5);
 800199a:	2005      	movs	r0, #5
 800199c:	f000 f90c 	bl	8001bb8 <HAL_Delay>
	LCD_sendNibbleData(0x30);
 80019a0:	2030      	movs	r0, #48	@ 0x30
 80019a2:	f000 f88f 	bl	8001ac4 <LCD_sendNibbleData>
	HAL_Delay(1);
 80019a6:	2001      	movs	r0, #1
 80019a8:	f000 f906 	bl	8001bb8 <HAL_Delay>
	LCD_sendNibbleData(0x30);
 80019ac:	2030      	movs	r0, #48	@ 0x30
 80019ae:	f000 f889 	bl	8001ac4 <LCD_sendNibbleData>
	LCD_sendNibbleData(0x20);
 80019b2:	2020      	movs	r0, #32
 80019b4:	f000 f886 	bl	8001ac4 <LCD_sendNibbleData>
	LCD_sendData(LCD_4BIT_FUNC_SET);
 80019b8:	2028      	movs	r0, #40	@ 0x28
 80019ba:	f000 f8a7 	bl	8001b0c <LCD_sendData>
	LCD_sendData(LCD_DISP_OFF);
 80019be:	2008      	movs	r0, #8
 80019c0:	f000 f8a4 	bl	8001b0c <LCD_sendData>
	LCD_sendData(LCD_DISP_CLEAR);
 80019c4:	2001      	movs	r0, #1
 80019c6:	f000 f8a1 	bl	8001b0c <LCD_sendData>
	LCD_sendData(LCD_ENTRY_MODE_SET);
 80019ca:	2006      	movs	r0, #6
 80019cc:	f000 f89e 	bl	8001b0c <LCD_sendData>
	LCD_sendData(LCD_DISP_ON);
 80019d0:	200c      	movs	r0, #12
 80019d2:	f000 f89b 	bl	8001b0c <LCD_sendData>
	LCD_backLightOn();
 80019d6:	f000 f81d 	bl	8001a14 <LCD_backLightOn>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000550 	.word	0x20000550

080019e8 <LCD_sendI2C>:

void LCD_sendI2C(uint8_t data)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af02      	add	r7, sp, #8
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(hLcdI2C, LCD_DEV_ADDR<<1, &data, 1, 1000);
 80019f2:	4b07      	ldr	r3, [pc, #28]	@ (8001a10 <LCD_sendI2C+0x28>)
 80019f4:	6818      	ldr	r0, [r3, #0]
 80019f6:	1dfa      	adds	r2, r7, #7
 80019f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	2301      	movs	r3, #1
 8001a00:	214e      	movs	r1, #78	@ 0x4e
 8001a02:	f000 fcd9 	bl	80023b8 <HAL_I2C_Master_Transmit>
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000550 	.word	0x20000550

08001a14 <LCD_backLightOn>:

void LCD_backLightOn()
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_BL);
 8001a18:	4b05      	ldr	r3, [pc, #20]	@ (8001a30 <LCD_backLightOn+0x1c>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	f043 0308 	orr.w	r3, r3, #8
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	4b03      	ldr	r3, [pc, #12]	@ (8001a30 <LCD_backLightOn+0x1c>)
 8001a24:	701a      	strb	r2, [r3, #0]
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	2000054c 	.word	0x2000054c

08001a34 <LCD_cmdMode>:
{
	lcdData &= ~(1<<LCD_BL);
}

void LCD_cmdMode()
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RS);
 8001a38:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <LCD_cmdMode+0x20>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	f023 0301 	bic.w	r3, r3, #1
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	4b04      	ldr	r3, [pc, #16]	@ (8001a54 <LCD_cmdMode+0x20>)
 8001a44:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001a46:	4b03      	ldr	r3, [pc, #12]	@ (8001a54 <LCD_cmdMode+0x20>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff ffcc 	bl	80019e8 <LCD_sendI2C>
}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	2000054c 	.word	0x2000054c

08001a58 <LCD_writeMode>:
	lcdData |= (1<<LCD_RS);
	LCD_sendI2C(lcdData);
}

void LCD_writeMode()
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RW);
 8001a5c:	4b06      	ldr	r3, [pc, #24]	@ (8001a78 <LCD_writeMode+0x20>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	f023 0302 	bic.w	r3, r3, #2
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4b04      	ldr	r3, [pc, #16]	@ (8001a78 <LCD_writeMode+0x20>)
 8001a68:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001a6a:	4b03      	ldr	r3, [pc, #12]	@ (8001a78 <LCD_writeMode+0x20>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff ffba 	bl	80019e8 <LCD_sendI2C>
}
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	2000054c 	.word	0x2000054c

08001a7c <LCD_E_High>:

void LCD_E_High()
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_E);
 8001a80:	4b06      	ldr	r3, [pc, #24]	@ (8001a9c <LCD_E_High+0x20>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	f043 0304 	orr.w	r3, r3, #4
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	4b04      	ldr	r3, [pc, #16]	@ (8001a9c <LCD_E_High+0x20>)
 8001a8c:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001a8e:	4b03      	ldr	r3, [pc, #12]	@ (8001a9c <LCD_E_High+0x20>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff ffa8 	bl	80019e8 <LCD_sendI2C>
}
 8001a98:	bf00      	nop
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	2000054c 	.word	0x2000054c

08001aa0 <LCD_E_Low>:

void LCD_E_Low()
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_E);
 8001aa4:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <LCD_E_Low+0x20>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	f023 0304 	bic.w	r3, r3, #4
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4b04      	ldr	r3, [pc, #16]	@ (8001ac0 <LCD_E_Low+0x20>)
 8001ab0:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001ab2:	4b03      	ldr	r3, [pc, #12]	@ (8001ac0 <LCD_E_Low+0x20>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff ff96 	bl	80019e8 <LCD_sendI2C>
}
 8001abc:	bf00      	nop
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	2000054c 	.word	0x2000054c

08001ac4 <LCD_sendNibbleData>:

void LCD_sendNibbleData(uint8_t data)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	71fb      	strb	r3, [r7, #7]
	LCD_E_High();
 8001ace:	f7ff ffd5 	bl	8001a7c <LCD_E_High>
	lcdData = (data & 0xf0) | (lcdData & 0x0f);
 8001ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad6:	f023 030f 	bic.w	r3, r3, #15
 8001ada:	b25a      	sxtb	r2, r3
 8001adc:	4b0a      	ldr	r3, [pc, #40]	@ (8001b08 <LCD_sendNibbleData+0x44>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	b25b      	sxtb	r3, r3
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	b25b      	sxtb	r3, r3
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	b25b      	sxtb	r3, r3
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	4b06      	ldr	r3, [pc, #24]	@ (8001b08 <LCD_sendNibbleData+0x44>)
 8001af0:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001af2:	4b05      	ldr	r3, [pc, #20]	@ (8001b08 <LCD_sendNibbleData+0x44>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff ff76 	bl	80019e8 <LCD_sendI2C>
	LCD_E_Low();
 8001afc:	f7ff ffd0 	bl	8001aa0 <LCD_E_Low>
}
 8001b00:	bf00      	nop
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	2000054c 	.word	0x2000054c

08001b0c <LCD_sendData>:

void LCD_sendData(uint8_t data)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	71fb      	strb	r3, [r7, #7]
	// High 4bit
	LCD_sendNibbleData(data);
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ffd3 	bl	8001ac4 <LCD_sendNibbleData>

	data = data << 4;
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	011b      	lsls	r3, r3, #4
 8001b22:	71fb      	strb	r3, [r7, #7]
	// Low 4bit
	LCD_sendNibbleData(data);
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff ffcc 	bl	8001ac4 <LCD_sendNibbleData>
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b38:	4b0e      	ldr	r3, [pc, #56]	@ (8001b74 <HAL_Init+0x40>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b74 <HAL_Init+0x40>)
 8001b3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b44:	4b0b      	ldr	r3, [pc, #44]	@ (8001b74 <HAL_Init+0x40>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0a      	ldr	r2, [pc, #40]	@ (8001b74 <HAL_Init+0x40>)
 8001b4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b50:	4b08      	ldr	r3, [pc, #32]	@ (8001b74 <HAL_Init+0x40>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a07      	ldr	r2, [pc, #28]	@ (8001b74 <HAL_Init+0x40>)
 8001b56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b5c:	2003      	movs	r0, #3
 8001b5e:	f000 f8fc 	bl	8001d5a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b62:	200f      	movs	r0, #15
 8001b64:	f7fe ff68 	bl	8000a38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b68:	f7fe ff3a 	bl	80009e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40023c00 	.word	0x40023c00

08001b78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b7c:	4b06      	ldr	r3, [pc, #24]	@ (8001b98 <HAL_IncTick+0x20>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	461a      	mov	r2, r3
 8001b82:	4b06      	ldr	r3, [pc, #24]	@ (8001b9c <HAL_IncTick+0x24>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4413      	add	r3, r2
 8001b88:	4a04      	ldr	r2, [pc, #16]	@ (8001b9c <HAL_IncTick+0x24>)
 8001b8a:	6013      	str	r3, [r2, #0]
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	20000080 	.word	0x20000080
 8001b9c:	20000554 	.word	0x20000554

08001ba0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba4:	4b03      	ldr	r3, [pc, #12]	@ (8001bb4 <HAL_GetTick+0x14>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	20000554 	.word	0x20000554

08001bb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bc0:	f7ff ffee 	bl	8001ba0 <HAL_GetTick>
 8001bc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd0:	d005      	beq.n	8001bde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bfc <HAL_Delay+0x44>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4413      	add	r3, r2
 8001bdc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bde:	bf00      	nop
 8001be0:	f7ff ffde 	bl	8001ba0 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d8f7      	bhi.n	8001be0 <HAL_Delay+0x28>
  {
  }
}
 8001bf0:	bf00      	nop
 8001bf2:	bf00      	nop
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000080 	.word	0x20000080

08001c00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c10:	4b0c      	ldr	r3, [pc, #48]	@ (8001c44 <__NVIC_SetPriorityGrouping+0x44>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c32:	4a04      	ldr	r2, [pc, #16]	@ (8001c44 <__NVIC_SetPriorityGrouping+0x44>)
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	60d3      	str	r3, [r2, #12]
}
 8001c38:	bf00      	nop
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c4c:	4b04      	ldr	r3, [pc, #16]	@ (8001c60 <__NVIC_GetPriorityGrouping+0x18>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	0a1b      	lsrs	r3, r3, #8
 8001c52:	f003 0307 	and.w	r3, r3, #7
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	db0b      	blt.n	8001c8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	f003 021f 	and.w	r2, r3, #31
 8001c7c:	4907      	ldr	r1, [pc, #28]	@ (8001c9c <__NVIC_EnableIRQ+0x38>)
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	095b      	lsrs	r3, r3, #5
 8001c84:	2001      	movs	r0, #1
 8001c86:	fa00 f202 	lsl.w	r2, r0, r2
 8001c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	e000e100 	.word	0xe000e100

08001ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	6039      	str	r1, [r7, #0]
 8001caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	db0a      	blt.n	8001cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	490c      	ldr	r1, [pc, #48]	@ (8001cec <__NVIC_SetPriority+0x4c>)
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	0112      	lsls	r2, r2, #4
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	440b      	add	r3, r1
 8001cc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cc8:	e00a      	b.n	8001ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	4908      	ldr	r1, [pc, #32]	@ (8001cf0 <__NVIC_SetPriority+0x50>)
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	3b04      	subs	r3, #4
 8001cd8:	0112      	lsls	r2, r2, #4
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	440b      	add	r3, r1
 8001cde:	761a      	strb	r2, [r3, #24]
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	e000e100 	.word	0xe000e100
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b089      	sub	sp, #36	@ 0x24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f1c3 0307 	rsb	r3, r3, #7
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	bf28      	it	cs
 8001d12:	2304      	movcs	r3, #4
 8001d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	3304      	adds	r3, #4
 8001d1a:	2b06      	cmp	r3, #6
 8001d1c:	d902      	bls.n	8001d24 <NVIC_EncodePriority+0x30>
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	3b03      	subs	r3, #3
 8001d22:	e000      	b.n	8001d26 <NVIC_EncodePriority+0x32>
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d28:	f04f 32ff 	mov.w	r2, #4294967295
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43da      	mvns	r2, r3
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	401a      	ands	r2, r3
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	fa01 f303 	lsl.w	r3, r1, r3
 8001d46:	43d9      	mvns	r1, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d4c:	4313      	orrs	r3, r2
         );
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3724      	adds	r7, #36	@ 0x24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7ff ff4c 	bl	8001c00 <__NVIC_SetPriorityGrouping>
}
 8001d68:	bf00      	nop
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
 8001d7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d82:	f7ff ff61 	bl	8001c48 <__NVIC_GetPriorityGrouping>
 8001d86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	68b9      	ldr	r1, [r7, #8]
 8001d8c:	6978      	ldr	r0, [r7, #20]
 8001d8e:	f7ff ffb1 	bl	8001cf4 <NVIC_EncodePriority>
 8001d92:	4602      	mov	r2, r0
 8001d94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d98:	4611      	mov	r1, r2
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff ff80 	bl	8001ca0 <__NVIC_SetPriority>
}
 8001da0:	bf00      	nop
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff ff54 	bl	8001c64 <__NVIC_EnableIRQ>
}
 8001dbc:	bf00      	nop
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b089      	sub	sp, #36	@ 0x24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61fb      	str	r3, [r7, #28]
 8001dde:	e159      	b.n	8002094 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001de0:	2201      	movs	r2, #1
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	4013      	ands	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	f040 8148 	bne.w	800208e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d005      	beq.n	8001e16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d130      	bne.n	8001e78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	2203      	movs	r2, #3
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	68da      	ldr	r2, [r3, #12]
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	091b      	lsrs	r3, r3, #4
 8001e62:	f003 0201 	and.w	r2, r3, #1
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 0303 	and.w	r3, r3, #3
 8001e80:	2b03      	cmp	r3, #3
 8001e82:	d017      	beq.n	8001eb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	2203      	movs	r2, #3
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 0303 	and.w	r3, r3, #3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d123      	bne.n	8001f08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	08da      	lsrs	r2, r3, #3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3208      	adds	r2, #8
 8001ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	220f      	movs	r2, #15
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	691a      	ldr	r2, [r3, #16]
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	08da      	lsrs	r2, r3, #3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	3208      	adds	r2, #8
 8001f02:	69b9      	ldr	r1, [r7, #24]
 8001f04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	2203      	movs	r2, #3
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 0203 	and.w	r2, r3, #3
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f000 80a2 	beq.w	800208e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	4b57      	ldr	r3, [pc, #348]	@ (80020ac <HAL_GPIO_Init+0x2e8>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f52:	4a56      	ldr	r2, [pc, #344]	@ (80020ac <HAL_GPIO_Init+0x2e8>)
 8001f54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f5a:	4b54      	ldr	r3, [pc, #336]	@ (80020ac <HAL_GPIO_Init+0x2e8>)
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f66:	4a52      	ldr	r2, [pc, #328]	@ (80020b0 <HAL_GPIO_Init+0x2ec>)
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	089b      	lsrs	r3, r3, #2
 8001f6c:	3302      	adds	r3, #2
 8001f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	220f      	movs	r2, #15
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43db      	mvns	r3, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4013      	ands	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a49      	ldr	r2, [pc, #292]	@ (80020b4 <HAL_GPIO_Init+0x2f0>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d019      	beq.n	8001fc6 <HAL_GPIO_Init+0x202>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a48      	ldr	r2, [pc, #288]	@ (80020b8 <HAL_GPIO_Init+0x2f4>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d013      	beq.n	8001fc2 <HAL_GPIO_Init+0x1fe>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a47      	ldr	r2, [pc, #284]	@ (80020bc <HAL_GPIO_Init+0x2f8>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d00d      	beq.n	8001fbe <HAL_GPIO_Init+0x1fa>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a46      	ldr	r2, [pc, #280]	@ (80020c0 <HAL_GPIO_Init+0x2fc>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d007      	beq.n	8001fba <HAL_GPIO_Init+0x1f6>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a45      	ldr	r2, [pc, #276]	@ (80020c4 <HAL_GPIO_Init+0x300>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d101      	bne.n	8001fb6 <HAL_GPIO_Init+0x1f2>
 8001fb2:	2304      	movs	r3, #4
 8001fb4:	e008      	b.n	8001fc8 <HAL_GPIO_Init+0x204>
 8001fb6:	2307      	movs	r3, #7
 8001fb8:	e006      	b.n	8001fc8 <HAL_GPIO_Init+0x204>
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e004      	b.n	8001fc8 <HAL_GPIO_Init+0x204>
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	e002      	b.n	8001fc8 <HAL_GPIO_Init+0x204>
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e000      	b.n	8001fc8 <HAL_GPIO_Init+0x204>
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	69fa      	ldr	r2, [r7, #28]
 8001fca:	f002 0203 	and.w	r2, r2, #3
 8001fce:	0092      	lsls	r2, r2, #2
 8001fd0:	4093      	lsls	r3, r2
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fd8:	4935      	ldr	r1, [pc, #212]	@ (80020b0 <HAL_GPIO_Init+0x2ec>)
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	089b      	lsrs	r3, r3, #2
 8001fde:	3302      	adds	r3, #2
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fe6:	4b38      	ldr	r3, [pc, #224]	@ (80020c8 <HAL_GPIO_Init+0x304>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	4313      	orrs	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800200a:	4a2f      	ldr	r2, [pc, #188]	@ (80020c8 <HAL_GPIO_Init+0x304>)
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002010:	4b2d      	ldr	r3, [pc, #180]	@ (80020c8 <HAL_GPIO_Init+0x304>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	43db      	mvns	r3, r3
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4013      	ands	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	4313      	orrs	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002034:	4a24      	ldr	r2, [pc, #144]	@ (80020c8 <HAL_GPIO_Init+0x304>)
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800203a:	4b23      	ldr	r3, [pc, #140]	@ (80020c8 <HAL_GPIO_Init+0x304>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800205e:	4a1a      	ldr	r2, [pc, #104]	@ (80020c8 <HAL_GPIO_Init+0x304>)
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002064:	4b18      	ldr	r3, [pc, #96]	@ (80020c8 <HAL_GPIO_Init+0x304>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	43db      	mvns	r3, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	4313      	orrs	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002088:	4a0f      	ldr	r2, [pc, #60]	@ (80020c8 <HAL_GPIO_Init+0x304>)
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	3301      	adds	r3, #1
 8002092:	61fb      	str	r3, [r7, #28]
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	2b0f      	cmp	r3, #15
 8002098:	f67f aea2 	bls.w	8001de0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800209c:	bf00      	nop
 800209e:	bf00      	nop
 80020a0:	3724      	adds	r7, #36	@ 0x24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	40023800 	.word	0x40023800
 80020b0:	40013800 	.word	0x40013800
 80020b4:	40020000 	.word	0x40020000
 80020b8:	40020400 	.word	0x40020400
 80020bc:	40020800 	.word	0x40020800
 80020c0:	40020c00 	.word	0x40020c00
 80020c4:	40021000 	.word	0x40021000
 80020c8:	40013c00 	.word	0x40013c00

080020cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691a      	ldr	r2, [r3, #16]
 80020dc:	887b      	ldrh	r3, [r7, #2]
 80020de:	4013      	ands	r3, r2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d002      	beq.n	80020ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020e4:	2301      	movs	r3, #1
 80020e6:	73fb      	strb	r3, [r7, #15]
 80020e8:	e001      	b.n	80020ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020ea:	2300      	movs	r3, #0
 80020ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	807b      	strh	r3, [r7, #2]
 8002108:	4613      	mov	r3, r2
 800210a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800210c:	787b      	ldrb	r3, [r7, #1]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002112:	887a      	ldrh	r2, [r7, #2]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002118:	e003      	b.n	8002122 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800211a:	887b      	ldrh	r3, [r7, #2]
 800211c:	041a      	lsls	r2, r3, #16
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	619a      	str	r2, [r3, #24]
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
	...

08002130 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e12b      	b.n	800239a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d106      	bne.n	800215c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7fe fb56 	bl	8000808 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2224      	movs	r2, #36	@ 0x24
 8002160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 0201 	bic.w	r2, r2, #1
 8002172:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002182:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002192:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002194:	f001 f8da 	bl	800334c <HAL_RCC_GetPCLK1Freq>
 8002198:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	4a81      	ldr	r2, [pc, #516]	@ (80023a4 <HAL_I2C_Init+0x274>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d807      	bhi.n	80021b4 <HAL_I2C_Init+0x84>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4a80      	ldr	r2, [pc, #512]	@ (80023a8 <HAL_I2C_Init+0x278>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	bf94      	ite	ls
 80021ac:	2301      	movls	r3, #1
 80021ae:	2300      	movhi	r3, #0
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	e006      	b.n	80021c2 <HAL_I2C_Init+0x92>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4a7d      	ldr	r2, [pc, #500]	@ (80023ac <HAL_I2C_Init+0x27c>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	bf94      	ite	ls
 80021bc:	2301      	movls	r3, #1
 80021be:	2300      	movhi	r3, #0
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e0e7      	b.n	800239a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	4a78      	ldr	r2, [pc, #480]	@ (80023b0 <HAL_I2C_Init+0x280>)
 80021ce:	fba2 2303 	umull	r2, r3, r2, r3
 80021d2:	0c9b      	lsrs	r3, r3, #18
 80021d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68ba      	ldr	r2, [r7, #8]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	4a6a      	ldr	r2, [pc, #424]	@ (80023a4 <HAL_I2C_Init+0x274>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d802      	bhi.n	8002204 <HAL_I2C_Init+0xd4>
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	3301      	adds	r3, #1
 8002202:	e009      	b.n	8002218 <HAL_I2C_Init+0xe8>
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800220a:	fb02 f303 	mul.w	r3, r2, r3
 800220e:	4a69      	ldr	r2, [pc, #420]	@ (80023b4 <HAL_I2C_Init+0x284>)
 8002210:	fba2 2303 	umull	r2, r3, r2, r3
 8002214:	099b      	lsrs	r3, r3, #6
 8002216:	3301      	adds	r3, #1
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6812      	ldr	r2, [r2, #0]
 800221c:	430b      	orrs	r3, r1
 800221e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800222a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	495c      	ldr	r1, [pc, #368]	@ (80023a4 <HAL_I2C_Init+0x274>)
 8002234:	428b      	cmp	r3, r1
 8002236:	d819      	bhi.n	800226c <HAL_I2C_Init+0x13c>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	1e59      	subs	r1, r3, #1
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	fbb1 f3f3 	udiv	r3, r1, r3
 8002246:	1c59      	adds	r1, r3, #1
 8002248:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800224c:	400b      	ands	r3, r1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00a      	beq.n	8002268 <HAL_I2C_Init+0x138>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	1e59      	subs	r1, r3, #1
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002260:	3301      	adds	r3, #1
 8002262:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002266:	e051      	b.n	800230c <HAL_I2C_Init+0x1dc>
 8002268:	2304      	movs	r3, #4
 800226a:	e04f      	b.n	800230c <HAL_I2C_Init+0x1dc>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d111      	bne.n	8002298 <HAL_I2C_Init+0x168>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	1e58      	subs	r0, r3, #1
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6859      	ldr	r1, [r3, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	440b      	add	r3, r1
 8002282:	fbb0 f3f3 	udiv	r3, r0, r3
 8002286:	3301      	adds	r3, #1
 8002288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800228c:	2b00      	cmp	r3, #0
 800228e:	bf0c      	ite	eq
 8002290:	2301      	moveq	r3, #1
 8002292:	2300      	movne	r3, #0
 8002294:	b2db      	uxtb	r3, r3
 8002296:	e012      	b.n	80022be <HAL_I2C_Init+0x18e>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	1e58      	subs	r0, r3, #1
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6859      	ldr	r1, [r3, #4]
 80022a0:	460b      	mov	r3, r1
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	0099      	lsls	r1, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ae:	3301      	adds	r3, #1
 80022b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	bf0c      	ite	eq
 80022b8:	2301      	moveq	r3, #1
 80022ba:	2300      	movne	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <HAL_I2C_Init+0x196>
 80022c2:	2301      	movs	r3, #1
 80022c4:	e022      	b.n	800230c <HAL_I2C_Init+0x1dc>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10e      	bne.n	80022ec <HAL_I2C_Init+0x1bc>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	1e58      	subs	r0, r3, #1
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6859      	ldr	r1, [r3, #4]
 80022d6:	460b      	mov	r3, r1
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	440b      	add	r3, r1
 80022dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80022e0:	3301      	adds	r3, #1
 80022e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022ea:	e00f      	b.n	800230c <HAL_I2C_Init+0x1dc>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	1e58      	subs	r0, r3, #1
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6859      	ldr	r1, [r3, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	0099      	lsls	r1, r3, #2
 80022fc:	440b      	add	r3, r1
 80022fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002302:	3301      	adds	r3, #1
 8002304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002308:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	6809      	ldr	r1, [r1, #0]
 8002310:	4313      	orrs	r3, r2
 8002312:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	69da      	ldr	r2, [r3, #28]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	431a      	orrs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	430a      	orrs	r2, r1
 800232e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800233a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	6911      	ldr	r1, [r2, #16]
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	68d2      	ldr	r2, [r2, #12]
 8002346:	4311      	orrs	r1, r2
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6812      	ldr	r2, [r2, #0]
 800234c:	430b      	orrs	r3, r1
 800234e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	695a      	ldr	r2, [r3, #20]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	431a      	orrs	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	430a      	orrs	r2, r1
 800236a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f042 0201 	orr.w	r2, r2, #1
 800237a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2220      	movs	r2, #32
 8002386:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	000186a0 	.word	0x000186a0
 80023a8:	001e847f 	.word	0x001e847f
 80023ac:	003d08ff 	.word	0x003d08ff
 80023b0:	431bde83 	.word	0x431bde83
 80023b4:	10624dd3 	.word	0x10624dd3

080023b8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b088      	sub	sp, #32
 80023bc:	af02      	add	r7, sp, #8
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	607a      	str	r2, [r7, #4]
 80023c2:	461a      	mov	r2, r3
 80023c4:	460b      	mov	r3, r1
 80023c6:	817b      	strh	r3, [r7, #10]
 80023c8:	4613      	mov	r3, r2
 80023ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023cc:	f7ff fbe8 	bl	8001ba0 <HAL_GetTick>
 80023d0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b20      	cmp	r3, #32
 80023dc:	f040 80e0 	bne.w	80025a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	2319      	movs	r3, #25
 80023e6:	2201      	movs	r2, #1
 80023e8:	4970      	ldr	r1, [pc, #448]	@ (80025ac <HAL_I2C_Master_Transmit+0x1f4>)
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f000 f964 	bl	80026b8 <I2C_WaitOnFlagUntilTimeout>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80023f6:	2302      	movs	r3, #2
 80023f8:	e0d3      	b.n	80025a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002400:	2b01      	cmp	r3, #1
 8002402:	d101      	bne.n	8002408 <HAL_I2C_Master_Transmit+0x50>
 8002404:	2302      	movs	r3, #2
 8002406:	e0cc      	b.n	80025a2 <HAL_I2C_Master_Transmit+0x1ea>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b01      	cmp	r3, #1
 800241c:	d007      	beq.n	800242e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f042 0201 	orr.w	r2, r2, #1
 800242c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800243c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2221      	movs	r2, #33	@ 0x21
 8002442:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2210      	movs	r2, #16
 800244a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	893a      	ldrh	r2, [r7, #8]
 800245e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002464:	b29a      	uxth	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	4a50      	ldr	r2, [pc, #320]	@ (80025b0 <HAL_I2C_Master_Transmit+0x1f8>)
 800246e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002470:	8979      	ldrh	r1, [r7, #10]
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	6a3a      	ldr	r2, [r7, #32]
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 f89c 	bl	80025b4 <I2C_MasterRequestWrite>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e08d      	b.n	80025a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002486:	2300      	movs	r3, #0
 8002488:	613b      	str	r3, [r7, #16]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	613b      	str	r3, [r7, #16]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	613b      	str	r3, [r7, #16]
 800249a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800249c:	e066      	b.n	800256c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	6a39      	ldr	r1, [r7, #32]
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f000 fa22 	bl	80028ec <I2C_WaitOnTXEFlagUntilTimeout>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00d      	beq.n	80024ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b2:	2b04      	cmp	r3, #4
 80024b4:	d107      	bne.n	80024c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e06b      	b.n	80025a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ce:	781a      	ldrb	r2, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024da:	1c5a      	adds	r2, r3, #1
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	3b01      	subs	r3, #1
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024f2:	3b01      	subs	r3, #1
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	2b04      	cmp	r3, #4
 8002506:	d11b      	bne.n	8002540 <HAL_I2C_Master_Transmit+0x188>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800250c:	2b00      	cmp	r3, #0
 800250e:	d017      	beq.n	8002540 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002514:	781a      	ldrb	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002520:	1c5a      	adds	r2, r3, #1
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800252a:	b29b      	uxth	r3, r3
 800252c:	3b01      	subs	r3, #1
 800252e:	b29a      	uxth	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002538:	3b01      	subs	r3, #1
 800253a:	b29a      	uxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	6a39      	ldr	r1, [r7, #32]
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 fa19 	bl	800297c <I2C_WaitOnBTFFlagUntilTimeout>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00d      	beq.n	800256c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002554:	2b04      	cmp	r3, #4
 8002556:	d107      	bne.n	8002568 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002566:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e01a      	b.n	80025a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002570:	2b00      	cmp	r3, #0
 8002572:	d194      	bne.n	800249e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002582:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2220      	movs	r2, #32
 8002588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800259c:	2300      	movs	r3, #0
 800259e:	e000      	b.n	80025a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80025a0:	2302      	movs	r3, #2
  }
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	00100002 	.word	0x00100002
 80025b0:	ffff0000 	.word	0xffff0000

080025b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b088      	sub	sp, #32
 80025b8:	af02      	add	r7, sp, #8
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	607a      	str	r2, [r7, #4]
 80025be:	603b      	str	r3, [r7, #0]
 80025c0:	460b      	mov	r3, r1
 80025c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2b08      	cmp	r3, #8
 80025ce:	d006      	beq.n	80025de <I2C_MasterRequestWrite+0x2a>
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d003      	beq.n	80025de <I2C_MasterRequestWrite+0x2a>
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80025dc:	d108      	bne.n	80025f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	e00b      	b.n	8002608 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f4:	2b12      	cmp	r3, #18
 80025f6:	d107      	bne.n	8002608 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002606:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 f84f 	bl	80026b8 <I2C_WaitOnFlagUntilTimeout>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00d      	beq.n	800263c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800262a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800262e:	d103      	bne.n	8002638 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002636:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e035      	b.n	80026a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002644:	d108      	bne.n	8002658 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002646:	897b      	ldrh	r3, [r7, #10]
 8002648:	b2db      	uxtb	r3, r3
 800264a:	461a      	mov	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002654:	611a      	str	r2, [r3, #16]
 8002656:	e01b      	b.n	8002690 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002658:	897b      	ldrh	r3, [r7, #10]
 800265a:	11db      	asrs	r3, r3, #7
 800265c:	b2db      	uxtb	r3, r3
 800265e:	f003 0306 	and.w	r3, r3, #6
 8002662:	b2db      	uxtb	r3, r3
 8002664:	f063 030f 	orn	r3, r3, #15
 8002668:	b2da      	uxtb	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	490e      	ldr	r1, [pc, #56]	@ (80026b0 <I2C_MasterRequestWrite+0xfc>)
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 f898 	bl	80027ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e010      	b.n	80026a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002686:	897b      	ldrh	r3, [r7, #10]
 8002688:	b2da      	uxtb	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	4907      	ldr	r1, [pc, #28]	@ (80026b4 <I2C_MasterRequestWrite+0x100>)
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 f888 	bl	80027ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e000      	b.n	80026a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3718      	adds	r7, #24
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	00010008 	.word	0x00010008
 80026b4:	00010002 	.word	0x00010002

080026b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	603b      	str	r3, [r7, #0]
 80026c4:	4613      	mov	r3, r2
 80026c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026c8:	e048      	b.n	800275c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d0:	d044      	beq.n	800275c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026d2:	f7ff fa65 	bl	8001ba0 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d302      	bcc.n	80026e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d139      	bne.n	800275c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	0c1b      	lsrs	r3, r3, #16
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d10d      	bne.n	800270e <I2C_WaitOnFlagUntilTimeout+0x56>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	43da      	mvns	r2, r3
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	4013      	ands	r3, r2
 80026fe:	b29b      	uxth	r3, r3
 8002700:	2b00      	cmp	r3, #0
 8002702:	bf0c      	ite	eq
 8002704:	2301      	moveq	r3, #1
 8002706:	2300      	movne	r3, #0
 8002708:	b2db      	uxtb	r3, r3
 800270a:	461a      	mov	r2, r3
 800270c:	e00c      	b.n	8002728 <I2C_WaitOnFlagUntilTimeout+0x70>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	43da      	mvns	r2, r3
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	4013      	ands	r3, r2
 800271a:	b29b      	uxth	r3, r3
 800271c:	2b00      	cmp	r3, #0
 800271e:	bf0c      	ite	eq
 8002720:	2301      	moveq	r3, #1
 8002722:	2300      	movne	r3, #0
 8002724:	b2db      	uxtb	r3, r3
 8002726:	461a      	mov	r2, r3
 8002728:	79fb      	ldrb	r3, [r7, #7]
 800272a:	429a      	cmp	r2, r3
 800272c:	d116      	bne.n	800275c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2220      	movs	r2, #32
 8002738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002748:	f043 0220 	orr.w	r2, r3, #32
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e023      	b.n	80027a4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	0c1b      	lsrs	r3, r3, #16
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b01      	cmp	r3, #1
 8002764:	d10d      	bne.n	8002782 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	43da      	mvns	r2, r3
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	4013      	ands	r3, r2
 8002772:	b29b      	uxth	r3, r3
 8002774:	2b00      	cmp	r3, #0
 8002776:	bf0c      	ite	eq
 8002778:	2301      	moveq	r3, #1
 800277a:	2300      	movne	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	461a      	mov	r2, r3
 8002780:	e00c      	b.n	800279c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	43da      	mvns	r2, r3
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	4013      	ands	r3, r2
 800278e:	b29b      	uxth	r3, r3
 8002790:	2b00      	cmp	r3, #0
 8002792:	bf0c      	ite	eq
 8002794:	2301      	moveq	r3, #1
 8002796:	2300      	movne	r3, #0
 8002798:	b2db      	uxtb	r3, r3
 800279a:	461a      	mov	r2, r3
 800279c:	79fb      	ldrb	r3, [r7, #7]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d093      	beq.n	80026ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
 80027b8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027ba:	e071      	b.n	80028a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027ca:	d123      	bne.n	8002814 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027da:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80027e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2220      	movs	r2, #32
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002800:	f043 0204 	orr.w	r2, r3, #4
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e067      	b.n	80028e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281a:	d041      	beq.n	80028a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800281c:	f7ff f9c0 	bl	8001ba0 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	429a      	cmp	r2, r3
 800282a:	d302      	bcc.n	8002832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d136      	bne.n	80028a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	0c1b      	lsrs	r3, r3, #16
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b01      	cmp	r3, #1
 800283a:	d10c      	bne.n	8002856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	43da      	mvns	r2, r3
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	4013      	ands	r3, r2
 8002848:	b29b      	uxth	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	bf14      	ite	ne
 800284e:	2301      	movne	r3, #1
 8002850:	2300      	moveq	r3, #0
 8002852:	b2db      	uxtb	r3, r3
 8002854:	e00b      	b.n	800286e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	43da      	mvns	r2, r3
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	4013      	ands	r3, r2
 8002862:	b29b      	uxth	r3, r3
 8002864:	2b00      	cmp	r3, #0
 8002866:	bf14      	ite	ne
 8002868:	2301      	movne	r3, #1
 800286a:	2300      	moveq	r3, #0
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d016      	beq.n	80028a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2220      	movs	r2, #32
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288c:	f043 0220 	orr.w	r2, r3, #32
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e021      	b.n	80028e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	0c1b      	lsrs	r3, r3, #16
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d10c      	bne.n	80028c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	43da      	mvns	r2, r3
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	4013      	ands	r3, r2
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	bf14      	ite	ne
 80028bc:	2301      	movne	r3, #1
 80028be:	2300      	moveq	r3, #0
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	e00b      	b.n	80028dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	43da      	mvns	r2, r3
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	4013      	ands	r3, r2
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	bf14      	ite	ne
 80028d6:	2301      	movne	r3, #1
 80028d8:	2300      	moveq	r3, #0
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f47f af6d 	bne.w	80027bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028f8:	e034      	b.n	8002964 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 f886 	bl	8002a0c <I2C_IsAcknowledgeFailed>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e034      	b.n	8002974 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002910:	d028      	beq.n	8002964 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002912:	f7ff f945 	bl	8001ba0 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	68ba      	ldr	r2, [r7, #8]
 800291e:	429a      	cmp	r2, r3
 8002920:	d302      	bcc.n	8002928 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d11d      	bne.n	8002964 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002932:	2b80      	cmp	r3, #128	@ 0x80
 8002934:	d016      	beq.n	8002964 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2220      	movs	r2, #32
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002950:	f043 0220 	orr.w	r2, r3, #32
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e007      	b.n	8002974 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800296e:	2b80      	cmp	r3, #128	@ 0x80
 8002970:	d1c3      	bne.n	80028fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002988:	e034      	b.n	80029f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 f83e 	bl	8002a0c <I2C_IsAcknowledgeFailed>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e034      	b.n	8002a04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a0:	d028      	beq.n	80029f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029a2:	f7ff f8fd 	bl	8001ba0 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	68ba      	ldr	r2, [r7, #8]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d302      	bcc.n	80029b8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d11d      	bne.n	80029f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	f003 0304 	and.w	r3, r3, #4
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	d016      	beq.n	80029f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2220      	movs	r2, #32
 80029d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e0:	f043 0220 	orr.w	r2, r3, #32
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e007      	b.n	8002a04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	f003 0304 	and.w	r3, r3, #4
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	d1c3      	bne.n	800298a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a22:	d11b      	bne.n	8002a5c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a2c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2220      	movs	r2, #32
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a48:	f043 0204 	orr.w	r2, r3, #4
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e000      	b.n	8002a5e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
	...

08002a6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e267      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d075      	beq.n	8002b76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a8a:	4b88      	ldr	r3, [pc, #544]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 030c 	and.w	r3, r3, #12
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d00c      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a96:	4b85      	ldr	r3, [pc, #532]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d112      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aa2:	4b82      	ldr	r3, [pc, #520]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aaa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002aae:	d10b      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab0:	4b7e      	ldr	r3, [pc, #504]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d05b      	beq.n	8002b74 <HAL_RCC_OscConfig+0x108>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d157      	bne.n	8002b74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e242      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ad0:	d106      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x74>
 8002ad2:	4b76      	ldr	r3, [pc, #472]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a75      	ldr	r2, [pc, #468]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002ad8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	e01d      	b.n	8002b1c <HAL_RCC_OscConfig+0xb0>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ae8:	d10c      	bne.n	8002b04 <HAL_RCC_OscConfig+0x98>
 8002aea:	4b70      	ldr	r3, [pc, #448]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a6f      	ldr	r2, [pc, #444]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002af0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	4b6d      	ldr	r3, [pc, #436]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a6c      	ldr	r2, [pc, #432]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002afc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	e00b      	b.n	8002b1c <HAL_RCC_OscConfig+0xb0>
 8002b04:	4b69      	ldr	r3, [pc, #420]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a68      	ldr	r2, [pc, #416]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002b0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b0e:	6013      	str	r3, [r2, #0]
 8002b10:	4b66      	ldr	r3, [pc, #408]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a65      	ldr	r2, [pc, #404]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002b16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d013      	beq.n	8002b4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b24:	f7ff f83c 	bl	8001ba0 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b2c:	f7ff f838 	bl	8001ba0 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b64      	cmp	r3, #100	@ 0x64
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e207      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3e:	4b5b      	ldr	r3, [pc, #364]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0f0      	beq.n	8002b2c <HAL_RCC_OscConfig+0xc0>
 8002b4a:	e014      	b.n	8002b76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4c:	f7ff f828 	bl	8001ba0 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b54:	f7ff f824 	bl	8001ba0 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b64      	cmp	r3, #100	@ 0x64
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e1f3      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b66:	4b51      	ldr	r3, [pc, #324]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1f0      	bne.n	8002b54 <HAL_RCC_OscConfig+0xe8>
 8002b72:	e000      	b.n	8002b76 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d063      	beq.n	8002c4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b82:	4b4a      	ldr	r3, [pc, #296]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 030c 	and.w	r3, r3, #12
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00b      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b8e:	4b47      	ldr	r3, [pc, #284]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b96:	2b08      	cmp	r3, #8
 8002b98:	d11c      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b9a:	4b44      	ldr	r3, [pc, #272]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d116      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ba6:	4b41      	ldr	r3, [pc, #260]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d005      	beq.n	8002bbe <HAL_RCC_OscConfig+0x152>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d001      	beq.n	8002bbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e1c7      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bbe:	4b3b      	ldr	r3, [pc, #236]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	4937      	ldr	r1, [pc, #220]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bd2:	e03a      	b.n	8002c4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d020      	beq.n	8002c1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bdc:	4b34      	ldr	r3, [pc, #208]	@ (8002cb0 <HAL_RCC_OscConfig+0x244>)
 8002bde:	2201      	movs	r2, #1
 8002be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be2:	f7fe ffdd 	bl	8001ba0 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bea:	f7fe ffd9 	bl	8001ba0 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e1a8      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bfc:	4b2b      	ldr	r3, [pc, #172]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0f0      	beq.n	8002bea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c08:	4b28      	ldr	r3, [pc, #160]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	4925      	ldr	r1, [pc, #148]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	600b      	str	r3, [r1, #0]
 8002c1c:	e015      	b.n	8002c4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c1e:	4b24      	ldr	r3, [pc, #144]	@ (8002cb0 <HAL_RCC_OscConfig+0x244>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c24:	f7fe ffbc 	bl	8001ba0 <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c2c:	f7fe ffb8 	bl	8001ba0 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e187      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1f0      	bne.n	8002c2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0308 	and.w	r3, r3, #8
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d036      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d016      	beq.n	8002c8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c5e:	4b15      	ldr	r3, [pc, #84]	@ (8002cb4 <HAL_RCC_OscConfig+0x248>)
 8002c60:	2201      	movs	r2, #1
 8002c62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c64:	f7fe ff9c 	bl	8001ba0 <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c6c:	f7fe ff98 	bl	8001ba0 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e167      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002c80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0f0      	beq.n	8002c6c <HAL_RCC_OscConfig+0x200>
 8002c8a:	e01b      	b.n	8002cc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c8c:	4b09      	ldr	r3, [pc, #36]	@ (8002cb4 <HAL_RCC_OscConfig+0x248>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c92:	f7fe ff85 	bl	8001ba0 <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c98:	e00e      	b.n	8002cb8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c9a:	f7fe ff81 	bl	8001ba0 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d907      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e150      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	42470000 	.word	0x42470000
 8002cb4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb8:	4b88      	ldr	r3, [pc, #544]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002cba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1ea      	bne.n	8002c9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 8097 	beq.w	8002e00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cd6:	4b81      	ldr	r3, [pc, #516]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10f      	bne.n	8002d02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60bb      	str	r3, [r7, #8]
 8002ce6:	4b7d      	ldr	r3, [pc, #500]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cea:	4a7c      	ldr	r2, [pc, #496]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002cec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cf2:	4b7a      	ldr	r3, [pc, #488]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cfa:	60bb      	str	r3, [r7, #8]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d02:	4b77      	ldr	r3, [pc, #476]	@ (8002ee0 <HAL_RCC_OscConfig+0x474>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d118      	bne.n	8002d40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d0e:	4b74      	ldr	r3, [pc, #464]	@ (8002ee0 <HAL_RCC_OscConfig+0x474>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a73      	ldr	r2, [pc, #460]	@ (8002ee0 <HAL_RCC_OscConfig+0x474>)
 8002d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d1a:	f7fe ff41 	bl	8001ba0 <HAL_GetTick>
 8002d1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d20:	e008      	b.n	8002d34 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d22:	f7fe ff3d 	bl	8001ba0 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e10c      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d34:	4b6a      	ldr	r3, [pc, #424]	@ (8002ee0 <HAL_RCC_OscConfig+0x474>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0f0      	beq.n	8002d22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d106      	bne.n	8002d56 <HAL_RCC_OscConfig+0x2ea>
 8002d48:	4b64      	ldr	r3, [pc, #400]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d4c:	4a63      	ldr	r2, [pc, #396]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002d4e:	f043 0301 	orr.w	r3, r3, #1
 8002d52:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d54:	e01c      	b.n	8002d90 <HAL_RCC_OscConfig+0x324>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	2b05      	cmp	r3, #5
 8002d5c:	d10c      	bne.n	8002d78 <HAL_RCC_OscConfig+0x30c>
 8002d5e:	4b5f      	ldr	r3, [pc, #380]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d62:	4a5e      	ldr	r2, [pc, #376]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002d64:	f043 0304 	orr.w	r3, r3, #4
 8002d68:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d6a:	4b5c      	ldr	r3, [pc, #368]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d6e:	4a5b      	ldr	r2, [pc, #364]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002d70:	f043 0301 	orr.w	r3, r3, #1
 8002d74:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d76:	e00b      	b.n	8002d90 <HAL_RCC_OscConfig+0x324>
 8002d78:	4b58      	ldr	r3, [pc, #352]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002d7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d7c:	4a57      	ldr	r2, [pc, #348]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002d7e:	f023 0301 	bic.w	r3, r3, #1
 8002d82:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d84:	4b55      	ldr	r3, [pc, #340]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002d86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d88:	4a54      	ldr	r2, [pc, #336]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002d8a:	f023 0304 	bic.w	r3, r3, #4
 8002d8e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d015      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d98:	f7fe ff02 	bl	8001ba0 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9e:	e00a      	b.n	8002db6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da0:	f7fe fefe 	bl	8001ba0 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e0cb      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db6:	4b49      	ldr	r3, [pc, #292]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d0ee      	beq.n	8002da0 <HAL_RCC_OscConfig+0x334>
 8002dc2:	e014      	b.n	8002dee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc4:	f7fe feec 	bl	8001ba0 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dca:	e00a      	b.n	8002de2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dcc:	f7fe fee8 	bl	8001ba0 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e0b5      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002de2:	4b3e      	ldr	r3, [pc, #248]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002de4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1ee      	bne.n	8002dcc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dee:	7dfb      	ldrb	r3, [r7, #23]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d105      	bne.n	8002e00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df4:	4b39      	ldr	r3, [pc, #228]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df8:	4a38      	ldr	r2, [pc, #224]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002dfa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dfe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 80a1 	beq.w	8002f4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e0a:	4b34      	ldr	r3, [pc, #208]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 030c 	and.w	r3, r3, #12
 8002e12:	2b08      	cmp	r3, #8
 8002e14:	d05c      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d141      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e1e:	4b31      	ldr	r3, [pc, #196]	@ (8002ee4 <HAL_RCC_OscConfig+0x478>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e24:	f7fe febc 	bl	8001ba0 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2c:	f7fe feb8 	bl	8001ba0 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e087      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e3e:	4b27      	ldr	r3, [pc, #156]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69da      	ldr	r2, [r3, #28]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e58:	019b      	lsls	r3, r3, #6
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e60:	085b      	lsrs	r3, r3, #1
 8002e62:	3b01      	subs	r3, #1
 8002e64:	041b      	lsls	r3, r3, #16
 8002e66:	431a      	orrs	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e6c:	061b      	lsls	r3, r3, #24
 8002e6e:	491b      	ldr	r1, [pc, #108]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e74:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee4 <HAL_RCC_OscConfig+0x478>)
 8002e76:	2201      	movs	r2, #1
 8002e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7a:	f7fe fe91 	bl	8001ba0 <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e80:	e008      	b.n	8002e94 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e82:	f7fe fe8d 	bl	8001ba0 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e05c      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e94:	4b11      	ldr	r3, [pc, #68]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0f0      	beq.n	8002e82 <HAL_RCC_OscConfig+0x416>
 8002ea0:	e054      	b.n	8002f4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea2:	4b10      	ldr	r3, [pc, #64]	@ (8002ee4 <HAL_RCC_OscConfig+0x478>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea8:	f7fe fe7a 	bl	8001ba0 <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb0:	f7fe fe76 	bl	8001ba0 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e045      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ec2:	4b06      	ldr	r3, [pc, #24]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f0      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x444>
 8002ece:	e03d      	b.n	8002f4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d107      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e038      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	40007000 	.word	0x40007000
 8002ee4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8002f58 <HAL_RCC_OscConfig+0x4ec>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d028      	beq.n	8002f48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d121      	bne.n	8002f48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d11a      	bne.n	8002f48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f18:	4013      	ands	r3, r2
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d111      	bne.n	8002f48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f2e:	085b      	lsrs	r3, r3, #1
 8002f30:	3b01      	subs	r3, #1
 8002f32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d107      	bne.n	8002f48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d001      	beq.n	8002f4c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e000      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3718      	adds	r7, #24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40023800 	.word	0x40023800

08002f5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e0cc      	b.n	800310a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f70:	4b68      	ldr	r3, [pc, #416]	@ (8003114 <HAL_RCC_ClockConfig+0x1b8>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d90c      	bls.n	8002f98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7e:	4b65      	ldr	r3, [pc, #404]	@ (8003114 <HAL_RCC_ClockConfig+0x1b8>)
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f86:	4b63      	ldr	r3, [pc, #396]	@ (8003114 <HAL_RCC_ClockConfig+0x1b8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d001      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e0b8      	b.n	800310a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d020      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d005      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fb0:	4b59      	ldr	r3, [pc, #356]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	4a58      	ldr	r2, [pc, #352]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002fba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0308 	and.w	r3, r3, #8
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d005      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fc8:	4b53      	ldr	r3, [pc, #332]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	4a52      	ldr	r2, [pc, #328]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 8002fce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002fd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fd4:	4b50      	ldr	r3, [pc, #320]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	494d      	ldr	r1, [pc, #308]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d044      	beq.n	800307c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d107      	bne.n	800300a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ffa:	4b47      	ldr	r3, [pc, #284]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d119      	bne.n	800303a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e07f      	b.n	800310a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b02      	cmp	r3, #2
 8003010:	d003      	beq.n	800301a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003016:	2b03      	cmp	r3, #3
 8003018:	d107      	bne.n	800302a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800301a:	4b3f      	ldr	r3, [pc, #252]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d109      	bne.n	800303a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e06f      	b.n	800310a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800302a:	4b3b      	ldr	r3, [pc, #236]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e067      	b.n	800310a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800303a:	4b37      	ldr	r3, [pc, #220]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f023 0203 	bic.w	r2, r3, #3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	4934      	ldr	r1, [pc, #208]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 8003048:	4313      	orrs	r3, r2
 800304a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800304c:	f7fe fda8 	bl	8001ba0 <HAL_GetTick>
 8003050:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003052:	e00a      	b.n	800306a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003054:	f7fe fda4 	bl	8001ba0 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003062:	4293      	cmp	r3, r2
 8003064:	d901      	bls.n	800306a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e04f      	b.n	800310a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306a:	4b2b      	ldr	r3, [pc, #172]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 020c 	and.w	r2, r3, #12
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	429a      	cmp	r2, r3
 800307a:	d1eb      	bne.n	8003054 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800307c:	4b25      	ldr	r3, [pc, #148]	@ (8003114 <HAL_RCC_ClockConfig+0x1b8>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	429a      	cmp	r2, r3
 8003088:	d20c      	bcs.n	80030a4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800308a:	4b22      	ldr	r3, [pc, #136]	@ (8003114 <HAL_RCC_ClockConfig+0x1b8>)
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003092:	4b20      	ldr	r3, [pc, #128]	@ (8003114 <HAL_RCC_ClockConfig+0x1b8>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	429a      	cmp	r2, r3
 800309e:	d001      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e032      	b.n	800310a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d008      	beq.n	80030c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030b0:	4b19      	ldr	r3, [pc, #100]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	4916      	ldr	r1, [pc, #88]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0308 	and.w	r3, r3, #8
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d009      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030ce:	4b12      	ldr	r3, [pc, #72]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	490e      	ldr	r1, [pc, #56]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030e2:	f000 f821 	bl	8003128 <HAL_RCC_GetSysClockFreq>
 80030e6:	4602      	mov	r2, r0
 80030e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	091b      	lsrs	r3, r3, #4
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	490a      	ldr	r1, [pc, #40]	@ (800311c <HAL_RCC_ClockConfig+0x1c0>)
 80030f4:	5ccb      	ldrb	r3, [r1, r3]
 80030f6:	fa22 f303 	lsr.w	r3, r2, r3
 80030fa:	4a09      	ldr	r2, [pc, #36]	@ (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 80030fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80030fe:	4b09      	ldr	r3, [pc, #36]	@ (8003124 <HAL_RCC_ClockConfig+0x1c8>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f7fd fc98 	bl	8000a38 <HAL_InitTick>

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	40023c00 	.word	0x40023c00
 8003118:	40023800 	.word	0x40023800
 800311c:	08005b3c 	.word	0x08005b3c
 8003120:	20000000 	.word	0x20000000
 8003124:	2000007c 	.word	0x2000007c

08003128 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800312c:	b094      	sub	sp, #80	@ 0x50
 800312e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003130:	2300      	movs	r3, #0
 8003132:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003134:	2300      	movs	r3, #0
 8003136:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003138:	2300      	movs	r3, #0
 800313a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800313c:	2300      	movs	r3, #0
 800313e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003140:	4b79      	ldr	r3, [pc, #484]	@ (8003328 <HAL_RCC_GetSysClockFreq+0x200>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f003 030c 	and.w	r3, r3, #12
 8003148:	2b08      	cmp	r3, #8
 800314a:	d00d      	beq.n	8003168 <HAL_RCC_GetSysClockFreq+0x40>
 800314c:	2b08      	cmp	r3, #8
 800314e:	f200 80e1 	bhi.w	8003314 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003152:	2b00      	cmp	r3, #0
 8003154:	d002      	beq.n	800315c <HAL_RCC_GetSysClockFreq+0x34>
 8003156:	2b04      	cmp	r3, #4
 8003158:	d003      	beq.n	8003162 <HAL_RCC_GetSysClockFreq+0x3a>
 800315a:	e0db      	b.n	8003314 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800315c:	4b73      	ldr	r3, [pc, #460]	@ (800332c <HAL_RCC_GetSysClockFreq+0x204>)
 800315e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003160:	e0db      	b.n	800331a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003162:	4b73      	ldr	r3, [pc, #460]	@ (8003330 <HAL_RCC_GetSysClockFreq+0x208>)
 8003164:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003166:	e0d8      	b.n	800331a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003168:	4b6f      	ldr	r3, [pc, #444]	@ (8003328 <HAL_RCC_GetSysClockFreq+0x200>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003170:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003172:	4b6d      	ldr	r3, [pc, #436]	@ (8003328 <HAL_RCC_GetSysClockFreq+0x200>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d063      	beq.n	8003246 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800317e:	4b6a      	ldr	r3, [pc, #424]	@ (8003328 <HAL_RCC_GetSysClockFreq+0x200>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	099b      	lsrs	r3, r3, #6
 8003184:	2200      	movs	r2, #0
 8003186:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003188:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800318a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800318c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003190:	633b      	str	r3, [r7, #48]	@ 0x30
 8003192:	2300      	movs	r3, #0
 8003194:	637b      	str	r3, [r7, #52]	@ 0x34
 8003196:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800319a:	4622      	mov	r2, r4
 800319c:	462b      	mov	r3, r5
 800319e:	f04f 0000 	mov.w	r0, #0
 80031a2:	f04f 0100 	mov.w	r1, #0
 80031a6:	0159      	lsls	r1, r3, #5
 80031a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031ac:	0150      	lsls	r0, r2, #5
 80031ae:	4602      	mov	r2, r0
 80031b0:	460b      	mov	r3, r1
 80031b2:	4621      	mov	r1, r4
 80031b4:	1a51      	subs	r1, r2, r1
 80031b6:	6139      	str	r1, [r7, #16]
 80031b8:	4629      	mov	r1, r5
 80031ba:	eb63 0301 	sbc.w	r3, r3, r1
 80031be:	617b      	str	r3, [r7, #20]
 80031c0:	f04f 0200 	mov.w	r2, #0
 80031c4:	f04f 0300 	mov.w	r3, #0
 80031c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031cc:	4659      	mov	r1, fp
 80031ce:	018b      	lsls	r3, r1, #6
 80031d0:	4651      	mov	r1, sl
 80031d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031d6:	4651      	mov	r1, sl
 80031d8:	018a      	lsls	r2, r1, #6
 80031da:	4651      	mov	r1, sl
 80031dc:	ebb2 0801 	subs.w	r8, r2, r1
 80031e0:	4659      	mov	r1, fp
 80031e2:	eb63 0901 	sbc.w	r9, r3, r1
 80031e6:	f04f 0200 	mov.w	r2, #0
 80031ea:	f04f 0300 	mov.w	r3, #0
 80031ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031fa:	4690      	mov	r8, r2
 80031fc:	4699      	mov	r9, r3
 80031fe:	4623      	mov	r3, r4
 8003200:	eb18 0303 	adds.w	r3, r8, r3
 8003204:	60bb      	str	r3, [r7, #8]
 8003206:	462b      	mov	r3, r5
 8003208:	eb49 0303 	adc.w	r3, r9, r3
 800320c:	60fb      	str	r3, [r7, #12]
 800320e:	f04f 0200 	mov.w	r2, #0
 8003212:	f04f 0300 	mov.w	r3, #0
 8003216:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800321a:	4629      	mov	r1, r5
 800321c:	024b      	lsls	r3, r1, #9
 800321e:	4621      	mov	r1, r4
 8003220:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003224:	4621      	mov	r1, r4
 8003226:	024a      	lsls	r2, r1, #9
 8003228:	4610      	mov	r0, r2
 800322a:	4619      	mov	r1, r3
 800322c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800322e:	2200      	movs	r2, #0
 8003230:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003232:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003234:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003238:	f7fc ffd2 	bl	80001e0 <__aeabi_uldivmod>
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4613      	mov	r3, r2
 8003242:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003244:	e058      	b.n	80032f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003246:	4b38      	ldr	r3, [pc, #224]	@ (8003328 <HAL_RCC_GetSysClockFreq+0x200>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	099b      	lsrs	r3, r3, #6
 800324c:	2200      	movs	r2, #0
 800324e:	4618      	mov	r0, r3
 8003250:	4611      	mov	r1, r2
 8003252:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003256:	623b      	str	r3, [r7, #32]
 8003258:	2300      	movs	r3, #0
 800325a:	627b      	str	r3, [r7, #36]	@ 0x24
 800325c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003260:	4642      	mov	r2, r8
 8003262:	464b      	mov	r3, r9
 8003264:	f04f 0000 	mov.w	r0, #0
 8003268:	f04f 0100 	mov.w	r1, #0
 800326c:	0159      	lsls	r1, r3, #5
 800326e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003272:	0150      	lsls	r0, r2, #5
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	4641      	mov	r1, r8
 800327a:	ebb2 0a01 	subs.w	sl, r2, r1
 800327e:	4649      	mov	r1, r9
 8003280:	eb63 0b01 	sbc.w	fp, r3, r1
 8003284:	f04f 0200 	mov.w	r2, #0
 8003288:	f04f 0300 	mov.w	r3, #0
 800328c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003290:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003294:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003298:	ebb2 040a 	subs.w	r4, r2, sl
 800329c:	eb63 050b 	sbc.w	r5, r3, fp
 80032a0:	f04f 0200 	mov.w	r2, #0
 80032a4:	f04f 0300 	mov.w	r3, #0
 80032a8:	00eb      	lsls	r3, r5, #3
 80032aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032ae:	00e2      	lsls	r2, r4, #3
 80032b0:	4614      	mov	r4, r2
 80032b2:	461d      	mov	r5, r3
 80032b4:	4643      	mov	r3, r8
 80032b6:	18e3      	adds	r3, r4, r3
 80032b8:	603b      	str	r3, [r7, #0]
 80032ba:	464b      	mov	r3, r9
 80032bc:	eb45 0303 	adc.w	r3, r5, r3
 80032c0:	607b      	str	r3, [r7, #4]
 80032c2:	f04f 0200 	mov.w	r2, #0
 80032c6:	f04f 0300 	mov.w	r3, #0
 80032ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032ce:	4629      	mov	r1, r5
 80032d0:	028b      	lsls	r3, r1, #10
 80032d2:	4621      	mov	r1, r4
 80032d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032d8:	4621      	mov	r1, r4
 80032da:	028a      	lsls	r2, r1, #10
 80032dc:	4610      	mov	r0, r2
 80032de:	4619      	mov	r1, r3
 80032e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032e2:	2200      	movs	r2, #0
 80032e4:	61bb      	str	r3, [r7, #24]
 80032e6:	61fa      	str	r2, [r7, #28]
 80032e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032ec:	f7fc ff78 	bl	80001e0 <__aeabi_uldivmod>
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	4613      	mov	r3, r2
 80032f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80032f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003328 <HAL_RCC_GetSysClockFreq+0x200>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	0c1b      	lsrs	r3, r3, #16
 80032fe:	f003 0303 	and.w	r3, r3, #3
 8003302:	3301      	adds	r3, #1
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003308:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800330a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800330c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003310:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003312:	e002      	b.n	800331a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003314:	4b05      	ldr	r3, [pc, #20]	@ (800332c <HAL_RCC_GetSysClockFreq+0x204>)
 8003316:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003318:	bf00      	nop
    }
  }
  return sysclockfreq;
 800331a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800331c:	4618      	mov	r0, r3
 800331e:	3750      	adds	r7, #80	@ 0x50
 8003320:	46bd      	mov	sp, r7
 8003322:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003326:	bf00      	nop
 8003328:	40023800 	.word	0x40023800
 800332c:	00f42400 	.word	0x00f42400
 8003330:	007a1200 	.word	0x007a1200

08003334 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003338:	4b03      	ldr	r3, [pc, #12]	@ (8003348 <HAL_RCC_GetHCLKFreq+0x14>)
 800333a:	681b      	ldr	r3, [r3, #0]
}
 800333c:	4618      	mov	r0, r3
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	20000000 	.word	0x20000000

0800334c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003350:	f7ff fff0 	bl	8003334 <HAL_RCC_GetHCLKFreq>
 8003354:	4602      	mov	r2, r0
 8003356:	4b05      	ldr	r3, [pc, #20]	@ (800336c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	0a9b      	lsrs	r3, r3, #10
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	4903      	ldr	r1, [pc, #12]	@ (8003370 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003362:	5ccb      	ldrb	r3, [r1, r3]
 8003364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003368:	4618      	mov	r0, r3
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40023800 	.word	0x40023800
 8003370:	08005b4c 	.word	0x08005b4c

08003374 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003378:	f7ff ffdc 	bl	8003334 <HAL_RCC_GetHCLKFreq>
 800337c:	4602      	mov	r2, r0
 800337e:	4b05      	ldr	r3, [pc, #20]	@ (8003394 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	0b5b      	lsrs	r3, r3, #13
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	4903      	ldr	r1, [pc, #12]	@ (8003398 <HAL_RCC_GetPCLK2Freq+0x24>)
 800338a:	5ccb      	ldrb	r3, [r1, r3]
 800338c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003390:	4618      	mov	r0, r3
 8003392:	bd80      	pop	{r7, pc}
 8003394:	40023800 	.word	0x40023800
 8003398:	08005b4c 	.word	0x08005b4c

0800339c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	220f      	movs	r2, #15
 80033aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80033ac:	4b12      	ldr	r3, [pc, #72]	@ (80033f8 <HAL_RCC_GetClockConfig+0x5c>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f003 0203 	and.w	r2, r3, #3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80033b8:	4b0f      	ldr	r3, [pc, #60]	@ (80033f8 <HAL_RCC_GetClockConfig+0x5c>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80033c4:	4b0c      	ldr	r3, [pc, #48]	@ (80033f8 <HAL_RCC_GetClockConfig+0x5c>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80033d0:	4b09      	ldr	r3, [pc, #36]	@ (80033f8 <HAL_RCC_GetClockConfig+0x5c>)
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	08db      	lsrs	r3, r3, #3
 80033d6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80033de:	4b07      	ldr	r3, [pc, #28]	@ (80033fc <HAL_RCC_GetClockConfig+0x60>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0207 	and.w	r2, r3, #7
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	601a      	str	r2, [r3, #0]
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	40023800 	.word	0x40023800
 80033fc:	40023c00 	.word	0x40023c00

08003400 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e041      	b.n	8003496 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d106      	bne.n	800342c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7fd fc3c 	bl	8000ca4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2202      	movs	r2, #2
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3304      	adds	r3, #4
 800343c:	4619      	mov	r1, r3
 800343e:	4610      	mov	r0, r2
 8003440:	f000 fa70 	bl	8003924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
	...

080034a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d001      	beq.n	80034b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e044      	b.n	8003542 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f042 0201 	orr.w	r2, r2, #1
 80034ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a1e      	ldr	r2, [pc, #120]	@ (8003550 <HAL_TIM_Base_Start_IT+0xb0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d018      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x6c>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034e2:	d013      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x6c>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a1a      	ldr	r2, [pc, #104]	@ (8003554 <HAL_TIM_Base_Start_IT+0xb4>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d00e      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x6c>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a19      	ldr	r2, [pc, #100]	@ (8003558 <HAL_TIM_Base_Start_IT+0xb8>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d009      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x6c>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a17      	ldr	r2, [pc, #92]	@ (800355c <HAL_TIM_Base_Start_IT+0xbc>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d004      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x6c>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a16      	ldr	r2, [pc, #88]	@ (8003560 <HAL_TIM_Base_Start_IT+0xc0>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d111      	bne.n	8003530 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2b06      	cmp	r3, #6
 800351c:	d010      	beq.n	8003540 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f042 0201 	orr.w	r2, r2, #1
 800352c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800352e:	e007      	b.n	8003540 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 0201 	orr.w	r2, r2, #1
 800353e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3714      	adds	r7, #20
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	40010000 	.word	0x40010000
 8003554:	40000400 	.word	0x40000400
 8003558:	40000800 	.word	0x40000800
 800355c:	40000c00 	.word	0x40000c00
 8003560:	40014000 	.word	0x40014000

08003564 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d020      	beq.n	80035c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d01b      	beq.n	80035c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f06f 0202 	mvn.w	r2, #2
 8003598:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	f003 0303 	and.w	r3, r3, #3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f999 	bl	80038e6 <HAL_TIM_IC_CaptureCallback>
 80035b4:	e005      	b.n	80035c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f98b 	bl	80038d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 f99c 	bl	80038fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d020      	beq.n	8003614 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d01b      	beq.n	8003614 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f06f 0204 	mvn.w	r2, #4
 80035e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2202      	movs	r2, #2
 80035ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f973 	bl	80038e6 <HAL_TIM_IC_CaptureCallback>
 8003600:	e005      	b.n	800360e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f965 	bl	80038d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 f976 	bl	80038fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b00      	cmp	r3, #0
 800361c:	d020      	beq.n	8003660 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f003 0308 	and.w	r3, r3, #8
 8003624:	2b00      	cmp	r3, #0
 8003626:	d01b      	beq.n	8003660 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f06f 0208 	mvn.w	r2, #8
 8003630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2204      	movs	r2, #4
 8003636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f94d 	bl	80038e6 <HAL_TIM_IC_CaptureCallback>
 800364c:	e005      	b.n	800365a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f93f 	bl	80038d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f950 	bl	80038fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	f003 0310 	and.w	r3, r3, #16
 8003666:	2b00      	cmp	r3, #0
 8003668:	d020      	beq.n	80036ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f003 0310 	and.w	r3, r3, #16
 8003670:	2b00      	cmp	r3, #0
 8003672:	d01b      	beq.n	80036ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f06f 0210 	mvn.w	r2, #16
 800367c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2208      	movs	r2, #8
 8003682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f927 	bl	80038e6 <HAL_TIM_IC_CaptureCallback>
 8003698:	e005      	b.n	80036a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f919 	bl	80038d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f92a 	bl	80038fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00c      	beq.n	80036d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d007      	beq.n	80036d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f06f 0201 	mvn.w	r2, #1
 80036c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7fd f966 	bl	800099c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00c      	beq.n	80036f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d007      	beq.n	80036f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80036ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 fab0 	bl	8003c54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00c      	beq.n	8003718 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003704:	2b00      	cmp	r3, #0
 8003706:	d007      	beq.n	8003718 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f8fb 	bl	800390e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	f003 0320 	and.w	r3, r3, #32
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00c      	beq.n	800373c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f003 0320 	and.w	r3, r3, #32
 8003728:	2b00      	cmp	r3, #0
 800372a:	d007      	beq.n	800373c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f06f 0220 	mvn.w	r2, #32
 8003734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 fa82 	bl	8003c40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800373c:	bf00      	nop
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800374e:	2300      	movs	r3, #0
 8003750:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003758:	2b01      	cmp	r3, #1
 800375a:	d101      	bne.n	8003760 <HAL_TIM_ConfigClockSource+0x1c>
 800375c:	2302      	movs	r3, #2
 800375e:	e0b4      	b.n	80038ca <HAL_TIM_ConfigClockSource+0x186>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800377e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003786:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003798:	d03e      	beq.n	8003818 <HAL_TIM_ConfigClockSource+0xd4>
 800379a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800379e:	f200 8087 	bhi.w	80038b0 <HAL_TIM_ConfigClockSource+0x16c>
 80037a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037a6:	f000 8086 	beq.w	80038b6 <HAL_TIM_ConfigClockSource+0x172>
 80037aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037ae:	d87f      	bhi.n	80038b0 <HAL_TIM_ConfigClockSource+0x16c>
 80037b0:	2b70      	cmp	r3, #112	@ 0x70
 80037b2:	d01a      	beq.n	80037ea <HAL_TIM_ConfigClockSource+0xa6>
 80037b4:	2b70      	cmp	r3, #112	@ 0x70
 80037b6:	d87b      	bhi.n	80038b0 <HAL_TIM_ConfigClockSource+0x16c>
 80037b8:	2b60      	cmp	r3, #96	@ 0x60
 80037ba:	d050      	beq.n	800385e <HAL_TIM_ConfigClockSource+0x11a>
 80037bc:	2b60      	cmp	r3, #96	@ 0x60
 80037be:	d877      	bhi.n	80038b0 <HAL_TIM_ConfigClockSource+0x16c>
 80037c0:	2b50      	cmp	r3, #80	@ 0x50
 80037c2:	d03c      	beq.n	800383e <HAL_TIM_ConfigClockSource+0xfa>
 80037c4:	2b50      	cmp	r3, #80	@ 0x50
 80037c6:	d873      	bhi.n	80038b0 <HAL_TIM_ConfigClockSource+0x16c>
 80037c8:	2b40      	cmp	r3, #64	@ 0x40
 80037ca:	d058      	beq.n	800387e <HAL_TIM_ConfigClockSource+0x13a>
 80037cc:	2b40      	cmp	r3, #64	@ 0x40
 80037ce:	d86f      	bhi.n	80038b0 <HAL_TIM_ConfigClockSource+0x16c>
 80037d0:	2b30      	cmp	r3, #48	@ 0x30
 80037d2:	d064      	beq.n	800389e <HAL_TIM_ConfigClockSource+0x15a>
 80037d4:	2b30      	cmp	r3, #48	@ 0x30
 80037d6:	d86b      	bhi.n	80038b0 <HAL_TIM_ConfigClockSource+0x16c>
 80037d8:	2b20      	cmp	r3, #32
 80037da:	d060      	beq.n	800389e <HAL_TIM_ConfigClockSource+0x15a>
 80037dc:	2b20      	cmp	r3, #32
 80037de:	d867      	bhi.n	80038b0 <HAL_TIM_ConfigClockSource+0x16c>
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d05c      	beq.n	800389e <HAL_TIM_ConfigClockSource+0x15a>
 80037e4:	2b10      	cmp	r3, #16
 80037e6:	d05a      	beq.n	800389e <HAL_TIM_ConfigClockSource+0x15a>
 80037e8:	e062      	b.n	80038b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037fa:	f000 f993 	bl	8003b24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800380c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	609a      	str	r2, [r3, #8]
      break;
 8003816:	e04f      	b.n	80038b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003828:	f000 f97c 	bl	8003b24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689a      	ldr	r2, [r3, #8]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800383a:	609a      	str	r2, [r3, #8]
      break;
 800383c:	e03c      	b.n	80038b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800384a:	461a      	mov	r2, r3
 800384c:	f000 f8f0 	bl	8003a30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2150      	movs	r1, #80	@ 0x50
 8003856:	4618      	mov	r0, r3
 8003858:	f000 f949 	bl	8003aee <TIM_ITRx_SetConfig>
      break;
 800385c:	e02c      	b.n	80038b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800386a:	461a      	mov	r2, r3
 800386c:	f000 f90f 	bl	8003a8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2160      	movs	r1, #96	@ 0x60
 8003876:	4618      	mov	r0, r3
 8003878:	f000 f939 	bl	8003aee <TIM_ITRx_SetConfig>
      break;
 800387c:	e01c      	b.n	80038b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800388a:	461a      	mov	r2, r3
 800388c:	f000 f8d0 	bl	8003a30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2140      	movs	r1, #64	@ 0x40
 8003896:	4618      	mov	r0, r3
 8003898:	f000 f929 	bl	8003aee <TIM_ITRx_SetConfig>
      break;
 800389c:	e00c      	b.n	80038b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4619      	mov	r1, r3
 80038a8:	4610      	mov	r0, r2
 80038aa:	f000 f920 	bl	8003aee <TIM_ITRx_SetConfig>
      break;
 80038ae:	e003      	b.n	80038b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	73fb      	strb	r3, [r7, #15]
      break;
 80038b4:	e000      	b.n	80038b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80038b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b083      	sub	sp, #12
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800390e:	b480      	push	{r7}
 8003910:	b083      	sub	sp, #12
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
	...

08003924 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a37      	ldr	r2, [pc, #220]	@ (8003a14 <TIM_Base_SetConfig+0xf0>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d00f      	beq.n	800395c <TIM_Base_SetConfig+0x38>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003942:	d00b      	beq.n	800395c <TIM_Base_SetConfig+0x38>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a34      	ldr	r2, [pc, #208]	@ (8003a18 <TIM_Base_SetConfig+0xf4>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d007      	beq.n	800395c <TIM_Base_SetConfig+0x38>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a33      	ldr	r2, [pc, #204]	@ (8003a1c <TIM_Base_SetConfig+0xf8>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d003      	beq.n	800395c <TIM_Base_SetConfig+0x38>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a32      	ldr	r2, [pc, #200]	@ (8003a20 <TIM_Base_SetConfig+0xfc>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d108      	bne.n	800396e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003962:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	4313      	orrs	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a28      	ldr	r2, [pc, #160]	@ (8003a14 <TIM_Base_SetConfig+0xf0>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d01b      	beq.n	80039ae <TIM_Base_SetConfig+0x8a>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800397c:	d017      	beq.n	80039ae <TIM_Base_SetConfig+0x8a>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a25      	ldr	r2, [pc, #148]	@ (8003a18 <TIM_Base_SetConfig+0xf4>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d013      	beq.n	80039ae <TIM_Base_SetConfig+0x8a>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a24      	ldr	r2, [pc, #144]	@ (8003a1c <TIM_Base_SetConfig+0xf8>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d00f      	beq.n	80039ae <TIM_Base_SetConfig+0x8a>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a23      	ldr	r2, [pc, #140]	@ (8003a20 <TIM_Base_SetConfig+0xfc>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d00b      	beq.n	80039ae <TIM_Base_SetConfig+0x8a>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a22      	ldr	r2, [pc, #136]	@ (8003a24 <TIM_Base_SetConfig+0x100>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d007      	beq.n	80039ae <TIM_Base_SetConfig+0x8a>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a21      	ldr	r2, [pc, #132]	@ (8003a28 <TIM_Base_SetConfig+0x104>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d003      	beq.n	80039ae <TIM_Base_SetConfig+0x8a>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a20      	ldr	r2, [pc, #128]	@ (8003a2c <TIM_Base_SetConfig+0x108>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d108      	bne.n	80039c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	4313      	orrs	r3, r2
 80039be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	689a      	ldr	r2, [r3, #8]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a0c      	ldr	r2, [pc, #48]	@ (8003a14 <TIM_Base_SetConfig+0xf0>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d103      	bne.n	80039ee <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	691a      	ldr	r2, [r3, #16]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f043 0204 	orr.w	r2, r3, #4
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	601a      	str	r2, [r3, #0]
}
 8003a06:	bf00      	nop
 8003a08:	3714      	adds	r7, #20
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	40010000 	.word	0x40010000
 8003a18:	40000400 	.word	0x40000400
 8003a1c:	40000800 	.word	0x40000800
 8003a20:	40000c00 	.word	0x40000c00
 8003a24:	40014000 	.word	0x40014000
 8003a28:	40014400 	.word	0x40014400
 8003a2c:	40014800 	.word	0x40014800

08003a30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b087      	sub	sp, #28
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	f023 0201 	bic.w	r2, r3, #1
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	011b      	lsls	r3, r3, #4
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f023 030a 	bic.w	r3, r3, #10
 8003a6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	621a      	str	r2, [r3, #32]
}
 8003a82:	bf00      	nop
 8003a84:	371c      	adds	r7, #28
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr

08003a8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	b087      	sub	sp, #28
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	60f8      	str	r0, [r7, #12]
 8003a96:	60b9      	str	r1, [r7, #8]
 8003a98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	f023 0210 	bic.w	r2, r3, #16
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ab8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	031b      	lsls	r3, r3, #12
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003aca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	011b      	lsls	r3, r3, #4
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	621a      	str	r2, [r3, #32]
}
 8003ae2:	bf00      	nop
 8003ae4:	371c      	adds	r7, #28
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b085      	sub	sp, #20
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
 8003af6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	f043 0307 	orr.w	r3, r3, #7
 8003b10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	609a      	str	r2, [r3, #8]
}
 8003b18:	bf00      	nop
 8003b1a:	3714      	adds	r7, #20
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b087      	sub	sp, #28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
 8003b30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	021a      	lsls	r2, r3, #8
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	431a      	orrs	r2, r3
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	609a      	str	r2, [r3, #8]
}
 8003b58:	bf00      	nop
 8003b5a:	371c      	adds	r7, #28
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d101      	bne.n	8003b7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e050      	b.n	8003c1e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2202      	movs	r2, #2
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ba2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a1c      	ldr	r2, [pc, #112]	@ (8003c2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d018      	beq.n	8003bf2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bc8:	d013      	beq.n	8003bf2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a18      	ldr	r2, [pc, #96]	@ (8003c30 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d00e      	beq.n	8003bf2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a16      	ldr	r2, [pc, #88]	@ (8003c34 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d009      	beq.n	8003bf2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a15      	ldr	r2, [pc, #84]	@ (8003c38 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d004      	beq.n	8003bf2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a13      	ldr	r2, [pc, #76]	@ (8003c3c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d10c      	bne.n	8003c0c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bf8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68ba      	ldr	r2, [r7, #8]
 8003c0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3714      	adds	r7, #20
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	40010000 	.word	0x40010000
 8003c30:	40000400 	.word	0x40000400
 8003c34:	40000800 	.word	0x40000800
 8003c38:	40000c00 	.word	0x40000c00
 8003c3c:	40014000 	.word	0x40014000

08003c40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e042      	b.n	8003d00 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d106      	bne.n	8003c94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7fd f858 	bl	8000d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2224      	movs	r2, #36	@ 0x24
 8003c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68da      	ldr	r2, [r3, #12]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003caa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 f82b 	bl	8003d08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	691a      	ldr	r2, [r3, #16]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003cc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695a      	ldr	r2, [r3, #20]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003cd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68da      	ldr	r2, [r3, #12]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ce0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d0c:	b0c0      	sub	sp, #256	@ 0x100
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d24:	68d9      	ldr	r1, [r3, #12]
 8003d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	ea40 0301 	orr.w	r3, r0, r1
 8003d30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	431a      	orrs	r2, r3
 8003d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003d60:	f021 010c 	bic.w	r1, r1, #12
 8003d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003d6e:	430b      	orrs	r3, r1
 8003d70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d82:	6999      	ldr	r1, [r3, #24]
 8003d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	ea40 0301 	orr.w	r3, r0, r1
 8003d8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	4b8f      	ldr	r3, [pc, #572]	@ (8003fd4 <UART_SetConfig+0x2cc>)
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d005      	beq.n	8003da8 <UART_SetConfig+0xa0>
 8003d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	4b8d      	ldr	r3, [pc, #564]	@ (8003fd8 <UART_SetConfig+0x2d0>)
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d104      	bne.n	8003db2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003da8:	f7ff fae4 	bl	8003374 <HAL_RCC_GetPCLK2Freq>
 8003dac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003db0:	e003      	b.n	8003dba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003db2:	f7ff facb 	bl	800334c <HAL_RCC_GetPCLK1Freq>
 8003db6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dc4:	f040 810c 	bne.w	8003fe0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003dc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003dd2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003dd6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003dda:	4622      	mov	r2, r4
 8003ddc:	462b      	mov	r3, r5
 8003dde:	1891      	adds	r1, r2, r2
 8003de0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003de2:	415b      	adcs	r3, r3
 8003de4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003de6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003dea:	4621      	mov	r1, r4
 8003dec:	eb12 0801 	adds.w	r8, r2, r1
 8003df0:	4629      	mov	r1, r5
 8003df2:	eb43 0901 	adc.w	r9, r3, r1
 8003df6:	f04f 0200 	mov.w	r2, #0
 8003dfa:	f04f 0300 	mov.w	r3, #0
 8003dfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e0a:	4690      	mov	r8, r2
 8003e0c:	4699      	mov	r9, r3
 8003e0e:	4623      	mov	r3, r4
 8003e10:	eb18 0303 	adds.w	r3, r8, r3
 8003e14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e18:	462b      	mov	r3, r5
 8003e1a:	eb49 0303 	adc.w	r3, r9, r3
 8003e1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e2e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003e32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e36:	460b      	mov	r3, r1
 8003e38:	18db      	adds	r3, r3, r3
 8003e3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	eb42 0303 	adc.w	r3, r2, r3
 8003e42:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003e48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003e4c:	f7fc f9c8 	bl	80001e0 <__aeabi_uldivmod>
 8003e50:	4602      	mov	r2, r0
 8003e52:	460b      	mov	r3, r1
 8003e54:	4b61      	ldr	r3, [pc, #388]	@ (8003fdc <UART_SetConfig+0x2d4>)
 8003e56:	fba3 2302 	umull	r2, r3, r3, r2
 8003e5a:	095b      	lsrs	r3, r3, #5
 8003e5c:	011c      	lsls	r4, r3, #4
 8003e5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e62:	2200      	movs	r2, #0
 8003e64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e68:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003e6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003e70:	4642      	mov	r2, r8
 8003e72:	464b      	mov	r3, r9
 8003e74:	1891      	adds	r1, r2, r2
 8003e76:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003e78:	415b      	adcs	r3, r3
 8003e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003e80:	4641      	mov	r1, r8
 8003e82:	eb12 0a01 	adds.w	sl, r2, r1
 8003e86:	4649      	mov	r1, r9
 8003e88:	eb43 0b01 	adc.w	fp, r3, r1
 8003e8c:	f04f 0200 	mov.w	r2, #0
 8003e90:	f04f 0300 	mov.w	r3, #0
 8003e94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ea0:	4692      	mov	sl, r2
 8003ea2:	469b      	mov	fp, r3
 8003ea4:	4643      	mov	r3, r8
 8003ea6:	eb1a 0303 	adds.w	r3, sl, r3
 8003eaa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003eae:	464b      	mov	r3, r9
 8003eb0:	eb4b 0303 	adc.w	r3, fp, r3
 8003eb4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ec4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003ec8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ecc:	460b      	mov	r3, r1
 8003ece:	18db      	adds	r3, r3, r3
 8003ed0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	eb42 0303 	adc.w	r3, r2, r3
 8003ed8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003eda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003ede:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003ee2:	f7fc f97d 	bl	80001e0 <__aeabi_uldivmod>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	460b      	mov	r3, r1
 8003eea:	4611      	mov	r1, r2
 8003eec:	4b3b      	ldr	r3, [pc, #236]	@ (8003fdc <UART_SetConfig+0x2d4>)
 8003eee:	fba3 2301 	umull	r2, r3, r3, r1
 8003ef2:	095b      	lsrs	r3, r3, #5
 8003ef4:	2264      	movs	r2, #100	@ 0x64
 8003ef6:	fb02 f303 	mul.w	r3, r2, r3
 8003efa:	1acb      	subs	r3, r1, r3
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003f02:	4b36      	ldr	r3, [pc, #216]	@ (8003fdc <UART_SetConfig+0x2d4>)
 8003f04:	fba3 2302 	umull	r2, r3, r3, r2
 8003f08:	095b      	lsrs	r3, r3, #5
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003f10:	441c      	add	r4, r3
 8003f12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f16:	2200      	movs	r2, #0
 8003f18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f1c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003f20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003f24:	4642      	mov	r2, r8
 8003f26:	464b      	mov	r3, r9
 8003f28:	1891      	adds	r1, r2, r2
 8003f2a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f2c:	415b      	adcs	r3, r3
 8003f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003f34:	4641      	mov	r1, r8
 8003f36:	1851      	adds	r1, r2, r1
 8003f38:	6339      	str	r1, [r7, #48]	@ 0x30
 8003f3a:	4649      	mov	r1, r9
 8003f3c:	414b      	adcs	r3, r1
 8003f3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f40:	f04f 0200 	mov.w	r2, #0
 8003f44:	f04f 0300 	mov.w	r3, #0
 8003f48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003f4c:	4659      	mov	r1, fp
 8003f4e:	00cb      	lsls	r3, r1, #3
 8003f50:	4651      	mov	r1, sl
 8003f52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f56:	4651      	mov	r1, sl
 8003f58:	00ca      	lsls	r2, r1, #3
 8003f5a:	4610      	mov	r0, r2
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4603      	mov	r3, r0
 8003f60:	4642      	mov	r2, r8
 8003f62:	189b      	adds	r3, r3, r2
 8003f64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f68:	464b      	mov	r3, r9
 8003f6a:	460a      	mov	r2, r1
 8003f6c:	eb42 0303 	adc.w	r3, r2, r3
 8003f70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f80:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003f84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f88:	460b      	mov	r3, r1
 8003f8a:	18db      	adds	r3, r3, r3
 8003f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f8e:	4613      	mov	r3, r2
 8003f90:	eb42 0303 	adc.w	r3, r2, r3
 8003f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003f9e:	f7fc f91f 	bl	80001e0 <__aeabi_uldivmod>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8003fdc <UART_SetConfig+0x2d4>)
 8003fa8:	fba3 1302 	umull	r1, r3, r3, r2
 8003fac:	095b      	lsrs	r3, r3, #5
 8003fae:	2164      	movs	r1, #100	@ 0x64
 8003fb0:	fb01 f303 	mul.w	r3, r1, r3
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	3332      	adds	r3, #50	@ 0x32
 8003fba:	4a08      	ldr	r2, [pc, #32]	@ (8003fdc <UART_SetConfig+0x2d4>)
 8003fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc0:	095b      	lsrs	r3, r3, #5
 8003fc2:	f003 0207 	and.w	r2, r3, #7
 8003fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4422      	add	r2, r4
 8003fce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003fd0:	e106      	b.n	80041e0 <UART_SetConfig+0x4d8>
 8003fd2:	bf00      	nop
 8003fd4:	40011000 	.word	0x40011000
 8003fd8:	40011400 	.word	0x40011400
 8003fdc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fe0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003fea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003fee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003ff2:	4642      	mov	r2, r8
 8003ff4:	464b      	mov	r3, r9
 8003ff6:	1891      	adds	r1, r2, r2
 8003ff8:	6239      	str	r1, [r7, #32]
 8003ffa:	415b      	adcs	r3, r3
 8003ffc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ffe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004002:	4641      	mov	r1, r8
 8004004:	1854      	adds	r4, r2, r1
 8004006:	4649      	mov	r1, r9
 8004008:	eb43 0501 	adc.w	r5, r3, r1
 800400c:	f04f 0200 	mov.w	r2, #0
 8004010:	f04f 0300 	mov.w	r3, #0
 8004014:	00eb      	lsls	r3, r5, #3
 8004016:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800401a:	00e2      	lsls	r2, r4, #3
 800401c:	4614      	mov	r4, r2
 800401e:	461d      	mov	r5, r3
 8004020:	4643      	mov	r3, r8
 8004022:	18e3      	adds	r3, r4, r3
 8004024:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004028:	464b      	mov	r3, r9
 800402a:	eb45 0303 	adc.w	r3, r5, r3
 800402e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800403e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004042:	f04f 0200 	mov.w	r2, #0
 8004046:	f04f 0300 	mov.w	r3, #0
 800404a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800404e:	4629      	mov	r1, r5
 8004050:	008b      	lsls	r3, r1, #2
 8004052:	4621      	mov	r1, r4
 8004054:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004058:	4621      	mov	r1, r4
 800405a:	008a      	lsls	r2, r1, #2
 800405c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004060:	f7fc f8be 	bl	80001e0 <__aeabi_uldivmod>
 8004064:	4602      	mov	r2, r0
 8004066:	460b      	mov	r3, r1
 8004068:	4b60      	ldr	r3, [pc, #384]	@ (80041ec <UART_SetConfig+0x4e4>)
 800406a:	fba3 2302 	umull	r2, r3, r3, r2
 800406e:	095b      	lsrs	r3, r3, #5
 8004070:	011c      	lsls	r4, r3, #4
 8004072:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004076:	2200      	movs	r2, #0
 8004078:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800407c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004080:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004084:	4642      	mov	r2, r8
 8004086:	464b      	mov	r3, r9
 8004088:	1891      	adds	r1, r2, r2
 800408a:	61b9      	str	r1, [r7, #24]
 800408c:	415b      	adcs	r3, r3
 800408e:	61fb      	str	r3, [r7, #28]
 8004090:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004094:	4641      	mov	r1, r8
 8004096:	1851      	adds	r1, r2, r1
 8004098:	6139      	str	r1, [r7, #16]
 800409a:	4649      	mov	r1, r9
 800409c:	414b      	adcs	r3, r1
 800409e:	617b      	str	r3, [r7, #20]
 80040a0:	f04f 0200 	mov.w	r2, #0
 80040a4:	f04f 0300 	mov.w	r3, #0
 80040a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040ac:	4659      	mov	r1, fp
 80040ae:	00cb      	lsls	r3, r1, #3
 80040b0:	4651      	mov	r1, sl
 80040b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040b6:	4651      	mov	r1, sl
 80040b8:	00ca      	lsls	r2, r1, #3
 80040ba:	4610      	mov	r0, r2
 80040bc:	4619      	mov	r1, r3
 80040be:	4603      	mov	r3, r0
 80040c0:	4642      	mov	r2, r8
 80040c2:	189b      	adds	r3, r3, r2
 80040c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040c8:	464b      	mov	r3, r9
 80040ca:	460a      	mov	r2, r1
 80040cc:	eb42 0303 	adc.w	r3, r2, r3
 80040d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80040d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80040de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80040e0:	f04f 0200 	mov.w	r2, #0
 80040e4:	f04f 0300 	mov.w	r3, #0
 80040e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80040ec:	4649      	mov	r1, r9
 80040ee:	008b      	lsls	r3, r1, #2
 80040f0:	4641      	mov	r1, r8
 80040f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040f6:	4641      	mov	r1, r8
 80040f8:	008a      	lsls	r2, r1, #2
 80040fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80040fe:	f7fc f86f 	bl	80001e0 <__aeabi_uldivmod>
 8004102:	4602      	mov	r2, r0
 8004104:	460b      	mov	r3, r1
 8004106:	4611      	mov	r1, r2
 8004108:	4b38      	ldr	r3, [pc, #224]	@ (80041ec <UART_SetConfig+0x4e4>)
 800410a:	fba3 2301 	umull	r2, r3, r3, r1
 800410e:	095b      	lsrs	r3, r3, #5
 8004110:	2264      	movs	r2, #100	@ 0x64
 8004112:	fb02 f303 	mul.w	r3, r2, r3
 8004116:	1acb      	subs	r3, r1, r3
 8004118:	011b      	lsls	r3, r3, #4
 800411a:	3332      	adds	r3, #50	@ 0x32
 800411c:	4a33      	ldr	r2, [pc, #204]	@ (80041ec <UART_SetConfig+0x4e4>)
 800411e:	fba2 2303 	umull	r2, r3, r2, r3
 8004122:	095b      	lsrs	r3, r3, #5
 8004124:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004128:	441c      	add	r4, r3
 800412a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800412e:	2200      	movs	r2, #0
 8004130:	673b      	str	r3, [r7, #112]	@ 0x70
 8004132:	677a      	str	r2, [r7, #116]	@ 0x74
 8004134:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004138:	4642      	mov	r2, r8
 800413a:	464b      	mov	r3, r9
 800413c:	1891      	adds	r1, r2, r2
 800413e:	60b9      	str	r1, [r7, #8]
 8004140:	415b      	adcs	r3, r3
 8004142:	60fb      	str	r3, [r7, #12]
 8004144:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004148:	4641      	mov	r1, r8
 800414a:	1851      	adds	r1, r2, r1
 800414c:	6039      	str	r1, [r7, #0]
 800414e:	4649      	mov	r1, r9
 8004150:	414b      	adcs	r3, r1
 8004152:	607b      	str	r3, [r7, #4]
 8004154:	f04f 0200 	mov.w	r2, #0
 8004158:	f04f 0300 	mov.w	r3, #0
 800415c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004160:	4659      	mov	r1, fp
 8004162:	00cb      	lsls	r3, r1, #3
 8004164:	4651      	mov	r1, sl
 8004166:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800416a:	4651      	mov	r1, sl
 800416c:	00ca      	lsls	r2, r1, #3
 800416e:	4610      	mov	r0, r2
 8004170:	4619      	mov	r1, r3
 8004172:	4603      	mov	r3, r0
 8004174:	4642      	mov	r2, r8
 8004176:	189b      	adds	r3, r3, r2
 8004178:	66bb      	str	r3, [r7, #104]	@ 0x68
 800417a:	464b      	mov	r3, r9
 800417c:	460a      	mov	r2, r1
 800417e:	eb42 0303 	adc.w	r3, r2, r3
 8004182:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	663b      	str	r3, [r7, #96]	@ 0x60
 800418e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004190:	f04f 0200 	mov.w	r2, #0
 8004194:	f04f 0300 	mov.w	r3, #0
 8004198:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800419c:	4649      	mov	r1, r9
 800419e:	008b      	lsls	r3, r1, #2
 80041a0:	4641      	mov	r1, r8
 80041a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041a6:	4641      	mov	r1, r8
 80041a8:	008a      	lsls	r2, r1, #2
 80041aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80041ae:	f7fc f817 	bl	80001e0 <__aeabi_uldivmod>
 80041b2:	4602      	mov	r2, r0
 80041b4:	460b      	mov	r3, r1
 80041b6:	4b0d      	ldr	r3, [pc, #52]	@ (80041ec <UART_SetConfig+0x4e4>)
 80041b8:	fba3 1302 	umull	r1, r3, r3, r2
 80041bc:	095b      	lsrs	r3, r3, #5
 80041be:	2164      	movs	r1, #100	@ 0x64
 80041c0:	fb01 f303 	mul.w	r3, r1, r3
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	011b      	lsls	r3, r3, #4
 80041c8:	3332      	adds	r3, #50	@ 0x32
 80041ca:	4a08      	ldr	r2, [pc, #32]	@ (80041ec <UART_SetConfig+0x4e4>)
 80041cc:	fba2 2303 	umull	r2, r3, r2, r3
 80041d0:	095b      	lsrs	r3, r3, #5
 80041d2:	f003 020f 	and.w	r2, r3, #15
 80041d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4422      	add	r2, r4
 80041de:	609a      	str	r2, [r3, #8]
}
 80041e0:	bf00      	nop
 80041e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80041e6:	46bd      	mov	sp, r7
 80041e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ec:	51eb851f 	.word	0x51eb851f

080041f0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	4603      	mov	r3, r0
 80041f8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80041fa:	2300      	movs	r3, #0
 80041fc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80041fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004202:	2b84      	cmp	r3, #132	@ 0x84
 8004204:	d005      	beq.n	8004212 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004206:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	4413      	add	r3, r2
 800420e:	3303      	adds	r3, #3
 8004210:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004212:	68fb      	ldr	r3, [r7, #12]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3714      	adds	r7, #20
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004224:	f000 fafc 	bl	8004820 <vTaskStartScheduler>
  
  return osOK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	bd80      	pop	{r7, pc}

0800422e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800422e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004230:	b089      	sub	sp, #36	@ 0x24
 8004232:	af04      	add	r7, sp, #16
 8004234:	6078      	str	r0, [r7, #4]
 8004236:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d020      	beq.n	8004282 <osThreadCreate+0x54>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d01c      	beq.n	8004282 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685c      	ldr	r4, [r3, #4]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	691e      	ldr	r6, [r3, #16]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800425a:	4618      	mov	r0, r3
 800425c:	f7ff ffc8 	bl	80041f0 <makeFreeRtosPriority>
 8004260:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800426a:	9202      	str	r2, [sp, #8]
 800426c:	9301      	str	r3, [sp, #4]
 800426e:	9100      	str	r1, [sp, #0]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	4632      	mov	r2, r6
 8004274:	4629      	mov	r1, r5
 8004276:	4620      	mov	r0, r4
 8004278:	f000 f8ed 	bl	8004456 <xTaskCreateStatic>
 800427c:	4603      	mov	r3, r0
 800427e:	60fb      	str	r3, [r7, #12]
 8004280:	e01c      	b.n	80042bc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685c      	ldr	r4, [r3, #4]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800428e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004296:	4618      	mov	r0, r3
 8004298:	f7ff ffaa 	bl	80041f0 <makeFreeRtosPriority>
 800429c:	4602      	mov	r2, r0
 800429e:	f107 030c 	add.w	r3, r7, #12
 80042a2:	9301      	str	r3, [sp, #4]
 80042a4:	9200      	str	r2, [sp, #0]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	4632      	mov	r2, r6
 80042aa:	4629      	mov	r1, r5
 80042ac:	4620      	mov	r0, r4
 80042ae:	f000 f932 	bl	8004516 <xTaskCreate>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d001      	beq.n	80042bc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80042b8:	2300      	movs	r3, #0
 80042ba:	e000      	b.n	80042be <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80042bc:	68fb      	ldr	r3, [r7, #12]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3714      	adds	r7, #20
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080042c6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b084      	sub	sp, #16
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <osDelay+0x16>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	e000      	b.n	80042de <osDelay+0x18>
 80042dc:	2301      	movs	r3, #1
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 fa68 	bl	80047b4 <vTaskDelay>
  
  return osOK;
 80042e4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80042ee:	b480      	push	{r7}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f103 0208 	add.w	r2, r3, #8
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f04f 32ff 	mov.w	r2, #4294967295
 8004306:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f103 0208 	add.w	r2, r3, #8
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f103 0208 	add.w	r2, r3, #8
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004322:	bf00      	nop
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr

0800432e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800432e:	b480      	push	{r7}
 8004330:	b083      	sub	sp, #12
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	689a      	ldr	r2, [r3, #8]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	1c5a      	adds	r2, r3, #1
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	601a      	str	r2, [r3, #0]
}
 8004384:	bf00      	nop
 8004386:	3714      	adds	r7, #20
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a6:	d103      	bne.n	80043b0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	60fb      	str	r3, [r7, #12]
 80043ae:	e00c      	b.n	80043ca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	3308      	adds	r3, #8
 80043b4:	60fb      	str	r3, [r7, #12]
 80043b6:	e002      	b.n	80043be <vListInsert+0x2e>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68ba      	ldr	r2, [r7, #8]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d2f6      	bcs.n	80043b8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	683a      	ldr	r2, [r7, #0]
 80043d8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	1c5a      	adds	r2, r3, #1
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	601a      	str	r2, [r3, #0]
}
 80043f6:	bf00      	nop
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004402:	b480      	push	{r7}
 8004404:	b085      	sub	sp, #20
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	6892      	ldr	r2, [r2, #8]
 8004418:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	6852      	ldr	r2, [r2, #4]
 8004422:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	429a      	cmp	r2, r3
 800442c:	d103      	bne.n	8004436 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	689a      	ldr	r2, [r3, #8]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	1e5a      	subs	r2, r3, #1
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
}
 800444a:	4618      	mov	r0, r3
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr

08004456 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004456:	b580      	push	{r7, lr}
 8004458:	b08e      	sub	sp, #56	@ 0x38
 800445a:	af04      	add	r7, sp, #16
 800445c:	60f8      	str	r0, [r7, #12]
 800445e:	60b9      	str	r1, [r7, #8]
 8004460:	607a      	str	r2, [r7, #4]
 8004462:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10b      	bne.n	8004482 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800446a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800446e:	f383 8811 	msr	BASEPRI, r3
 8004472:	f3bf 8f6f 	isb	sy
 8004476:	f3bf 8f4f 	dsb	sy
 800447a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800447c:	bf00      	nop
 800447e:	bf00      	nop
 8004480:	e7fd      	b.n	800447e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10b      	bne.n	80044a0 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800448c:	f383 8811 	msr	BASEPRI, r3
 8004490:	f3bf 8f6f 	isb	sy
 8004494:	f3bf 8f4f 	dsb	sy
 8004498:	61fb      	str	r3, [r7, #28]
}
 800449a:	bf00      	nop
 800449c:	bf00      	nop
 800449e:	e7fd      	b.n	800449c <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80044a0:	23a0      	movs	r3, #160	@ 0xa0
 80044a2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	2ba0      	cmp	r3, #160	@ 0xa0
 80044a8:	d00b      	beq.n	80044c2 <xTaskCreateStatic+0x6c>
	__asm volatile
 80044aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ae:	f383 8811 	msr	BASEPRI, r3
 80044b2:	f3bf 8f6f 	isb	sy
 80044b6:	f3bf 8f4f 	dsb	sy
 80044ba:	61bb      	str	r3, [r7, #24]
}
 80044bc:	bf00      	nop
 80044be:	bf00      	nop
 80044c0:	e7fd      	b.n	80044be <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80044c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80044c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d01e      	beq.n	8004508 <xTaskCreateStatic+0xb2>
 80044ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d01b      	beq.n	8004508 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80044d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d2:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80044d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80044d8:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80044da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044dc:	2202      	movs	r2, #2
 80044de:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80044e2:	2300      	movs	r3, #0
 80044e4:	9303      	str	r3, [sp, #12]
 80044e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e8:	9302      	str	r3, [sp, #8]
 80044ea:	f107 0314 	add.w	r3, r7, #20
 80044ee:	9301      	str	r3, [sp, #4]
 80044f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	68b9      	ldr	r1, [r7, #8]
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 f850 	bl	80045a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004500:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004502:	f000 f8ed 	bl	80046e0 <prvAddNewTaskToReadyList>
 8004506:	e001      	b.n	800450c <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004508:	2300      	movs	r3, #0
 800450a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800450c:	697b      	ldr	r3, [r7, #20]
	}
 800450e:	4618      	mov	r0, r3
 8004510:	3728      	adds	r7, #40	@ 0x28
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004516:	b580      	push	{r7, lr}
 8004518:	b08c      	sub	sp, #48	@ 0x30
 800451a:	af04      	add	r7, sp, #16
 800451c:	60f8      	str	r0, [r7, #12]
 800451e:	60b9      	str	r1, [r7, #8]
 8004520:	603b      	str	r3, [r7, #0]
 8004522:	4613      	mov	r3, r2
 8004524:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004526:	88fb      	ldrh	r3, [r7, #6]
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4618      	mov	r0, r3
 800452c:	f000 fefc 	bl	8005328 <pvPortMalloc>
 8004530:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00e      	beq.n	8004556 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004538:	20a0      	movs	r0, #160	@ 0xa0
 800453a:	f000 fef5 	bl	8005328 <pvPortMalloc>
 800453e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d003      	beq.n	800454e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	631a      	str	r2, [r3, #48]	@ 0x30
 800454c:	e005      	b.n	800455a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800454e:	6978      	ldr	r0, [r7, #20]
 8004550:	f000 ffb8 	bl	80054c4 <vPortFree>
 8004554:	e001      	b.n	800455a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004556:	2300      	movs	r3, #0
 8004558:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d017      	beq.n	8004590 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004568:	88fa      	ldrh	r2, [r7, #6]
 800456a:	2300      	movs	r3, #0
 800456c:	9303      	str	r3, [sp, #12]
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	9302      	str	r3, [sp, #8]
 8004572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004574:	9301      	str	r3, [sp, #4]
 8004576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004578:	9300      	str	r3, [sp, #0]
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	68b9      	ldr	r1, [r7, #8]
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f000 f80e 	bl	80045a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004584:	69f8      	ldr	r0, [r7, #28]
 8004586:	f000 f8ab 	bl	80046e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800458a:	2301      	movs	r3, #1
 800458c:	61bb      	str	r3, [r7, #24]
 800458e:	e002      	b.n	8004596 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004590:	f04f 33ff 	mov.w	r3, #4294967295
 8004594:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004596:	69bb      	ldr	r3, [r7, #24]
	}
 8004598:	4618      	mov	r0, r3
 800459a:	3720      	adds	r7, #32
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b088      	sub	sp, #32
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
 80045ac:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80045ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80045b8:	3b01      	subs	r3, #1
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	f023 0307 	bic.w	r3, r3, #7
 80045c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	f003 0307 	and.w	r3, r3, #7
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00b      	beq.n	80045ea <prvInitialiseNewTask+0x4a>
	__asm volatile
 80045d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045d6:	f383 8811 	msr	BASEPRI, r3
 80045da:	f3bf 8f6f 	isb	sy
 80045de:	f3bf 8f4f 	dsb	sy
 80045e2:	617b      	str	r3, [r7, #20]
}
 80045e4:	bf00      	nop
 80045e6:	bf00      	nop
 80045e8:	e7fd      	b.n	80045e6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d01f      	beq.n	8004630 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045f0:	2300      	movs	r3, #0
 80045f2:	61fb      	str	r3, [r7, #28]
 80045f4:	e012      	b.n	800461c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	4413      	add	r3, r2
 80045fc:	7819      	ldrb	r1, [r3, #0]
 80045fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	4413      	add	r3, r2
 8004604:	3334      	adds	r3, #52	@ 0x34
 8004606:	460a      	mov	r2, r1
 8004608:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	4413      	add	r3, r2
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d006      	beq.n	8004624 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	3301      	adds	r3, #1
 800461a:	61fb      	str	r3, [r7, #28]
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	2b0f      	cmp	r3, #15
 8004620:	d9e9      	bls.n	80045f6 <prvInitialiseNewTask+0x56>
 8004622:	e000      	b.n	8004626 <prvInitialiseNewTask+0x86>
			{
				break;
 8004624:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800462e:	e003      	b.n	8004638 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004632:	2200      	movs	r2, #0
 8004634:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800463a:	2b06      	cmp	r3, #6
 800463c:	d901      	bls.n	8004642 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800463e:	2306      	movs	r3, #6
 8004640:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004644:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004646:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800464a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800464c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800464e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004650:	2200      	movs	r2, #0
 8004652:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004656:	3304      	adds	r3, #4
 8004658:	4618      	mov	r0, r3
 800465a:	f7ff fe68 	bl	800432e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800465e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004660:	3318      	adds	r3, #24
 8004662:	4618      	mov	r0, r3
 8004664:	f7ff fe63 	bl	800432e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800466a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800466c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800466e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004670:	f1c3 0207 	rsb	r2, r3, #7
 8004674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004676:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800467c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800467e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004680:	2200      	movs	r2, #0
 8004682:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004688:	2200      	movs	r2, #0
 800468a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800468e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004690:	334c      	adds	r3, #76	@ 0x4c
 8004692:	224c      	movs	r2, #76	@ 0x4c
 8004694:	2100      	movs	r1, #0
 8004696:	4618      	mov	r0, r3
 8004698:	f001 f8ea 	bl	8005870 <memset>
 800469c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800469e:	4a0d      	ldr	r2, [pc, #52]	@ (80046d4 <prvInitialiseNewTask+0x134>)
 80046a0:	651a      	str	r2, [r3, #80]	@ 0x50
 80046a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a4:	4a0c      	ldr	r2, [pc, #48]	@ (80046d8 <prvInitialiseNewTask+0x138>)
 80046a6:	655a      	str	r2, [r3, #84]	@ 0x54
 80046a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046aa:	4a0c      	ldr	r2, [pc, #48]	@ (80046dc <prvInitialiseNewTask+0x13c>)
 80046ac:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	68f9      	ldr	r1, [r7, #12]
 80046b2:	69b8      	ldr	r0, [r7, #24]
 80046b4:	f000 fc2a 	bl	8004f0c <pxPortInitialiseStack>
 80046b8:	4602      	mov	r2, r0
 80046ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80046be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d002      	beq.n	80046ca <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80046c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046ca:	bf00      	nop
 80046cc:	3720      	adds	r7, #32
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	200042b4 	.word	0x200042b4
 80046d8:	2000431c 	.word	0x2000431c
 80046dc:	20004384 	.word	0x20004384

080046e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80046e8:	f000 fd3e 	bl	8005168 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80046ec:	4b2a      	ldr	r3, [pc, #168]	@ (8004798 <prvAddNewTaskToReadyList+0xb8>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	3301      	adds	r3, #1
 80046f2:	4a29      	ldr	r2, [pc, #164]	@ (8004798 <prvAddNewTaskToReadyList+0xb8>)
 80046f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80046f6:	4b29      	ldr	r3, [pc, #164]	@ (800479c <prvAddNewTaskToReadyList+0xbc>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d109      	bne.n	8004712 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80046fe:	4a27      	ldr	r2, [pc, #156]	@ (800479c <prvAddNewTaskToReadyList+0xbc>)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004704:	4b24      	ldr	r3, [pc, #144]	@ (8004798 <prvAddNewTaskToReadyList+0xb8>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d110      	bne.n	800472e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800470c:	f000 fad4 	bl	8004cb8 <prvInitialiseTaskLists>
 8004710:	e00d      	b.n	800472e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004712:	4b23      	ldr	r3, [pc, #140]	@ (80047a0 <prvAddNewTaskToReadyList+0xc0>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d109      	bne.n	800472e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800471a:	4b20      	ldr	r3, [pc, #128]	@ (800479c <prvAddNewTaskToReadyList+0xbc>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004724:	429a      	cmp	r2, r3
 8004726:	d802      	bhi.n	800472e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004728:	4a1c      	ldr	r2, [pc, #112]	@ (800479c <prvAddNewTaskToReadyList+0xbc>)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800472e:	4b1d      	ldr	r3, [pc, #116]	@ (80047a4 <prvAddNewTaskToReadyList+0xc4>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	3301      	adds	r3, #1
 8004734:	4a1b      	ldr	r2, [pc, #108]	@ (80047a4 <prvAddNewTaskToReadyList+0xc4>)
 8004736:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800473c:	2201      	movs	r2, #1
 800473e:	409a      	lsls	r2, r3
 8004740:	4b19      	ldr	r3, [pc, #100]	@ (80047a8 <prvAddNewTaskToReadyList+0xc8>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4313      	orrs	r3, r2
 8004746:	4a18      	ldr	r2, [pc, #96]	@ (80047a8 <prvAddNewTaskToReadyList+0xc8>)
 8004748:	6013      	str	r3, [r2, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800474e:	4613      	mov	r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	4413      	add	r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	4a15      	ldr	r2, [pc, #84]	@ (80047ac <prvAddNewTaskToReadyList+0xcc>)
 8004758:	441a      	add	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	3304      	adds	r3, #4
 800475e:	4619      	mov	r1, r3
 8004760:	4610      	mov	r0, r2
 8004762:	f7ff fdf1 	bl	8004348 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004766:	f000 fd31 	bl	80051cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800476a:	4b0d      	ldr	r3, [pc, #52]	@ (80047a0 <prvAddNewTaskToReadyList+0xc0>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00e      	beq.n	8004790 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004772:	4b0a      	ldr	r3, [pc, #40]	@ (800479c <prvAddNewTaskToReadyList+0xbc>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800477c:	429a      	cmp	r2, r3
 800477e:	d207      	bcs.n	8004790 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004780:	4b0b      	ldr	r3, [pc, #44]	@ (80047b0 <prvAddNewTaskToReadyList+0xd0>)
 8004782:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004790:	bf00      	nop
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	20000658 	.word	0x20000658
 800479c:	20000558 	.word	0x20000558
 80047a0:	20000664 	.word	0x20000664
 80047a4:	20000674 	.word	0x20000674
 80047a8:	20000660 	.word	0x20000660
 80047ac:	2000055c 	.word	0x2000055c
 80047b0:	e000ed04 	.word	0xe000ed04

080047b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80047bc:	2300      	movs	r3, #0
 80047be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d018      	beq.n	80047f8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80047c6:	4b14      	ldr	r3, [pc, #80]	@ (8004818 <vTaskDelay+0x64>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00b      	beq.n	80047e6 <vTaskDelay+0x32>
	__asm volatile
 80047ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d2:	f383 8811 	msr	BASEPRI, r3
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	f3bf 8f4f 	dsb	sy
 80047de:	60bb      	str	r3, [r7, #8]
}
 80047e0:	bf00      	nop
 80047e2:	bf00      	nop
 80047e4:	e7fd      	b.n	80047e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80047e6:	f000 f885 	bl	80048f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80047ea:	2100      	movs	r1, #0
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 fb27 	bl	8004e40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80047f2:	f000 f88d 	bl	8004910 <xTaskResumeAll>
 80047f6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d107      	bne.n	800480e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80047fe:	4b07      	ldr	r3, [pc, #28]	@ (800481c <vTaskDelay+0x68>)
 8004800:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	f3bf 8f4f 	dsb	sy
 800480a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800480e:	bf00      	nop
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	20000680 	.word	0x20000680
 800481c:	e000ed04 	.word	0xe000ed04

08004820 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b08a      	sub	sp, #40	@ 0x28
 8004824:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004826:	2300      	movs	r3, #0
 8004828:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800482a:	2300      	movs	r3, #0
 800482c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800482e:	463a      	mov	r2, r7
 8004830:	1d39      	adds	r1, r7, #4
 8004832:	f107 0308 	add.w	r3, r7, #8
 8004836:	4618      	mov	r0, r3
 8004838:	f7fb fe68 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800483c:	6839      	ldr	r1, [r7, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	9202      	str	r2, [sp, #8]
 8004844:	9301      	str	r3, [sp, #4]
 8004846:	2300      	movs	r3, #0
 8004848:	9300      	str	r3, [sp, #0]
 800484a:	2300      	movs	r3, #0
 800484c:	460a      	mov	r2, r1
 800484e:	4921      	ldr	r1, [pc, #132]	@ (80048d4 <vTaskStartScheduler+0xb4>)
 8004850:	4821      	ldr	r0, [pc, #132]	@ (80048d8 <vTaskStartScheduler+0xb8>)
 8004852:	f7ff fe00 	bl	8004456 <xTaskCreateStatic>
 8004856:	4603      	mov	r3, r0
 8004858:	4a20      	ldr	r2, [pc, #128]	@ (80048dc <vTaskStartScheduler+0xbc>)
 800485a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800485c:	4b1f      	ldr	r3, [pc, #124]	@ (80048dc <vTaskStartScheduler+0xbc>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d002      	beq.n	800486a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004864:	2301      	movs	r3, #1
 8004866:	617b      	str	r3, [r7, #20]
 8004868:	e001      	b.n	800486e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800486a:	2300      	movs	r3, #0
 800486c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d11b      	bne.n	80048ac <vTaskStartScheduler+0x8c>
	__asm volatile
 8004874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004878:	f383 8811 	msr	BASEPRI, r3
 800487c:	f3bf 8f6f 	isb	sy
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	613b      	str	r3, [r7, #16]
}
 8004886:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004888:	4b15      	ldr	r3, [pc, #84]	@ (80048e0 <vTaskStartScheduler+0xc0>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	334c      	adds	r3, #76	@ 0x4c
 800488e:	4a15      	ldr	r2, [pc, #84]	@ (80048e4 <vTaskStartScheduler+0xc4>)
 8004890:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004892:	4b15      	ldr	r3, [pc, #84]	@ (80048e8 <vTaskStartScheduler+0xc8>)
 8004894:	f04f 32ff 	mov.w	r2, #4294967295
 8004898:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800489a:	4b14      	ldr	r3, [pc, #80]	@ (80048ec <vTaskStartScheduler+0xcc>)
 800489c:	2201      	movs	r2, #1
 800489e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80048a0:	4b13      	ldr	r3, [pc, #76]	@ (80048f0 <vTaskStartScheduler+0xd0>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80048a6:	f000 fbbb 	bl	8005020 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80048aa:	e00f      	b.n	80048cc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b2:	d10b      	bne.n	80048cc <vTaskStartScheduler+0xac>
	__asm volatile
 80048b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b8:	f383 8811 	msr	BASEPRI, r3
 80048bc:	f3bf 8f6f 	isb	sy
 80048c0:	f3bf 8f4f 	dsb	sy
 80048c4:	60fb      	str	r3, [r7, #12]
}
 80048c6:	bf00      	nop
 80048c8:	bf00      	nop
 80048ca:	e7fd      	b.n	80048c8 <vTaskStartScheduler+0xa8>
}
 80048cc:	bf00      	nop
 80048ce:	3718      	adds	r7, #24
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	08005b34 	.word	0x08005b34
 80048d8:	08004c89 	.word	0x08004c89
 80048dc:	2000067c 	.word	0x2000067c
 80048e0:	20000558 	.word	0x20000558
 80048e4:	20000088 	.word	0x20000088
 80048e8:	20000678 	.word	0x20000678
 80048ec:	20000664 	.word	0x20000664
 80048f0:	2000065c 	.word	0x2000065c

080048f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80048f8:	4b04      	ldr	r3, [pc, #16]	@ (800490c <vTaskSuspendAll+0x18>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	3301      	adds	r3, #1
 80048fe:	4a03      	ldr	r2, [pc, #12]	@ (800490c <vTaskSuspendAll+0x18>)
 8004900:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004902:	bf00      	nop
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	20000680 	.word	0x20000680

08004910 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004916:	2300      	movs	r3, #0
 8004918:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800491a:	2300      	movs	r3, #0
 800491c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800491e:	4b42      	ldr	r3, [pc, #264]	@ (8004a28 <xTaskResumeAll+0x118>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10b      	bne.n	800493e <xTaskResumeAll+0x2e>
	__asm volatile
 8004926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800492a:	f383 8811 	msr	BASEPRI, r3
 800492e:	f3bf 8f6f 	isb	sy
 8004932:	f3bf 8f4f 	dsb	sy
 8004936:	603b      	str	r3, [r7, #0]
}
 8004938:	bf00      	nop
 800493a:	bf00      	nop
 800493c:	e7fd      	b.n	800493a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800493e:	f000 fc13 	bl	8005168 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004942:	4b39      	ldr	r3, [pc, #228]	@ (8004a28 <xTaskResumeAll+0x118>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	3b01      	subs	r3, #1
 8004948:	4a37      	ldr	r2, [pc, #220]	@ (8004a28 <xTaskResumeAll+0x118>)
 800494a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800494c:	4b36      	ldr	r3, [pc, #216]	@ (8004a28 <xTaskResumeAll+0x118>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d161      	bne.n	8004a18 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004954:	4b35      	ldr	r3, [pc, #212]	@ (8004a2c <xTaskResumeAll+0x11c>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d05d      	beq.n	8004a18 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800495c:	e02e      	b.n	80049bc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800495e:	4b34      	ldr	r3, [pc, #208]	@ (8004a30 <xTaskResumeAll+0x120>)
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	3318      	adds	r3, #24
 800496a:	4618      	mov	r0, r3
 800496c:	f7ff fd49 	bl	8004402 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	3304      	adds	r3, #4
 8004974:	4618      	mov	r0, r3
 8004976:	f7ff fd44 	bl	8004402 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497e:	2201      	movs	r2, #1
 8004980:	409a      	lsls	r2, r3
 8004982:	4b2c      	ldr	r3, [pc, #176]	@ (8004a34 <xTaskResumeAll+0x124>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4313      	orrs	r3, r2
 8004988:	4a2a      	ldr	r2, [pc, #168]	@ (8004a34 <xTaskResumeAll+0x124>)
 800498a:	6013      	str	r3, [r2, #0]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004990:	4613      	mov	r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4413      	add	r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4a27      	ldr	r2, [pc, #156]	@ (8004a38 <xTaskResumeAll+0x128>)
 800499a:	441a      	add	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	3304      	adds	r3, #4
 80049a0:	4619      	mov	r1, r3
 80049a2:	4610      	mov	r0, r2
 80049a4:	f7ff fcd0 	bl	8004348 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049ac:	4b23      	ldr	r3, [pc, #140]	@ (8004a3c <xTaskResumeAll+0x12c>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d302      	bcc.n	80049bc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80049b6:	4b22      	ldr	r3, [pc, #136]	@ (8004a40 <xTaskResumeAll+0x130>)
 80049b8:	2201      	movs	r2, #1
 80049ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049bc:	4b1c      	ldr	r3, [pc, #112]	@ (8004a30 <xTaskResumeAll+0x120>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1cc      	bne.n	800495e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80049ca:	f000 fa19 	bl	8004e00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80049ce:	4b1d      	ldr	r3, [pc, #116]	@ (8004a44 <xTaskResumeAll+0x134>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d010      	beq.n	80049fc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80049da:	f000 f837 	bl	8004a4c <xTaskIncrementTick>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d002      	beq.n	80049ea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80049e4:	4b16      	ldr	r3, [pc, #88]	@ (8004a40 <xTaskResumeAll+0x130>)
 80049e6:	2201      	movs	r2, #1
 80049e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	3b01      	subs	r3, #1
 80049ee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1f1      	bne.n	80049da <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80049f6:	4b13      	ldr	r3, [pc, #76]	@ (8004a44 <xTaskResumeAll+0x134>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80049fc:	4b10      	ldr	r3, [pc, #64]	@ (8004a40 <xTaskResumeAll+0x130>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d009      	beq.n	8004a18 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004a04:	2301      	movs	r3, #1
 8004a06:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004a08:	4b0f      	ldr	r3, [pc, #60]	@ (8004a48 <xTaskResumeAll+0x138>)
 8004a0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a0e:	601a      	str	r2, [r3, #0]
 8004a10:	f3bf 8f4f 	dsb	sy
 8004a14:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a18:	f000 fbd8 	bl	80051cc <vPortExitCritical>

	return xAlreadyYielded;
 8004a1c:	68bb      	ldr	r3, [r7, #8]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	20000680 	.word	0x20000680
 8004a2c:	20000658 	.word	0x20000658
 8004a30:	20000618 	.word	0x20000618
 8004a34:	20000660 	.word	0x20000660
 8004a38:	2000055c 	.word	0x2000055c
 8004a3c:	20000558 	.word	0x20000558
 8004a40:	2000066c 	.word	0x2000066c
 8004a44:	20000668 	.word	0x20000668
 8004a48:	e000ed04 	.word	0xe000ed04

08004a4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004a52:	2300      	movs	r3, #0
 8004a54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a56:	4b4f      	ldr	r3, [pc, #316]	@ (8004b94 <xTaskIncrementTick+0x148>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f040 808f 	bne.w	8004b7e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004a60:	4b4d      	ldr	r3, [pc, #308]	@ (8004b98 <xTaskIncrementTick+0x14c>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	3301      	adds	r3, #1
 8004a66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004a68:	4a4b      	ldr	r2, [pc, #300]	@ (8004b98 <xTaskIncrementTick+0x14c>)
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d121      	bne.n	8004ab8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004a74:	4b49      	ldr	r3, [pc, #292]	@ (8004b9c <xTaskIncrementTick+0x150>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00b      	beq.n	8004a96 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a82:	f383 8811 	msr	BASEPRI, r3
 8004a86:	f3bf 8f6f 	isb	sy
 8004a8a:	f3bf 8f4f 	dsb	sy
 8004a8e:	603b      	str	r3, [r7, #0]
}
 8004a90:	bf00      	nop
 8004a92:	bf00      	nop
 8004a94:	e7fd      	b.n	8004a92 <xTaskIncrementTick+0x46>
 8004a96:	4b41      	ldr	r3, [pc, #260]	@ (8004b9c <xTaskIncrementTick+0x150>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	60fb      	str	r3, [r7, #12]
 8004a9c:	4b40      	ldr	r3, [pc, #256]	@ (8004ba0 <xTaskIncrementTick+0x154>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a3e      	ldr	r2, [pc, #248]	@ (8004b9c <xTaskIncrementTick+0x150>)
 8004aa2:	6013      	str	r3, [r2, #0]
 8004aa4:	4a3e      	ldr	r2, [pc, #248]	@ (8004ba0 <xTaskIncrementTick+0x154>)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	4b3e      	ldr	r3, [pc, #248]	@ (8004ba4 <xTaskIncrementTick+0x158>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	4a3c      	ldr	r2, [pc, #240]	@ (8004ba4 <xTaskIncrementTick+0x158>)
 8004ab2:	6013      	str	r3, [r2, #0]
 8004ab4:	f000 f9a4 	bl	8004e00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ab8:	4b3b      	ldr	r3, [pc, #236]	@ (8004ba8 <xTaskIncrementTick+0x15c>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d348      	bcc.n	8004b54 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ac2:	4b36      	ldr	r3, [pc, #216]	@ (8004b9c <xTaskIncrementTick+0x150>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d104      	bne.n	8004ad6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004acc:	4b36      	ldr	r3, [pc, #216]	@ (8004ba8 <xTaskIncrementTick+0x15c>)
 8004ace:	f04f 32ff 	mov.w	r2, #4294967295
 8004ad2:	601a      	str	r2, [r3, #0]
					break;
 8004ad4:	e03e      	b.n	8004b54 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ad6:	4b31      	ldr	r3, [pc, #196]	@ (8004b9c <xTaskIncrementTick+0x150>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d203      	bcs.n	8004af6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004aee:	4a2e      	ldr	r2, [pc, #184]	@ (8004ba8 <xTaskIncrementTick+0x15c>)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004af4:	e02e      	b.n	8004b54 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	3304      	adds	r3, #4
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7ff fc81 	bl	8004402 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d004      	beq.n	8004b12 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	3318      	adds	r3, #24
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7ff fc78 	bl	8004402 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b16:	2201      	movs	r2, #1
 8004b18:	409a      	lsls	r2, r3
 8004b1a:	4b24      	ldr	r3, [pc, #144]	@ (8004bac <xTaskIncrementTick+0x160>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	4a22      	ldr	r2, [pc, #136]	@ (8004bac <xTaskIncrementTick+0x160>)
 8004b22:	6013      	str	r3, [r2, #0]
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b28:	4613      	mov	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4a1f      	ldr	r2, [pc, #124]	@ (8004bb0 <xTaskIncrementTick+0x164>)
 8004b32:	441a      	add	r2, r3
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	3304      	adds	r3, #4
 8004b38:	4619      	mov	r1, r3
 8004b3a:	4610      	mov	r0, r2
 8004b3c:	f7ff fc04 	bl	8004348 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b44:	4b1b      	ldr	r3, [pc, #108]	@ (8004bb4 <xTaskIncrementTick+0x168>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d3b9      	bcc.n	8004ac2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b52:	e7b6      	b.n	8004ac2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004b54:	4b17      	ldr	r3, [pc, #92]	@ (8004bb4 <xTaskIncrementTick+0x168>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b5a:	4915      	ldr	r1, [pc, #84]	@ (8004bb0 <xTaskIncrementTick+0x164>)
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	440b      	add	r3, r1
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d901      	bls.n	8004b70 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004b70:	4b11      	ldr	r3, [pc, #68]	@ (8004bb8 <xTaskIncrementTick+0x16c>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d007      	beq.n	8004b88 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	617b      	str	r3, [r7, #20]
 8004b7c:	e004      	b.n	8004b88 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8004bbc <xTaskIncrementTick+0x170>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	3301      	adds	r3, #1
 8004b84:	4a0d      	ldr	r2, [pc, #52]	@ (8004bbc <xTaskIncrementTick+0x170>)
 8004b86:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004b88:	697b      	ldr	r3, [r7, #20]
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3718      	adds	r7, #24
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	20000680 	.word	0x20000680
 8004b98:	2000065c 	.word	0x2000065c
 8004b9c:	20000610 	.word	0x20000610
 8004ba0:	20000614 	.word	0x20000614
 8004ba4:	20000670 	.word	0x20000670
 8004ba8:	20000678 	.word	0x20000678
 8004bac:	20000660 	.word	0x20000660
 8004bb0:	2000055c 	.word	0x2000055c
 8004bb4:	20000558 	.word	0x20000558
 8004bb8:	2000066c 	.word	0x2000066c
 8004bbc:	20000668 	.word	0x20000668

08004bc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b087      	sub	sp, #28
 8004bc4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004bc6:	4b2a      	ldr	r3, [pc, #168]	@ (8004c70 <vTaskSwitchContext+0xb0>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004bce:	4b29      	ldr	r3, [pc, #164]	@ (8004c74 <vTaskSwitchContext+0xb4>)
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004bd4:	e045      	b.n	8004c62 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004bd6:	4b27      	ldr	r3, [pc, #156]	@ (8004c74 <vTaskSwitchContext+0xb4>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bdc:	4b26      	ldr	r3, [pc, #152]	@ (8004c78 <vTaskSwitchContext+0xb8>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	fab3 f383 	clz	r3, r3
 8004be8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004bea:	7afb      	ldrb	r3, [r7, #11]
 8004bec:	f1c3 031f 	rsb	r3, r3, #31
 8004bf0:	617b      	str	r3, [r7, #20]
 8004bf2:	4922      	ldr	r1, [pc, #136]	@ (8004c7c <vTaskSwitchContext+0xbc>)
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4413      	add	r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	440b      	add	r3, r1
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10b      	bne.n	8004c1e <vTaskSwitchContext+0x5e>
	__asm volatile
 8004c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c0a:	f383 8811 	msr	BASEPRI, r3
 8004c0e:	f3bf 8f6f 	isb	sy
 8004c12:	f3bf 8f4f 	dsb	sy
 8004c16:	607b      	str	r3, [r7, #4]
}
 8004c18:	bf00      	nop
 8004c1a:	bf00      	nop
 8004c1c:	e7fd      	b.n	8004c1a <vTaskSwitchContext+0x5a>
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	4613      	mov	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4413      	add	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	4a14      	ldr	r2, [pc, #80]	@ (8004c7c <vTaskSwitchContext+0xbc>)
 8004c2a:	4413      	add	r3, r2
 8004c2c:	613b      	str	r3, [r7, #16]
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	605a      	str	r2, [r3, #4]
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	685a      	ldr	r2, [r3, #4]
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	3308      	adds	r3, #8
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d104      	bne.n	8004c4e <vTaskSwitchContext+0x8e>
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	685a      	ldr	r2, [r3, #4]
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	605a      	str	r2, [r3, #4]
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	4a0a      	ldr	r2, [pc, #40]	@ (8004c80 <vTaskSwitchContext+0xc0>)
 8004c56:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004c58:	4b09      	ldr	r3, [pc, #36]	@ (8004c80 <vTaskSwitchContext+0xc0>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	334c      	adds	r3, #76	@ 0x4c
 8004c5e:	4a09      	ldr	r2, [pc, #36]	@ (8004c84 <vTaskSwitchContext+0xc4>)
 8004c60:	6013      	str	r3, [r2, #0]
}
 8004c62:	bf00      	nop
 8004c64:	371c      	adds	r7, #28
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	20000680 	.word	0x20000680
 8004c74:	2000066c 	.word	0x2000066c
 8004c78:	20000660 	.word	0x20000660
 8004c7c:	2000055c 	.word	0x2000055c
 8004c80:	20000558 	.word	0x20000558
 8004c84:	20000088 	.word	0x20000088

08004c88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004c90:	f000 f852 	bl	8004d38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004c94:	4b06      	ldr	r3, [pc, #24]	@ (8004cb0 <prvIdleTask+0x28>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d9f9      	bls.n	8004c90 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004c9c:	4b05      	ldr	r3, [pc, #20]	@ (8004cb4 <prvIdleTask+0x2c>)
 8004c9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	f3bf 8f4f 	dsb	sy
 8004ca8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004cac:	e7f0      	b.n	8004c90 <prvIdleTask+0x8>
 8004cae:	bf00      	nop
 8004cb0:	2000055c 	.word	0x2000055c
 8004cb4:	e000ed04 	.word	0xe000ed04

08004cb8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	607b      	str	r3, [r7, #4]
 8004cc2:	e00c      	b.n	8004cde <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	4413      	add	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4a12      	ldr	r2, [pc, #72]	@ (8004d18 <prvInitialiseTaskLists+0x60>)
 8004cd0:	4413      	add	r3, r2
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7ff fb0b 	bl	80042ee <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	3301      	adds	r3, #1
 8004cdc:	607b      	str	r3, [r7, #4]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b06      	cmp	r3, #6
 8004ce2:	d9ef      	bls.n	8004cc4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ce4:	480d      	ldr	r0, [pc, #52]	@ (8004d1c <prvInitialiseTaskLists+0x64>)
 8004ce6:	f7ff fb02 	bl	80042ee <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004cea:	480d      	ldr	r0, [pc, #52]	@ (8004d20 <prvInitialiseTaskLists+0x68>)
 8004cec:	f7ff faff 	bl	80042ee <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004cf0:	480c      	ldr	r0, [pc, #48]	@ (8004d24 <prvInitialiseTaskLists+0x6c>)
 8004cf2:	f7ff fafc 	bl	80042ee <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004cf6:	480c      	ldr	r0, [pc, #48]	@ (8004d28 <prvInitialiseTaskLists+0x70>)
 8004cf8:	f7ff faf9 	bl	80042ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004cfc:	480b      	ldr	r0, [pc, #44]	@ (8004d2c <prvInitialiseTaskLists+0x74>)
 8004cfe:	f7ff faf6 	bl	80042ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d02:	4b0b      	ldr	r3, [pc, #44]	@ (8004d30 <prvInitialiseTaskLists+0x78>)
 8004d04:	4a05      	ldr	r2, [pc, #20]	@ (8004d1c <prvInitialiseTaskLists+0x64>)
 8004d06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d08:	4b0a      	ldr	r3, [pc, #40]	@ (8004d34 <prvInitialiseTaskLists+0x7c>)
 8004d0a:	4a05      	ldr	r2, [pc, #20]	@ (8004d20 <prvInitialiseTaskLists+0x68>)
 8004d0c:	601a      	str	r2, [r3, #0]
}
 8004d0e:	bf00      	nop
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	2000055c 	.word	0x2000055c
 8004d1c:	200005e8 	.word	0x200005e8
 8004d20:	200005fc 	.word	0x200005fc
 8004d24:	20000618 	.word	0x20000618
 8004d28:	2000062c 	.word	0x2000062c
 8004d2c:	20000644 	.word	0x20000644
 8004d30:	20000610 	.word	0x20000610
 8004d34:	20000614 	.word	0x20000614

08004d38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d3e:	e019      	b.n	8004d74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004d40:	f000 fa12 	bl	8005168 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d44:	4b10      	ldr	r3, [pc, #64]	@ (8004d88 <prvCheckTasksWaitingTermination+0x50>)
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	3304      	adds	r3, #4
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7ff fb56 	bl	8004402 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d56:	4b0d      	ldr	r3, [pc, #52]	@ (8004d8c <prvCheckTasksWaitingTermination+0x54>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	4a0b      	ldr	r2, [pc, #44]	@ (8004d8c <prvCheckTasksWaitingTermination+0x54>)
 8004d5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d60:	4b0b      	ldr	r3, [pc, #44]	@ (8004d90 <prvCheckTasksWaitingTermination+0x58>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	3b01      	subs	r3, #1
 8004d66:	4a0a      	ldr	r2, [pc, #40]	@ (8004d90 <prvCheckTasksWaitingTermination+0x58>)
 8004d68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004d6a:	f000 fa2f 	bl	80051cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f810 	bl	8004d94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d74:	4b06      	ldr	r3, [pc, #24]	@ (8004d90 <prvCheckTasksWaitingTermination+0x58>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1e1      	bne.n	8004d40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004d7c:	bf00      	nop
 8004d7e:	bf00      	nop
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	2000062c 	.word	0x2000062c
 8004d8c:	20000658 	.word	0x20000658
 8004d90:	20000640 	.word	0x20000640

08004d94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	334c      	adds	r3, #76	@ 0x4c
 8004da0:	4618      	mov	r0, r3
 8004da2:	f000 fd6d 	bl	8005880 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d108      	bne.n	8004dc2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004db4:	4618      	mov	r0, r3
 8004db6:	f000 fb85 	bl	80054c4 <vPortFree>
				vPortFree( pxTCB );
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 fb82 	bl	80054c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004dc0:	e019      	b.n	8004df6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d103      	bne.n	8004dd4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 fb79 	bl	80054c4 <vPortFree>
	}
 8004dd2:	e010      	b.n	8004df6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d00b      	beq.n	8004df6 <prvDeleteTCB+0x62>
	__asm volatile
 8004dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de2:	f383 8811 	msr	BASEPRI, r3
 8004de6:	f3bf 8f6f 	isb	sy
 8004dea:	f3bf 8f4f 	dsb	sy
 8004dee:	60fb      	str	r3, [r7, #12]
}
 8004df0:	bf00      	nop
 8004df2:	bf00      	nop
 8004df4:	e7fd      	b.n	8004df2 <prvDeleteTCB+0x5e>
	}
 8004df6:	bf00      	nop
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
	...

08004e00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e06:	4b0c      	ldr	r3, [pc, #48]	@ (8004e38 <prvResetNextTaskUnblockTime+0x38>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d104      	bne.n	8004e1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e10:	4b0a      	ldr	r3, [pc, #40]	@ (8004e3c <prvResetNextTaskUnblockTime+0x3c>)
 8004e12:	f04f 32ff 	mov.w	r2, #4294967295
 8004e16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e18:	e008      	b.n	8004e2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e1a:	4b07      	ldr	r3, [pc, #28]	@ (8004e38 <prvResetNextTaskUnblockTime+0x38>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	4a04      	ldr	r2, [pc, #16]	@ (8004e3c <prvResetNextTaskUnblockTime+0x3c>)
 8004e2a:	6013      	str	r3, [r2, #0]
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr
 8004e38:	20000610 	.word	0x20000610
 8004e3c:	20000678 	.word	0x20000678

08004e40 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e4a:	4b29      	ldr	r3, [pc, #164]	@ (8004ef0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e50:	4b28      	ldr	r3, [pc, #160]	@ (8004ef4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	3304      	adds	r3, #4
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7ff fad3 	bl	8004402 <uxListRemove>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10b      	bne.n	8004e7a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004e62:	4b24      	ldr	r3, [pc, #144]	@ (8004ef4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e68:	2201      	movs	r2, #1
 8004e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6e:	43da      	mvns	r2, r3
 8004e70:	4b21      	ldr	r3, [pc, #132]	@ (8004ef8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4013      	ands	r3, r2
 8004e76:	4a20      	ldr	r2, [pc, #128]	@ (8004ef8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004e78:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e80:	d10a      	bne.n	8004e98 <prvAddCurrentTaskToDelayedList+0x58>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d007      	beq.n	8004e98 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e88:	4b1a      	ldr	r3, [pc, #104]	@ (8004ef4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	3304      	adds	r3, #4
 8004e8e:	4619      	mov	r1, r3
 8004e90:	481a      	ldr	r0, [pc, #104]	@ (8004efc <prvAddCurrentTaskToDelayedList+0xbc>)
 8004e92:	f7ff fa59 	bl	8004348 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004e96:	e026      	b.n	8004ee6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ea0:	4b14      	ldr	r3, [pc, #80]	@ (8004ef4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d209      	bcs.n	8004ec4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004eb0:	4b13      	ldr	r3, [pc, #76]	@ (8004f00 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8004ef4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	3304      	adds	r3, #4
 8004eba:	4619      	mov	r1, r3
 8004ebc:	4610      	mov	r0, r2
 8004ebe:	f7ff fa67 	bl	8004390 <vListInsert>
}
 8004ec2:	e010      	b.n	8004ee6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8004f04 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8004ef4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	3304      	adds	r3, #4
 8004ece:	4619      	mov	r1, r3
 8004ed0:	4610      	mov	r0, r2
 8004ed2:	f7ff fa5d 	bl	8004390 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8004f08 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d202      	bcs.n	8004ee6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004ee0:	4a09      	ldr	r2, [pc, #36]	@ (8004f08 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	6013      	str	r3, [r2, #0]
}
 8004ee6:	bf00      	nop
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	2000065c 	.word	0x2000065c
 8004ef4:	20000558 	.word	0x20000558
 8004ef8:	20000660 	.word	0x20000660
 8004efc:	20000644 	.word	0x20000644
 8004f00:	20000614 	.word	0x20000614
 8004f04:	20000610 	.word	0x20000610
 8004f08:	20000678 	.word	0x20000678

08004f0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	3b04      	subs	r3, #4
 8004f1c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004f24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	3b04      	subs	r3, #4
 8004f2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	f023 0201 	bic.w	r2, r3, #1
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	3b04      	subs	r3, #4
 8004f3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f3c:	4a0c      	ldr	r2, [pc, #48]	@ (8004f70 <pxPortInitialiseStack+0x64>)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	3b14      	subs	r3, #20
 8004f46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	3b04      	subs	r3, #4
 8004f52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f06f 0202 	mvn.w	r2, #2
 8004f5a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	3b20      	subs	r3, #32
 8004f60:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f62:	68fb      	ldr	r3, [r7, #12]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr
 8004f70:	08004f75 	.word	0x08004f75

08004f74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f7e:	4b13      	ldr	r3, [pc, #76]	@ (8004fcc <prvTaskExitError+0x58>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f86:	d00b      	beq.n	8004fa0 <prvTaskExitError+0x2c>
	__asm volatile
 8004f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f8c:	f383 8811 	msr	BASEPRI, r3
 8004f90:	f3bf 8f6f 	isb	sy
 8004f94:	f3bf 8f4f 	dsb	sy
 8004f98:	60fb      	str	r3, [r7, #12]
}
 8004f9a:	bf00      	nop
 8004f9c:	bf00      	nop
 8004f9e:	e7fd      	b.n	8004f9c <prvTaskExitError+0x28>
	__asm volatile
 8004fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa4:	f383 8811 	msr	BASEPRI, r3
 8004fa8:	f3bf 8f6f 	isb	sy
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	60bb      	str	r3, [r7, #8]
}
 8004fb2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004fb4:	bf00      	nop
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d0fc      	beq.n	8004fb6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004fbc:	bf00      	nop
 8004fbe:	bf00      	nop
 8004fc0:	3714      	adds	r7, #20
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	20000084 	.word	0x20000084

08004fd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004fd0:	4b07      	ldr	r3, [pc, #28]	@ (8004ff0 <pxCurrentTCBConst2>)
 8004fd2:	6819      	ldr	r1, [r3, #0]
 8004fd4:	6808      	ldr	r0, [r1, #0]
 8004fd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fda:	f380 8809 	msr	PSP, r0
 8004fde:	f3bf 8f6f 	isb	sy
 8004fe2:	f04f 0000 	mov.w	r0, #0
 8004fe6:	f380 8811 	msr	BASEPRI, r0
 8004fea:	4770      	bx	lr
 8004fec:	f3af 8000 	nop.w

08004ff0 <pxCurrentTCBConst2>:
 8004ff0:	20000558 	.word	0x20000558
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ff4:	bf00      	nop
 8004ff6:	bf00      	nop

08004ff8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004ff8:	4808      	ldr	r0, [pc, #32]	@ (800501c <prvPortStartFirstTask+0x24>)
 8004ffa:	6800      	ldr	r0, [r0, #0]
 8004ffc:	6800      	ldr	r0, [r0, #0]
 8004ffe:	f380 8808 	msr	MSP, r0
 8005002:	f04f 0000 	mov.w	r0, #0
 8005006:	f380 8814 	msr	CONTROL, r0
 800500a:	b662      	cpsie	i
 800500c:	b661      	cpsie	f
 800500e:	f3bf 8f4f 	dsb	sy
 8005012:	f3bf 8f6f 	isb	sy
 8005016:	df00      	svc	0
 8005018:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800501a:	bf00      	nop
 800501c:	e000ed08 	.word	0xe000ed08

08005020 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005026:	4b47      	ldr	r3, [pc, #284]	@ (8005144 <xPortStartScheduler+0x124>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a47      	ldr	r2, [pc, #284]	@ (8005148 <xPortStartScheduler+0x128>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d10b      	bne.n	8005048 <xPortStartScheduler+0x28>
	__asm volatile
 8005030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005034:	f383 8811 	msr	BASEPRI, r3
 8005038:	f3bf 8f6f 	isb	sy
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	60fb      	str	r3, [r7, #12]
}
 8005042:	bf00      	nop
 8005044:	bf00      	nop
 8005046:	e7fd      	b.n	8005044 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005048:	4b3e      	ldr	r3, [pc, #248]	@ (8005144 <xPortStartScheduler+0x124>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a3f      	ldr	r2, [pc, #252]	@ (800514c <xPortStartScheduler+0x12c>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d10b      	bne.n	800506a <xPortStartScheduler+0x4a>
	__asm volatile
 8005052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005056:	f383 8811 	msr	BASEPRI, r3
 800505a:	f3bf 8f6f 	isb	sy
 800505e:	f3bf 8f4f 	dsb	sy
 8005062:	613b      	str	r3, [r7, #16]
}
 8005064:	bf00      	nop
 8005066:	bf00      	nop
 8005068:	e7fd      	b.n	8005066 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800506a:	4b39      	ldr	r3, [pc, #228]	@ (8005150 <xPortStartScheduler+0x130>)
 800506c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	b2db      	uxtb	r3, r3
 8005074:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	22ff      	movs	r2, #255	@ 0xff
 800507a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	b2db      	uxtb	r3, r3
 8005082:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005084:	78fb      	ldrb	r3, [r7, #3]
 8005086:	b2db      	uxtb	r3, r3
 8005088:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800508c:	b2da      	uxtb	r2, r3
 800508e:	4b31      	ldr	r3, [pc, #196]	@ (8005154 <xPortStartScheduler+0x134>)
 8005090:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005092:	4b31      	ldr	r3, [pc, #196]	@ (8005158 <xPortStartScheduler+0x138>)
 8005094:	2207      	movs	r2, #7
 8005096:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005098:	e009      	b.n	80050ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800509a:	4b2f      	ldr	r3, [pc, #188]	@ (8005158 <xPortStartScheduler+0x138>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	3b01      	subs	r3, #1
 80050a0:	4a2d      	ldr	r2, [pc, #180]	@ (8005158 <xPortStartScheduler+0x138>)
 80050a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80050a4:	78fb      	ldrb	r3, [r7, #3]
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	005b      	lsls	r3, r3, #1
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050ae:	78fb      	ldrb	r3, [r7, #3]
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050b6:	2b80      	cmp	r3, #128	@ 0x80
 80050b8:	d0ef      	beq.n	800509a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80050ba:	4b27      	ldr	r3, [pc, #156]	@ (8005158 <xPortStartScheduler+0x138>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f1c3 0307 	rsb	r3, r3, #7
 80050c2:	2b04      	cmp	r3, #4
 80050c4:	d00b      	beq.n	80050de <xPortStartScheduler+0xbe>
	__asm volatile
 80050c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ca:	f383 8811 	msr	BASEPRI, r3
 80050ce:	f3bf 8f6f 	isb	sy
 80050d2:	f3bf 8f4f 	dsb	sy
 80050d6:	60bb      	str	r3, [r7, #8]
}
 80050d8:	bf00      	nop
 80050da:	bf00      	nop
 80050dc:	e7fd      	b.n	80050da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80050de:	4b1e      	ldr	r3, [pc, #120]	@ (8005158 <xPortStartScheduler+0x138>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	021b      	lsls	r3, r3, #8
 80050e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005158 <xPortStartScheduler+0x138>)
 80050e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80050e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005158 <xPortStartScheduler+0x138>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80050f0:	4a19      	ldr	r2, [pc, #100]	@ (8005158 <xPortStartScheduler+0x138>)
 80050f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	b2da      	uxtb	r2, r3
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80050fc:	4b17      	ldr	r3, [pc, #92]	@ (800515c <xPortStartScheduler+0x13c>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a16      	ldr	r2, [pc, #88]	@ (800515c <xPortStartScheduler+0x13c>)
 8005102:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005106:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005108:	4b14      	ldr	r3, [pc, #80]	@ (800515c <xPortStartScheduler+0x13c>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a13      	ldr	r2, [pc, #76]	@ (800515c <xPortStartScheduler+0x13c>)
 800510e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005112:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005114:	f000 f8da 	bl	80052cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005118:	4b11      	ldr	r3, [pc, #68]	@ (8005160 <xPortStartScheduler+0x140>)
 800511a:	2200      	movs	r2, #0
 800511c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800511e:	f000 f8f9 	bl	8005314 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005122:	4b10      	ldr	r3, [pc, #64]	@ (8005164 <xPortStartScheduler+0x144>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a0f      	ldr	r2, [pc, #60]	@ (8005164 <xPortStartScheduler+0x144>)
 8005128:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800512c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800512e:	f7ff ff63 	bl	8004ff8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005132:	f7ff fd45 	bl	8004bc0 <vTaskSwitchContext>
	prvTaskExitError();
 8005136:	f7ff ff1d 	bl	8004f74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3718      	adds	r7, #24
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	e000ed00 	.word	0xe000ed00
 8005148:	410fc271 	.word	0x410fc271
 800514c:	410fc270 	.word	0x410fc270
 8005150:	e000e400 	.word	0xe000e400
 8005154:	20000684 	.word	0x20000684
 8005158:	20000688 	.word	0x20000688
 800515c:	e000ed20 	.word	0xe000ed20
 8005160:	20000084 	.word	0x20000084
 8005164:	e000ef34 	.word	0xe000ef34

08005168 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
	__asm volatile
 800516e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	607b      	str	r3, [r7, #4]
}
 8005180:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005182:	4b10      	ldr	r3, [pc, #64]	@ (80051c4 <vPortEnterCritical+0x5c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	3301      	adds	r3, #1
 8005188:	4a0e      	ldr	r2, [pc, #56]	@ (80051c4 <vPortEnterCritical+0x5c>)
 800518a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800518c:	4b0d      	ldr	r3, [pc, #52]	@ (80051c4 <vPortEnterCritical+0x5c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d110      	bne.n	80051b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005194:	4b0c      	ldr	r3, [pc, #48]	@ (80051c8 <vPortEnterCritical+0x60>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00b      	beq.n	80051b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800519e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a2:	f383 8811 	msr	BASEPRI, r3
 80051a6:	f3bf 8f6f 	isb	sy
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	603b      	str	r3, [r7, #0]
}
 80051b0:	bf00      	nop
 80051b2:	bf00      	nop
 80051b4:	e7fd      	b.n	80051b2 <vPortEnterCritical+0x4a>
	}
}
 80051b6:	bf00      	nop
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	20000084 	.word	0x20000084
 80051c8:	e000ed04 	.word	0xe000ed04

080051cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80051d2:	4b12      	ldr	r3, [pc, #72]	@ (800521c <vPortExitCritical+0x50>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d10b      	bne.n	80051f2 <vPortExitCritical+0x26>
	__asm volatile
 80051da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051de:	f383 8811 	msr	BASEPRI, r3
 80051e2:	f3bf 8f6f 	isb	sy
 80051e6:	f3bf 8f4f 	dsb	sy
 80051ea:	607b      	str	r3, [r7, #4]
}
 80051ec:	bf00      	nop
 80051ee:	bf00      	nop
 80051f0:	e7fd      	b.n	80051ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80051f2:	4b0a      	ldr	r3, [pc, #40]	@ (800521c <vPortExitCritical+0x50>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	3b01      	subs	r3, #1
 80051f8:	4a08      	ldr	r2, [pc, #32]	@ (800521c <vPortExitCritical+0x50>)
 80051fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80051fc:	4b07      	ldr	r3, [pc, #28]	@ (800521c <vPortExitCritical+0x50>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d105      	bne.n	8005210 <vPortExitCritical+0x44>
 8005204:	2300      	movs	r3, #0
 8005206:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800520e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	20000084 	.word	0x20000084

08005220 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005220:	f3ef 8009 	mrs	r0, PSP
 8005224:	f3bf 8f6f 	isb	sy
 8005228:	4b15      	ldr	r3, [pc, #84]	@ (8005280 <pxCurrentTCBConst>)
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	f01e 0f10 	tst.w	lr, #16
 8005230:	bf08      	it	eq
 8005232:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005236:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800523a:	6010      	str	r0, [r2, #0]
 800523c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005240:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005244:	f380 8811 	msr	BASEPRI, r0
 8005248:	f3bf 8f4f 	dsb	sy
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	f7ff fcb6 	bl	8004bc0 <vTaskSwitchContext>
 8005254:	f04f 0000 	mov.w	r0, #0
 8005258:	f380 8811 	msr	BASEPRI, r0
 800525c:	bc09      	pop	{r0, r3}
 800525e:	6819      	ldr	r1, [r3, #0]
 8005260:	6808      	ldr	r0, [r1, #0]
 8005262:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005266:	f01e 0f10 	tst.w	lr, #16
 800526a:	bf08      	it	eq
 800526c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005270:	f380 8809 	msr	PSP, r0
 8005274:	f3bf 8f6f 	isb	sy
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	f3af 8000 	nop.w

08005280 <pxCurrentTCBConst>:
 8005280:	20000558 	.word	0x20000558
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005284:	bf00      	nop
 8005286:	bf00      	nop

08005288 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
	__asm volatile
 800528e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005292:	f383 8811 	msr	BASEPRI, r3
 8005296:	f3bf 8f6f 	isb	sy
 800529a:	f3bf 8f4f 	dsb	sy
 800529e:	607b      	str	r3, [r7, #4]
}
 80052a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80052a2:	f7ff fbd3 	bl	8004a4c <xTaskIncrementTick>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d003      	beq.n	80052b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80052ac:	4b06      	ldr	r3, [pc, #24]	@ (80052c8 <SysTick_Handler+0x40>)
 80052ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052b2:	601a      	str	r2, [r3, #0]
 80052b4:	2300      	movs	r3, #0
 80052b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	f383 8811 	msr	BASEPRI, r3
}
 80052be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80052c0:	bf00      	nop
 80052c2:	3708      	adds	r7, #8
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	e000ed04 	.word	0xe000ed04

080052cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80052cc:	b480      	push	{r7}
 80052ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80052d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005300 <vPortSetupTimerInterrupt+0x34>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80052d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005304 <vPortSetupTimerInterrupt+0x38>)
 80052d8:	2200      	movs	r2, #0
 80052da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80052dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005308 <vPortSetupTimerInterrupt+0x3c>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a0a      	ldr	r2, [pc, #40]	@ (800530c <vPortSetupTimerInterrupt+0x40>)
 80052e2:	fba2 2303 	umull	r2, r3, r2, r3
 80052e6:	099b      	lsrs	r3, r3, #6
 80052e8:	4a09      	ldr	r2, [pc, #36]	@ (8005310 <vPortSetupTimerInterrupt+0x44>)
 80052ea:	3b01      	subs	r3, #1
 80052ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80052ee:	4b04      	ldr	r3, [pc, #16]	@ (8005300 <vPortSetupTimerInterrupt+0x34>)
 80052f0:	2207      	movs	r2, #7
 80052f2:	601a      	str	r2, [r3, #0]
}
 80052f4:	bf00      	nop
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	e000e010 	.word	0xe000e010
 8005304:	e000e018 	.word	0xe000e018
 8005308:	20000000 	.word	0x20000000
 800530c:	10624dd3 	.word	0x10624dd3
 8005310:	e000e014 	.word	0xe000e014

08005314 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005314:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005324 <vPortEnableVFP+0x10>
 8005318:	6801      	ldr	r1, [r0, #0]
 800531a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800531e:	6001      	str	r1, [r0, #0]
 8005320:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005322:	bf00      	nop
 8005324:	e000ed88 	.word	0xe000ed88

08005328 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b08a      	sub	sp, #40	@ 0x28
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005330:	2300      	movs	r3, #0
 8005332:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005334:	f7ff fade 	bl	80048f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005338:	4b5c      	ldr	r3, [pc, #368]	@ (80054ac <pvPortMalloc+0x184>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d101      	bne.n	8005344 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005340:	f000 f924 	bl	800558c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005344:	4b5a      	ldr	r3, [pc, #360]	@ (80054b0 <pvPortMalloc+0x188>)
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4013      	ands	r3, r2
 800534c:	2b00      	cmp	r3, #0
 800534e:	f040 8095 	bne.w	800547c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d01e      	beq.n	8005396 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005358:	2208      	movs	r2, #8
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4413      	add	r3, r2
 800535e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f003 0307 	and.w	r3, r3, #7
 8005366:	2b00      	cmp	r3, #0
 8005368:	d015      	beq.n	8005396 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f023 0307 	bic.w	r3, r3, #7
 8005370:	3308      	adds	r3, #8
 8005372:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f003 0307 	and.w	r3, r3, #7
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00b      	beq.n	8005396 <pvPortMalloc+0x6e>
	__asm volatile
 800537e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005382:	f383 8811 	msr	BASEPRI, r3
 8005386:	f3bf 8f6f 	isb	sy
 800538a:	f3bf 8f4f 	dsb	sy
 800538e:	617b      	str	r3, [r7, #20]
}
 8005390:	bf00      	nop
 8005392:	bf00      	nop
 8005394:	e7fd      	b.n	8005392 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d06f      	beq.n	800547c <pvPortMalloc+0x154>
 800539c:	4b45      	ldr	r3, [pc, #276]	@ (80054b4 <pvPortMalloc+0x18c>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d86a      	bhi.n	800547c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80053a6:	4b44      	ldr	r3, [pc, #272]	@ (80054b8 <pvPortMalloc+0x190>)
 80053a8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80053aa:	4b43      	ldr	r3, [pc, #268]	@ (80054b8 <pvPortMalloc+0x190>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053b0:	e004      	b.n	80053bc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80053b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80053b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d903      	bls.n	80053ce <pvPortMalloc+0xa6>
 80053c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1f1      	bne.n	80053b2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80053ce:	4b37      	ldr	r3, [pc, #220]	@ (80054ac <pvPortMalloc+0x184>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d051      	beq.n	800547c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80053d8:	6a3b      	ldr	r3, [r7, #32]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2208      	movs	r2, #8
 80053de:	4413      	add	r3, r2
 80053e0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80053e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	6a3b      	ldr	r3, [r7, #32]
 80053e8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80053ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	1ad2      	subs	r2, r2, r3
 80053f2:	2308      	movs	r3, #8
 80053f4:	005b      	lsls	r3, r3, #1
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d920      	bls.n	800543c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80053fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4413      	add	r3, r2
 8005400:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	f003 0307 	and.w	r3, r3, #7
 8005408:	2b00      	cmp	r3, #0
 800540a:	d00b      	beq.n	8005424 <pvPortMalloc+0xfc>
	__asm volatile
 800540c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005410:	f383 8811 	msr	BASEPRI, r3
 8005414:	f3bf 8f6f 	isb	sy
 8005418:	f3bf 8f4f 	dsb	sy
 800541c:	613b      	str	r3, [r7, #16]
}
 800541e:	bf00      	nop
 8005420:	bf00      	nop
 8005422:	e7fd      	b.n	8005420 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005426:	685a      	ldr	r2, [r3, #4]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	1ad2      	subs	r2, r2, r3
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005436:	69b8      	ldr	r0, [r7, #24]
 8005438:	f000 f90a 	bl	8005650 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800543c:	4b1d      	ldr	r3, [pc, #116]	@ (80054b4 <pvPortMalloc+0x18c>)
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	4a1b      	ldr	r2, [pc, #108]	@ (80054b4 <pvPortMalloc+0x18c>)
 8005448:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800544a:	4b1a      	ldr	r3, [pc, #104]	@ (80054b4 <pvPortMalloc+0x18c>)
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	4b1b      	ldr	r3, [pc, #108]	@ (80054bc <pvPortMalloc+0x194>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	429a      	cmp	r2, r3
 8005454:	d203      	bcs.n	800545e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005456:	4b17      	ldr	r3, [pc, #92]	@ (80054b4 <pvPortMalloc+0x18c>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a18      	ldr	r2, [pc, #96]	@ (80054bc <pvPortMalloc+0x194>)
 800545c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800545e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005460:	685a      	ldr	r2, [r3, #4]
 8005462:	4b13      	ldr	r3, [pc, #76]	@ (80054b0 <pvPortMalloc+0x188>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	431a      	orrs	r2, r3
 8005468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800546c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546e:	2200      	movs	r2, #0
 8005470:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005472:	4b13      	ldr	r3, [pc, #76]	@ (80054c0 <pvPortMalloc+0x198>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	3301      	adds	r3, #1
 8005478:	4a11      	ldr	r2, [pc, #68]	@ (80054c0 <pvPortMalloc+0x198>)
 800547a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800547c:	f7ff fa48 	bl	8004910 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	f003 0307 	and.w	r3, r3, #7
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00b      	beq.n	80054a2 <pvPortMalloc+0x17a>
	__asm volatile
 800548a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800548e:	f383 8811 	msr	BASEPRI, r3
 8005492:	f3bf 8f6f 	isb	sy
 8005496:	f3bf 8f4f 	dsb	sy
 800549a:	60fb      	str	r3, [r7, #12]
}
 800549c:	bf00      	nop
 800549e:	bf00      	nop
 80054a0:	e7fd      	b.n	800549e <pvPortMalloc+0x176>
	return pvReturn;
 80054a2:	69fb      	ldr	r3, [r7, #28]
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3728      	adds	r7, #40	@ 0x28
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	20004294 	.word	0x20004294
 80054b0:	200042a8 	.word	0x200042a8
 80054b4:	20004298 	.word	0x20004298
 80054b8:	2000428c 	.word	0x2000428c
 80054bc:	2000429c 	.word	0x2000429c
 80054c0:	200042a0 	.word	0x200042a0

080054c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d04f      	beq.n	8005576 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80054d6:	2308      	movs	r3, #8
 80054d8:	425b      	negs	r3, r3
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	4413      	add	r3, r2
 80054de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	4b25      	ldr	r3, [pc, #148]	@ (8005580 <vPortFree+0xbc>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4013      	ands	r3, r2
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d10b      	bne.n	800550a <vPortFree+0x46>
	__asm volatile
 80054f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f6:	f383 8811 	msr	BASEPRI, r3
 80054fa:	f3bf 8f6f 	isb	sy
 80054fe:	f3bf 8f4f 	dsb	sy
 8005502:	60fb      	str	r3, [r7, #12]
}
 8005504:	bf00      	nop
 8005506:	bf00      	nop
 8005508:	e7fd      	b.n	8005506 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00b      	beq.n	800552a <vPortFree+0x66>
	__asm volatile
 8005512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005516:	f383 8811 	msr	BASEPRI, r3
 800551a:	f3bf 8f6f 	isb	sy
 800551e:	f3bf 8f4f 	dsb	sy
 8005522:	60bb      	str	r3, [r7, #8]
}
 8005524:	bf00      	nop
 8005526:	bf00      	nop
 8005528:	e7fd      	b.n	8005526 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	4b14      	ldr	r3, [pc, #80]	@ (8005580 <vPortFree+0xbc>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4013      	ands	r3, r2
 8005534:	2b00      	cmp	r3, #0
 8005536:	d01e      	beq.n	8005576 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d11a      	bne.n	8005576 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	4b0e      	ldr	r3, [pc, #56]	@ (8005580 <vPortFree+0xbc>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	43db      	mvns	r3, r3
 800554a:	401a      	ands	r2, r3
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005550:	f7ff f9d0 	bl	80048f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	685a      	ldr	r2, [r3, #4]
 8005558:	4b0a      	ldr	r3, [pc, #40]	@ (8005584 <vPortFree+0xc0>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4413      	add	r3, r2
 800555e:	4a09      	ldr	r2, [pc, #36]	@ (8005584 <vPortFree+0xc0>)
 8005560:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005562:	6938      	ldr	r0, [r7, #16]
 8005564:	f000 f874 	bl	8005650 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005568:	4b07      	ldr	r3, [pc, #28]	@ (8005588 <vPortFree+0xc4>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	3301      	adds	r3, #1
 800556e:	4a06      	ldr	r2, [pc, #24]	@ (8005588 <vPortFree+0xc4>)
 8005570:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005572:	f7ff f9cd 	bl	8004910 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005576:	bf00      	nop
 8005578:	3718      	adds	r7, #24
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	200042a8 	.word	0x200042a8
 8005584:	20004298 	.word	0x20004298
 8005588:	200042a4 	.word	0x200042a4

0800558c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005592:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005596:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005598:	4b27      	ldr	r3, [pc, #156]	@ (8005638 <prvHeapInit+0xac>)
 800559a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f003 0307 	and.w	r3, r3, #7
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00c      	beq.n	80055c0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	3307      	adds	r3, #7
 80055aa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f023 0307 	bic.w	r3, r3, #7
 80055b2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	4a1f      	ldr	r2, [pc, #124]	@ (8005638 <prvHeapInit+0xac>)
 80055bc:	4413      	add	r3, r2
 80055be:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80055c4:	4a1d      	ldr	r2, [pc, #116]	@ (800563c <prvHeapInit+0xb0>)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80055ca:	4b1c      	ldr	r3, [pc, #112]	@ (800563c <prvHeapInit+0xb0>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	4413      	add	r3, r2
 80055d6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80055d8:	2208      	movs	r2, #8
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	1a9b      	subs	r3, r3, r2
 80055de:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f023 0307 	bic.w	r3, r3, #7
 80055e6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	4a15      	ldr	r2, [pc, #84]	@ (8005640 <prvHeapInit+0xb4>)
 80055ec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80055ee:	4b14      	ldr	r3, [pc, #80]	@ (8005640 <prvHeapInit+0xb4>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2200      	movs	r2, #0
 80055f4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80055f6:	4b12      	ldr	r3, [pc, #72]	@ (8005640 <prvHeapInit+0xb4>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2200      	movs	r2, #0
 80055fc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	1ad2      	subs	r2, r2, r3
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800560c:	4b0c      	ldr	r3, [pc, #48]	@ (8005640 <prvHeapInit+0xb4>)
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	4a0a      	ldr	r2, [pc, #40]	@ (8005644 <prvHeapInit+0xb8>)
 800561a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	4a09      	ldr	r2, [pc, #36]	@ (8005648 <prvHeapInit+0xbc>)
 8005622:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005624:	4b09      	ldr	r3, [pc, #36]	@ (800564c <prvHeapInit+0xc0>)
 8005626:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800562a:	601a      	str	r2, [r3, #0]
}
 800562c:	bf00      	nop
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr
 8005638:	2000068c 	.word	0x2000068c
 800563c:	2000428c 	.word	0x2000428c
 8005640:	20004294 	.word	0x20004294
 8005644:	2000429c 	.word	0x2000429c
 8005648:	20004298 	.word	0x20004298
 800564c:	200042a8 	.word	0x200042a8

08005650 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005658:	4b28      	ldr	r3, [pc, #160]	@ (80056fc <prvInsertBlockIntoFreeList+0xac>)
 800565a:	60fb      	str	r3, [r7, #12]
 800565c:	e002      	b.n	8005664 <prvInsertBlockIntoFreeList+0x14>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	60fb      	str	r3, [r7, #12]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	429a      	cmp	r2, r3
 800566c:	d8f7      	bhi.n	800565e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	4413      	add	r3, r2
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	429a      	cmp	r2, r3
 800567e:	d108      	bne.n	8005692 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	441a      	add	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	441a      	add	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d118      	bne.n	80056d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	4b15      	ldr	r3, [pc, #84]	@ (8005700 <prvInsertBlockIntoFreeList+0xb0>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d00d      	beq.n	80056ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	441a      	add	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	e008      	b.n	80056e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80056ce:	4b0c      	ldr	r3, [pc, #48]	@ (8005700 <prvInsertBlockIntoFreeList+0xb0>)
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	601a      	str	r2, [r3, #0]
 80056d6:	e003      	b.n	80056e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d002      	beq.n	80056ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056ee:	bf00      	nop
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	2000428c 	.word	0x2000428c
 8005700:	20004294 	.word	0x20004294

08005704 <malloc>:
 8005704:	4b02      	ldr	r3, [pc, #8]	@ (8005710 <malloc+0xc>)
 8005706:	4601      	mov	r1, r0
 8005708:	6818      	ldr	r0, [r3, #0]
 800570a:	f000 b825 	b.w	8005758 <_malloc_r>
 800570e:	bf00      	nop
 8005710:	20000088 	.word	0x20000088

08005714 <sbrk_aligned>:
 8005714:	b570      	push	{r4, r5, r6, lr}
 8005716:	4e0f      	ldr	r6, [pc, #60]	@ (8005754 <sbrk_aligned+0x40>)
 8005718:	460c      	mov	r4, r1
 800571a:	6831      	ldr	r1, [r6, #0]
 800571c:	4605      	mov	r5, r0
 800571e:	b911      	cbnz	r1, 8005726 <sbrk_aligned+0x12>
 8005720:	f000 f90c 	bl	800593c <_sbrk_r>
 8005724:	6030      	str	r0, [r6, #0]
 8005726:	4621      	mov	r1, r4
 8005728:	4628      	mov	r0, r5
 800572a:	f000 f907 	bl	800593c <_sbrk_r>
 800572e:	1c43      	adds	r3, r0, #1
 8005730:	d103      	bne.n	800573a <sbrk_aligned+0x26>
 8005732:	f04f 34ff 	mov.w	r4, #4294967295
 8005736:	4620      	mov	r0, r4
 8005738:	bd70      	pop	{r4, r5, r6, pc}
 800573a:	1cc4      	adds	r4, r0, #3
 800573c:	f024 0403 	bic.w	r4, r4, #3
 8005740:	42a0      	cmp	r0, r4
 8005742:	d0f8      	beq.n	8005736 <sbrk_aligned+0x22>
 8005744:	1a21      	subs	r1, r4, r0
 8005746:	4628      	mov	r0, r5
 8005748:	f000 f8f8 	bl	800593c <_sbrk_r>
 800574c:	3001      	adds	r0, #1
 800574e:	d1f2      	bne.n	8005736 <sbrk_aligned+0x22>
 8005750:	e7ef      	b.n	8005732 <sbrk_aligned+0x1e>
 8005752:	bf00      	nop
 8005754:	200042ac 	.word	0x200042ac

08005758 <_malloc_r>:
 8005758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800575c:	1ccd      	adds	r5, r1, #3
 800575e:	f025 0503 	bic.w	r5, r5, #3
 8005762:	3508      	adds	r5, #8
 8005764:	2d0c      	cmp	r5, #12
 8005766:	bf38      	it	cc
 8005768:	250c      	movcc	r5, #12
 800576a:	2d00      	cmp	r5, #0
 800576c:	4606      	mov	r6, r0
 800576e:	db01      	blt.n	8005774 <_malloc_r+0x1c>
 8005770:	42a9      	cmp	r1, r5
 8005772:	d904      	bls.n	800577e <_malloc_r+0x26>
 8005774:	230c      	movs	r3, #12
 8005776:	6033      	str	r3, [r6, #0]
 8005778:	2000      	movs	r0, #0
 800577a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800577e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005854 <_malloc_r+0xfc>
 8005782:	f000 f869 	bl	8005858 <__malloc_lock>
 8005786:	f8d8 3000 	ldr.w	r3, [r8]
 800578a:	461c      	mov	r4, r3
 800578c:	bb44      	cbnz	r4, 80057e0 <_malloc_r+0x88>
 800578e:	4629      	mov	r1, r5
 8005790:	4630      	mov	r0, r6
 8005792:	f7ff ffbf 	bl	8005714 <sbrk_aligned>
 8005796:	1c43      	adds	r3, r0, #1
 8005798:	4604      	mov	r4, r0
 800579a:	d158      	bne.n	800584e <_malloc_r+0xf6>
 800579c:	f8d8 4000 	ldr.w	r4, [r8]
 80057a0:	4627      	mov	r7, r4
 80057a2:	2f00      	cmp	r7, #0
 80057a4:	d143      	bne.n	800582e <_malloc_r+0xd6>
 80057a6:	2c00      	cmp	r4, #0
 80057a8:	d04b      	beq.n	8005842 <_malloc_r+0xea>
 80057aa:	6823      	ldr	r3, [r4, #0]
 80057ac:	4639      	mov	r1, r7
 80057ae:	4630      	mov	r0, r6
 80057b0:	eb04 0903 	add.w	r9, r4, r3
 80057b4:	f000 f8c2 	bl	800593c <_sbrk_r>
 80057b8:	4581      	cmp	r9, r0
 80057ba:	d142      	bne.n	8005842 <_malloc_r+0xea>
 80057bc:	6821      	ldr	r1, [r4, #0]
 80057be:	1a6d      	subs	r5, r5, r1
 80057c0:	4629      	mov	r1, r5
 80057c2:	4630      	mov	r0, r6
 80057c4:	f7ff ffa6 	bl	8005714 <sbrk_aligned>
 80057c8:	3001      	adds	r0, #1
 80057ca:	d03a      	beq.n	8005842 <_malloc_r+0xea>
 80057cc:	6823      	ldr	r3, [r4, #0]
 80057ce:	442b      	add	r3, r5
 80057d0:	6023      	str	r3, [r4, #0]
 80057d2:	f8d8 3000 	ldr.w	r3, [r8]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	bb62      	cbnz	r2, 8005834 <_malloc_r+0xdc>
 80057da:	f8c8 7000 	str.w	r7, [r8]
 80057de:	e00f      	b.n	8005800 <_malloc_r+0xa8>
 80057e0:	6822      	ldr	r2, [r4, #0]
 80057e2:	1b52      	subs	r2, r2, r5
 80057e4:	d420      	bmi.n	8005828 <_malloc_r+0xd0>
 80057e6:	2a0b      	cmp	r2, #11
 80057e8:	d917      	bls.n	800581a <_malloc_r+0xc2>
 80057ea:	1961      	adds	r1, r4, r5
 80057ec:	42a3      	cmp	r3, r4
 80057ee:	6025      	str	r5, [r4, #0]
 80057f0:	bf18      	it	ne
 80057f2:	6059      	strne	r1, [r3, #4]
 80057f4:	6863      	ldr	r3, [r4, #4]
 80057f6:	bf08      	it	eq
 80057f8:	f8c8 1000 	streq.w	r1, [r8]
 80057fc:	5162      	str	r2, [r4, r5]
 80057fe:	604b      	str	r3, [r1, #4]
 8005800:	4630      	mov	r0, r6
 8005802:	f000 f82f 	bl	8005864 <__malloc_unlock>
 8005806:	f104 000b 	add.w	r0, r4, #11
 800580a:	1d23      	adds	r3, r4, #4
 800580c:	f020 0007 	bic.w	r0, r0, #7
 8005810:	1ac2      	subs	r2, r0, r3
 8005812:	bf1c      	itt	ne
 8005814:	1a1b      	subne	r3, r3, r0
 8005816:	50a3      	strne	r3, [r4, r2]
 8005818:	e7af      	b.n	800577a <_malloc_r+0x22>
 800581a:	6862      	ldr	r2, [r4, #4]
 800581c:	42a3      	cmp	r3, r4
 800581e:	bf0c      	ite	eq
 8005820:	f8c8 2000 	streq.w	r2, [r8]
 8005824:	605a      	strne	r2, [r3, #4]
 8005826:	e7eb      	b.n	8005800 <_malloc_r+0xa8>
 8005828:	4623      	mov	r3, r4
 800582a:	6864      	ldr	r4, [r4, #4]
 800582c:	e7ae      	b.n	800578c <_malloc_r+0x34>
 800582e:	463c      	mov	r4, r7
 8005830:	687f      	ldr	r7, [r7, #4]
 8005832:	e7b6      	b.n	80057a2 <_malloc_r+0x4a>
 8005834:	461a      	mov	r2, r3
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	42a3      	cmp	r3, r4
 800583a:	d1fb      	bne.n	8005834 <_malloc_r+0xdc>
 800583c:	2300      	movs	r3, #0
 800583e:	6053      	str	r3, [r2, #4]
 8005840:	e7de      	b.n	8005800 <_malloc_r+0xa8>
 8005842:	230c      	movs	r3, #12
 8005844:	6033      	str	r3, [r6, #0]
 8005846:	4630      	mov	r0, r6
 8005848:	f000 f80c 	bl	8005864 <__malloc_unlock>
 800584c:	e794      	b.n	8005778 <_malloc_r+0x20>
 800584e:	6005      	str	r5, [r0, #0]
 8005850:	e7d6      	b.n	8005800 <_malloc_r+0xa8>
 8005852:	bf00      	nop
 8005854:	200042b0 	.word	0x200042b0

08005858 <__malloc_lock>:
 8005858:	4801      	ldr	r0, [pc, #4]	@ (8005860 <__malloc_lock+0x8>)
 800585a:	f000 b8a9 	b.w	80059b0 <__retarget_lock_acquire_recursive>
 800585e:	bf00      	nop
 8005860:	200043f0 	.word	0x200043f0

08005864 <__malloc_unlock>:
 8005864:	4801      	ldr	r0, [pc, #4]	@ (800586c <__malloc_unlock+0x8>)
 8005866:	f000 b8a4 	b.w	80059b2 <__retarget_lock_release_recursive>
 800586a:	bf00      	nop
 800586c:	200043f0 	.word	0x200043f0

08005870 <memset>:
 8005870:	4402      	add	r2, r0
 8005872:	4603      	mov	r3, r0
 8005874:	4293      	cmp	r3, r2
 8005876:	d100      	bne.n	800587a <memset+0xa>
 8005878:	4770      	bx	lr
 800587a:	f803 1b01 	strb.w	r1, [r3], #1
 800587e:	e7f9      	b.n	8005874 <memset+0x4>

08005880 <_reclaim_reent>:
 8005880:	4b2d      	ldr	r3, [pc, #180]	@ (8005938 <_reclaim_reent+0xb8>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4283      	cmp	r3, r0
 8005886:	b570      	push	{r4, r5, r6, lr}
 8005888:	4604      	mov	r4, r0
 800588a:	d053      	beq.n	8005934 <_reclaim_reent+0xb4>
 800588c:	69c3      	ldr	r3, [r0, #28]
 800588e:	b31b      	cbz	r3, 80058d8 <_reclaim_reent+0x58>
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	b163      	cbz	r3, 80058ae <_reclaim_reent+0x2e>
 8005894:	2500      	movs	r5, #0
 8005896:	69e3      	ldr	r3, [r4, #28]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	5959      	ldr	r1, [r3, r5]
 800589c:	b9b1      	cbnz	r1, 80058cc <_reclaim_reent+0x4c>
 800589e:	3504      	adds	r5, #4
 80058a0:	2d80      	cmp	r5, #128	@ 0x80
 80058a2:	d1f8      	bne.n	8005896 <_reclaim_reent+0x16>
 80058a4:	69e3      	ldr	r3, [r4, #28]
 80058a6:	4620      	mov	r0, r4
 80058a8:	68d9      	ldr	r1, [r3, #12]
 80058aa:	f000 f891 	bl	80059d0 <_free_r>
 80058ae:	69e3      	ldr	r3, [r4, #28]
 80058b0:	6819      	ldr	r1, [r3, #0]
 80058b2:	b111      	cbz	r1, 80058ba <_reclaim_reent+0x3a>
 80058b4:	4620      	mov	r0, r4
 80058b6:	f000 f88b 	bl	80059d0 <_free_r>
 80058ba:	69e3      	ldr	r3, [r4, #28]
 80058bc:	689d      	ldr	r5, [r3, #8]
 80058be:	b15d      	cbz	r5, 80058d8 <_reclaim_reent+0x58>
 80058c0:	4629      	mov	r1, r5
 80058c2:	4620      	mov	r0, r4
 80058c4:	682d      	ldr	r5, [r5, #0]
 80058c6:	f000 f883 	bl	80059d0 <_free_r>
 80058ca:	e7f8      	b.n	80058be <_reclaim_reent+0x3e>
 80058cc:	680e      	ldr	r6, [r1, #0]
 80058ce:	4620      	mov	r0, r4
 80058d0:	f000 f87e 	bl	80059d0 <_free_r>
 80058d4:	4631      	mov	r1, r6
 80058d6:	e7e1      	b.n	800589c <_reclaim_reent+0x1c>
 80058d8:	6961      	ldr	r1, [r4, #20]
 80058da:	b111      	cbz	r1, 80058e2 <_reclaim_reent+0x62>
 80058dc:	4620      	mov	r0, r4
 80058de:	f000 f877 	bl	80059d0 <_free_r>
 80058e2:	69e1      	ldr	r1, [r4, #28]
 80058e4:	b111      	cbz	r1, 80058ec <_reclaim_reent+0x6c>
 80058e6:	4620      	mov	r0, r4
 80058e8:	f000 f872 	bl	80059d0 <_free_r>
 80058ec:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80058ee:	b111      	cbz	r1, 80058f6 <_reclaim_reent+0x76>
 80058f0:	4620      	mov	r0, r4
 80058f2:	f000 f86d 	bl	80059d0 <_free_r>
 80058f6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80058f8:	b111      	cbz	r1, 8005900 <_reclaim_reent+0x80>
 80058fa:	4620      	mov	r0, r4
 80058fc:	f000 f868 	bl	80059d0 <_free_r>
 8005900:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005902:	b111      	cbz	r1, 800590a <_reclaim_reent+0x8a>
 8005904:	4620      	mov	r0, r4
 8005906:	f000 f863 	bl	80059d0 <_free_r>
 800590a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800590c:	b111      	cbz	r1, 8005914 <_reclaim_reent+0x94>
 800590e:	4620      	mov	r0, r4
 8005910:	f000 f85e 	bl	80059d0 <_free_r>
 8005914:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005916:	b111      	cbz	r1, 800591e <_reclaim_reent+0x9e>
 8005918:	4620      	mov	r0, r4
 800591a:	f000 f859 	bl	80059d0 <_free_r>
 800591e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005920:	b111      	cbz	r1, 8005928 <_reclaim_reent+0xa8>
 8005922:	4620      	mov	r0, r4
 8005924:	f000 f854 	bl	80059d0 <_free_r>
 8005928:	6a23      	ldr	r3, [r4, #32]
 800592a:	b11b      	cbz	r3, 8005934 <_reclaim_reent+0xb4>
 800592c:	4620      	mov	r0, r4
 800592e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005932:	4718      	bx	r3
 8005934:	bd70      	pop	{r4, r5, r6, pc}
 8005936:	bf00      	nop
 8005938:	20000088 	.word	0x20000088

0800593c <_sbrk_r>:
 800593c:	b538      	push	{r3, r4, r5, lr}
 800593e:	4d06      	ldr	r5, [pc, #24]	@ (8005958 <_sbrk_r+0x1c>)
 8005940:	2300      	movs	r3, #0
 8005942:	4604      	mov	r4, r0
 8005944:	4608      	mov	r0, r1
 8005946:	602b      	str	r3, [r5, #0]
 8005948:	f7fb f918 	bl	8000b7c <_sbrk>
 800594c:	1c43      	adds	r3, r0, #1
 800594e:	d102      	bne.n	8005956 <_sbrk_r+0x1a>
 8005950:	682b      	ldr	r3, [r5, #0]
 8005952:	b103      	cbz	r3, 8005956 <_sbrk_r+0x1a>
 8005954:	6023      	str	r3, [r4, #0]
 8005956:	bd38      	pop	{r3, r4, r5, pc}
 8005958:	200043ec 	.word	0x200043ec

0800595c <__errno>:
 800595c:	4b01      	ldr	r3, [pc, #4]	@ (8005964 <__errno+0x8>)
 800595e:	6818      	ldr	r0, [r3, #0]
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	20000088 	.word	0x20000088

08005968 <__libc_init_array>:
 8005968:	b570      	push	{r4, r5, r6, lr}
 800596a:	4d0d      	ldr	r5, [pc, #52]	@ (80059a0 <__libc_init_array+0x38>)
 800596c:	4c0d      	ldr	r4, [pc, #52]	@ (80059a4 <__libc_init_array+0x3c>)
 800596e:	1b64      	subs	r4, r4, r5
 8005970:	10a4      	asrs	r4, r4, #2
 8005972:	2600      	movs	r6, #0
 8005974:	42a6      	cmp	r6, r4
 8005976:	d109      	bne.n	800598c <__libc_init_array+0x24>
 8005978:	4d0b      	ldr	r5, [pc, #44]	@ (80059a8 <__libc_init_array+0x40>)
 800597a:	4c0c      	ldr	r4, [pc, #48]	@ (80059ac <__libc_init_array+0x44>)
 800597c:	f000 f872 	bl	8005a64 <_init>
 8005980:	1b64      	subs	r4, r4, r5
 8005982:	10a4      	asrs	r4, r4, #2
 8005984:	2600      	movs	r6, #0
 8005986:	42a6      	cmp	r6, r4
 8005988:	d105      	bne.n	8005996 <__libc_init_array+0x2e>
 800598a:	bd70      	pop	{r4, r5, r6, pc}
 800598c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005990:	4798      	blx	r3
 8005992:	3601      	adds	r6, #1
 8005994:	e7ee      	b.n	8005974 <__libc_init_array+0xc>
 8005996:	f855 3b04 	ldr.w	r3, [r5], #4
 800599a:	4798      	blx	r3
 800599c:	3601      	adds	r6, #1
 800599e:	e7f2      	b.n	8005986 <__libc_init_array+0x1e>
 80059a0:	08005b5c 	.word	0x08005b5c
 80059a4:	08005b5c 	.word	0x08005b5c
 80059a8:	08005b5c 	.word	0x08005b5c
 80059ac:	08005b60 	.word	0x08005b60

080059b0 <__retarget_lock_acquire_recursive>:
 80059b0:	4770      	bx	lr

080059b2 <__retarget_lock_release_recursive>:
 80059b2:	4770      	bx	lr

080059b4 <memcpy>:
 80059b4:	440a      	add	r2, r1
 80059b6:	4291      	cmp	r1, r2
 80059b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80059bc:	d100      	bne.n	80059c0 <memcpy+0xc>
 80059be:	4770      	bx	lr
 80059c0:	b510      	push	{r4, lr}
 80059c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059ca:	4291      	cmp	r1, r2
 80059cc:	d1f9      	bne.n	80059c2 <memcpy+0xe>
 80059ce:	bd10      	pop	{r4, pc}

080059d0 <_free_r>:
 80059d0:	b538      	push	{r3, r4, r5, lr}
 80059d2:	4605      	mov	r5, r0
 80059d4:	2900      	cmp	r1, #0
 80059d6:	d041      	beq.n	8005a5c <_free_r+0x8c>
 80059d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059dc:	1f0c      	subs	r4, r1, #4
 80059de:	2b00      	cmp	r3, #0
 80059e0:	bfb8      	it	lt
 80059e2:	18e4      	addlt	r4, r4, r3
 80059e4:	f7ff ff38 	bl	8005858 <__malloc_lock>
 80059e8:	4a1d      	ldr	r2, [pc, #116]	@ (8005a60 <_free_r+0x90>)
 80059ea:	6813      	ldr	r3, [r2, #0]
 80059ec:	b933      	cbnz	r3, 80059fc <_free_r+0x2c>
 80059ee:	6063      	str	r3, [r4, #4]
 80059f0:	6014      	str	r4, [r2, #0]
 80059f2:	4628      	mov	r0, r5
 80059f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059f8:	f7ff bf34 	b.w	8005864 <__malloc_unlock>
 80059fc:	42a3      	cmp	r3, r4
 80059fe:	d908      	bls.n	8005a12 <_free_r+0x42>
 8005a00:	6820      	ldr	r0, [r4, #0]
 8005a02:	1821      	adds	r1, r4, r0
 8005a04:	428b      	cmp	r3, r1
 8005a06:	bf01      	itttt	eq
 8005a08:	6819      	ldreq	r1, [r3, #0]
 8005a0a:	685b      	ldreq	r3, [r3, #4]
 8005a0c:	1809      	addeq	r1, r1, r0
 8005a0e:	6021      	streq	r1, [r4, #0]
 8005a10:	e7ed      	b.n	80059ee <_free_r+0x1e>
 8005a12:	461a      	mov	r2, r3
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	b10b      	cbz	r3, 8005a1c <_free_r+0x4c>
 8005a18:	42a3      	cmp	r3, r4
 8005a1a:	d9fa      	bls.n	8005a12 <_free_r+0x42>
 8005a1c:	6811      	ldr	r1, [r2, #0]
 8005a1e:	1850      	adds	r0, r2, r1
 8005a20:	42a0      	cmp	r0, r4
 8005a22:	d10b      	bne.n	8005a3c <_free_r+0x6c>
 8005a24:	6820      	ldr	r0, [r4, #0]
 8005a26:	4401      	add	r1, r0
 8005a28:	1850      	adds	r0, r2, r1
 8005a2a:	4283      	cmp	r3, r0
 8005a2c:	6011      	str	r1, [r2, #0]
 8005a2e:	d1e0      	bne.n	80059f2 <_free_r+0x22>
 8005a30:	6818      	ldr	r0, [r3, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	6053      	str	r3, [r2, #4]
 8005a36:	4408      	add	r0, r1
 8005a38:	6010      	str	r0, [r2, #0]
 8005a3a:	e7da      	b.n	80059f2 <_free_r+0x22>
 8005a3c:	d902      	bls.n	8005a44 <_free_r+0x74>
 8005a3e:	230c      	movs	r3, #12
 8005a40:	602b      	str	r3, [r5, #0]
 8005a42:	e7d6      	b.n	80059f2 <_free_r+0x22>
 8005a44:	6820      	ldr	r0, [r4, #0]
 8005a46:	1821      	adds	r1, r4, r0
 8005a48:	428b      	cmp	r3, r1
 8005a4a:	bf04      	itt	eq
 8005a4c:	6819      	ldreq	r1, [r3, #0]
 8005a4e:	685b      	ldreq	r3, [r3, #4]
 8005a50:	6063      	str	r3, [r4, #4]
 8005a52:	bf04      	itt	eq
 8005a54:	1809      	addeq	r1, r1, r0
 8005a56:	6021      	streq	r1, [r4, #0]
 8005a58:	6054      	str	r4, [r2, #4]
 8005a5a:	e7ca      	b.n	80059f2 <_free_r+0x22>
 8005a5c:	bd38      	pop	{r3, r4, r5, pc}
 8005a5e:	bf00      	nop
 8005a60:	200042b0 	.word	0x200042b0

08005a64 <_init>:
 8005a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a66:	bf00      	nop
 8005a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a6a:	bc08      	pop	{r3}
 8005a6c:	469e      	mov	lr, r3
 8005a6e:	4770      	bx	lr

08005a70 <_fini>:
 8005a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a72:	bf00      	nop
 8005a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a76:	bc08      	pop	{r3}
 8005a78:	469e      	mov	lr, r3
 8005a7a:	4770      	bx	lr
