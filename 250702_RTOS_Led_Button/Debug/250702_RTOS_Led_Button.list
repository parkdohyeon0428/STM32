
250702_RTOS_Led_Button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000733c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  080074dc  080074dc  000084dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007644  08007644  00009100  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007644  08007644  00008644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800764c  0800764c  00009100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800764c  0800764c  0000864c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007650  08007650  00008650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000100  20000000  08007654  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042a4  20000100  08007754  00009100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200043a4  08007754  000093a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009100  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016336  00000000  00000000  00009130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b38  00000000  00000000  0001f466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  00022fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f4b  00000000  00000000  00024380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195dd  00000000  00000000  000252cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018c8b  00000000  00000000  0003e8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097df3  00000000  00000000  00057533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ef326  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005640  00000000  00000000  000ef36c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000f49ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000100 	.word	0x20000100
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080074c4 	.word	0x080074c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000104 	.word	0x20000104
 80001dc:	080074c4 	.word	0x080074c4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	@ (80005d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <vApplicationGetIdleTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2280      	movs	r2, #128	@ 0x80
 80005c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000148 	.word	0x20000148
 80005dc:	200001e8 	.word	0x200001e8

080005e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b0a6      	sub	sp, #152	@ 0x98
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of LcdMutex01 */
  osMutexDef(LcdMutex01);
 80005e6:	2300      	movs	r3, #0
 80005e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80005ec:	2300      	movs	r3, #0
 80005ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  LcdMutex01Handle = osMutexCreate(osMutex(LcdMutex01));
 80005f2:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 faf3 	bl	8003be2 <osMutexCreate>
 80005fc:	4603      	mov	r3, r0
 80005fe:	4a3f      	ldr	r2, [pc, #252]	@ (80006fc <MX_FREERTOS_Init+0x11c>)
 8000600:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of btnLedQueue */
  osMessageQDef(btnLedQueue, 16, uint16_t);
 8000602:	4b3f      	ldr	r3, [pc, #252]	@ (8000700 <MX_FREERTOS_Init+0x120>)
 8000604:	f107 0480 	add.w	r4, r7, #128	@ 0x80
 8000608:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800060a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  btnLedQueueHandle = osMessageCreate(osMessageQ(btnLedQueue), NULL);
 800060e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f003 fc81 	bl	8003f1c <osMessageCreate>
 800061a:	4603      	mov	r3, r0
 800061c:	4a39      	ldr	r2, [pc, #228]	@ (8000704 <MX_FREERTOS_Init+0x124>)
 800061e:	6013      	str	r3, [r2, #0]

  /* definition and creation of btnFNDQueue */
  osMessageQDef(btnFNDQueue, 16, uint16_t);
 8000620:	4b37      	ldr	r3, [pc, #220]	@ (8000700 <MX_FREERTOS_Init+0x120>)
 8000622:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8000626:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000628:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  btnFNDQueueHandle = osMessageCreate(osMessageQ(btnFNDQueue), NULL);
 800062c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f003 fc72 	bl	8003f1c <osMessageCreate>
 8000638:	4603      	mov	r3, r0
 800063a:	4a33      	ldr	r2, [pc, #204]	@ (8000708 <MX_FREERTOS_Init+0x128>)
 800063c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  btnMail = osMailCreate(osMailQ(btnMail), NULL);
 800063e:	2100      	movs	r1, #0
 8000640:	4832      	ldr	r0, [pc, #200]	@ (800070c <MX_FREERTOS_Init+0x12c>)
 8000642:	f003 fc93 	bl	8003f6c <osMailCreate>
 8000646:	4603      	mov	r3, r0
 8000648:	4a31      	ldr	r2, [pc, #196]	@ (8000710 <MX_FREERTOS_Init+0x130>)
 800064a:	6013      	str	r3, [r2, #0]
  fndMail = osMailCreate(osMailQ(fndMail), NULL);
 800064c:	2100      	movs	r1, #0
 800064e:	4831      	ldr	r0, [pc, #196]	@ (8000714 <MX_FREERTOS_Init+0x134>)
 8000650:	f003 fc8c 	bl	8003f6c <osMailCreate>
 8000654:	4603      	mov	r3, r0
 8000656:	4a30      	ldr	r2, [pc, #192]	@ (8000718 <MX_FREERTOS_Init+0x138>)
 8000658:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800065a:	4b30      	ldr	r3, [pc, #192]	@ (800071c <MX_FREERTOS_Init+0x13c>)
 800065c:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000660:	461d      	mov	r5, r3
 8000662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000666:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800066a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800066e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000672:	2100      	movs	r1, #0
 8000674:	4618      	mov	r0, r3
 8000676:	f003 fa54 	bl	8003b22 <osThreadCreate>
 800067a:	4603      	mov	r3, r0
 800067c:	4a28      	ldr	r2, [pc, #160]	@ (8000720 <MX_FREERTOS_Init+0x140>)
 800067e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myButtonTask */
  osThreadDef(myButtonTask, StartButtonTask, osPriorityNormal, 0, 128);
 8000680:	4b28      	ldr	r3, [pc, #160]	@ (8000724 <MX_FREERTOS_Init+0x144>)
 8000682:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000686:	461d      	mov	r5, r3
 8000688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800068c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000690:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myButtonTaskHandle = osThreadCreate(osThread(myButtonTask), NULL);
 8000694:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f003 fa41 	bl	8003b22 <osThreadCreate>
 80006a0:	4603      	mov	r3, r0
 80006a2:	4a21      	ldr	r2, [pc, #132]	@ (8000728 <MX_FREERTOS_Init+0x148>)
 80006a4:	6013      	str	r3, [r2, #0]

  /* definition and creation of myLedTask */
  osThreadDef(myLedTask, StartLedTask, osPriorityNormal, 0, 128);
 80006a6:	4b21      	ldr	r3, [pc, #132]	@ (800072c <MX_FREERTOS_Init+0x14c>)
 80006a8:	f107 041c 	add.w	r4, r7, #28
 80006ac:	461d      	mov	r5, r3
 80006ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myLedTaskHandle = osThreadCreate(osThread(myLedTask), NULL);
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	2100      	movs	r1, #0
 80006c0:	4618      	mov	r0, r3
 80006c2:	f003 fa2e 	bl	8003b22 <osThreadCreate>
 80006c6:	4603      	mov	r3, r0
 80006c8:	4a19      	ldr	r2, [pc, #100]	@ (8000730 <MX_FREERTOS_Init+0x150>)
 80006ca:	6013      	str	r3, [r2, #0]

  /* definition and creation of myFNDTask */
  osThreadDef(myFNDTask, StartFNDTask, osPriorityNormal, 0, 128);
 80006cc:	4b19      	ldr	r3, [pc, #100]	@ (8000734 <MX_FREERTOS_Init+0x154>)
 80006ce:	463c      	mov	r4, r7
 80006d0:	461d      	mov	r5, r3
 80006d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myFNDTaskHandle = osThreadCreate(osThread(myFNDTask), NULL);
 80006de:	463b      	mov	r3, r7
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f003 fa1d 	bl	8003b22 <osThreadCreate>
 80006e8:	4603      	mov	r3, r0
 80006ea:	4a13      	ldr	r2, [pc, #76]	@ (8000738 <MX_FREERTOS_Init+0x158>)
 80006ec:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  HAL_TIM_Base_Start_IT(&htim2);
 80006ee:	4813      	ldr	r0, [pc, #76]	@ (800073c <MX_FREERTOS_Init+0x15c>)
 80006f0:	f002 fe02 	bl	80032f8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END RTOS_THREADS */

}
 80006f4:	bf00      	nop
 80006f6:	3798      	adds	r7, #152	@ 0x98
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bdb0      	pop	{r4, r5, r7, pc}
 80006fc:	20000144 	.word	0x20000144
 8000700:	080074dc 	.word	0x080074dc
 8000704:	2000013c 	.word	0x2000013c
 8000708:	20000140 	.word	0x20000140
 800070c:	080075e0 	.word	0x080075e0
 8000710:	20000120 	.word	0x20000120
 8000714:	080075ec 	.word	0x080075ec
 8000718:	20000128 	.word	0x20000128
 800071c:	080074f8 	.word	0x080074f8
 8000720:	2000012c 	.word	0x2000012c
 8000724:	08007524 	.word	0x08007524
 8000728:	20000130 	.word	0x20000130
 800072c:	0800754c 	.word	0x0800754c
 8000730:	20000134 	.word	0x20000134
 8000734:	08007574 	.word	0x08007574
 8000738:	20000138 	.word	0x20000138
 800073c:	20000488 	.word	0x20000488

08000740 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000748:	2001      	movs	r0, #1
 800074a:	f003 fa36 	bl	8003bba <osDelay>
 800074e:	e7fb      	b.n	8000748 <StartDefaultTask+0x8>

08000750 <StartButtonTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButtonTask */
void StartButtonTask(void const * argument)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08e      	sub	sp, #56	@ 0x38
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButtonTask */
	Button_Init(&hBtnLed1, GPIOB, GPIO_PIN_5);
 8000758:	2220      	movs	r2, #32
 800075a:	4970      	ldr	r1, [pc, #448]	@ (800091c <StartButtonTask+0x1cc>)
 800075c:	4870      	ldr	r0, [pc, #448]	@ (8000920 <StartButtonTask+0x1d0>)
 800075e:	f000 fd5c 	bl	800121a <Button_Init>
	Button_Init(&hBtnLed2, GPIOB, GPIO_PIN_3);
 8000762:	2208      	movs	r2, #8
 8000764:	496d      	ldr	r1, [pc, #436]	@ (800091c <StartButtonTask+0x1cc>)
 8000766:	486f      	ldr	r0, [pc, #444]	@ (8000924 <StartButtonTask+0x1d4>)
 8000768:	f000 fd57 	bl	800121a <Button_Init>
	Button_Init(&hBtnLed3, GPIOA, GPIO_PIN_10);
 800076c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000770:	496d      	ldr	r1, [pc, #436]	@ (8000928 <StartButtonTask+0x1d8>)
 8000772:	486e      	ldr	r0, [pc, #440]	@ (800092c <StartButtonTask+0x1dc>)
 8000774:	f000 fd51 	bl	800121a <Button_Init>
	LCD_Init(&hi2c1);
 8000778:	486d      	ldr	r0, [pc, #436]	@ (8000930 <StartButtonTask+0x1e0>)
 800077a:	f000 ff69 	bl	8001650 <LCD_Init>
	char str[30];
	uint32_t counter = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	637b      	str	r3, [r7, #52]	@ 0x34
	//My_Que_Init(&qBtnLed, sizeof(btn_led_t));

  /* Infinite loop */
  for(;;)
  {
	  if (Button_GetState(&hBtnLed1) == ACT_RELEASED) {
 8000782:	4867      	ldr	r0, [pc, #412]	@ (8000920 <StartButtonTask+0x1d0>)
 8000784:	f000 fd5f 	bl	8001246 <Button_GetState>
 8000788:	4603      	mov	r3, r0
 800078a:	2b02      	cmp	r3, #2
 800078c:	d133      	bne.n	80007f6 <StartButtonTask+0xa6>
		  btnData = osMailAlloc(btnMail, osWaitForever);
 800078e:	4b69      	ldr	r3, [pc, #420]	@ (8000934 <StartButtonTask+0x1e4>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f04f 31ff 	mov.w	r1, #4294967295
 8000796:	4618      	mov	r0, r3
 8000798:	f003 fc40 	bl	800401c <osMailAlloc>
 800079c:	6338      	str	r0, [r7, #48]	@ 0x30
		  btnData->id = BTN_LED1;
 800079e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
		  osMailPut(btnMail, btnData);
 80007a4:	4b63      	ldr	r3, [pc, #396]	@ (8000934 <StartButtonTask+0x1e4>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80007aa:	4618      	mov	r0, r3
 80007ac:	f003 fc4c 	bl	8004048 <osMailPut>

		  btnState = osMailAlloc(fndMail, osWaitForever);
 80007b0:	4b61      	ldr	r3, [pc, #388]	@ (8000938 <StartButtonTask+0x1e8>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f04f 31ff 	mov.w	r1, #4294967295
 80007b8:	4618      	mov	r0, r3
 80007ba:	f003 fc2f 	bl	800401c <osMailAlloc>
 80007be:	62f8      	str	r0, [r7, #44]	@ 0x2c
		  btnState->st = RUN;
 80007c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007c2:	2201      	movs	r2, #1
 80007c4:	601a      	str	r2, [r3, #0]
		  osMailPut(fndMail, btnState);
 80007c6:	4b5c      	ldr	r3, [pc, #368]	@ (8000938 <StartButtonTask+0x1e8>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80007cc:	4618      	mov	r0, r3
 80007ce:	f003 fc3b 	bl	8004048 <osMailPut>
		  //My_enQue(&qBtnLed, &btnData);

		  osMutexWait(LcdMutex01Handle, osWaitForever); // 계속 기다림
 80007d2:	4b5a      	ldr	r3, [pc, #360]	@ (800093c <StartButtonTask+0x1ec>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f04f 31ff 	mov.w	r1, #4294967295
 80007da:	4618      	mov	r0, r3
 80007dc:	f003 fa1a 	bl	8003c14 <osMutexWait>
		  LCD_writeStringXY(0, 0, "BTN1");
 80007e0:	4a57      	ldr	r2, [pc, #348]	@ (8000940 <StartButtonTask+0x1f0>)
 80007e2:	2100      	movs	r1, #0
 80007e4:	2000      	movs	r0, #0
 80007e6:	f001 f882 	bl	80018ee <LCD_writeStringXY>
		  osMutexRelease(LcdMutex01Handle);
 80007ea:	4b54      	ldr	r3, [pc, #336]	@ (800093c <StartButtonTask+0x1ec>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4618      	mov	r0, r3
 80007f0:	f003 fa5e 	bl	8003cb0 <osMutexRelease>
 80007f4:	e072      	b.n	80008dc <StartButtonTask+0x18c>
	  }
	  else if (Button_GetState(&hBtnLed2) == ACT_RELEASED) {
 80007f6:	484b      	ldr	r0, [pc, #300]	@ (8000924 <StartButtonTask+0x1d4>)
 80007f8:	f000 fd25 	bl	8001246 <Button_GetState>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b02      	cmp	r3, #2
 8000800:	d133      	bne.n	800086a <StartButtonTask+0x11a>
		  btnData = osMailAlloc(btnMail, osWaitForever);
 8000802:	4b4c      	ldr	r3, [pc, #304]	@ (8000934 <StartButtonTask+0x1e4>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f04f 31ff 	mov.w	r1, #4294967295
 800080a:	4618      	mov	r0, r3
 800080c:	f003 fc06 	bl	800401c <osMailAlloc>
 8000810:	6338      	str	r0, [r7, #48]	@ 0x30
		  btnData->id = BTN_LED2;
 8000812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000814:	2201      	movs	r2, #1
 8000816:	601a      	str	r2, [r3, #0]
		  osMailPut(btnMail, btnData);
 8000818:	4b46      	ldr	r3, [pc, #280]	@ (8000934 <StartButtonTask+0x1e4>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800081e:	4618      	mov	r0, r3
 8000820:	f003 fc12 	bl	8004048 <osMailPut>


		  btnState = osMailAlloc(fndMail, osWaitForever);
 8000824:	4b44      	ldr	r3, [pc, #272]	@ (8000938 <StartButtonTask+0x1e8>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f04f 31ff 	mov.w	r1, #4294967295
 800082c:	4618      	mov	r0, r3
 800082e:	f003 fbf5 	bl	800401c <osMailAlloc>
 8000832:	62f8      	str	r0, [r7, #44]	@ 0x2c
		  btnState->st = STOP;
 8000834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
		  osMailPut(fndMail, btnState);
 800083a:	4b3f      	ldr	r3, [pc, #252]	@ (8000938 <StartButtonTask+0x1e8>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000840:	4618      	mov	r0, r3
 8000842:	f003 fc01 	bl	8004048 <osMailPut>
		  //My_enQue(&qBtnLed, &btnData);
		  osMutexWait(LcdMutex01Handle, osWaitForever); // 계속 기다림
 8000846:	4b3d      	ldr	r3, [pc, #244]	@ (800093c <StartButtonTask+0x1ec>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f04f 31ff 	mov.w	r1, #4294967295
 800084e:	4618      	mov	r0, r3
 8000850:	f003 f9e0 	bl	8003c14 <osMutexWait>
		  LCD_writeStringXY(0, 0, "BTN2");
 8000854:	4a3b      	ldr	r2, [pc, #236]	@ (8000944 <StartButtonTask+0x1f4>)
 8000856:	2100      	movs	r1, #0
 8000858:	2000      	movs	r0, #0
 800085a:	f001 f848 	bl	80018ee <LCD_writeStringXY>
		  osMutexRelease(LcdMutex01Handle);
 800085e:	4b37      	ldr	r3, [pc, #220]	@ (800093c <StartButtonTask+0x1ec>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4618      	mov	r0, r3
 8000864:	f003 fa24 	bl	8003cb0 <osMutexRelease>
 8000868:	e038      	b.n	80008dc <StartButtonTask+0x18c>
	  }
	  else if (Button_GetState(&hBtnLed3) == ACT_RELEASED) {
 800086a:	4830      	ldr	r0, [pc, #192]	@ (800092c <StartButtonTask+0x1dc>)
 800086c:	f000 fceb 	bl	8001246 <Button_GetState>
 8000870:	4603      	mov	r3, r0
 8000872:	2b02      	cmp	r3, #2
 8000874:	d132      	bne.n	80008dc <StartButtonTask+0x18c>
		  btnData = osMailAlloc(btnMail, osWaitForever);
 8000876:	4b2f      	ldr	r3, [pc, #188]	@ (8000934 <StartButtonTask+0x1e4>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f04f 31ff 	mov.w	r1, #4294967295
 800087e:	4618      	mov	r0, r3
 8000880:	f003 fbcc 	bl	800401c <osMailAlloc>
 8000884:	6338      	str	r0, [r7, #48]	@ 0x30
		  btnData->id = BTN_LED3;
 8000886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000888:	2202      	movs	r2, #2
 800088a:	601a      	str	r2, [r3, #0]
		  osMailPut(btnMail, btnData);
 800088c:	4b29      	ldr	r3, [pc, #164]	@ (8000934 <StartButtonTask+0x1e4>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000892:	4618      	mov	r0, r3
 8000894:	f003 fbd8 	bl	8004048 <osMailPut>

		  btnState = osMailAlloc(fndMail, osWaitForever);
 8000898:	4b27      	ldr	r3, [pc, #156]	@ (8000938 <StartButtonTask+0x1e8>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f04f 31ff 	mov.w	r1, #4294967295
 80008a0:	4618      	mov	r0, r3
 80008a2:	f003 fbbb 	bl	800401c <osMailAlloc>
 80008a6:	62f8      	str	r0, [r7, #44]	@ 0x2c
		  btnState->st = CLEAR;
 80008a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008aa:	2202      	movs	r2, #2
 80008ac:	601a      	str	r2, [r3, #0]
		  osMailPut(fndMail, btnState);
 80008ae:	4b22      	ldr	r3, [pc, #136]	@ (8000938 <StartButtonTask+0x1e8>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80008b4:	4618      	mov	r0, r3
 80008b6:	f003 fbc7 	bl	8004048 <osMailPut>
		  //btnData.id = BTN_LED3;
		  //My_enQue(&qBtnLed, &btnData);
		  osMutexWait(LcdMutex01Handle, osWaitForever); // 계속 기다림
 80008ba:	4b20      	ldr	r3, [pc, #128]	@ (800093c <StartButtonTask+0x1ec>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f04f 31ff 	mov.w	r1, #4294967295
 80008c2:	4618      	mov	r0, r3
 80008c4:	f003 f9a6 	bl	8003c14 <osMutexWait>
		  LCD_writeStringXY(0, 0, "BTN3");
 80008c8:	4a1f      	ldr	r2, [pc, #124]	@ (8000948 <StartButtonTask+0x1f8>)
 80008ca:	2100      	movs	r1, #0
 80008cc:	2000      	movs	r0, #0
 80008ce:	f001 f80e 	bl	80018ee <LCD_writeStringXY>
		  osMutexRelease(LcdMutex01Handle);
 80008d2:	4b1a      	ldr	r3, [pc, #104]	@ (800093c <StartButtonTask+0x1ec>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4618      	mov	r0, r3
 80008d8:	f003 f9ea 	bl	8003cb0 <osMutexRelease>
	  }
	  sprintf(str, "count : %u", (unsigned int)counter++);
 80008dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008de:	1c5a      	adds	r2, r3, #1
 80008e0:	637a      	str	r2, [r7, #52]	@ 0x34
 80008e2:	f107 000c 	add.w	r0, r7, #12
 80008e6:	461a      	mov	r2, r3
 80008e8:	4918      	ldr	r1, [pc, #96]	@ (800094c <StartButtonTask+0x1fc>)
 80008ea:	f006 f99b 	bl	8006c24 <siprintf>
	  osMutexWait(LcdMutex01Handle, osWaitForever); // 계속 기다림
 80008ee:	4b13      	ldr	r3, [pc, #76]	@ (800093c <StartButtonTask+0x1ec>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f04f 31ff 	mov.w	r1, #4294967295
 80008f6:	4618      	mov	r0, r3
 80008f8:	f003 f98c 	bl	8003c14 <osMutexWait>
	  LCD_writeStringXY(0, 5, str);
 80008fc:	f107 030c 	add.w	r3, r7, #12
 8000900:	461a      	mov	r2, r3
 8000902:	2105      	movs	r1, #5
 8000904:	2000      	movs	r0, #0
 8000906:	f000 fff2 	bl	80018ee <LCD_writeStringXY>
	  osMutexRelease(LcdMutex01Handle);
 800090a:	4b0c      	ldr	r3, [pc, #48]	@ (800093c <StartButtonTask+0x1ec>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4618      	mov	r0, r3
 8000910:	f003 f9ce 	bl	8003cb0 <osMutexRelease>
	  osDelay(100);
 8000914:	2064      	movs	r0, #100	@ 0x64
 8000916:	f003 f950 	bl	8003bba <osDelay>
	  if (Button_GetState(&hBtnLed1) == ACT_RELEASED) {
 800091a:	e732      	b.n	8000782 <StartButtonTask+0x32>
 800091c:	40020400 	.word	0x40020400
 8000920:	200004d0 	.word	0x200004d0
 8000924:	200004dc 	.word	0x200004dc
 8000928:	40020000 	.word	0x40020000
 800092c:	200004e8 	.word	0x200004e8
 8000930:	200003e8 	.word	0x200003e8
 8000934:	20000120 	.word	0x20000120
 8000938:	20000128 	.word	0x20000128
 800093c:	20000144 	.word	0x20000144
 8000940:	08007590 	.word	0x08007590
 8000944:	08007598 	.word	0x08007598
 8000948:	080075a0 	.word	0x080075a0
 800094c:	080075a8 	.word	0x080075a8

08000950 <StartLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedTask */
void StartLedTask(void const * argument)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b092      	sub	sp, #72	@ 0x48
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLedTask */
	char str[30];
	uint32_t counter = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	647b      	str	r3, [r7, #68]	@ 0x44
	btn_led_t *btnData;
	osEvent evt;


	uint8_t ledData = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	uint32_t prevTime = 0, curTime = 0;
 8000962:	2300      	movs	r3, #0
 8000964:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000966:	2300      	movs	r3, #0
 8000968:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Infinite loop */
  for(;;)
  {
	  curTime = HAL_GetTick();
 800096a:	f001 f845 	bl	80019f8 <HAL_GetTick>
 800096e:	63b8      	str	r0, [r7, #56]	@ 0x38
		if(curTime - prevTime >= 500){
 8000970:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000972:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800097a:	d30c      	bcc.n	8000996 <StartLedTask+0x46>
		   prevTime = curTime;
 800097c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800097e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		   ledData ^= (1<<0);
 8000980:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000984:	f083 0301 	eor.w	r3, r3, #1
 8000988:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
		   LedBar_write(ledData);
 800098c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000990:	4618      	mov	r0, r3
 8000992:	f000 ffc1 	bl	8001918 <LedBar_write>
		}

	  evt = osMailGet(btnMail, 0);
 8000996:	4b4a      	ldr	r3, [pc, #296]	@ (8000ac0 <StartLedTask+0x170>)
 8000998:	6819      	ldr	r1, [r3, #0]
 800099a:	f107 0308 	add.w	r3, r7, #8
 800099e:	2200      	movs	r2, #0
 80009a0:	4618      	mov	r0, r3
 80009a2:	f003 fb8f 	bl	80040c4 <osMailGet>
	  if (evt.status == osEventMail) {
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	2b20      	cmp	r3, #32
 80009aa:	d169      	bne.n	8000a80 <StartLedTask+0x130>
		  btnData = evt.value.p;
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	637b      	str	r3, [r7, #52]	@ 0x34
		 // My_deQue(&qBtnLed, &btnData);
		  if (btnData->id == BTN_LED1) {
 80009b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d11c      	bne.n	80009f2 <StartLedTask+0xa2>
			  ledData ^= (1<<1);
 80009b8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80009bc:	f083 0302 	eor.w	r3, r3, #2
 80009c0:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
			  LedBar_write(ledData);
 80009c4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80009c8:	4618      	mov	r0, r3
 80009ca:	f000 ffa5 	bl	8001918 <LedBar_write>
			  osMutexWait(LcdMutex01Handle, osWaitForever); // 계속 기다림
 80009ce:	4b3d      	ldr	r3, [pc, #244]	@ (8000ac4 <StartLedTask+0x174>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f04f 31ff 	mov.w	r1, #4294967295
 80009d6:	4618      	mov	r0, r3
 80009d8:	f003 f91c 	bl	8003c14 <osMutexWait>
			  LCD_writeStringXY(1, 0, "LED1");
 80009dc:	4a3a      	ldr	r2, [pc, #232]	@ (8000ac8 <StartLedTask+0x178>)
 80009de:	2100      	movs	r1, #0
 80009e0:	2001      	movs	r0, #1
 80009e2:	f000 ff84 	bl	80018ee <LCD_writeStringXY>
			  osMutexRelease(LcdMutex01Handle);
 80009e6:	4b37      	ldr	r3, [pc, #220]	@ (8000ac4 <StartLedTask+0x174>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4618      	mov	r0, r3
 80009ec:	f003 f960 	bl	8003cb0 <osMutexRelease>
 80009f0:	e040      	b.n	8000a74 <StartLedTask+0x124>
		  }
		  else if (btnData->id == BTN_LED2) {
 80009f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d11c      	bne.n	8000a34 <StartLedTask+0xe4>
			  ledData ^= (1<<2);
 80009fa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80009fe:	f083 0304 	eor.w	r3, r3, #4
 8000a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
			  LedBar_write(ledData);
 8000a06:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 ff84 	bl	8001918 <LedBar_write>
			  osMutexWait(LcdMutex01Handle, osWaitForever); // 계속 기다림
 8000a10:	4b2c      	ldr	r3, [pc, #176]	@ (8000ac4 <StartLedTask+0x174>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f04f 31ff 	mov.w	r1, #4294967295
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f003 f8fb 	bl	8003c14 <osMutexWait>
			  LCD_writeStringXY(1, 0, "LED2");
 8000a1e:	4a2b      	ldr	r2, [pc, #172]	@ (8000acc <StartLedTask+0x17c>)
 8000a20:	2100      	movs	r1, #0
 8000a22:	2001      	movs	r0, #1
 8000a24:	f000 ff63 	bl	80018ee <LCD_writeStringXY>
			  osMutexRelease(LcdMutex01Handle);
 8000a28:	4b26      	ldr	r3, [pc, #152]	@ (8000ac4 <StartLedTask+0x174>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f003 f93f 	bl	8003cb0 <osMutexRelease>
 8000a32:	e01f      	b.n	8000a74 <StartLedTask+0x124>
		  }
		  else if (btnData->id == BTN_LED3) {
 8000a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b02      	cmp	r3, #2
 8000a3a:	d11b      	bne.n	8000a74 <StartLedTask+0x124>
			  ledData ^= (1<<3);
 8000a3c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000a40:	f083 0308 	eor.w	r3, r3, #8
 8000a44:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
			  LedBar_write(ledData);
 8000a48:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f000 ff63 	bl	8001918 <LedBar_write>
			  osMutexWait(LcdMutex01Handle, osWaitForever); // 계속 기다림
 8000a52:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac4 <StartLedTask+0x174>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f04f 31ff 	mov.w	r1, #4294967295
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f003 f8da 	bl	8003c14 <osMutexWait>
			  LCD_writeStringXY(1, 0, "LED3");
 8000a60:	4a1b      	ldr	r2, [pc, #108]	@ (8000ad0 <StartLedTask+0x180>)
 8000a62:	2100      	movs	r1, #0
 8000a64:	2001      	movs	r0, #1
 8000a66:	f000 ff42 	bl	80018ee <LCD_writeStringXY>
			  osMutexRelease(LcdMutex01Handle); // 다 쓰고 나옴
 8000a6a:	4b16      	ldr	r3, [pc, #88]	@ (8000ac4 <StartLedTask+0x174>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f003 f91e 	bl	8003cb0 <osMutexRelease>
		  }
		  osMailFree(btnMail, btnData);
 8000a74:	4b12      	ldr	r3, [pc, #72]	@ (8000ac0 <StartLedTask+0x170>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f003 fb96 	bl	80041ac <osMailFree>
	  }
    sprintf(str, "count : %u", (unsigned int)counter++);
 8000a80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000a82:	1c5a      	adds	r2, r3, #1
 8000a84:	647a      	str	r2, [r7, #68]	@ 0x44
 8000a86:	f107 0014 	add.w	r0, r7, #20
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	4911      	ldr	r1, [pc, #68]	@ (8000ad4 <StartLedTask+0x184>)
 8000a8e:	f006 f8c9 	bl	8006c24 <siprintf>
    osMutexWait(LcdMutex01Handle, osWaitForever); // 계속 기다림
 8000a92:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac4 <StartLedTask+0x174>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f04f 31ff 	mov.w	r1, #4294967295
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f003 f8ba 	bl	8003c14 <osMutexWait>
	LCD_writeStringXY(1, 4, str);
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	2104      	movs	r1, #4
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f000 ff20 	bl	80018ee <LCD_writeStringXY>
	osMutexRelease(LcdMutex01Handle); // 다 쓰고 나옴
 8000aae:	4b05      	ldr	r3, [pc, #20]	@ (8000ac4 <StartLedTask+0x174>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f003 f8fc 	bl	8003cb0 <osMutexRelease>
	osDelay(100);
 8000ab8:	2064      	movs	r0, #100	@ 0x64
 8000aba:	f003 f87e 	bl	8003bba <osDelay>
	  curTime = HAL_GetTick();
 8000abe:	e754      	b.n	800096a <StartLedTask+0x1a>
 8000ac0:	20000120 	.word	0x20000120
 8000ac4:	20000144 	.word	0x20000144
 8000ac8:	080075b4 	.word	0x080075b4
 8000acc:	080075bc 	.word	0x080075bc
 8000ad0:	080075c4 	.word	0x080075c4
 8000ad4:	080075a8 	.word	0x080075a8

08000ad8 <StartFNDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFNDTask */
void StartFNDTask(void const * argument)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b088      	sub	sp, #32
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFNDTask */
	uint16_t counter = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	83fb      	strh	r3, [r7, #30]
	btn_fnd_t *btnState = STOP;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61bb      	str	r3, [r7, #24]
	osEvent evt;

  /* Infinite loop */
  for(;;)
  {
	  FND_WriteData(counter);
 8000ae8:	8bfb      	ldrh	r3, [r7, #30]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 fbdc 	bl	80012a8 <FND_WriteData>
	  if (btnState->st == RUN)
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d102      	bne.n	8000afe <StartFNDTask+0x26>
	  {
		  counter++;
 8000af8:	8bfb      	ldrh	r3, [r7, #30]
 8000afa:	3301      	adds	r3, #1
 8000afc:	83fb      	strh	r3, [r7, #30]
	  }
	  evt = osMailGet(fndMail, 0);
 8000afe:	4b12      	ldr	r3, [pc, #72]	@ (8000b48 <StartFNDTask+0x70>)
 8000b00:	6819      	ldr	r1, [r3, #0]
 8000b02:	f107 030c 	add.w	r3, r7, #12
 8000b06:	2200      	movs	r2, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f003 fadb 	bl	80040c4 <osMailGet>
	  if (evt.status == osEventMail) {
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	2b20      	cmp	r3, #32
 8000b12:	d115      	bne.n	8000b40 <StartFNDTask+0x68>
		  btnState = evt.value.p;
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	61bb      	str	r3, [r7, #24]
		  if (btnState->st == RUN) {
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d009      	beq.n	8000b34 <StartFNDTask+0x5c>

		  }
		  else if (btnState->st == STOP) {
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d005      	beq.n	8000b34 <StartFNDTask+0x5c>

		  }
		  else if (btnState->st == CLEAR) {
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b02      	cmp	r3, #2
 8000b2e:	d101      	bne.n	8000b34 <StartFNDTask+0x5c>
			  counter = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	83fb      	strh	r3, [r7, #30]
		  }
		  osMailFree(fndMail, btnState);
 8000b34:	4b04      	ldr	r3, [pc, #16]	@ (8000b48 <StartFNDTask+0x70>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	69b9      	ldr	r1, [r7, #24]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f003 fb36 	bl	80041ac <osMailFree>
	  }
    osDelay(100);
 8000b40:	2064      	movs	r0, #100	@ 0x64
 8000b42:	f003 f83a 	bl	8003bba <osDelay>
	  FND_WriteData(counter);
 8000b46:	e7cf      	b.n	8000ae8 <StartFNDTask+0x10>
 8000b48:	20000128 	.word	0x20000128

08000b4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	@ 0x28
 8000b50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
 8000b60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	4b49      	ldr	r3, [pc, #292]	@ (8000c8c <MX_GPIO_Init+0x140>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	4a48      	ldr	r2, [pc, #288]	@ (8000c8c <MX_GPIO_Init+0x140>)
 8000b6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b72:	4b46      	ldr	r3, [pc, #280]	@ (8000c8c <MX_GPIO_Init+0x140>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	4b42      	ldr	r3, [pc, #264]	@ (8000c8c <MX_GPIO_Init+0x140>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b86:	4a41      	ldr	r2, [pc, #260]	@ (8000c8c <MX_GPIO_Init+0x140>)
 8000b88:	f043 0304 	orr.w	r3, r3, #4
 8000b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8e:	4b3f      	ldr	r3, [pc, #252]	@ (8000c8c <MX_GPIO_Init+0x140>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b92:	f003 0304 	and.w	r3, r3, #4
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	4b3b      	ldr	r3, [pc, #236]	@ (8000c8c <MX_GPIO_Init+0x140>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	4a3a      	ldr	r2, [pc, #232]	@ (8000c8c <MX_GPIO_Init+0x140>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000baa:	4b38      	ldr	r3, [pc, #224]	@ (8000c8c <MX_GPIO_Init+0x140>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	4b34      	ldr	r3, [pc, #208]	@ (8000c8c <MX_GPIO_Init+0x140>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	4a33      	ldr	r2, [pc, #204]	@ (8000c8c <MX_GPIO_Init+0x140>)
 8000bc0:	f043 0302 	orr.w	r3, r3, #2
 8000bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc6:	4b31      	ldr	r3, [pc, #196]	@ (8000c8c <MX_GPIO_Init+0x140>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	f003 0302 	and.w	r3, r3, #2
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f240 117f 	movw	r1, #383	@ 0x17f
 8000bd8:	482d      	ldr	r0, [pc, #180]	@ (8000c90 <MX_GPIO_Init+0x144>)
 8000bda:	f001 f9bb 	bl	8001f54 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_11
 8000bde:	2200      	movs	r2, #0
 8000be0:	f641 0113 	movw	r1, #6163	@ 0x1813
 8000be4:	482b      	ldr	r0, [pc, #172]	@ (8000c94 <MX_GPIO_Init+0x148>)
 8000be6:	f001 f9b5 	bl	8001f54 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8000bea:	2200      	movs	r2, #0
 8000bec:	f24f 0107 	movw	r1, #61447	@ 0xf007
 8000bf0:	4829      	ldr	r0, [pc, #164]	@ (8000c98 <MX_GPIO_Init+0x14c>)
 8000bf2:	f001 f9af 	bl	8001f54 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000bf6:	f240 137f 	movw	r3, #383	@ 0x17f
 8000bfa:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c04:	2300      	movs	r3, #0
 8000c06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4820      	ldr	r0, [pc, #128]	@ (8000c90 <MX_GPIO_Init+0x144>)
 8000c10:	f001 f804 	bl	8001c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_11
 8000c14:	f641 0313 	movw	r3, #6163	@ 0x1813
 8000c18:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4819      	ldr	r0, [pc, #100]	@ (8000c94 <MX_GPIO_Init+0x148>)
 8000c2e:	f000 fff5 	bl	8001c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8000c32:	f24f 0307 	movw	r3, #61447	@ 0xf007
 8000c36:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2300      	movs	r3, #0
 8000c42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4813      	ldr	r0, [pc, #76]	@ (8000c98 <MX_GPIO_Init+0x14c>)
 8000c4c:	f000 ffe6 	bl	8001c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4619      	mov	r1, r3
 8000c64:	480b      	ldr	r0, [pc, #44]	@ (8000c94 <MX_GPIO_Init+0x148>)
 8000c66:	f000 ffd9 	bl	8001c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000c6a:	2328      	movs	r3, #40	@ 0x28
 8000c6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4806      	ldr	r0, [pc, #24]	@ (8000c98 <MX_GPIO_Init+0x14c>)
 8000c7e:	f000 ffcd 	bl	8001c1c <HAL_GPIO_Init>

}
 8000c82:	bf00      	nop
 8000c84:	3728      	adds	r7, #40	@ 0x28
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020800 	.word	0x40020800
 8000c94:	40020000 	.word	0x40020000
 8000c98:	40020400 	.word	0x40020400

08000c9c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ca0:	4b12      	ldr	r3, [pc, #72]	@ (8000cec <MX_I2C1_Init+0x50>)
 8000ca2:	4a13      	ldr	r2, [pc, #76]	@ (8000cf0 <MX_I2C1_Init+0x54>)
 8000ca4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ca6:	4b11      	ldr	r3, [pc, #68]	@ (8000cec <MX_I2C1_Init+0x50>)
 8000ca8:	4a12      	ldr	r2, [pc, #72]	@ (8000cf4 <MX_I2C1_Init+0x58>)
 8000caa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	@ (8000cec <MX_I2C1_Init+0x50>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cec <MX_I2C1_Init+0x50>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <MX_I2C1_Init+0x50>)
 8000cba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000cbe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cec <MX_I2C1_Init+0x50>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cc6:	4b09      	ldr	r3, [pc, #36]	@ (8000cec <MX_I2C1_Init+0x50>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ccc:	4b07      	ldr	r3, [pc, #28]	@ (8000cec <MX_I2C1_Init+0x50>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cd2:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <MX_I2C1_Init+0x50>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cd8:	4804      	ldr	r0, [pc, #16]	@ (8000cec <MX_I2C1_Init+0x50>)
 8000cda:	f001 f955 	bl	8001f88 <HAL_I2C_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ce4:	f000 f8e2 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	200003e8 	.word	0x200003e8
 8000cf0:	40005400 	.word	0x40005400
 8000cf4:	000186a0 	.word	0x000186a0

08000cf8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	@ 0x28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a19      	ldr	r2, [pc, #100]	@ (8000d7c <HAL_I2C_MspInit+0x84>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d12c      	bne.n	8000d74 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	4b18      	ldr	r3, [pc, #96]	@ (8000d80 <HAL_I2C_MspInit+0x88>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	4a17      	ldr	r2, [pc, #92]	@ (8000d80 <HAL_I2C_MspInit+0x88>)
 8000d24:	f043 0302 	orr.w	r3, r3, #2
 8000d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2a:	4b15      	ldr	r3, [pc, #84]	@ (8000d80 <HAL_I2C_MspInit+0x88>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d36:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d3c:	2312      	movs	r3, #18
 8000d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d44:	2303      	movs	r3, #3
 8000d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d48:	2304      	movs	r3, #4
 8000d4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4619      	mov	r1, r3
 8000d52:	480c      	ldr	r0, [pc, #48]	@ (8000d84 <HAL_I2C_MspInit+0x8c>)
 8000d54:	f000 ff62 	bl	8001c1c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	4b08      	ldr	r3, [pc, #32]	@ (8000d80 <HAL_I2C_MspInit+0x88>)
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d60:	4a07      	ldr	r2, [pc, #28]	@ (8000d80 <HAL_I2C_MspInit+0x88>)
 8000d62:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d66:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d68:	4b05      	ldr	r3, [pc, #20]	@ (8000d80 <HAL_I2C_MspInit+0x88>)
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d74:	bf00      	nop
 8000d76:	3728      	adds	r7, #40	@ 0x28
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40005400 	.word	0x40005400
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40020400 	.word	0x40020400

08000d88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d8c:	f000 fdfe 	bl	800198c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d90:	f000 f80c 	bl	8000dac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d94:	f7ff feda 	bl	8000b4c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d98:	f7ff ff80 	bl	8000c9c <MX_I2C1_Init>
  MX_TIM2_Init();
 8000d9c:	f000 f9a2 	bl	80010e4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000da0:	f7ff fc1e 	bl	80005e0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000da4:	f002 feb6 	bl	8003b14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <main+0x20>

08000dac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b094      	sub	sp, #80	@ 0x50
 8000db0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000db2:	f107 0320 	add.w	r3, r7, #32
 8000db6:	2230      	movs	r2, #48	@ 0x30
 8000db8:	2100      	movs	r1, #0
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f005 ff54 	bl	8006c68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc0:	f107 030c 	add.w	r3, r7, #12
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	4b27      	ldr	r3, [pc, #156]	@ (8000e74 <SystemClock_Config+0xc8>)
 8000dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd8:	4a26      	ldr	r2, [pc, #152]	@ (8000e74 <SystemClock_Config+0xc8>)
 8000dda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dde:	6413      	str	r3, [r2, #64]	@ 0x40
 8000de0:	4b24      	ldr	r3, [pc, #144]	@ (8000e74 <SystemClock_Config+0xc8>)
 8000de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dec:	2300      	movs	r3, #0
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	4b21      	ldr	r3, [pc, #132]	@ (8000e78 <SystemClock_Config+0xcc>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a20      	ldr	r2, [pc, #128]	@ (8000e78 <SystemClock_Config+0xcc>)
 8000df6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000dfa:	6013      	str	r3, [r2, #0]
 8000dfc:	4b1e      	ldr	r3, [pc, #120]	@ (8000e78 <SystemClock_Config+0xcc>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e0c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e10:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e12:	2302      	movs	r3, #2
 8000e14:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e16:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e1c:	2304      	movs	r3, #4
 8000e1e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000e20:	2364      	movs	r3, #100	@ 0x64
 8000e22:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e24:	2302      	movs	r3, #2
 8000e26:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e28:	2304      	movs	r3, #4
 8000e2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e2c:	f107 0320 	add.w	r3, r7, #32
 8000e30:	4618      	mov	r0, r3
 8000e32:	f001 fd47 	bl	80028c4 <HAL_RCC_OscConfig>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e3c:	f000 f836 	bl	8000eac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e40:	230f      	movs	r3, #15
 8000e42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e44:	2302      	movs	r3, #2
 8000e46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	2103      	movs	r1, #3
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f001 ffa9 	bl	8002db4 <HAL_RCC_ClockConfig>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e68:	f000 f820 	bl	8000eac <Error_Handler>
  }
}
 8000e6c:	bf00      	nop
 8000e6e:	3750      	adds	r7, #80	@ 0x50
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40007000 	.word	0x40007000

08000e7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a07      	ldr	r2, [pc, #28]	@ (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d101      	bne.n	8000e92 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000e8e:	f000 fd9f 	bl	80019d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim -> Instance == TIM2) {
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e9a:	d101      	bne.n	8000ea0 <HAL_TIM_PeriodElapsedCallback+0x24>
		FND_DispDataCallBack();
 8000e9c:	f000 fa14 	bl	80012c8 <FND_DispDataCallBack>
	}
  /* USER CODE END Callback 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40014800 	.word	0x40014800

08000eac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb0:	b672      	cpsid	i
}
 8000eb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <Error_Handler+0x8>

08000eb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	4b12      	ldr	r3, [pc, #72]	@ (8000f0c <HAL_MspInit+0x54>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec6:	4a11      	ldr	r2, [pc, #68]	@ (8000f0c <HAL_MspInit+0x54>)
 8000ec8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ecc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ece:	4b0f      	ldr	r3, [pc, #60]	@ (8000f0c <HAL_MspInit+0x54>)
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	603b      	str	r3, [r7, #0]
 8000ede:	4b0b      	ldr	r3, [pc, #44]	@ (8000f0c <HAL_MspInit+0x54>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8000f0c <HAL_MspInit+0x54>)
 8000ee4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ee8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eea:	4b08      	ldr	r3, [pc, #32]	@ (8000f0c <HAL_MspInit+0x54>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	210f      	movs	r1, #15
 8000efa:	f06f 0001 	mvn.w	r0, #1
 8000efe:	f000 fe63 	bl	8001bc8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40023800 	.word	0x40023800

08000f10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08c      	sub	sp, #48	@ 0x30
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000f20:	2300      	movs	r3, #0
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	4b2e      	ldr	r3, [pc, #184]	@ (8000fe0 <HAL_InitTick+0xd0>)
 8000f26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f28:	4a2d      	ldr	r2, [pc, #180]	@ (8000fe0 <HAL_InitTick+0xd0>)
 8000f2a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f2e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f30:	4b2b      	ldr	r3, [pc, #172]	@ (8000fe0 <HAL_InitTick+0xd0>)
 8000f32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f3c:	f107 020c 	add.w	r2, r7, #12
 8000f40:	f107 0310 	add.w	r3, r7, #16
 8000f44:	4611      	mov	r1, r2
 8000f46:	4618      	mov	r0, r3
 8000f48:	f002 f954 	bl	80031f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f4c:	f002 f93e 	bl	80031cc <HAL_RCC_GetPCLK2Freq>
 8000f50:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f54:	4a23      	ldr	r2, [pc, #140]	@ (8000fe4 <HAL_InitTick+0xd4>)
 8000f56:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5a:	0c9b      	lsrs	r3, r3, #18
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000f60:	4b21      	ldr	r3, [pc, #132]	@ (8000fe8 <HAL_InitTick+0xd8>)
 8000f62:	4a22      	ldr	r2, [pc, #136]	@ (8000fec <HAL_InitTick+0xdc>)
 8000f64:	601a      	str	r2, [r3, #0]
   * Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000f66:	4b20      	ldr	r3, [pc, #128]	@ (8000fe8 <HAL_InitTick+0xd8>)
 8000f68:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f6c:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000f6e:	4a1e      	ldr	r2, [pc, #120]	@ (8000fe8 <HAL_InitTick+0xd8>)
 8000f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f72:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000f74:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe8 <HAL_InitTick+0xd8>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe8 <HAL_InitTick+0xd8>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f80:	4b19      	ldr	r3, [pc, #100]	@ (8000fe8 <HAL_InitTick+0xd8>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8000f86:	4818      	ldr	r0, [pc, #96]	@ (8000fe8 <HAL_InitTick+0xd8>)
 8000f88:	f002 f966 	bl	8003258 <HAL_TIM_Base_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000f92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d11b      	bne.n	8000fd2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8000f9a:	4813      	ldr	r0, [pc, #76]	@ (8000fe8 <HAL_InitTick+0xd8>)
 8000f9c:	f002 f9ac 	bl	80032f8 <HAL_TIM_Base_Start_IT>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000fa6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d111      	bne.n	8000fd2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000fae:	201a      	movs	r0, #26
 8000fb0:	f000 fe26 	bl	8001c00 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b0f      	cmp	r3, #15
 8000fb8:	d808      	bhi.n	8000fcc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	6879      	ldr	r1, [r7, #4]
 8000fbe:	201a      	movs	r0, #26
 8000fc0:	f000 fe02 	bl	8001bc8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fc4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff0 <HAL_InitTick+0xe0>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6013      	str	r3, [r2, #0]
 8000fca:	e002      	b.n	8000fd2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000fd2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3730      	adds	r7, #48	@ 0x30
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	431bde83 	.word	0x431bde83
 8000fe8:	2000043c 	.word	0x2000043c
 8000fec:	40014800 	.word	0x40014800
 8000ff0:	200000a4 	.word	0x200000a4

08000ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <NMI_Handler+0x4>

08000ffc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <HardFault_Handler+0x4>

08001004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <MemManage_Handler+0x4>

0800100c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <BusFault_Handler+0x4>

08001014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001018:	bf00      	nop
 800101a:	e7fd      	b.n	8001018 <UsageFault_Handler+0x4>

0800101c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
	...

0800102c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001030:	4802      	ldr	r0, [pc, #8]	@ (800103c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001032:	f002 f9c3 	bl	80033bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	2000043c 	.word	0x2000043c

08001040 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001044:	4802      	ldr	r0, [pc, #8]	@ (8001050 <TIM2_IRQHandler+0x10>)
 8001046:	f002 f9b9 	bl	80033bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000488 	.word	0x20000488

08001054 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800105c:	4a14      	ldr	r2, [pc, #80]	@ (80010b0 <_sbrk+0x5c>)
 800105e:	4b15      	ldr	r3, [pc, #84]	@ (80010b4 <_sbrk+0x60>)
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001068:	4b13      	ldr	r3, [pc, #76]	@ (80010b8 <_sbrk+0x64>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d102      	bne.n	8001076 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001070:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <_sbrk+0x64>)
 8001072:	4a12      	ldr	r2, [pc, #72]	@ (80010bc <_sbrk+0x68>)
 8001074:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001076:	4b10      	ldr	r3, [pc, #64]	@ (80010b8 <_sbrk+0x64>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4413      	add	r3, r2
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	429a      	cmp	r2, r3
 8001082:	d207      	bcs.n	8001094 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001084:	f005 fe66 	bl	8006d54 <__errno>
 8001088:	4603      	mov	r3, r0
 800108a:	220c      	movs	r2, #12
 800108c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800108e:	f04f 33ff 	mov.w	r3, #4294967295
 8001092:	e009      	b.n	80010a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001094:	4b08      	ldr	r3, [pc, #32]	@ (80010b8 <_sbrk+0x64>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800109a:	4b07      	ldr	r3, [pc, #28]	@ (80010b8 <_sbrk+0x64>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	4a05      	ldr	r2, [pc, #20]	@ (80010b8 <_sbrk+0x64>)
 80010a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010a6:	68fb      	ldr	r3, [r7, #12]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20020000 	.word	0x20020000
 80010b4:	00000400 	.word	0x00000400
 80010b8:	20000484 	.word	0x20000484
 80010bc:	200043a8 	.word	0x200043a8

080010c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010c4:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <SystemInit+0x20>)
 80010c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010ca:	4a05      	ldr	r2, [pc, #20]	@ (80010e0 <SystemInit+0x20>)
 80010cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ea:	f107 0308 	add.w	r3, r7, #8
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f8:	463b      	mov	r3, r7
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001100:	4b1d      	ldr	r3, [pc, #116]	@ (8001178 <MX_TIM2_Init+0x94>)
 8001102:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001106:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8001108:	4b1b      	ldr	r3, [pc, #108]	@ (8001178 <MX_TIM2_Init+0x94>)
 800110a:	2263      	movs	r2, #99	@ 0x63
 800110c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800110e:	4b1a      	ldr	r3, [pc, #104]	@ (8001178 <MX_TIM2_Init+0x94>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001114:	4b18      	ldr	r3, [pc, #96]	@ (8001178 <MX_TIM2_Init+0x94>)
 8001116:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800111a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800111c:	4b16      	ldr	r3, [pc, #88]	@ (8001178 <MX_TIM2_Init+0x94>)
 800111e:	2200      	movs	r2, #0
 8001120:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001122:	4b15      	ldr	r3, [pc, #84]	@ (8001178 <MX_TIM2_Init+0x94>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001128:	4813      	ldr	r0, [pc, #76]	@ (8001178 <MX_TIM2_Init+0x94>)
 800112a:	f002 f895 	bl	8003258 <HAL_TIM_Base_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001134:	f7ff feba 	bl	8000eac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001138:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800113c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800113e:	f107 0308 	add.w	r3, r7, #8
 8001142:	4619      	mov	r1, r3
 8001144:	480c      	ldr	r0, [pc, #48]	@ (8001178 <MX_TIM2_Init+0x94>)
 8001146:	f002 fa29 	bl	800359c <HAL_TIM_ConfigClockSource>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001150:	f7ff feac 	bl	8000eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001154:	2300      	movs	r3, #0
 8001156:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800115c:	463b      	mov	r3, r7
 800115e:	4619      	mov	r1, r3
 8001160:	4805      	ldr	r0, [pc, #20]	@ (8001178 <MX_TIM2_Init+0x94>)
 8001162:	f002 fc2b 	bl	80039bc <HAL_TIMEx_MasterConfigSynchronization>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800116c:	f7ff fe9e 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001170:	bf00      	nop
 8001172:	3718      	adds	r7, #24
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000488 	.word	0x20000488

0800117c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800118c:	d115      	bne.n	80011ba <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	4b0c      	ldr	r3, [pc, #48]	@ (80011c4 <HAL_TIM_Base_MspInit+0x48>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001196:	4a0b      	ldr	r2, [pc, #44]	@ (80011c4 <HAL_TIM_Base_MspInit+0x48>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6413      	str	r3, [r2, #64]	@ 0x40
 800119e:	4b09      	ldr	r3, [pc, #36]	@ (80011c4 <HAL_TIM_Base_MspInit+0x48>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2105      	movs	r1, #5
 80011ae:	201c      	movs	r0, #28
 80011b0:	f000 fd0a 	bl	8001bc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011b4:	201c      	movs	r0, #28
 80011b6:	f000 fd23 	bl	8001c00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40023800 	.word	0x40023800

080011c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001200 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011cc:	f7ff ff78 	bl	80010c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011d0:	480c      	ldr	r0, [pc, #48]	@ (8001204 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011d2:	490d      	ldr	r1, [pc, #52]	@ (8001208 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011d4:	4a0d      	ldr	r2, [pc, #52]	@ (800120c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d8:	e002      	b.n	80011e0 <LoopCopyDataInit>

080011da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011de:	3304      	adds	r3, #4

080011e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e4:	d3f9      	bcc.n	80011da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001210 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001214 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011ec:	e001      	b.n	80011f2 <LoopFillZerobss>

080011ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f0:	3204      	adds	r2, #4

080011f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f4:	d3fb      	bcc.n	80011ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011f6:	f005 fdb3 	bl	8006d60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011fa:	f7ff fdc5 	bl	8000d88 <main>
  bx  lr    
 80011fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001200:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001208:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 800120c:	08007654 	.word	0x08007654
  ldr r2, =_sbss
 8001210:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001214:	200043a4 	.word	0x200043a4

08001218 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001218:	e7fe      	b.n	8001218 <ADC_IRQHandler>

0800121a <Button_Init>:
Button_Handler_t hBtnLed1;
Button_Handler_t hBtnLed2;
Button_Handler_t hBtnLed3;

void Button_Init(Button_Handler_t *hbtn, GPIO_TypeDef * GPIOx, uint16_t pinNum)
{
 800121a:	b480      	push	{r7}
 800121c:	b085      	sub	sp, #20
 800121e:	af00      	add	r7, sp, #0
 8001220:	60f8      	str	r0, [r7, #12]
 8001222:	60b9      	str	r1, [r7, #8]
 8001224:	4613      	mov	r3, r2
 8001226:	80fb      	strh	r3, [r7, #6]
   hbtn->GPIOx = GPIOx;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	68ba      	ldr	r2, [r7, #8]
 800122c:	601a      	str	r2, [r3, #0]
   hbtn->pinNum = pinNum;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	88fa      	ldrh	r2, [r7, #6]
 8001232:	809a      	strh	r2, [r3, #4]
   hbtn->prevState = RELEASED;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2201      	movs	r2, #1
 8001238:	609a      	str	r2, [r3, #8]
}
 800123a:	bf00      	nop
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <Button_GetState>:

button_state_t Button_GetState(Button_Handler_t *hbtn)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b084      	sub	sp, #16
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]

   uint32_t curState;
   curState = HAL_GPIO_ReadPin(hbtn->GPIOx, hbtn->pinNum);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	889b      	ldrh	r3, [r3, #4]
 8001256:	4619      	mov	r1, r3
 8001258:	4610      	mov	r0, r2
 800125a:	f000 fe63 	bl	8001f24 <HAL_GPIO_ReadPin>
 800125e:	4603      	mov	r3, r0
 8001260:	60fb      	str	r3, [r7, #12]

   if ((hbtn->prevState == RELEASED) && (curState == PUSHED)) { // button released -> pushed
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d10a      	bne.n	8001280 <Button_GetState+0x3a>
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d107      	bne.n	8001280 <Button_GetState+0x3a>
      HAL_Delay(2); // debounce
 8001270:	2002      	movs	r0, #2
 8001272:	f000 fbcd 	bl	8001a10 <HAL_Delay>
      hbtn->prevState = PUSHED;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
      return ACT_PUSHED;
 800127c:	2301      	movs	r3, #1
 800127e:	e00f      	b.n	80012a0 <Button_GetState+0x5a>
   }
   else if ((hbtn->prevState == PUSHED) && (curState == RELEASED)) { // button pushed -> released
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d10a      	bne.n	800129e <Button_GetState+0x58>
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d107      	bne.n	800129e <Button_GetState+0x58>
      HAL_Delay(2); // debounce
 800128e:	2002      	movs	r0, #2
 8001290:	f000 fbbe 	bl	8001a10 <HAL_Delay>
      hbtn->prevState = RELEASED;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2201      	movs	r2, #1
 8001298:	609a      	str	r2, [r3, #8]
      return ACT_RELEASED;
 800129a:	2302      	movs	r3, #2
 800129c:	e000      	b.n	80012a0 <Button_GetState+0x5a>
   }
   return NO_ACT;
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <FND_WriteData>:
      fndDispDp &= ~dpData;
}

// write fndDispNum
void FND_WriteData(uint16_t data)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	80fb      	strh	r3, [r7, #6]
   fndDispNum = data;
 80012b2:	4a04      	ldr	r2, [pc, #16]	@ (80012c4 <FND_WriteData+0x1c>)
 80012b4:	88fb      	ldrh	r3, [r7, #6]
 80012b6:	8013      	strh	r3, [r2, #0]
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	200004f4 	.word	0x200004f4

080012c8 <FND_DispDataCallBack>:
{
   return fndDispNum;
}
// display fndDispNum
void FND_DispDataCallBack()
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
   static int digitPos = 0;
   // 인터럽트가 발생하면 한 자리씩 출력한다.
   FND_DispOffAll();
 80012cc:	f000 f956 	bl	800157c <FND_DispOffAll>
   digitPos = (digitPos+1) % 8; // 4에서 8로 변경 0부터 7찍을 수 있게.
 80012d0:	4b8c      	ldr	r3, [pc, #560]	@ (8001504 <FND_DispDataCallBack+0x23c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	3301      	adds	r3, #1
 80012d6:	425a      	negs	r2, r3
 80012d8:	f003 0307 	and.w	r3, r3, #7
 80012dc:	f002 0207 	and.w	r2, r2, #7
 80012e0:	bf58      	it	pl
 80012e2:	4253      	negpl	r3, r2
 80012e4:	4a87      	ldr	r2, [pc, #540]	@ (8001504 <FND_DispDataCallBack+0x23c>)
 80012e6:	6013      	str	r3, [r2, #0]
   switch(digitPos)      // 1ms마다 각 자리를 찍는다?
 80012e8:	4b86      	ldr	r3, [pc, #536]	@ (8001504 <FND_DispDataCallBack+0x23c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b07      	cmp	r3, #7
 80012ee:	f200 8106 	bhi.w	80014fe <FND_DispDataCallBack+0x236>
 80012f2:	a201      	add	r2, pc, #4	@ (adr r2, 80012f8 <FND_DispDataCallBack+0x30>)
 80012f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f8:	08001319 	.word	0x08001319
 80012fc:	0800134d 	.word	0x0800134d
 8001300:	0800138b 	.word	0x0800138b
 8001304:	080013c9 	.word	0x080013c9
 8001308:	08001407 	.word	0x08001407
 800130c:	08001445 	.word	0x08001445
 8001310:	08001483 	.word	0x08001483
 8001314:	080014c1 	.word	0x080014c1
   {
   case DIGIT_1:
      FND_DispOff(digitPos);
 8001318:	4b7a      	ldr	r3, [pc, #488]	@ (8001504 <FND_DispDataCallBack+0x23c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f000 f8fd 	bl	800151c <FND_DispOff>
      FND_DispDigit(fndDispNum%10);
 8001322:	4b79      	ldr	r3, [pc, #484]	@ (8001508 <FND_DispDataCallBack+0x240>)
 8001324:	881a      	ldrh	r2, [r3, #0]
 8001326:	4b79      	ldr	r3, [pc, #484]	@ (800150c <FND_DispDataCallBack+0x244>)
 8001328:	fba3 1302 	umull	r1, r3, r3, r2
 800132c:	08d9      	lsrs	r1, r3, #3
 800132e:	460b      	mov	r3, r1
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	440b      	add	r3, r1
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	b29b      	uxth	r3, r3
 800133a:	4618      	mov	r0, r3
 800133c:	f000 f940 	bl	80015c0 <FND_DispDigit>
      FND_DispOn(digitPos);
 8001340:	4b70      	ldr	r3, [pc, #448]	@ (8001504 <FND_DispDataCallBack+0x23c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f000 f901 	bl	800154c <FND_DispOn>
      break;
 800134a:	e0d8      	b.n	80014fe <FND_DispDataCallBack+0x236>
   case DIGIT_10:
      FND_DispOff(digitPos);
 800134c:	4b6d      	ldr	r3, [pc, #436]	@ (8001504 <FND_DispDataCallBack+0x23c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f000 f8e3 	bl	800151c <FND_DispOff>
      FND_DispDigit(fndDispNum/10%10);
 8001356:	4b6c      	ldr	r3, [pc, #432]	@ (8001508 <FND_DispDataCallBack+0x240>)
 8001358:	881b      	ldrh	r3, [r3, #0]
 800135a:	4a6c      	ldr	r2, [pc, #432]	@ (800150c <FND_DispDataCallBack+0x244>)
 800135c:	fba2 2303 	umull	r2, r3, r2, r3
 8001360:	08db      	lsrs	r3, r3, #3
 8001362:	b29a      	uxth	r2, r3
 8001364:	4b69      	ldr	r3, [pc, #420]	@ (800150c <FND_DispDataCallBack+0x244>)
 8001366:	fba3 1302 	umull	r1, r3, r3, r2
 800136a:	08d9      	lsrs	r1, r3, #3
 800136c:	460b      	mov	r3, r1
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	440b      	add	r3, r1
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	b29b      	uxth	r3, r3
 8001378:	4618      	mov	r0, r3
 800137a:	f000 f921 	bl	80015c0 <FND_DispDigit>
      FND_DispOn(digitPos);
 800137e:	4b61      	ldr	r3, [pc, #388]	@ (8001504 <FND_DispDataCallBack+0x23c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f000 f8e2 	bl	800154c <FND_DispOn>
      break;
 8001388:	e0b9      	b.n	80014fe <FND_DispDataCallBack+0x236>
   case DIGIT_100:
      FND_DispOff(digitPos);
 800138a:	4b5e      	ldr	r3, [pc, #376]	@ (8001504 <FND_DispDataCallBack+0x23c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f000 f8c4 	bl	800151c <FND_DispOff>
      FND_DispDigit(fndDispNum/100%10);
 8001394:	4b5c      	ldr	r3, [pc, #368]	@ (8001508 <FND_DispDataCallBack+0x240>)
 8001396:	881b      	ldrh	r3, [r3, #0]
 8001398:	4a5d      	ldr	r2, [pc, #372]	@ (8001510 <FND_DispDataCallBack+0x248>)
 800139a:	fba2 2303 	umull	r2, r3, r2, r3
 800139e:	095b      	lsrs	r3, r3, #5
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	4b5a      	ldr	r3, [pc, #360]	@ (800150c <FND_DispDataCallBack+0x244>)
 80013a4:	fba3 1302 	umull	r1, r3, r3, r2
 80013a8:	08d9      	lsrs	r1, r3, #3
 80013aa:	460b      	mov	r3, r1
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	440b      	add	r3, r1
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 f902 	bl	80015c0 <FND_DispDigit>
      FND_DispOn(digitPos);
 80013bc:	4b51      	ldr	r3, [pc, #324]	@ (8001504 <FND_DispDataCallBack+0x23c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f000 f8c3 	bl	800154c <FND_DispOn>
      break;
 80013c6:	e09a      	b.n	80014fe <FND_DispDataCallBack+0x236>
   case DIGIT_1000:
      FND_DispOff(digitPos);
 80013c8:	4b4e      	ldr	r3, [pc, #312]	@ (8001504 <FND_DispDataCallBack+0x23c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f000 f8a5 	bl	800151c <FND_DispOff>
      FND_DispDigit(fndDispNum/1000%10);
 80013d2:	4b4d      	ldr	r3, [pc, #308]	@ (8001508 <FND_DispDataCallBack+0x240>)
 80013d4:	881b      	ldrh	r3, [r3, #0]
 80013d6:	4a4f      	ldr	r2, [pc, #316]	@ (8001514 <FND_DispDataCallBack+0x24c>)
 80013d8:	fba2 2303 	umull	r2, r3, r2, r3
 80013dc:	099b      	lsrs	r3, r3, #6
 80013de:	b29a      	uxth	r2, r3
 80013e0:	4b4a      	ldr	r3, [pc, #296]	@ (800150c <FND_DispDataCallBack+0x244>)
 80013e2:	fba3 1302 	umull	r1, r3, r3, r2
 80013e6:	08d9      	lsrs	r1, r3, #3
 80013e8:	460b      	mov	r3, r1
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	440b      	add	r3, r1
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	4618      	mov	r0, r3
 80013f6:	f000 f8e3 	bl	80015c0 <FND_DispDigit>
      FND_DispOn(digitPos);
 80013fa:	4b42      	ldr	r3, [pc, #264]	@ (8001504 <FND_DispDataCallBack+0x23c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 f8a4 	bl	800154c <FND_DispOn>
      break;
 8001404:	e07b      	b.n	80014fe <FND_DispDataCallBack+0x236>
   case DIGIT_DP_1:
      FND_DispOff(digitPos);
 8001406:	4b3f      	ldr	r3, [pc, #252]	@ (8001504 <FND_DispDataCallBack+0x23c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f000 f886 	bl	800151c <FND_DispOff>
      if( fndDispDp & (1<<0)) {
 8001410:	4b41      	ldr	r3, [pc, #260]	@ (8001518 <FND_DispDataCallBack+0x250>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <FND_DispDataCallBack+0x15c>
         FND_DispDigit(10);
 800141c:	200a      	movs	r0, #10
 800141e:	f000 f8cf 	bl	80015c0 <FND_DispDigit>
 8001422:	e002      	b.n	800142a <FND_DispDataCallBack+0x162>
      }
      else {
         FND_DispDigit(11);
 8001424:	200b      	movs	r0, #11
 8001426:	f000 f8cb 	bl	80015c0 <FND_DispDigit>
      }
      FND_DispOn(digitPos%4);
 800142a:	4b36      	ldr	r3, [pc, #216]	@ (8001504 <FND_DispDataCallBack+0x23c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	425a      	negs	r2, r3
 8001430:	f003 0303 	and.w	r3, r3, #3
 8001434:	f002 0203 	and.w	r2, r2, #3
 8001438:	bf58      	it	pl
 800143a:	4253      	negpl	r3, r2
 800143c:	4618      	mov	r0, r3
 800143e:	f000 f885 	bl	800154c <FND_DispOn>
      break;
 8001442:	e05c      	b.n	80014fe <FND_DispDataCallBack+0x236>
   case DIGIT_DP_10:
      FND_DispOff(digitPos);
 8001444:	4b2f      	ldr	r3, [pc, #188]	@ (8001504 <FND_DispDataCallBack+0x23c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f000 f867 	bl	800151c <FND_DispOff>
      if( fndDispDp & (1<<1)) {
 800144e:	4b32      	ldr	r3, [pc, #200]	@ (8001518 <FND_DispDataCallBack+0x250>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <FND_DispDataCallBack+0x19a>
         FND_DispDigit(10);
 800145a:	200a      	movs	r0, #10
 800145c:	f000 f8b0 	bl	80015c0 <FND_DispDigit>
 8001460:	e002      	b.n	8001468 <FND_DispDataCallBack+0x1a0>
      }
      else {
         FND_DispDigit(11);
 8001462:	200b      	movs	r0, #11
 8001464:	f000 f8ac 	bl	80015c0 <FND_DispDigit>
      }
      FND_DispOn(digitPos%4);
 8001468:	4b26      	ldr	r3, [pc, #152]	@ (8001504 <FND_DispDataCallBack+0x23c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	425a      	negs	r2, r3
 800146e:	f003 0303 	and.w	r3, r3, #3
 8001472:	f002 0203 	and.w	r2, r2, #3
 8001476:	bf58      	it	pl
 8001478:	4253      	negpl	r3, r2
 800147a:	4618      	mov	r0, r3
 800147c:	f000 f866 	bl	800154c <FND_DispOn>
      break;
 8001480:	e03d      	b.n	80014fe <FND_DispDataCallBack+0x236>
   case DIGIT_DP_100:
      FND_DispOff(digitPos);
 8001482:	4b20      	ldr	r3, [pc, #128]	@ (8001504 <FND_DispDataCallBack+0x23c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f000 f848 	bl	800151c <FND_DispOff>
      if( fndDispDp & (1<<2)) {
 800148c:	4b22      	ldr	r3, [pc, #136]	@ (8001518 <FND_DispDataCallBack+0x250>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	f003 0304 	and.w	r3, r3, #4
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <FND_DispDataCallBack+0x1d8>
         FND_DispDigit(10);
 8001498:	200a      	movs	r0, #10
 800149a:	f000 f891 	bl	80015c0 <FND_DispDigit>
 800149e:	e002      	b.n	80014a6 <FND_DispDataCallBack+0x1de>
      }
      else {
         FND_DispDigit(11);
 80014a0:	200b      	movs	r0, #11
 80014a2:	f000 f88d 	bl	80015c0 <FND_DispDigit>
      }
      FND_DispOn(digitPos%4);
 80014a6:	4b17      	ldr	r3, [pc, #92]	@ (8001504 <FND_DispDataCallBack+0x23c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	425a      	negs	r2, r3
 80014ac:	f003 0303 	and.w	r3, r3, #3
 80014b0:	f002 0203 	and.w	r2, r2, #3
 80014b4:	bf58      	it	pl
 80014b6:	4253      	negpl	r3, r2
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 f847 	bl	800154c <FND_DispOn>
      break;
 80014be:	e01e      	b.n	80014fe <FND_DispDataCallBack+0x236>
   case DIGIT_DP_1000:
      FND_DispOff(digitPos);
 80014c0:	4b10      	ldr	r3, [pc, #64]	@ (8001504 <FND_DispDataCallBack+0x23c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f000 f829 	bl	800151c <FND_DispOff>
      if( fndDispDp & (1<<3)) {
 80014ca:	4b13      	ldr	r3, [pc, #76]	@ (8001518 <FND_DispDataCallBack+0x250>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	f003 0308 	and.w	r3, r3, #8
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <FND_DispDataCallBack+0x216>
         FND_DispDigit(10);
 80014d6:	200a      	movs	r0, #10
 80014d8:	f000 f872 	bl	80015c0 <FND_DispDigit>
 80014dc:	e002      	b.n	80014e4 <FND_DispDataCallBack+0x21c>
      }
      else {
         FND_DispDigit(11);
 80014de:	200b      	movs	r0, #11
 80014e0:	f000 f86e 	bl	80015c0 <FND_DispDigit>
      }
      FND_DispOn(digitPos%4);
 80014e4:	4b07      	ldr	r3, [pc, #28]	@ (8001504 <FND_DispDataCallBack+0x23c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	425a      	negs	r2, r3
 80014ea:	f003 0303 	and.w	r3, r3, #3
 80014ee:	f002 0203 	and.w	r2, r2, #3
 80014f2:	bf58      	it	pl
 80014f4:	4253      	negpl	r3, r2
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 f828 	bl	800154c <FND_DispOn>
      break;
 80014fc:	bf00      	nop

   }
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	200004f8 	.word	0x200004f8
 8001508:	200004f4 	.word	0x200004f4
 800150c:	cccccccd 	.word	0xcccccccd
 8001510:	51eb851f 	.word	0x51eb851f
 8001514:	10624dd3 	.word	0x10624dd3
 8001518:	200004f6 	.word	0x200004f6

0800151c <FND_DispOff>:


void FND_DispOff(int fndPos)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
   // GPIO_Write(GPIOx, PIn, SET);
   HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, SET);
 8001524:	4a08      	ldr	r2, [pc, #32]	@ (8001548 <FND_DispOff+0x2c>)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800152c:	4a06      	ldr	r2, [pc, #24]	@ (8001548 <FND_DispOff+0x2c>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	4413      	add	r3, r2
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	b29b      	uxth	r3, r3
 8001538:	2201      	movs	r2, #1
 800153a:	4619      	mov	r1, r3
 800153c:	f000 fd0a 	bl	8001f54 <HAL_GPIO_WritePin>
}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000004 	.word	0x20000004

0800154c <FND_DispOn>:
void FND_DispOn(int fndPos)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
   // GPIO_Write(GPIOx, Pin, RESET);
   HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, RESET);
 8001554:	4a08      	ldr	r2, [pc, #32]	@ (8001578 <FND_DispOn+0x2c>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800155c:	4a06      	ldr	r2, [pc, #24]	@ (8001578 <FND_DispOn+0x2c>)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	4413      	add	r3, r2
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	b29b      	uxth	r3, r3
 8001568:	2200      	movs	r2, #0
 800156a:	4619      	mov	r1, r3
 800156c:	f000 fcf2 	bl	8001f54 <HAL_GPIO_WritePin>
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000004 	.word	0x20000004

0800157c <FND_DispOffAll>:
void FND_DispOffAll()
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
   for(int i = 0;i<4;i++){
 8001582:	2300      	movs	r3, #0
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	e010      	b.n	80015aa <FND_DispOffAll+0x2e>
      HAL_GPIO_WritePin(fndDigitCom[i].GPIOx, fndDigitCom[i].pinNum, SET);
 8001588:	4a0c      	ldr	r2, [pc, #48]	@ (80015bc <FND_DispOffAll+0x40>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001590:	4a0a      	ldr	r2, [pc, #40]	@ (80015bc <FND_DispOffAll+0x40>)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	4413      	add	r3, r2
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	b29b      	uxth	r3, r3
 800159c:	2201      	movs	r2, #1
 800159e:	4619      	mov	r1, r3
 80015a0:	f000 fcd8 	bl	8001f54 <HAL_GPIO_WritePin>
   for(int i = 0;i<4;i++){
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3301      	adds	r3, #1
 80015a8:	607b      	str	r3, [r7, #4]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b03      	cmp	r3, #3
 80015ae:	ddeb      	ble.n	8001588 <FND_DispOffAll+0xc>
   }
}
 80015b0:	bf00      	nop
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000004 	.word	0x20000004

080015c0 <FND_DispDigit>:

void FND_DispDigit(uint16_t digit)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	80fb      	strh	r3, [r7, #6]
   const uint8_t segFont[12] = {
 80015ca:	4a1f      	ldr	r2, [pc, #124]	@ (8001648 <FND_DispDigit+0x88>)
 80015cc:	f107 0308 	add.w	r3, r7, #8
 80015d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80015d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
         0x6F,  // 9 => 01101111
         0x80,  // 10(dp) => 1000000
       0x00,  // 11(off) => 0000000
      };

   for (int i = 0; i<8;i++){
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	e02c      	b.n	8001636 <FND_DispDigit+0x76>
      if(!(segFont[digit] & (1<<i))){
 80015dc:	88fb      	ldrh	r3, [r7, #6]
 80015de:	3318      	adds	r3, #24
 80015e0:	443b      	add	r3, r7
 80015e2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80015e6:	461a      	mov	r2, r3
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	fa42 f303 	asr.w	r3, r2, r3
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d10e      	bne.n	8001614 <FND_DispDigit+0x54>
         HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, RESET);
 80015f6:	4a15      	ldr	r2, [pc, #84]	@ (800164c <FND_DispDigit+0x8c>)
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80015fe:	4a13      	ldr	r2, [pc, #76]	@ (800164c <FND_DispDigit+0x8c>)
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	4413      	add	r3, r2
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	b29b      	uxth	r3, r3
 800160a:	2200      	movs	r2, #0
 800160c:	4619      	mov	r1, r3
 800160e:	f000 fca1 	bl	8001f54 <HAL_GPIO_WritePin>
 8001612:	e00d      	b.n	8001630 <FND_DispDigit+0x70>
      }
      else {
         HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, SET);
 8001614:	4a0d      	ldr	r2, [pc, #52]	@ (800164c <FND_DispDigit+0x8c>)
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800161c:	4a0b      	ldr	r2, [pc, #44]	@ (800164c <FND_DispDigit+0x8c>)
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	4413      	add	r3, r2
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	b29b      	uxth	r3, r3
 8001628:	2201      	movs	r2, #1
 800162a:	4619      	mov	r1, r3
 800162c:	f000 fc92 	bl	8001f54 <HAL_GPIO_WritePin>
   for (int i = 0; i<8;i++){
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	3301      	adds	r3, #1
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	2b07      	cmp	r3, #7
 800163a:	ddcf      	ble.n	80015dc <FND_DispDigit+0x1c>
      }
   }
}
 800163c:	bf00      	nop
 800163e:	bf00      	nop
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	080075cc 	.word	0x080075cc
 800164c:	20000024 	.word	0x20000024

08001650 <LCD_Init>:

static uint8_t lcdData = 0;
static I2C_HandleTypeDef *hLcdI2C;

void LCD_Init(I2C_HandleTypeDef *hI2C)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	hLcdI2C = hI2C;
 8001658:	4a18      	ldr	r2, [pc, #96]	@ (80016bc <LCD_Init+0x6c>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6013      	str	r3, [r2, #0]
	HAL_Delay(50);
 800165e:	2032      	movs	r0, #50	@ 0x32
 8001660:	f000 f9d6 	bl	8001a10 <HAL_Delay>
	LCD_cmdMode();
 8001664:	f000 f852 	bl	800170c <LCD_cmdMode>
	LCD_writeMode();
 8001668:	f000 f874 	bl	8001754 <LCD_writeMode>
	LCD_sendNibbleData(0x30);
 800166c:	2030      	movs	r0, #48	@ 0x30
 800166e:	f000 f8a7 	bl	80017c0 <LCD_sendNibbleData>
	HAL_Delay(5);
 8001672:	2005      	movs	r0, #5
 8001674:	f000 f9cc 	bl	8001a10 <HAL_Delay>
	LCD_sendNibbleData(0x30);
 8001678:	2030      	movs	r0, #48	@ 0x30
 800167a:	f000 f8a1 	bl	80017c0 <LCD_sendNibbleData>
	HAL_Delay(1);
 800167e:	2001      	movs	r0, #1
 8001680:	f000 f9c6 	bl	8001a10 <HAL_Delay>
	LCD_sendNibbleData(0x30);
 8001684:	2030      	movs	r0, #48	@ 0x30
 8001686:	f000 f89b 	bl	80017c0 <LCD_sendNibbleData>
	LCD_sendNibbleData(0x20);
 800168a:	2020      	movs	r0, #32
 800168c:	f000 f898 	bl	80017c0 <LCD_sendNibbleData>
	LCD_sendData(LCD_4BIT_FUNC_SET);
 8001690:	2028      	movs	r0, #40	@ 0x28
 8001692:	f000 f8b9 	bl	8001808 <LCD_sendData>
	LCD_sendData(LCD_DISP_OFF);
 8001696:	2008      	movs	r0, #8
 8001698:	f000 f8b6 	bl	8001808 <LCD_sendData>
	LCD_sendData(LCD_DISP_CLEAR);
 800169c:	2001      	movs	r0, #1
 800169e:	f000 f8b3 	bl	8001808 <LCD_sendData>
	LCD_sendData(LCD_ENTRY_MODE_SET);
 80016a2:	2006      	movs	r0, #6
 80016a4:	f000 f8b0 	bl	8001808 <LCD_sendData>
	LCD_sendData(LCD_DISP_ON);
 80016a8:	200c      	movs	r0, #12
 80016aa:	f000 f8ad 	bl	8001808 <LCD_sendData>
	LCD_backLightOn();
 80016ae:	f000 f81d 	bl	80016ec <LCD_backLightOn>
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000500 	.word	0x20000500

080016c0 <LCD_sendI2C>:

void LCD_sendI2C(uint8_t data)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af02      	add	r7, sp, #8
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(hLcdI2C, LCD_DEV_ADDR<<1, &data, 1, 1000);
 80016ca:	4b07      	ldr	r3, [pc, #28]	@ (80016e8 <LCD_sendI2C+0x28>)
 80016cc:	6818      	ldr	r0, [r3, #0]
 80016ce:	1dfa      	adds	r2, r7, #7
 80016d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	2301      	movs	r3, #1
 80016d8:	214e      	movs	r1, #78	@ 0x4e
 80016da:	f000 fd99 	bl	8002210 <HAL_I2C_Master_Transmit>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000500 	.word	0x20000500

080016ec <LCD_backLightOn>:

void LCD_backLightOn()
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_BL);
 80016f0:	4b05      	ldr	r3, [pc, #20]	@ (8001708 <LCD_backLightOn+0x1c>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	f043 0308 	orr.w	r3, r3, #8
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	4b03      	ldr	r3, [pc, #12]	@ (8001708 <LCD_backLightOn+0x1c>)
 80016fc:	701a      	strb	r2, [r3, #0]
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	200004fc 	.word	0x200004fc

0800170c <LCD_cmdMode>:
{
	lcdData &= ~(1<<LCD_BL);
}

void LCD_cmdMode()
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RS);
 8001710:	4b06      	ldr	r3, [pc, #24]	@ (800172c <LCD_cmdMode+0x20>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	f023 0301 	bic.w	r3, r3, #1
 8001718:	b2da      	uxtb	r2, r3
 800171a:	4b04      	ldr	r3, [pc, #16]	@ (800172c <LCD_cmdMode+0x20>)
 800171c:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 800171e:	4b03      	ldr	r3, [pc, #12]	@ (800172c <LCD_cmdMode+0x20>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff ffcc 	bl	80016c0 <LCD_sendI2C>
}
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}
 800172c:	200004fc 	.word	0x200004fc

08001730 <LCD_charMode>:

void LCD_charMode()
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_RS);
 8001734:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <LCD_charMode+0x20>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	b2da      	uxtb	r2, r3
 800173e:	4b04      	ldr	r3, [pc, #16]	@ (8001750 <LCD_charMode+0x20>)
 8001740:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001742:	4b03      	ldr	r3, [pc, #12]	@ (8001750 <LCD_charMode+0x20>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff ffba 	bl	80016c0 <LCD_sendI2C>
}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}
 8001750:	200004fc 	.word	0x200004fc

08001754 <LCD_writeMode>:

void LCD_writeMode()
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RW);
 8001758:	4b06      	ldr	r3, [pc, #24]	@ (8001774 <LCD_writeMode+0x20>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	f023 0302 	bic.w	r3, r3, #2
 8001760:	b2da      	uxtb	r2, r3
 8001762:	4b04      	ldr	r3, [pc, #16]	@ (8001774 <LCD_writeMode+0x20>)
 8001764:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001766:	4b03      	ldr	r3, [pc, #12]	@ (8001774 <LCD_writeMode+0x20>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff ffa8 	bl	80016c0 <LCD_sendI2C>
}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}
 8001774:	200004fc 	.word	0x200004fc

08001778 <LCD_E_High>:

void LCD_E_High()
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_E);
 800177c:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <LCD_E_High+0x20>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	f043 0304 	orr.w	r3, r3, #4
 8001784:	b2da      	uxtb	r2, r3
 8001786:	4b04      	ldr	r3, [pc, #16]	@ (8001798 <LCD_E_High+0x20>)
 8001788:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 800178a:	4b03      	ldr	r3, [pc, #12]	@ (8001798 <LCD_E_High+0x20>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff ff96 	bl	80016c0 <LCD_sendI2C>
}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}
 8001798:	200004fc 	.word	0x200004fc

0800179c <LCD_E_Low>:

void LCD_E_Low()
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_E);
 80017a0:	4b06      	ldr	r3, [pc, #24]	@ (80017bc <LCD_E_Low+0x20>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	f023 0304 	bic.w	r3, r3, #4
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4b04      	ldr	r3, [pc, #16]	@ (80017bc <LCD_E_Low+0x20>)
 80017ac:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 80017ae:	4b03      	ldr	r3, [pc, #12]	@ (80017bc <LCD_E_Low+0x20>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff ff84 	bl	80016c0 <LCD_sendI2C>
}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	200004fc 	.word	0x200004fc

080017c0 <LCD_sendNibbleData>:

void LCD_sendNibbleData(uint8_t data)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
	LCD_E_High();
 80017ca:	f7ff ffd5 	bl	8001778 <LCD_E_High>
	lcdData = (data & 0xf0) | (lcdData & 0x0f);
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	f023 030f 	bic.w	r3, r3, #15
 80017d6:	b25a      	sxtb	r2, r3
 80017d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001804 <LCD_sendNibbleData+0x44>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	b25b      	sxtb	r3, r3
 80017de:	f003 030f 	and.w	r3, r3, #15
 80017e2:	b25b      	sxtb	r3, r3
 80017e4:	4313      	orrs	r3, r2
 80017e6:	b25b      	sxtb	r3, r3
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <LCD_sendNibbleData+0x44>)
 80017ec:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 80017ee:	4b05      	ldr	r3, [pc, #20]	@ (8001804 <LCD_sendNibbleData+0x44>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff ff64 	bl	80016c0 <LCD_sendI2C>
	LCD_E_Low();
 80017f8:	f7ff ffd0 	bl	800179c <LCD_E_Low>
}
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	200004fc 	.word	0x200004fc

08001808 <LCD_sendData>:

void LCD_sendData(uint8_t data)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
	// High 4bit
	LCD_sendNibbleData(data);
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ffd3 	bl	80017c0 <LCD_sendNibbleData>

	data = data << 4;
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	011b      	lsls	r3, r3, #4
 800181e:	71fb      	strb	r3, [r7, #7]
	// Low 4bit
	LCD_sendNibbleData(data);
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff ffcc 	bl	80017c0 <LCD_sendNibbleData>
}
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <LCD_writeCmdData>:

void LCD_writeCmdData(uint8_t data)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
	LCD_writeMode();
 800183a:	f7ff ff8b 	bl	8001754 <LCD_writeMode>
	LCD_cmdMode();
 800183e:	f7ff ff65 	bl	800170c <LCD_cmdMode>
	LCD_sendData(data);
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff ffdf 	bl	8001808 <LCD_sendData>
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <LCD_writeCharData>:

void LCD_writeCharData(uint8_t data)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	4603      	mov	r3, r0
 800185a:	71fb      	strb	r3, [r7, #7]
	LCD_writeMode();
 800185c:	f7ff ff7a 	bl	8001754 <LCD_writeMode>
	LCD_charMode();
 8001860:	f7ff ff66 	bl	8001730 <LCD_charMode>
	LCD_sendData(data);
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff ffce 	bl	8001808 <LCD_sendData>
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <LCD_writeString>:

void LCD_writeString(char *str)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
	for (int i=0; str[i]; i++) {
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	e009      	b.n	8001896 <LCD_writeString+0x22>
		LCD_writeCharData(str[i]);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	4413      	add	r3, r2
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff ffe1 	bl	8001852 <LCD_writeCharData>
	for (int i=0; str[i]; i++) {
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	3301      	adds	r3, #1
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	4413      	add	r3, r2
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1ef      	bne.n	8001882 <LCD_writeString+0xe>
	}
}
 80018a2:	bf00      	nop
 80018a4:	bf00      	nop
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	460a      	mov	r2, r1
 80018b6:	71fb      	strb	r3, [r7, #7]
 80018b8:	4613      	mov	r3, r2
 80018ba:	71bb      	strb	r3, [r7, #6]
	col %= 16;
 80018bc:	79bb      	ldrb	r3, [r7, #6]
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	71bb      	strb	r3, [r7, #6]
	row %= 2;
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	71fb      	strb	r3, [r7, #7]

	uint8_t lcdRegAddr = (0x40 * row) +col;
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	019b      	lsls	r3, r3, #6
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	79bb      	ldrb	r3, [r7, #6]
 80018d4:	4413      	add	r3, r2
 80018d6:	73fb      	strb	r3, [r7, #15]
	uint8_t command = 0x80 + lcdRegAddr;
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
 80018da:	3b80      	subs	r3, #128	@ 0x80
 80018dc:	73bb      	strb	r3, [r7, #14]
	LCD_writeCmdData(command);
 80018de:	7bbb      	ldrb	r3, [r7, #14]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff ffa5 	bl	8001830 <LCD_writeCmdData>
}
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <LCD_writeStringXY>:

void LCD_writeStringXY(uint8_t row, uint8_t col, char *str)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	4603      	mov	r3, r0
 80018f6:	603a      	str	r2, [r7, #0]
 80018f8:	71fb      	strb	r3, [r7, #7]
 80018fa:	460b      	mov	r3, r1
 80018fc:	71bb      	strb	r3, [r7, #6]
	LCD_gotoXY(row, col);
 80018fe:	79ba      	ldrb	r2, [r7, #6]
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	4611      	mov	r1, r2
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff ffd1 	bl	80018ac <LCD_gotoXY>
	LCD_writeString(str);
 800190a:	6838      	ldr	r0, [r7, #0]
 800190c:	f7ff ffb2 	bl	8001874 <LCD_writeString>
}
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <LedBar_write>:
		{GPIOC, GPIO_PIN_2},
		{GPIOC, GPIO_PIN_3}
};

void LedBar_write(uint8_t data)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	71fb      	strb	r3, [r7, #7]
//	GPIO_WritePin(GPIOC, 1, !((data&(1U<<4))==0));
//	GPIO_WritePin(GPIOC, 0, !((data&(1U<<5))==0));
//	GPIO_WritePin(GPIOC, 2, !((data&(1U<<6))==0));
//	GPIO_WritePin(GPIOC, 3, !((data&(1U<<7))==0));

	for (int i=0; i<8; i++) {
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	e027      	b.n	8001978 <LedBar_write+0x60>
		if((data & (1<<i)) == 0) {
 8001928:	79fa      	ldrb	r2, [r7, #7]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	fa42 f303 	asr.w	r3, r2, r3
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	2b00      	cmp	r3, #0
 8001936:	d10e      	bne.n	8001956 <LedBar_write+0x3e>
			HAL_GPIO_WritePin(ledBar[i].GPIOx, ledBar[i].pinNum, RESET);
 8001938:	4a13      	ldr	r2, [pc, #76]	@ (8001988 <LedBar_write+0x70>)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001940:	4a11      	ldr	r2, [pc, #68]	@ (8001988 <LedBar_write+0x70>)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	4413      	add	r3, r2
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	b29b      	uxth	r3, r3
 800194c:	2200      	movs	r2, #0
 800194e:	4619      	mov	r1, r3
 8001950:	f000 fb00 	bl	8001f54 <HAL_GPIO_WritePin>
 8001954:	e00d      	b.n	8001972 <LedBar_write+0x5a>
		}
		else {
			HAL_GPIO_WritePin(ledBar[i].GPIOx, ledBar[i].pinNum, SET);
 8001956:	4a0c      	ldr	r2, [pc, #48]	@ (8001988 <LedBar_write+0x70>)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800195e:	4a0a      	ldr	r2, [pc, #40]	@ (8001988 <LedBar_write+0x70>)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	4413      	add	r3, r2
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	b29b      	uxth	r3, r3
 800196a:	2201      	movs	r2, #1
 800196c:	4619      	mov	r1, r3
 800196e:	f000 faf1 	bl	8001f54 <HAL_GPIO_WritePin>
	for (int i=0; i<8; i++) {
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	3301      	adds	r3, #1
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2b07      	cmp	r3, #7
 800197c:	ddd4      	ble.n	8001928 <LedBar_write+0x10>
		}
	}
}
 800197e:	bf00      	nop
 8001980:	bf00      	nop
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000064 	.word	0x20000064

0800198c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001990:	4b0e      	ldr	r3, [pc, #56]	@ (80019cc <HAL_Init+0x40>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a0d      	ldr	r2, [pc, #52]	@ (80019cc <HAL_Init+0x40>)
 8001996:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800199a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800199c:	4b0b      	ldr	r3, [pc, #44]	@ (80019cc <HAL_Init+0x40>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a0a      	ldr	r2, [pc, #40]	@ (80019cc <HAL_Init+0x40>)
 80019a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a8:	4b08      	ldr	r3, [pc, #32]	@ (80019cc <HAL_Init+0x40>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a07      	ldr	r2, [pc, #28]	@ (80019cc <HAL_Init+0x40>)
 80019ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b4:	2003      	movs	r0, #3
 80019b6:	f000 f8fc 	bl	8001bb2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ba:	200f      	movs	r0, #15
 80019bc:	f7ff faa8 	bl	8000f10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019c0:	f7ff fa7a 	bl	8000eb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40023c00 	.word	0x40023c00

080019d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019d4:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <HAL_IncTick+0x20>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	461a      	mov	r2, r3
 80019da:	4b06      	ldr	r3, [pc, #24]	@ (80019f4 <HAL_IncTick+0x24>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4413      	add	r3, r2
 80019e0:	4a04      	ldr	r2, [pc, #16]	@ (80019f4 <HAL_IncTick+0x24>)
 80019e2:	6013      	str	r3, [r2, #0]
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	200000a8 	.word	0x200000a8
 80019f4:	20000504 	.word	0x20000504

080019f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return uwTick;
 80019fc:	4b03      	ldr	r3, [pc, #12]	@ (8001a0c <HAL_GetTick+0x14>)
 80019fe:	681b      	ldr	r3, [r3, #0]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	20000504 	.word	0x20000504

08001a10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a18:	f7ff ffee 	bl	80019f8 <HAL_GetTick>
 8001a1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a28:	d005      	beq.n	8001a36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a54 <HAL_Delay+0x44>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4413      	add	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a36:	bf00      	nop
 8001a38:	f7ff ffde 	bl	80019f8 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d8f7      	bhi.n	8001a38 <HAL_Delay+0x28>
  {
  }
}
 8001a48:	bf00      	nop
 8001a4a:	bf00      	nop
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	200000a8 	.word	0x200000a8

08001a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a68:	4b0c      	ldr	r3, [pc, #48]	@ (8001a9c <__NVIC_SetPriorityGrouping+0x44>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a74:	4013      	ands	r3, r2
 8001a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a8a:	4a04      	ldr	r2, [pc, #16]	@ (8001a9c <__NVIC_SetPriorityGrouping+0x44>)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	60d3      	str	r3, [r2, #12]
}
 8001a90:	bf00      	nop
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aa4:	4b04      	ldr	r3, [pc, #16]	@ (8001ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	0a1b      	lsrs	r3, r3, #8
 8001aaa:	f003 0307 	and.w	r3, r3, #7
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	db0b      	blt.n	8001ae6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	f003 021f 	and.w	r2, r3, #31
 8001ad4:	4907      	ldr	r1, [pc, #28]	@ (8001af4 <__NVIC_EnableIRQ+0x38>)
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	095b      	lsrs	r3, r3, #5
 8001adc:	2001      	movs	r0, #1
 8001ade:	fa00 f202 	lsl.w	r2, r0, r2
 8001ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	e000e100 	.word	0xe000e100

08001af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	6039      	str	r1, [r7, #0]
 8001b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	db0a      	blt.n	8001b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	490c      	ldr	r1, [pc, #48]	@ (8001b44 <__NVIC_SetPriority+0x4c>)
 8001b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b16:	0112      	lsls	r2, r2, #4
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	440b      	add	r3, r1
 8001b1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b20:	e00a      	b.n	8001b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	4908      	ldr	r1, [pc, #32]	@ (8001b48 <__NVIC_SetPriority+0x50>)
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	3b04      	subs	r3, #4
 8001b30:	0112      	lsls	r2, r2, #4
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	440b      	add	r3, r1
 8001b36:	761a      	strb	r2, [r3, #24]
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	e000e100 	.word	0xe000e100
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b089      	sub	sp, #36	@ 0x24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f1c3 0307 	rsb	r3, r3, #7
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	bf28      	it	cs
 8001b6a:	2304      	movcs	r3, #4
 8001b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	3304      	adds	r3, #4
 8001b72:	2b06      	cmp	r3, #6
 8001b74:	d902      	bls.n	8001b7c <NVIC_EncodePriority+0x30>
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	3b03      	subs	r3, #3
 8001b7a:	e000      	b.n	8001b7e <NVIC_EncodePriority+0x32>
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b80:	f04f 32ff 	mov.w	r2, #4294967295
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43da      	mvns	r2, r3
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	401a      	ands	r2, r3
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b94:	f04f 31ff 	mov.w	r1, #4294967295
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9e:	43d9      	mvns	r1, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba4:	4313      	orrs	r3, r2
         );
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3724      	adds	r7, #36	@ 0x24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff ff4c 	bl	8001a58 <__NVIC_SetPriorityGrouping>
}
 8001bc0:	bf00      	nop
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
 8001bd4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bda:	f7ff ff61 	bl	8001aa0 <__NVIC_GetPriorityGrouping>
 8001bde:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	68b9      	ldr	r1, [r7, #8]
 8001be4:	6978      	ldr	r0, [r7, #20]
 8001be6:	f7ff ffb1 	bl	8001b4c <NVIC_EncodePriority>
 8001bea:	4602      	mov	r2, r0
 8001bec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bf0:	4611      	mov	r1, r2
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff ff80 	bl	8001af8 <__NVIC_SetPriority>
}
 8001bf8:	bf00      	nop
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff ff54 	bl	8001abc <__NVIC_EnableIRQ>
}
 8001c14:	bf00      	nop
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	@ 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
 8001c36:	e159      	b.n	8001eec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c38:	2201      	movs	r2, #1
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	f040 8148 	bne.w	8001ee6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d005      	beq.n	8001c6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d130      	bne.n	8001cd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	2203      	movs	r2, #3
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	091b      	lsrs	r3, r3, #4
 8001cba:	f003 0201 	and.w	r2, r3, #1
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 0303 	and.w	r3, r3, #3
 8001cd8:	2b03      	cmp	r3, #3
 8001cda:	d017      	beq.n	8001d0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 0303 	and.w	r3, r3, #3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d123      	bne.n	8001d60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	08da      	lsrs	r2, r3, #3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3208      	adds	r2, #8
 8001d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	220f      	movs	r2, #15
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	691a      	ldr	r2, [r3, #16]
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	08da      	lsrs	r2, r3, #3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3208      	adds	r2, #8
 8001d5a:	69b9      	ldr	r1, [r7, #24]
 8001d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 0203 	and.w	r2, r3, #3
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 80a2 	beq.w	8001ee6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	4b57      	ldr	r3, [pc, #348]	@ (8001f04 <HAL_GPIO_Init+0x2e8>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001daa:	4a56      	ldr	r2, [pc, #344]	@ (8001f04 <HAL_GPIO_Init+0x2e8>)
 8001dac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001db0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001db2:	4b54      	ldr	r3, [pc, #336]	@ (8001f04 <HAL_GPIO_Init+0x2e8>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dbe:	4a52      	ldr	r2, [pc, #328]	@ (8001f08 <HAL_GPIO_Init+0x2ec>)
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	089b      	lsrs	r3, r3, #2
 8001dc4:	3302      	adds	r3, #2
 8001dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	220f      	movs	r2, #15
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4013      	ands	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a49      	ldr	r2, [pc, #292]	@ (8001f0c <HAL_GPIO_Init+0x2f0>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d019      	beq.n	8001e1e <HAL_GPIO_Init+0x202>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a48      	ldr	r2, [pc, #288]	@ (8001f10 <HAL_GPIO_Init+0x2f4>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d013      	beq.n	8001e1a <HAL_GPIO_Init+0x1fe>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a47      	ldr	r2, [pc, #284]	@ (8001f14 <HAL_GPIO_Init+0x2f8>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d00d      	beq.n	8001e16 <HAL_GPIO_Init+0x1fa>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a46      	ldr	r2, [pc, #280]	@ (8001f18 <HAL_GPIO_Init+0x2fc>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d007      	beq.n	8001e12 <HAL_GPIO_Init+0x1f6>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a45      	ldr	r2, [pc, #276]	@ (8001f1c <HAL_GPIO_Init+0x300>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d101      	bne.n	8001e0e <HAL_GPIO_Init+0x1f2>
 8001e0a:	2304      	movs	r3, #4
 8001e0c:	e008      	b.n	8001e20 <HAL_GPIO_Init+0x204>
 8001e0e:	2307      	movs	r3, #7
 8001e10:	e006      	b.n	8001e20 <HAL_GPIO_Init+0x204>
 8001e12:	2303      	movs	r3, #3
 8001e14:	e004      	b.n	8001e20 <HAL_GPIO_Init+0x204>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e002      	b.n	8001e20 <HAL_GPIO_Init+0x204>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <HAL_GPIO_Init+0x204>
 8001e1e:	2300      	movs	r3, #0
 8001e20:	69fa      	ldr	r2, [r7, #28]
 8001e22:	f002 0203 	and.w	r2, r2, #3
 8001e26:	0092      	lsls	r2, r2, #2
 8001e28:	4093      	lsls	r3, r2
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e30:	4935      	ldr	r1, [pc, #212]	@ (8001f08 <HAL_GPIO_Init+0x2ec>)
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	089b      	lsrs	r3, r3, #2
 8001e36:	3302      	adds	r3, #2
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e3e:	4b38      	ldr	r3, [pc, #224]	@ (8001f20 <HAL_GPIO_Init+0x304>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	43db      	mvns	r3, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e62:	4a2f      	ldr	r2, [pc, #188]	@ (8001f20 <HAL_GPIO_Init+0x304>)
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e68:	4b2d      	ldr	r3, [pc, #180]	@ (8001f20 <HAL_GPIO_Init+0x304>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e8c:	4a24      	ldr	r2, [pc, #144]	@ (8001f20 <HAL_GPIO_Init+0x304>)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e92:	4b23      	ldr	r3, [pc, #140]	@ (8001f20 <HAL_GPIO_Init+0x304>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eb6:	4a1a      	ldr	r2, [pc, #104]	@ (8001f20 <HAL_GPIO_Init+0x304>)
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ebc:	4b18      	ldr	r3, [pc, #96]	@ (8001f20 <HAL_GPIO_Init+0x304>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ee0:	4a0f      	ldr	r2, [pc, #60]	@ (8001f20 <HAL_GPIO_Init+0x304>)
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	61fb      	str	r3, [r7, #28]
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	2b0f      	cmp	r3, #15
 8001ef0:	f67f aea2 	bls.w	8001c38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	bf00      	nop
 8001ef8:	3724      	adds	r7, #36	@ 0x24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40013800 	.word	0x40013800
 8001f0c:	40020000 	.word	0x40020000
 8001f10:	40020400 	.word	0x40020400
 8001f14:	40020800 	.word	0x40020800
 8001f18:	40020c00 	.word	0x40020c00
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40013c00 	.word	0x40013c00

08001f24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	691a      	ldr	r2, [r3, #16]
 8001f34:	887b      	ldrh	r3, [r7, #2]
 8001f36:	4013      	ands	r3, r2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d002      	beq.n	8001f42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	73fb      	strb	r3, [r7, #15]
 8001f40:	e001      	b.n	8001f46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f42:	2300      	movs	r3, #0
 8001f44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	807b      	strh	r3, [r7, #2]
 8001f60:	4613      	mov	r3, r2
 8001f62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f64:	787b      	ldrb	r3, [r7, #1]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f6a:	887a      	ldrh	r2, [r7, #2]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f70:	e003      	b.n	8001f7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f72:	887b      	ldrh	r3, [r7, #2]
 8001f74:	041a      	lsls	r2, r3, #16
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	619a      	str	r2, [r3, #24]
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
	...

08001f88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e12b      	b.n	80021f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d106      	bne.n	8001fb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7fe fea2 	bl	8000cf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2224      	movs	r2, #36	@ 0x24
 8001fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f022 0201 	bic.w	r2, r2, #1
 8001fca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001fda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fec:	f001 f8da 	bl	80031a4 <HAL_RCC_GetPCLK1Freq>
 8001ff0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	4a81      	ldr	r2, [pc, #516]	@ (80021fc <HAL_I2C_Init+0x274>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d807      	bhi.n	800200c <HAL_I2C_Init+0x84>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4a80      	ldr	r2, [pc, #512]	@ (8002200 <HAL_I2C_Init+0x278>)
 8002000:	4293      	cmp	r3, r2
 8002002:	bf94      	ite	ls
 8002004:	2301      	movls	r3, #1
 8002006:	2300      	movhi	r3, #0
 8002008:	b2db      	uxtb	r3, r3
 800200a:	e006      	b.n	800201a <HAL_I2C_Init+0x92>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4a7d      	ldr	r2, [pc, #500]	@ (8002204 <HAL_I2C_Init+0x27c>)
 8002010:	4293      	cmp	r3, r2
 8002012:	bf94      	ite	ls
 8002014:	2301      	movls	r3, #1
 8002016:	2300      	movhi	r3, #0
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e0e7      	b.n	80021f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	4a78      	ldr	r2, [pc, #480]	@ (8002208 <HAL_I2C_Init+0x280>)
 8002026:	fba2 2303 	umull	r2, r3, r2, r3
 800202a:	0c9b      	lsrs	r3, r3, #18
 800202c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68ba      	ldr	r2, [r7, #8]
 800203e:	430a      	orrs	r2, r1
 8002040:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	4a6a      	ldr	r2, [pc, #424]	@ (80021fc <HAL_I2C_Init+0x274>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d802      	bhi.n	800205c <HAL_I2C_Init+0xd4>
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	3301      	adds	r3, #1
 800205a:	e009      	b.n	8002070 <HAL_I2C_Init+0xe8>
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002062:	fb02 f303 	mul.w	r3, r2, r3
 8002066:	4a69      	ldr	r2, [pc, #420]	@ (800220c <HAL_I2C_Init+0x284>)
 8002068:	fba2 2303 	umull	r2, r3, r2, r3
 800206c:	099b      	lsrs	r3, r3, #6
 800206e:	3301      	adds	r3, #1
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	6812      	ldr	r2, [r2, #0]
 8002074:	430b      	orrs	r3, r1
 8002076:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002082:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	495c      	ldr	r1, [pc, #368]	@ (80021fc <HAL_I2C_Init+0x274>)
 800208c:	428b      	cmp	r3, r1
 800208e:	d819      	bhi.n	80020c4 <HAL_I2C_Init+0x13c>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	1e59      	subs	r1, r3, #1
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	fbb1 f3f3 	udiv	r3, r1, r3
 800209e:	1c59      	adds	r1, r3, #1
 80020a0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80020a4:	400b      	ands	r3, r1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00a      	beq.n	80020c0 <HAL_I2C_Init+0x138>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	1e59      	subs	r1, r3, #1
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80020b8:	3301      	adds	r3, #1
 80020ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020be:	e051      	b.n	8002164 <HAL_I2C_Init+0x1dc>
 80020c0:	2304      	movs	r3, #4
 80020c2:	e04f      	b.n	8002164 <HAL_I2C_Init+0x1dc>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d111      	bne.n	80020f0 <HAL_I2C_Init+0x168>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	1e58      	subs	r0, r3, #1
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6859      	ldr	r1, [r3, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	440b      	add	r3, r1
 80020da:	fbb0 f3f3 	udiv	r3, r0, r3
 80020de:	3301      	adds	r3, #1
 80020e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	bf0c      	ite	eq
 80020e8:	2301      	moveq	r3, #1
 80020ea:	2300      	movne	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	e012      	b.n	8002116 <HAL_I2C_Init+0x18e>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	1e58      	subs	r0, r3, #1
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6859      	ldr	r1, [r3, #4]
 80020f8:	460b      	mov	r3, r1
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	440b      	add	r3, r1
 80020fe:	0099      	lsls	r1, r3, #2
 8002100:	440b      	add	r3, r1
 8002102:	fbb0 f3f3 	udiv	r3, r0, r3
 8002106:	3301      	adds	r3, #1
 8002108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800210c:	2b00      	cmp	r3, #0
 800210e:	bf0c      	ite	eq
 8002110:	2301      	moveq	r3, #1
 8002112:	2300      	movne	r3, #0
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <HAL_I2C_Init+0x196>
 800211a:	2301      	movs	r3, #1
 800211c:	e022      	b.n	8002164 <HAL_I2C_Init+0x1dc>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10e      	bne.n	8002144 <HAL_I2C_Init+0x1bc>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	1e58      	subs	r0, r3, #1
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6859      	ldr	r1, [r3, #4]
 800212e:	460b      	mov	r3, r1
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	440b      	add	r3, r1
 8002134:	fbb0 f3f3 	udiv	r3, r0, r3
 8002138:	3301      	adds	r3, #1
 800213a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800213e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002142:	e00f      	b.n	8002164 <HAL_I2C_Init+0x1dc>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	1e58      	subs	r0, r3, #1
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6859      	ldr	r1, [r3, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	0099      	lsls	r1, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	fbb0 f3f3 	udiv	r3, r0, r3
 800215a:	3301      	adds	r3, #1
 800215c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002160:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	6809      	ldr	r1, [r1, #0]
 8002168:	4313      	orrs	r3, r2
 800216a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69da      	ldr	r2, [r3, #28]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	430a      	orrs	r2, r1
 8002186:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002192:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6911      	ldr	r1, [r2, #16]
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	68d2      	ldr	r2, [r2, #12]
 800219e:	4311      	orrs	r1, r2
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	6812      	ldr	r2, [r2, #0]
 80021a4:	430b      	orrs	r3, r1
 80021a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	695a      	ldr	r2, [r3, #20]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f042 0201 	orr.w	r2, r2, #1
 80021d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2220      	movs	r2, #32
 80021de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	000186a0 	.word	0x000186a0
 8002200:	001e847f 	.word	0x001e847f
 8002204:	003d08ff 	.word	0x003d08ff
 8002208:	431bde83 	.word	0x431bde83
 800220c:	10624dd3 	.word	0x10624dd3

08002210 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b088      	sub	sp, #32
 8002214:	af02      	add	r7, sp, #8
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	607a      	str	r2, [r7, #4]
 800221a:	461a      	mov	r2, r3
 800221c:	460b      	mov	r3, r1
 800221e:	817b      	strh	r3, [r7, #10]
 8002220:	4613      	mov	r3, r2
 8002222:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002224:	f7ff fbe8 	bl	80019f8 <HAL_GetTick>
 8002228:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b20      	cmp	r3, #32
 8002234:	f040 80e0 	bne.w	80023f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	9300      	str	r3, [sp, #0]
 800223c:	2319      	movs	r3, #25
 800223e:	2201      	movs	r2, #1
 8002240:	4970      	ldr	r1, [pc, #448]	@ (8002404 <HAL_I2C_Master_Transmit+0x1f4>)
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f000 f964 	bl	8002510 <I2C_WaitOnFlagUntilTimeout>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800224e:	2302      	movs	r3, #2
 8002250:	e0d3      	b.n	80023fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002258:	2b01      	cmp	r3, #1
 800225a:	d101      	bne.n	8002260 <HAL_I2C_Master_Transmit+0x50>
 800225c:	2302      	movs	r3, #2
 800225e:	e0cc      	b.n	80023fa <HAL_I2C_Master_Transmit+0x1ea>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b01      	cmp	r3, #1
 8002274:	d007      	beq.n	8002286 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f042 0201 	orr.w	r2, r2, #1
 8002284:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002294:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2221      	movs	r2, #33	@ 0x21
 800229a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2210      	movs	r2, #16
 80022a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	893a      	ldrh	r2, [r7, #8]
 80022b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022bc:	b29a      	uxth	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	4a50      	ldr	r2, [pc, #320]	@ (8002408 <HAL_I2C_Master_Transmit+0x1f8>)
 80022c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80022c8:	8979      	ldrh	r1, [r7, #10]
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	6a3a      	ldr	r2, [r7, #32]
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f000 f89c 	bl	800240c <I2C_MasterRequestWrite>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e08d      	b.n	80023fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022de:	2300      	movs	r3, #0
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80022f4:	e066      	b.n	80023c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	6a39      	ldr	r1, [r7, #32]
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 fa22 	bl	8002744 <I2C_WaitOnTXEFlagUntilTimeout>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00d      	beq.n	8002322 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230a:	2b04      	cmp	r3, #4
 800230c:	d107      	bne.n	800231e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800231c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e06b      	b.n	80023fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002326:	781a      	ldrb	r2, [r3, #0]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800233c:	b29b      	uxth	r3, r3
 800233e:	3b01      	subs	r3, #1
 8002340:	b29a      	uxth	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800234a:	3b01      	subs	r3, #1
 800234c:	b29a      	uxth	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	f003 0304 	and.w	r3, r3, #4
 800235c:	2b04      	cmp	r3, #4
 800235e:	d11b      	bne.n	8002398 <HAL_I2C_Master_Transmit+0x188>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002364:	2b00      	cmp	r3, #0
 8002366:	d017      	beq.n	8002398 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236c:	781a      	ldrb	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002382:	b29b      	uxth	r3, r3
 8002384:	3b01      	subs	r3, #1
 8002386:	b29a      	uxth	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002390:	3b01      	subs	r3, #1
 8002392:	b29a      	uxth	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	6a39      	ldr	r1, [r7, #32]
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 fa19 	bl	80027d4 <I2C_WaitOnBTFFlagUntilTimeout>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00d      	beq.n	80023c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ac:	2b04      	cmp	r3, #4
 80023ae:	d107      	bne.n	80023c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e01a      	b.n	80023fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d194      	bne.n	80022f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2220      	movs	r2, #32
 80023e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80023f4:	2300      	movs	r3, #0
 80023f6:	e000      	b.n	80023fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80023f8:	2302      	movs	r3, #2
  }
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3718      	adds	r7, #24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	00100002 	.word	0x00100002
 8002408:	ffff0000 	.word	0xffff0000

0800240c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b088      	sub	sp, #32
 8002410:	af02      	add	r7, sp, #8
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	607a      	str	r2, [r7, #4]
 8002416:	603b      	str	r3, [r7, #0]
 8002418:	460b      	mov	r3, r1
 800241a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002420:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	2b08      	cmp	r3, #8
 8002426:	d006      	beq.n	8002436 <I2C_MasterRequestWrite+0x2a>
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d003      	beq.n	8002436 <I2C_MasterRequestWrite+0x2a>
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002434:	d108      	bne.n	8002448 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	e00b      	b.n	8002460 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244c:	2b12      	cmp	r3, #18
 800244e:	d107      	bne.n	8002460 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800245e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f000 f84f 	bl	8002510 <I2C_WaitOnFlagUntilTimeout>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00d      	beq.n	8002494 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002482:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002486:	d103      	bne.n	8002490 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800248e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e035      	b.n	8002500 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800249c:	d108      	bne.n	80024b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800249e:	897b      	ldrh	r3, [r7, #10]
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	461a      	mov	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80024ac:	611a      	str	r2, [r3, #16]
 80024ae:	e01b      	b.n	80024e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80024b0:	897b      	ldrh	r3, [r7, #10]
 80024b2:	11db      	asrs	r3, r3, #7
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	f003 0306 	and.w	r3, r3, #6
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	f063 030f 	orn	r3, r3, #15
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	490e      	ldr	r1, [pc, #56]	@ (8002508 <I2C_MasterRequestWrite+0xfc>)
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 f898 	bl	8002604 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e010      	b.n	8002500 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024de:	897b      	ldrh	r3, [r7, #10]
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	4907      	ldr	r1, [pc, #28]	@ (800250c <I2C_MasterRequestWrite+0x100>)
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f000 f888 	bl	8002604 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	00010008 	.word	0x00010008
 800250c:	00010002 	.word	0x00010002

08002510 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	603b      	str	r3, [r7, #0]
 800251c:	4613      	mov	r3, r2
 800251e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002520:	e048      	b.n	80025b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002528:	d044      	beq.n	80025b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800252a:	f7ff fa65 	bl	80019f8 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	429a      	cmp	r2, r3
 8002538:	d302      	bcc.n	8002540 <I2C_WaitOnFlagUntilTimeout+0x30>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d139      	bne.n	80025b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	0c1b      	lsrs	r3, r3, #16
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b01      	cmp	r3, #1
 8002548:	d10d      	bne.n	8002566 <I2C_WaitOnFlagUntilTimeout+0x56>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	43da      	mvns	r2, r3
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	4013      	ands	r3, r2
 8002556:	b29b      	uxth	r3, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	bf0c      	ite	eq
 800255c:	2301      	moveq	r3, #1
 800255e:	2300      	movne	r3, #0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	461a      	mov	r2, r3
 8002564:	e00c      	b.n	8002580 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	43da      	mvns	r2, r3
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	4013      	ands	r3, r2
 8002572:	b29b      	uxth	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	bf0c      	ite	eq
 8002578:	2301      	moveq	r3, #1
 800257a:	2300      	movne	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	461a      	mov	r2, r3
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	429a      	cmp	r2, r3
 8002584:	d116      	bne.n	80025b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2220      	movs	r2, #32
 8002590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a0:	f043 0220 	orr.w	r2, r3, #32
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e023      	b.n	80025fc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	0c1b      	lsrs	r3, r3, #16
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d10d      	bne.n	80025da <I2C_WaitOnFlagUntilTimeout+0xca>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	695b      	ldr	r3, [r3, #20]
 80025c4:	43da      	mvns	r2, r3
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	4013      	ands	r3, r2
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	bf0c      	ite	eq
 80025d0:	2301      	moveq	r3, #1
 80025d2:	2300      	movne	r3, #0
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	461a      	mov	r2, r3
 80025d8:	e00c      	b.n	80025f4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	43da      	mvns	r2, r3
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	4013      	ands	r3, r2
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	bf0c      	ite	eq
 80025ec:	2301      	moveq	r3, #1
 80025ee:	2300      	movne	r3, #0
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	461a      	mov	r2, r3
 80025f4:	79fb      	ldrb	r3, [r7, #7]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d093      	beq.n	8002522 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
 8002610:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002612:	e071      	b.n	80026f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800261e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002622:	d123      	bne.n	800266c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002632:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800263c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2220      	movs	r2, #32
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002658:	f043 0204 	orr.w	r2, r3, #4
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e067      	b.n	800273c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002672:	d041      	beq.n	80026f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002674:	f7ff f9c0 	bl	80019f8 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	429a      	cmp	r2, r3
 8002682:	d302      	bcc.n	800268a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d136      	bne.n	80026f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	0c1b      	lsrs	r3, r3, #16
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b01      	cmp	r3, #1
 8002692:	d10c      	bne.n	80026ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	43da      	mvns	r2, r3
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	4013      	ands	r3, r2
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	bf14      	ite	ne
 80026a6:	2301      	movne	r3, #1
 80026a8:	2300      	moveq	r3, #0
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	e00b      	b.n	80026c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	43da      	mvns	r2, r3
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	4013      	ands	r3, r2
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	bf14      	ite	ne
 80026c0:	2301      	movne	r3, #1
 80026c2:	2300      	moveq	r3, #0
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d016      	beq.n	80026f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2220      	movs	r2, #32
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e4:	f043 0220 	orr.w	r2, r3, #32
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e021      	b.n	800273c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	0c1b      	lsrs	r3, r3, #16
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d10c      	bne.n	800271c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	43da      	mvns	r2, r3
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	4013      	ands	r3, r2
 800270e:	b29b      	uxth	r3, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	bf14      	ite	ne
 8002714:	2301      	movne	r3, #1
 8002716:	2300      	moveq	r3, #0
 8002718:	b2db      	uxtb	r3, r3
 800271a:	e00b      	b.n	8002734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	43da      	mvns	r2, r3
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	4013      	ands	r3, r2
 8002728:	b29b      	uxth	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	bf14      	ite	ne
 800272e:	2301      	movne	r3, #1
 8002730:	2300      	moveq	r3, #0
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b00      	cmp	r3, #0
 8002736:	f47f af6d 	bne.w	8002614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002750:	e034      	b.n	80027bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 f886 	bl	8002864 <I2C_IsAcknowledgeFailed>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e034      	b.n	80027cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002768:	d028      	beq.n	80027bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800276a:	f7ff f945 	bl	80019f8 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	68ba      	ldr	r2, [r7, #8]
 8002776:	429a      	cmp	r2, r3
 8002778:	d302      	bcc.n	8002780 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d11d      	bne.n	80027bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800278a:	2b80      	cmp	r3, #128	@ 0x80
 800278c:	d016      	beq.n	80027bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2220      	movs	r2, #32
 8002798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a8:	f043 0220 	orr.w	r2, r3, #32
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e007      	b.n	80027cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027c6:	2b80      	cmp	r3, #128	@ 0x80
 80027c8:	d1c3      	bne.n	8002752 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027e0:	e034      	b.n	800284c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 f83e 	bl	8002864 <I2C_IsAcknowledgeFailed>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e034      	b.n	800285c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f8:	d028      	beq.n	800284c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027fa:	f7ff f8fd 	bl	80019f8 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	68ba      	ldr	r2, [r7, #8]
 8002806:	429a      	cmp	r2, r3
 8002808:	d302      	bcc.n	8002810 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d11d      	bne.n	800284c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	f003 0304 	and.w	r3, r3, #4
 800281a:	2b04      	cmp	r3, #4
 800281c:	d016      	beq.n	800284c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2220      	movs	r2, #32
 8002828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002838:	f043 0220 	orr.w	r2, r3, #32
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e007      	b.n	800285c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	2b04      	cmp	r3, #4
 8002858:	d1c3      	bne.n	80027e2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002876:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800287a:	d11b      	bne.n	80028b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002884:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2220      	movs	r2, #32
 8002890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a0:	f043 0204 	orr.w	r2, r3, #4
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e000      	b.n	80028b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
	...

080028c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e267      	b.n	8002da6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d075      	beq.n	80029ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80028e2:	4b88      	ldr	r3, [pc, #544]	@ (8002b04 <HAL_RCC_OscConfig+0x240>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 030c 	and.w	r3, r3, #12
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d00c      	beq.n	8002908 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028ee:	4b85      	ldr	r3, [pc, #532]	@ (8002b04 <HAL_RCC_OscConfig+0x240>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80028f6:	2b08      	cmp	r3, #8
 80028f8:	d112      	bne.n	8002920 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028fa:	4b82      	ldr	r3, [pc, #520]	@ (8002b04 <HAL_RCC_OscConfig+0x240>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002902:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002906:	d10b      	bne.n	8002920 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002908:	4b7e      	ldr	r3, [pc, #504]	@ (8002b04 <HAL_RCC_OscConfig+0x240>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d05b      	beq.n	80029cc <HAL_RCC_OscConfig+0x108>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d157      	bne.n	80029cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e242      	b.n	8002da6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002928:	d106      	bne.n	8002938 <HAL_RCC_OscConfig+0x74>
 800292a:	4b76      	ldr	r3, [pc, #472]	@ (8002b04 <HAL_RCC_OscConfig+0x240>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a75      	ldr	r2, [pc, #468]	@ (8002b04 <HAL_RCC_OscConfig+0x240>)
 8002930:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002934:	6013      	str	r3, [r2, #0]
 8002936:	e01d      	b.n	8002974 <HAL_RCC_OscConfig+0xb0>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002940:	d10c      	bne.n	800295c <HAL_RCC_OscConfig+0x98>
 8002942:	4b70      	ldr	r3, [pc, #448]	@ (8002b04 <HAL_RCC_OscConfig+0x240>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a6f      	ldr	r2, [pc, #444]	@ (8002b04 <HAL_RCC_OscConfig+0x240>)
 8002948:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	4b6d      	ldr	r3, [pc, #436]	@ (8002b04 <HAL_RCC_OscConfig+0x240>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a6c      	ldr	r2, [pc, #432]	@ (8002b04 <HAL_RCC_OscConfig+0x240>)
 8002954:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002958:	6013      	str	r3, [r2, #0]
 800295a:	e00b      	b.n	8002974 <HAL_RCC_OscConfig+0xb0>
 800295c:	4b69      	ldr	r3, [pc, #420]	@ (8002b04 <HAL_RCC_OscConfig+0x240>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a68      	ldr	r2, [pc, #416]	@ (8002b04 <HAL_RCC_OscConfig+0x240>)
 8002962:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002966:	6013      	str	r3, [r2, #0]
 8002968:	4b66      	ldr	r3, [pc, #408]	@ (8002b04 <HAL_RCC_OscConfig+0x240>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a65      	ldr	r2, [pc, #404]	@ (8002b04 <HAL_RCC_OscConfig+0x240>)
 800296e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002972:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d013      	beq.n	80029a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297c:	f7ff f83c 	bl	80019f8 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002984:	f7ff f838 	bl	80019f8 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b64      	cmp	r3, #100	@ 0x64
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e207      	b.n	8002da6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002996:	4b5b      	ldr	r3, [pc, #364]	@ (8002b04 <HAL_RCC_OscConfig+0x240>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0f0      	beq.n	8002984 <HAL_RCC_OscConfig+0xc0>
 80029a2:	e014      	b.n	80029ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a4:	f7ff f828 	bl	80019f8 <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029ac:	f7ff f824 	bl	80019f8 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b64      	cmp	r3, #100	@ 0x64
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e1f3      	b.n	8002da6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029be:	4b51      	ldr	r3, [pc, #324]	@ (8002b04 <HAL_RCC_OscConfig+0x240>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f0      	bne.n	80029ac <HAL_RCC_OscConfig+0xe8>
 80029ca:	e000      	b.n	80029ce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d063      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80029da:	4b4a      	ldr	r3, [pc, #296]	@ (8002b04 <HAL_RCC_OscConfig+0x240>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 030c 	and.w	r3, r3, #12
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00b      	beq.n	80029fe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029e6:	4b47      	ldr	r3, [pc, #284]	@ (8002b04 <HAL_RCC_OscConfig+0x240>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80029ee:	2b08      	cmp	r3, #8
 80029f0:	d11c      	bne.n	8002a2c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029f2:	4b44      	ldr	r3, [pc, #272]	@ (8002b04 <HAL_RCC_OscConfig+0x240>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d116      	bne.n	8002a2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029fe:	4b41      	ldr	r3, [pc, #260]	@ (8002b04 <HAL_RCC_OscConfig+0x240>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d005      	beq.n	8002a16 <HAL_RCC_OscConfig+0x152>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d001      	beq.n	8002a16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e1c7      	b.n	8002da6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a16:	4b3b      	ldr	r3, [pc, #236]	@ (8002b04 <HAL_RCC_OscConfig+0x240>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	4937      	ldr	r1, [pc, #220]	@ (8002b04 <HAL_RCC_OscConfig+0x240>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a2a:	e03a      	b.n	8002aa2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d020      	beq.n	8002a76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a34:	4b34      	ldr	r3, [pc, #208]	@ (8002b08 <HAL_RCC_OscConfig+0x244>)
 8002a36:	2201      	movs	r2, #1
 8002a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3a:	f7fe ffdd 	bl	80019f8 <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a42:	f7fe ffd9 	bl	80019f8 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e1a8      	b.n	8002da6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a54:	4b2b      	ldr	r3, [pc, #172]	@ (8002b04 <HAL_RCC_OscConfig+0x240>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0f0      	beq.n	8002a42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a60:	4b28      	ldr	r3, [pc, #160]	@ (8002b04 <HAL_RCC_OscConfig+0x240>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	4925      	ldr	r1, [pc, #148]	@ (8002b04 <HAL_RCC_OscConfig+0x240>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	600b      	str	r3, [r1, #0]
 8002a74:	e015      	b.n	8002aa2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a76:	4b24      	ldr	r3, [pc, #144]	@ (8002b08 <HAL_RCC_OscConfig+0x244>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7c:	f7fe ffbc 	bl	80019f8 <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a84:	f7fe ffb8 	bl	80019f8 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e187      	b.n	8002da6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a96:	4b1b      	ldr	r3, [pc, #108]	@ (8002b04 <HAL_RCC_OscConfig+0x240>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1f0      	bne.n	8002a84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0308 	and.w	r3, r3, #8
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d036      	beq.n	8002b1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d016      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ab6:	4b15      	ldr	r3, [pc, #84]	@ (8002b0c <HAL_RCC_OscConfig+0x248>)
 8002ab8:	2201      	movs	r2, #1
 8002aba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002abc:	f7fe ff9c 	bl	80019f8 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ac4:	f7fe ff98 	bl	80019f8 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e167      	b.n	8002da6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8002b04 <HAL_RCC_OscConfig+0x240>)
 8002ad8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x200>
 8002ae2:	e01b      	b.n	8002b1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ae4:	4b09      	ldr	r3, [pc, #36]	@ (8002b0c <HAL_RCC_OscConfig+0x248>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aea:	f7fe ff85 	bl	80019f8 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002af0:	e00e      	b.n	8002b10 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002af2:	f7fe ff81 	bl	80019f8 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d907      	bls.n	8002b10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e150      	b.n	8002da6 <HAL_RCC_OscConfig+0x4e2>
 8002b04:	40023800 	.word	0x40023800
 8002b08:	42470000 	.word	0x42470000
 8002b0c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b10:	4b88      	ldr	r3, [pc, #544]	@ (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002b12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1ea      	bne.n	8002af2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 8097 	beq.w	8002c58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b2e:	4b81      	ldr	r3, [pc, #516]	@ (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10f      	bne.n	8002b5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60bb      	str	r3, [r7, #8]
 8002b3e:	4b7d      	ldr	r3, [pc, #500]	@ (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b42:	4a7c      	ldr	r2, [pc, #496]	@ (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002b44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b48:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b4a:	4b7a      	ldr	r3, [pc, #488]	@ (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b52:	60bb      	str	r3, [r7, #8]
 8002b54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b56:	2301      	movs	r3, #1
 8002b58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5a:	4b77      	ldr	r3, [pc, #476]	@ (8002d38 <HAL_RCC_OscConfig+0x474>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d118      	bne.n	8002b98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b66:	4b74      	ldr	r3, [pc, #464]	@ (8002d38 <HAL_RCC_OscConfig+0x474>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a73      	ldr	r2, [pc, #460]	@ (8002d38 <HAL_RCC_OscConfig+0x474>)
 8002b6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b72:	f7fe ff41 	bl	80019f8 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b7a:	f7fe ff3d 	bl	80019f8 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e10c      	b.n	8002da6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8c:	4b6a      	ldr	r3, [pc, #424]	@ (8002d38 <HAL_RCC_OscConfig+0x474>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0f0      	beq.n	8002b7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d106      	bne.n	8002bae <HAL_RCC_OscConfig+0x2ea>
 8002ba0:	4b64      	ldr	r3, [pc, #400]	@ (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ba4:	4a63      	ldr	r2, [pc, #396]	@ (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002ba6:	f043 0301 	orr.w	r3, r3, #1
 8002baa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bac:	e01c      	b.n	8002be8 <HAL_RCC_OscConfig+0x324>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	2b05      	cmp	r3, #5
 8002bb4:	d10c      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x30c>
 8002bb6:	4b5f      	ldr	r3, [pc, #380]	@ (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bba:	4a5e      	ldr	r2, [pc, #376]	@ (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002bbc:	f043 0304 	orr.w	r3, r3, #4
 8002bc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bc2:	4b5c      	ldr	r3, [pc, #368]	@ (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002bc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bc6:	4a5b      	ldr	r2, [pc, #364]	@ (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bce:	e00b      	b.n	8002be8 <HAL_RCC_OscConfig+0x324>
 8002bd0:	4b58      	ldr	r3, [pc, #352]	@ (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002bd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bd4:	4a57      	ldr	r2, [pc, #348]	@ (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002bd6:	f023 0301 	bic.w	r3, r3, #1
 8002bda:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bdc:	4b55      	ldr	r3, [pc, #340]	@ (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be0:	4a54      	ldr	r2, [pc, #336]	@ (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002be2:	f023 0304 	bic.w	r3, r3, #4
 8002be6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d015      	beq.n	8002c1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf0:	f7fe ff02 	bl	80019f8 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf6:	e00a      	b.n	8002c0e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf8:	f7fe fefe 	bl	80019f8 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e0cb      	b.n	8002da6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c0e:	4b49      	ldr	r3, [pc, #292]	@ (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0ee      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x334>
 8002c1a:	e014      	b.n	8002c46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c1c:	f7fe feec 	bl	80019f8 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c22:	e00a      	b.n	8002c3a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c24:	f7fe fee8 	bl	80019f8 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e0b5      	b.n	8002da6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c3a:	4b3e      	ldr	r3, [pc, #248]	@ (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1ee      	bne.n	8002c24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c46:	7dfb      	ldrb	r3, [r7, #23]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d105      	bne.n	8002c58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c4c:	4b39      	ldr	r3, [pc, #228]	@ (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c50:	4a38      	ldr	r2, [pc, #224]	@ (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002c52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c56:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 80a1 	beq.w	8002da4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c62:	4b34      	ldr	r3, [pc, #208]	@ (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 030c 	and.w	r3, r3, #12
 8002c6a:	2b08      	cmp	r3, #8
 8002c6c:	d05c      	beq.n	8002d28 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d141      	bne.n	8002cfa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c76:	4b31      	ldr	r3, [pc, #196]	@ (8002d3c <HAL_RCC_OscConfig+0x478>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7c:	f7fe febc 	bl	80019f8 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c84:	f7fe feb8 	bl	80019f8 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e087      	b.n	8002da6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c96:	4b27      	ldr	r3, [pc, #156]	@ (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f0      	bne.n	8002c84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69da      	ldr	r2, [r3, #28]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	431a      	orrs	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb0:	019b      	lsls	r3, r3, #6
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb8:	085b      	lsrs	r3, r3, #1
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	041b      	lsls	r3, r3, #16
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc4:	061b      	lsls	r3, r3, #24
 8002cc6:	491b      	ldr	r1, [pc, #108]	@ (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8002d3c <HAL_RCC_OscConfig+0x478>)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd2:	f7fe fe91 	bl	80019f8 <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd8:	e008      	b.n	8002cec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cda:	f7fe fe8d 	bl	80019f8 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e05c      	b.n	8002da6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cec:	4b11      	ldr	r3, [pc, #68]	@ (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0f0      	beq.n	8002cda <HAL_RCC_OscConfig+0x416>
 8002cf8:	e054      	b.n	8002da4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cfa:	4b10      	ldr	r3, [pc, #64]	@ (8002d3c <HAL_RCC_OscConfig+0x478>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d00:	f7fe fe7a 	bl	80019f8 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d08:	f7fe fe76 	bl	80019f8 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e045      	b.n	8002da6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d1a:	4b06      	ldr	r3, [pc, #24]	@ (8002d34 <HAL_RCC_OscConfig+0x470>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1f0      	bne.n	8002d08 <HAL_RCC_OscConfig+0x444>
 8002d26:	e03d      	b.n	8002da4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d107      	bne.n	8002d40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e038      	b.n	8002da6 <HAL_RCC_OscConfig+0x4e2>
 8002d34:	40023800 	.word	0x40023800
 8002d38:	40007000 	.word	0x40007000
 8002d3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d40:	4b1b      	ldr	r3, [pc, #108]	@ (8002db0 <HAL_RCC_OscConfig+0x4ec>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d028      	beq.n	8002da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d121      	bne.n	8002da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d11a      	bne.n	8002da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d70:	4013      	ands	r3, r2
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d111      	bne.n	8002da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d86:	085b      	lsrs	r3, r3, #1
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d107      	bne.n	8002da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d001      	beq.n	8002da4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e000      	b.n	8002da6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	40023800 	.word	0x40023800

08002db4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e0cc      	b.n	8002f62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dc8:	4b68      	ldr	r3, [pc, #416]	@ (8002f6c <HAL_RCC_ClockConfig+0x1b8>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d90c      	bls.n	8002df0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd6:	4b65      	ldr	r3, [pc, #404]	@ (8002f6c <HAL_RCC_ClockConfig+0x1b8>)
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dde:	4b63      	ldr	r3, [pc, #396]	@ (8002f6c <HAL_RCC_ClockConfig+0x1b8>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d001      	beq.n	8002df0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e0b8      	b.n	8002f62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d020      	beq.n	8002e3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d005      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e08:	4b59      	ldr	r3, [pc, #356]	@ (8002f70 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	4a58      	ldr	r2, [pc, #352]	@ (8002f70 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e12:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0308 	and.w	r3, r3, #8
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d005      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e20:	4b53      	ldr	r3, [pc, #332]	@ (8002f70 <HAL_RCC_ClockConfig+0x1bc>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	4a52      	ldr	r2, [pc, #328]	@ (8002f70 <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002e2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e2c:	4b50      	ldr	r3, [pc, #320]	@ (8002f70 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	494d      	ldr	r1, [pc, #308]	@ (8002f70 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d044      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d107      	bne.n	8002e62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e52:	4b47      	ldr	r3, [pc, #284]	@ (8002f70 <HAL_RCC_ClockConfig+0x1bc>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d119      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e07f      	b.n	8002f62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d003      	beq.n	8002e72 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e6e:	2b03      	cmp	r3, #3
 8002e70:	d107      	bne.n	8002e82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e72:	4b3f      	ldr	r3, [pc, #252]	@ (8002f70 <HAL_RCC_ClockConfig+0x1bc>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d109      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e06f      	b.n	8002f62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e82:	4b3b      	ldr	r3, [pc, #236]	@ (8002f70 <HAL_RCC_ClockConfig+0x1bc>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e067      	b.n	8002f62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e92:	4b37      	ldr	r3, [pc, #220]	@ (8002f70 <HAL_RCC_ClockConfig+0x1bc>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f023 0203 	bic.w	r2, r3, #3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	4934      	ldr	r1, [pc, #208]	@ (8002f70 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ea4:	f7fe fda8 	bl	80019f8 <HAL_GetTick>
 8002ea8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eaa:	e00a      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eac:	f7fe fda4 	bl	80019f8 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e04f      	b.n	8002f62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec2:	4b2b      	ldr	r3, [pc, #172]	@ (8002f70 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 020c 	and.w	r2, r3, #12
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d1eb      	bne.n	8002eac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ed4:	4b25      	ldr	r3, [pc, #148]	@ (8002f6c <HAL_RCC_ClockConfig+0x1b8>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d20c      	bcs.n	8002efc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee2:	4b22      	ldr	r3, [pc, #136]	@ (8002f6c <HAL_RCC_ClockConfig+0x1b8>)
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eea:	4b20      	ldr	r3, [pc, #128]	@ (8002f6c <HAL_RCC_ClockConfig+0x1b8>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d001      	beq.n	8002efc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e032      	b.n	8002f62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d008      	beq.n	8002f1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f08:	4b19      	ldr	r3, [pc, #100]	@ (8002f70 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	4916      	ldr	r1, [pc, #88]	@ (8002f70 <HAL_RCC_ClockConfig+0x1bc>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0308 	and.w	r3, r3, #8
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d009      	beq.n	8002f3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f26:	4b12      	ldr	r3, [pc, #72]	@ (8002f70 <HAL_RCC_ClockConfig+0x1bc>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	490e      	ldr	r1, [pc, #56]	@ (8002f70 <HAL_RCC_ClockConfig+0x1bc>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f3a:	f000 f821 	bl	8002f80 <HAL_RCC_GetSysClockFreq>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	4b0b      	ldr	r3, [pc, #44]	@ (8002f70 <HAL_RCC_ClockConfig+0x1bc>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	091b      	lsrs	r3, r3, #4
 8002f46:	f003 030f 	and.w	r3, r3, #15
 8002f4a:	490a      	ldr	r1, [pc, #40]	@ (8002f74 <HAL_RCC_ClockConfig+0x1c0>)
 8002f4c:	5ccb      	ldrb	r3, [r1, r3]
 8002f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f52:	4a09      	ldr	r2, [pc, #36]	@ (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002f54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002f56:	4b09      	ldr	r3, [pc, #36]	@ (8002f7c <HAL_RCC_ClockConfig+0x1c8>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7fd ffd8 	bl	8000f10 <HAL_InitTick>

  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	40023c00 	.word	0x40023c00
 8002f70:	40023800 	.word	0x40023800
 8002f74:	080075f8 	.word	0x080075f8
 8002f78:	20000000 	.word	0x20000000
 8002f7c:	200000a4 	.word	0x200000a4

08002f80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f84:	b094      	sub	sp, #80	@ 0x50
 8002f86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002f94:	2300      	movs	r3, #0
 8002f96:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f98:	4b79      	ldr	r3, [pc, #484]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 030c 	and.w	r3, r3, #12
 8002fa0:	2b08      	cmp	r3, #8
 8002fa2:	d00d      	beq.n	8002fc0 <HAL_RCC_GetSysClockFreq+0x40>
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	f200 80e1 	bhi.w	800316c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d002      	beq.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x34>
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	d003      	beq.n	8002fba <HAL_RCC_GetSysClockFreq+0x3a>
 8002fb2:	e0db      	b.n	800316c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fb4:	4b73      	ldr	r3, [pc, #460]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fb6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fb8:	e0db      	b.n	8003172 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fba:	4b73      	ldr	r3, [pc, #460]	@ (8003188 <HAL_RCC_GetSysClockFreq+0x208>)
 8002fbc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fbe:	e0d8      	b.n	8003172 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fc0:	4b6f      	ldr	r3, [pc, #444]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fc8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fca:	4b6d      	ldr	r3, [pc, #436]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d063      	beq.n	800309e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fd6:	4b6a      	ldr	r3, [pc, #424]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	099b      	lsrs	r3, r3, #6
 8002fdc:	2200      	movs	r2, #0
 8002fde:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002fe0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fe8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002fea:	2300      	movs	r3, #0
 8002fec:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002ff2:	4622      	mov	r2, r4
 8002ff4:	462b      	mov	r3, r5
 8002ff6:	f04f 0000 	mov.w	r0, #0
 8002ffa:	f04f 0100 	mov.w	r1, #0
 8002ffe:	0159      	lsls	r1, r3, #5
 8003000:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003004:	0150      	lsls	r0, r2, #5
 8003006:	4602      	mov	r2, r0
 8003008:	460b      	mov	r3, r1
 800300a:	4621      	mov	r1, r4
 800300c:	1a51      	subs	r1, r2, r1
 800300e:	6139      	str	r1, [r7, #16]
 8003010:	4629      	mov	r1, r5
 8003012:	eb63 0301 	sbc.w	r3, r3, r1
 8003016:	617b      	str	r3, [r7, #20]
 8003018:	f04f 0200 	mov.w	r2, #0
 800301c:	f04f 0300 	mov.w	r3, #0
 8003020:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003024:	4659      	mov	r1, fp
 8003026:	018b      	lsls	r3, r1, #6
 8003028:	4651      	mov	r1, sl
 800302a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800302e:	4651      	mov	r1, sl
 8003030:	018a      	lsls	r2, r1, #6
 8003032:	4651      	mov	r1, sl
 8003034:	ebb2 0801 	subs.w	r8, r2, r1
 8003038:	4659      	mov	r1, fp
 800303a:	eb63 0901 	sbc.w	r9, r3, r1
 800303e:	f04f 0200 	mov.w	r2, #0
 8003042:	f04f 0300 	mov.w	r3, #0
 8003046:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800304a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800304e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003052:	4690      	mov	r8, r2
 8003054:	4699      	mov	r9, r3
 8003056:	4623      	mov	r3, r4
 8003058:	eb18 0303 	adds.w	r3, r8, r3
 800305c:	60bb      	str	r3, [r7, #8]
 800305e:	462b      	mov	r3, r5
 8003060:	eb49 0303 	adc.w	r3, r9, r3
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	f04f 0200 	mov.w	r2, #0
 800306a:	f04f 0300 	mov.w	r3, #0
 800306e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003072:	4629      	mov	r1, r5
 8003074:	024b      	lsls	r3, r1, #9
 8003076:	4621      	mov	r1, r4
 8003078:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800307c:	4621      	mov	r1, r4
 800307e:	024a      	lsls	r2, r1, #9
 8003080:	4610      	mov	r0, r2
 8003082:	4619      	mov	r1, r3
 8003084:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003086:	2200      	movs	r2, #0
 8003088:	62bb      	str	r3, [r7, #40]	@ 0x28
 800308a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800308c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003090:	f7fd f8f6 	bl	8000280 <__aeabi_uldivmod>
 8003094:	4602      	mov	r2, r0
 8003096:	460b      	mov	r3, r1
 8003098:	4613      	mov	r3, r2
 800309a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800309c:	e058      	b.n	8003150 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800309e:	4b38      	ldr	r3, [pc, #224]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x200>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	099b      	lsrs	r3, r3, #6
 80030a4:	2200      	movs	r2, #0
 80030a6:	4618      	mov	r0, r3
 80030a8:	4611      	mov	r1, r2
 80030aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030ae:	623b      	str	r3, [r7, #32]
 80030b0:	2300      	movs	r3, #0
 80030b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80030b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030b8:	4642      	mov	r2, r8
 80030ba:	464b      	mov	r3, r9
 80030bc:	f04f 0000 	mov.w	r0, #0
 80030c0:	f04f 0100 	mov.w	r1, #0
 80030c4:	0159      	lsls	r1, r3, #5
 80030c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030ca:	0150      	lsls	r0, r2, #5
 80030cc:	4602      	mov	r2, r0
 80030ce:	460b      	mov	r3, r1
 80030d0:	4641      	mov	r1, r8
 80030d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80030d6:	4649      	mov	r1, r9
 80030d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80030dc:	f04f 0200 	mov.w	r2, #0
 80030e0:	f04f 0300 	mov.w	r3, #0
 80030e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030f0:	ebb2 040a 	subs.w	r4, r2, sl
 80030f4:	eb63 050b 	sbc.w	r5, r3, fp
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	f04f 0300 	mov.w	r3, #0
 8003100:	00eb      	lsls	r3, r5, #3
 8003102:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003106:	00e2      	lsls	r2, r4, #3
 8003108:	4614      	mov	r4, r2
 800310a:	461d      	mov	r5, r3
 800310c:	4643      	mov	r3, r8
 800310e:	18e3      	adds	r3, r4, r3
 8003110:	603b      	str	r3, [r7, #0]
 8003112:	464b      	mov	r3, r9
 8003114:	eb45 0303 	adc.w	r3, r5, r3
 8003118:	607b      	str	r3, [r7, #4]
 800311a:	f04f 0200 	mov.w	r2, #0
 800311e:	f04f 0300 	mov.w	r3, #0
 8003122:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003126:	4629      	mov	r1, r5
 8003128:	028b      	lsls	r3, r1, #10
 800312a:	4621      	mov	r1, r4
 800312c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003130:	4621      	mov	r1, r4
 8003132:	028a      	lsls	r2, r1, #10
 8003134:	4610      	mov	r0, r2
 8003136:	4619      	mov	r1, r3
 8003138:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800313a:	2200      	movs	r2, #0
 800313c:	61bb      	str	r3, [r7, #24]
 800313e:	61fa      	str	r2, [r7, #28]
 8003140:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003144:	f7fd f89c 	bl	8000280 <__aeabi_uldivmod>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	4613      	mov	r3, r2
 800314e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003150:	4b0b      	ldr	r3, [pc, #44]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x200>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	0c1b      	lsrs	r3, r3, #16
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	3301      	adds	r3, #1
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003160:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003162:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003164:	fbb2 f3f3 	udiv	r3, r2, r3
 8003168:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800316a:	e002      	b.n	8003172 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800316c:	4b05      	ldr	r3, [pc, #20]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x204>)
 800316e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003170:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003172:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003174:	4618      	mov	r0, r3
 8003176:	3750      	adds	r7, #80	@ 0x50
 8003178:	46bd      	mov	sp, r7
 800317a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800317e:	bf00      	nop
 8003180:	40023800 	.word	0x40023800
 8003184:	00f42400 	.word	0x00f42400
 8003188:	007a1200 	.word	0x007a1200

0800318c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003190:	4b03      	ldr	r3, [pc, #12]	@ (80031a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003192:	681b      	ldr	r3, [r3, #0]
}
 8003194:	4618      	mov	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	20000000 	.word	0x20000000

080031a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031a8:	f7ff fff0 	bl	800318c <HAL_RCC_GetHCLKFreq>
 80031ac:	4602      	mov	r2, r0
 80031ae:	4b05      	ldr	r3, [pc, #20]	@ (80031c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	0a9b      	lsrs	r3, r3, #10
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	4903      	ldr	r1, [pc, #12]	@ (80031c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ba:	5ccb      	ldrb	r3, [r1, r3]
 80031bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40023800 	.word	0x40023800
 80031c8:	08007608 	.word	0x08007608

080031cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031d0:	f7ff ffdc 	bl	800318c <HAL_RCC_GetHCLKFreq>
 80031d4:	4602      	mov	r2, r0
 80031d6:	4b05      	ldr	r3, [pc, #20]	@ (80031ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	0b5b      	lsrs	r3, r3, #13
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	4903      	ldr	r1, [pc, #12]	@ (80031f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031e2:	5ccb      	ldrb	r3, [r1, r3]
 80031e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40023800 	.word	0x40023800
 80031f0:	08007608 	.word	0x08007608

080031f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	220f      	movs	r2, #15
 8003202:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003204:	4b12      	ldr	r3, [pc, #72]	@ (8003250 <HAL_RCC_GetClockConfig+0x5c>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 0203 	and.w	r2, r3, #3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003210:	4b0f      	ldr	r3, [pc, #60]	@ (8003250 <HAL_RCC_GetClockConfig+0x5c>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800321c:	4b0c      	ldr	r3, [pc, #48]	@ (8003250 <HAL_RCC_GetClockConfig+0x5c>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003228:	4b09      	ldr	r3, [pc, #36]	@ (8003250 <HAL_RCC_GetClockConfig+0x5c>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	08db      	lsrs	r3, r3, #3
 800322e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003236:	4b07      	ldr	r3, [pc, #28]	@ (8003254 <HAL_RCC_GetClockConfig+0x60>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0207 	and.w	r2, r3, #7
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	601a      	str	r2, [r3, #0]
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	40023800 	.word	0x40023800
 8003254:	40023c00 	.word	0x40023c00

08003258 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e041      	b.n	80032ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d106      	bne.n	8003284 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7fd ff7c 	bl	800117c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2202      	movs	r2, #2
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3304      	adds	r3, #4
 8003294:	4619      	mov	r1, r3
 8003296:	4610      	mov	r0, r2
 8003298:	f000 fa70 	bl	800377c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
	...

080032f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b01      	cmp	r3, #1
 800330a:	d001      	beq.n	8003310 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e044      	b.n	800339a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2202      	movs	r2, #2
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68da      	ldr	r2, [r3, #12]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0201 	orr.w	r2, r2, #1
 8003326:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a1e      	ldr	r2, [pc, #120]	@ (80033a8 <HAL_TIM_Base_Start_IT+0xb0>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d018      	beq.n	8003364 <HAL_TIM_Base_Start_IT+0x6c>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800333a:	d013      	beq.n	8003364 <HAL_TIM_Base_Start_IT+0x6c>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a1a      	ldr	r2, [pc, #104]	@ (80033ac <HAL_TIM_Base_Start_IT+0xb4>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d00e      	beq.n	8003364 <HAL_TIM_Base_Start_IT+0x6c>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a19      	ldr	r2, [pc, #100]	@ (80033b0 <HAL_TIM_Base_Start_IT+0xb8>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d009      	beq.n	8003364 <HAL_TIM_Base_Start_IT+0x6c>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a17      	ldr	r2, [pc, #92]	@ (80033b4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d004      	beq.n	8003364 <HAL_TIM_Base_Start_IT+0x6c>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a16      	ldr	r2, [pc, #88]	@ (80033b8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d111      	bne.n	8003388 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2b06      	cmp	r3, #6
 8003374:	d010      	beq.n	8003398 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f042 0201 	orr.w	r2, r2, #1
 8003384:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003386:	e007      	b.n	8003398 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f042 0201 	orr.w	r2, r2, #1
 8003396:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3714      	adds	r7, #20
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	40010000 	.word	0x40010000
 80033ac:	40000400 	.word	0x40000400
 80033b0:	40000800 	.word	0x40000800
 80033b4:	40000c00 	.word	0x40000c00
 80033b8:	40014000 	.word	0x40014000

080033bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d020      	beq.n	8003420 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d01b      	beq.n	8003420 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f06f 0202 	mvn.w	r2, #2
 80033f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	f003 0303 	and.w	r3, r3, #3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f999 	bl	800373e <HAL_TIM_IC_CaptureCallback>
 800340c:	e005      	b.n	800341a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f98b 	bl	800372a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 f99c 	bl	8003752 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f003 0304 	and.w	r3, r3, #4
 8003426:	2b00      	cmp	r3, #0
 8003428:	d020      	beq.n	800346c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b00      	cmp	r3, #0
 8003432:	d01b      	beq.n	800346c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f06f 0204 	mvn.w	r2, #4
 800343c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2202      	movs	r2, #2
 8003442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f973 	bl	800373e <HAL_TIM_IC_CaptureCallback>
 8003458:	e005      	b.n	8003466 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f965 	bl	800372a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 f976 	bl	8003752 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	f003 0308 	and.w	r3, r3, #8
 8003472:	2b00      	cmp	r3, #0
 8003474:	d020      	beq.n	80034b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f003 0308 	and.w	r3, r3, #8
 800347c:	2b00      	cmp	r3, #0
 800347e:	d01b      	beq.n	80034b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f06f 0208 	mvn.w	r2, #8
 8003488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2204      	movs	r2, #4
 800348e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	f003 0303 	and.w	r3, r3, #3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f94d 	bl	800373e <HAL_TIM_IC_CaptureCallback>
 80034a4:	e005      	b.n	80034b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f93f 	bl	800372a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 f950 	bl	8003752 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	f003 0310 	and.w	r3, r3, #16
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d020      	beq.n	8003504 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f003 0310 	and.w	r3, r3, #16
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d01b      	beq.n	8003504 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f06f 0210 	mvn.w	r2, #16
 80034d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2208      	movs	r2, #8
 80034da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f927 	bl	800373e <HAL_TIM_IC_CaptureCallback>
 80034f0:	e005      	b.n	80034fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f919 	bl	800372a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f92a 	bl	8003752 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00c      	beq.n	8003528 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b00      	cmp	r3, #0
 8003516:	d007      	beq.n	8003528 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f06f 0201 	mvn.w	r2, #1
 8003520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7fd fcaa 	bl	8000e7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00c      	beq.n	800354c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003538:	2b00      	cmp	r3, #0
 800353a:	d007      	beq.n	800354c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 fab0 	bl	8003aac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00c      	beq.n	8003570 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800355c:	2b00      	cmp	r3, #0
 800355e:	d007      	beq.n	8003570 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f8fb 	bl	8003766 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	f003 0320 	and.w	r3, r3, #32
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00c      	beq.n	8003594 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f003 0320 	and.w	r3, r3, #32
 8003580:	2b00      	cmp	r3, #0
 8003582:	d007      	beq.n	8003594 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f06f 0220 	mvn.w	r2, #32
 800358c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 fa82 	bl	8003a98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003594:	bf00      	nop
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035a6:	2300      	movs	r3, #0
 80035a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d101      	bne.n	80035b8 <HAL_TIM_ConfigClockSource+0x1c>
 80035b4:	2302      	movs	r3, #2
 80035b6:	e0b4      	b.n	8003722 <HAL_TIM_ConfigClockSource+0x186>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2202      	movs	r2, #2
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80035d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80035de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035f0:	d03e      	beq.n	8003670 <HAL_TIM_ConfigClockSource+0xd4>
 80035f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035f6:	f200 8087 	bhi.w	8003708 <HAL_TIM_ConfigClockSource+0x16c>
 80035fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035fe:	f000 8086 	beq.w	800370e <HAL_TIM_ConfigClockSource+0x172>
 8003602:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003606:	d87f      	bhi.n	8003708 <HAL_TIM_ConfigClockSource+0x16c>
 8003608:	2b70      	cmp	r3, #112	@ 0x70
 800360a:	d01a      	beq.n	8003642 <HAL_TIM_ConfigClockSource+0xa6>
 800360c:	2b70      	cmp	r3, #112	@ 0x70
 800360e:	d87b      	bhi.n	8003708 <HAL_TIM_ConfigClockSource+0x16c>
 8003610:	2b60      	cmp	r3, #96	@ 0x60
 8003612:	d050      	beq.n	80036b6 <HAL_TIM_ConfigClockSource+0x11a>
 8003614:	2b60      	cmp	r3, #96	@ 0x60
 8003616:	d877      	bhi.n	8003708 <HAL_TIM_ConfigClockSource+0x16c>
 8003618:	2b50      	cmp	r3, #80	@ 0x50
 800361a:	d03c      	beq.n	8003696 <HAL_TIM_ConfigClockSource+0xfa>
 800361c:	2b50      	cmp	r3, #80	@ 0x50
 800361e:	d873      	bhi.n	8003708 <HAL_TIM_ConfigClockSource+0x16c>
 8003620:	2b40      	cmp	r3, #64	@ 0x40
 8003622:	d058      	beq.n	80036d6 <HAL_TIM_ConfigClockSource+0x13a>
 8003624:	2b40      	cmp	r3, #64	@ 0x40
 8003626:	d86f      	bhi.n	8003708 <HAL_TIM_ConfigClockSource+0x16c>
 8003628:	2b30      	cmp	r3, #48	@ 0x30
 800362a:	d064      	beq.n	80036f6 <HAL_TIM_ConfigClockSource+0x15a>
 800362c:	2b30      	cmp	r3, #48	@ 0x30
 800362e:	d86b      	bhi.n	8003708 <HAL_TIM_ConfigClockSource+0x16c>
 8003630:	2b20      	cmp	r3, #32
 8003632:	d060      	beq.n	80036f6 <HAL_TIM_ConfigClockSource+0x15a>
 8003634:	2b20      	cmp	r3, #32
 8003636:	d867      	bhi.n	8003708 <HAL_TIM_ConfigClockSource+0x16c>
 8003638:	2b00      	cmp	r3, #0
 800363a:	d05c      	beq.n	80036f6 <HAL_TIM_ConfigClockSource+0x15a>
 800363c:	2b10      	cmp	r3, #16
 800363e:	d05a      	beq.n	80036f6 <HAL_TIM_ConfigClockSource+0x15a>
 8003640:	e062      	b.n	8003708 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003652:	f000 f993 	bl	800397c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003664:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	609a      	str	r2, [r3, #8]
      break;
 800366e:	e04f      	b.n	8003710 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003680:	f000 f97c 	bl	800397c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003692:	609a      	str	r2, [r3, #8]
      break;
 8003694:	e03c      	b.n	8003710 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036a2:	461a      	mov	r2, r3
 80036a4:	f000 f8f0 	bl	8003888 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2150      	movs	r1, #80	@ 0x50
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 f949 	bl	8003946 <TIM_ITRx_SetConfig>
      break;
 80036b4:	e02c      	b.n	8003710 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036c2:	461a      	mov	r2, r3
 80036c4:	f000 f90f 	bl	80038e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2160      	movs	r1, #96	@ 0x60
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 f939 	bl	8003946 <TIM_ITRx_SetConfig>
      break;
 80036d4:	e01c      	b.n	8003710 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036e2:	461a      	mov	r2, r3
 80036e4:	f000 f8d0 	bl	8003888 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2140      	movs	r1, #64	@ 0x40
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 f929 	bl	8003946 <TIM_ITRx_SetConfig>
      break;
 80036f4:	e00c      	b.n	8003710 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4619      	mov	r1, r3
 8003700:	4610      	mov	r0, r2
 8003702:	f000 f920 	bl	8003946 <TIM_ITRx_SetConfig>
      break;
 8003706:	e003      	b.n	8003710 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	73fb      	strb	r3, [r7, #15]
      break;
 800370c:	e000      	b.n	8003710 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800370e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003720:	7bfb      	ldrb	r3, [r7, #15]
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800372a:	b480      	push	{r7}
 800372c:	b083      	sub	sp, #12
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003732:	bf00      	nop
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003746:	bf00      	nop
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr

08003752 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003752:	b480      	push	{r7}
 8003754:	b083      	sub	sp, #12
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800375a:	bf00      	nop
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr

08003766 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003766:	b480      	push	{r7}
 8003768:	b083      	sub	sp, #12
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
	...

0800377c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a37      	ldr	r2, [pc, #220]	@ (800386c <TIM_Base_SetConfig+0xf0>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d00f      	beq.n	80037b4 <TIM_Base_SetConfig+0x38>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800379a:	d00b      	beq.n	80037b4 <TIM_Base_SetConfig+0x38>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a34      	ldr	r2, [pc, #208]	@ (8003870 <TIM_Base_SetConfig+0xf4>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d007      	beq.n	80037b4 <TIM_Base_SetConfig+0x38>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a33      	ldr	r2, [pc, #204]	@ (8003874 <TIM_Base_SetConfig+0xf8>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d003      	beq.n	80037b4 <TIM_Base_SetConfig+0x38>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a32      	ldr	r2, [pc, #200]	@ (8003878 <TIM_Base_SetConfig+0xfc>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d108      	bne.n	80037c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a28      	ldr	r2, [pc, #160]	@ (800386c <TIM_Base_SetConfig+0xf0>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d01b      	beq.n	8003806 <TIM_Base_SetConfig+0x8a>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037d4:	d017      	beq.n	8003806 <TIM_Base_SetConfig+0x8a>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a25      	ldr	r2, [pc, #148]	@ (8003870 <TIM_Base_SetConfig+0xf4>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d013      	beq.n	8003806 <TIM_Base_SetConfig+0x8a>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a24      	ldr	r2, [pc, #144]	@ (8003874 <TIM_Base_SetConfig+0xf8>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d00f      	beq.n	8003806 <TIM_Base_SetConfig+0x8a>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a23      	ldr	r2, [pc, #140]	@ (8003878 <TIM_Base_SetConfig+0xfc>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d00b      	beq.n	8003806 <TIM_Base_SetConfig+0x8a>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a22      	ldr	r2, [pc, #136]	@ (800387c <TIM_Base_SetConfig+0x100>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d007      	beq.n	8003806 <TIM_Base_SetConfig+0x8a>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a21      	ldr	r2, [pc, #132]	@ (8003880 <TIM_Base_SetConfig+0x104>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d003      	beq.n	8003806 <TIM_Base_SetConfig+0x8a>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a20      	ldr	r2, [pc, #128]	@ (8003884 <TIM_Base_SetConfig+0x108>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d108      	bne.n	8003818 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800380c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	4313      	orrs	r3, r2
 8003816:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	4313      	orrs	r3, r2
 8003824:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	689a      	ldr	r2, [r3, #8]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a0c      	ldr	r2, [pc, #48]	@ (800386c <TIM_Base_SetConfig+0xf0>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d103      	bne.n	8003846 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	691a      	ldr	r2, [r3, #16]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f043 0204 	orr.w	r2, r3, #4
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	601a      	str	r2, [r3, #0]
}
 800385e:	bf00      	nop
 8003860:	3714      	adds	r7, #20
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	40010000 	.word	0x40010000
 8003870:	40000400 	.word	0x40000400
 8003874:	40000800 	.word	0x40000800
 8003878:	40000c00 	.word	0x40000c00
 800387c:	40014000 	.word	0x40014000
 8003880:	40014400 	.word	0x40014400
 8003884:	40014800 	.word	0x40014800

08003888 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003888:	b480      	push	{r7}
 800388a:	b087      	sub	sp, #28
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	f023 0201 	bic.w	r2, r3, #1
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	011b      	lsls	r3, r3, #4
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	f023 030a 	bic.w	r3, r3, #10
 80038c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	621a      	str	r2, [r3, #32]
}
 80038da:	bf00      	nop
 80038dc:	371c      	adds	r7, #28
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b087      	sub	sp, #28
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	60f8      	str	r0, [r7, #12]
 80038ee:	60b9      	str	r1, [r7, #8]
 80038f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	f023 0210 	bic.w	r2, r3, #16
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003910:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	031b      	lsls	r3, r3, #12
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	4313      	orrs	r3, r2
 800391a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003922:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	4313      	orrs	r3, r2
 800392c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	621a      	str	r2, [r3, #32]
}
 800393a:	bf00      	nop
 800393c:	371c      	adds	r7, #28
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003946:	b480      	push	{r7}
 8003948:	b085      	sub	sp, #20
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
 800394e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800395c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	4313      	orrs	r3, r2
 8003964:	f043 0307 	orr.w	r3, r3, #7
 8003968:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	609a      	str	r2, [r3, #8]
}
 8003970:	bf00      	nop
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
 8003988:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003996:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	021a      	lsls	r2, r3, #8
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	431a      	orrs	r2, r3
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	609a      	str	r2, [r3, #8]
}
 80039b0:	bf00      	nop
 80039b2:	371c      	adds	r7, #28
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d101      	bne.n	80039d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039d0:	2302      	movs	r3, #2
 80039d2:	e050      	b.n	8003a76 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2202      	movs	r2, #2
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a1c      	ldr	r2, [pc, #112]	@ (8003a84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d018      	beq.n	8003a4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a20:	d013      	beq.n	8003a4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a18      	ldr	r2, [pc, #96]	@ (8003a88 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d00e      	beq.n	8003a4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a16      	ldr	r2, [pc, #88]	@ (8003a8c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d009      	beq.n	8003a4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a15      	ldr	r2, [pc, #84]	@ (8003a90 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d004      	beq.n	8003a4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a13      	ldr	r2, [pc, #76]	@ (8003a94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d10c      	bne.n	8003a64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3714      	adds	r7, #20
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	40010000 	.word	0x40010000
 8003a88:	40000400 	.word	0x40000400
 8003a8c:	40000800 	.word	0x40000800
 8003a90:	40000c00 	.word	0x40000c00
 8003a94:	40014000 	.word	0x40014000

08003a98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003aca:	2300      	movs	r3, #0
 8003acc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003ace:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ad2:	2b84      	cmp	r3, #132	@ 0x84
 8003ad4:	d005      	beq.n	8003ae2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003ad6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4413      	add	r3, r2
 8003ade:	3303      	adds	r3, #3
 8003ae0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3714      	adds	r7, #20
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003af6:	f3ef 8305 	mrs	r3, IPSR
 8003afa:	607b      	str	r3, [r7, #4]
  return(result);
 8003afc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	bf14      	ite	ne
 8003b02:	2301      	movne	r3, #1
 8003b04:	2300      	moveq	r3, #0
 8003b06:	b2db      	uxtb	r3, r3
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003b18:	f001 fd52 	bl	80055c0 <vTaskStartScheduler>
  
  return osOK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003b22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b24:	b089      	sub	sp, #36	@ 0x24
 8003b26:	af04      	add	r7, sp, #16
 8003b28:	6078      	str	r0, [r7, #4]
 8003b2a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d020      	beq.n	8003b76 <osThreadCreate+0x54>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d01c      	beq.n	8003b76 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685c      	ldr	r4, [r3, #4]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	691e      	ldr	r6, [r3, #16]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7ff ffb6 	bl	8003ac0 <makeFreeRtosPriority>
 8003b54:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b5e:	9202      	str	r2, [sp, #8]
 8003b60:	9301      	str	r3, [sp, #4]
 8003b62:	9100      	str	r1, [sp, #0]
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	4632      	mov	r2, r6
 8003b68:	4629      	mov	r1, r5
 8003b6a:	4620      	mov	r0, r4
 8003b6c:	f001 fb42 	bl	80051f4 <xTaskCreateStatic>
 8003b70:	4603      	mov	r3, r0
 8003b72:	60fb      	str	r3, [r7, #12]
 8003b74:	e01c      	b.n	8003bb0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685c      	ldr	r4, [r3, #4]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b82:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7ff ff98 	bl	8003ac0 <makeFreeRtosPriority>
 8003b90:	4602      	mov	r2, r0
 8003b92:	f107 030c 	add.w	r3, r7, #12
 8003b96:	9301      	str	r3, [sp, #4]
 8003b98:	9200      	str	r2, [sp, #0]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	4632      	mov	r2, r6
 8003b9e:	4629      	mov	r1, r5
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	f001 fb87 	bl	80052b4 <xTaskCreate>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d001      	beq.n	8003bb0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003bac:	2300      	movs	r3, #0
 8003bae:	e000      	b.n	8003bb2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3714      	adds	r7, #20
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bba <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b084      	sub	sp, #16
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <osDelay+0x16>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	e000      	b.n	8003bd2 <osDelay+0x18>
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f001 fcbe 	bl	8005554 <vTaskDelay>
  
  return osOK;
 8003bd8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b082      	sub	sp, #8
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d007      	beq.n	8003c02 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	2001      	movs	r0, #1
 8003bfa:	f000 fd14 	bl	8004626 <xQueueCreateMutexStatic>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	e003      	b.n	8003c0a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8003c02:	2001      	movs	r0, #1
 8003c04:	f000 fcf7 	bl	80045f6 <xQueueCreateMutex>
 8003c08:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3708      	adds	r7, #8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
	...

08003c14 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d101      	bne.n	8003c2c <osMutexWait+0x18>
    return osErrorParameter;
 8003c28:	2380      	movs	r3, #128	@ 0x80
 8003c2a:	e03a      	b.n	8003ca2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c36:	d103      	bne.n	8003c40 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8003c38:	f04f 33ff 	mov.w	r3, #4294967295
 8003c3c:	60fb      	str	r3, [r7, #12]
 8003c3e:	e009      	b.n	8003c54 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d006      	beq.n	8003c54 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d101      	bne.n	8003c54 <osMutexWait+0x40>
      ticks = 1;
 8003c50:	2301      	movs	r3, #1
 8003c52:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003c54:	f7ff ff4c 	bl	8003af0 <inHandlerMode>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d017      	beq.n	8003c8e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003c5e:	f107 0308 	add.w	r3, r7, #8
 8003c62:	461a      	mov	r2, r3
 8003c64:	2100      	movs	r1, #0
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f001 f91a 	bl	8004ea0 <xQueueReceiveFromISR>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d001      	beq.n	8003c76 <osMutexWait+0x62>
      return osErrorOS;
 8003c72:	23ff      	movs	r3, #255	@ 0xff
 8003c74:	e015      	b.n	8003ca2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d011      	beq.n	8003ca0 <osMutexWait+0x8c>
 8003c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003cac <osMutexWait+0x98>)
 8003c7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	f3bf 8f4f 	dsb	sy
 8003c88:	f3bf 8f6f 	isb	sy
 8003c8c:	e008      	b.n	8003ca0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8003c8e:	68f9      	ldr	r1, [r7, #12]
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 fff5 	bl	8004c80 <xQueueSemaphoreTake>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d001      	beq.n	8003ca0 <osMutexWait+0x8c>
    return osErrorOS;
 8003c9c:	23ff      	movs	r3, #255	@ 0xff
 8003c9e:	e000      	b.n	8003ca2 <osMutexWait+0x8e>
  }
  
  return osOK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	e000ed04 	.word	0xe000ed04

08003cb0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8003cc0:	f7ff ff16 	bl	8003af0 <inHandlerMode>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d016      	beq.n	8003cf8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003cca:	f107 0308 	add.w	r3, r7, #8
 8003cce:	4619      	mov	r1, r3
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 fe63 	bl	800499c <xQueueGiveFromISR>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d001      	beq.n	8003ce0 <osMutexRelease+0x30>
      return osErrorOS;
 8003cdc:	23ff      	movs	r3, #255	@ 0xff
 8003cde:	e017      	b.n	8003d10 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d013      	beq.n	8003d0e <osMutexRelease+0x5e>
 8003ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8003d18 <osMutexRelease+0x68>)
 8003ce8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	f3bf 8f4f 	dsb	sy
 8003cf2:	f3bf 8f6f 	isb	sy
 8003cf6:	e00a      	b.n	8003d0e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 fcac 	bl	800465c <xQueueGenericSend>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d001      	beq.n	8003d0e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8003d0a:	23ff      	movs	r3, #255	@ 0xff
 8003d0c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	e000ed04 	.word	0xe000ed04

08003d1c <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	3303      	adds	r3, #3
 8003d2a:	f023 0303 	bic.w	r3, r3, #3
 8003d2e:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8003d30:	2014      	movs	r0, #20
 8003d32:	f002 fcdb 	bl	80066ec <pvPortMalloc>
 8003d36:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d046      	beq.n	8003dcc <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f002 fcc8 	bl	80066ec <pvPortMalloc>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d02b      	beq.n	8003dc2 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	fb02 f303 	mul.w	r3, r2, r3
 8003d74:	4618      	mov	r0, r3
 8003d76:	f002 fcb9 	bl	80066ec <pvPortMalloc>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d011      	beq.n	8003dac <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8003d88:	2300      	movs	r3, #0
 8003d8a:	613b      	str	r3, [r7, #16]
 8003d8c:	e008      	b.n	8003da0 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	4413      	add	r3, r2
 8003d96:	2200      	movs	r2, #0
 8003d98:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	613b      	str	r3, [r7, #16]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d3f1      	bcc.n	8003d8e <osPoolCreate+0x72>
 8003daa:	e00f      	b.n	8003dcc <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f002 fd69 	bl	8006888 <vPortFree>
        vPortFree(thePool);
 8003db6:	6978      	ldr	r0, [r7, #20]
 8003db8:	f002 fd66 	bl	8006888 <vPortFree>
        thePool = NULL;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	617b      	str	r3, [r7, #20]
 8003dc0:	e004      	b.n	8003dcc <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8003dc2:	6978      	ldr	r0, [r7, #20]
 8003dc4:	f002 fd60 	bl	8006888 <vPortFree>
      thePool = NULL;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b08a      	sub	sp, #40	@ 0x28
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8003dde:	2300      	movs	r3, #0
 8003de0:	627b      	str	r3, [r7, #36]	@ 0x24
  void *p = NULL;
 8003de2:	2300      	movs	r3, #0
 8003de4:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8003de6:	f7ff fe83 	bl	8003af0 <inHandlerMode>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00e      	beq.n	8003e0e <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003df0:	f3ef 8211 	mrs	r2, BASEPRI
 8003df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003df8:	f383 8811 	msr	BASEPRI, r3
 8003dfc:	f3bf 8f6f 	isb	sy
 8003e00:	f3bf 8f4f 	dsb	sy
 8003e04:	617a      	str	r2, [r7, #20]
 8003e06:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003e08:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8003e0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e0c:	e001      	b.n	8003e12 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8003e0e:	f002 fb4b 	bl	80064a8 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8003e12:	2300      	movs	r3, #0
 8003e14:	61fb      	str	r3, [r7, #28]
 8003e16:	e029      	b.n	8003e6c <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691a      	ldr	r2, [r3, #16]
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	4413      	add	r3, r2
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6892      	ldr	r2, [r2, #8]
 8003e24:	fbb3 f1f2 	udiv	r1, r3, r2
 8003e28:	fb01 f202 	mul.w	r2, r1, r2
 8003e2c:	1a9b      	subs	r3, r3, r2
 8003e2e:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685a      	ldr	r2, [r3, #4]
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	4413      	add	r3, r2
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d113      	bne.n	8003e66 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	4413      	add	r3, r2
 8003e46:	2201      	movs	r2, #1
 8003e48:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4619      	mov	r1, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	fb02 f303 	mul.w	r3, r2, r3
 8003e5a:	440b      	add	r3, r1
 8003e5c:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	611a      	str	r2, [r3, #16]
      break;
 8003e64:	e007      	b.n	8003e76 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	61fb      	str	r3, [r7, #28]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	69fa      	ldr	r2, [r7, #28]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d3d0      	bcc.n	8003e18 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8003e76:	f7ff fe3b 	bl	8003af0 <inHandlerMode>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d005      	beq.n	8003e8c <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8003e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e82:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003e8a:	e001      	b.n	8003e90 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8003e8c:	f002 fb3e 	bl	800650c <vPortExitCritical>
  }
  
  return p;
 8003e90:	6a3b      	ldr	r3, [r7, #32]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3728      	adds	r7, #40	@ 0x28
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b085      	sub	sp, #20
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
 8003ea2:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <osPoolFree+0x14>
    return osErrorParameter;
 8003eaa:	2380      	movs	r3, #128	@ 0x80
 8003eac:	e030      	b.n	8003f10 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d101      	bne.n	8003eb8 <osPoolFree+0x1e>
    return osErrorParameter;
 8003eb4:	2380      	movs	r3, #128	@ 0x80
 8003eb6:	e02b      	b.n	8003f10 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d201      	bcs.n	8003ec6 <osPoolFree+0x2c>
    return osErrorParameter;
 8003ec2:	2380      	movs	r3, #128	@ 0x80
 8003ec4:	e024      	b.n	8003f10 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	6812      	ldr	r2, [r2, #0]
 8003ecc:	1a9b      	subs	r3, r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68da      	ldr	r2, [r3, #12]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	fbb3 f1f2 	udiv	r1, r3, r2
 8003eda:	fb01 f202 	mul.w	r2, r1, r2
 8003ede:	1a9b      	subs	r3, r3, r2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d001      	beq.n	8003ee8 <osPoolFree+0x4e>
    return osErrorParameter;
 8003ee4:	2380      	movs	r3, #128	@ 0x80
 8003ee6:	e013      	b.n	8003f10 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef2:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d301      	bcc.n	8003f02 <osPoolFree+0x68>
    return osErrorParameter;
 8003efe:	2380      	movs	r3, #128	@ 0x80
 8003f00:	e006      	b.n	8003f10 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	4413      	add	r3, r2
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8003f1c:	b590      	push	{r4, r7, lr}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af02      	add	r7, sp, #8
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d011      	beq.n	8003f52 <osMessageCreate+0x36>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00d      	beq.n	8003f52 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6818      	ldr	r0, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6859      	ldr	r1, [r3, #4]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689a      	ldr	r2, [r3, #8]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	2400      	movs	r4, #0
 8003f48:	9400      	str	r4, [sp, #0]
 8003f4a:	f000 fa63 	bl	8004414 <xQueueGenericCreateStatic>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	e008      	b.n	8003f64 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6818      	ldr	r0, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	f000 fad6 	bl	800450e <xQueueGenericCreate>
 8003f62:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd90      	pop	{r4, r7, pc}

08003f6c <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8003f6c:	b590      	push	{r4, r7, lr}
 8003f6e:	b087      	sub	sp, #28
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	613b      	str	r3, [r7, #16]
 8003f82:	2300      	movs	r3, #0
 8003f84:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689c      	ldr	r4, [r3, #8]
 8003f8a:	200c      	movs	r0, #12
 8003f8c:	f002 fbae 	bl	80066ec <pvPortMalloc>
 8003f90:	4603      	mov	r3, r0
 8003f92:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <osMailCreate+0x36>
    return NULL;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	e038      	b.n	8004014 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6818      	ldr	r0, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	681c      	ldr	r4, [r3, #0]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	2104      	movs	r1, #4
 8003fba:	f000 faa8 	bl	800450e <xQueueGenericCreate>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d107      	bne.n	8003fde <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f002 fc57 	bl	8006888 <vPortFree>
    return NULL;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	e01a      	b.n	8004014 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	681c      	ldr	r4, [r3, #0]
 8003fe4:	f107 030c 	add.w	r3, r7, #12
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7ff fe97 	bl	8003d1c <osPoolCreate>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d107      	bne.n	800400e <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4618      	mov	r0, r3
 8004006:	f002 fc3f 	bl	8006888 <vPortFree>
    return NULL;
 800400a:	2300      	movs	r3, #0
 800400c:	e002      	b.n	8004014 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8004014:	4618      	mov	r0, r3
 8004016:	371c      	adds	r7, #28
 8004018:	46bd      	mov	sp, r7
 800401a:	bd90      	pop	{r4, r7, pc}

0800401c <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d101      	bne.n	8004030 <osMailAlloc+0x14>
    return NULL;
 800402c:	2300      	movs	r3, #0
 800402e:	e006      	b.n	800403e <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	4618      	mov	r0, r3
 8004036:	f7ff fece 	bl	8003dd6 <osPoolAlloc>
 800403a:	60f8      	str	r0, [r7, #12]
  
  return p;
 800403c:	68fb      	ldr	r3, [r7, #12]
}
 800403e:	4618      	mov	r0, r3
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
	...

08004048 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <osMailPut+0x14>
    return osErrorParameter;
 8004058:	2380      	movs	r3, #128	@ 0x80
 800405a:	e02c      	b.n	80040b6 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 800405c:	2300      	movs	r3, #0
 800405e:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8004060:	f7ff fd46 	bl	8003af0 <inHandlerMode>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d018      	beq.n	800409c <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6858      	ldr	r0, [r3, #4]
 800406e:	f107 020c 	add.w	r2, r7, #12
 8004072:	4639      	mov	r1, r7
 8004074:	2300      	movs	r3, #0
 8004076:	f000 fbf3 	bl	8004860 <xQueueGenericSendFromISR>
 800407a:	4603      	mov	r3, r0
 800407c:	2b01      	cmp	r3, #1
 800407e:	d001      	beq.n	8004084 <osMailPut+0x3c>
      return osErrorOS;
 8004080:	23ff      	movs	r3, #255	@ 0xff
 8004082:	e018      	b.n	80040b6 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d014      	beq.n	80040b4 <osMailPut+0x6c>
 800408a:	4b0d      	ldr	r3, [pc, #52]	@ (80040c0 <osMailPut+0x78>)
 800408c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	f3bf 8f4f 	dsb	sy
 8004096:	f3bf 8f6f 	isb	sy
 800409a:	e00b      	b.n	80040b4 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6858      	ldr	r0, [r3, #4]
 80040a0:	4639      	mov	r1, r7
 80040a2:	2300      	movs	r3, #0
 80040a4:	2200      	movs	r2, #0
 80040a6:	f000 fad9 	bl	800465c <xQueueGenericSend>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d001      	beq.n	80040b4 <osMailPut+0x6c>
      return osErrorOS;
 80040b0:	23ff      	movs	r3, #255	@ 0xff
 80040b2:	e000      	b.n	80040b6 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	e000ed04 	.word	0xe000ed04

080040c4 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 80040c4:	b590      	push	{r4, r7, lr}
 80040c6:	b08b      	sub	sp, #44	@ 0x2c
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10a      	bne.n	80040f0 <osMailGet+0x2c>
    event.status = osErrorParameter;
 80040da:	2380      	movs	r3, #128	@ 0x80
 80040dc:	617b      	str	r3, [r7, #20]
    return event;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	461c      	mov	r4, r3
 80040e2:	f107 0314 	add.w	r3, r7, #20
 80040e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80040ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80040ee:	e056      	b.n	800419e <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80040f0:	2300      	movs	r3, #0
 80040f2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80040f4:	2300      	movs	r3, #0
 80040f6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fe:	d103      	bne.n	8004108 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8004100:	f04f 33ff 	mov.w	r3, #4294967295
 8004104:	627b      	str	r3, [r7, #36]	@ 0x24
 8004106:	e009      	b.n	800411c <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d006      	beq.n	800411c <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8004112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004114:	2b00      	cmp	r3, #0
 8004116:	d101      	bne.n	800411c <osMailGet+0x58>
      ticks = 1;
 8004118:	2301      	movs	r3, #1
 800411a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800411c:	f7ff fce8 	bl	8003af0 <inHandlerMode>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d01d      	beq.n	8004162 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	6858      	ldr	r0, [r3, #4]
 800412a:	f107 0220 	add.w	r2, r7, #32
 800412e:	f107 0314 	add.w	r3, r7, #20
 8004132:	3304      	adds	r3, #4
 8004134:	4619      	mov	r1, r3
 8004136:	f000 feb3 	bl	8004ea0 <xQueueReceiveFromISR>
 800413a:	4603      	mov	r3, r0
 800413c:	2b01      	cmp	r3, #1
 800413e:	d102      	bne.n	8004146 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8004140:	2320      	movs	r3, #32
 8004142:	617b      	str	r3, [r7, #20]
 8004144:	e001      	b.n	800414a <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8004146:	2300      	movs	r3, #0
 8004148:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800414a:	6a3b      	ldr	r3, [r7, #32]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d01e      	beq.n	800418e <osMailGet+0xca>
 8004150:	4b15      	ldr	r3, [pc, #84]	@ (80041a8 <osMailGet+0xe4>)
 8004152:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	f3bf 8f4f 	dsb	sy
 800415c:	f3bf 8f6f 	isb	sy
 8004160:	e015      	b.n	800418e <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	6858      	ldr	r0, [r3, #4]
 8004166:	f107 0314 	add.w	r3, r7, #20
 800416a:	3304      	adds	r3, #4
 800416c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800416e:	4619      	mov	r1, r3
 8004170:	f000 fca4 	bl	8004abc <xQueueReceive>
 8004174:	4603      	mov	r3, r0
 8004176:	2b01      	cmp	r3, #1
 8004178:	d102      	bne.n	8004180 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 800417a:	2320      	movs	r3, #32
 800417c:	617b      	str	r3, [r7, #20]
 800417e:	e006      	b.n	800418e <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <osMailGet+0xc6>
 8004186:	2300      	movs	r3, #0
 8004188:	e000      	b.n	800418c <osMailGet+0xc8>
 800418a:	2340      	movs	r3, #64	@ 0x40
 800418c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	461c      	mov	r4, r3
 8004192:	f107 0314 	add.w	r3, r7, #20
 8004196:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800419a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	372c      	adds	r7, #44	@ 0x2c
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd90      	pop	{r4, r7, pc}
 80041a6:	bf00      	nop
 80041a8:	e000ed04 	.word	0xe000ed04

080041ac <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d101      	bne.n	80041c0 <osMailFree+0x14>
    return osErrorParameter;
 80041bc:	2380      	movs	r3, #128	@ 0x80
 80041be:	e006      	b.n	80041ce <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	6839      	ldr	r1, [r7, #0]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7ff fe67 	bl	8003e9a <osPoolFree>
 80041cc:	4603      	mov	r3, r0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f103 0208 	add.w	r2, r3, #8
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f04f 32ff 	mov.w	r2, #4294967295
 80041ee:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f103 0208 	add.w	r2, r3, #8
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f103 0208 	add.w	r2, r3, #8
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800420a:	bf00      	nop
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004216:	b480      	push	{r7}
 8004218:	b083      	sub	sp, #12
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	689a      	ldr	r2, [r3, #8]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	601a      	str	r2, [r3, #0]
}
 800426c:	bf00      	nop
 800426e:	3714      	adds	r7, #20
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800428e:	d103      	bne.n	8004298 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	60fb      	str	r3, [r7, #12]
 8004296:	e00c      	b.n	80042b2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3308      	adds	r3, #8
 800429c:	60fb      	str	r3, [r7, #12]
 800429e:	e002      	b.n	80042a6 <vListInsert+0x2e>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	60fb      	str	r3, [r7, #12]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d2f6      	bcs.n	80042a0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	1c5a      	adds	r2, r3, #1
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	601a      	str	r2, [r3, #0]
}
 80042de:	bf00      	nop
 80042e0:	3714      	adds	r7, #20
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr

080042ea <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80042ea:	b480      	push	{r7}
 80042ec:	b085      	sub	sp, #20
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	6892      	ldr	r2, [r2, #8]
 8004300:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6852      	ldr	r2, [r2, #4]
 800430a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	429a      	cmp	r2, r3
 8004314:	d103      	bne.n	800431e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	689a      	ldr	r2, [r3, #8]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	1e5a      	subs	r2, r3, #1
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
}
 8004332:	4618      	mov	r0, r3
 8004334:	3714      	adds	r7, #20
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
	...

08004340 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10b      	bne.n	800436c <xQueueGenericReset+0x2c>
	__asm volatile
 8004354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004358:	f383 8811 	msr	BASEPRI, r3
 800435c:	f3bf 8f6f 	isb	sy
 8004360:	f3bf 8f4f 	dsb	sy
 8004364:	60bb      	str	r3, [r7, #8]
}
 8004366:	bf00      	nop
 8004368:	bf00      	nop
 800436a:	e7fd      	b.n	8004368 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800436c:	f002 f89c 	bl	80064a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004378:	68f9      	ldr	r1, [r7, #12]
 800437a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800437c:	fb01 f303 	mul.w	r3, r1, r3
 8004380:	441a      	add	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800439c:	3b01      	subs	r3, #1
 800439e:	68f9      	ldr	r1, [r7, #12]
 80043a0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80043a2:	fb01 f303 	mul.w	r3, r1, r3
 80043a6:	441a      	add	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	22ff      	movs	r2, #255	@ 0xff
 80043b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	22ff      	movs	r2, #255	@ 0xff
 80043b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d114      	bne.n	80043ec <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d01a      	beq.n	8004400 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	3310      	adds	r3, #16
 80043ce:	4618      	mov	r0, r3
 80043d0:	f001 fb50 	bl	8005a74 <xTaskRemoveFromEventList>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d012      	beq.n	8004400 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80043da:	4b0d      	ldr	r3, [pc, #52]	@ (8004410 <xQueueGenericReset+0xd0>)
 80043dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	f3bf 8f4f 	dsb	sy
 80043e6:	f3bf 8f6f 	isb	sy
 80043ea:	e009      	b.n	8004400 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	3310      	adds	r3, #16
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7ff fef0 	bl	80041d6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	3324      	adds	r3, #36	@ 0x24
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7ff feeb 	bl	80041d6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004400:	f002 f884 	bl	800650c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004404:	2301      	movs	r3, #1
}
 8004406:	4618      	mov	r0, r3
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	e000ed04 	.word	0xe000ed04

08004414 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004414:	b580      	push	{r7, lr}
 8004416:	b08e      	sub	sp, #56	@ 0x38
 8004418:	af02      	add	r7, sp, #8
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
 8004420:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10b      	bne.n	8004440 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800442c:	f383 8811 	msr	BASEPRI, r3
 8004430:	f3bf 8f6f 	isb	sy
 8004434:	f3bf 8f4f 	dsb	sy
 8004438:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800443a:	bf00      	nop
 800443c:	bf00      	nop
 800443e:	e7fd      	b.n	800443c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10b      	bne.n	800445e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800444a:	f383 8811 	msr	BASEPRI, r3
 800444e:	f3bf 8f6f 	isb	sy
 8004452:	f3bf 8f4f 	dsb	sy
 8004456:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004458:	bf00      	nop
 800445a:	bf00      	nop
 800445c:	e7fd      	b.n	800445a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d002      	beq.n	800446a <xQueueGenericCreateStatic+0x56>
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <xQueueGenericCreateStatic+0x5a>
 800446a:	2301      	movs	r3, #1
 800446c:	e000      	b.n	8004470 <xQueueGenericCreateStatic+0x5c>
 800446e:	2300      	movs	r3, #0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10b      	bne.n	800448c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004478:	f383 8811 	msr	BASEPRI, r3
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	623b      	str	r3, [r7, #32]
}
 8004486:	bf00      	nop
 8004488:	bf00      	nop
 800448a:	e7fd      	b.n	8004488 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d102      	bne.n	8004498 <xQueueGenericCreateStatic+0x84>
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <xQueueGenericCreateStatic+0x88>
 8004498:	2301      	movs	r3, #1
 800449a:	e000      	b.n	800449e <xQueueGenericCreateStatic+0x8a>
 800449c:	2300      	movs	r3, #0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10b      	bne.n	80044ba <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80044a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044a6:	f383 8811 	msr	BASEPRI, r3
 80044aa:	f3bf 8f6f 	isb	sy
 80044ae:	f3bf 8f4f 	dsb	sy
 80044b2:	61fb      	str	r3, [r7, #28]
}
 80044b4:	bf00      	nop
 80044b6:	bf00      	nop
 80044b8:	e7fd      	b.n	80044b6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80044ba:	2348      	movs	r3, #72	@ 0x48
 80044bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	2b48      	cmp	r3, #72	@ 0x48
 80044c2:	d00b      	beq.n	80044dc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80044c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c8:	f383 8811 	msr	BASEPRI, r3
 80044cc:	f3bf 8f6f 	isb	sy
 80044d0:	f3bf 8f4f 	dsb	sy
 80044d4:	61bb      	str	r3, [r7, #24]
}
 80044d6:	bf00      	nop
 80044d8:	bf00      	nop
 80044da:	e7fd      	b.n	80044d8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80044dc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80044e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00d      	beq.n	8004504 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80044e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80044f0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80044f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	4613      	mov	r3, r2
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	68b9      	ldr	r1, [r7, #8]
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 f840 	bl	8004584 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004506:	4618      	mov	r0, r3
 8004508:	3730      	adds	r7, #48	@ 0x30
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800450e:	b580      	push	{r7, lr}
 8004510:	b08a      	sub	sp, #40	@ 0x28
 8004512:	af02      	add	r7, sp, #8
 8004514:	60f8      	str	r0, [r7, #12]
 8004516:	60b9      	str	r1, [r7, #8]
 8004518:	4613      	mov	r3, r2
 800451a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10b      	bne.n	800453a <xQueueGenericCreate+0x2c>
	__asm volatile
 8004522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004526:	f383 8811 	msr	BASEPRI, r3
 800452a:	f3bf 8f6f 	isb	sy
 800452e:	f3bf 8f4f 	dsb	sy
 8004532:	613b      	str	r3, [r7, #16]
}
 8004534:	bf00      	nop
 8004536:	bf00      	nop
 8004538:	e7fd      	b.n	8004536 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	fb02 f303 	mul.w	r3, r2, r3
 8004542:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	3348      	adds	r3, #72	@ 0x48
 8004548:	4618      	mov	r0, r3
 800454a:	f002 f8cf 	bl	80066ec <pvPortMalloc>
 800454e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d011      	beq.n	800457a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	3348      	adds	r3, #72	@ 0x48
 800455e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004568:	79fa      	ldrb	r2, [r7, #7]
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	4613      	mov	r3, r2
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	68b9      	ldr	r1, [r7, #8]
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f000 f805 	bl	8004584 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800457a:	69bb      	ldr	r3, [r7, #24]
	}
 800457c:	4618      	mov	r0, r3
 800457e:	3720      	adds	r7, #32
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
 8004590:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d103      	bne.n	80045a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	601a      	str	r2, [r3, #0]
 800459e:	e002      	b.n	80045a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80045b2:	2101      	movs	r1, #1
 80045b4:	69b8      	ldr	r0, [r7, #24]
 80045b6:	f7ff fec3 	bl	8004340 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80045ba:	bf00      	nop
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b082      	sub	sp, #8
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00e      	beq.n	80045ee <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80045e2:	2300      	movs	r3, #0
 80045e4:	2200      	movs	r2, #0
 80045e6:	2100      	movs	r1, #0
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 f837 	bl	800465c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80045ee:	bf00      	nop
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b086      	sub	sp, #24
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	4603      	mov	r3, r0
 80045fe:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004600:	2301      	movs	r3, #1
 8004602:	617b      	str	r3, [r7, #20]
 8004604:	2300      	movs	r3, #0
 8004606:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004608:	79fb      	ldrb	r3, [r7, #7]
 800460a:	461a      	mov	r2, r3
 800460c:	6939      	ldr	r1, [r7, #16]
 800460e:	6978      	ldr	r0, [r7, #20]
 8004610:	f7ff ff7d 	bl	800450e <xQueueGenericCreate>
 8004614:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f7ff ffd3 	bl	80045c2 <prvInitialiseMutex>

		return xNewQueue;
 800461c:	68fb      	ldr	r3, [r7, #12]
	}
 800461e:	4618      	mov	r0, r3
 8004620:	3718      	adds	r7, #24
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004626:	b580      	push	{r7, lr}
 8004628:	b088      	sub	sp, #32
 800462a:	af02      	add	r7, sp, #8
 800462c:	4603      	mov	r3, r0
 800462e:	6039      	str	r1, [r7, #0]
 8004630:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004632:	2301      	movs	r3, #1
 8004634:	617b      	str	r3, [r7, #20]
 8004636:	2300      	movs	r3, #0
 8004638:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800463a:	79fb      	ldrb	r3, [r7, #7]
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2200      	movs	r2, #0
 8004642:	6939      	ldr	r1, [r7, #16]
 8004644:	6978      	ldr	r0, [r7, #20]
 8004646:	f7ff fee5 	bl	8004414 <xQueueGenericCreateStatic>
 800464a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f7ff ffb8 	bl	80045c2 <prvInitialiseMutex>

		return xNewQueue;
 8004652:	68fb      	ldr	r3, [r7, #12]
	}
 8004654:	4618      	mov	r0, r3
 8004656:	3718      	adds	r7, #24
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b08e      	sub	sp, #56	@ 0x38
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
 8004668:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800466a:	2300      	movs	r3, #0
 800466c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10b      	bne.n	8004690 <xQueueGenericSend+0x34>
	__asm volatile
 8004678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800467c:	f383 8811 	msr	BASEPRI, r3
 8004680:	f3bf 8f6f 	isb	sy
 8004684:	f3bf 8f4f 	dsb	sy
 8004688:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800468a:	bf00      	nop
 800468c:	bf00      	nop
 800468e:	e7fd      	b.n	800468c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d103      	bne.n	800469e <xQueueGenericSend+0x42>
 8004696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <xQueueGenericSend+0x46>
 800469e:	2301      	movs	r3, #1
 80046a0:	e000      	b.n	80046a4 <xQueueGenericSend+0x48>
 80046a2:	2300      	movs	r3, #0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10b      	bne.n	80046c0 <xQueueGenericSend+0x64>
	__asm volatile
 80046a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ac:	f383 8811 	msr	BASEPRI, r3
 80046b0:	f3bf 8f6f 	isb	sy
 80046b4:	f3bf 8f4f 	dsb	sy
 80046b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80046ba:	bf00      	nop
 80046bc:	bf00      	nop
 80046be:	e7fd      	b.n	80046bc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d103      	bne.n	80046ce <xQueueGenericSend+0x72>
 80046c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d101      	bne.n	80046d2 <xQueueGenericSend+0x76>
 80046ce:	2301      	movs	r3, #1
 80046d0:	e000      	b.n	80046d4 <xQueueGenericSend+0x78>
 80046d2:	2300      	movs	r3, #0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10b      	bne.n	80046f0 <xQueueGenericSend+0x94>
	__asm volatile
 80046d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	623b      	str	r3, [r7, #32]
}
 80046ea:	bf00      	nop
 80046ec:	bf00      	nop
 80046ee:	e7fd      	b.n	80046ec <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046f0:	f001 fb86 	bl	8005e00 <xTaskGetSchedulerState>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d102      	bne.n	8004700 <xQueueGenericSend+0xa4>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d101      	bne.n	8004704 <xQueueGenericSend+0xa8>
 8004700:	2301      	movs	r3, #1
 8004702:	e000      	b.n	8004706 <xQueueGenericSend+0xaa>
 8004704:	2300      	movs	r3, #0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10b      	bne.n	8004722 <xQueueGenericSend+0xc6>
	__asm volatile
 800470a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800470e:	f383 8811 	msr	BASEPRI, r3
 8004712:	f3bf 8f6f 	isb	sy
 8004716:	f3bf 8f4f 	dsb	sy
 800471a:	61fb      	str	r3, [r7, #28]
}
 800471c:	bf00      	nop
 800471e:	bf00      	nop
 8004720:	e7fd      	b.n	800471e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004722:	f001 fec1 	bl	80064a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004728:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800472a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800472c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800472e:	429a      	cmp	r2, r3
 8004730:	d302      	bcc.n	8004738 <xQueueGenericSend+0xdc>
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b02      	cmp	r3, #2
 8004736:	d129      	bne.n	800478c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	68b9      	ldr	r1, [r7, #8]
 800473c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800473e:	f000 fc49 	bl	8004fd4 <prvCopyDataToQueue>
 8004742:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004748:	2b00      	cmp	r3, #0
 800474a:	d010      	beq.n	800476e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800474c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800474e:	3324      	adds	r3, #36	@ 0x24
 8004750:	4618      	mov	r0, r3
 8004752:	f001 f98f 	bl	8005a74 <xTaskRemoveFromEventList>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d013      	beq.n	8004784 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800475c:	4b3f      	ldr	r3, [pc, #252]	@ (800485c <xQueueGenericSend+0x200>)
 800475e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	f3bf 8f4f 	dsb	sy
 8004768:	f3bf 8f6f 	isb	sy
 800476c:	e00a      	b.n	8004784 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800476e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004770:	2b00      	cmp	r3, #0
 8004772:	d007      	beq.n	8004784 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004774:	4b39      	ldr	r3, [pc, #228]	@ (800485c <xQueueGenericSend+0x200>)
 8004776:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800477a:	601a      	str	r2, [r3, #0]
 800477c:	f3bf 8f4f 	dsb	sy
 8004780:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004784:	f001 fec2 	bl	800650c <vPortExitCritical>
				return pdPASS;
 8004788:	2301      	movs	r3, #1
 800478a:	e063      	b.n	8004854 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d103      	bne.n	800479a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004792:	f001 febb 	bl	800650c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004796:	2300      	movs	r3, #0
 8004798:	e05c      	b.n	8004854 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800479a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800479c:	2b00      	cmp	r3, #0
 800479e:	d106      	bne.n	80047ae <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047a0:	f107 0314 	add.w	r3, r7, #20
 80047a4:	4618      	mov	r0, r3
 80047a6:	f001 f9c9 	bl	8005b3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047aa:	2301      	movs	r3, #1
 80047ac:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047ae:	f001 fead 	bl	800650c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047b2:	f000 ff6f 	bl	8005694 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047b6:	f001 fe77 	bl	80064a8 <vPortEnterCritical>
 80047ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80047c0:	b25b      	sxtb	r3, r3
 80047c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c6:	d103      	bne.n	80047d0 <xQueueGenericSend+0x174>
 80047c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80047d6:	b25b      	sxtb	r3, r3
 80047d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047dc:	d103      	bne.n	80047e6 <xQueueGenericSend+0x18a>
 80047de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80047e6:	f001 fe91 	bl	800650c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047ea:	1d3a      	adds	r2, r7, #4
 80047ec:	f107 0314 	add.w	r3, r7, #20
 80047f0:	4611      	mov	r1, r2
 80047f2:	4618      	mov	r0, r3
 80047f4:	f001 f9b8 	bl	8005b68 <xTaskCheckForTimeOut>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d124      	bne.n	8004848 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80047fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004800:	f000 fce0 	bl	80051c4 <prvIsQueueFull>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d018      	beq.n	800483c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800480a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800480c:	3310      	adds	r3, #16
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	4611      	mov	r1, r2
 8004812:	4618      	mov	r0, r3
 8004814:	f001 f908 	bl	8005a28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004818:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800481a:	f000 fc6b 	bl	80050f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800481e:	f000 ff47 	bl	80056b0 <xTaskResumeAll>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	f47f af7c 	bne.w	8004722 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800482a:	4b0c      	ldr	r3, [pc, #48]	@ (800485c <xQueueGenericSend+0x200>)
 800482c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	f3bf 8f4f 	dsb	sy
 8004836:	f3bf 8f6f 	isb	sy
 800483a:	e772      	b.n	8004722 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800483c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800483e:	f000 fc59 	bl	80050f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004842:	f000 ff35 	bl	80056b0 <xTaskResumeAll>
 8004846:	e76c      	b.n	8004722 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004848:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800484a:	f000 fc53 	bl	80050f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800484e:	f000 ff2f 	bl	80056b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004852:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004854:	4618      	mov	r0, r3
 8004856:	3738      	adds	r7, #56	@ 0x38
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	e000ed04 	.word	0xe000ed04

08004860 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b090      	sub	sp, #64	@ 0x40
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
 800486c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10b      	bne.n	8004890 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800487c:	f383 8811 	msr	BASEPRI, r3
 8004880:	f3bf 8f6f 	isb	sy
 8004884:	f3bf 8f4f 	dsb	sy
 8004888:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800488a:	bf00      	nop
 800488c:	bf00      	nop
 800488e:	e7fd      	b.n	800488c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d103      	bne.n	800489e <xQueueGenericSendFromISR+0x3e>
 8004896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <xQueueGenericSendFromISR+0x42>
 800489e:	2301      	movs	r3, #1
 80048a0:	e000      	b.n	80048a4 <xQueueGenericSendFromISR+0x44>
 80048a2:	2300      	movs	r3, #0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10b      	bne.n	80048c0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80048a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ac:	f383 8811 	msr	BASEPRI, r3
 80048b0:	f3bf 8f6f 	isb	sy
 80048b4:	f3bf 8f4f 	dsb	sy
 80048b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80048ba:	bf00      	nop
 80048bc:	bf00      	nop
 80048be:	e7fd      	b.n	80048bc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d103      	bne.n	80048ce <xQueueGenericSendFromISR+0x6e>
 80048c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d101      	bne.n	80048d2 <xQueueGenericSendFromISR+0x72>
 80048ce:	2301      	movs	r3, #1
 80048d0:	e000      	b.n	80048d4 <xQueueGenericSendFromISR+0x74>
 80048d2:	2300      	movs	r3, #0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10b      	bne.n	80048f0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80048d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048dc:	f383 8811 	msr	BASEPRI, r3
 80048e0:	f3bf 8f6f 	isb	sy
 80048e4:	f3bf 8f4f 	dsb	sy
 80048e8:	623b      	str	r3, [r7, #32]
}
 80048ea:	bf00      	nop
 80048ec:	bf00      	nop
 80048ee:	e7fd      	b.n	80048ec <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80048f0:	f001 feba 	bl	8006668 <vPortValidateInterruptPriority>
	__asm volatile
 80048f4:	f3ef 8211 	mrs	r2, BASEPRI
 80048f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048fc:	f383 8811 	msr	BASEPRI, r3
 8004900:	f3bf 8f6f 	isb	sy
 8004904:	f3bf 8f4f 	dsb	sy
 8004908:	61fa      	str	r2, [r7, #28]
 800490a:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800490c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800490e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004912:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004918:	429a      	cmp	r2, r3
 800491a:	d302      	bcc.n	8004922 <xQueueGenericSendFromISR+0xc2>
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	2b02      	cmp	r3, #2
 8004920:	d12f      	bne.n	8004982 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004924:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004928:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800492c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800492e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004930:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	68b9      	ldr	r1, [r7, #8]
 8004936:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004938:	f000 fb4c 	bl	8004fd4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800493c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004944:	d112      	bne.n	800496c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800494a:	2b00      	cmp	r3, #0
 800494c:	d016      	beq.n	800497c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800494e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004950:	3324      	adds	r3, #36	@ 0x24
 8004952:	4618      	mov	r0, r3
 8004954:	f001 f88e 	bl	8005a74 <xTaskRemoveFromEventList>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00e      	beq.n	800497c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00b      	beq.n	800497c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	601a      	str	r2, [r3, #0]
 800496a:	e007      	b.n	800497c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800496c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004970:	3301      	adds	r3, #1
 8004972:	b2db      	uxtb	r3, r3
 8004974:	b25a      	sxtb	r2, r3
 8004976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004978:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800497c:	2301      	movs	r3, #1
 800497e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004980:	e001      	b.n	8004986 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004982:	2300      	movs	r3, #0
 8004984:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004988:	617b      	str	r3, [r7, #20]
	__asm volatile
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f383 8811 	msr	BASEPRI, r3
}
 8004990:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004992:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004994:	4618      	mov	r0, r3
 8004996:	3740      	adds	r7, #64	@ 0x40
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b08e      	sub	sp, #56	@ 0x38
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80049aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10b      	bne.n	80049c8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80049b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	623b      	str	r3, [r7, #32]
}
 80049c2:	bf00      	nop
 80049c4:	bf00      	nop
 80049c6:	e7fd      	b.n	80049c4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80049c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00b      	beq.n	80049e8 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80049d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049d4:	f383 8811 	msr	BASEPRI, r3
 80049d8:	f3bf 8f6f 	isb	sy
 80049dc:	f3bf 8f4f 	dsb	sy
 80049e0:	61fb      	str	r3, [r7, #28]
}
 80049e2:	bf00      	nop
 80049e4:	bf00      	nop
 80049e6:	e7fd      	b.n	80049e4 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80049e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d103      	bne.n	80049f8 <xQueueGiveFromISR+0x5c>
 80049f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <xQueueGiveFromISR+0x60>
 80049f8:	2301      	movs	r3, #1
 80049fa:	e000      	b.n	80049fe <xQueueGiveFromISR+0x62>
 80049fc:	2300      	movs	r3, #0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10b      	bne.n	8004a1a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8004a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a06:	f383 8811 	msr	BASEPRI, r3
 8004a0a:	f3bf 8f6f 	isb	sy
 8004a0e:	f3bf 8f4f 	dsb	sy
 8004a12:	61bb      	str	r3, [r7, #24]
}
 8004a14:	bf00      	nop
 8004a16:	bf00      	nop
 8004a18:	e7fd      	b.n	8004a16 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a1a:	f001 fe25 	bl	8006668 <vPortValidateInterruptPriority>
	__asm volatile
 8004a1e:	f3ef 8211 	mrs	r2, BASEPRI
 8004a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a26:	f383 8811 	msr	BASEPRI, r3
 8004a2a:	f3bf 8f6f 	isb	sy
 8004a2e:	f3bf 8f4f 	dsb	sy
 8004a32:	617a      	str	r2, [r7, #20]
 8004a34:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004a36:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a3e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d22b      	bcs.n	8004aa2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a56:	1c5a      	adds	r2, r3, #1
 8004a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a5a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004a5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a64:	d112      	bne.n	8004a8c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d016      	beq.n	8004a9c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a70:	3324      	adds	r3, #36	@ 0x24
 8004a72:	4618      	mov	r0, r3
 8004a74:	f000 fffe 	bl	8005a74 <xTaskRemoveFromEventList>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00e      	beq.n	8004a9c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00b      	beq.n	8004a9c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	2201      	movs	r2, #1
 8004a88:	601a      	str	r2, [r3, #0]
 8004a8a:	e007      	b.n	8004a9c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a90:	3301      	adds	r3, #1
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	b25a      	sxtb	r2, r3
 8004a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004aa0:	e001      	b.n	8004aa6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aa8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f383 8811 	msr	BASEPRI, r3
}
 8004ab0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3738      	adds	r7, #56	@ 0x38
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b08c      	sub	sp, #48	@ 0x30
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10b      	bne.n	8004aee <xQueueReceive+0x32>
	__asm volatile
 8004ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ada:	f383 8811 	msr	BASEPRI, r3
 8004ade:	f3bf 8f6f 	isb	sy
 8004ae2:	f3bf 8f4f 	dsb	sy
 8004ae6:	623b      	str	r3, [r7, #32]
}
 8004ae8:	bf00      	nop
 8004aea:	bf00      	nop
 8004aec:	e7fd      	b.n	8004aea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d103      	bne.n	8004afc <xQueueReceive+0x40>
 8004af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d101      	bne.n	8004b00 <xQueueReceive+0x44>
 8004afc:	2301      	movs	r3, #1
 8004afe:	e000      	b.n	8004b02 <xQueueReceive+0x46>
 8004b00:	2300      	movs	r3, #0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d10b      	bne.n	8004b1e <xQueueReceive+0x62>
	__asm volatile
 8004b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b0a:	f383 8811 	msr	BASEPRI, r3
 8004b0e:	f3bf 8f6f 	isb	sy
 8004b12:	f3bf 8f4f 	dsb	sy
 8004b16:	61fb      	str	r3, [r7, #28]
}
 8004b18:	bf00      	nop
 8004b1a:	bf00      	nop
 8004b1c:	e7fd      	b.n	8004b1a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b1e:	f001 f96f 	bl	8005e00 <xTaskGetSchedulerState>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d102      	bne.n	8004b2e <xQueueReceive+0x72>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <xQueueReceive+0x76>
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e000      	b.n	8004b34 <xQueueReceive+0x78>
 8004b32:	2300      	movs	r3, #0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10b      	bne.n	8004b50 <xQueueReceive+0x94>
	__asm volatile
 8004b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b3c:	f383 8811 	msr	BASEPRI, r3
 8004b40:	f3bf 8f6f 	isb	sy
 8004b44:	f3bf 8f4f 	dsb	sy
 8004b48:	61bb      	str	r3, [r7, #24]
}
 8004b4a:	bf00      	nop
 8004b4c:	bf00      	nop
 8004b4e:	e7fd      	b.n	8004b4c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b50:	f001 fcaa 	bl	80064a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b58:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d01f      	beq.n	8004ba0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b60:	68b9      	ldr	r1, [r7, #8]
 8004b62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b64:	f000 faa0 	bl	80050a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6a:	1e5a      	subs	r2, r3, #1
 8004b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b6e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00f      	beq.n	8004b98 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b7a:	3310      	adds	r3, #16
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f000 ff79 	bl	8005a74 <xTaskRemoveFromEventList>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d007      	beq.n	8004b98 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004b88:	4b3c      	ldr	r3, [pc, #240]	@ (8004c7c <xQueueReceive+0x1c0>)
 8004b8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b8e:	601a      	str	r2, [r3, #0]
 8004b90:	f3bf 8f4f 	dsb	sy
 8004b94:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b98:	f001 fcb8 	bl	800650c <vPortExitCritical>
				return pdPASS;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e069      	b.n	8004c74 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d103      	bne.n	8004bae <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ba6:	f001 fcb1 	bl	800650c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004baa:	2300      	movs	r3, #0
 8004bac:	e062      	b.n	8004c74 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d106      	bne.n	8004bc2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004bb4:	f107 0310 	add.w	r3, r7, #16
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f000 ffbf 	bl	8005b3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bc2:	f001 fca3 	bl	800650c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004bc6:	f000 fd65 	bl	8005694 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bca:	f001 fc6d 	bl	80064a8 <vPortEnterCritical>
 8004bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004bd4:	b25b      	sxtb	r3, r3
 8004bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bda:	d103      	bne.n	8004be4 <xQueueReceive+0x128>
 8004bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004bea:	b25b      	sxtb	r3, r3
 8004bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf0:	d103      	bne.n	8004bfa <xQueueReceive+0x13e>
 8004bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004bfa:	f001 fc87 	bl	800650c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004bfe:	1d3a      	adds	r2, r7, #4
 8004c00:	f107 0310 	add.w	r3, r7, #16
 8004c04:	4611      	mov	r1, r2
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 ffae 	bl	8005b68 <xTaskCheckForTimeOut>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d123      	bne.n	8004c5a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c14:	f000 fac0 	bl	8005198 <prvIsQueueEmpty>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d017      	beq.n	8004c4e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c20:	3324      	adds	r3, #36	@ 0x24
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	4611      	mov	r1, r2
 8004c26:	4618      	mov	r0, r3
 8004c28:	f000 fefe 	bl	8005a28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c2e:	f000 fa61 	bl	80050f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c32:	f000 fd3d 	bl	80056b0 <xTaskResumeAll>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d189      	bne.n	8004b50 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8004c7c <xQueueReceive+0x1c0>)
 8004c3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	f3bf 8f6f 	isb	sy
 8004c4c:	e780      	b.n	8004b50 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004c4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c50:	f000 fa50 	bl	80050f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c54:	f000 fd2c 	bl	80056b0 <xTaskResumeAll>
 8004c58:	e77a      	b.n	8004b50 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004c5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c5c:	f000 fa4a 	bl	80050f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c60:	f000 fd26 	bl	80056b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c66:	f000 fa97 	bl	8005198 <prvIsQueueEmpty>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f43f af6f 	beq.w	8004b50 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004c72:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3730      	adds	r7, #48	@ 0x30
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	e000ed04 	.word	0xe000ed04

08004c80 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b08e      	sub	sp, #56	@ 0x38
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004c92:	2300      	movs	r3, #0
 8004c94:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10b      	bne.n	8004cb4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ca0:	f383 8811 	msr	BASEPRI, r3
 8004ca4:	f3bf 8f6f 	isb	sy
 8004ca8:	f3bf 8f4f 	dsb	sy
 8004cac:	623b      	str	r3, [r7, #32]
}
 8004cae:	bf00      	nop
 8004cb0:	bf00      	nop
 8004cb2:	e7fd      	b.n	8004cb0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00b      	beq.n	8004cd4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc0:	f383 8811 	msr	BASEPRI, r3
 8004cc4:	f3bf 8f6f 	isb	sy
 8004cc8:	f3bf 8f4f 	dsb	sy
 8004ccc:	61fb      	str	r3, [r7, #28]
}
 8004cce:	bf00      	nop
 8004cd0:	bf00      	nop
 8004cd2:	e7fd      	b.n	8004cd0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cd4:	f001 f894 	bl	8005e00 <xTaskGetSchedulerState>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d102      	bne.n	8004ce4 <xQueueSemaphoreTake+0x64>
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d101      	bne.n	8004ce8 <xQueueSemaphoreTake+0x68>
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e000      	b.n	8004cea <xQueueSemaphoreTake+0x6a>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10b      	bne.n	8004d06 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf2:	f383 8811 	msr	BASEPRI, r3
 8004cf6:	f3bf 8f6f 	isb	sy
 8004cfa:	f3bf 8f4f 	dsb	sy
 8004cfe:	61bb      	str	r3, [r7, #24]
}
 8004d00:	bf00      	nop
 8004d02:	bf00      	nop
 8004d04:	e7fd      	b.n	8004d02 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d06:	f001 fbcf 	bl	80064a8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d0e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d024      	beq.n	8004d60 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d18:	1e5a      	subs	r2, r3, #1
 8004d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d1c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d104      	bne.n	8004d30 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004d26:	f001 fa17 	bl	8006158 <pvTaskIncrementMutexHeldCount>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d2e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00f      	beq.n	8004d58 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d3a:	3310      	adds	r3, #16
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f000 fe99 	bl	8005a74 <xTaskRemoveFromEventList>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d007      	beq.n	8004d58 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004d48:	4b54      	ldr	r3, [pc, #336]	@ (8004e9c <xQueueSemaphoreTake+0x21c>)
 8004d4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	f3bf 8f4f 	dsb	sy
 8004d54:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004d58:	f001 fbd8 	bl	800650c <vPortExitCritical>
				return pdPASS;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e098      	b.n	8004e92 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d112      	bne.n	8004d8c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00b      	beq.n	8004d84 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d70:	f383 8811 	msr	BASEPRI, r3
 8004d74:	f3bf 8f6f 	isb	sy
 8004d78:	f3bf 8f4f 	dsb	sy
 8004d7c:	617b      	str	r3, [r7, #20]
}
 8004d7e:	bf00      	nop
 8004d80:	bf00      	nop
 8004d82:	e7fd      	b.n	8004d80 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004d84:	f001 fbc2 	bl	800650c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	e082      	b.n	8004e92 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d106      	bne.n	8004da0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d92:	f107 030c 	add.w	r3, r7, #12
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 fed0 	bl	8005b3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004da0:	f001 fbb4 	bl	800650c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004da4:	f000 fc76 	bl	8005694 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004da8:	f001 fb7e 	bl	80064a8 <vPortEnterCritical>
 8004dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004db2:	b25b      	sxtb	r3, r3
 8004db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db8:	d103      	bne.n	8004dc2 <xQueueSemaphoreTake+0x142>
 8004dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dc4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004dc8:	b25b      	sxtb	r3, r3
 8004dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dce:	d103      	bne.n	8004dd8 <xQueueSemaphoreTake+0x158>
 8004dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004dd8:	f001 fb98 	bl	800650c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ddc:	463a      	mov	r2, r7
 8004dde:	f107 030c 	add.w	r3, r7, #12
 8004de2:	4611      	mov	r1, r2
 8004de4:	4618      	mov	r0, r3
 8004de6:	f000 febf 	bl	8005b68 <xTaskCheckForTimeOut>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d132      	bne.n	8004e56 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004df0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004df2:	f000 f9d1 	bl	8005198 <prvIsQueueEmpty>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d026      	beq.n	8004e4a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d109      	bne.n	8004e18 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004e04:	f001 fb50 	bl	80064a8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f001 f815 	bl	8005e3c <xTaskPriorityInherit>
 8004e12:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004e14:	f001 fb7a 	bl	800650c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e1a:	3324      	adds	r3, #36	@ 0x24
 8004e1c:	683a      	ldr	r2, [r7, #0]
 8004e1e:	4611      	mov	r1, r2
 8004e20:	4618      	mov	r0, r3
 8004e22:	f000 fe01 	bl	8005a28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e28:	f000 f964 	bl	80050f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e2c:	f000 fc40 	bl	80056b0 <xTaskResumeAll>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f47f af67 	bne.w	8004d06 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004e38:	4b18      	ldr	r3, [pc, #96]	@ (8004e9c <xQueueSemaphoreTake+0x21c>)
 8004e3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e3e:	601a      	str	r2, [r3, #0]
 8004e40:	f3bf 8f4f 	dsb	sy
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	e75d      	b.n	8004d06 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004e4a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e4c:	f000 f952 	bl	80050f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e50:	f000 fc2e 	bl	80056b0 <xTaskResumeAll>
 8004e54:	e757      	b.n	8004d06 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004e56:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e58:	f000 f94c 	bl	80050f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e5c:	f000 fc28 	bl	80056b0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e60:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e62:	f000 f999 	bl	8005198 <prvIsQueueEmpty>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f43f af4c 	beq.w	8004d06 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00d      	beq.n	8004e90 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004e74:	f001 fb18 	bl	80064a8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004e78:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e7a:	f000 f893 	bl	8004fa4 <prvGetDisinheritPriorityAfterTimeout>
 8004e7e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e86:	4618      	mov	r0, r3
 8004e88:	f001 f8d6 	bl	8006038 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004e8c:	f001 fb3e 	bl	800650c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004e90:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3738      	adds	r7, #56	@ 0x38
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	e000ed04 	.word	0xe000ed04

08004ea0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b08e      	sub	sp, #56	@ 0x38
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10b      	bne.n	8004ece <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8004eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eba:	f383 8811 	msr	BASEPRI, r3
 8004ebe:	f3bf 8f6f 	isb	sy
 8004ec2:	f3bf 8f4f 	dsb	sy
 8004ec6:	623b      	str	r3, [r7, #32]
}
 8004ec8:	bf00      	nop
 8004eca:	bf00      	nop
 8004ecc:	e7fd      	b.n	8004eca <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d103      	bne.n	8004edc <xQueueReceiveFromISR+0x3c>
 8004ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <xQueueReceiveFromISR+0x40>
 8004edc:	2301      	movs	r3, #1
 8004ede:	e000      	b.n	8004ee2 <xQueueReceiveFromISR+0x42>
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d10b      	bne.n	8004efe <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eea:	f383 8811 	msr	BASEPRI, r3
 8004eee:	f3bf 8f6f 	isb	sy
 8004ef2:	f3bf 8f4f 	dsb	sy
 8004ef6:	61fb      	str	r3, [r7, #28]
}
 8004ef8:	bf00      	nop
 8004efa:	bf00      	nop
 8004efc:	e7fd      	b.n	8004efa <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004efe:	f001 fbb3 	bl	8006668 <vPortValidateInterruptPriority>
	__asm volatile
 8004f02:	f3ef 8211 	mrs	r2, BASEPRI
 8004f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f0a:	f383 8811 	msr	BASEPRI, r3
 8004f0e:	f3bf 8f6f 	isb	sy
 8004f12:	f3bf 8f4f 	dsb	sy
 8004f16:	61ba      	str	r2, [r7, #24]
 8004f18:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004f1a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f22:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d02f      	beq.n	8004f8a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f34:	68b9      	ldr	r1, [r7, #8]
 8004f36:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f38:	f000 f8b6 	bl	80050a8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f3e:	1e5a      	subs	r2, r3, #1
 8004f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f42:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004f44:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4c:	d112      	bne.n	8004f74 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d016      	beq.n	8004f84 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f58:	3310      	adds	r3, #16
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f000 fd8a 	bl	8005a74 <xTaskRemoveFromEventList>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00e      	beq.n	8004f84 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00b      	beq.n	8004f84 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	601a      	str	r2, [r3, #0]
 8004f72:	e007      	b.n	8004f84 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004f74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f78:	3301      	adds	r3, #1
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	b25a      	sxtb	r2, r3
 8004f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8004f84:	2301      	movs	r3, #1
 8004f86:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f88:	e001      	b.n	8004f8e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f90:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	f383 8811 	msr	BASEPRI, r3
}
 8004f98:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004f9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3738      	adds	r7, #56	@ 0x38
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d006      	beq.n	8004fc2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f1c3 0307 	rsb	r3, r3, #7
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	e001      	b.n	8004fc6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
	}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3714      	adds	r7, #20
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fe8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10d      	bne.n	800500e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d14d      	bne.n	8005096 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 ff92 	bl	8005f28 <xTaskPriorityDisinherit>
 8005004:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	609a      	str	r2, [r3, #8]
 800500c:	e043      	b.n	8005096 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d119      	bne.n	8005048 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6858      	ldr	r0, [r3, #4]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501c:	461a      	mov	r2, r3
 800501e:	68b9      	ldr	r1, [r7, #8]
 8005020:	f001 fec4 	bl	8006dac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502c:	441a      	add	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	429a      	cmp	r2, r3
 800503c:	d32b      	bcc.n	8005096 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	605a      	str	r2, [r3, #4]
 8005046:	e026      	b.n	8005096 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	68d8      	ldr	r0, [r3, #12]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005050:	461a      	mov	r2, r3
 8005052:	68b9      	ldr	r1, [r7, #8]
 8005054:	f001 feaa 	bl	8006dac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	68da      	ldr	r2, [r3, #12]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005060:	425b      	negs	r3, r3
 8005062:	441a      	add	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	68da      	ldr	r2, [r3, #12]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	429a      	cmp	r2, r3
 8005072:	d207      	bcs.n	8005084 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	689a      	ldr	r2, [r3, #8]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800507c:	425b      	negs	r3, r3
 800507e:	441a      	add	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b02      	cmp	r3, #2
 8005088:	d105      	bne.n	8005096 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d002      	beq.n	8005096 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	3b01      	subs	r3, #1
 8005094:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	1c5a      	adds	r2, r3, #1
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800509e:	697b      	ldr	r3, [r7, #20]
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3718      	adds	r7, #24
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d018      	beq.n	80050ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68da      	ldr	r2, [r3, #12]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c2:	441a      	add	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68da      	ldr	r2, [r3, #12]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d303      	bcc.n	80050dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	68d9      	ldr	r1, [r3, #12]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e4:	461a      	mov	r2, r3
 80050e6:	6838      	ldr	r0, [r7, #0]
 80050e8:	f001 fe60 	bl	8006dac <memcpy>
	}
}
 80050ec:	bf00      	nop
 80050ee:	3708      	adds	r7, #8
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80050fc:	f001 f9d4 	bl	80064a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005106:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005108:	e011      	b.n	800512e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800510e:	2b00      	cmp	r3, #0
 8005110:	d012      	beq.n	8005138 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	3324      	adds	r3, #36	@ 0x24
 8005116:	4618      	mov	r0, r3
 8005118:	f000 fcac 	bl	8005a74 <xTaskRemoveFromEventList>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d001      	beq.n	8005126 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005122:	f000 fd85 	bl	8005c30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005126:	7bfb      	ldrb	r3, [r7, #15]
 8005128:	3b01      	subs	r3, #1
 800512a:	b2db      	uxtb	r3, r3
 800512c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800512e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005132:	2b00      	cmp	r3, #0
 8005134:	dce9      	bgt.n	800510a <prvUnlockQueue+0x16>
 8005136:	e000      	b.n	800513a <prvUnlockQueue+0x46>
					break;
 8005138:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	22ff      	movs	r2, #255	@ 0xff
 800513e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005142:	f001 f9e3 	bl	800650c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005146:	f001 f9af 	bl	80064a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005150:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005152:	e011      	b.n	8005178 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d012      	beq.n	8005182 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	3310      	adds	r3, #16
 8005160:	4618      	mov	r0, r3
 8005162:	f000 fc87 	bl	8005a74 <xTaskRemoveFromEventList>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800516c:	f000 fd60 	bl	8005c30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005170:	7bbb      	ldrb	r3, [r7, #14]
 8005172:	3b01      	subs	r3, #1
 8005174:	b2db      	uxtb	r3, r3
 8005176:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005178:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800517c:	2b00      	cmp	r3, #0
 800517e:	dce9      	bgt.n	8005154 <prvUnlockQueue+0x60>
 8005180:	e000      	b.n	8005184 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005182:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	22ff      	movs	r2, #255	@ 0xff
 8005188:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800518c:	f001 f9be 	bl	800650c <vPortExitCritical>
}
 8005190:	bf00      	nop
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80051a0:	f001 f982 	bl	80064a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d102      	bne.n	80051b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80051ac:	2301      	movs	r3, #1
 80051ae:	60fb      	str	r3, [r7, #12]
 80051b0:	e001      	b.n	80051b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80051b2:	2300      	movs	r3, #0
 80051b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051b6:	f001 f9a9 	bl	800650c <vPortExitCritical>

	return xReturn;
 80051ba:	68fb      	ldr	r3, [r7, #12]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80051cc:	f001 f96c 	bl	80064a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051d8:	429a      	cmp	r2, r3
 80051da:	d102      	bne.n	80051e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80051dc:	2301      	movs	r3, #1
 80051de:	60fb      	str	r3, [r7, #12]
 80051e0:	e001      	b.n	80051e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80051e2:	2300      	movs	r3, #0
 80051e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051e6:	f001 f991 	bl	800650c <vPortExitCritical>

	return xReturn;
 80051ea:	68fb      	ldr	r3, [r7, #12]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3710      	adds	r7, #16
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b08e      	sub	sp, #56	@ 0x38
 80051f8:	af04      	add	r7, sp, #16
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
 8005200:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005202:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10b      	bne.n	8005220 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800520c:	f383 8811 	msr	BASEPRI, r3
 8005210:	f3bf 8f6f 	isb	sy
 8005214:	f3bf 8f4f 	dsb	sy
 8005218:	623b      	str	r3, [r7, #32]
}
 800521a:	bf00      	nop
 800521c:	bf00      	nop
 800521e:	e7fd      	b.n	800521c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10b      	bne.n	800523e <xTaskCreateStatic+0x4a>
	__asm volatile
 8005226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800522a:	f383 8811 	msr	BASEPRI, r3
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	f3bf 8f4f 	dsb	sy
 8005236:	61fb      	str	r3, [r7, #28]
}
 8005238:	bf00      	nop
 800523a:	bf00      	nop
 800523c:	e7fd      	b.n	800523a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800523e:	23a0      	movs	r3, #160	@ 0xa0
 8005240:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	2ba0      	cmp	r3, #160	@ 0xa0
 8005246:	d00b      	beq.n	8005260 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800524c:	f383 8811 	msr	BASEPRI, r3
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	61bb      	str	r3, [r7, #24]
}
 800525a:	bf00      	nop
 800525c:	bf00      	nop
 800525e:	e7fd      	b.n	800525c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005260:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005264:	2b00      	cmp	r3, #0
 8005266:	d01e      	beq.n	80052a6 <xTaskCreateStatic+0xb2>
 8005268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800526a:	2b00      	cmp	r3, #0
 800526c:	d01b      	beq.n	80052a6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800526e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005270:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005274:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005276:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527a:	2202      	movs	r2, #2
 800527c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005280:	2300      	movs	r3, #0
 8005282:	9303      	str	r3, [sp, #12]
 8005284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005286:	9302      	str	r3, [sp, #8]
 8005288:	f107 0314 	add.w	r3, r7, #20
 800528c:	9301      	str	r3, [sp, #4]
 800528e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	68b9      	ldr	r1, [r7, #8]
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f000 f851 	bl	8005340 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800529e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80052a0:	f000 f8ee 	bl	8005480 <prvAddNewTaskToReadyList>
 80052a4:	e001      	b.n	80052aa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80052a6:	2300      	movs	r3, #0
 80052a8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80052aa:	697b      	ldr	r3, [r7, #20]
	}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3728      	adds	r7, #40	@ 0x28
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b08c      	sub	sp, #48	@ 0x30
 80052b8:	af04      	add	r7, sp, #16
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	603b      	str	r3, [r7, #0]
 80052c0:	4613      	mov	r3, r2
 80052c2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80052c4:	88fb      	ldrh	r3, [r7, #6]
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4618      	mov	r0, r3
 80052ca:	f001 fa0f 	bl	80066ec <pvPortMalloc>
 80052ce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00e      	beq.n	80052f4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80052d6:	20a0      	movs	r0, #160	@ 0xa0
 80052d8:	f001 fa08 	bl	80066ec <pvPortMalloc>
 80052dc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d003      	beq.n	80052ec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80052ea:	e005      	b.n	80052f8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80052ec:	6978      	ldr	r0, [r7, #20]
 80052ee:	f001 facb 	bl	8006888 <vPortFree>
 80052f2:	e001      	b.n	80052f8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80052f4:	2300      	movs	r3, #0
 80052f6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d017      	beq.n	800532e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005306:	88fa      	ldrh	r2, [r7, #6]
 8005308:	2300      	movs	r3, #0
 800530a:	9303      	str	r3, [sp, #12]
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	9302      	str	r3, [sp, #8]
 8005310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005312:	9301      	str	r3, [sp, #4]
 8005314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	68b9      	ldr	r1, [r7, #8]
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f000 f80f 	bl	8005340 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005322:	69f8      	ldr	r0, [r7, #28]
 8005324:	f000 f8ac 	bl	8005480 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005328:	2301      	movs	r3, #1
 800532a:	61bb      	str	r3, [r7, #24]
 800532c:	e002      	b.n	8005334 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800532e:	f04f 33ff 	mov.w	r3, #4294967295
 8005332:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005334:	69bb      	ldr	r3, [r7, #24]
	}
 8005336:	4618      	mov	r0, r3
 8005338:	3720      	adds	r7, #32
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
	...

08005340 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b088      	sub	sp, #32
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800534e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005350:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005358:	3b01      	subs	r3, #1
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	f023 0307 	bic.w	r3, r3, #7
 8005366:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	f003 0307 	and.w	r3, r3, #7
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00b      	beq.n	800538a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005376:	f383 8811 	msr	BASEPRI, r3
 800537a:	f3bf 8f6f 	isb	sy
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	617b      	str	r3, [r7, #20]
}
 8005384:	bf00      	nop
 8005386:	bf00      	nop
 8005388:	e7fd      	b.n	8005386 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d01f      	beq.n	80053d0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005390:	2300      	movs	r3, #0
 8005392:	61fb      	str	r3, [r7, #28]
 8005394:	e012      	b.n	80053bc <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	4413      	add	r3, r2
 800539c:	7819      	ldrb	r1, [r3, #0]
 800539e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	4413      	add	r3, r2
 80053a4:	3334      	adds	r3, #52	@ 0x34
 80053a6:	460a      	mov	r2, r1
 80053a8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	4413      	add	r3, r2
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d006      	beq.n	80053c4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	3301      	adds	r3, #1
 80053ba:	61fb      	str	r3, [r7, #28]
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	2b0f      	cmp	r3, #15
 80053c0:	d9e9      	bls.n	8005396 <prvInitialiseNewTask+0x56>
 80053c2:	e000      	b.n	80053c6 <prvInitialiseNewTask+0x86>
			{
				break;
 80053c4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80053c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80053ce:	e003      	b.n	80053d8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80053d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80053d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053da:	2b06      	cmp	r3, #6
 80053dc:	d901      	bls.n	80053e2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80053de:	2306      	movs	r3, #6
 80053e0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80053e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053e6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80053e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053ec:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80053ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f0:	2200      	movs	r2, #0
 80053f2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80053f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f6:	3304      	adds	r3, #4
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7fe ff0c 	bl	8004216 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80053fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005400:	3318      	adds	r3, #24
 8005402:	4618      	mov	r0, r3
 8005404:	f7fe ff07 	bl	8004216 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800540a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800540c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800540e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005410:	f1c3 0207 	rsb	r2, r3, #7
 8005414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005416:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800541a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800541c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800541e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005420:	2200      	movs	r2, #0
 8005422:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005428:	2200      	movs	r2, #0
 800542a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800542e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005430:	334c      	adds	r3, #76	@ 0x4c
 8005432:	224c      	movs	r2, #76	@ 0x4c
 8005434:	2100      	movs	r1, #0
 8005436:	4618      	mov	r0, r3
 8005438:	f001 fc16 	bl	8006c68 <memset>
 800543c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800543e:	4a0d      	ldr	r2, [pc, #52]	@ (8005474 <prvInitialiseNewTask+0x134>)
 8005440:	651a      	str	r2, [r3, #80]	@ 0x50
 8005442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005444:	4a0c      	ldr	r2, [pc, #48]	@ (8005478 <prvInitialiseNewTask+0x138>)
 8005446:	655a      	str	r2, [r3, #84]	@ 0x54
 8005448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800544a:	4a0c      	ldr	r2, [pc, #48]	@ (800547c <prvInitialiseNewTask+0x13c>)
 800544c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	68f9      	ldr	r1, [r7, #12]
 8005452:	69b8      	ldr	r0, [r7, #24]
 8005454:	f000 fefa 	bl	800624c <pxPortInitialiseStack>
 8005458:	4602      	mov	r2, r0
 800545a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800545c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800545e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005460:	2b00      	cmp	r3, #0
 8005462:	d002      	beq.n	800546a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005466:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005468:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800546a:	bf00      	nop
 800546c:	3720      	adds	r7, #32
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	20004264 	.word	0x20004264
 8005478:	200042cc 	.word	0x200042cc
 800547c:	20004334 	.word	0x20004334

08005480 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005488:	f001 f80e 	bl	80064a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800548c:	4b2a      	ldr	r3, [pc, #168]	@ (8005538 <prvAddNewTaskToReadyList+0xb8>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	3301      	adds	r3, #1
 8005492:	4a29      	ldr	r2, [pc, #164]	@ (8005538 <prvAddNewTaskToReadyList+0xb8>)
 8005494:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005496:	4b29      	ldr	r3, [pc, #164]	@ (800553c <prvAddNewTaskToReadyList+0xbc>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d109      	bne.n	80054b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800549e:	4a27      	ldr	r2, [pc, #156]	@ (800553c <prvAddNewTaskToReadyList+0xbc>)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80054a4:	4b24      	ldr	r3, [pc, #144]	@ (8005538 <prvAddNewTaskToReadyList+0xb8>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d110      	bne.n	80054ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80054ac:	f000 fbe4 	bl	8005c78 <prvInitialiseTaskLists>
 80054b0:	e00d      	b.n	80054ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80054b2:	4b23      	ldr	r3, [pc, #140]	@ (8005540 <prvAddNewTaskToReadyList+0xc0>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d109      	bne.n	80054ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80054ba:	4b20      	ldr	r3, [pc, #128]	@ (800553c <prvAddNewTaskToReadyList+0xbc>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d802      	bhi.n	80054ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80054c8:	4a1c      	ldr	r2, [pc, #112]	@ (800553c <prvAddNewTaskToReadyList+0xbc>)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80054ce:	4b1d      	ldr	r3, [pc, #116]	@ (8005544 <prvAddNewTaskToReadyList+0xc4>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	3301      	adds	r3, #1
 80054d4:	4a1b      	ldr	r2, [pc, #108]	@ (8005544 <prvAddNewTaskToReadyList+0xc4>)
 80054d6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054dc:	2201      	movs	r2, #1
 80054de:	409a      	lsls	r2, r3
 80054e0:	4b19      	ldr	r3, [pc, #100]	@ (8005548 <prvAddNewTaskToReadyList+0xc8>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	4a18      	ldr	r2, [pc, #96]	@ (8005548 <prvAddNewTaskToReadyList+0xc8>)
 80054e8:	6013      	str	r3, [r2, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054ee:	4613      	mov	r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4413      	add	r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	4a15      	ldr	r2, [pc, #84]	@ (800554c <prvAddNewTaskToReadyList+0xcc>)
 80054f8:	441a      	add	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	3304      	adds	r3, #4
 80054fe:	4619      	mov	r1, r3
 8005500:	4610      	mov	r0, r2
 8005502:	f7fe fe95 	bl	8004230 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005506:	f001 f801 	bl	800650c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800550a:	4b0d      	ldr	r3, [pc, #52]	@ (8005540 <prvAddNewTaskToReadyList+0xc0>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00e      	beq.n	8005530 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005512:	4b0a      	ldr	r3, [pc, #40]	@ (800553c <prvAddNewTaskToReadyList+0xbc>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800551c:	429a      	cmp	r2, r3
 800551e:	d207      	bcs.n	8005530 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005520:	4b0b      	ldr	r3, [pc, #44]	@ (8005550 <prvAddNewTaskToReadyList+0xd0>)
 8005522:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005526:	601a      	str	r2, [r3, #0]
 8005528:	f3bf 8f4f 	dsb	sy
 800552c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005530:	bf00      	nop
 8005532:	3708      	adds	r7, #8
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	20000608 	.word	0x20000608
 800553c:	20000508 	.word	0x20000508
 8005540:	20000614 	.word	0x20000614
 8005544:	20000624 	.word	0x20000624
 8005548:	20000610 	.word	0x20000610
 800554c:	2000050c 	.word	0x2000050c
 8005550:	e000ed04 	.word	0xe000ed04

08005554 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800555c:	2300      	movs	r3, #0
 800555e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d018      	beq.n	8005598 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005566:	4b14      	ldr	r3, [pc, #80]	@ (80055b8 <vTaskDelay+0x64>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00b      	beq.n	8005586 <vTaskDelay+0x32>
	__asm volatile
 800556e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005572:	f383 8811 	msr	BASEPRI, r3
 8005576:	f3bf 8f6f 	isb	sy
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	60bb      	str	r3, [r7, #8]
}
 8005580:	bf00      	nop
 8005582:	bf00      	nop
 8005584:	e7fd      	b.n	8005582 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005586:	f000 f885 	bl	8005694 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800558a:	2100      	movs	r1, #0
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 fdf7 	bl	8006180 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005592:	f000 f88d 	bl	80056b0 <xTaskResumeAll>
 8005596:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d107      	bne.n	80055ae <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800559e:	4b07      	ldr	r3, [pc, #28]	@ (80055bc <vTaskDelay+0x68>)
 80055a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055a4:	601a      	str	r2, [r3, #0]
 80055a6:	f3bf 8f4f 	dsb	sy
 80055aa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80055ae:	bf00      	nop
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	20000630 	.word	0x20000630
 80055bc:	e000ed04 	.word	0xe000ed04

080055c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b08a      	sub	sp, #40	@ 0x28
 80055c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80055c6:	2300      	movs	r3, #0
 80055c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80055ca:	2300      	movs	r3, #0
 80055cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80055ce:	463a      	mov	r2, r7
 80055d0:	1d39      	adds	r1, r7, #4
 80055d2:	f107 0308 	add.w	r3, r7, #8
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7fa ffe8 	bl	80005ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80055dc:	6839      	ldr	r1, [r7, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	9202      	str	r2, [sp, #8]
 80055e4:	9301      	str	r3, [sp, #4]
 80055e6:	2300      	movs	r3, #0
 80055e8:	9300      	str	r3, [sp, #0]
 80055ea:	2300      	movs	r3, #0
 80055ec:	460a      	mov	r2, r1
 80055ee:	4921      	ldr	r1, [pc, #132]	@ (8005674 <vTaskStartScheduler+0xb4>)
 80055f0:	4821      	ldr	r0, [pc, #132]	@ (8005678 <vTaskStartScheduler+0xb8>)
 80055f2:	f7ff fdff 	bl	80051f4 <xTaskCreateStatic>
 80055f6:	4603      	mov	r3, r0
 80055f8:	4a20      	ldr	r2, [pc, #128]	@ (800567c <vTaskStartScheduler+0xbc>)
 80055fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80055fc:	4b1f      	ldr	r3, [pc, #124]	@ (800567c <vTaskStartScheduler+0xbc>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d002      	beq.n	800560a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005604:	2301      	movs	r3, #1
 8005606:	617b      	str	r3, [r7, #20]
 8005608:	e001      	b.n	800560e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800560a:	2300      	movs	r3, #0
 800560c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d11b      	bne.n	800564c <vTaskStartScheduler+0x8c>
	__asm volatile
 8005614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005618:	f383 8811 	msr	BASEPRI, r3
 800561c:	f3bf 8f6f 	isb	sy
 8005620:	f3bf 8f4f 	dsb	sy
 8005624:	613b      	str	r3, [r7, #16]
}
 8005626:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005628:	4b15      	ldr	r3, [pc, #84]	@ (8005680 <vTaskStartScheduler+0xc0>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	334c      	adds	r3, #76	@ 0x4c
 800562e:	4a15      	ldr	r2, [pc, #84]	@ (8005684 <vTaskStartScheduler+0xc4>)
 8005630:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005632:	4b15      	ldr	r3, [pc, #84]	@ (8005688 <vTaskStartScheduler+0xc8>)
 8005634:	f04f 32ff 	mov.w	r2, #4294967295
 8005638:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800563a:	4b14      	ldr	r3, [pc, #80]	@ (800568c <vTaskStartScheduler+0xcc>)
 800563c:	2201      	movs	r2, #1
 800563e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005640:	4b13      	ldr	r3, [pc, #76]	@ (8005690 <vTaskStartScheduler+0xd0>)
 8005642:	2200      	movs	r2, #0
 8005644:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005646:	f000 fe8b 	bl	8006360 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800564a:	e00f      	b.n	800566c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005652:	d10b      	bne.n	800566c <vTaskStartScheduler+0xac>
	__asm volatile
 8005654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005658:	f383 8811 	msr	BASEPRI, r3
 800565c:	f3bf 8f6f 	isb	sy
 8005660:	f3bf 8f4f 	dsb	sy
 8005664:	60fb      	str	r3, [r7, #12]
}
 8005666:	bf00      	nop
 8005668:	bf00      	nop
 800566a:	e7fd      	b.n	8005668 <vTaskStartScheduler+0xa8>
}
 800566c:	bf00      	nop
 800566e:	3718      	adds	r7, #24
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	080075d8 	.word	0x080075d8
 8005678:	08005c49 	.word	0x08005c49
 800567c:	2000062c 	.word	0x2000062c
 8005680:	20000508 	.word	0x20000508
 8005684:	200000b0 	.word	0x200000b0
 8005688:	20000628 	.word	0x20000628
 800568c:	20000614 	.word	0x20000614
 8005690:	2000060c 	.word	0x2000060c

08005694 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005694:	b480      	push	{r7}
 8005696:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005698:	4b04      	ldr	r3, [pc, #16]	@ (80056ac <vTaskSuspendAll+0x18>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	3301      	adds	r3, #1
 800569e:	4a03      	ldr	r2, [pc, #12]	@ (80056ac <vTaskSuspendAll+0x18>)
 80056a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80056a2:	bf00      	nop
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr
 80056ac:	20000630 	.word	0x20000630

080056b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80056b6:	2300      	movs	r3, #0
 80056b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80056ba:	2300      	movs	r3, #0
 80056bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80056be:	4b42      	ldr	r3, [pc, #264]	@ (80057c8 <xTaskResumeAll+0x118>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10b      	bne.n	80056de <xTaskResumeAll+0x2e>
	__asm volatile
 80056c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ca:	f383 8811 	msr	BASEPRI, r3
 80056ce:	f3bf 8f6f 	isb	sy
 80056d2:	f3bf 8f4f 	dsb	sy
 80056d6:	603b      	str	r3, [r7, #0]
}
 80056d8:	bf00      	nop
 80056da:	bf00      	nop
 80056dc:	e7fd      	b.n	80056da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80056de:	f000 fee3 	bl	80064a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80056e2:	4b39      	ldr	r3, [pc, #228]	@ (80057c8 <xTaskResumeAll+0x118>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	3b01      	subs	r3, #1
 80056e8:	4a37      	ldr	r2, [pc, #220]	@ (80057c8 <xTaskResumeAll+0x118>)
 80056ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056ec:	4b36      	ldr	r3, [pc, #216]	@ (80057c8 <xTaskResumeAll+0x118>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d161      	bne.n	80057b8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80056f4:	4b35      	ldr	r3, [pc, #212]	@ (80057cc <xTaskResumeAll+0x11c>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d05d      	beq.n	80057b8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056fc:	e02e      	b.n	800575c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056fe:	4b34      	ldr	r3, [pc, #208]	@ (80057d0 <xTaskResumeAll+0x120>)
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	3318      	adds	r3, #24
 800570a:	4618      	mov	r0, r3
 800570c:	f7fe fded 	bl	80042ea <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	3304      	adds	r3, #4
 8005714:	4618      	mov	r0, r3
 8005716:	f7fe fde8 	bl	80042ea <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800571e:	2201      	movs	r2, #1
 8005720:	409a      	lsls	r2, r3
 8005722:	4b2c      	ldr	r3, [pc, #176]	@ (80057d4 <xTaskResumeAll+0x124>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4313      	orrs	r3, r2
 8005728:	4a2a      	ldr	r2, [pc, #168]	@ (80057d4 <xTaskResumeAll+0x124>)
 800572a:	6013      	str	r3, [r2, #0]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005730:	4613      	mov	r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4413      	add	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4a27      	ldr	r2, [pc, #156]	@ (80057d8 <xTaskResumeAll+0x128>)
 800573a:	441a      	add	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	3304      	adds	r3, #4
 8005740:	4619      	mov	r1, r3
 8005742:	4610      	mov	r0, r2
 8005744:	f7fe fd74 	bl	8004230 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800574c:	4b23      	ldr	r3, [pc, #140]	@ (80057dc <xTaskResumeAll+0x12c>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005752:	429a      	cmp	r2, r3
 8005754:	d302      	bcc.n	800575c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005756:	4b22      	ldr	r3, [pc, #136]	@ (80057e0 <xTaskResumeAll+0x130>)
 8005758:	2201      	movs	r2, #1
 800575a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800575c:	4b1c      	ldr	r3, [pc, #112]	@ (80057d0 <xTaskResumeAll+0x120>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1cc      	bne.n	80056fe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d001      	beq.n	800576e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800576a:	f000 fb29 	bl	8005dc0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800576e:	4b1d      	ldr	r3, [pc, #116]	@ (80057e4 <xTaskResumeAll+0x134>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d010      	beq.n	800579c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800577a:	f000 f837 	bl	80057ec <xTaskIncrementTick>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005784:	4b16      	ldr	r3, [pc, #88]	@ (80057e0 <xTaskResumeAll+0x130>)
 8005786:	2201      	movs	r2, #1
 8005788:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	3b01      	subs	r3, #1
 800578e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1f1      	bne.n	800577a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005796:	4b13      	ldr	r3, [pc, #76]	@ (80057e4 <xTaskResumeAll+0x134>)
 8005798:	2200      	movs	r2, #0
 800579a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800579c:	4b10      	ldr	r3, [pc, #64]	@ (80057e0 <xTaskResumeAll+0x130>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d009      	beq.n	80057b8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80057a4:	2301      	movs	r3, #1
 80057a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80057a8:	4b0f      	ldr	r3, [pc, #60]	@ (80057e8 <xTaskResumeAll+0x138>)
 80057aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057ae:	601a      	str	r2, [r3, #0]
 80057b0:	f3bf 8f4f 	dsb	sy
 80057b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80057b8:	f000 fea8 	bl	800650c <vPortExitCritical>

	return xAlreadyYielded;
 80057bc:	68bb      	ldr	r3, [r7, #8]
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	20000630 	.word	0x20000630
 80057cc:	20000608 	.word	0x20000608
 80057d0:	200005c8 	.word	0x200005c8
 80057d4:	20000610 	.word	0x20000610
 80057d8:	2000050c 	.word	0x2000050c
 80057dc:	20000508 	.word	0x20000508
 80057e0:	2000061c 	.word	0x2000061c
 80057e4:	20000618 	.word	0x20000618
 80057e8:	e000ed04 	.word	0xe000ed04

080057ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80057f2:	2300      	movs	r3, #0
 80057f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057f6:	4b4f      	ldr	r3, [pc, #316]	@ (8005934 <xTaskIncrementTick+0x148>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f040 808f 	bne.w	800591e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005800:	4b4d      	ldr	r3, [pc, #308]	@ (8005938 <xTaskIncrementTick+0x14c>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	3301      	adds	r3, #1
 8005806:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005808:	4a4b      	ldr	r2, [pc, #300]	@ (8005938 <xTaskIncrementTick+0x14c>)
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d121      	bne.n	8005858 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005814:	4b49      	ldr	r3, [pc, #292]	@ (800593c <xTaskIncrementTick+0x150>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00b      	beq.n	8005836 <xTaskIncrementTick+0x4a>
	__asm volatile
 800581e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005822:	f383 8811 	msr	BASEPRI, r3
 8005826:	f3bf 8f6f 	isb	sy
 800582a:	f3bf 8f4f 	dsb	sy
 800582e:	603b      	str	r3, [r7, #0]
}
 8005830:	bf00      	nop
 8005832:	bf00      	nop
 8005834:	e7fd      	b.n	8005832 <xTaskIncrementTick+0x46>
 8005836:	4b41      	ldr	r3, [pc, #260]	@ (800593c <xTaskIncrementTick+0x150>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	60fb      	str	r3, [r7, #12]
 800583c:	4b40      	ldr	r3, [pc, #256]	@ (8005940 <xTaskIncrementTick+0x154>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a3e      	ldr	r2, [pc, #248]	@ (800593c <xTaskIncrementTick+0x150>)
 8005842:	6013      	str	r3, [r2, #0]
 8005844:	4a3e      	ldr	r2, [pc, #248]	@ (8005940 <xTaskIncrementTick+0x154>)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6013      	str	r3, [r2, #0]
 800584a:	4b3e      	ldr	r3, [pc, #248]	@ (8005944 <xTaskIncrementTick+0x158>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	3301      	adds	r3, #1
 8005850:	4a3c      	ldr	r2, [pc, #240]	@ (8005944 <xTaskIncrementTick+0x158>)
 8005852:	6013      	str	r3, [r2, #0]
 8005854:	f000 fab4 	bl	8005dc0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005858:	4b3b      	ldr	r3, [pc, #236]	@ (8005948 <xTaskIncrementTick+0x15c>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	429a      	cmp	r2, r3
 8005860:	d348      	bcc.n	80058f4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005862:	4b36      	ldr	r3, [pc, #216]	@ (800593c <xTaskIncrementTick+0x150>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d104      	bne.n	8005876 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800586c:	4b36      	ldr	r3, [pc, #216]	@ (8005948 <xTaskIncrementTick+0x15c>)
 800586e:	f04f 32ff 	mov.w	r2, #4294967295
 8005872:	601a      	str	r2, [r3, #0]
					break;
 8005874:	e03e      	b.n	80058f4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005876:	4b31      	ldr	r3, [pc, #196]	@ (800593c <xTaskIncrementTick+0x150>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	429a      	cmp	r2, r3
 800588c:	d203      	bcs.n	8005896 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800588e:	4a2e      	ldr	r2, [pc, #184]	@ (8005948 <xTaskIncrementTick+0x15c>)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005894:	e02e      	b.n	80058f4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	3304      	adds	r3, #4
 800589a:	4618      	mov	r0, r3
 800589c:	f7fe fd25 	bl	80042ea <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d004      	beq.n	80058b2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	3318      	adds	r3, #24
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7fe fd1c 	bl	80042ea <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b6:	2201      	movs	r2, #1
 80058b8:	409a      	lsls	r2, r3
 80058ba:	4b24      	ldr	r3, [pc, #144]	@ (800594c <xTaskIncrementTick+0x160>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4313      	orrs	r3, r2
 80058c0:	4a22      	ldr	r2, [pc, #136]	@ (800594c <xTaskIncrementTick+0x160>)
 80058c2:	6013      	str	r3, [r2, #0]
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058c8:	4613      	mov	r3, r2
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	4413      	add	r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	4a1f      	ldr	r2, [pc, #124]	@ (8005950 <xTaskIncrementTick+0x164>)
 80058d2:	441a      	add	r2, r3
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	3304      	adds	r3, #4
 80058d8:	4619      	mov	r1, r3
 80058da:	4610      	mov	r0, r2
 80058dc:	f7fe fca8 	bl	8004230 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005954 <xTaskIncrementTick+0x168>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d3b9      	bcc.n	8005862 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80058ee:	2301      	movs	r3, #1
 80058f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058f2:	e7b6      	b.n	8005862 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80058f4:	4b17      	ldr	r3, [pc, #92]	@ (8005954 <xTaskIncrementTick+0x168>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058fa:	4915      	ldr	r1, [pc, #84]	@ (8005950 <xTaskIncrementTick+0x164>)
 80058fc:	4613      	mov	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4413      	add	r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	440b      	add	r3, r1
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d901      	bls.n	8005910 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800590c:	2301      	movs	r3, #1
 800590e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005910:	4b11      	ldr	r3, [pc, #68]	@ (8005958 <xTaskIncrementTick+0x16c>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d007      	beq.n	8005928 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005918:	2301      	movs	r3, #1
 800591a:	617b      	str	r3, [r7, #20]
 800591c:	e004      	b.n	8005928 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800591e:	4b0f      	ldr	r3, [pc, #60]	@ (800595c <xTaskIncrementTick+0x170>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	3301      	adds	r3, #1
 8005924:	4a0d      	ldr	r2, [pc, #52]	@ (800595c <xTaskIncrementTick+0x170>)
 8005926:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005928:	697b      	ldr	r3, [r7, #20]
}
 800592a:	4618      	mov	r0, r3
 800592c:	3718      	adds	r7, #24
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	20000630 	.word	0x20000630
 8005938:	2000060c 	.word	0x2000060c
 800593c:	200005c0 	.word	0x200005c0
 8005940:	200005c4 	.word	0x200005c4
 8005944:	20000620 	.word	0x20000620
 8005948:	20000628 	.word	0x20000628
 800594c:	20000610 	.word	0x20000610
 8005950:	2000050c 	.word	0x2000050c
 8005954:	20000508 	.word	0x20000508
 8005958:	2000061c 	.word	0x2000061c
 800595c:	20000618 	.word	0x20000618

08005960 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005960:	b480      	push	{r7}
 8005962:	b087      	sub	sp, #28
 8005964:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005966:	4b2a      	ldr	r3, [pc, #168]	@ (8005a10 <vTaskSwitchContext+0xb0>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d003      	beq.n	8005976 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800596e:	4b29      	ldr	r3, [pc, #164]	@ (8005a14 <vTaskSwitchContext+0xb4>)
 8005970:	2201      	movs	r2, #1
 8005972:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005974:	e045      	b.n	8005a02 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8005976:	4b27      	ldr	r3, [pc, #156]	@ (8005a14 <vTaskSwitchContext+0xb4>)
 8005978:	2200      	movs	r2, #0
 800597a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800597c:	4b26      	ldr	r3, [pc, #152]	@ (8005a18 <vTaskSwitchContext+0xb8>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	fab3 f383 	clz	r3, r3
 8005988:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800598a:	7afb      	ldrb	r3, [r7, #11]
 800598c:	f1c3 031f 	rsb	r3, r3, #31
 8005990:	617b      	str	r3, [r7, #20]
 8005992:	4922      	ldr	r1, [pc, #136]	@ (8005a1c <vTaskSwitchContext+0xbc>)
 8005994:	697a      	ldr	r2, [r7, #20]
 8005996:	4613      	mov	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	4413      	add	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	440b      	add	r3, r1
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10b      	bne.n	80059be <vTaskSwitchContext+0x5e>
	__asm volatile
 80059a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059aa:	f383 8811 	msr	BASEPRI, r3
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	607b      	str	r3, [r7, #4]
}
 80059b8:	bf00      	nop
 80059ba:	bf00      	nop
 80059bc:	e7fd      	b.n	80059ba <vTaskSwitchContext+0x5a>
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	4613      	mov	r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	4413      	add	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4a14      	ldr	r2, [pc, #80]	@ (8005a1c <vTaskSwitchContext+0xbc>)
 80059ca:	4413      	add	r3, r2
 80059cc:	613b      	str	r3, [r7, #16]
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	605a      	str	r2, [r3, #4]
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	3308      	adds	r3, #8
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d104      	bne.n	80059ee <vTaskSwitchContext+0x8e>
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	605a      	str	r2, [r3, #4]
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	4a0a      	ldr	r2, [pc, #40]	@ (8005a20 <vTaskSwitchContext+0xc0>)
 80059f6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80059f8:	4b09      	ldr	r3, [pc, #36]	@ (8005a20 <vTaskSwitchContext+0xc0>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	334c      	adds	r3, #76	@ 0x4c
 80059fe:	4a09      	ldr	r2, [pc, #36]	@ (8005a24 <vTaskSwitchContext+0xc4>)
 8005a00:	6013      	str	r3, [r2, #0]
}
 8005a02:	bf00      	nop
 8005a04:	371c      	adds	r7, #28
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	20000630 	.word	0x20000630
 8005a14:	2000061c 	.word	0x2000061c
 8005a18:	20000610 	.word	0x20000610
 8005a1c:	2000050c 	.word	0x2000050c
 8005a20:	20000508 	.word	0x20000508
 8005a24:	200000b0 	.word	0x200000b0

08005a28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d10b      	bne.n	8005a50 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a3c:	f383 8811 	msr	BASEPRI, r3
 8005a40:	f3bf 8f6f 	isb	sy
 8005a44:	f3bf 8f4f 	dsb	sy
 8005a48:	60fb      	str	r3, [r7, #12]
}
 8005a4a:	bf00      	nop
 8005a4c:	bf00      	nop
 8005a4e:	e7fd      	b.n	8005a4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a50:	4b07      	ldr	r3, [pc, #28]	@ (8005a70 <vTaskPlaceOnEventList+0x48>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	3318      	adds	r3, #24
 8005a56:	4619      	mov	r1, r3
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f7fe fc0d 	bl	8004278 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a5e:	2101      	movs	r1, #1
 8005a60:	6838      	ldr	r0, [r7, #0]
 8005a62:	f000 fb8d 	bl	8006180 <prvAddCurrentTaskToDelayedList>
}
 8005a66:	bf00      	nop
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	20000508 	.word	0x20000508

08005a74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b086      	sub	sp, #24
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d10b      	bne.n	8005aa2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a8e:	f383 8811 	msr	BASEPRI, r3
 8005a92:	f3bf 8f6f 	isb	sy
 8005a96:	f3bf 8f4f 	dsb	sy
 8005a9a:	60fb      	str	r3, [r7, #12]
}
 8005a9c:	bf00      	nop
 8005a9e:	bf00      	nop
 8005aa0:	e7fd      	b.n	8005a9e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	3318      	adds	r3, #24
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7fe fc1f 	bl	80042ea <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005aac:	4b1d      	ldr	r3, [pc, #116]	@ (8005b24 <xTaskRemoveFromEventList+0xb0>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d11c      	bne.n	8005aee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	3304      	adds	r3, #4
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7fe fc16 	bl	80042ea <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	409a      	lsls	r2, r3
 8005ac6:	4b18      	ldr	r3, [pc, #96]	@ (8005b28 <xTaskRemoveFromEventList+0xb4>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	4a16      	ldr	r2, [pc, #88]	@ (8005b28 <xTaskRemoveFromEventList+0xb4>)
 8005ace:	6013      	str	r3, [r2, #0]
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	4413      	add	r3, r2
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4a13      	ldr	r2, [pc, #76]	@ (8005b2c <xTaskRemoveFromEventList+0xb8>)
 8005ade:	441a      	add	r2, r3
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	3304      	adds	r3, #4
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	4610      	mov	r0, r2
 8005ae8:	f7fe fba2 	bl	8004230 <vListInsertEnd>
 8005aec:	e005      	b.n	8005afa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	3318      	adds	r3, #24
 8005af2:	4619      	mov	r1, r3
 8005af4:	480e      	ldr	r0, [pc, #56]	@ (8005b30 <xTaskRemoveFromEventList+0xbc>)
 8005af6:	f7fe fb9b 	bl	8004230 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005afe:	4b0d      	ldr	r3, [pc, #52]	@ (8005b34 <xTaskRemoveFromEventList+0xc0>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d905      	bls.n	8005b14 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8005b38 <xTaskRemoveFromEventList+0xc4>)
 8005b0e:	2201      	movs	r2, #1
 8005b10:	601a      	str	r2, [r3, #0]
 8005b12:	e001      	b.n	8005b18 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005b14:	2300      	movs	r3, #0
 8005b16:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005b18:	697b      	ldr	r3, [r7, #20]
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3718      	adds	r7, #24
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	20000630 	.word	0x20000630
 8005b28:	20000610 	.word	0x20000610
 8005b2c:	2000050c 	.word	0x2000050c
 8005b30:	200005c8 	.word	0x200005c8
 8005b34:	20000508 	.word	0x20000508
 8005b38:	2000061c 	.word	0x2000061c

08005b3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005b44:	4b06      	ldr	r3, [pc, #24]	@ (8005b60 <vTaskInternalSetTimeOutState+0x24>)
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005b4c:	4b05      	ldr	r3, [pc, #20]	@ (8005b64 <vTaskInternalSetTimeOutState+0x28>)
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	605a      	str	r2, [r3, #4]
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr
 8005b60:	20000620 	.word	0x20000620
 8005b64:	2000060c 	.word	0x2000060c

08005b68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b088      	sub	sp, #32
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10b      	bne.n	8005b90 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b7c:	f383 8811 	msr	BASEPRI, r3
 8005b80:	f3bf 8f6f 	isb	sy
 8005b84:	f3bf 8f4f 	dsb	sy
 8005b88:	613b      	str	r3, [r7, #16]
}
 8005b8a:	bf00      	nop
 8005b8c:	bf00      	nop
 8005b8e:	e7fd      	b.n	8005b8c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10b      	bne.n	8005bae <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b9a:	f383 8811 	msr	BASEPRI, r3
 8005b9e:	f3bf 8f6f 	isb	sy
 8005ba2:	f3bf 8f4f 	dsb	sy
 8005ba6:	60fb      	str	r3, [r7, #12]
}
 8005ba8:	bf00      	nop
 8005baa:	bf00      	nop
 8005bac:	e7fd      	b.n	8005baa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005bae:	f000 fc7b 	bl	80064a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005bb2:	4b1d      	ldr	r3, [pc, #116]	@ (8005c28 <xTaskCheckForTimeOut+0xc0>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	69ba      	ldr	r2, [r7, #24]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bca:	d102      	bne.n	8005bd2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	61fb      	str	r3, [r7, #28]
 8005bd0:	e023      	b.n	8005c1a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	4b15      	ldr	r3, [pc, #84]	@ (8005c2c <xTaskCheckForTimeOut+0xc4>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d007      	beq.n	8005bee <xTaskCheckForTimeOut+0x86>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	69ba      	ldr	r2, [r7, #24]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d302      	bcc.n	8005bee <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005be8:	2301      	movs	r3, #1
 8005bea:	61fb      	str	r3, [r7, #28]
 8005bec:	e015      	b.n	8005c1a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d20b      	bcs.n	8005c10 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	1ad2      	subs	r2, r2, r3
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f7ff ff99 	bl	8005b3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	61fb      	str	r3, [r7, #28]
 8005c0e:	e004      	b.n	8005c1a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	2200      	movs	r2, #0
 8005c14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005c16:	2301      	movs	r3, #1
 8005c18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005c1a:	f000 fc77 	bl	800650c <vPortExitCritical>

	return xReturn;
 8005c1e:	69fb      	ldr	r3, [r7, #28]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3720      	adds	r7, #32
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	2000060c 	.word	0x2000060c
 8005c2c:	20000620 	.word	0x20000620

08005c30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005c30:	b480      	push	{r7}
 8005c32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005c34:	4b03      	ldr	r3, [pc, #12]	@ (8005c44 <vTaskMissedYield+0x14>)
 8005c36:	2201      	movs	r2, #1
 8005c38:	601a      	str	r2, [r3, #0]
}
 8005c3a:	bf00      	nop
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr
 8005c44:	2000061c 	.word	0x2000061c

08005c48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005c50:	f000 f852 	bl	8005cf8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005c54:	4b06      	ldr	r3, [pc, #24]	@ (8005c70 <prvIdleTask+0x28>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d9f9      	bls.n	8005c50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005c5c:	4b05      	ldr	r3, [pc, #20]	@ (8005c74 <prvIdleTask+0x2c>)
 8005c5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	f3bf 8f4f 	dsb	sy
 8005c68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005c6c:	e7f0      	b.n	8005c50 <prvIdleTask+0x8>
 8005c6e:	bf00      	nop
 8005c70:	2000050c 	.word	0x2000050c
 8005c74:	e000ed04 	.word	0xe000ed04

08005c78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c7e:	2300      	movs	r3, #0
 8005c80:	607b      	str	r3, [r7, #4]
 8005c82:	e00c      	b.n	8005c9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	4613      	mov	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4413      	add	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4a12      	ldr	r2, [pc, #72]	@ (8005cd8 <prvInitialiseTaskLists+0x60>)
 8005c90:	4413      	add	r3, r2
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7fe fa9f 	bl	80041d6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	607b      	str	r3, [r7, #4]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2b06      	cmp	r3, #6
 8005ca2:	d9ef      	bls.n	8005c84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005ca4:	480d      	ldr	r0, [pc, #52]	@ (8005cdc <prvInitialiseTaskLists+0x64>)
 8005ca6:	f7fe fa96 	bl	80041d6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005caa:	480d      	ldr	r0, [pc, #52]	@ (8005ce0 <prvInitialiseTaskLists+0x68>)
 8005cac:	f7fe fa93 	bl	80041d6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005cb0:	480c      	ldr	r0, [pc, #48]	@ (8005ce4 <prvInitialiseTaskLists+0x6c>)
 8005cb2:	f7fe fa90 	bl	80041d6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005cb6:	480c      	ldr	r0, [pc, #48]	@ (8005ce8 <prvInitialiseTaskLists+0x70>)
 8005cb8:	f7fe fa8d 	bl	80041d6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005cbc:	480b      	ldr	r0, [pc, #44]	@ (8005cec <prvInitialiseTaskLists+0x74>)
 8005cbe:	f7fe fa8a 	bl	80041d6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8005cf0 <prvInitialiseTaskLists+0x78>)
 8005cc4:	4a05      	ldr	r2, [pc, #20]	@ (8005cdc <prvInitialiseTaskLists+0x64>)
 8005cc6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8005cf4 <prvInitialiseTaskLists+0x7c>)
 8005cca:	4a05      	ldr	r2, [pc, #20]	@ (8005ce0 <prvInitialiseTaskLists+0x68>)
 8005ccc:	601a      	str	r2, [r3, #0]
}
 8005cce:	bf00      	nop
 8005cd0:	3708      	adds	r7, #8
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	2000050c 	.word	0x2000050c
 8005cdc:	20000598 	.word	0x20000598
 8005ce0:	200005ac 	.word	0x200005ac
 8005ce4:	200005c8 	.word	0x200005c8
 8005ce8:	200005dc 	.word	0x200005dc
 8005cec:	200005f4 	.word	0x200005f4
 8005cf0:	200005c0 	.word	0x200005c0
 8005cf4:	200005c4 	.word	0x200005c4

08005cf8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cfe:	e019      	b.n	8005d34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005d00:	f000 fbd2 	bl	80064a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d04:	4b10      	ldr	r3, [pc, #64]	@ (8005d48 <prvCheckTasksWaitingTermination+0x50>)
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	3304      	adds	r3, #4
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7fe faea 	bl	80042ea <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005d16:	4b0d      	ldr	r3, [pc, #52]	@ (8005d4c <prvCheckTasksWaitingTermination+0x54>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	4a0b      	ldr	r2, [pc, #44]	@ (8005d4c <prvCheckTasksWaitingTermination+0x54>)
 8005d1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005d20:	4b0b      	ldr	r3, [pc, #44]	@ (8005d50 <prvCheckTasksWaitingTermination+0x58>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	3b01      	subs	r3, #1
 8005d26:	4a0a      	ldr	r2, [pc, #40]	@ (8005d50 <prvCheckTasksWaitingTermination+0x58>)
 8005d28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005d2a:	f000 fbef 	bl	800650c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f810 	bl	8005d54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d34:	4b06      	ldr	r3, [pc, #24]	@ (8005d50 <prvCheckTasksWaitingTermination+0x58>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1e1      	bne.n	8005d00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005d3c:	bf00      	nop
 8005d3e:	bf00      	nop
 8005d40:	3708      	adds	r7, #8
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	200005dc 	.word	0x200005dc
 8005d4c:	20000608 	.word	0x20000608
 8005d50:	200005f0 	.word	0x200005f0

08005d54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	334c      	adds	r3, #76	@ 0x4c
 8005d60:	4618      	mov	r0, r3
 8005d62:	f000 ff89 	bl	8006c78 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d108      	bne.n	8005d82 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d74:	4618      	mov	r0, r3
 8005d76:	f000 fd87 	bl	8006888 <vPortFree>
				vPortFree( pxTCB );
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 fd84 	bl	8006888 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005d80:	e019      	b.n	8005db6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d103      	bne.n	8005d94 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 fd7b 	bl	8006888 <vPortFree>
	}
 8005d92:	e010      	b.n	8005db6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d00b      	beq.n	8005db6 <prvDeleteTCB+0x62>
	__asm volatile
 8005d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da2:	f383 8811 	msr	BASEPRI, r3
 8005da6:	f3bf 8f6f 	isb	sy
 8005daa:	f3bf 8f4f 	dsb	sy
 8005dae:	60fb      	str	r3, [r7, #12]
}
 8005db0:	bf00      	nop
 8005db2:	bf00      	nop
 8005db4:	e7fd      	b.n	8005db2 <prvDeleteTCB+0x5e>
	}
 8005db6:	bf00      	nop
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
	...

08005dc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8005df8 <prvResetNextTaskUnblockTime+0x38>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d104      	bne.n	8005dda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8005dfc <prvResetNextTaskUnblockTime+0x3c>)
 8005dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8005dd6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005dd8:	e008      	b.n	8005dec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dda:	4b07      	ldr	r3, [pc, #28]	@ (8005df8 <prvResetNextTaskUnblockTime+0x38>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	4a04      	ldr	r2, [pc, #16]	@ (8005dfc <prvResetNextTaskUnblockTime+0x3c>)
 8005dea:	6013      	str	r3, [r2, #0]
}
 8005dec:	bf00      	nop
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr
 8005df8:	200005c0 	.word	0x200005c0
 8005dfc:	20000628 	.word	0x20000628

08005e00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005e06:	4b0b      	ldr	r3, [pc, #44]	@ (8005e34 <xTaskGetSchedulerState+0x34>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d102      	bne.n	8005e14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	607b      	str	r3, [r7, #4]
 8005e12:	e008      	b.n	8005e26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e14:	4b08      	ldr	r3, [pc, #32]	@ (8005e38 <xTaskGetSchedulerState+0x38>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d102      	bne.n	8005e22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	607b      	str	r3, [r7, #4]
 8005e20:	e001      	b.n	8005e26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005e22:	2300      	movs	r3, #0
 8005e24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005e26:	687b      	ldr	r3, [r7, #4]
	}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr
 8005e34:	20000614 	.word	0x20000614
 8005e38:	20000630 	.word	0x20000630

08005e3c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d05e      	beq.n	8005f10 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e56:	4b31      	ldr	r3, [pc, #196]	@ (8005f1c <xTaskPriorityInherit+0xe0>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d24e      	bcs.n	8005efe <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	db06      	blt.n	8005e76 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e68:	4b2c      	ldr	r3, [pc, #176]	@ (8005f1c <xTaskPriorityInherit+0xe0>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e6e:	f1c3 0207 	rsb	r2, r3, #7
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	6959      	ldr	r1, [r3, #20]
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e7e:	4613      	mov	r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4413      	add	r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	4a26      	ldr	r2, [pc, #152]	@ (8005f20 <xTaskPriorityInherit+0xe4>)
 8005e88:	4413      	add	r3, r2
 8005e8a:	4299      	cmp	r1, r3
 8005e8c:	d12f      	bne.n	8005eee <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	3304      	adds	r3, #4
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7fe fa29 	bl	80042ea <uxListRemove>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10a      	bne.n	8005eb4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea8:	43da      	mvns	r2, r3
 8005eaa:	4b1e      	ldr	r3, [pc, #120]	@ (8005f24 <xTaskPriorityInherit+0xe8>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4013      	ands	r3, r2
 8005eb0:	4a1c      	ldr	r2, [pc, #112]	@ (8005f24 <xTaskPriorityInherit+0xe8>)
 8005eb2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005eb4:	4b19      	ldr	r3, [pc, #100]	@ (8005f1c <xTaskPriorityInherit+0xe0>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	409a      	lsls	r2, r3
 8005ec6:	4b17      	ldr	r3, [pc, #92]	@ (8005f24 <xTaskPriorityInherit+0xe8>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	4a15      	ldr	r2, [pc, #84]	@ (8005f24 <xTaskPriorityInherit+0xe8>)
 8005ece:	6013      	str	r3, [r2, #0]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	4413      	add	r3, r2
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4a10      	ldr	r2, [pc, #64]	@ (8005f20 <xTaskPriorityInherit+0xe4>)
 8005ede:	441a      	add	r2, r3
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	3304      	adds	r3, #4
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	4610      	mov	r0, r2
 8005ee8:	f7fe f9a2 	bl	8004230 <vListInsertEnd>
 8005eec:	e004      	b.n	8005ef8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005eee:	4b0b      	ldr	r3, [pc, #44]	@ (8005f1c <xTaskPriorityInherit+0xe0>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	60fb      	str	r3, [r7, #12]
 8005efc:	e008      	b.n	8005f10 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f02:	4b06      	ldr	r3, [pc, #24]	@ (8005f1c <xTaskPriorityInherit+0xe0>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d201      	bcs.n	8005f10 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005f10:	68fb      	ldr	r3, [r7, #12]
	}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	20000508 	.word	0x20000508
 8005f20:	2000050c 	.word	0x2000050c
 8005f24:	20000610 	.word	0x20000610

08005f28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b086      	sub	sp, #24
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005f34:	2300      	movs	r3, #0
 8005f36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d070      	beq.n	8006020 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005f3e:	4b3b      	ldr	r3, [pc, #236]	@ (800602c <xTaskPriorityDisinherit+0x104>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d00b      	beq.n	8005f60 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f4c:	f383 8811 	msr	BASEPRI, r3
 8005f50:	f3bf 8f6f 	isb	sy
 8005f54:	f3bf 8f4f 	dsb	sy
 8005f58:	60fb      	str	r3, [r7, #12]
}
 8005f5a:	bf00      	nop
 8005f5c:	bf00      	nop
 8005f5e:	e7fd      	b.n	8005f5c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10b      	bne.n	8005f80 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f6c:	f383 8811 	msr	BASEPRI, r3
 8005f70:	f3bf 8f6f 	isb	sy
 8005f74:	f3bf 8f4f 	dsb	sy
 8005f78:	60bb      	str	r3, [r7, #8]
}
 8005f7a:	bf00      	nop
 8005f7c:	bf00      	nop
 8005f7e:	e7fd      	b.n	8005f7c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f84:	1e5a      	subs	r2, r3, #1
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d044      	beq.n	8006020 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d140      	bne.n	8006020 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	3304      	adds	r3, #4
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7fe f9a1 	bl	80042ea <uxListRemove>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d115      	bne.n	8005fda <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fb2:	491f      	ldr	r1, [pc, #124]	@ (8006030 <xTaskPriorityDisinherit+0x108>)
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4413      	add	r3, r2
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	440b      	add	r3, r1
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d10a      	bne.n	8005fda <xTaskPriorityDisinherit+0xb2>
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc8:	2201      	movs	r2, #1
 8005fca:	fa02 f303 	lsl.w	r3, r2, r3
 8005fce:	43da      	mvns	r2, r3
 8005fd0:	4b18      	ldr	r3, [pc, #96]	@ (8006034 <xTaskPriorityDisinherit+0x10c>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	4a17      	ldr	r2, [pc, #92]	@ (8006034 <xTaskPriorityDisinherit+0x10c>)
 8005fd8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fe6:	f1c3 0207 	rsb	r2, r3, #7
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	409a      	lsls	r2, r3
 8005ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8006034 <xTaskPriorityDisinherit+0x10c>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	4a0d      	ldr	r2, [pc, #52]	@ (8006034 <xTaskPriorityDisinherit+0x10c>)
 8005ffe:	6013      	str	r3, [r2, #0]
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006004:	4613      	mov	r3, r2
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4413      	add	r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	4a08      	ldr	r2, [pc, #32]	@ (8006030 <xTaskPriorityDisinherit+0x108>)
 800600e:	441a      	add	r2, r3
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	3304      	adds	r3, #4
 8006014:	4619      	mov	r1, r3
 8006016:	4610      	mov	r0, r2
 8006018:	f7fe f90a 	bl	8004230 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800601c:	2301      	movs	r3, #1
 800601e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006020:	697b      	ldr	r3, [r7, #20]
	}
 8006022:	4618      	mov	r0, r3
 8006024:	3718      	adds	r7, #24
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	20000508 	.word	0x20000508
 8006030:	2000050c 	.word	0x2000050c
 8006034:	20000610 	.word	0x20000610

08006038 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006038:	b580      	push	{r7, lr}
 800603a:	b088      	sub	sp, #32
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006046:	2301      	movs	r3, #1
 8006048:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d079      	beq.n	8006144 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10b      	bne.n	8006070 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800605c:	f383 8811 	msr	BASEPRI, r3
 8006060:	f3bf 8f6f 	isb	sy
 8006064:	f3bf 8f4f 	dsb	sy
 8006068:	60fb      	str	r3, [r7, #12]
}
 800606a:	bf00      	nop
 800606c:	bf00      	nop
 800606e:	e7fd      	b.n	800606c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006074:	683a      	ldr	r2, [r7, #0]
 8006076:	429a      	cmp	r2, r3
 8006078:	d902      	bls.n	8006080 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	61fb      	str	r3, [r7, #28]
 800607e:	e002      	b.n	8006086 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006084:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800608a:	69fa      	ldr	r2, [r7, #28]
 800608c:	429a      	cmp	r2, r3
 800608e:	d059      	beq.n	8006144 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	429a      	cmp	r2, r3
 8006098:	d154      	bne.n	8006144 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800609a:	4b2c      	ldr	r3, [pc, #176]	@ (800614c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d10b      	bne.n	80060bc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80060a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060a8:	f383 8811 	msr	BASEPRI, r3
 80060ac:	f3bf 8f6f 	isb	sy
 80060b0:	f3bf 8f4f 	dsb	sy
 80060b4:	60bb      	str	r3, [r7, #8]
}
 80060b6:	bf00      	nop
 80060b8:	bf00      	nop
 80060ba:	e7fd      	b.n	80060b8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060c0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	69fa      	ldr	r2, [r7, #28]
 80060c6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	db04      	blt.n	80060da <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	f1c3 0207 	rsb	r2, r3, #7
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	6959      	ldr	r1, [r3, #20]
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	4613      	mov	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4a19      	ldr	r2, [pc, #100]	@ (8006150 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80060ea:	4413      	add	r3, r2
 80060ec:	4299      	cmp	r1, r3
 80060ee:	d129      	bne.n	8006144 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	3304      	adds	r3, #4
 80060f4:	4618      	mov	r0, r3
 80060f6:	f7fe f8f8 	bl	80042ea <uxListRemove>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d10a      	bne.n	8006116 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006104:	2201      	movs	r2, #1
 8006106:	fa02 f303 	lsl.w	r3, r2, r3
 800610a:	43da      	mvns	r2, r3
 800610c:	4b11      	ldr	r3, [pc, #68]	@ (8006154 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4013      	ands	r3, r2
 8006112:	4a10      	ldr	r2, [pc, #64]	@ (8006154 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006114:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800611a:	2201      	movs	r2, #1
 800611c:	409a      	lsls	r2, r3
 800611e:	4b0d      	ldr	r3, [pc, #52]	@ (8006154 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4313      	orrs	r3, r2
 8006124:	4a0b      	ldr	r2, [pc, #44]	@ (8006154 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006126:	6013      	str	r3, [r2, #0]
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800612c:	4613      	mov	r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4413      	add	r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	4a06      	ldr	r2, [pc, #24]	@ (8006150 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006136:	441a      	add	r2, r3
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	3304      	adds	r3, #4
 800613c:	4619      	mov	r1, r3
 800613e:	4610      	mov	r0, r2
 8006140:	f7fe f876 	bl	8004230 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006144:	bf00      	nop
 8006146:	3720      	adds	r7, #32
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	20000508 	.word	0x20000508
 8006150:	2000050c 	.word	0x2000050c
 8006154:	20000610 	.word	0x20000610

08006158 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006158:	b480      	push	{r7}
 800615a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800615c:	4b07      	ldr	r3, [pc, #28]	@ (800617c <pvTaskIncrementMutexHeldCount+0x24>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d004      	beq.n	800616e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006164:	4b05      	ldr	r3, [pc, #20]	@ (800617c <pvTaskIncrementMutexHeldCount+0x24>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800616a:	3201      	adds	r2, #1
 800616c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800616e:	4b03      	ldr	r3, [pc, #12]	@ (800617c <pvTaskIncrementMutexHeldCount+0x24>)
 8006170:	681b      	ldr	r3, [r3, #0]
	}
 8006172:	4618      	mov	r0, r3
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	20000508 	.word	0x20000508

08006180 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800618a:	4b29      	ldr	r3, [pc, #164]	@ (8006230 <prvAddCurrentTaskToDelayedList+0xb0>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006190:	4b28      	ldr	r3, [pc, #160]	@ (8006234 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	3304      	adds	r3, #4
 8006196:	4618      	mov	r0, r3
 8006198:	f7fe f8a7 	bl	80042ea <uxListRemove>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d10b      	bne.n	80061ba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80061a2:	4b24      	ldr	r3, [pc, #144]	@ (8006234 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a8:	2201      	movs	r2, #1
 80061aa:	fa02 f303 	lsl.w	r3, r2, r3
 80061ae:	43da      	mvns	r2, r3
 80061b0:	4b21      	ldr	r3, [pc, #132]	@ (8006238 <prvAddCurrentTaskToDelayedList+0xb8>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4013      	ands	r3, r2
 80061b6:	4a20      	ldr	r2, [pc, #128]	@ (8006238 <prvAddCurrentTaskToDelayedList+0xb8>)
 80061b8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c0:	d10a      	bne.n	80061d8 <prvAddCurrentTaskToDelayedList+0x58>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d007      	beq.n	80061d8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061c8:	4b1a      	ldr	r3, [pc, #104]	@ (8006234 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	3304      	adds	r3, #4
 80061ce:	4619      	mov	r1, r3
 80061d0:	481a      	ldr	r0, [pc, #104]	@ (800623c <prvAddCurrentTaskToDelayedList+0xbc>)
 80061d2:	f7fe f82d 	bl	8004230 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80061d6:	e026      	b.n	8006226 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4413      	add	r3, r2
 80061de:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80061e0:	4b14      	ldr	r3, [pc, #80]	@ (8006234 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d209      	bcs.n	8006204 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061f0:	4b13      	ldr	r3, [pc, #76]	@ (8006240 <prvAddCurrentTaskToDelayedList+0xc0>)
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	4b0f      	ldr	r3, [pc, #60]	@ (8006234 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	3304      	adds	r3, #4
 80061fa:	4619      	mov	r1, r3
 80061fc:	4610      	mov	r0, r2
 80061fe:	f7fe f83b 	bl	8004278 <vListInsert>
}
 8006202:	e010      	b.n	8006226 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006204:	4b0f      	ldr	r3, [pc, #60]	@ (8006244 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	4b0a      	ldr	r3, [pc, #40]	@ (8006234 <prvAddCurrentTaskToDelayedList+0xb4>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	3304      	adds	r3, #4
 800620e:	4619      	mov	r1, r3
 8006210:	4610      	mov	r0, r2
 8006212:	f7fe f831 	bl	8004278 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006216:	4b0c      	ldr	r3, [pc, #48]	@ (8006248 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	429a      	cmp	r2, r3
 800621e:	d202      	bcs.n	8006226 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006220:	4a09      	ldr	r2, [pc, #36]	@ (8006248 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	6013      	str	r3, [r2, #0]
}
 8006226:	bf00      	nop
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	2000060c 	.word	0x2000060c
 8006234:	20000508 	.word	0x20000508
 8006238:	20000610 	.word	0x20000610
 800623c:	200005f4 	.word	0x200005f4
 8006240:	200005c4 	.word	0x200005c4
 8006244:	200005c0 	.word	0x200005c0
 8006248:	20000628 	.word	0x20000628

0800624c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	3b04      	subs	r3, #4
 800625c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006264:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	3b04      	subs	r3, #4
 800626a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	f023 0201 	bic.w	r2, r3, #1
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	3b04      	subs	r3, #4
 800627a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800627c:	4a0c      	ldr	r2, [pc, #48]	@ (80062b0 <pxPortInitialiseStack+0x64>)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	3b14      	subs	r3, #20
 8006286:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	3b04      	subs	r3, #4
 8006292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f06f 0202 	mvn.w	r2, #2
 800629a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	3b20      	subs	r3, #32
 80062a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80062a2:	68fb      	ldr	r3, [r7, #12]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3714      	adds	r7, #20
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr
 80062b0:	080062b5 	.word	0x080062b5

080062b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80062ba:	2300      	movs	r3, #0
 80062bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80062be:	4b13      	ldr	r3, [pc, #76]	@ (800630c <prvTaskExitError+0x58>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c6:	d00b      	beq.n	80062e0 <prvTaskExitError+0x2c>
	__asm volatile
 80062c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062cc:	f383 8811 	msr	BASEPRI, r3
 80062d0:	f3bf 8f6f 	isb	sy
 80062d4:	f3bf 8f4f 	dsb	sy
 80062d8:	60fb      	str	r3, [r7, #12]
}
 80062da:	bf00      	nop
 80062dc:	bf00      	nop
 80062de:	e7fd      	b.n	80062dc <prvTaskExitError+0x28>
	__asm volatile
 80062e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	60bb      	str	r3, [r7, #8]
}
 80062f2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80062f4:	bf00      	nop
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d0fc      	beq.n	80062f6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80062fc:	bf00      	nop
 80062fe:	bf00      	nop
 8006300:	3714      	adds	r7, #20
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	200000ac 	.word	0x200000ac

08006310 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006310:	4b07      	ldr	r3, [pc, #28]	@ (8006330 <pxCurrentTCBConst2>)
 8006312:	6819      	ldr	r1, [r3, #0]
 8006314:	6808      	ldr	r0, [r1, #0]
 8006316:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800631a:	f380 8809 	msr	PSP, r0
 800631e:	f3bf 8f6f 	isb	sy
 8006322:	f04f 0000 	mov.w	r0, #0
 8006326:	f380 8811 	msr	BASEPRI, r0
 800632a:	4770      	bx	lr
 800632c:	f3af 8000 	nop.w

08006330 <pxCurrentTCBConst2>:
 8006330:	20000508 	.word	0x20000508
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006334:	bf00      	nop
 8006336:	bf00      	nop

08006338 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006338:	4808      	ldr	r0, [pc, #32]	@ (800635c <prvPortStartFirstTask+0x24>)
 800633a:	6800      	ldr	r0, [r0, #0]
 800633c:	6800      	ldr	r0, [r0, #0]
 800633e:	f380 8808 	msr	MSP, r0
 8006342:	f04f 0000 	mov.w	r0, #0
 8006346:	f380 8814 	msr	CONTROL, r0
 800634a:	b662      	cpsie	i
 800634c:	b661      	cpsie	f
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	f3bf 8f6f 	isb	sy
 8006356:	df00      	svc	0
 8006358:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800635a:	bf00      	nop
 800635c:	e000ed08 	.word	0xe000ed08

08006360 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006366:	4b47      	ldr	r3, [pc, #284]	@ (8006484 <xPortStartScheduler+0x124>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a47      	ldr	r2, [pc, #284]	@ (8006488 <xPortStartScheduler+0x128>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d10b      	bne.n	8006388 <xPortStartScheduler+0x28>
	__asm volatile
 8006370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006374:	f383 8811 	msr	BASEPRI, r3
 8006378:	f3bf 8f6f 	isb	sy
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	60fb      	str	r3, [r7, #12]
}
 8006382:	bf00      	nop
 8006384:	bf00      	nop
 8006386:	e7fd      	b.n	8006384 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006388:	4b3e      	ldr	r3, [pc, #248]	@ (8006484 <xPortStartScheduler+0x124>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a3f      	ldr	r2, [pc, #252]	@ (800648c <xPortStartScheduler+0x12c>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d10b      	bne.n	80063aa <xPortStartScheduler+0x4a>
	__asm volatile
 8006392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006396:	f383 8811 	msr	BASEPRI, r3
 800639a:	f3bf 8f6f 	isb	sy
 800639e:	f3bf 8f4f 	dsb	sy
 80063a2:	613b      	str	r3, [r7, #16]
}
 80063a4:	bf00      	nop
 80063a6:	bf00      	nop
 80063a8:	e7fd      	b.n	80063a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80063aa:	4b39      	ldr	r3, [pc, #228]	@ (8006490 <xPortStartScheduler+0x130>)
 80063ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	22ff      	movs	r2, #255	@ 0xff
 80063ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80063c4:	78fb      	ldrb	r3, [r7, #3]
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80063cc:	b2da      	uxtb	r2, r3
 80063ce:	4b31      	ldr	r3, [pc, #196]	@ (8006494 <xPortStartScheduler+0x134>)
 80063d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80063d2:	4b31      	ldr	r3, [pc, #196]	@ (8006498 <xPortStartScheduler+0x138>)
 80063d4:	2207      	movs	r2, #7
 80063d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063d8:	e009      	b.n	80063ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80063da:	4b2f      	ldr	r3, [pc, #188]	@ (8006498 <xPortStartScheduler+0x138>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	3b01      	subs	r3, #1
 80063e0:	4a2d      	ldr	r2, [pc, #180]	@ (8006498 <xPortStartScheduler+0x138>)
 80063e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80063e4:	78fb      	ldrb	r3, [r7, #3]
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	005b      	lsls	r3, r3, #1
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063ee:	78fb      	ldrb	r3, [r7, #3]
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063f6:	2b80      	cmp	r3, #128	@ 0x80
 80063f8:	d0ef      	beq.n	80063da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80063fa:	4b27      	ldr	r3, [pc, #156]	@ (8006498 <xPortStartScheduler+0x138>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f1c3 0307 	rsb	r3, r3, #7
 8006402:	2b04      	cmp	r3, #4
 8006404:	d00b      	beq.n	800641e <xPortStartScheduler+0xbe>
	__asm volatile
 8006406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800640a:	f383 8811 	msr	BASEPRI, r3
 800640e:	f3bf 8f6f 	isb	sy
 8006412:	f3bf 8f4f 	dsb	sy
 8006416:	60bb      	str	r3, [r7, #8]
}
 8006418:	bf00      	nop
 800641a:	bf00      	nop
 800641c:	e7fd      	b.n	800641a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800641e:	4b1e      	ldr	r3, [pc, #120]	@ (8006498 <xPortStartScheduler+0x138>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	021b      	lsls	r3, r3, #8
 8006424:	4a1c      	ldr	r2, [pc, #112]	@ (8006498 <xPortStartScheduler+0x138>)
 8006426:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006428:	4b1b      	ldr	r3, [pc, #108]	@ (8006498 <xPortStartScheduler+0x138>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006430:	4a19      	ldr	r2, [pc, #100]	@ (8006498 <xPortStartScheduler+0x138>)
 8006432:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	b2da      	uxtb	r2, r3
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800643c:	4b17      	ldr	r3, [pc, #92]	@ (800649c <xPortStartScheduler+0x13c>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a16      	ldr	r2, [pc, #88]	@ (800649c <xPortStartScheduler+0x13c>)
 8006442:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006446:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006448:	4b14      	ldr	r3, [pc, #80]	@ (800649c <xPortStartScheduler+0x13c>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a13      	ldr	r2, [pc, #76]	@ (800649c <xPortStartScheduler+0x13c>)
 800644e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006452:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006454:	f000 f8da 	bl	800660c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006458:	4b11      	ldr	r3, [pc, #68]	@ (80064a0 <xPortStartScheduler+0x140>)
 800645a:	2200      	movs	r2, #0
 800645c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800645e:	f000 f8f9 	bl	8006654 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006462:	4b10      	ldr	r3, [pc, #64]	@ (80064a4 <xPortStartScheduler+0x144>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a0f      	ldr	r2, [pc, #60]	@ (80064a4 <xPortStartScheduler+0x144>)
 8006468:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800646c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800646e:	f7ff ff63 	bl	8006338 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006472:	f7ff fa75 	bl	8005960 <vTaskSwitchContext>
	prvTaskExitError();
 8006476:	f7ff ff1d 	bl	80062b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3718      	adds	r7, #24
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	e000ed00 	.word	0xe000ed00
 8006488:	410fc271 	.word	0x410fc271
 800648c:	410fc270 	.word	0x410fc270
 8006490:	e000e400 	.word	0xe000e400
 8006494:	20000634 	.word	0x20000634
 8006498:	20000638 	.word	0x20000638
 800649c:	e000ed20 	.word	0xe000ed20
 80064a0:	200000ac 	.word	0x200000ac
 80064a4:	e000ef34 	.word	0xe000ef34

080064a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
	__asm volatile
 80064ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b2:	f383 8811 	msr	BASEPRI, r3
 80064b6:	f3bf 8f6f 	isb	sy
 80064ba:	f3bf 8f4f 	dsb	sy
 80064be:	607b      	str	r3, [r7, #4]
}
 80064c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80064c2:	4b10      	ldr	r3, [pc, #64]	@ (8006504 <vPortEnterCritical+0x5c>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	3301      	adds	r3, #1
 80064c8:	4a0e      	ldr	r2, [pc, #56]	@ (8006504 <vPortEnterCritical+0x5c>)
 80064ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80064cc:	4b0d      	ldr	r3, [pc, #52]	@ (8006504 <vPortEnterCritical+0x5c>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d110      	bne.n	80064f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80064d4:	4b0c      	ldr	r3, [pc, #48]	@ (8006508 <vPortEnterCritical+0x60>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00b      	beq.n	80064f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80064de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e2:	f383 8811 	msr	BASEPRI, r3
 80064e6:	f3bf 8f6f 	isb	sy
 80064ea:	f3bf 8f4f 	dsb	sy
 80064ee:	603b      	str	r3, [r7, #0]
}
 80064f0:	bf00      	nop
 80064f2:	bf00      	nop
 80064f4:	e7fd      	b.n	80064f2 <vPortEnterCritical+0x4a>
	}
}
 80064f6:	bf00      	nop
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	200000ac 	.word	0x200000ac
 8006508:	e000ed04 	.word	0xe000ed04

0800650c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006512:	4b12      	ldr	r3, [pc, #72]	@ (800655c <vPortExitCritical+0x50>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10b      	bne.n	8006532 <vPortExitCritical+0x26>
	__asm volatile
 800651a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800651e:	f383 8811 	msr	BASEPRI, r3
 8006522:	f3bf 8f6f 	isb	sy
 8006526:	f3bf 8f4f 	dsb	sy
 800652a:	607b      	str	r3, [r7, #4]
}
 800652c:	bf00      	nop
 800652e:	bf00      	nop
 8006530:	e7fd      	b.n	800652e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006532:	4b0a      	ldr	r3, [pc, #40]	@ (800655c <vPortExitCritical+0x50>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	3b01      	subs	r3, #1
 8006538:	4a08      	ldr	r2, [pc, #32]	@ (800655c <vPortExitCritical+0x50>)
 800653a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800653c:	4b07      	ldr	r3, [pc, #28]	@ (800655c <vPortExitCritical+0x50>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d105      	bne.n	8006550 <vPortExitCritical+0x44>
 8006544:	2300      	movs	r3, #0
 8006546:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	f383 8811 	msr	BASEPRI, r3
}
 800654e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006550:	bf00      	nop
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr
 800655c:	200000ac 	.word	0x200000ac

08006560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006560:	f3ef 8009 	mrs	r0, PSP
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	4b15      	ldr	r3, [pc, #84]	@ (80065c0 <pxCurrentTCBConst>)
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	f01e 0f10 	tst.w	lr, #16
 8006570:	bf08      	it	eq
 8006572:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006576:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800657a:	6010      	str	r0, [r2, #0]
 800657c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006580:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006584:	f380 8811 	msr	BASEPRI, r0
 8006588:	f3bf 8f4f 	dsb	sy
 800658c:	f3bf 8f6f 	isb	sy
 8006590:	f7ff f9e6 	bl	8005960 <vTaskSwitchContext>
 8006594:	f04f 0000 	mov.w	r0, #0
 8006598:	f380 8811 	msr	BASEPRI, r0
 800659c:	bc09      	pop	{r0, r3}
 800659e:	6819      	ldr	r1, [r3, #0]
 80065a0:	6808      	ldr	r0, [r1, #0]
 80065a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a6:	f01e 0f10 	tst.w	lr, #16
 80065aa:	bf08      	it	eq
 80065ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80065b0:	f380 8809 	msr	PSP, r0
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	4770      	bx	lr
 80065ba:	bf00      	nop
 80065bc:	f3af 8000 	nop.w

080065c0 <pxCurrentTCBConst>:
 80065c0:	20000508 	.word	0x20000508
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80065c4:	bf00      	nop
 80065c6:	bf00      	nop

080065c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
	__asm volatile
 80065ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065d2:	f383 8811 	msr	BASEPRI, r3
 80065d6:	f3bf 8f6f 	isb	sy
 80065da:	f3bf 8f4f 	dsb	sy
 80065de:	607b      	str	r3, [r7, #4]
}
 80065e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80065e2:	f7ff f903 	bl	80057ec <xTaskIncrementTick>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d003      	beq.n	80065f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80065ec:	4b06      	ldr	r3, [pc, #24]	@ (8006608 <SysTick_Handler+0x40>)
 80065ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065f2:	601a      	str	r2, [r3, #0]
 80065f4:	2300      	movs	r3, #0
 80065f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	f383 8811 	msr	BASEPRI, r3
}
 80065fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006600:	bf00      	nop
 8006602:	3708      	adds	r7, #8
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	e000ed04 	.word	0xe000ed04

0800660c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800660c:	b480      	push	{r7}
 800660e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006610:	4b0b      	ldr	r3, [pc, #44]	@ (8006640 <vPortSetupTimerInterrupt+0x34>)
 8006612:	2200      	movs	r2, #0
 8006614:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006616:	4b0b      	ldr	r3, [pc, #44]	@ (8006644 <vPortSetupTimerInterrupt+0x38>)
 8006618:	2200      	movs	r2, #0
 800661a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800661c:	4b0a      	ldr	r3, [pc, #40]	@ (8006648 <vPortSetupTimerInterrupt+0x3c>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a0a      	ldr	r2, [pc, #40]	@ (800664c <vPortSetupTimerInterrupt+0x40>)
 8006622:	fba2 2303 	umull	r2, r3, r2, r3
 8006626:	099b      	lsrs	r3, r3, #6
 8006628:	4a09      	ldr	r2, [pc, #36]	@ (8006650 <vPortSetupTimerInterrupt+0x44>)
 800662a:	3b01      	subs	r3, #1
 800662c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800662e:	4b04      	ldr	r3, [pc, #16]	@ (8006640 <vPortSetupTimerInterrupt+0x34>)
 8006630:	2207      	movs	r2, #7
 8006632:	601a      	str	r2, [r3, #0]
}
 8006634:	bf00      	nop
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	e000e010 	.word	0xe000e010
 8006644:	e000e018 	.word	0xe000e018
 8006648:	20000000 	.word	0x20000000
 800664c:	10624dd3 	.word	0x10624dd3
 8006650:	e000e014 	.word	0xe000e014

08006654 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006654:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006664 <vPortEnableVFP+0x10>
 8006658:	6801      	ldr	r1, [r0, #0]
 800665a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800665e:	6001      	str	r1, [r0, #0]
 8006660:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006662:	bf00      	nop
 8006664:	e000ed88 	.word	0xe000ed88

08006668 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800666e:	f3ef 8305 	mrs	r3, IPSR
 8006672:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2b0f      	cmp	r3, #15
 8006678:	d915      	bls.n	80066a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800667a:	4a18      	ldr	r2, [pc, #96]	@ (80066dc <vPortValidateInterruptPriority+0x74>)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	4413      	add	r3, r2
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006684:	4b16      	ldr	r3, [pc, #88]	@ (80066e0 <vPortValidateInterruptPriority+0x78>)
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	7afa      	ldrb	r2, [r7, #11]
 800668a:	429a      	cmp	r2, r3
 800668c:	d20b      	bcs.n	80066a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800668e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006692:	f383 8811 	msr	BASEPRI, r3
 8006696:	f3bf 8f6f 	isb	sy
 800669a:	f3bf 8f4f 	dsb	sy
 800669e:	607b      	str	r3, [r7, #4]
}
 80066a0:	bf00      	nop
 80066a2:	bf00      	nop
 80066a4:	e7fd      	b.n	80066a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80066a6:	4b0f      	ldr	r3, [pc, #60]	@ (80066e4 <vPortValidateInterruptPriority+0x7c>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80066ae:	4b0e      	ldr	r3, [pc, #56]	@ (80066e8 <vPortValidateInterruptPriority+0x80>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d90b      	bls.n	80066ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80066b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ba:	f383 8811 	msr	BASEPRI, r3
 80066be:	f3bf 8f6f 	isb	sy
 80066c2:	f3bf 8f4f 	dsb	sy
 80066c6:	603b      	str	r3, [r7, #0]
}
 80066c8:	bf00      	nop
 80066ca:	bf00      	nop
 80066cc:	e7fd      	b.n	80066ca <vPortValidateInterruptPriority+0x62>
	}
 80066ce:	bf00      	nop
 80066d0:	3714      	adds	r7, #20
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	e000e3f0 	.word	0xe000e3f0
 80066e0:	20000634 	.word	0x20000634
 80066e4:	e000ed0c 	.word	0xe000ed0c
 80066e8:	20000638 	.word	0x20000638

080066ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b08a      	sub	sp, #40	@ 0x28
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80066f4:	2300      	movs	r3, #0
 80066f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80066f8:	f7fe ffcc 	bl	8005694 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80066fc:	4b5c      	ldr	r3, [pc, #368]	@ (8006870 <pvPortMalloc+0x184>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d101      	bne.n	8006708 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006704:	f000 f924 	bl	8006950 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006708:	4b5a      	ldr	r3, [pc, #360]	@ (8006874 <pvPortMalloc+0x188>)
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4013      	ands	r3, r2
 8006710:	2b00      	cmp	r3, #0
 8006712:	f040 8095 	bne.w	8006840 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d01e      	beq.n	800675a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800671c:	2208      	movs	r2, #8
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4413      	add	r3, r2
 8006722:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f003 0307 	and.w	r3, r3, #7
 800672a:	2b00      	cmp	r3, #0
 800672c:	d015      	beq.n	800675a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f023 0307 	bic.w	r3, r3, #7
 8006734:	3308      	adds	r3, #8
 8006736:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f003 0307 	and.w	r3, r3, #7
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00b      	beq.n	800675a <pvPortMalloc+0x6e>
	__asm volatile
 8006742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006746:	f383 8811 	msr	BASEPRI, r3
 800674a:	f3bf 8f6f 	isb	sy
 800674e:	f3bf 8f4f 	dsb	sy
 8006752:	617b      	str	r3, [r7, #20]
}
 8006754:	bf00      	nop
 8006756:	bf00      	nop
 8006758:	e7fd      	b.n	8006756 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d06f      	beq.n	8006840 <pvPortMalloc+0x154>
 8006760:	4b45      	ldr	r3, [pc, #276]	@ (8006878 <pvPortMalloc+0x18c>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	429a      	cmp	r2, r3
 8006768:	d86a      	bhi.n	8006840 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800676a:	4b44      	ldr	r3, [pc, #272]	@ (800687c <pvPortMalloc+0x190>)
 800676c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800676e:	4b43      	ldr	r3, [pc, #268]	@ (800687c <pvPortMalloc+0x190>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006774:	e004      	b.n	8006780 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006778:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800677a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	429a      	cmp	r2, r3
 8006788:	d903      	bls.n	8006792 <pvPortMalloc+0xa6>
 800678a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1f1      	bne.n	8006776 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006792:	4b37      	ldr	r3, [pc, #220]	@ (8006870 <pvPortMalloc+0x184>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006798:	429a      	cmp	r2, r3
 800679a:	d051      	beq.n	8006840 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800679c:	6a3b      	ldr	r3, [r7, #32]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2208      	movs	r2, #8
 80067a2:	4413      	add	r3, r2
 80067a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80067a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	6a3b      	ldr	r3, [r7, #32]
 80067ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80067ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b0:	685a      	ldr	r2, [r3, #4]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	1ad2      	subs	r2, r2, r3
 80067b6:	2308      	movs	r3, #8
 80067b8:	005b      	lsls	r3, r3, #1
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d920      	bls.n	8006800 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80067be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4413      	add	r3, r2
 80067c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	f003 0307 	and.w	r3, r3, #7
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00b      	beq.n	80067e8 <pvPortMalloc+0xfc>
	__asm volatile
 80067d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d4:	f383 8811 	msr	BASEPRI, r3
 80067d8:	f3bf 8f6f 	isb	sy
 80067dc:	f3bf 8f4f 	dsb	sy
 80067e0:	613b      	str	r3, [r7, #16]
}
 80067e2:	bf00      	nop
 80067e4:	bf00      	nop
 80067e6:	e7fd      	b.n	80067e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80067e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ea:	685a      	ldr	r2, [r3, #4]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	1ad2      	subs	r2, r2, r3
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80067f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80067fa:	69b8      	ldr	r0, [r7, #24]
 80067fc:	f000 f90a 	bl	8006a14 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006800:	4b1d      	ldr	r3, [pc, #116]	@ (8006878 <pvPortMalloc+0x18c>)
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	4a1b      	ldr	r2, [pc, #108]	@ (8006878 <pvPortMalloc+0x18c>)
 800680c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800680e:	4b1a      	ldr	r3, [pc, #104]	@ (8006878 <pvPortMalloc+0x18c>)
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	4b1b      	ldr	r3, [pc, #108]	@ (8006880 <pvPortMalloc+0x194>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	429a      	cmp	r2, r3
 8006818:	d203      	bcs.n	8006822 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800681a:	4b17      	ldr	r3, [pc, #92]	@ (8006878 <pvPortMalloc+0x18c>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a18      	ldr	r2, [pc, #96]	@ (8006880 <pvPortMalloc+0x194>)
 8006820:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006824:	685a      	ldr	r2, [r3, #4]
 8006826:	4b13      	ldr	r3, [pc, #76]	@ (8006874 <pvPortMalloc+0x188>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	431a      	orrs	r2, r3
 800682c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006832:	2200      	movs	r2, #0
 8006834:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006836:	4b13      	ldr	r3, [pc, #76]	@ (8006884 <pvPortMalloc+0x198>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	3301      	adds	r3, #1
 800683c:	4a11      	ldr	r2, [pc, #68]	@ (8006884 <pvPortMalloc+0x198>)
 800683e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006840:	f7fe ff36 	bl	80056b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	f003 0307 	and.w	r3, r3, #7
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00b      	beq.n	8006866 <pvPortMalloc+0x17a>
	__asm volatile
 800684e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006852:	f383 8811 	msr	BASEPRI, r3
 8006856:	f3bf 8f6f 	isb	sy
 800685a:	f3bf 8f4f 	dsb	sy
 800685e:	60fb      	str	r3, [r7, #12]
}
 8006860:	bf00      	nop
 8006862:	bf00      	nop
 8006864:	e7fd      	b.n	8006862 <pvPortMalloc+0x176>
	return pvReturn;
 8006866:	69fb      	ldr	r3, [r7, #28]
}
 8006868:	4618      	mov	r0, r3
 800686a:	3728      	adds	r7, #40	@ 0x28
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	20004244 	.word	0x20004244
 8006874:	20004258 	.word	0x20004258
 8006878:	20004248 	.word	0x20004248
 800687c:	2000423c 	.word	0x2000423c
 8006880:	2000424c 	.word	0x2000424c
 8006884:	20004250 	.word	0x20004250

08006888 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b086      	sub	sp, #24
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d04f      	beq.n	800693a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800689a:	2308      	movs	r3, #8
 800689c:	425b      	negs	r3, r3
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	4413      	add	r3, r2
 80068a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	685a      	ldr	r2, [r3, #4]
 80068ac:	4b25      	ldr	r3, [pc, #148]	@ (8006944 <vPortFree+0xbc>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4013      	ands	r3, r2
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d10b      	bne.n	80068ce <vPortFree+0x46>
	__asm volatile
 80068b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ba:	f383 8811 	msr	BASEPRI, r3
 80068be:	f3bf 8f6f 	isb	sy
 80068c2:	f3bf 8f4f 	dsb	sy
 80068c6:	60fb      	str	r3, [r7, #12]
}
 80068c8:	bf00      	nop
 80068ca:	bf00      	nop
 80068cc:	e7fd      	b.n	80068ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00b      	beq.n	80068ee <vPortFree+0x66>
	__asm volatile
 80068d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068da:	f383 8811 	msr	BASEPRI, r3
 80068de:	f3bf 8f6f 	isb	sy
 80068e2:	f3bf 8f4f 	dsb	sy
 80068e6:	60bb      	str	r3, [r7, #8]
}
 80068e8:	bf00      	nop
 80068ea:	bf00      	nop
 80068ec:	e7fd      	b.n	80068ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	685a      	ldr	r2, [r3, #4]
 80068f2:	4b14      	ldr	r3, [pc, #80]	@ (8006944 <vPortFree+0xbc>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4013      	ands	r3, r2
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d01e      	beq.n	800693a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d11a      	bne.n	800693a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	685a      	ldr	r2, [r3, #4]
 8006908:	4b0e      	ldr	r3, [pc, #56]	@ (8006944 <vPortFree+0xbc>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	43db      	mvns	r3, r3
 800690e:	401a      	ands	r2, r3
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006914:	f7fe febe 	bl	8005694 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	685a      	ldr	r2, [r3, #4]
 800691c:	4b0a      	ldr	r3, [pc, #40]	@ (8006948 <vPortFree+0xc0>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4413      	add	r3, r2
 8006922:	4a09      	ldr	r2, [pc, #36]	@ (8006948 <vPortFree+0xc0>)
 8006924:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006926:	6938      	ldr	r0, [r7, #16]
 8006928:	f000 f874 	bl	8006a14 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800692c:	4b07      	ldr	r3, [pc, #28]	@ (800694c <vPortFree+0xc4>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	3301      	adds	r3, #1
 8006932:	4a06      	ldr	r2, [pc, #24]	@ (800694c <vPortFree+0xc4>)
 8006934:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006936:	f7fe febb 	bl	80056b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800693a:	bf00      	nop
 800693c:	3718      	adds	r7, #24
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	20004258 	.word	0x20004258
 8006948:	20004248 	.word	0x20004248
 800694c:	20004254 	.word	0x20004254

08006950 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006956:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800695a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800695c:	4b27      	ldr	r3, [pc, #156]	@ (80069fc <prvHeapInit+0xac>)
 800695e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f003 0307 	and.w	r3, r3, #7
 8006966:	2b00      	cmp	r3, #0
 8006968:	d00c      	beq.n	8006984 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	3307      	adds	r3, #7
 800696e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f023 0307 	bic.w	r3, r3, #7
 8006976:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	4a1f      	ldr	r2, [pc, #124]	@ (80069fc <prvHeapInit+0xac>)
 8006980:	4413      	add	r3, r2
 8006982:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006988:	4a1d      	ldr	r2, [pc, #116]	@ (8006a00 <prvHeapInit+0xb0>)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800698e:	4b1c      	ldr	r3, [pc, #112]	@ (8006a00 <prvHeapInit+0xb0>)
 8006990:	2200      	movs	r2, #0
 8006992:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	4413      	add	r3, r2
 800699a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800699c:	2208      	movs	r2, #8
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	1a9b      	subs	r3, r3, r2
 80069a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f023 0307 	bic.w	r3, r3, #7
 80069aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	4a15      	ldr	r2, [pc, #84]	@ (8006a04 <prvHeapInit+0xb4>)
 80069b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80069b2:	4b14      	ldr	r3, [pc, #80]	@ (8006a04 <prvHeapInit+0xb4>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2200      	movs	r2, #0
 80069b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80069ba:	4b12      	ldr	r3, [pc, #72]	@ (8006a04 <prvHeapInit+0xb4>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2200      	movs	r2, #0
 80069c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	1ad2      	subs	r2, r2, r3
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80069d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006a04 <prvHeapInit+0xb4>)
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	4a0a      	ldr	r2, [pc, #40]	@ (8006a08 <prvHeapInit+0xb8>)
 80069de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	4a09      	ldr	r2, [pc, #36]	@ (8006a0c <prvHeapInit+0xbc>)
 80069e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80069e8:	4b09      	ldr	r3, [pc, #36]	@ (8006a10 <prvHeapInit+0xc0>)
 80069ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80069ee:	601a      	str	r2, [r3, #0]
}
 80069f0:	bf00      	nop
 80069f2:	3714      	adds	r7, #20
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr
 80069fc:	2000063c 	.word	0x2000063c
 8006a00:	2000423c 	.word	0x2000423c
 8006a04:	20004244 	.word	0x20004244
 8006a08:	2000424c 	.word	0x2000424c
 8006a0c:	20004248 	.word	0x20004248
 8006a10:	20004258 	.word	0x20004258

08006a14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006a1c:	4b28      	ldr	r3, [pc, #160]	@ (8006ac0 <prvInsertBlockIntoFreeList+0xac>)
 8006a1e:	60fb      	str	r3, [r7, #12]
 8006a20:	e002      	b.n	8006a28 <prvInsertBlockIntoFreeList+0x14>
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	60fb      	str	r3, [r7, #12]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d8f7      	bhi.n	8006a22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	68ba      	ldr	r2, [r7, #8]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d108      	bne.n	8006a56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	685a      	ldr	r2, [r3, #4]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	441a      	add	r2, r3
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	68ba      	ldr	r2, [r7, #8]
 8006a60:	441a      	add	r2, r3
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d118      	bne.n	8006a9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	4b15      	ldr	r3, [pc, #84]	@ (8006ac4 <prvInsertBlockIntoFreeList+0xb0>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d00d      	beq.n	8006a92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	685a      	ldr	r2, [r3, #4]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	441a      	add	r2, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	601a      	str	r2, [r3, #0]
 8006a90:	e008      	b.n	8006aa4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a92:	4b0c      	ldr	r3, [pc, #48]	@ (8006ac4 <prvInsertBlockIntoFreeList+0xb0>)
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	601a      	str	r2, [r3, #0]
 8006a9a:	e003      	b.n	8006aa4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d002      	beq.n	8006ab2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ab2:	bf00      	nop
 8006ab4:	3714      	adds	r7, #20
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	2000423c 	.word	0x2000423c
 8006ac4:	20004244 	.word	0x20004244

08006ac8 <sbrk_aligned>:
 8006ac8:	b570      	push	{r4, r5, r6, lr}
 8006aca:	4e0f      	ldr	r6, [pc, #60]	@ (8006b08 <sbrk_aligned+0x40>)
 8006acc:	460c      	mov	r4, r1
 8006ace:	6831      	ldr	r1, [r6, #0]
 8006ad0:	4605      	mov	r5, r0
 8006ad2:	b911      	cbnz	r1, 8006ada <sbrk_aligned+0x12>
 8006ad4:	f000 f92e 	bl	8006d34 <_sbrk_r>
 8006ad8:	6030      	str	r0, [r6, #0]
 8006ada:	4621      	mov	r1, r4
 8006adc:	4628      	mov	r0, r5
 8006ade:	f000 f929 	bl	8006d34 <_sbrk_r>
 8006ae2:	1c43      	adds	r3, r0, #1
 8006ae4:	d103      	bne.n	8006aee <sbrk_aligned+0x26>
 8006ae6:	f04f 34ff 	mov.w	r4, #4294967295
 8006aea:	4620      	mov	r0, r4
 8006aec:	bd70      	pop	{r4, r5, r6, pc}
 8006aee:	1cc4      	adds	r4, r0, #3
 8006af0:	f024 0403 	bic.w	r4, r4, #3
 8006af4:	42a0      	cmp	r0, r4
 8006af6:	d0f8      	beq.n	8006aea <sbrk_aligned+0x22>
 8006af8:	1a21      	subs	r1, r4, r0
 8006afa:	4628      	mov	r0, r5
 8006afc:	f000 f91a 	bl	8006d34 <_sbrk_r>
 8006b00:	3001      	adds	r0, #1
 8006b02:	d1f2      	bne.n	8006aea <sbrk_aligned+0x22>
 8006b04:	e7ef      	b.n	8006ae6 <sbrk_aligned+0x1e>
 8006b06:	bf00      	nop
 8006b08:	2000425c 	.word	0x2000425c

08006b0c <_malloc_r>:
 8006b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b10:	1ccd      	adds	r5, r1, #3
 8006b12:	f025 0503 	bic.w	r5, r5, #3
 8006b16:	3508      	adds	r5, #8
 8006b18:	2d0c      	cmp	r5, #12
 8006b1a:	bf38      	it	cc
 8006b1c:	250c      	movcc	r5, #12
 8006b1e:	2d00      	cmp	r5, #0
 8006b20:	4606      	mov	r6, r0
 8006b22:	db01      	blt.n	8006b28 <_malloc_r+0x1c>
 8006b24:	42a9      	cmp	r1, r5
 8006b26:	d904      	bls.n	8006b32 <_malloc_r+0x26>
 8006b28:	230c      	movs	r3, #12
 8006b2a:	6033      	str	r3, [r6, #0]
 8006b2c:	2000      	movs	r0, #0
 8006b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006c08 <_malloc_r+0xfc>
 8006b36:	f000 f869 	bl	8006c0c <__malloc_lock>
 8006b3a:	f8d8 3000 	ldr.w	r3, [r8]
 8006b3e:	461c      	mov	r4, r3
 8006b40:	bb44      	cbnz	r4, 8006b94 <_malloc_r+0x88>
 8006b42:	4629      	mov	r1, r5
 8006b44:	4630      	mov	r0, r6
 8006b46:	f7ff ffbf 	bl	8006ac8 <sbrk_aligned>
 8006b4a:	1c43      	adds	r3, r0, #1
 8006b4c:	4604      	mov	r4, r0
 8006b4e:	d158      	bne.n	8006c02 <_malloc_r+0xf6>
 8006b50:	f8d8 4000 	ldr.w	r4, [r8]
 8006b54:	4627      	mov	r7, r4
 8006b56:	2f00      	cmp	r7, #0
 8006b58:	d143      	bne.n	8006be2 <_malloc_r+0xd6>
 8006b5a:	2c00      	cmp	r4, #0
 8006b5c:	d04b      	beq.n	8006bf6 <_malloc_r+0xea>
 8006b5e:	6823      	ldr	r3, [r4, #0]
 8006b60:	4639      	mov	r1, r7
 8006b62:	4630      	mov	r0, r6
 8006b64:	eb04 0903 	add.w	r9, r4, r3
 8006b68:	f000 f8e4 	bl	8006d34 <_sbrk_r>
 8006b6c:	4581      	cmp	r9, r0
 8006b6e:	d142      	bne.n	8006bf6 <_malloc_r+0xea>
 8006b70:	6821      	ldr	r1, [r4, #0]
 8006b72:	1a6d      	subs	r5, r5, r1
 8006b74:	4629      	mov	r1, r5
 8006b76:	4630      	mov	r0, r6
 8006b78:	f7ff ffa6 	bl	8006ac8 <sbrk_aligned>
 8006b7c:	3001      	adds	r0, #1
 8006b7e:	d03a      	beq.n	8006bf6 <_malloc_r+0xea>
 8006b80:	6823      	ldr	r3, [r4, #0]
 8006b82:	442b      	add	r3, r5
 8006b84:	6023      	str	r3, [r4, #0]
 8006b86:	f8d8 3000 	ldr.w	r3, [r8]
 8006b8a:	685a      	ldr	r2, [r3, #4]
 8006b8c:	bb62      	cbnz	r2, 8006be8 <_malloc_r+0xdc>
 8006b8e:	f8c8 7000 	str.w	r7, [r8]
 8006b92:	e00f      	b.n	8006bb4 <_malloc_r+0xa8>
 8006b94:	6822      	ldr	r2, [r4, #0]
 8006b96:	1b52      	subs	r2, r2, r5
 8006b98:	d420      	bmi.n	8006bdc <_malloc_r+0xd0>
 8006b9a:	2a0b      	cmp	r2, #11
 8006b9c:	d917      	bls.n	8006bce <_malloc_r+0xc2>
 8006b9e:	1961      	adds	r1, r4, r5
 8006ba0:	42a3      	cmp	r3, r4
 8006ba2:	6025      	str	r5, [r4, #0]
 8006ba4:	bf18      	it	ne
 8006ba6:	6059      	strne	r1, [r3, #4]
 8006ba8:	6863      	ldr	r3, [r4, #4]
 8006baa:	bf08      	it	eq
 8006bac:	f8c8 1000 	streq.w	r1, [r8]
 8006bb0:	5162      	str	r2, [r4, r5]
 8006bb2:	604b      	str	r3, [r1, #4]
 8006bb4:	4630      	mov	r0, r6
 8006bb6:	f000 f82f 	bl	8006c18 <__malloc_unlock>
 8006bba:	f104 000b 	add.w	r0, r4, #11
 8006bbe:	1d23      	adds	r3, r4, #4
 8006bc0:	f020 0007 	bic.w	r0, r0, #7
 8006bc4:	1ac2      	subs	r2, r0, r3
 8006bc6:	bf1c      	itt	ne
 8006bc8:	1a1b      	subne	r3, r3, r0
 8006bca:	50a3      	strne	r3, [r4, r2]
 8006bcc:	e7af      	b.n	8006b2e <_malloc_r+0x22>
 8006bce:	6862      	ldr	r2, [r4, #4]
 8006bd0:	42a3      	cmp	r3, r4
 8006bd2:	bf0c      	ite	eq
 8006bd4:	f8c8 2000 	streq.w	r2, [r8]
 8006bd8:	605a      	strne	r2, [r3, #4]
 8006bda:	e7eb      	b.n	8006bb4 <_malloc_r+0xa8>
 8006bdc:	4623      	mov	r3, r4
 8006bde:	6864      	ldr	r4, [r4, #4]
 8006be0:	e7ae      	b.n	8006b40 <_malloc_r+0x34>
 8006be2:	463c      	mov	r4, r7
 8006be4:	687f      	ldr	r7, [r7, #4]
 8006be6:	e7b6      	b.n	8006b56 <_malloc_r+0x4a>
 8006be8:	461a      	mov	r2, r3
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	42a3      	cmp	r3, r4
 8006bee:	d1fb      	bne.n	8006be8 <_malloc_r+0xdc>
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	6053      	str	r3, [r2, #4]
 8006bf4:	e7de      	b.n	8006bb4 <_malloc_r+0xa8>
 8006bf6:	230c      	movs	r3, #12
 8006bf8:	6033      	str	r3, [r6, #0]
 8006bfa:	4630      	mov	r0, r6
 8006bfc:	f000 f80c 	bl	8006c18 <__malloc_unlock>
 8006c00:	e794      	b.n	8006b2c <_malloc_r+0x20>
 8006c02:	6005      	str	r5, [r0, #0]
 8006c04:	e7d6      	b.n	8006bb4 <_malloc_r+0xa8>
 8006c06:	bf00      	nop
 8006c08:	20004260 	.word	0x20004260

08006c0c <__malloc_lock>:
 8006c0c:	4801      	ldr	r0, [pc, #4]	@ (8006c14 <__malloc_lock+0x8>)
 8006c0e:	f000 b8cb 	b.w	8006da8 <__retarget_lock_acquire_recursive>
 8006c12:	bf00      	nop
 8006c14:	200043a0 	.word	0x200043a0

08006c18 <__malloc_unlock>:
 8006c18:	4801      	ldr	r0, [pc, #4]	@ (8006c20 <__malloc_unlock+0x8>)
 8006c1a:	f000 b8c6 	b.w	8006daa <__retarget_lock_release_recursive>
 8006c1e:	bf00      	nop
 8006c20:	200043a0 	.word	0x200043a0

08006c24 <siprintf>:
 8006c24:	b40e      	push	{r1, r2, r3}
 8006c26:	b510      	push	{r4, lr}
 8006c28:	b09d      	sub	sp, #116	@ 0x74
 8006c2a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006c2c:	9002      	str	r0, [sp, #8]
 8006c2e:	9006      	str	r0, [sp, #24]
 8006c30:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006c34:	480a      	ldr	r0, [pc, #40]	@ (8006c60 <siprintf+0x3c>)
 8006c36:	9107      	str	r1, [sp, #28]
 8006c38:	9104      	str	r1, [sp, #16]
 8006c3a:	490a      	ldr	r1, [pc, #40]	@ (8006c64 <siprintf+0x40>)
 8006c3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c40:	9105      	str	r1, [sp, #20]
 8006c42:	2400      	movs	r4, #0
 8006c44:	a902      	add	r1, sp, #8
 8006c46:	6800      	ldr	r0, [r0, #0]
 8006c48:	9301      	str	r3, [sp, #4]
 8006c4a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006c4c:	f000 f962 	bl	8006f14 <_svfiprintf_r>
 8006c50:	9b02      	ldr	r3, [sp, #8]
 8006c52:	701c      	strb	r4, [r3, #0]
 8006c54:	b01d      	add	sp, #116	@ 0x74
 8006c56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c5a:	b003      	add	sp, #12
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	200000b0 	.word	0x200000b0
 8006c64:	ffff0208 	.word	0xffff0208

08006c68 <memset>:
 8006c68:	4402      	add	r2, r0
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d100      	bne.n	8006c72 <memset+0xa>
 8006c70:	4770      	bx	lr
 8006c72:	f803 1b01 	strb.w	r1, [r3], #1
 8006c76:	e7f9      	b.n	8006c6c <memset+0x4>

08006c78 <_reclaim_reent>:
 8006c78:	4b2d      	ldr	r3, [pc, #180]	@ (8006d30 <_reclaim_reent+0xb8>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4283      	cmp	r3, r0
 8006c7e:	b570      	push	{r4, r5, r6, lr}
 8006c80:	4604      	mov	r4, r0
 8006c82:	d053      	beq.n	8006d2c <_reclaim_reent+0xb4>
 8006c84:	69c3      	ldr	r3, [r0, #28]
 8006c86:	b31b      	cbz	r3, 8006cd0 <_reclaim_reent+0x58>
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	b163      	cbz	r3, 8006ca6 <_reclaim_reent+0x2e>
 8006c8c:	2500      	movs	r5, #0
 8006c8e:	69e3      	ldr	r3, [r4, #28]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	5959      	ldr	r1, [r3, r5]
 8006c94:	b9b1      	cbnz	r1, 8006cc4 <_reclaim_reent+0x4c>
 8006c96:	3504      	adds	r5, #4
 8006c98:	2d80      	cmp	r5, #128	@ 0x80
 8006c9a:	d1f8      	bne.n	8006c8e <_reclaim_reent+0x16>
 8006c9c:	69e3      	ldr	r3, [r4, #28]
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	68d9      	ldr	r1, [r3, #12]
 8006ca2:	f000 f891 	bl	8006dc8 <_free_r>
 8006ca6:	69e3      	ldr	r3, [r4, #28]
 8006ca8:	6819      	ldr	r1, [r3, #0]
 8006caa:	b111      	cbz	r1, 8006cb2 <_reclaim_reent+0x3a>
 8006cac:	4620      	mov	r0, r4
 8006cae:	f000 f88b 	bl	8006dc8 <_free_r>
 8006cb2:	69e3      	ldr	r3, [r4, #28]
 8006cb4:	689d      	ldr	r5, [r3, #8]
 8006cb6:	b15d      	cbz	r5, 8006cd0 <_reclaim_reent+0x58>
 8006cb8:	4629      	mov	r1, r5
 8006cba:	4620      	mov	r0, r4
 8006cbc:	682d      	ldr	r5, [r5, #0]
 8006cbe:	f000 f883 	bl	8006dc8 <_free_r>
 8006cc2:	e7f8      	b.n	8006cb6 <_reclaim_reent+0x3e>
 8006cc4:	680e      	ldr	r6, [r1, #0]
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	f000 f87e 	bl	8006dc8 <_free_r>
 8006ccc:	4631      	mov	r1, r6
 8006cce:	e7e1      	b.n	8006c94 <_reclaim_reent+0x1c>
 8006cd0:	6961      	ldr	r1, [r4, #20]
 8006cd2:	b111      	cbz	r1, 8006cda <_reclaim_reent+0x62>
 8006cd4:	4620      	mov	r0, r4
 8006cd6:	f000 f877 	bl	8006dc8 <_free_r>
 8006cda:	69e1      	ldr	r1, [r4, #28]
 8006cdc:	b111      	cbz	r1, 8006ce4 <_reclaim_reent+0x6c>
 8006cde:	4620      	mov	r0, r4
 8006ce0:	f000 f872 	bl	8006dc8 <_free_r>
 8006ce4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006ce6:	b111      	cbz	r1, 8006cee <_reclaim_reent+0x76>
 8006ce8:	4620      	mov	r0, r4
 8006cea:	f000 f86d 	bl	8006dc8 <_free_r>
 8006cee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006cf0:	b111      	cbz	r1, 8006cf8 <_reclaim_reent+0x80>
 8006cf2:	4620      	mov	r0, r4
 8006cf4:	f000 f868 	bl	8006dc8 <_free_r>
 8006cf8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006cfa:	b111      	cbz	r1, 8006d02 <_reclaim_reent+0x8a>
 8006cfc:	4620      	mov	r0, r4
 8006cfe:	f000 f863 	bl	8006dc8 <_free_r>
 8006d02:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006d04:	b111      	cbz	r1, 8006d0c <_reclaim_reent+0x94>
 8006d06:	4620      	mov	r0, r4
 8006d08:	f000 f85e 	bl	8006dc8 <_free_r>
 8006d0c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006d0e:	b111      	cbz	r1, 8006d16 <_reclaim_reent+0x9e>
 8006d10:	4620      	mov	r0, r4
 8006d12:	f000 f859 	bl	8006dc8 <_free_r>
 8006d16:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006d18:	b111      	cbz	r1, 8006d20 <_reclaim_reent+0xa8>
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	f000 f854 	bl	8006dc8 <_free_r>
 8006d20:	6a23      	ldr	r3, [r4, #32]
 8006d22:	b11b      	cbz	r3, 8006d2c <_reclaim_reent+0xb4>
 8006d24:	4620      	mov	r0, r4
 8006d26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006d2a:	4718      	bx	r3
 8006d2c:	bd70      	pop	{r4, r5, r6, pc}
 8006d2e:	bf00      	nop
 8006d30:	200000b0 	.word	0x200000b0

08006d34 <_sbrk_r>:
 8006d34:	b538      	push	{r3, r4, r5, lr}
 8006d36:	4d06      	ldr	r5, [pc, #24]	@ (8006d50 <_sbrk_r+0x1c>)
 8006d38:	2300      	movs	r3, #0
 8006d3a:	4604      	mov	r4, r0
 8006d3c:	4608      	mov	r0, r1
 8006d3e:	602b      	str	r3, [r5, #0]
 8006d40:	f7fa f988 	bl	8001054 <_sbrk>
 8006d44:	1c43      	adds	r3, r0, #1
 8006d46:	d102      	bne.n	8006d4e <_sbrk_r+0x1a>
 8006d48:	682b      	ldr	r3, [r5, #0]
 8006d4a:	b103      	cbz	r3, 8006d4e <_sbrk_r+0x1a>
 8006d4c:	6023      	str	r3, [r4, #0]
 8006d4e:	bd38      	pop	{r3, r4, r5, pc}
 8006d50:	2000439c 	.word	0x2000439c

08006d54 <__errno>:
 8006d54:	4b01      	ldr	r3, [pc, #4]	@ (8006d5c <__errno+0x8>)
 8006d56:	6818      	ldr	r0, [r3, #0]
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	200000b0 	.word	0x200000b0

08006d60 <__libc_init_array>:
 8006d60:	b570      	push	{r4, r5, r6, lr}
 8006d62:	4d0d      	ldr	r5, [pc, #52]	@ (8006d98 <__libc_init_array+0x38>)
 8006d64:	4c0d      	ldr	r4, [pc, #52]	@ (8006d9c <__libc_init_array+0x3c>)
 8006d66:	1b64      	subs	r4, r4, r5
 8006d68:	10a4      	asrs	r4, r4, #2
 8006d6a:	2600      	movs	r6, #0
 8006d6c:	42a6      	cmp	r6, r4
 8006d6e:	d109      	bne.n	8006d84 <__libc_init_array+0x24>
 8006d70:	4d0b      	ldr	r5, [pc, #44]	@ (8006da0 <__libc_init_array+0x40>)
 8006d72:	4c0c      	ldr	r4, [pc, #48]	@ (8006da4 <__libc_init_array+0x44>)
 8006d74:	f000 fba6 	bl	80074c4 <_init>
 8006d78:	1b64      	subs	r4, r4, r5
 8006d7a:	10a4      	asrs	r4, r4, #2
 8006d7c:	2600      	movs	r6, #0
 8006d7e:	42a6      	cmp	r6, r4
 8006d80:	d105      	bne.n	8006d8e <__libc_init_array+0x2e>
 8006d82:	bd70      	pop	{r4, r5, r6, pc}
 8006d84:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d88:	4798      	blx	r3
 8006d8a:	3601      	adds	r6, #1
 8006d8c:	e7ee      	b.n	8006d6c <__libc_init_array+0xc>
 8006d8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d92:	4798      	blx	r3
 8006d94:	3601      	adds	r6, #1
 8006d96:	e7f2      	b.n	8006d7e <__libc_init_array+0x1e>
 8006d98:	0800764c 	.word	0x0800764c
 8006d9c:	0800764c 	.word	0x0800764c
 8006da0:	0800764c 	.word	0x0800764c
 8006da4:	08007650 	.word	0x08007650

08006da8 <__retarget_lock_acquire_recursive>:
 8006da8:	4770      	bx	lr

08006daa <__retarget_lock_release_recursive>:
 8006daa:	4770      	bx	lr

08006dac <memcpy>:
 8006dac:	440a      	add	r2, r1
 8006dae:	4291      	cmp	r1, r2
 8006db0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006db4:	d100      	bne.n	8006db8 <memcpy+0xc>
 8006db6:	4770      	bx	lr
 8006db8:	b510      	push	{r4, lr}
 8006dba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006dc2:	4291      	cmp	r1, r2
 8006dc4:	d1f9      	bne.n	8006dba <memcpy+0xe>
 8006dc6:	bd10      	pop	{r4, pc}

08006dc8 <_free_r>:
 8006dc8:	b538      	push	{r3, r4, r5, lr}
 8006dca:	4605      	mov	r5, r0
 8006dcc:	2900      	cmp	r1, #0
 8006dce:	d041      	beq.n	8006e54 <_free_r+0x8c>
 8006dd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dd4:	1f0c      	subs	r4, r1, #4
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	bfb8      	it	lt
 8006dda:	18e4      	addlt	r4, r4, r3
 8006ddc:	f7ff ff16 	bl	8006c0c <__malloc_lock>
 8006de0:	4a1d      	ldr	r2, [pc, #116]	@ (8006e58 <_free_r+0x90>)
 8006de2:	6813      	ldr	r3, [r2, #0]
 8006de4:	b933      	cbnz	r3, 8006df4 <_free_r+0x2c>
 8006de6:	6063      	str	r3, [r4, #4]
 8006de8:	6014      	str	r4, [r2, #0]
 8006dea:	4628      	mov	r0, r5
 8006dec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006df0:	f7ff bf12 	b.w	8006c18 <__malloc_unlock>
 8006df4:	42a3      	cmp	r3, r4
 8006df6:	d908      	bls.n	8006e0a <_free_r+0x42>
 8006df8:	6820      	ldr	r0, [r4, #0]
 8006dfa:	1821      	adds	r1, r4, r0
 8006dfc:	428b      	cmp	r3, r1
 8006dfe:	bf01      	itttt	eq
 8006e00:	6819      	ldreq	r1, [r3, #0]
 8006e02:	685b      	ldreq	r3, [r3, #4]
 8006e04:	1809      	addeq	r1, r1, r0
 8006e06:	6021      	streq	r1, [r4, #0]
 8006e08:	e7ed      	b.n	8006de6 <_free_r+0x1e>
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	b10b      	cbz	r3, 8006e14 <_free_r+0x4c>
 8006e10:	42a3      	cmp	r3, r4
 8006e12:	d9fa      	bls.n	8006e0a <_free_r+0x42>
 8006e14:	6811      	ldr	r1, [r2, #0]
 8006e16:	1850      	adds	r0, r2, r1
 8006e18:	42a0      	cmp	r0, r4
 8006e1a:	d10b      	bne.n	8006e34 <_free_r+0x6c>
 8006e1c:	6820      	ldr	r0, [r4, #0]
 8006e1e:	4401      	add	r1, r0
 8006e20:	1850      	adds	r0, r2, r1
 8006e22:	4283      	cmp	r3, r0
 8006e24:	6011      	str	r1, [r2, #0]
 8006e26:	d1e0      	bne.n	8006dea <_free_r+0x22>
 8006e28:	6818      	ldr	r0, [r3, #0]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	6053      	str	r3, [r2, #4]
 8006e2e:	4408      	add	r0, r1
 8006e30:	6010      	str	r0, [r2, #0]
 8006e32:	e7da      	b.n	8006dea <_free_r+0x22>
 8006e34:	d902      	bls.n	8006e3c <_free_r+0x74>
 8006e36:	230c      	movs	r3, #12
 8006e38:	602b      	str	r3, [r5, #0]
 8006e3a:	e7d6      	b.n	8006dea <_free_r+0x22>
 8006e3c:	6820      	ldr	r0, [r4, #0]
 8006e3e:	1821      	adds	r1, r4, r0
 8006e40:	428b      	cmp	r3, r1
 8006e42:	bf04      	itt	eq
 8006e44:	6819      	ldreq	r1, [r3, #0]
 8006e46:	685b      	ldreq	r3, [r3, #4]
 8006e48:	6063      	str	r3, [r4, #4]
 8006e4a:	bf04      	itt	eq
 8006e4c:	1809      	addeq	r1, r1, r0
 8006e4e:	6021      	streq	r1, [r4, #0]
 8006e50:	6054      	str	r4, [r2, #4]
 8006e52:	e7ca      	b.n	8006dea <_free_r+0x22>
 8006e54:	bd38      	pop	{r3, r4, r5, pc}
 8006e56:	bf00      	nop
 8006e58:	20004260 	.word	0x20004260

08006e5c <__ssputs_r>:
 8006e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e60:	688e      	ldr	r6, [r1, #8]
 8006e62:	461f      	mov	r7, r3
 8006e64:	42be      	cmp	r6, r7
 8006e66:	680b      	ldr	r3, [r1, #0]
 8006e68:	4682      	mov	sl, r0
 8006e6a:	460c      	mov	r4, r1
 8006e6c:	4690      	mov	r8, r2
 8006e6e:	d82d      	bhi.n	8006ecc <__ssputs_r+0x70>
 8006e70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006e74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006e78:	d026      	beq.n	8006ec8 <__ssputs_r+0x6c>
 8006e7a:	6965      	ldr	r5, [r4, #20]
 8006e7c:	6909      	ldr	r1, [r1, #16]
 8006e7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e82:	eba3 0901 	sub.w	r9, r3, r1
 8006e86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e8a:	1c7b      	adds	r3, r7, #1
 8006e8c:	444b      	add	r3, r9
 8006e8e:	106d      	asrs	r5, r5, #1
 8006e90:	429d      	cmp	r5, r3
 8006e92:	bf38      	it	cc
 8006e94:	461d      	movcc	r5, r3
 8006e96:	0553      	lsls	r3, r2, #21
 8006e98:	d527      	bpl.n	8006eea <__ssputs_r+0x8e>
 8006e9a:	4629      	mov	r1, r5
 8006e9c:	f7ff fe36 	bl	8006b0c <_malloc_r>
 8006ea0:	4606      	mov	r6, r0
 8006ea2:	b360      	cbz	r0, 8006efe <__ssputs_r+0xa2>
 8006ea4:	6921      	ldr	r1, [r4, #16]
 8006ea6:	464a      	mov	r2, r9
 8006ea8:	f7ff ff80 	bl	8006dac <memcpy>
 8006eac:	89a3      	ldrh	r3, [r4, #12]
 8006eae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006eb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006eb6:	81a3      	strh	r3, [r4, #12]
 8006eb8:	6126      	str	r6, [r4, #16]
 8006eba:	6165      	str	r5, [r4, #20]
 8006ebc:	444e      	add	r6, r9
 8006ebe:	eba5 0509 	sub.w	r5, r5, r9
 8006ec2:	6026      	str	r6, [r4, #0]
 8006ec4:	60a5      	str	r5, [r4, #8]
 8006ec6:	463e      	mov	r6, r7
 8006ec8:	42be      	cmp	r6, r7
 8006eca:	d900      	bls.n	8006ece <__ssputs_r+0x72>
 8006ecc:	463e      	mov	r6, r7
 8006ece:	6820      	ldr	r0, [r4, #0]
 8006ed0:	4632      	mov	r2, r6
 8006ed2:	4641      	mov	r1, r8
 8006ed4:	f000 faa6 	bl	8007424 <memmove>
 8006ed8:	68a3      	ldr	r3, [r4, #8]
 8006eda:	1b9b      	subs	r3, r3, r6
 8006edc:	60a3      	str	r3, [r4, #8]
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	4433      	add	r3, r6
 8006ee2:	6023      	str	r3, [r4, #0]
 8006ee4:	2000      	movs	r0, #0
 8006ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eea:	462a      	mov	r2, r5
 8006eec:	f000 fab4 	bl	8007458 <_realloc_r>
 8006ef0:	4606      	mov	r6, r0
 8006ef2:	2800      	cmp	r0, #0
 8006ef4:	d1e0      	bne.n	8006eb8 <__ssputs_r+0x5c>
 8006ef6:	6921      	ldr	r1, [r4, #16]
 8006ef8:	4650      	mov	r0, sl
 8006efa:	f7ff ff65 	bl	8006dc8 <_free_r>
 8006efe:	230c      	movs	r3, #12
 8006f00:	f8ca 3000 	str.w	r3, [sl]
 8006f04:	89a3      	ldrh	r3, [r4, #12]
 8006f06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f0a:	81a3      	strh	r3, [r4, #12]
 8006f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f10:	e7e9      	b.n	8006ee6 <__ssputs_r+0x8a>
	...

08006f14 <_svfiprintf_r>:
 8006f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f18:	4698      	mov	r8, r3
 8006f1a:	898b      	ldrh	r3, [r1, #12]
 8006f1c:	061b      	lsls	r3, r3, #24
 8006f1e:	b09d      	sub	sp, #116	@ 0x74
 8006f20:	4607      	mov	r7, r0
 8006f22:	460d      	mov	r5, r1
 8006f24:	4614      	mov	r4, r2
 8006f26:	d510      	bpl.n	8006f4a <_svfiprintf_r+0x36>
 8006f28:	690b      	ldr	r3, [r1, #16]
 8006f2a:	b973      	cbnz	r3, 8006f4a <_svfiprintf_r+0x36>
 8006f2c:	2140      	movs	r1, #64	@ 0x40
 8006f2e:	f7ff fded 	bl	8006b0c <_malloc_r>
 8006f32:	6028      	str	r0, [r5, #0]
 8006f34:	6128      	str	r0, [r5, #16]
 8006f36:	b930      	cbnz	r0, 8006f46 <_svfiprintf_r+0x32>
 8006f38:	230c      	movs	r3, #12
 8006f3a:	603b      	str	r3, [r7, #0]
 8006f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f40:	b01d      	add	sp, #116	@ 0x74
 8006f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f46:	2340      	movs	r3, #64	@ 0x40
 8006f48:	616b      	str	r3, [r5, #20]
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f4e:	2320      	movs	r3, #32
 8006f50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006f54:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f58:	2330      	movs	r3, #48	@ 0x30
 8006f5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80070f8 <_svfiprintf_r+0x1e4>
 8006f5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006f62:	f04f 0901 	mov.w	r9, #1
 8006f66:	4623      	mov	r3, r4
 8006f68:	469a      	mov	sl, r3
 8006f6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f6e:	b10a      	cbz	r2, 8006f74 <_svfiprintf_r+0x60>
 8006f70:	2a25      	cmp	r2, #37	@ 0x25
 8006f72:	d1f9      	bne.n	8006f68 <_svfiprintf_r+0x54>
 8006f74:	ebba 0b04 	subs.w	fp, sl, r4
 8006f78:	d00b      	beq.n	8006f92 <_svfiprintf_r+0x7e>
 8006f7a:	465b      	mov	r3, fp
 8006f7c:	4622      	mov	r2, r4
 8006f7e:	4629      	mov	r1, r5
 8006f80:	4638      	mov	r0, r7
 8006f82:	f7ff ff6b 	bl	8006e5c <__ssputs_r>
 8006f86:	3001      	adds	r0, #1
 8006f88:	f000 80a7 	beq.w	80070da <_svfiprintf_r+0x1c6>
 8006f8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f8e:	445a      	add	r2, fp
 8006f90:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f92:	f89a 3000 	ldrb.w	r3, [sl]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f000 809f 	beq.w	80070da <_svfiprintf_r+0x1c6>
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8006fa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fa6:	f10a 0a01 	add.w	sl, sl, #1
 8006faa:	9304      	str	r3, [sp, #16]
 8006fac:	9307      	str	r3, [sp, #28]
 8006fae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006fb2:	931a      	str	r3, [sp, #104]	@ 0x68
 8006fb4:	4654      	mov	r4, sl
 8006fb6:	2205      	movs	r2, #5
 8006fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fbc:	484e      	ldr	r0, [pc, #312]	@ (80070f8 <_svfiprintf_r+0x1e4>)
 8006fbe:	f7f9 f90f 	bl	80001e0 <memchr>
 8006fc2:	9a04      	ldr	r2, [sp, #16]
 8006fc4:	b9d8      	cbnz	r0, 8006ffe <_svfiprintf_r+0xea>
 8006fc6:	06d0      	lsls	r0, r2, #27
 8006fc8:	bf44      	itt	mi
 8006fca:	2320      	movmi	r3, #32
 8006fcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006fd0:	0711      	lsls	r1, r2, #28
 8006fd2:	bf44      	itt	mi
 8006fd4:	232b      	movmi	r3, #43	@ 0x2b
 8006fd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006fda:	f89a 3000 	ldrb.w	r3, [sl]
 8006fde:	2b2a      	cmp	r3, #42	@ 0x2a
 8006fe0:	d015      	beq.n	800700e <_svfiprintf_r+0xfa>
 8006fe2:	9a07      	ldr	r2, [sp, #28]
 8006fe4:	4654      	mov	r4, sl
 8006fe6:	2000      	movs	r0, #0
 8006fe8:	f04f 0c0a 	mov.w	ip, #10
 8006fec:	4621      	mov	r1, r4
 8006fee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ff2:	3b30      	subs	r3, #48	@ 0x30
 8006ff4:	2b09      	cmp	r3, #9
 8006ff6:	d94b      	bls.n	8007090 <_svfiprintf_r+0x17c>
 8006ff8:	b1b0      	cbz	r0, 8007028 <_svfiprintf_r+0x114>
 8006ffa:	9207      	str	r2, [sp, #28]
 8006ffc:	e014      	b.n	8007028 <_svfiprintf_r+0x114>
 8006ffe:	eba0 0308 	sub.w	r3, r0, r8
 8007002:	fa09 f303 	lsl.w	r3, r9, r3
 8007006:	4313      	orrs	r3, r2
 8007008:	9304      	str	r3, [sp, #16]
 800700a:	46a2      	mov	sl, r4
 800700c:	e7d2      	b.n	8006fb4 <_svfiprintf_r+0xa0>
 800700e:	9b03      	ldr	r3, [sp, #12]
 8007010:	1d19      	adds	r1, r3, #4
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	9103      	str	r1, [sp, #12]
 8007016:	2b00      	cmp	r3, #0
 8007018:	bfbb      	ittet	lt
 800701a:	425b      	neglt	r3, r3
 800701c:	f042 0202 	orrlt.w	r2, r2, #2
 8007020:	9307      	strge	r3, [sp, #28]
 8007022:	9307      	strlt	r3, [sp, #28]
 8007024:	bfb8      	it	lt
 8007026:	9204      	strlt	r2, [sp, #16]
 8007028:	7823      	ldrb	r3, [r4, #0]
 800702a:	2b2e      	cmp	r3, #46	@ 0x2e
 800702c:	d10a      	bne.n	8007044 <_svfiprintf_r+0x130>
 800702e:	7863      	ldrb	r3, [r4, #1]
 8007030:	2b2a      	cmp	r3, #42	@ 0x2a
 8007032:	d132      	bne.n	800709a <_svfiprintf_r+0x186>
 8007034:	9b03      	ldr	r3, [sp, #12]
 8007036:	1d1a      	adds	r2, r3, #4
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	9203      	str	r2, [sp, #12]
 800703c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007040:	3402      	adds	r4, #2
 8007042:	9305      	str	r3, [sp, #20]
 8007044:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007108 <_svfiprintf_r+0x1f4>
 8007048:	7821      	ldrb	r1, [r4, #0]
 800704a:	2203      	movs	r2, #3
 800704c:	4650      	mov	r0, sl
 800704e:	f7f9 f8c7 	bl	80001e0 <memchr>
 8007052:	b138      	cbz	r0, 8007064 <_svfiprintf_r+0x150>
 8007054:	9b04      	ldr	r3, [sp, #16]
 8007056:	eba0 000a 	sub.w	r0, r0, sl
 800705a:	2240      	movs	r2, #64	@ 0x40
 800705c:	4082      	lsls	r2, r0
 800705e:	4313      	orrs	r3, r2
 8007060:	3401      	adds	r4, #1
 8007062:	9304      	str	r3, [sp, #16]
 8007064:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007068:	4824      	ldr	r0, [pc, #144]	@ (80070fc <_svfiprintf_r+0x1e8>)
 800706a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800706e:	2206      	movs	r2, #6
 8007070:	f7f9 f8b6 	bl	80001e0 <memchr>
 8007074:	2800      	cmp	r0, #0
 8007076:	d036      	beq.n	80070e6 <_svfiprintf_r+0x1d2>
 8007078:	4b21      	ldr	r3, [pc, #132]	@ (8007100 <_svfiprintf_r+0x1ec>)
 800707a:	bb1b      	cbnz	r3, 80070c4 <_svfiprintf_r+0x1b0>
 800707c:	9b03      	ldr	r3, [sp, #12]
 800707e:	3307      	adds	r3, #7
 8007080:	f023 0307 	bic.w	r3, r3, #7
 8007084:	3308      	adds	r3, #8
 8007086:	9303      	str	r3, [sp, #12]
 8007088:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800708a:	4433      	add	r3, r6
 800708c:	9309      	str	r3, [sp, #36]	@ 0x24
 800708e:	e76a      	b.n	8006f66 <_svfiprintf_r+0x52>
 8007090:	fb0c 3202 	mla	r2, ip, r2, r3
 8007094:	460c      	mov	r4, r1
 8007096:	2001      	movs	r0, #1
 8007098:	e7a8      	b.n	8006fec <_svfiprintf_r+0xd8>
 800709a:	2300      	movs	r3, #0
 800709c:	3401      	adds	r4, #1
 800709e:	9305      	str	r3, [sp, #20]
 80070a0:	4619      	mov	r1, r3
 80070a2:	f04f 0c0a 	mov.w	ip, #10
 80070a6:	4620      	mov	r0, r4
 80070a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070ac:	3a30      	subs	r2, #48	@ 0x30
 80070ae:	2a09      	cmp	r2, #9
 80070b0:	d903      	bls.n	80070ba <_svfiprintf_r+0x1a6>
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d0c6      	beq.n	8007044 <_svfiprintf_r+0x130>
 80070b6:	9105      	str	r1, [sp, #20]
 80070b8:	e7c4      	b.n	8007044 <_svfiprintf_r+0x130>
 80070ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80070be:	4604      	mov	r4, r0
 80070c0:	2301      	movs	r3, #1
 80070c2:	e7f0      	b.n	80070a6 <_svfiprintf_r+0x192>
 80070c4:	ab03      	add	r3, sp, #12
 80070c6:	9300      	str	r3, [sp, #0]
 80070c8:	462a      	mov	r2, r5
 80070ca:	4b0e      	ldr	r3, [pc, #56]	@ (8007104 <_svfiprintf_r+0x1f0>)
 80070cc:	a904      	add	r1, sp, #16
 80070ce:	4638      	mov	r0, r7
 80070d0:	f3af 8000 	nop.w
 80070d4:	1c42      	adds	r2, r0, #1
 80070d6:	4606      	mov	r6, r0
 80070d8:	d1d6      	bne.n	8007088 <_svfiprintf_r+0x174>
 80070da:	89ab      	ldrh	r3, [r5, #12]
 80070dc:	065b      	lsls	r3, r3, #25
 80070de:	f53f af2d 	bmi.w	8006f3c <_svfiprintf_r+0x28>
 80070e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80070e4:	e72c      	b.n	8006f40 <_svfiprintf_r+0x2c>
 80070e6:	ab03      	add	r3, sp, #12
 80070e8:	9300      	str	r3, [sp, #0]
 80070ea:	462a      	mov	r2, r5
 80070ec:	4b05      	ldr	r3, [pc, #20]	@ (8007104 <_svfiprintf_r+0x1f0>)
 80070ee:	a904      	add	r1, sp, #16
 80070f0:	4638      	mov	r0, r7
 80070f2:	f000 f879 	bl	80071e8 <_printf_i>
 80070f6:	e7ed      	b.n	80070d4 <_svfiprintf_r+0x1c0>
 80070f8:	08007610 	.word	0x08007610
 80070fc:	0800761a 	.word	0x0800761a
 8007100:	00000000 	.word	0x00000000
 8007104:	08006e5d 	.word	0x08006e5d
 8007108:	08007616 	.word	0x08007616

0800710c <_printf_common>:
 800710c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007110:	4616      	mov	r6, r2
 8007112:	4698      	mov	r8, r3
 8007114:	688a      	ldr	r2, [r1, #8]
 8007116:	690b      	ldr	r3, [r1, #16]
 8007118:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800711c:	4293      	cmp	r3, r2
 800711e:	bfb8      	it	lt
 8007120:	4613      	movlt	r3, r2
 8007122:	6033      	str	r3, [r6, #0]
 8007124:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007128:	4607      	mov	r7, r0
 800712a:	460c      	mov	r4, r1
 800712c:	b10a      	cbz	r2, 8007132 <_printf_common+0x26>
 800712e:	3301      	adds	r3, #1
 8007130:	6033      	str	r3, [r6, #0]
 8007132:	6823      	ldr	r3, [r4, #0]
 8007134:	0699      	lsls	r1, r3, #26
 8007136:	bf42      	ittt	mi
 8007138:	6833      	ldrmi	r3, [r6, #0]
 800713a:	3302      	addmi	r3, #2
 800713c:	6033      	strmi	r3, [r6, #0]
 800713e:	6825      	ldr	r5, [r4, #0]
 8007140:	f015 0506 	ands.w	r5, r5, #6
 8007144:	d106      	bne.n	8007154 <_printf_common+0x48>
 8007146:	f104 0a19 	add.w	sl, r4, #25
 800714a:	68e3      	ldr	r3, [r4, #12]
 800714c:	6832      	ldr	r2, [r6, #0]
 800714e:	1a9b      	subs	r3, r3, r2
 8007150:	42ab      	cmp	r3, r5
 8007152:	dc26      	bgt.n	80071a2 <_printf_common+0x96>
 8007154:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007158:	6822      	ldr	r2, [r4, #0]
 800715a:	3b00      	subs	r3, #0
 800715c:	bf18      	it	ne
 800715e:	2301      	movne	r3, #1
 8007160:	0692      	lsls	r2, r2, #26
 8007162:	d42b      	bmi.n	80071bc <_printf_common+0xb0>
 8007164:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007168:	4641      	mov	r1, r8
 800716a:	4638      	mov	r0, r7
 800716c:	47c8      	blx	r9
 800716e:	3001      	adds	r0, #1
 8007170:	d01e      	beq.n	80071b0 <_printf_common+0xa4>
 8007172:	6823      	ldr	r3, [r4, #0]
 8007174:	6922      	ldr	r2, [r4, #16]
 8007176:	f003 0306 	and.w	r3, r3, #6
 800717a:	2b04      	cmp	r3, #4
 800717c:	bf02      	ittt	eq
 800717e:	68e5      	ldreq	r5, [r4, #12]
 8007180:	6833      	ldreq	r3, [r6, #0]
 8007182:	1aed      	subeq	r5, r5, r3
 8007184:	68a3      	ldr	r3, [r4, #8]
 8007186:	bf0c      	ite	eq
 8007188:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800718c:	2500      	movne	r5, #0
 800718e:	4293      	cmp	r3, r2
 8007190:	bfc4      	itt	gt
 8007192:	1a9b      	subgt	r3, r3, r2
 8007194:	18ed      	addgt	r5, r5, r3
 8007196:	2600      	movs	r6, #0
 8007198:	341a      	adds	r4, #26
 800719a:	42b5      	cmp	r5, r6
 800719c:	d11a      	bne.n	80071d4 <_printf_common+0xc8>
 800719e:	2000      	movs	r0, #0
 80071a0:	e008      	b.n	80071b4 <_printf_common+0xa8>
 80071a2:	2301      	movs	r3, #1
 80071a4:	4652      	mov	r2, sl
 80071a6:	4641      	mov	r1, r8
 80071a8:	4638      	mov	r0, r7
 80071aa:	47c8      	blx	r9
 80071ac:	3001      	adds	r0, #1
 80071ae:	d103      	bne.n	80071b8 <_printf_common+0xac>
 80071b0:	f04f 30ff 	mov.w	r0, #4294967295
 80071b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071b8:	3501      	adds	r5, #1
 80071ba:	e7c6      	b.n	800714a <_printf_common+0x3e>
 80071bc:	18e1      	adds	r1, r4, r3
 80071be:	1c5a      	adds	r2, r3, #1
 80071c0:	2030      	movs	r0, #48	@ 0x30
 80071c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80071c6:	4422      	add	r2, r4
 80071c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80071cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80071d0:	3302      	adds	r3, #2
 80071d2:	e7c7      	b.n	8007164 <_printf_common+0x58>
 80071d4:	2301      	movs	r3, #1
 80071d6:	4622      	mov	r2, r4
 80071d8:	4641      	mov	r1, r8
 80071da:	4638      	mov	r0, r7
 80071dc:	47c8      	blx	r9
 80071de:	3001      	adds	r0, #1
 80071e0:	d0e6      	beq.n	80071b0 <_printf_common+0xa4>
 80071e2:	3601      	adds	r6, #1
 80071e4:	e7d9      	b.n	800719a <_printf_common+0x8e>
	...

080071e8 <_printf_i>:
 80071e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071ec:	7e0f      	ldrb	r7, [r1, #24]
 80071ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80071f0:	2f78      	cmp	r7, #120	@ 0x78
 80071f2:	4691      	mov	r9, r2
 80071f4:	4680      	mov	r8, r0
 80071f6:	460c      	mov	r4, r1
 80071f8:	469a      	mov	sl, r3
 80071fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80071fe:	d807      	bhi.n	8007210 <_printf_i+0x28>
 8007200:	2f62      	cmp	r7, #98	@ 0x62
 8007202:	d80a      	bhi.n	800721a <_printf_i+0x32>
 8007204:	2f00      	cmp	r7, #0
 8007206:	f000 80d1 	beq.w	80073ac <_printf_i+0x1c4>
 800720a:	2f58      	cmp	r7, #88	@ 0x58
 800720c:	f000 80b8 	beq.w	8007380 <_printf_i+0x198>
 8007210:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007214:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007218:	e03a      	b.n	8007290 <_printf_i+0xa8>
 800721a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800721e:	2b15      	cmp	r3, #21
 8007220:	d8f6      	bhi.n	8007210 <_printf_i+0x28>
 8007222:	a101      	add	r1, pc, #4	@ (adr r1, 8007228 <_printf_i+0x40>)
 8007224:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007228:	08007281 	.word	0x08007281
 800722c:	08007295 	.word	0x08007295
 8007230:	08007211 	.word	0x08007211
 8007234:	08007211 	.word	0x08007211
 8007238:	08007211 	.word	0x08007211
 800723c:	08007211 	.word	0x08007211
 8007240:	08007295 	.word	0x08007295
 8007244:	08007211 	.word	0x08007211
 8007248:	08007211 	.word	0x08007211
 800724c:	08007211 	.word	0x08007211
 8007250:	08007211 	.word	0x08007211
 8007254:	08007393 	.word	0x08007393
 8007258:	080072bf 	.word	0x080072bf
 800725c:	0800734d 	.word	0x0800734d
 8007260:	08007211 	.word	0x08007211
 8007264:	08007211 	.word	0x08007211
 8007268:	080073b5 	.word	0x080073b5
 800726c:	08007211 	.word	0x08007211
 8007270:	080072bf 	.word	0x080072bf
 8007274:	08007211 	.word	0x08007211
 8007278:	08007211 	.word	0x08007211
 800727c:	08007355 	.word	0x08007355
 8007280:	6833      	ldr	r3, [r6, #0]
 8007282:	1d1a      	adds	r2, r3, #4
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	6032      	str	r2, [r6, #0]
 8007288:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800728c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007290:	2301      	movs	r3, #1
 8007292:	e09c      	b.n	80073ce <_printf_i+0x1e6>
 8007294:	6833      	ldr	r3, [r6, #0]
 8007296:	6820      	ldr	r0, [r4, #0]
 8007298:	1d19      	adds	r1, r3, #4
 800729a:	6031      	str	r1, [r6, #0]
 800729c:	0606      	lsls	r6, r0, #24
 800729e:	d501      	bpl.n	80072a4 <_printf_i+0xbc>
 80072a0:	681d      	ldr	r5, [r3, #0]
 80072a2:	e003      	b.n	80072ac <_printf_i+0xc4>
 80072a4:	0645      	lsls	r5, r0, #25
 80072a6:	d5fb      	bpl.n	80072a0 <_printf_i+0xb8>
 80072a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80072ac:	2d00      	cmp	r5, #0
 80072ae:	da03      	bge.n	80072b8 <_printf_i+0xd0>
 80072b0:	232d      	movs	r3, #45	@ 0x2d
 80072b2:	426d      	negs	r5, r5
 80072b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072b8:	4858      	ldr	r0, [pc, #352]	@ (800741c <_printf_i+0x234>)
 80072ba:	230a      	movs	r3, #10
 80072bc:	e011      	b.n	80072e2 <_printf_i+0xfa>
 80072be:	6821      	ldr	r1, [r4, #0]
 80072c0:	6833      	ldr	r3, [r6, #0]
 80072c2:	0608      	lsls	r0, r1, #24
 80072c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80072c8:	d402      	bmi.n	80072d0 <_printf_i+0xe8>
 80072ca:	0649      	lsls	r1, r1, #25
 80072cc:	bf48      	it	mi
 80072ce:	b2ad      	uxthmi	r5, r5
 80072d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80072d2:	4852      	ldr	r0, [pc, #328]	@ (800741c <_printf_i+0x234>)
 80072d4:	6033      	str	r3, [r6, #0]
 80072d6:	bf14      	ite	ne
 80072d8:	230a      	movne	r3, #10
 80072da:	2308      	moveq	r3, #8
 80072dc:	2100      	movs	r1, #0
 80072de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80072e2:	6866      	ldr	r6, [r4, #4]
 80072e4:	60a6      	str	r6, [r4, #8]
 80072e6:	2e00      	cmp	r6, #0
 80072e8:	db05      	blt.n	80072f6 <_printf_i+0x10e>
 80072ea:	6821      	ldr	r1, [r4, #0]
 80072ec:	432e      	orrs	r6, r5
 80072ee:	f021 0104 	bic.w	r1, r1, #4
 80072f2:	6021      	str	r1, [r4, #0]
 80072f4:	d04b      	beq.n	800738e <_printf_i+0x1a6>
 80072f6:	4616      	mov	r6, r2
 80072f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80072fc:	fb03 5711 	mls	r7, r3, r1, r5
 8007300:	5dc7      	ldrb	r7, [r0, r7]
 8007302:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007306:	462f      	mov	r7, r5
 8007308:	42bb      	cmp	r3, r7
 800730a:	460d      	mov	r5, r1
 800730c:	d9f4      	bls.n	80072f8 <_printf_i+0x110>
 800730e:	2b08      	cmp	r3, #8
 8007310:	d10b      	bne.n	800732a <_printf_i+0x142>
 8007312:	6823      	ldr	r3, [r4, #0]
 8007314:	07df      	lsls	r7, r3, #31
 8007316:	d508      	bpl.n	800732a <_printf_i+0x142>
 8007318:	6923      	ldr	r3, [r4, #16]
 800731a:	6861      	ldr	r1, [r4, #4]
 800731c:	4299      	cmp	r1, r3
 800731e:	bfde      	ittt	le
 8007320:	2330      	movle	r3, #48	@ 0x30
 8007322:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007326:	f106 36ff 	addle.w	r6, r6, #4294967295
 800732a:	1b92      	subs	r2, r2, r6
 800732c:	6122      	str	r2, [r4, #16]
 800732e:	f8cd a000 	str.w	sl, [sp]
 8007332:	464b      	mov	r3, r9
 8007334:	aa03      	add	r2, sp, #12
 8007336:	4621      	mov	r1, r4
 8007338:	4640      	mov	r0, r8
 800733a:	f7ff fee7 	bl	800710c <_printf_common>
 800733e:	3001      	adds	r0, #1
 8007340:	d14a      	bne.n	80073d8 <_printf_i+0x1f0>
 8007342:	f04f 30ff 	mov.w	r0, #4294967295
 8007346:	b004      	add	sp, #16
 8007348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800734c:	6823      	ldr	r3, [r4, #0]
 800734e:	f043 0320 	orr.w	r3, r3, #32
 8007352:	6023      	str	r3, [r4, #0]
 8007354:	4832      	ldr	r0, [pc, #200]	@ (8007420 <_printf_i+0x238>)
 8007356:	2778      	movs	r7, #120	@ 0x78
 8007358:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800735c:	6823      	ldr	r3, [r4, #0]
 800735e:	6831      	ldr	r1, [r6, #0]
 8007360:	061f      	lsls	r7, r3, #24
 8007362:	f851 5b04 	ldr.w	r5, [r1], #4
 8007366:	d402      	bmi.n	800736e <_printf_i+0x186>
 8007368:	065f      	lsls	r7, r3, #25
 800736a:	bf48      	it	mi
 800736c:	b2ad      	uxthmi	r5, r5
 800736e:	6031      	str	r1, [r6, #0]
 8007370:	07d9      	lsls	r1, r3, #31
 8007372:	bf44      	itt	mi
 8007374:	f043 0320 	orrmi.w	r3, r3, #32
 8007378:	6023      	strmi	r3, [r4, #0]
 800737a:	b11d      	cbz	r5, 8007384 <_printf_i+0x19c>
 800737c:	2310      	movs	r3, #16
 800737e:	e7ad      	b.n	80072dc <_printf_i+0xf4>
 8007380:	4826      	ldr	r0, [pc, #152]	@ (800741c <_printf_i+0x234>)
 8007382:	e7e9      	b.n	8007358 <_printf_i+0x170>
 8007384:	6823      	ldr	r3, [r4, #0]
 8007386:	f023 0320 	bic.w	r3, r3, #32
 800738a:	6023      	str	r3, [r4, #0]
 800738c:	e7f6      	b.n	800737c <_printf_i+0x194>
 800738e:	4616      	mov	r6, r2
 8007390:	e7bd      	b.n	800730e <_printf_i+0x126>
 8007392:	6833      	ldr	r3, [r6, #0]
 8007394:	6825      	ldr	r5, [r4, #0]
 8007396:	6961      	ldr	r1, [r4, #20]
 8007398:	1d18      	adds	r0, r3, #4
 800739a:	6030      	str	r0, [r6, #0]
 800739c:	062e      	lsls	r6, r5, #24
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	d501      	bpl.n	80073a6 <_printf_i+0x1be>
 80073a2:	6019      	str	r1, [r3, #0]
 80073a4:	e002      	b.n	80073ac <_printf_i+0x1c4>
 80073a6:	0668      	lsls	r0, r5, #25
 80073a8:	d5fb      	bpl.n	80073a2 <_printf_i+0x1ba>
 80073aa:	8019      	strh	r1, [r3, #0]
 80073ac:	2300      	movs	r3, #0
 80073ae:	6123      	str	r3, [r4, #16]
 80073b0:	4616      	mov	r6, r2
 80073b2:	e7bc      	b.n	800732e <_printf_i+0x146>
 80073b4:	6833      	ldr	r3, [r6, #0]
 80073b6:	1d1a      	adds	r2, r3, #4
 80073b8:	6032      	str	r2, [r6, #0]
 80073ba:	681e      	ldr	r6, [r3, #0]
 80073bc:	6862      	ldr	r2, [r4, #4]
 80073be:	2100      	movs	r1, #0
 80073c0:	4630      	mov	r0, r6
 80073c2:	f7f8 ff0d 	bl	80001e0 <memchr>
 80073c6:	b108      	cbz	r0, 80073cc <_printf_i+0x1e4>
 80073c8:	1b80      	subs	r0, r0, r6
 80073ca:	6060      	str	r0, [r4, #4]
 80073cc:	6863      	ldr	r3, [r4, #4]
 80073ce:	6123      	str	r3, [r4, #16]
 80073d0:	2300      	movs	r3, #0
 80073d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073d6:	e7aa      	b.n	800732e <_printf_i+0x146>
 80073d8:	6923      	ldr	r3, [r4, #16]
 80073da:	4632      	mov	r2, r6
 80073dc:	4649      	mov	r1, r9
 80073de:	4640      	mov	r0, r8
 80073e0:	47d0      	blx	sl
 80073e2:	3001      	adds	r0, #1
 80073e4:	d0ad      	beq.n	8007342 <_printf_i+0x15a>
 80073e6:	6823      	ldr	r3, [r4, #0]
 80073e8:	079b      	lsls	r3, r3, #30
 80073ea:	d413      	bmi.n	8007414 <_printf_i+0x22c>
 80073ec:	68e0      	ldr	r0, [r4, #12]
 80073ee:	9b03      	ldr	r3, [sp, #12]
 80073f0:	4298      	cmp	r0, r3
 80073f2:	bfb8      	it	lt
 80073f4:	4618      	movlt	r0, r3
 80073f6:	e7a6      	b.n	8007346 <_printf_i+0x15e>
 80073f8:	2301      	movs	r3, #1
 80073fa:	4632      	mov	r2, r6
 80073fc:	4649      	mov	r1, r9
 80073fe:	4640      	mov	r0, r8
 8007400:	47d0      	blx	sl
 8007402:	3001      	adds	r0, #1
 8007404:	d09d      	beq.n	8007342 <_printf_i+0x15a>
 8007406:	3501      	adds	r5, #1
 8007408:	68e3      	ldr	r3, [r4, #12]
 800740a:	9903      	ldr	r1, [sp, #12]
 800740c:	1a5b      	subs	r3, r3, r1
 800740e:	42ab      	cmp	r3, r5
 8007410:	dcf2      	bgt.n	80073f8 <_printf_i+0x210>
 8007412:	e7eb      	b.n	80073ec <_printf_i+0x204>
 8007414:	2500      	movs	r5, #0
 8007416:	f104 0619 	add.w	r6, r4, #25
 800741a:	e7f5      	b.n	8007408 <_printf_i+0x220>
 800741c:	08007621 	.word	0x08007621
 8007420:	08007632 	.word	0x08007632

08007424 <memmove>:
 8007424:	4288      	cmp	r0, r1
 8007426:	b510      	push	{r4, lr}
 8007428:	eb01 0402 	add.w	r4, r1, r2
 800742c:	d902      	bls.n	8007434 <memmove+0x10>
 800742e:	4284      	cmp	r4, r0
 8007430:	4623      	mov	r3, r4
 8007432:	d807      	bhi.n	8007444 <memmove+0x20>
 8007434:	1e43      	subs	r3, r0, #1
 8007436:	42a1      	cmp	r1, r4
 8007438:	d008      	beq.n	800744c <memmove+0x28>
 800743a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800743e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007442:	e7f8      	b.n	8007436 <memmove+0x12>
 8007444:	4402      	add	r2, r0
 8007446:	4601      	mov	r1, r0
 8007448:	428a      	cmp	r2, r1
 800744a:	d100      	bne.n	800744e <memmove+0x2a>
 800744c:	bd10      	pop	{r4, pc}
 800744e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007452:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007456:	e7f7      	b.n	8007448 <memmove+0x24>

08007458 <_realloc_r>:
 8007458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800745c:	4607      	mov	r7, r0
 800745e:	4614      	mov	r4, r2
 8007460:	460d      	mov	r5, r1
 8007462:	b921      	cbnz	r1, 800746e <_realloc_r+0x16>
 8007464:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007468:	4611      	mov	r1, r2
 800746a:	f7ff bb4f 	b.w	8006b0c <_malloc_r>
 800746e:	b92a      	cbnz	r2, 800747c <_realloc_r+0x24>
 8007470:	f7ff fcaa 	bl	8006dc8 <_free_r>
 8007474:	4625      	mov	r5, r4
 8007476:	4628      	mov	r0, r5
 8007478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800747c:	f000 f81a 	bl	80074b4 <_malloc_usable_size_r>
 8007480:	4284      	cmp	r4, r0
 8007482:	4606      	mov	r6, r0
 8007484:	d802      	bhi.n	800748c <_realloc_r+0x34>
 8007486:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800748a:	d8f4      	bhi.n	8007476 <_realloc_r+0x1e>
 800748c:	4621      	mov	r1, r4
 800748e:	4638      	mov	r0, r7
 8007490:	f7ff fb3c 	bl	8006b0c <_malloc_r>
 8007494:	4680      	mov	r8, r0
 8007496:	b908      	cbnz	r0, 800749c <_realloc_r+0x44>
 8007498:	4645      	mov	r5, r8
 800749a:	e7ec      	b.n	8007476 <_realloc_r+0x1e>
 800749c:	42b4      	cmp	r4, r6
 800749e:	4622      	mov	r2, r4
 80074a0:	4629      	mov	r1, r5
 80074a2:	bf28      	it	cs
 80074a4:	4632      	movcs	r2, r6
 80074a6:	f7ff fc81 	bl	8006dac <memcpy>
 80074aa:	4629      	mov	r1, r5
 80074ac:	4638      	mov	r0, r7
 80074ae:	f7ff fc8b 	bl	8006dc8 <_free_r>
 80074b2:	e7f1      	b.n	8007498 <_realloc_r+0x40>

080074b4 <_malloc_usable_size_r>:
 80074b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074b8:	1f18      	subs	r0, r3, #4
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	bfbc      	itt	lt
 80074be:	580b      	ldrlt	r3, [r1, r0]
 80074c0:	18c0      	addlt	r0, r0, r3
 80074c2:	4770      	bx	lr

080074c4 <_init>:
 80074c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074c6:	bf00      	nop
 80074c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ca:	bc08      	pop	{r3}
 80074cc:	469e      	mov	lr, r3
 80074ce:	4770      	bx	lr

080074d0 <_fini>:
 80074d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074d2:	bf00      	nop
 80074d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074d6:	bc08      	pop	{r3}
 80074d8:	469e      	mov	lr, r3
 80074da:	4770      	bx	lr
