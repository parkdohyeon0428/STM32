
250620_FND_TIM_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006f8  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000890  08000890  00001890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800089c  0800089c  00002060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800089c  0800089c  00002060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800089c  0800089c  00002060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800089c  0800089c  0000189c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080008a0  080008a0  000018a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080008a4  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000004c  20000060  08000904  00002060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08000904  000020ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000017d3  00000000  00000000  00002090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000009ab  00000000  00000000  00003863  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000200  00000000  00000000  00004210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000155  00000000  00000000  00004410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e2c4  00000000  00000000  00004565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002ef7  00000000  00000000  00012829  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00050705  00000000  00000000  00015720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00065e25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005ac  00000000  00000000  00065e68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00066414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000060 	.word	0x20000060
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000878 	.word	0x08000878

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000064 	.word	0x20000064
 80001d4:	08000878 	.word	0x08000878

080001d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	db0b      	blt.n	8000202 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	f003 021f 	and.w	r2, r3, #31
 80001f0:	4907      	ldr	r1, [pc, #28]	@ (8000210 <__NVIC_EnableIRQ+0x38>)
 80001f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f6:	095b      	lsrs	r3, r3, #5
 80001f8:	2001      	movs	r0, #1
 80001fa:	fa00 f202 	lsl.w	r2, r0, r2
 80001fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	e000e100 	.word	0xe000e100

08000214 <TIM2_IRQHandler>:
Button_Handler_t hbtnLeft;
Button_Handler_t hbtnRight;
Button_Handler_t hbtnOnOff;

void TIM2_IRQHandler(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	FND_DispData();
 8000218:	f000 f8ba 	bl	8000390 <FND_DispData>
	incTick();
 800021c:	f000 fa4a 	bl	80006b4 <incTick>
	TIM_ClearUIFlag(TIM2);
 8000220:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000224:	f000 fac0 	bl	80007a8 <TIM_ClearUIFlag>
}
 8000228:	bf00      	nop
 800022a:	bd80      	pop	{r7, pc}

0800022c <ap_main>:

int ap_main()
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
   //FND_WriteData(1234);
   uint32_t counter = 0;
 8000232:	2300      	movs	r3, #0
 8000234:	607b      	str	r3, [r7, #4]
   uint32_t prevCounterTime = 0;
 8000236:	2300      	movs	r3, #0
 8000238:	603b      	str	r3, [r7, #0]

   while(1)
   {
	  if (getTick() - prevCounterTime >= 1000) {
 800023a:	f000 fa49 	bl	80006d0 <getTick>
 800023e:	4602      	mov	r2, r0
 8000240:	683b      	ldr	r3, [r7, #0]
 8000242:	1ad3      	subs	r3, r2, r3
 8000244:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000248:	d3f7      	bcc.n	800023a <ap_main+0xe>
		  prevCounterTime = getTick();
 800024a:	f000 fa41 	bl	80006d0 <getTick>
 800024e:	6038      	str	r0, [r7, #0]
		  FND_WriteData(counter++);
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	1c5a      	adds	r2, r3, #1
 8000254:	607a      	str	r2, [r7, #4]
 8000256:	b29b      	uxth	r3, r3
 8000258:	4618      	mov	r0, r3
 800025a:	f000 f889 	bl	8000370 <FND_WriteData>
	  if (getTick() - prevCounterTime >= 1000) {
 800025e:	e7ec      	b.n	800023a <ap_main+0xe>

08000260 <ap_init>:

   return 0;
}

void ap_init()
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
   SystemClock_Init();
 8000264:	f000 f9fe 	bl	8000664 <SystemClock_Init>
   Button_Init(&hbtnLeft, GPIOB, 5);
 8000268:	2205      	movs	r2, #5
 800026a:	4912      	ldr	r1, [pc, #72]	@ (80002b4 <ap_init+0x54>)
 800026c:	4812      	ldr	r0, [pc, #72]	@ (80002b8 <ap_init+0x58>)
 800026e:	f000 f82b 	bl	80002c8 <Button_Init>
   Button_Init(&hbtnRight, GPIOB, 3);
 8000272:	2203      	movs	r2, #3
 8000274:	490f      	ldr	r1, [pc, #60]	@ (80002b4 <ap_init+0x54>)
 8000276:	4811      	ldr	r0, [pc, #68]	@ (80002bc <ap_init+0x5c>)
 8000278:	f000 f826 	bl	80002c8 <Button_Init>
   Button_Init(&hbtnOnOff, GPIOA, 10);
 800027c:	220a      	movs	r2, #10
 800027e:	4910      	ldr	r1, [pc, #64]	@ (80002c0 <ap_init+0x60>)
 8000280:	4810      	ldr	r0, [pc, #64]	@ (80002c4 <ap_init+0x64>)
 8000282:	f000 f821 	bl	80002c8 <Button_Init>
   FND_Init();
 8000286:	f000 f83b 	bl	8000300 <FND_Init>
   TIM_Init(TIM2, 16-1, 1000-1);
 800028a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800028e:	210f      	movs	r1, #15
 8000290:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000294:	f000 fa28 	bl	80006e8 <TIM_Init>
   TIM_UIEnable(TIM2);
 8000298:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800029c:	f000 fa4a 	bl	8000734 <TIM_UIEnable>
   NVIC_EnableIRQ(TIM2_IRQn); // interrupt 루틴 요청 enable
 80002a0:	201c      	movs	r0, #28
 80002a2:	f7ff ff99 	bl	80001d8 <__NVIC_EnableIRQ>
   TIM_CntStart(TIM2);
 80002a6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80002aa:	f000 fa33 	bl	8000714 <TIM_CntStart>

//   TIM_Init(TIM5, 16000-1, 0xffffffff);
//   SysTick_Init(TIM5);
//   SysTick_Start();
}
 80002ae:	bf00      	nop
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	40020400 	.word	0x40020400
 80002b8:	2000007c 	.word	0x2000007c
 80002bc:	20000088 	.word	0x20000088
 80002c0:	40020000 	.word	0x40020000
 80002c4:	20000094 	.word	0x20000094

080002c8 <Button_Init>:


enum {PUSHED = 0, RELEASED};

void Button_Init(Button_Handler_t *hbtn, GPIO_TypeDef * GPIOx, uint32_t pinNum)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	60f8      	str	r0, [r7, #12]
 80002d0:	60b9      	str	r1, [r7, #8]
 80002d2:	607a      	str	r2, [r7, #4]
   hbtn->GPIOx = GPIOx;
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	68ba      	ldr	r2, [r7, #8]
 80002d8:	601a      	str	r2, [r3, #0]
   hbtn->pinNum = pinNum;
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	687a      	ldr	r2, [r7, #4]
 80002de:	605a      	str	r2, [r3, #4]
   hbtn->prevState = RELEASED;
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	2201      	movs	r2, #1
 80002e4:	609a      	str	r2, [r3, #8]

   GPIO_Init(hbtn->GPIOx, hbtn->pinNum, INPUT);
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	6818      	ldr	r0, [r3, #0]
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	685b      	ldr	r3, [r3, #4]
 80002ee:	2201      	movs	r2, #1
 80002f0:	4619      	mov	r1, r3
 80002f2:	f000 f961 	bl	80005b8 <GPIO_Init>
}
 80002f6:	bf00      	nop
 80002f8:	3710      	adds	r7, #16
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
	...

08000300 <FND_Init>:
};

static uint16_t fndDispNum = 0; //fnd에 출력되는 숫자

void FND_Init()
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
   for(int i=0; i<4; i++){
 8000306:	2300      	movs	r3, #0
 8000308:	607b      	str	r3, [r7, #4]
 800030a:	e00f      	b.n	800032c <FND_Init+0x2c>
      GPIO_Init(fndDigitCom[i].GPIOx, fndDigitCom[i].pinNum, OUTPUT);
 800030c:	4a16      	ldr	r2, [pc, #88]	@ (8000368 <FND_Init+0x68>)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000314:	4a14      	ldr	r2, [pc, #80]	@ (8000368 <FND_Init+0x68>)
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	00db      	lsls	r3, r3, #3
 800031a:	4413      	add	r3, r2
 800031c:	685b      	ldr	r3, [r3, #4]
 800031e:	2200      	movs	r2, #0
 8000320:	4619      	mov	r1, r3
 8000322:	f000 f949 	bl	80005b8 <GPIO_Init>
   for(int i=0; i<4; i++){
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	3301      	adds	r3, #1
 800032a:	607b      	str	r3, [r7, #4]
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	2b03      	cmp	r3, #3
 8000330:	ddec      	ble.n	800030c <FND_Init+0xc>
   }
   for(int i=0; i<8; i++){
 8000332:	2300      	movs	r3, #0
 8000334:	603b      	str	r3, [r7, #0]
 8000336:	e00f      	b.n	8000358 <FND_Init+0x58>
      GPIO_Init(fndPin[i].GPIOx, fndPin[i].pinNum, OUTPUT);
 8000338:	4a0c      	ldr	r2, [pc, #48]	@ (800036c <FND_Init+0x6c>)
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000340:	4a0a      	ldr	r2, [pc, #40]	@ (800036c <FND_Init+0x6c>)
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	00db      	lsls	r3, r3, #3
 8000346:	4413      	add	r3, r2
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	2200      	movs	r2, #0
 800034c:	4619      	mov	r1, r3
 800034e:	f000 f933 	bl	80005b8 <GPIO_Init>
   for(int i=0; i<8; i++){
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	3301      	adds	r3, #1
 8000356:	603b      	str	r3, [r7, #0]
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	2b07      	cmp	r3, #7
 800035c:	ddec      	ble.n	8000338 <FND_Init+0x38>
   }
}
 800035e:	bf00      	nop
 8000360:	bf00      	nop
 8000362:	3708      	adds	r7, #8
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	20000000 	.word	0x20000000
 800036c:	20000020 	.word	0x20000020

08000370 <FND_WriteData>:



//write fndDispNum
void FND_WriteData(uint16_t data) {
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
 8000376:	4603      	mov	r3, r0
 8000378:	80fb      	strh	r3, [r7, #6]
   fndDispNum = data;
 800037a:	4a04      	ldr	r2, [pc, #16]	@ (800038c <FND_WriteData+0x1c>)
 800037c:	88fb      	ldrh	r3, [r7, #6]
 800037e:	8013      	strh	r3, [r2, #0]
}
 8000380:	bf00      	nop
 8000382:	370c      	adds	r7, #12
 8000384:	46bd      	mov	sp, r7
 8000386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038a:	4770      	bx	lr
 800038c:	200000a0 	.word	0x200000a0

08000390 <FND_DispData>:
uint16_t FND_ReadData() {
   return fndDispNum;
}

//display fndDispNum
void FND_DispData() {
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
   static int digitPos = 0;
   //인터럽트가 발생하면 한 자리씩 출력한다.
   digitPos = (digitPos + 1) % 4;
 8000394:	4b44      	ldr	r3, [pc, #272]	@ (80004a8 <FND_DispData+0x118>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	3301      	adds	r3, #1
 800039a:	425a      	negs	r2, r3
 800039c:	f003 0303 	and.w	r3, r3, #3
 80003a0:	f002 0203 	and.w	r2, r2, #3
 80003a4:	bf58      	it	pl
 80003a6:	4253      	negpl	r3, r2
 80003a8:	4a3f      	ldr	r2, [pc, #252]	@ (80004a8 <FND_DispData+0x118>)
 80003aa:	6013      	str	r3, [r2, #0]

   switch (digitPos) {
 80003ac:	4b3e      	ldr	r3, [pc, #248]	@ (80004a8 <FND_DispData+0x118>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	2b03      	cmp	r3, #3
 80003b2:	d876      	bhi.n	80004a2 <FND_DispData+0x112>
 80003b4:	a201      	add	r2, pc, #4	@ (adr r2, 80003bc <FND_DispData+0x2c>)
 80003b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ba:	bf00      	nop
 80003bc:	080003cd 	.word	0x080003cd
 80003c0:	080003fb 	.word	0x080003fb
 80003c4:	08000433 	.word	0x08000433
 80003c8:	0800046b 	.word	0x0800046b
   case DIGIT_1:
      FND_DispOffAll();
 80003cc:	f000 f88e 	bl	80004ec <FND_DispOffAll>
      FND_DispDigit(fndDispNum % 10);
 80003d0:	4b36      	ldr	r3, [pc, #216]	@ (80004ac <FND_DispData+0x11c>)
 80003d2:	881a      	ldrh	r2, [r3, #0]
 80003d4:	4b36      	ldr	r3, [pc, #216]	@ (80004b0 <FND_DispData+0x120>)
 80003d6:	fba3 1302 	umull	r1, r3, r3, r2
 80003da:	08d9      	lsrs	r1, r3, #3
 80003dc:	460b      	mov	r3, r1
 80003de:	009b      	lsls	r3, r3, #2
 80003e0:	440b      	add	r3, r1
 80003e2:	005b      	lsls	r3, r3, #1
 80003e4:	1ad3      	subs	r3, r2, r3
 80003e6:	b29b      	uxth	r3, r3
 80003e8:	4618      	mov	r0, r3
 80003ea:	f000 f89f 	bl	800052c <FND_DispDigit>
      FND_DispOn(digitPos);
 80003ee:	4b2e      	ldr	r3, [pc, #184]	@ (80004a8 <FND_DispData+0x118>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4618      	mov	r0, r3
 80003f4:	f000 f862 	bl	80004bc <FND_DispOn>
      break;
 80003f8:	e053      	b.n	80004a2 <FND_DispData+0x112>
   case DIGIT_10:
      FND_DispOffAll();
 80003fa:	f000 f877 	bl	80004ec <FND_DispOffAll>
      FND_DispDigit(fndDispNum / 10 % 10);
 80003fe:	4b2b      	ldr	r3, [pc, #172]	@ (80004ac <FND_DispData+0x11c>)
 8000400:	881b      	ldrh	r3, [r3, #0]
 8000402:	4a2b      	ldr	r2, [pc, #172]	@ (80004b0 <FND_DispData+0x120>)
 8000404:	fba2 2303 	umull	r2, r3, r2, r3
 8000408:	08db      	lsrs	r3, r3, #3
 800040a:	b29a      	uxth	r2, r3
 800040c:	4b28      	ldr	r3, [pc, #160]	@ (80004b0 <FND_DispData+0x120>)
 800040e:	fba3 1302 	umull	r1, r3, r3, r2
 8000412:	08d9      	lsrs	r1, r3, #3
 8000414:	460b      	mov	r3, r1
 8000416:	009b      	lsls	r3, r3, #2
 8000418:	440b      	add	r3, r1
 800041a:	005b      	lsls	r3, r3, #1
 800041c:	1ad3      	subs	r3, r2, r3
 800041e:	b29b      	uxth	r3, r3
 8000420:	4618      	mov	r0, r3
 8000422:	f000 f883 	bl	800052c <FND_DispDigit>
      FND_DispOn(digitPos);
 8000426:	4b20      	ldr	r3, [pc, #128]	@ (80004a8 <FND_DispData+0x118>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4618      	mov	r0, r3
 800042c:	f000 f846 	bl	80004bc <FND_DispOn>
      break;
 8000430:	e037      	b.n	80004a2 <FND_DispData+0x112>
   case DIGIT_100:
      FND_DispOffAll();
 8000432:	f000 f85b 	bl	80004ec <FND_DispOffAll>
      FND_DispDigit(fndDispNum / 100 % 10);
 8000436:	4b1d      	ldr	r3, [pc, #116]	@ (80004ac <FND_DispData+0x11c>)
 8000438:	881b      	ldrh	r3, [r3, #0]
 800043a:	4a1e      	ldr	r2, [pc, #120]	@ (80004b4 <FND_DispData+0x124>)
 800043c:	fba2 2303 	umull	r2, r3, r2, r3
 8000440:	095b      	lsrs	r3, r3, #5
 8000442:	b29a      	uxth	r2, r3
 8000444:	4b1a      	ldr	r3, [pc, #104]	@ (80004b0 <FND_DispData+0x120>)
 8000446:	fba3 1302 	umull	r1, r3, r3, r2
 800044a:	08d9      	lsrs	r1, r3, #3
 800044c:	460b      	mov	r3, r1
 800044e:	009b      	lsls	r3, r3, #2
 8000450:	440b      	add	r3, r1
 8000452:	005b      	lsls	r3, r3, #1
 8000454:	1ad3      	subs	r3, r2, r3
 8000456:	b29b      	uxth	r3, r3
 8000458:	4618      	mov	r0, r3
 800045a:	f000 f867 	bl	800052c <FND_DispDigit>
      FND_DispOn(digitPos);
 800045e:	4b12      	ldr	r3, [pc, #72]	@ (80004a8 <FND_DispData+0x118>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4618      	mov	r0, r3
 8000464:	f000 f82a 	bl	80004bc <FND_DispOn>
      break;
 8000468:	e01b      	b.n	80004a2 <FND_DispData+0x112>
   case DIGIT_1000:
      FND_DispOffAll();
 800046a:	f000 f83f 	bl	80004ec <FND_DispOffAll>
      FND_DispDigit(fndDispNum / 1000 % 10);
 800046e:	4b0f      	ldr	r3, [pc, #60]	@ (80004ac <FND_DispData+0x11c>)
 8000470:	881b      	ldrh	r3, [r3, #0]
 8000472:	4a11      	ldr	r2, [pc, #68]	@ (80004b8 <FND_DispData+0x128>)
 8000474:	fba2 2303 	umull	r2, r3, r2, r3
 8000478:	099b      	lsrs	r3, r3, #6
 800047a:	b29a      	uxth	r2, r3
 800047c:	4b0c      	ldr	r3, [pc, #48]	@ (80004b0 <FND_DispData+0x120>)
 800047e:	fba3 1302 	umull	r1, r3, r3, r2
 8000482:	08d9      	lsrs	r1, r3, #3
 8000484:	460b      	mov	r3, r1
 8000486:	009b      	lsls	r3, r3, #2
 8000488:	440b      	add	r3, r1
 800048a:	005b      	lsls	r3, r3, #1
 800048c:	1ad3      	subs	r3, r2, r3
 800048e:	b29b      	uxth	r3, r3
 8000490:	4618      	mov	r0, r3
 8000492:	f000 f84b 	bl	800052c <FND_DispDigit>
      FND_DispOn(digitPos);
 8000496:	4b04      	ldr	r3, [pc, #16]	@ (80004a8 <FND_DispData+0x118>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4618      	mov	r0, r3
 800049c:	f000 f80e 	bl	80004bc <FND_DispOn>
      break;
 80004a0:	bf00      	nop
   }
}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	200000a4 	.word	0x200000a4
 80004ac:	200000a0 	.word	0x200000a0
 80004b0:	cccccccd 	.word	0xcccccccd
 80004b4:	51eb851f 	.word	0x51eb851f
 80004b8:	10624dd3 	.word	0x10624dd3

080004bc <FND_DispOn>:

   GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, PIN_SET);

}

void FND_DispOn(int fndPos) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
   GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum,PIN_RESET);
 80004c4:	4a08      	ldr	r2, [pc, #32]	@ (80004e8 <FND_DispOn+0x2c>)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80004cc:	4a06      	ldr	r2, [pc, #24]	@ (80004e8 <FND_DispOn+0x2c>)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	00db      	lsls	r3, r3, #3
 80004d2:	4413      	add	r3, r2
 80004d4:	685b      	ldr	r3, [r3, #4]
 80004d6:	2200      	movs	r2, #0
 80004d8:	4619      	mov	r1, r3
 80004da:	f000 f89e 	bl	800061a <GPIO_WritePin>
}
 80004de:	bf00      	nop
 80004e0:	3708      	adds	r7, #8
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	20000000 	.word	0x20000000

080004ec <FND_DispOffAll>:

void FND_DispOffAll() {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
   for (int i = 0; i < 4; i++) {
 80004f2:	2300      	movs	r3, #0
 80004f4:	607b      	str	r3, [r7, #4]
 80004f6:	e00f      	b.n	8000518 <FND_DispOffAll+0x2c>
      GPIO_WritePin(fndDigitCom[i].GPIOx, fndDigitCom[i].pinNum, PIN_SET);
 80004f8:	4a0b      	ldr	r2, [pc, #44]	@ (8000528 <FND_DispOffAll+0x3c>)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000500:	4a09      	ldr	r2, [pc, #36]	@ (8000528 <FND_DispOffAll+0x3c>)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	00db      	lsls	r3, r3, #3
 8000506:	4413      	add	r3, r2
 8000508:	685b      	ldr	r3, [r3, #4]
 800050a:	2201      	movs	r2, #1
 800050c:	4619      	mov	r1, r3
 800050e:	f000 f884 	bl	800061a <GPIO_WritePin>
   for (int i = 0; i < 4; i++) {
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	3301      	adds	r3, #1
 8000516:	607b      	str	r3, [r7, #4]
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2b03      	cmp	r3, #3
 800051c:	ddec      	ble.n	80004f8 <FND_DispOffAll+0xc>
   }
}
 800051e:	bf00      	nop
 8000520:	bf00      	nop
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20000000 	.word	0x20000000

0800052c <FND_DispDigit>:

void FND_DispDigit(uint16_t digit) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	80fb      	strh	r3, [r7, #6]

      const uint8_t segFont[10] = {
 8000536:	4a1e      	ldr	r2, [pc, #120]	@ (80005b0 <FND_DispDigit+0x84>)
 8000538:	f107 0308 	add.w	r3, r7, #8
 800053c:	ca07      	ldmia	r2, {r0, r1, r2}
 800053e:	c303      	stmia	r3!, {r0, r1}
 8000540:	801a      	strh	r2, [r3, #0]
            0x7D,
            0x07,
            0x7F,
            0x6F
      };
   for (int i = 0; i < 8; i++) {
 8000542:	2300      	movs	r3, #0
 8000544:	617b      	str	r3, [r7, #20]
 8000546:	e02a      	b.n	800059e <FND_DispDigit+0x72>
      if (!(segFont[digit] & (1 << i))) {
 8000548:	88fb      	ldrh	r3, [r7, #6]
 800054a:	3318      	adds	r3, #24
 800054c:	443b      	add	r3, r7
 800054e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000552:	461a      	mov	r2, r3
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	fa42 f303 	asr.w	r3, r2, r3
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	2b00      	cmp	r3, #0
 8000560:	d10d      	bne.n	800057e <FND_DispDigit+0x52>
         GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, PIN_RESET);
 8000562:	4a14      	ldr	r2, [pc, #80]	@ (80005b4 <FND_DispDigit+0x88>)
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800056a:	4a12      	ldr	r2, [pc, #72]	@ (80005b4 <FND_DispDigit+0x88>)
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	00db      	lsls	r3, r3, #3
 8000570:	4413      	add	r3, r2
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	2200      	movs	r2, #0
 8000576:	4619      	mov	r1, r3
 8000578:	f000 f84f 	bl	800061a <GPIO_WritePin>
 800057c:	e00c      	b.n	8000598 <FND_DispDigit+0x6c>
      } else {
         GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, PIN_SET);
 800057e:	4a0d      	ldr	r2, [pc, #52]	@ (80005b4 <FND_DispDigit+0x88>)
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000586:	4a0b      	ldr	r2, [pc, #44]	@ (80005b4 <FND_DispDigit+0x88>)
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	00db      	lsls	r3, r3, #3
 800058c:	4413      	add	r3, r2
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	2201      	movs	r2, #1
 8000592:	4619      	mov	r1, r3
 8000594:	f000 f841 	bl	800061a <GPIO_WritePin>
   for (int i = 0; i < 8; i++) {
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	3301      	adds	r3, #1
 800059c:	617b      	str	r3, [r7, #20]
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	2b07      	cmp	r3, #7
 80005a2:	ddd1      	ble.n	8000548 <FND_DispDigit+0x1c>
      }
   }
}
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	3718      	adds	r7, #24
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	08000890 	.word	0x08000890
 80005b4:	20000020 	.word	0x20000020

080005b8 <GPIO_Init>:
 */
#include "GPIO.h"
#include <stdint.h>

void GPIO_Init(GPIO_TypeDef *GPIOx, uint32_t pinNum, pinMode pin_Mode)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	4613      	mov	r3, r2
 80005c4:	71fb      	strb	r3, [r7, #7]
   if(pin_Mode == OUTPUT)
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d115      	bne.n	80005f8 <GPIO_Init+0x40>
   {
      GPIOx -> MODER  |=  (0x01U << (pinNum*2));
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	2101      	movs	r1, #1
 80005d6:	fa01 f303 	lsl.w	r3, r1, r3
 80005da:	431a      	orrs	r2, r3
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	601a      	str	r2, [r3, #0]
      GPIOx -> MODER  &= ~(0x02U << (pinNum*2));
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	2102      	movs	r1, #2
 80005ea:	fa01 f303 	lsl.w	r3, r1, r3
 80005ee:	43db      	mvns	r3, r3
 80005f0:	401a      	ands	r2, r3
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	601a      	str	r2, [r3, #0]
   }
   else {
      GPIOx -> MODER  &= ~(0x03U << (pinNum*2));
   }
}
 80005f6:	e00a      	b.n	800060e <GPIO_Init+0x56>
      GPIOx -> MODER  &= ~(0x03U << (pinNum*2));
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	2103      	movs	r1, #3
 8000602:	fa01 f303 	lsl.w	r3, r1, r3
 8000606:	43db      	mvns	r3, r3
 8000608:	401a      	ands	r2, r3
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	601a      	str	r2, [r3, #0]
}
 800060e:	bf00      	nop
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <GPIO_WritePin>:

void GPIO_WritePin(GPIO_TypeDef *GPIOx, uint32_t pinNum, pinState pin_State)
{
 800061a:	b480      	push	{r7}
 800061c:	b085      	sub	sp, #20
 800061e:	af00      	add	r7, sp, #0
 8000620:	60f8      	str	r0, [r7, #12]
 8000622:	60b9      	str	r1, [r7, #8]
 8000624:	4613      	mov	r3, r2
 8000626:	71fb      	strb	r3, [r7, #7]
   if(pin_State == PIN_SET) {
 8000628:	79fb      	ldrb	r3, [r7, #7]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d109      	bne.n	8000642 <GPIO_WritePin+0x28>
   GPIOx -> ODR |= (1U<<pinNum);
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	695a      	ldr	r2, [r3, #20]
 8000632:	2101      	movs	r1, #1
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	fa01 f303 	lsl.w	r3, r1, r3
 800063a:	431a      	orrs	r2, r3
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	615a      	str	r2, [r3, #20]
   }
   else {
      GPIOx-> ODR &= ~(1U<<pinNum);
   }
}
 8000640:	e009      	b.n	8000656 <GPIO_WritePin+0x3c>
      GPIOx-> ODR &= ~(1U<<pinNum);
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	695a      	ldr	r2, [r3, #20]
 8000646:	2101      	movs	r1, #1
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	fa01 f303 	lsl.w	r3, r1, r3
 800064e:	43db      	mvns	r3, r3
 8000650:	401a      	ands	r2, r3
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	615a      	str	r2, [r3, #20]
}
 8000656:	bf00      	nop
 8000658:	3714      	adds	r7, #20
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
	...

08000664 <SystemClock_Init>:


#include "SystemClock.h"

void SystemClock_Init()
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
	   RCC -> AHB1ENR |= (1U << 0);//  RCC_AHB1ENR 해당위치의 비트만 1로 만들겠다
 8000668:	4b11      	ldr	r3, [pc, #68]	@ (80006b0 <SystemClock_Init+0x4c>)
 800066a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066c:	4a10      	ldr	r2, [pc, #64]	@ (80006b0 <SystemClock_Init+0x4c>)
 800066e:	f043 0301 	orr.w	r3, r3, #1
 8000672:	6313      	str	r3, [r2, #48]	@ 0x30
	   RCC -> AHB1ENR |= (1U << 1);//  RCC_AHB1ENR 해당위치의 비트만 1로 만들겠다
 8000674:	4b0e      	ldr	r3, [pc, #56]	@ (80006b0 <SystemClock_Init+0x4c>)
 8000676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000678:	4a0d      	ldr	r2, [pc, #52]	@ (80006b0 <SystemClock_Init+0x4c>)
 800067a:	f043 0302 	orr.w	r3, r3, #2
 800067e:	6313      	str	r3, [r2, #48]	@ 0x30
	   RCC -> AHB1ENR |= (1U << 2);//  RCC_AHB1ENR 해당위치의 비트만 1로 만들겠다
 8000680:	4b0b      	ldr	r3, [pc, #44]	@ (80006b0 <SystemClock_Init+0x4c>)
 8000682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000684:	4a0a      	ldr	r2, [pc, #40]	@ (80006b0 <SystemClock_Init+0x4c>)
 8000686:	f043 0304 	orr.w	r3, r3, #4
 800068a:	6313      	str	r3, [r2, #48]	@ 0x30
	   RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 800068c:	4b08      	ldr	r3, [pc, #32]	@ (80006b0 <SystemClock_Init+0x4c>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000690:	4a07      	ldr	r2, [pc, #28]	@ (80006b0 <SystemClock_Init+0x4c>)
 8000692:	f043 0301 	orr.w	r3, r3, #1
 8000696:	6413      	str	r3, [r2, #64]	@ 0x40
	   RCC -> APB1ENR |= RCC_APB1ENR_TIM5EN;
 8000698:	4b05      	ldr	r3, [pc, #20]	@ (80006b0 <SystemClock_Init+0x4c>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800069c:	4a04      	ldr	r2, [pc, #16]	@ (80006b0 <SystemClock_Init+0x4c>)
 800069e:	f043 0308 	orr.w	r3, r3, #8
 80006a2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800

080006b4 <incTick>:
#include "Systick.h"

static uint32_t tick = 0;

void incTick()
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
	tick ++;
 80006b8:	4b04      	ldr	r3, [pc, #16]	@ (80006cc <incTick+0x18>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	3301      	adds	r3, #1
 80006be:	4a03      	ldr	r2, [pc, #12]	@ (80006cc <incTick+0x18>)
 80006c0:	6013      	str	r3, [r2, #0]
}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	200000a8 	.word	0x200000a8

080006d0 <getTick>:

uint32_t getTick()
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
	return tick;
 80006d4:	4b03      	ldr	r3, [pc, #12]	@ (80006e4 <getTick+0x14>)
 80006d6:	681b      	ldr	r3, [r3, #0]
}
 80006d8:	4618      	mov	r0, r3
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	200000a8 	.word	0x200000a8

080006e8 <TIM_Init>:
 */

#include "TIM.h"

void TIM_Init(TIM_TypeDef *TIMx, uint32_t psc, uint32_t arr)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
	TIM_WritePSC(TIMx, psc);
 80006f4:	68b9      	ldr	r1, [r7, #8]
 80006f6:	68f8      	ldr	r0, [r7, #12]
 80006f8:	f000 f83a 	bl	8000770 <TIM_WritePSC>
	TIM_WriteARR(TIMx, arr);
 80006fc:	6879      	ldr	r1, [r7, #4]
 80006fe:	68f8      	ldr	r0, [r7, #12]
 8000700:	f000 f844 	bl	800078c <TIM_WriteARR>
	TIM_WriteCNT(TIMx, 0);
 8000704:	2100      	movs	r1, #0
 8000706:	68f8      	ldr	r0, [r7, #12]
 8000708:	f000 f824 	bl	8000754 <TIM_WriteCNT>
}
 800070c:	bf00      	nop
 800070e:	3710      	adds	r7, #16
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <TIM_CntStart>:

void TIM_CntStart(TIM_TypeDef *TIMx)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
	TIMx->CR1 |= 1<<0; // counter enable
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f043 0201 	orr.w	r2, r3, #1
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	601a      	str	r2, [r3, #0]
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <TIM_UIEnable>:
{
	TIMx->CR1 &= ~(1<<0); // counter disenable
}

void TIM_UIEnable(TIM_TypeDef *TIMx)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	TIMx->DIER |= 1<<0;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	f043 0201 	orr.w	r2, r3, #1
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	60da      	str	r2, [r3, #12]
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr

08000754 <TIM_WriteCNT>:
{
	TIMx->DIER &= ~(1<<0);
}

void TIM_WriteCNT(TIM_TypeDef *TIMx, uint32_t cnt)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
	TIMx->CNT = cnt;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	683a      	ldr	r2, [r7, #0]
 8000762:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <TIM_WritePSC>:
{
	return TIMx->CNT;
}

void TIM_WritePSC(TIM_TypeDef *TIMx, uint32_t psc)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
	TIMx->PSC = psc;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	683a      	ldr	r2, [r7, #0]
 800077e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000780:	bf00      	nop
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <TIM_WriteARR>:
{
	return TIMx->PSC;
}

void TIM_WriteARR(TIM_TypeDef *TIMx, uint32_t arr)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	6039      	str	r1, [r7, #0]
	TIMx->ARR = arr;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	683a      	ldr	r2, [r7, #0]
 800079a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800079c:	bf00      	nop
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <TIM_ClearUIFlag>:
{
	return TIMx->ARR;
}

void TIM_ClearUIFlag(TIM_TypeDef *TIMx)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	TIM2->SR &= ~(1<<0);
 80007b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007b4:	691b      	ldr	r3, [r3, #16]
 80007b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007ba:	f023 0301 	bic.w	r3, r3, #1
 80007be:	6113      	str	r3, [r2, #16]
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <main>:

#include <stdint.h>
#include "ap_main.h"

int main(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
    ap_init();
 80007d0:	f7ff fd46 	bl	8000260 <ap_init>
    while(1)
    {
    	ap_main();
 80007d4:	f7ff fd2a 	bl	800022c <ap_main>
 80007d8:	e7fc      	b.n	80007d4 <main+0x8>
	...

080007dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007dc:	480d      	ldr	r0, [pc, #52]	@ (8000814 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007e4:	480c      	ldr	r0, [pc, #48]	@ (8000818 <LoopForever+0x6>)
  ldr r1, =_edata
 80007e6:	490d      	ldr	r1, [pc, #52]	@ (800081c <LoopForever+0xa>)
  ldr r2, =_sidata
 80007e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000820 <LoopForever+0xe>)
  movs r3, #0
 80007ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007ec:	e002      	b.n	80007f4 <LoopCopyDataInit>

080007ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007f2:	3304      	adds	r3, #4

080007f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f8:	d3f9      	bcc.n	80007ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000824 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000828 <LoopForever+0x16>)
  movs r3, #0
 80007fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000800:	e001      	b.n	8000806 <LoopFillZerobss>

08000802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000804:	3204      	adds	r2, #4

08000806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000808:	d3fb      	bcc.n	8000802 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800080a:	f000 f811 	bl	8000830 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800080e:	f7ff ffdd 	bl	80007cc <main>

08000812 <LoopForever>:

LoopForever:
  b LoopForever
 8000812:	e7fe      	b.n	8000812 <LoopForever>
  ldr   r0, =_estack
 8000814:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000818:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800081c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000820:	080008a4 	.word	0x080008a4
  ldr r2, =_sbss
 8000824:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000828:	200000ac 	.word	0x200000ac

0800082c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800082c:	e7fe      	b.n	800082c <ADC_IRQHandler>
	...

08000830 <__libc_init_array>:
 8000830:	b570      	push	{r4, r5, r6, lr}
 8000832:	4d0d      	ldr	r5, [pc, #52]	@ (8000868 <__libc_init_array+0x38>)
 8000834:	4c0d      	ldr	r4, [pc, #52]	@ (800086c <__libc_init_array+0x3c>)
 8000836:	1b64      	subs	r4, r4, r5
 8000838:	10a4      	asrs	r4, r4, #2
 800083a:	2600      	movs	r6, #0
 800083c:	42a6      	cmp	r6, r4
 800083e:	d109      	bne.n	8000854 <__libc_init_array+0x24>
 8000840:	4d0b      	ldr	r5, [pc, #44]	@ (8000870 <__libc_init_array+0x40>)
 8000842:	4c0c      	ldr	r4, [pc, #48]	@ (8000874 <__libc_init_array+0x44>)
 8000844:	f000 f818 	bl	8000878 <_init>
 8000848:	1b64      	subs	r4, r4, r5
 800084a:	10a4      	asrs	r4, r4, #2
 800084c:	2600      	movs	r6, #0
 800084e:	42a6      	cmp	r6, r4
 8000850:	d105      	bne.n	800085e <__libc_init_array+0x2e>
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f855 3b04 	ldr.w	r3, [r5], #4
 8000858:	4798      	blx	r3
 800085a:	3601      	adds	r6, #1
 800085c:	e7ee      	b.n	800083c <__libc_init_array+0xc>
 800085e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000862:	4798      	blx	r3
 8000864:	3601      	adds	r6, #1
 8000866:	e7f2      	b.n	800084e <__libc_init_array+0x1e>
 8000868:	0800089c 	.word	0x0800089c
 800086c:	0800089c 	.word	0x0800089c
 8000870:	0800089c 	.word	0x0800089c
 8000874:	080008a0 	.word	0x080008a0

08000878 <_init>:
 8000878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800087a:	bf00      	nop
 800087c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800087e:	bc08      	pop	{r3}
 8000880:	469e      	mov	lr, r3
 8000882:	4770      	bx	lr

08000884 <_fini>:
 8000884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000886:	bf00      	nop
 8000888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800088a:	bc08      	pop	{r3}
 800088c:	469e      	mov	lr, r3
 800088e:	4770      	bx	lr
