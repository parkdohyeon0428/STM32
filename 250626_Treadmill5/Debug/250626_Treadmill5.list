
250626_Treadmill5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057c4  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800595c  0800595c  0000695c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005980  08005980  00007074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005980  08005980  00006980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005988  08005988  00007074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005988  08005988  00006988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800598c  0800598c  0000698c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08005990  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  20000074  08005a04  00007074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  08005a04  00007320  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015802  00000000  00000000  000070a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cfa  00000000  00000000  0001c8a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b8  00000000  00000000  000205a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e72  00000000  00000000  00021858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018574  00000000  00000000  000226ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001acf7  00000000  00000000  0003ac3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000912fb  00000000  00000000  00055935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e6c30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ae4  00000000  00000000  000e6c74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000eb758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000074 	.word	0x20000074
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005944 	.word	0x08005944

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000078 	.word	0x20000078
 80001d4:	08005944 	.word	0x08005944

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08a      	sub	sp, #40	@ 0x28
 8000508:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050a:	f107 0314 	add.w	r3, r7, #20
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	613b      	str	r3, [r7, #16]
 800051e:	4b49      	ldr	r3, [pc, #292]	@ (8000644 <MX_GPIO_Init+0x140>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000522:	4a48      	ldr	r2, [pc, #288]	@ (8000644 <MX_GPIO_Init+0x140>)
 8000524:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000528:	6313      	str	r3, [r2, #48]	@ 0x30
 800052a:	4b46      	ldr	r3, [pc, #280]	@ (8000644 <MX_GPIO_Init+0x140>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	4b42      	ldr	r3, [pc, #264]	@ (8000644 <MX_GPIO_Init+0x140>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053e:	4a41      	ldr	r2, [pc, #260]	@ (8000644 <MX_GPIO_Init+0x140>)
 8000540:	f043 0304 	orr.w	r3, r3, #4
 8000544:	6313      	str	r3, [r2, #48]	@ 0x30
 8000546:	4b3f      	ldr	r3, [pc, #252]	@ (8000644 <MX_GPIO_Init+0x140>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054a:	f003 0304 	and.w	r3, r3, #4
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	4b3b      	ldr	r3, [pc, #236]	@ (8000644 <MX_GPIO_Init+0x140>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055a:	4a3a      	ldr	r2, [pc, #232]	@ (8000644 <MX_GPIO_Init+0x140>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	6313      	str	r3, [r2, #48]	@ 0x30
 8000562:	4b38      	ldr	r3, [pc, #224]	@ (8000644 <MX_GPIO_Init+0x140>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	4b34      	ldr	r3, [pc, #208]	@ (8000644 <MX_GPIO_Init+0x140>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000576:	4a33      	ldr	r2, [pc, #204]	@ (8000644 <MX_GPIO_Init+0x140>)
 8000578:	f043 0302 	orr.w	r3, r3, #2
 800057c:	6313      	str	r3, [r2, #48]	@ 0x30
 800057e:	4b31      	ldr	r3, [pc, #196]	@ (8000644 <MX_GPIO_Init+0x140>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000582:	f003 0302 	and.w	r3, r3, #2
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800058a:	2200      	movs	r2, #0
 800058c:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8000590:	482d      	ldr	r0, [pc, #180]	@ (8000648 <MX_GPIO_Init+0x144>)
 8000592:	f001 ffe9 	bl	8002568 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_11
 8000596:	2200      	movs	r2, #0
 8000598:	f641 0113 	movw	r1, #6163	@ 0x1813
 800059c:	482b      	ldr	r0, [pc, #172]	@ (800064c <MX_GPIO_Init+0x148>)
 800059e:	f001 ffe3 	bl	8002568 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 80005a2:	2200      	movs	r2, #0
 80005a4:	f24f 0107 	movw	r1, #61447	@ 0xf007
 80005a8:	4829      	ldr	r0, [pc, #164]	@ (8000650 <MX_GPIO_Init+0x14c>)
 80005aa:	f001 ffdd 	bl	8002568 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80005ae:	f240 13ff 	movw	r3, #511	@ 0x1ff
 80005b2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b4:	2301      	movs	r3, #1
 80005b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005bc:	2300      	movs	r3, #0
 80005be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005c0:	f107 0314 	add.w	r3, r7, #20
 80005c4:	4619      	mov	r1, r3
 80005c6:	4820      	ldr	r0, [pc, #128]	@ (8000648 <MX_GPIO_Init+0x144>)
 80005c8:	f001 fe32 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_11
 80005cc:	f641 0313 	movw	r3, #6163	@ 0x1813
 80005d0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d2:	2301      	movs	r3, #1
 80005d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005da:	2300      	movs	r3, #0
 80005dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005de:	f107 0314 	add.w	r3, r7, #20
 80005e2:	4619      	mov	r1, r3
 80005e4:	4819      	ldr	r0, [pc, #100]	@ (800064c <MX_GPIO_Init+0x148>)
 80005e6:	f001 fe23 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 80005ea:	f24f 0307 	movw	r3, #61447	@ 0xf007
 80005ee:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f0:	2301      	movs	r3, #1
 80005f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f8:	2300      	movs	r3, #0
 80005fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005fc:	f107 0314 	add.w	r3, r7, #20
 8000600:	4619      	mov	r1, r3
 8000602:	4813      	ldr	r0, [pc, #76]	@ (8000650 <MX_GPIO_Init+0x14c>)
 8000604:	f001 fe14 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000608:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800060c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800060e:	2300      	movs	r3, #0
 8000610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	4619      	mov	r1, r3
 800061c:	480b      	ldr	r0, [pc, #44]	@ (800064c <MX_GPIO_Init+0x148>)
 800061e:	f001 fe07 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6;
 8000622:	2368      	movs	r3, #104	@ 0x68
 8000624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000626:	2300      	movs	r3, #0
 8000628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	4619      	mov	r1, r3
 8000634:	4806      	ldr	r0, [pc, #24]	@ (8000650 <MX_GPIO_Init+0x14c>)
 8000636:	f001 fdfb 	bl	8002230 <HAL_GPIO_Init>

}
 800063a:	bf00      	nop
 800063c:	3728      	adds	r7, #40	@ 0x28
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800
 8000648:	40020800 	.word	0x40020800
 800064c:	40020000 	.word	0x40020000
 8000650:	40020400 	.word	0x40020400

08000654 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000658:	4b12      	ldr	r3, [pc, #72]	@ (80006a4 <MX_I2C1_Init+0x50>)
 800065a:	4a13      	ldr	r2, [pc, #76]	@ (80006a8 <MX_I2C1_Init+0x54>)
 800065c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800065e:	4b11      	ldr	r3, [pc, #68]	@ (80006a4 <MX_I2C1_Init+0x50>)
 8000660:	4a12      	ldr	r2, [pc, #72]	@ (80006ac <MX_I2C1_Init+0x58>)
 8000662:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000664:	4b0f      	ldr	r3, [pc, #60]	@ (80006a4 <MX_I2C1_Init+0x50>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800066a:	4b0e      	ldr	r3, [pc, #56]	@ (80006a4 <MX_I2C1_Init+0x50>)
 800066c:	2200      	movs	r2, #0
 800066e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000670:	4b0c      	ldr	r3, [pc, #48]	@ (80006a4 <MX_I2C1_Init+0x50>)
 8000672:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000676:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000678:	4b0a      	ldr	r3, [pc, #40]	@ (80006a4 <MX_I2C1_Init+0x50>)
 800067a:	2200      	movs	r2, #0
 800067c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800067e:	4b09      	ldr	r3, [pc, #36]	@ (80006a4 <MX_I2C1_Init+0x50>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000684:	4b07      	ldr	r3, [pc, #28]	@ (80006a4 <MX_I2C1_Init+0x50>)
 8000686:	2200      	movs	r2, #0
 8000688:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800068a:	4b06      	ldr	r3, [pc, #24]	@ (80006a4 <MX_I2C1_Init+0x50>)
 800068c:	2200      	movs	r2, #0
 800068e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000690:	4804      	ldr	r0, [pc, #16]	@ (80006a4 <MX_I2C1_Init+0x50>)
 8000692:	f001 ff83 	bl	800259c <HAL_I2C_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800069c:	f000 f8d4 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000090 	.word	0x20000090
 80006a8:	40005400 	.word	0x40005400
 80006ac:	000186a0 	.word	0x000186a0

080006b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08a      	sub	sp, #40	@ 0x28
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a19      	ldr	r2, [pc, #100]	@ (8000734 <HAL_I2C_MspInit+0x84>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d12c      	bne.n	800072c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
 80006d6:	4b18      	ldr	r3, [pc, #96]	@ (8000738 <HAL_I2C_MspInit+0x88>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	4a17      	ldr	r2, [pc, #92]	@ (8000738 <HAL_I2C_MspInit+0x88>)
 80006dc:	f043 0302 	orr.w	r3, r3, #2
 80006e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e2:	4b15      	ldr	r3, [pc, #84]	@ (8000738 <HAL_I2C_MspInit+0x88>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	f003 0302 	and.w	r3, r3, #2
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006ee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80006f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006f4:	2312      	movs	r3, #18
 80006f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006fc:	2303      	movs	r3, #3
 80006fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000700:	2304      	movs	r3, #4
 8000702:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	4619      	mov	r1, r3
 800070a:	480c      	ldr	r0, [pc, #48]	@ (800073c <HAL_I2C_MspInit+0x8c>)
 800070c:	f001 fd90 	bl	8002230 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	4b08      	ldr	r3, [pc, #32]	@ (8000738 <HAL_I2C_MspInit+0x88>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000718:	4a07      	ldr	r2, [pc, #28]	@ (8000738 <HAL_I2C_MspInit+0x88>)
 800071a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800071e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000720:	4b05      	ldr	r3, [pc, #20]	@ (8000738 <HAL_I2C_MspInit+0x88>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000724:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800072c:	bf00      	nop
 800072e:	3728      	adds	r7, #40	@ 0x28
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40005400 	.word	0x40005400
 8000738:	40023800 	.word	0x40023800
 800073c:	40020400 	.word	0x40020400

08000740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000744:	f001 fb3a 	bl	8001dbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000748:	f000 f816 	bl	8000778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074c:	f7ff feda 	bl	8000504 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000750:	f000 f99e 	bl	8000a90 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000754:	f000 fbdc 	bl	8000f10 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000758:	f7ff ff7c 	bl	8000654 <MX_I2C1_Init>
  MX_TIM3_Init();
 800075c:	f000 f9e4 	bl	8000b28 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000760:	f000 f8f6 	bl	8000950 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000764:	f000 fa58 	bl	8000c18 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000768:	f000 faa4 	bl	8000cb4 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  ap_init();
 800076c:	f000 fe20 	bl	80013b0 <ap_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ap_main();
 8000770:	f000 fde8 	bl	8001344 <ap_main>
 8000774:	e7fc      	b.n	8000770 <main+0x30>
	...

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b094      	sub	sp, #80	@ 0x50
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 0320 	add.w	r3, r7, #32
 8000782:	2230      	movs	r2, #48	@ 0x30
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f005 f8b0 	bl	80058ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800079c:	2300      	movs	r3, #0
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	4b27      	ldr	r3, [pc, #156]	@ (8000840 <SystemClock_Config+0xc8>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a4:	4a26      	ldr	r2, [pc, #152]	@ (8000840 <SystemClock_Config+0xc8>)
 80007a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ac:	4b24      	ldr	r3, [pc, #144]	@ (8000840 <SystemClock_Config+0xc8>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b8:	2300      	movs	r3, #0
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	4b21      	ldr	r3, [pc, #132]	@ (8000844 <SystemClock_Config+0xcc>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a20      	ldr	r2, [pc, #128]	@ (8000844 <SystemClock_Config+0xcc>)
 80007c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007c6:	6013      	str	r3, [r2, #0]
 80007c8:	4b1e      	ldr	r3, [pc, #120]	@ (8000844 <SystemClock_Config+0xcc>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d4:	2301      	movs	r3, #1
 80007d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007de:	2302      	movs	r3, #2
 80007e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007e2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007e8:	2304      	movs	r3, #4
 80007ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80007ec:	2364      	movs	r3, #100	@ 0x64
 80007ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f0:	2302      	movs	r3, #2
 80007f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007f4:	2304      	movs	r3, #4
 80007f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f8:	f107 0320 	add.w	r3, r7, #32
 80007fc:	4618      	mov	r0, r3
 80007fe:	f002 fb6b 	bl	8002ed8 <HAL_RCC_OscConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000808:	f000 f81e 	bl	8000848 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080c:	230f      	movs	r3, #15
 800080e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000810:	2302      	movs	r3, #2
 8000812:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000818:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800081c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000822:	f107 030c 	add.w	r3, r7, #12
 8000826:	2103      	movs	r1, #3
 8000828:	4618      	mov	r0, r3
 800082a:	f002 fdcd 	bl	80033c8 <HAL_RCC_ClockConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000834:	f000 f808 	bl	8000848 <Error_Handler>
  }
}
 8000838:	bf00      	nop
 800083a:	3750      	adds	r7, #80	@ 0x50
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40023800 	.word	0x40023800
 8000844:	40007000 	.word	0x40007000

08000848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084c:	b672      	cpsid	i
}
 800084e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <Error_Handler+0x8>

08000854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4b10      	ldr	r3, [pc, #64]	@ (80008a0 <HAL_MspInit+0x4c>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000862:	4a0f      	ldr	r2, [pc, #60]	@ (80008a0 <HAL_MspInit+0x4c>)
 8000864:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000868:	6453      	str	r3, [r2, #68]	@ 0x44
 800086a:	4b0d      	ldr	r3, [pc, #52]	@ (80008a0 <HAL_MspInit+0x4c>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800086e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	4b09      	ldr	r3, [pc, #36]	@ (80008a0 <HAL_MspInit+0x4c>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087e:	4a08      	ldr	r2, [pc, #32]	@ (80008a0 <HAL_MspInit+0x4c>)
 8000880:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000884:	6413      	str	r3, [r2, #64]	@ 0x40
 8000886:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <HAL_MspInit+0x4c>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800

080008a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <NMI_Handler+0x4>

080008ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b0:	bf00      	nop
 80008b2:	e7fd      	b.n	80008b0 <HardFault_Handler+0x4>

080008b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <MemManage_Handler+0x4>

080008bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <BusFault_Handler+0x4>

080008c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <UsageFault_Handler+0x4>

080008cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr

080008f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008fa:	f001 fab1 	bl	8001e60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000908:	4802      	ldr	r0, [pc, #8]	@ (8000914 <TIM2_IRQHandler+0x10>)
 800090a:	f003 fa1f 	bl	8003d4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	2000012c 	.word	0x2000012c

08000918 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800091c:	4802      	ldr	r0, [pc, #8]	@ (8000928 <USART2_IRQHandler+0x10>)
 800091e:	f004 f8d3 	bl	8004ac8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	2000024c 	.word	0x2000024c

0800092c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000930:	4b06      	ldr	r3, [pc, #24]	@ (800094c <SystemInit+0x20>)
 8000932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000936:	4a05      	ldr	r2, [pc, #20]	@ (800094c <SystemInit+0x20>)
 8000938:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800093c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b096      	sub	sp, #88	@ 0x58
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000956:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000964:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800096e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]
 800097e:	615a      	str	r2, [r3, #20]
 8000980:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	2220      	movs	r2, #32
 8000986:	2100      	movs	r1, #0
 8000988:	4618      	mov	r0, r3
 800098a:	f004 ffaf 	bl	80058ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800098e:	4b3e      	ldr	r3, [pc, #248]	@ (8000a88 <MX_TIM1_Init+0x138>)
 8000990:	4a3e      	ldr	r2, [pc, #248]	@ (8000a8c <MX_TIM1_Init+0x13c>)
 8000992:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8000994:	4b3c      	ldr	r3, [pc, #240]	@ (8000a88 <MX_TIM1_Init+0x138>)
 8000996:	2263      	movs	r2, #99	@ 0x63
 8000998:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099a:	4b3b      	ldr	r3, [pc, #236]	@ (8000a88 <MX_TIM1_Init+0x138>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80009a0:	4b39      	ldr	r3, [pc, #228]	@ (8000a88 <MX_TIM1_Init+0x138>)
 80009a2:	2263      	movs	r2, #99	@ 0x63
 80009a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a6:	4b38      	ldr	r3, [pc, #224]	@ (8000a88 <MX_TIM1_Init+0x138>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009ac:	4b36      	ldr	r3, [pc, #216]	@ (8000a88 <MX_TIM1_Init+0x138>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009b2:	4b35      	ldr	r3, [pc, #212]	@ (8000a88 <MX_TIM1_Init+0x138>)
 80009b4:	2280      	movs	r2, #128	@ 0x80
 80009b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009b8:	4833      	ldr	r0, [pc, #204]	@ (8000a88 <MX_TIM1_Init+0x138>)
 80009ba:	f002 ff25 	bl	8003808 <HAL_TIM_Base_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80009c4:	f7ff ff40 	bl	8000848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009ce:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80009d2:	4619      	mov	r1, r3
 80009d4:	482c      	ldr	r0, [pc, #176]	@ (8000a88 <MX_TIM1_Init+0x138>)
 80009d6:	f003 fb6b 	bl	80040b0 <HAL_TIM_ConfigClockSource>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80009e0:	f7ff ff32 	bl	8000848 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009e4:	4828      	ldr	r0, [pc, #160]	@ (8000a88 <MX_TIM1_Init+0x138>)
 80009e6:	f003 f843 	bl	8003a70 <HAL_TIM_PWM_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80009f0:	f7ff ff2a 	bl	8000848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f4:	2300      	movs	r3, #0
 80009f6:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f8:	2300      	movs	r3, #0
 80009fa:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009fc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a00:	4619      	mov	r1, r3
 8000a02:	4821      	ldr	r0, [pc, #132]	@ (8000a88 <MX_TIM1_Init+0x138>)
 8000a04:	f003 ff16 	bl	8004834 <HAL_TIMEx_MasterConfigSynchronization>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000a0e:	f7ff ff1b 	bl	8000848 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a12:	2360      	movs	r3, #96	@ 0x60
 8000a14:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 50;
 8000a16:	2332      	movs	r3, #50	@ 0x32
 8000a18:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a22:	2300      	movs	r3, #0
 8000a24:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a26:	2300      	movs	r3, #0
 8000a28:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a32:	2200      	movs	r2, #0
 8000a34:	4619      	mov	r1, r3
 8000a36:	4814      	ldr	r0, [pc, #80]	@ (8000a88 <MX_TIM1_Init+0x138>)
 8000a38:	f003 fa78 	bl	8003f2c <HAL_TIM_PWM_ConfigChannel>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000a42:	f7ff ff01 	bl	8000848 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a5e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a60:	2300      	movs	r3, #0
 8000a62:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	4619      	mov	r1, r3
 8000a68:	4807      	ldr	r0, [pc, #28]	@ (8000a88 <MX_TIM1_Init+0x138>)
 8000a6a:	f003 ff51 	bl	8004910 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000a74:	f7ff fee8 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a78:	4803      	ldr	r0, [pc, #12]	@ (8000a88 <MX_TIM1_Init+0x138>)
 8000a7a:	f000 f9e7 	bl	8000e4c <HAL_TIM_MspPostInit>

}
 8000a7e:	bf00      	nop
 8000a80:	3758      	adds	r7, #88	@ 0x58
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	200000e4 	.word	0x200000e4
 8000a8c:	40010000 	.word	0x40010000

08000a90 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a96:	f107 0308 	add.w	r3, r7, #8
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa4:	463b      	mov	r3, r7
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000aac:	4b1d      	ldr	r3, [pc, #116]	@ (8000b24 <MX_TIM2_Init+0x94>)
 8000aae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ab2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8000ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b24 <MX_TIM2_Init+0x94>)
 8000ab6:	2263      	movs	r2, #99	@ 0x63
 8000ab8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aba:	4b1a      	ldr	r3, [pc, #104]	@ (8000b24 <MX_TIM2_Init+0x94>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000ac0:	4b18      	ldr	r3, [pc, #96]	@ (8000b24 <MX_TIM2_Init+0x94>)
 8000ac2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ac6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac8:	4b16      	ldr	r3, [pc, #88]	@ (8000b24 <MX_TIM2_Init+0x94>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ace:	4b15      	ldr	r3, [pc, #84]	@ (8000b24 <MX_TIM2_Init+0x94>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ad4:	4813      	ldr	r0, [pc, #76]	@ (8000b24 <MX_TIM2_Init+0x94>)
 8000ad6:	f002 fe97 	bl	8003808 <HAL_TIM_Base_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ae0:	f7ff feb2 	bl	8000848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ae4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ae8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000aea:	f107 0308 	add.w	r3, r7, #8
 8000aee:	4619      	mov	r1, r3
 8000af0:	480c      	ldr	r0, [pc, #48]	@ (8000b24 <MX_TIM2_Init+0x94>)
 8000af2:	f003 fadd 	bl	80040b0 <HAL_TIM_ConfigClockSource>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000afc:	f7ff fea4 	bl	8000848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b00:	2300      	movs	r3, #0
 8000b02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b08:	463b      	mov	r3, r7
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4805      	ldr	r0, [pc, #20]	@ (8000b24 <MX_TIM2_Init+0x94>)
 8000b0e:	f003 fe91 	bl	8004834 <HAL_TIMEx_MasterConfigSynchronization>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b18:	f7ff fe96 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	3718      	adds	r7, #24
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	2000012c 	.word	0x2000012c

08000b28 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08e      	sub	sp, #56	@ 0x38
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b3c:	f107 0320 	add.w	r3, r7, #32
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
 8000b54:	615a      	str	r2, [r3, #20]
 8000b56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b58:	4b2d      	ldr	r3, [pc, #180]	@ (8000c10 <MX_TIM3_Init+0xe8>)
 8000b5a:	4a2e      	ldr	r2, [pc, #184]	@ (8000c14 <MX_TIM3_Init+0xec>)
 8000b5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8000b5e:	4b2c      	ldr	r3, [pc, #176]	@ (8000c10 <MX_TIM3_Init+0xe8>)
 8000b60:	2263      	movs	r2, #99	@ 0x63
 8000b62:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b64:	4b2a      	ldr	r3, [pc, #168]	@ (8000c10 <MX_TIM3_Init+0xe8>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000b6a:	4b29      	ldr	r3, [pc, #164]	@ (8000c10 <MX_TIM3_Init+0xe8>)
 8000b6c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b70:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b72:	4b27      	ldr	r3, [pc, #156]	@ (8000c10 <MX_TIM3_Init+0xe8>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b78:	4b25      	ldr	r3, [pc, #148]	@ (8000c10 <MX_TIM3_Init+0xe8>)
 8000b7a:	2280      	movs	r2, #128	@ 0x80
 8000b7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b7e:	4824      	ldr	r0, [pc, #144]	@ (8000c10 <MX_TIM3_Init+0xe8>)
 8000b80:	f002 fe42 	bl	8003808 <HAL_TIM_Base_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000b8a:	f7ff fe5d 	bl	8000848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b92:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b94:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b98:	4619      	mov	r1, r3
 8000b9a:	481d      	ldr	r0, [pc, #116]	@ (8000c10 <MX_TIM3_Init+0xe8>)
 8000b9c:	f003 fa88 	bl	80040b0 <HAL_TIM_ConfigClockSource>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000ba6:	f7ff fe4f 	bl	8000848 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000baa:	4819      	ldr	r0, [pc, #100]	@ (8000c10 <MX_TIM3_Init+0xe8>)
 8000bac:	f002 ff60 	bl	8003a70 <HAL_TIM_PWM_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000bb6:	f7ff fe47 	bl	8000848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bc2:	f107 0320 	add.w	r3, r7, #32
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4811      	ldr	r0, [pc, #68]	@ (8000c10 <MX_TIM3_Init+0xe8>)
 8000bca:	f003 fe33 	bl	8004834 <HAL_TIMEx_MasterConfigSynchronization>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000bd4:	f7ff fe38 	bl	8000848 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bd8:	2360      	movs	r3, #96	@ 0x60
 8000bda:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8000bdc:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8000be0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	2200      	movs	r2, #0
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4807      	ldr	r0, [pc, #28]	@ (8000c10 <MX_TIM3_Init+0xe8>)
 8000bf2:	f003 f99b 	bl	8003f2c <HAL_TIM_PWM_ConfigChannel>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000bfc:	f7ff fe24 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c00:	4803      	ldr	r0, [pc, #12]	@ (8000c10 <MX_TIM3_Init+0xe8>)
 8000c02:	f000 f923 	bl	8000e4c <HAL_TIM_MspPostInit>

}
 8000c06:	bf00      	nop
 8000c08:	3738      	adds	r7, #56	@ 0x38
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000174 	.word	0x20000174
 8000c14:	40000400 	.word	0x40000400

08000c18 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c1e:	f107 0308 	add.w	r3, r7, #8
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c2c:	463b      	mov	r3, r7
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c34:	4b1d      	ldr	r3, [pc, #116]	@ (8000cac <MX_TIM4_Init+0x94>)
 8000c36:	4a1e      	ldr	r2, [pc, #120]	@ (8000cb0 <MX_TIM4_Init+0x98>)
 8000c38:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8000c3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cac <MX_TIM4_Init+0x94>)
 8000c3c:	2263      	movs	r2, #99	@ 0x63
 8000c3e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c40:	4b1a      	ldr	r3, [pc, #104]	@ (8000cac <MX_TIM4_Init+0x94>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 30000;
 8000c46:	4b19      	ldr	r3, [pc, #100]	@ (8000cac <MX_TIM4_Init+0x94>)
 8000c48:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000c4c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c4e:	4b17      	ldr	r3, [pc, #92]	@ (8000cac <MX_TIM4_Init+0x94>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c54:	4b15      	ldr	r3, [pc, #84]	@ (8000cac <MX_TIM4_Init+0x94>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c5a:	4814      	ldr	r0, [pc, #80]	@ (8000cac <MX_TIM4_Init+0x94>)
 8000c5c:	f002 fdd4 	bl	8003808 <HAL_TIM_Base_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000c66:	f7ff fdef 	bl	8000848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000c70:	f107 0308 	add.w	r3, r7, #8
 8000c74:	4619      	mov	r1, r3
 8000c76:	480d      	ldr	r0, [pc, #52]	@ (8000cac <MX_TIM4_Init+0x94>)
 8000c78:	f003 fa1a 	bl	80040b0 <HAL_TIM_ConfigClockSource>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000c82:	f7ff fde1 	bl	8000848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c86:	2300      	movs	r3, #0
 8000c88:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c8e:	463b      	mov	r3, r7
 8000c90:	4619      	mov	r1, r3
 8000c92:	4806      	ldr	r0, [pc, #24]	@ (8000cac <MX_TIM4_Init+0x94>)
 8000c94:	f003 fdce 	bl	8004834 <HAL_TIMEx_MasterConfigSynchronization>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000c9e:	f7ff fdd3 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ca2:	bf00      	nop
 8000ca4:	3718      	adds	r7, #24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	200001bc 	.word	0x200001bc
 8000cb0:	40000800 	.word	0x40000800

08000cb4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cba:	f107 0308 	add.w	r3, r7, #8
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc8:	463b      	mov	r3, r7
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8000d48 <MX_TIM5_Init+0x94>)
 8000cd2:	4a1e      	ldr	r2, [pc, #120]	@ (8000d4c <MX_TIM5_Init+0x98>)
 8000cd4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100-1;
 8000cd6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d48 <MX_TIM5_Init+0x94>)
 8000cd8:	2263      	movs	r2, #99	@ 0x63
 8000cda:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cdc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d48 <MX_TIM5_Init+0x94>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000ce2:	4b19      	ldr	r3, [pc, #100]	@ (8000d48 <MX_TIM5_Init+0x94>)
 8000ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cea:	4b17      	ldr	r3, [pc, #92]	@ (8000d48 <MX_TIM5_Init+0x94>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf0:	4b15      	ldr	r3, [pc, #84]	@ (8000d48 <MX_TIM5_Init+0x94>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000cf6:	4814      	ldr	r0, [pc, #80]	@ (8000d48 <MX_TIM5_Init+0x94>)
 8000cf8:	f002 fd86 	bl	8003808 <HAL_TIM_Base_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8000d02:	f7ff fda1 	bl	8000848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000d0c:	f107 0308 	add.w	r3, r7, #8
 8000d10:	4619      	mov	r1, r3
 8000d12:	480d      	ldr	r0, [pc, #52]	@ (8000d48 <MX_TIM5_Init+0x94>)
 8000d14:	f003 f9cc 	bl	80040b0 <HAL_TIM_ConfigClockSource>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8000d1e:	f7ff fd93 	bl	8000848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d22:	2300      	movs	r3, #0
 8000d24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000d2a:	463b      	mov	r3, r7
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4806      	ldr	r0, [pc, #24]	@ (8000d48 <MX_TIM5_Init+0x94>)
 8000d30:	f003 fd80 	bl	8004834 <HAL_TIMEx_MasterConfigSynchronization>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8000d3a:	f7ff fd85 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000d3e:	bf00      	nop
 8000d40:	3718      	adds	r7, #24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000204 	.word	0x20000204
 8000d4c:	40000c00 	.word	0x40000c00

08000d50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b088      	sub	sp, #32
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a36      	ldr	r2, [pc, #216]	@ (8000e38 <HAL_TIM_Base_MspInit+0xe8>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d10e      	bne.n	8000d80 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	61fb      	str	r3, [r7, #28]
 8000d66:	4b35      	ldr	r3, [pc, #212]	@ (8000e3c <HAL_TIM_Base_MspInit+0xec>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6a:	4a34      	ldr	r2, [pc, #208]	@ (8000e3c <HAL_TIM_Base_MspInit+0xec>)
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d72:	4b32      	ldr	r3, [pc, #200]	@ (8000e3c <HAL_TIM_Base_MspInit+0xec>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	61fb      	str	r3, [r7, #28]
 8000d7c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8000d7e:	e056      	b.n	8000e2e <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM2)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d88:	d116      	bne.n	8000db8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61bb      	str	r3, [r7, #24]
 8000d8e:	4b2b      	ldr	r3, [pc, #172]	@ (8000e3c <HAL_TIM_Base_MspInit+0xec>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d92:	4a2a      	ldr	r2, [pc, #168]	@ (8000e3c <HAL_TIM_Base_MspInit+0xec>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d9a:	4b28      	ldr	r3, [pc, #160]	@ (8000e3c <HAL_TIM_Base_MspInit+0xec>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	61bb      	str	r3, [r7, #24]
 8000da4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2100      	movs	r1, #0
 8000daa:	201c      	movs	r0, #28
 8000dac:	f001 f977 	bl	800209e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000db0:	201c      	movs	r0, #28
 8000db2:	f001 f990 	bl	80020d6 <HAL_NVIC_EnableIRQ>
}
 8000db6:	e03a      	b.n	8000e2e <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM3)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a20      	ldr	r2, [pc, #128]	@ (8000e40 <HAL_TIM_Base_MspInit+0xf0>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d10e      	bne.n	8000de0 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
 8000dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e3c <HAL_TIM_Base_MspInit+0xec>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dca:	4a1c      	ldr	r2, [pc, #112]	@ (8000e3c <HAL_TIM_Base_MspInit+0xec>)
 8000dcc:	f043 0302 	orr.w	r3, r3, #2
 8000dd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dd2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e3c <HAL_TIM_Base_MspInit+0xec>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd6:	f003 0302 	and.w	r3, r3, #2
 8000dda:	617b      	str	r3, [r7, #20]
 8000ddc:	697b      	ldr	r3, [r7, #20]
}
 8000dde:	e026      	b.n	8000e2e <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM4)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a17      	ldr	r2, [pc, #92]	@ (8000e44 <HAL_TIM_Base_MspInit+0xf4>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d10e      	bne.n	8000e08 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	4b13      	ldr	r3, [pc, #76]	@ (8000e3c <HAL_TIM_Base_MspInit+0xec>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df2:	4a12      	ldr	r2, [pc, #72]	@ (8000e3c <HAL_TIM_Base_MspInit+0xec>)
 8000df4:	f043 0304 	orr.w	r3, r3, #4
 8000df8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dfa:	4b10      	ldr	r3, [pc, #64]	@ (8000e3c <HAL_TIM_Base_MspInit+0xec>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfe:	f003 0304 	and.w	r3, r3, #4
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]
}
 8000e06:	e012      	b.n	8000e2e <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM5)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a0e      	ldr	r2, [pc, #56]	@ (8000e48 <HAL_TIM_Base_MspInit+0xf8>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d10d      	bne.n	8000e2e <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	4b09      	ldr	r3, [pc, #36]	@ (8000e3c <HAL_TIM_Base_MspInit+0xec>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1a:	4a08      	ldr	r2, [pc, #32]	@ (8000e3c <HAL_TIM_Base_MspInit+0xec>)
 8000e1c:	f043 0308 	orr.w	r3, r3, #8
 8000e20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e22:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <HAL_TIM_Base_MspInit+0xec>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e26:	f003 0308 	and.w	r3, r3, #8
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
}
 8000e2e:	bf00      	nop
 8000e30:	3720      	adds	r7, #32
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40010000 	.word	0x40010000
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40000400 	.word	0x40000400
 8000e44:	40000800 	.word	0x40000800
 8000e48:	40000c00 	.word	0x40000c00

08000e4c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	@ 0x28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a24      	ldr	r2, [pc, #144]	@ (8000efc <HAL_TIM_MspPostInit+0xb0>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d11f      	bne.n	8000eae <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	4b23      	ldr	r3, [pc, #140]	@ (8000f00 <HAL_TIM_MspPostInit+0xb4>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	4a22      	ldr	r2, [pc, #136]	@ (8000f00 <HAL_TIM_MspPostInit+0xb4>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7e:	4b20      	ldr	r3, [pc, #128]	@ (8000f00 <HAL_TIM_MspPostInit+0xb4>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4817      	ldr	r0, [pc, #92]	@ (8000f04 <HAL_TIM_MspPostInit+0xb8>)
 8000ea8:	f001 f9c2 	bl	8002230 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000eac:	e022      	b.n	8000ef4 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a15      	ldr	r2, [pc, #84]	@ (8000f08 <HAL_TIM_MspPostInit+0xbc>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d11d      	bne.n	8000ef4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	4b10      	ldr	r3, [pc, #64]	@ (8000f00 <HAL_TIM_MspPostInit+0xb4>)
 8000ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec0:	4a0f      	ldr	r2, [pc, #60]	@ (8000f00 <HAL_TIM_MspPostInit+0xb4>)
 8000ec2:	f043 0302 	orr.w	r3, r3, #2
 8000ec6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec8:	4b0d      	ldr	r3, [pc, #52]	@ (8000f00 <HAL_TIM_MspPostInit+0xb4>)
 8000eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ecc:	f003 0302 	and.w	r3, r3, #2
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ed4:	2310      	movs	r3, #16
 8000ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	4619      	mov	r1, r3
 8000eee:	4807      	ldr	r0, [pc, #28]	@ (8000f0c <HAL_TIM_MspPostInit+0xc0>)
 8000ef0:	f001 f99e 	bl	8002230 <HAL_GPIO_Init>
}
 8000ef4:	bf00      	nop
 8000ef6:	3728      	adds	r7, #40	@ 0x28
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40010000 	.word	0x40010000
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40020000 	.word	0x40020000
 8000f08:	40000400 	.word	0x40000400
 8000f0c:	40020400 	.word	0x40020400

08000f10 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f14:	4b11      	ldr	r3, [pc, #68]	@ (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f16:	4a12      	ldr	r2, [pc, #72]	@ (8000f60 <MX_USART2_UART_Init+0x50>)
 8000f18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f1a:	4b10      	ldr	r3, [pc, #64]	@ (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f22:	4b0e      	ldr	r3, [pc, #56]	@ (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f28:	4b0c      	ldr	r3, [pc, #48]	@ (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f34:	4b09      	ldr	r3, [pc, #36]	@ (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f36:	220c      	movs	r2, #12
 8000f38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f3a:	4b08      	ldr	r3, [pc, #32]	@ (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f40:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f46:	4805      	ldr	r0, [pc, #20]	@ (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f48:	f003 fd48 	bl	80049dc <HAL_UART_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f52:	f7ff fc79 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	2000024c 	.word	0x2000024c
 8000f60:	40004400 	.word	0x40004400

08000f64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	@ 0x28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a1d      	ldr	r2, [pc, #116]	@ (8000ff8 <HAL_UART_MspInit+0x94>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d133      	bne.n	8000fee <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ffc <HAL_UART_MspInit+0x98>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8e:	4a1b      	ldr	r2, [pc, #108]	@ (8000ffc <HAL_UART_MspInit+0x98>)
 8000f90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f96:	4b19      	ldr	r3, [pc, #100]	@ (8000ffc <HAL_UART_MspInit+0x98>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	4b15      	ldr	r3, [pc, #84]	@ (8000ffc <HAL_UART_MspInit+0x98>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	4a14      	ldr	r2, [pc, #80]	@ (8000ffc <HAL_UART_MspInit+0x98>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb2:	4b12      	ldr	r3, [pc, #72]	@ (8000ffc <HAL_UART_MspInit+0x98>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fbe:	230c      	movs	r3, #12
 8000fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fce:	2307      	movs	r3, #7
 8000fd0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4809      	ldr	r0, [pc, #36]	@ (8001000 <HAL_UART_MspInit+0x9c>)
 8000fda:	f001 f929 	bl	8002230 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2026      	movs	r0, #38	@ 0x26
 8000fe4:	f001 f85b 	bl	800209e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fe8:	2026      	movs	r0, #38	@ 0x26
 8000fea:	f001 f874 	bl	80020d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000fee:	bf00      	nop
 8000ff0:	3728      	adds	r7, #40	@ 0x28
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40004400 	.word	0x40004400
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40020000 	.word	0x40020000

08001004 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001004:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800103c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001008:	f7ff fc90 	bl	800092c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800100c:	480c      	ldr	r0, [pc, #48]	@ (8001040 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800100e:	490d      	ldr	r1, [pc, #52]	@ (8001044 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001010:	4a0d      	ldr	r2, [pc, #52]	@ (8001048 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001014:	e002      	b.n	800101c <LoopCopyDataInit>

08001016 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001016:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001018:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101a:	3304      	adds	r3, #4

0800101c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800101c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001020:	d3f9      	bcc.n	8001016 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001022:	4a0a      	ldr	r2, [pc, #40]	@ (800104c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001024:	4c0a      	ldr	r4, [pc, #40]	@ (8001050 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001028:	e001      	b.n	800102e <LoopFillZerobss>

0800102a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800102c:	3204      	adds	r2, #4

0800102e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001030:	d3fb      	bcc.n	800102a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001032:	f004 fc63 	bl	80058fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001036:	f7ff fb83 	bl	8000740 <main>
  bx  lr    
 800103a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800103c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001040:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001044:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001048:	08005990 	.word	0x08005990
  ldr r2, =_sbss
 800104c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001050:	20000320 	.word	0x20000320

08001054 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001054:	e7fe      	b.n	8001054 <ADC_IRQHandler>
	...

08001058 <Treadmill_Controller_SetInput>:
TreadmillInputId_t inputData = NO_INPUT;

extern UltraSonic_TypeDef sensor;

void Treadmill_Controller_SetInput(TreadmillInputId_t input)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
    // 입력 값을 전역 inputData 에 저장
    inputData = input;
 8001062:	4a04      	ldr	r2, [pc, #16]	@ (8001074 <Treadmill_Controller_SetInput+0x1c>)
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	7013      	strb	r3, [r2, #0]
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	20000294 	.word	0x20000294

08001078 <Treadmill_Controller_Excute>:

void Treadmill_Controller_Excute()
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
    switch (treadmillState)
 800107e:	4b35      	ldr	r3, [pc, #212]	@ (8001154 <Treadmill_Controller_Excute+0xdc>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b02      	cmp	r3, #2
 8001084:	d042      	beq.n	800110c <Treadmill_Controller_Excute+0x94>
 8001086:	2b02      	cmp	r3, #2
 8001088:	dc49      	bgt.n	800111e <Treadmill_Controller_Excute+0xa6>
 800108a:	2b00      	cmp	r3, #0
 800108c:	d002      	beq.n	8001094 <Treadmill_Controller_Excute+0x1c>
 800108e:	2b01      	cmp	r3, #1
 8001090:	d010      	beq.n	80010b4 <Treadmill_Controller_Excute+0x3c>
 8001092:	e044      	b.n	800111e <Treadmill_Controller_Excute+0xa6>
    {
        case T_IDLE:
            if (inputData == TREADMILL_START) {
 8001094:	4b30      	ldr	r3, [pc, #192]	@ (8001158 <Treadmill_Controller_Excute+0xe0>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d13d      	bne.n	8001118 <Treadmill_Controller_Excute+0xa0>
                treadmillState = T_RUNNING;
 800109c:	4b2d      	ldr	r3, [pc, #180]	@ (8001154 <Treadmill_Controller_Excute+0xdc>)
 800109e:	2201      	movs	r2, #1
 80010a0:	701a      	strb	r2, [r3, #0]
                DC_Motor_SetFreq(10, speed);
 80010a2:	4b2e      	ldr	r3, [pc, #184]	@ (800115c <Treadmill_Controller_Excute+0xe4>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4619      	mov	r1, r3
 80010a8:	200a      	movs	r0, #10
 80010aa:	f000 fb27 	bl	80016fc <DC_Motor_SetFreq>
                DC_Motor_Start();
 80010ae:	f000 fb5d 	bl	800176c <DC_Motor_Start>
            }
            break;
 80010b2:	e031      	b.n	8001118 <Treadmill_Controller_Excute+0xa0>

        case T_RUNNING:
            if (inputData == TREADMILL_STOP) {
 80010b4:	4b28      	ldr	r3, [pc, #160]	@ (8001158 <Treadmill_Controller_Excute+0xe0>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d105      	bne.n	80010c8 <Treadmill_Controller_Excute+0x50>
                treadmillState = T_NO_RUNNING;
 80010bc:	4b25      	ldr	r3, [pc, #148]	@ (8001154 <Treadmill_Controller_Excute+0xdc>)
 80010be:	2202      	movs	r2, #2
 80010c0:	701a      	strb	r2, [r3, #0]
                DC_Motor_Stop();
 80010c2:	f000 fb63 	bl	800178c <DC_Motor_Stop>
            else if (inputData == TREADMILL_DOWN) {
                speed -= 2;
                if (speed < 0) speed = 0;
                //DC_Motor_SetFreq(1000, speed);
            }
            break;
 80010c6:	e029      	b.n	800111c <Treadmill_Controller_Excute+0xa4>
            else if (inputData == TREADMILL_UP) {
 80010c8:	4b23      	ldr	r3, [pc, #140]	@ (8001158 <Treadmill_Controller_Excute+0xe0>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b03      	cmp	r3, #3
 80010ce:	d10c      	bne.n	80010ea <Treadmill_Controller_Excute+0x72>
                speed += 2;
 80010d0:	4b22      	ldr	r3, [pc, #136]	@ (800115c <Treadmill_Controller_Excute+0xe4>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	3302      	adds	r3, #2
 80010d6:	4a21      	ldr	r2, [pc, #132]	@ (800115c <Treadmill_Controller_Excute+0xe4>)
 80010d8:	6013      	str	r3, [r2, #0]
                if (speed > 100) speed = 100;
 80010da:	4b20      	ldr	r3, [pc, #128]	@ (800115c <Treadmill_Controller_Excute+0xe4>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2b64      	cmp	r3, #100	@ 0x64
 80010e0:	dd1c      	ble.n	800111c <Treadmill_Controller_Excute+0xa4>
 80010e2:	4b1e      	ldr	r3, [pc, #120]	@ (800115c <Treadmill_Controller_Excute+0xe4>)
 80010e4:	2264      	movs	r2, #100	@ 0x64
 80010e6:	601a      	str	r2, [r3, #0]
            break;
 80010e8:	e018      	b.n	800111c <Treadmill_Controller_Excute+0xa4>
            else if (inputData == TREADMILL_DOWN) {
 80010ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001158 <Treadmill_Controller_Excute+0xe0>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b04      	cmp	r3, #4
 80010f0:	d114      	bne.n	800111c <Treadmill_Controller_Excute+0xa4>
                speed -= 2;
 80010f2:	4b1a      	ldr	r3, [pc, #104]	@ (800115c <Treadmill_Controller_Excute+0xe4>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	3b02      	subs	r3, #2
 80010f8:	4a18      	ldr	r2, [pc, #96]	@ (800115c <Treadmill_Controller_Excute+0xe4>)
 80010fa:	6013      	str	r3, [r2, #0]
                if (speed < 0) speed = 0;
 80010fc:	4b17      	ldr	r3, [pc, #92]	@ (800115c <Treadmill_Controller_Excute+0xe4>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	da0b      	bge.n	800111c <Treadmill_Controller_Excute+0xa4>
 8001104:	4b15      	ldr	r3, [pc, #84]	@ (800115c <Treadmill_Controller_Excute+0xe4>)
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
            break;
 800110a:	e007      	b.n	800111c <Treadmill_Controller_Excute+0xa4>
        case T_NO_RUNNING:
        	DC_Motor_Stop();
 800110c:	f000 fb3e 	bl	800178c <DC_Motor_Stop>
        	treadmillState = T_IDLE;
 8001110:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <Treadmill_Controller_Excute+0xdc>)
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]
        	break;
 8001116:	e002      	b.n	800111e <Treadmill_Controller_Excute+0xa6>
            break;
 8001118:	bf00      	nop
 800111a:	e000      	b.n	800111e <Treadmill_Controller_Excute+0xa6>
            break;
 800111c:	bf00      	nop
    }

    int dist = UltraSonic_GetDistance(&sensor);
 800111e:	4810      	ldr	r0, [pc, #64]	@ (8001160 <Treadmill_Controller_Excute+0xe8>)
 8001120:	f000 fde4 	bl	8001cec <UltraSonic_GetDistance>
 8001124:	6078      	str	r0, [r7, #4]

	if ((dist <= 5) && (dist >= 1) && (treadmillState == T_RUNNING)) {
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2b05      	cmp	r3, #5
 800112a:	dc09      	bgt.n	8001140 <Treadmill_Controller_Excute+0xc8>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	dd06      	ble.n	8001140 <Treadmill_Controller_Excute+0xc8>
 8001132:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <Treadmill_Controller_Excute+0xdc>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d102      	bne.n	8001140 <Treadmill_Controller_Excute+0xc8>
		Sound_PowerOn();
 800113a:	f000 f9e3 	bl	8001504 <Sound_PowerOn>
 800113e:	e001      	b.n	8001144 <Treadmill_Controller_Excute+0xcc>
	} else {
		Sound_PowerOff();
 8001140:	f000 fa0d 	bl	800155e <Sound_PowerOff>
	}

    inputData = NO_INPUT;
 8001144:	4b04      	ldr	r3, [pc, #16]	@ (8001158 <Treadmill_Controller_Excute+0xe0>)
 8001146:	2200      	movs	r2, #0
 8001148:	701a      	strb	r2, [r3, #0]
    //Presenter_DispLcdTreadmill(treadmillState);
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000004 	.word	0x20000004
 8001158:	20000294 	.word	0x20000294
 800115c:	20000008 	.word	0x20000008
 8001160:	200002b0 	.word	0x200002b0

08001164 <Listener_Init>:
static uint8_t rcvData = 0;
static Que_TypeDef uartRxQue;
UltraSonic_TypeDef sensor;

void Listener_Init()
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
	Button_Init(&hBtnUP, GPIOB, GPIO_PIN_5);
 8001168:	2220      	movs	r2, #32
 800116a:	490f      	ldr	r1, [pc, #60]	@ (80011a8 <Listener_Init+0x44>)
 800116c:	480f      	ldr	r0, [pc, #60]	@ (80011ac <Listener_Init+0x48>)
 800116e:	f000 f9fc 	bl	800156a <Button_Init>
	Button_Init(&hBtnDOWN, GPIOB, GPIO_PIN_3);
 8001172:	2208      	movs	r2, #8
 8001174:	490c      	ldr	r1, [pc, #48]	@ (80011a8 <Listener_Init+0x44>)
 8001176:	480e      	ldr	r0, [pc, #56]	@ (80011b0 <Listener_Init+0x4c>)
 8001178:	f000 f9f7 	bl	800156a <Button_Init>
	Button_Init(&hBtnSTOP, GPIOA, GPIO_PIN_10);
 800117c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001180:	490c      	ldr	r1, [pc, #48]	@ (80011b4 <Listener_Init+0x50>)
 8001182:	480d      	ldr	r0, [pc, #52]	@ (80011b8 <Listener_Init+0x54>)
 8001184:	f000 f9f1 	bl	800156a <Button_Init>
	Button_Init(&hBtnSTART, GPIOC, GPIO_PIN_13);
 8001188:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800118c:	490b      	ldr	r1, [pc, #44]	@ (80011bc <Listener_Init+0x58>)
 800118e:	480c      	ldr	r0, [pc, #48]	@ (80011c0 <Listener_Init+0x5c>)
 8001190:	f000 f9eb 	bl	800156a <Button_Init>

	Que_Init(&uartRxQue);
 8001194:	480b      	ldr	r0, [pc, #44]	@ (80011c4 <Listener_Init+0x60>)
 8001196:	f000 f925 	bl	80013e4 <Que_Init>
	HAL_UART_Receive_IT(&huart2, &rcvData, 1); // uart recv interrupt enable
 800119a:	2201      	movs	r2, #1
 800119c:	490a      	ldr	r1, [pc, #40]	@ (80011c8 <Listener_Init+0x64>)
 800119e:	480b      	ldr	r0, [pc, #44]	@ (80011cc <Listener_Init+0x68>)
 80011a0:	f003 fc6c 	bl	8004a7c <HAL_UART_Receive_IT>
}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40020400 	.word	0x40020400
 80011ac:	200002cc 	.word	0x200002cc
 80011b0:	200002d8 	.word	0x200002d8
 80011b4:	40020000 	.word	0x40020000
 80011b8:	200002e4 	.word	0x200002e4
 80011bc:	40020800 	.word	0x40020800
 80011c0:	200002f0 	.word	0x200002f0
 80011c4:	20000298 	.word	0x20000298
 80011c8:	20000295 	.word	0x20000295
 80011cc:	2000024c 	.word	0x2000024c

080011d0 <Listener_Excute>:

void Listener_Excute()
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	Treadmill_Listener();
 80011d4:	f000 f804 	bl	80011e0 <Treadmill_Listener>
	Listener_CheckUart();
 80011d8:	f000 f848 	bl	800126c <Listener_CheckUart>
}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}

080011e0 <Treadmill_Listener>:

void Treadmill_Listener()
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
    static uint32_t prevChkTime = 0;
    uint32_t curTick = HAL_GetTick();
 80011e6:	f000 fe4f 	bl	8001e88 <HAL_GetTick>
 80011ea:	6078      	str	r0, [r7, #4]
    if (curTick - prevChkTime < 100) return;
 80011ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001258 <Treadmill_Listener+0x78>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	2b63      	cmp	r3, #99	@ 0x63
 80011f6:	d92a      	bls.n	800124e <Treadmill_Listener+0x6e>
    prevChkTime = curTick;
 80011f8:	4a17      	ldr	r2, [pc, #92]	@ (8001258 <Treadmill_Listener+0x78>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6013      	str	r3, [r2, #0]



    if (Button_GetState(&hBtnSTART) == ACT_PUSHED) {
 80011fe:	4817      	ldr	r0, [pc, #92]	@ (800125c <Treadmill_Listener+0x7c>)
 8001200:	f000 f9c9 	bl	8001596 <Button_GetState>
 8001204:	4603      	mov	r3, r0
 8001206:	2b01      	cmp	r3, #1
 8001208:	d103      	bne.n	8001212 <Treadmill_Listener+0x32>

        Treadmill_Controller_SetInput(TREADMILL_START);
 800120a:	2001      	movs	r0, #1
 800120c:	f7ff ff24 	bl	8001058 <Treadmill_Controller_SetInput>
 8001210:	e01e      	b.n	8001250 <Treadmill_Listener+0x70>
    }
    else if (Button_GetState(&hBtnSTOP) == ACT_PUSHED) {
 8001212:	4813      	ldr	r0, [pc, #76]	@ (8001260 <Treadmill_Listener+0x80>)
 8001214:	f000 f9bf 	bl	8001596 <Button_GetState>
 8001218:	4603      	mov	r3, r0
 800121a:	2b01      	cmp	r3, #1
 800121c:	d103      	bne.n	8001226 <Treadmill_Listener+0x46>

        Treadmill_Controller_SetInput(TREADMILL_STOP);
 800121e:	2002      	movs	r0, #2
 8001220:	f7ff ff1a 	bl	8001058 <Treadmill_Controller_SetInput>
 8001224:	e014      	b.n	8001250 <Treadmill_Listener+0x70>
    }
    else if (Button_GetState(&hBtnUP) == ACT_PUSHED) {
 8001226:	480f      	ldr	r0, [pc, #60]	@ (8001264 <Treadmill_Listener+0x84>)
 8001228:	f000 f9b5 	bl	8001596 <Button_GetState>
 800122c:	4603      	mov	r3, r0
 800122e:	2b01      	cmp	r3, #1
 8001230:	d103      	bne.n	800123a <Treadmill_Listener+0x5a>

        Treadmill_Controller_SetInput(TREADMILL_UP);
 8001232:	2003      	movs	r0, #3
 8001234:	f7ff ff10 	bl	8001058 <Treadmill_Controller_SetInput>
 8001238:	e00a      	b.n	8001250 <Treadmill_Listener+0x70>
    }
    else if (Button_GetState(&hBtnDOWN) == ACT_PUSHED) {
 800123a:	480b      	ldr	r0, [pc, #44]	@ (8001268 <Treadmill_Listener+0x88>)
 800123c:	f000 f9ab 	bl	8001596 <Button_GetState>
 8001240:	4603      	mov	r3, r0
 8001242:	2b01      	cmp	r3, #1
 8001244:	d104      	bne.n	8001250 <Treadmill_Listener+0x70>

        Treadmill_Controller_SetInput(TREADMILL_DOWN);
 8001246:	2004      	movs	r0, #4
 8001248:	f7ff ff06 	bl	8001058 <Treadmill_Controller_SetInput>
 800124c:	e000      	b.n	8001250 <Treadmill_Listener+0x70>
    if (curTick - prevChkTime < 100) return;
 800124e:	bf00      	nop
    }
}
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200002c0 	.word	0x200002c0
 800125c:	200002f0 	.word	0x200002f0
 8001260:	200002e4 	.word	0x200002e4
 8001264:	200002cc 	.word	0x200002cc
 8001268:	200002d8 	.word	0x200002d8

0800126c <Listener_CheckUart>:

void Listener_CheckUart()
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
	if (isQueEmpty(&uartRxQue)) {
 8001272:	4818      	ldr	r0, [pc, #96]	@ (80012d4 <Listener_CheckUart+0x68>)
 8001274:	f000 f8e1 	bl	800143a <isQueEmpty>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d126      	bne.n	80012cc <Listener_CheckUart+0x60>
		return;
	}
	int uartRxData = deQue(&uartRxQue);
 800127e:	4815      	ldr	r0, [pc, #84]	@ (80012d4 <Listener_CheckUart+0x68>)
 8001280:	f000 f911 	bl	80014a6 <deQue>
 8001284:	6078      	str	r0, [r7, #4]

	if (uartRxData == 'R') {
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2b52      	cmp	r3, #82	@ 0x52
 800128a:	d103      	bne.n	8001294 <Listener_CheckUart+0x28>

        Treadmill_Controller_SetInput(TREADMILL_START);
 800128c:	2001      	movs	r0, #1
 800128e:	f7ff fee3 	bl	8001058 <Treadmill_Controller_SetInput>
 8001292:	e01c      	b.n	80012ce <Listener_CheckUart+0x62>
	}
	else if (uartRxData == 'S') {
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b53      	cmp	r3, #83	@ 0x53
 8001298:	d103      	bne.n	80012a2 <Listener_CheckUart+0x36>

        Treadmill_Controller_SetInput(TREADMILL_STOP);
 800129a:	2002      	movs	r0, #2
 800129c:	f7ff fedc 	bl	8001058 <Treadmill_Controller_SetInput>
 80012a0:	e015      	b.n	80012ce <Listener_CheckUart+0x62>
	}
	else if (uartRxData == 'U') {
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b55      	cmp	r3, #85	@ 0x55
 80012a6:	d103      	bne.n	80012b0 <Listener_CheckUart+0x44>

        Treadmill_Controller_SetInput(TREADMILL_UP);
 80012a8:	2003      	movs	r0, #3
 80012aa:	f7ff fed5 	bl	8001058 <Treadmill_Controller_SetInput>
 80012ae:	e00e      	b.n	80012ce <Listener_CheckUart+0x62>
	}
	else if (uartRxData == 'D') {
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b44      	cmp	r3, #68	@ 0x44
 80012b4:	d103      	bne.n	80012be <Listener_CheckUart+0x52>

        Treadmill_Controller_SetInput(TREADMILL_DOWN);
 80012b6:	2004      	movs	r0, #4
 80012b8:	f7ff fece 	bl	8001058 <Treadmill_Controller_SetInput>
 80012bc:	e007      	b.n	80012ce <Listener_CheckUart+0x62>
	}
	else if (uartRxData == 'A') {
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b41      	cmp	r3, #65	@ 0x41
 80012c2:	d104      	bne.n	80012ce <Listener_CheckUart+0x62>

		Treadmill_Controller_SetInput(TEMP);
 80012c4:	2005      	movs	r0, #5
 80012c6:	f7ff fec7 	bl	8001058 <Treadmill_Controller_SetInput>
 80012ca:	e000      	b.n	80012ce <Listener_CheckUart+0x62>
		return;
 80012cc:	bf00      	nop
	}
}
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000298 	.word	0x20000298

080012d8 <Listener_UartCallBack>:

void Listener_UartCallBack()
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
	enQue(&uartRxQue, rcvData);
 80012dc:	4b06      	ldr	r3, [pc, #24]	@ (80012f8 <Listener_UartCallBack+0x20>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	4619      	mov	r1, r3
 80012e2:	4806      	ldr	r0, [pc, #24]	@ (80012fc <Listener_UartCallBack+0x24>)
 80012e4:	f000 f8bc 	bl	8001460 <enQue>
	HAL_UART_Receive_IT(&huart2, &rcvData, 1); // interrupt enable
 80012e8:	2201      	movs	r2, #1
 80012ea:	4903      	ldr	r1, [pc, #12]	@ (80012f8 <Listener_UartCallBack+0x20>)
 80012ec:	4804      	ldr	r0, [pc, #16]	@ (8001300 <Listener_UartCallBack+0x28>)
 80012ee:	f003 fbc5 	bl	8004a7c <HAL_UART_Receive_IT>
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000295 	.word	0x20000295
 80012fc:	20000298 	.word	0x20000298
 8001300:	2000024c 	.word	0x2000024c

08001304 <Presenter_Init>:
extern DHT11_TypeDef hdht11;

extern int speed = 3;

void Presenter_Init()
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
	LCD_Init(&hi2c1);
 8001308:	4802      	ldr	r0, [pc, #8]	@ (8001314 <Presenter_Init+0x10>)
 800130a:	f000 fbf5 	bl	8001af8 <LCD_Init>
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000090 	.word	0x20000090

08001318 <Presenter_Excute>:


void Presenter_Excute()
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
	//Presenter_DispLcdTreadmill(state);
	//display_speed(speed, state);
	//Presenter_DispFndRunTime(state);
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <HAL_TIM_PeriodElapsedCallback>:
//static uint8_t rcvData = 0;

DHT11_TypeDef hdht11;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2) {
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001336:	d101      	bne.n	800133c <HAL_TIM_PeriodElapsedCallback+0x16>
		FND_DispDataCallBack();
 8001338:	f000 fa4c 	bl	80017d4 <FND_DispDataCallBack>
	}
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <ap_main>:




int ap_main()
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0

   HAL_TIM_Base_Start_IT(&htim2);
 8001348:	480b      	ldr	r0, [pc, #44]	@ (8001378 <ap_main+0x34>)
 800134a:	f002 fb2f 	bl	80039ac <HAL_TIM_Base_Start_IT>
   HAL_TIM_Base_Start(&htim4);
 800134e:	480b      	ldr	r0, [pc, #44]	@ (800137c <ap_main+0x38>)
 8001350:	f002 faaa 	bl	80038a8 <HAL_TIM_Base_Start>
   HAL_TIM_Base_Start(&htim5);
 8001354:	480a      	ldr	r0, [pc, #40]	@ (8001380 <ap_main+0x3c>)
 8001356:	f002 faa7 	bl	80038a8 <HAL_TIM_Base_Start>
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800135a:	2100      	movs	r1, #0
 800135c:	4809      	ldr	r0, [pc, #36]	@ (8001384 <ap_main+0x40>)
 800135e:	f002 fbe1 	bl	8003b24 <HAL_TIM_PWM_Start>
   HAL_TIM_Base_Start(&htim3);
 8001362:	4809      	ldr	r0, [pc, #36]	@ (8001388 <ap_main+0x44>)
 8001364:	f002 faa0 	bl	80038a8 <HAL_TIM_Base_Start>
//            prevTick = HAL_GetTick();
//
//            int dist = UltraSonic_GetDistance(&sensor);
//            FND_WriteData(dist);
//        }
    	Listener_Excute();
 8001368:	f7ff ff32 	bl	80011d0 <Listener_Excute>
    	Treadmill_Controller_Excute();
 800136c:	f7ff fe84 	bl	8001078 <Treadmill_Controller_Excute>
        Presenter_Excute();
 8001370:	f7ff ffd2 	bl	8001318 <Presenter_Excute>
    	Listener_Excute();
 8001374:	bf00      	nop
 8001376:	e7f7      	b.n	8001368 <ap_main+0x24>
 8001378:	2000012c 	.word	0x2000012c
 800137c:	200001bc 	.word	0x200001bc
 8001380:	20000204 	.word	0x20000204
 8001384:	200000e4 	.word	0x200000e4
 8001388:	20000174 	.word	0x20000174

0800138c <HAL_UART_RxCpltCallback>:
    }
    return 0;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a04      	ldr	r2, [pc, #16]	@ (80013ac <HAL_UART_RxCpltCallback+0x20>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d101      	bne.n	80013a2 <HAL_UART_RxCpltCallback+0x16>
		Listener_UartCallBack();
 800139e:	f7ff ff9b 	bl	80012d8 <Listener_UartCallBack>
	}
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40004400 	.word	0x40004400

080013b0 <ap_init>:


void ap_init()
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
	Listener_Init();
 80013b4:	f7ff fed6 	bl	8001164 <Listener_Init>
	Presenter_Init();
 80013b8:	f7ff ffa4 	bl	8001304 <Presenter_Init>
	Sound_Init();
 80013bc:	f000 f898 	bl	80014f0 <Sound_Init>
	DC_Motor_Init(&htim1, TIM_CHANNEL_1);
 80013c0:	2100      	movs	r1, #0
 80013c2:	4805      	ldr	r0, [pc, #20]	@ (80013d8 <ap_init+0x28>)
 80013c4:	f000 f984 	bl	80016d0 <DC_Motor_Init>
	DHT11_Init(&hdht11, GPIOB, GPIO_PIN_6);
 80013c8:	2240      	movs	r2, #64	@ 0x40
 80013ca:	4904      	ldr	r1, [pc, #16]	@ (80013dc <ap_init+0x2c>)
 80013cc:	4804      	ldr	r0, [pc, #16]	@ (80013e0 <ap_init+0x30>)
 80013ce:	f000 f9ed 	bl	80017ac <DHT11_Init>
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	200000e4 	.word	0x200000e4
 80013dc:	40020400 	.word	0x40020400
 80013e0:	200002c4 	.word	0x200002c4

080013e4 <Que_Init>:
#include "queue.h"



void Que_Init(Que_TypeDef *q)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	q->front = 0;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
	q->rear = 0;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	605a      	str	r2, [r3, #4]
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <isQueFull>:

int isQueFull(Que_TypeDef *q)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	return q->front == ((q->rear+1) % QUE_SIZE);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	3301      	adds	r3, #1
 8001416:	4259      	negs	r1, r3
 8001418:	f003 0303 	and.w	r3, r3, #3
 800141c:	f001 0103 	and.w	r1, r1, #3
 8001420:	bf58      	it	pl
 8001422:	424b      	negpl	r3, r1
 8001424:	429a      	cmp	r2, r3
 8001426:	bf0c      	ite	eq
 8001428:	2301      	moveq	r3, #1
 800142a:	2300      	movne	r3, #0
 800142c:	b2db      	uxtb	r3, r3
}
 800142e:	4618      	mov	r0, r3
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <isQueEmpty>:

int isQueEmpty(Que_TypeDef *q)
{
 800143a:	b480      	push	{r7}
 800143c:	b083      	sub	sp, #12
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
	return q->front == q->rear;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	429a      	cmp	r2, r3
 800144c:	bf0c      	ite	eq
 800144e:	2301      	moveq	r3, #1
 8001450:	2300      	movne	r3, #0
 8001452:	b2db      	uxtb	r3, r3
}
 8001454:	4618      	mov	r0, r3
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <enQue>:

void enQue(Que_TypeDef *q, int data)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
	if (isQueFull(q)) {
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff ffca 	bl	8001404 <isQueFull>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d113      	bne.n	800149e <enQue+0x3e>
		return;
	}
	q->queData[q->rear] = data;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	3202      	adds	r2, #2
 800147e:	6839      	ldr	r1, [r7, #0]
 8001480:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	q->rear = (q->rear+1) % QUE_SIZE;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	3301      	adds	r3, #1
 800148a:	425a      	negs	r2, r3
 800148c:	f003 0303 	and.w	r3, r3, #3
 8001490:	f002 0203 	and.w	r2, r2, #3
 8001494:	bf58      	it	pl
 8001496:	4253      	negpl	r3, r2
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	6053      	str	r3, [r2, #4]
 800149c:	e000      	b.n	80014a0 <enQue+0x40>
		return;
 800149e:	bf00      	nop
}
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <deQue>:

int deQue(Que_TypeDef *q)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b084      	sub	sp, #16
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
	if (isQueEmpty(q)) {
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff ffc3 	bl	800143a <isQueEmpty>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d114      	bne.n	80014e4 <deQue+0x3e>
		return;
	}
	int data = q->queData[q->front];
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	3202      	adds	r2, #2
 80014c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c6:	60fb      	str	r3, [r7, #12]
	q->front = (q->front+1) % QUE_SIZE;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	3301      	adds	r3, #1
 80014ce:	425a      	negs	r2, r3
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	f002 0203 	and.w	r2, r2, #3
 80014d8:	bf58      	it	pl
 80014da:	4253      	negpl	r3, r2
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	6013      	str	r3, [r2, #0]
	return data;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	e001      	b.n	80014e8 <deQue+0x42>
		return;
 80014e4:	bf00      	nop
 80014e6:	bf00      	nop
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <Sound_Init>:
 *      Author: kccistc
 */
#include "sound.h"

void Sound_Init()
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
   Buzzer_Init(&htim3, TIM_CHANNEL_1);
 80014f4:	2100      	movs	r1, #0
 80014f6:	4802      	ldr	r0, [pc, #8]	@ (8001500 <Sound_Init+0x10>)
 80014f8:	f000 f87e 	bl	80015f8 <Buzzer_Init>
}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000174 	.word	0x20000174

08001504 <Sound_PowerOn>:

void Sound_PowerOn()
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
    for (int i = 0; i < 5; i++)
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	e01e      	b.n	800154e <Sound_PowerOn+0x4a>
    {
        Buzzer_SetFreq(2000);
 8001510:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001514:	f000 f886 	bl	8001624 <Buzzer_SetFreq>
        Buzzer_Start();
 8001518:	f000 f8ba 	bl	8001690 <Buzzer_Start>
        HAL_Delay(80);
 800151c:	2050      	movs	r0, #80	@ 0x50
 800151e:	f000 fcbf 	bl	8001ea0 <HAL_Delay>

        Buzzer_Stop();
 8001522:	f000 f8c5 	bl	80016b0 <Buzzer_Stop>
        HAL_Delay(50);
 8001526:	2032      	movs	r0, #50	@ 0x32
 8001528:	f000 fcba 	bl	8001ea0 <HAL_Delay>

        Buzzer_SetFreq(1200);
 800152c:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8001530:	f000 f878 	bl	8001624 <Buzzer_SetFreq>
        Buzzer_Start();
 8001534:	f000 f8ac 	bl	8001690 <Buzzer_Start>
        HAL_Delay(80);
 8001538:	2050      	movs	r0, #80	@ 0x50
 800153a:	f000 fcb1 	bl	8001ea0 <HAL_Delay>

        Buzzer_Stop();
 800153e:	f000 f8b7 	bl	80016b0 <Buzzer_Stop>
        HAL_Delay(50);
 8001542:	2032      	movs	r0, #50	@ 0x32
 8001544:	f000 fcac 	bl	8001ea0 <HAL_Delay>
    for (int i = 0; i < 5; i++)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3301      	adds	r3, #1
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b04      	cmp	r3, #4
 8001552:	dddd      	ble.n	8001510 <Sound_PowerOn+0xc>
    }
}
 8001554:	bf00      	nop
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <Sound_PowerOff>:

void Sound_PowerOff()
{
 800155e:	b580      	push	{r7, lr}
 8001560:	af00      	add	r7, sp, #0
   Buzzer_Stop();
 8001562:	f000 f8a5 	bl	80016b0 <Buzzer_Stop>
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}

0800156a <Button_Init>:
Button_Handler_t hBtnSTOP;
Button_Handler_t hBtnSTART;


void Button_Init(Button_Handler_t *hbtn, GPIO_TypeDef *GPIOx, uint16_t pinNum)
{
 800156a:	b480      	push	{r7}
 800156c:	b085      	sub	sp, #20
 800156e:	af00      	add	r7, sp, #0
 8001570:	60f8      	str	r0, [r7, #12]
 8001572:	60b9      	str	r1, [r7, #8]
 8001574:	4613      	mov	r3, r2
 8001576:	80fb      	strh	r3, [r7, #6]
	hbtn->GPIOx = GPIOx;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	601a      	str	r2, [r3, #0]
	hbtn->pinNum = pinNum;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	88fa      	ldrh	r2, [r7, #6]
 8001582:	809a      	strh	r2, [r3, #4]
	hbtn->prevState = RELEASED;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2201      	movs	r2, #1
 8001588:	609a      	str	r2, [r3, #8]
}
 800158a:	bf00      	nop
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <Button_GetState>:

button_state_t Button_GetState(Button_Handler_t *hbtn)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b084      	sub	sp, #16
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
	uint32_t curState;
	curState = HAL_GPIO_ReadPin(hbtn->GPIOx, hbtn->pinNum); // normal state is high.
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	889b      	ldrh	r3, [r3, #4]
 80015a6:	4619      	mov	r1, r3
 80015a8:	4610      	mov	r0, r2
 80015aa:	f000 ffc5 	bl	8002538 <HAL_GPIO_ReadPin>
 80015ae:	4603      	mov	r3, r0
 80015b0:	60fb      	str	r3, [r7, #12]

	if ((hbtn->prevState == RELEASED) && (curState == PUSHED)) { // button released -> pushed
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d10a      	bne.n	80015d0 <Button_GetState+0x3a>
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d107      	bne.n	80015d0 <Button_GetState+0x3a>
		HAL_Delay(2); // debounce
 80015c0:	2002      	movs	r0, #2
 80015c2:	f000 fc6d 	bl	8001ea0 <HAL_Delay>
		hbtn->prevState = PUSHED;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
		return ACT_PUSHED;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e00f      	b.n	80015f0 <Button_GetState+0x5a>
	}
	else if ((hbtn->prevState == PUSHED) && (curState == RELEASED)) { // button pushed -> released
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d10a      	bne.n	80015ee <Button_GetState+0x58>
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d107      	bne.n	80015ee <Button_GetState+0x58>
		HAL_Delay(2); // debounce
 80015de:	2002      	movs	r0, #2
 80015e0:	f000 fc5e 	bl	8001ea0 <HAL_Delay>
		hbtn->prevState = RELEASED;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	609a      	str	r2, [r3, #8]
		return ACT_RELEASED;
 80015ea:	2302      	movs	r3, #2
 80015ec:	e000      	b.n	80015f0 <Button_GetState+0x5a>
	}
	return NO_ACT;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <Buzzer_Init>:

static TIM_HandleTypeDef *hbuzzerTim;
static uint32_t buzzerTimChannel;

void Buzzer_Init(TIM_HandleTypeDef *htim, uint32_t channel)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
	hbuzzerTim = htim;
 8001602:	4a06      	ldr	r2, [pc, #24]	@ (800161c <Buzzer_Init+0x24>)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6013      	str	r3, [r2, #0]
	buzzerTimChannel = channel;
 8001608:	4a05      	ldr	r2, [pc, #20]	@ (8001620 <Buzzer_Init+0x28>)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	6013      	str	r3, [r2, #0]
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	200002fc 	.word	0x200002fc
 8001620:	20000300 	.word	0x20000300

08001624 <Buzzer_SetFreq>:

void Buzzer_SetFreq(uint32_t freq)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
	if (freq < 100) freq = 100;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b63      	cmp	r3, #99	@ 0x63
 8001630:	d802      	bhi.n	8001638 <Buzzer_SetFreq+0x14>
 8001632:	2364      	movs	r3, #100	@ 0x64
 8001634:	607b      	str	r3, [r7, #4]
 8001636:	e007      	b.n	8001648 <Buzzer_SetFreq+0x24>
	else if (freq > 10000) freq = 10000;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800163e:	4293      	cmp	r3, r2
 8001640:	d902      	bls.n	8001648 <Buzzer_SetFreq+0x24>
 8001642:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001646:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_AUTORELOAD(&htim3, 1000000/freq - 1);
 8001648:	4a0e      	ldr	r2, [pc, #56]	@ (8001684 <Buzzer_SetFreq+0x60>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001650:	4b0d      	ldr	r3, [pc, #52]	@ (8001688 <Buzzer_SetFreq+0x64>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	3a01      	subs	r2, #1
 8001656:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001658:	4a0a      	ldr	r2, [pc, #40]	@ (8001684 <Buzzer_SetFreq+0x60>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001660:	3b01      	subs	r3, #1
 8001662:	4a09      	ldr	r2, [pc, #36]	@ (8001688 <Buzzer_SetFreq+0x64>)
 8001664:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1000000/freq/2 - 1); // duty cycle 50%
 8001666:	4a09      	ldr	r2, [pc, #36]	@ (800168c <Buzzer_SetFreq+0x68>)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	fbb2 f2f3 	udiv	r2, r2, r3
 800166e:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <Buzzer_SetFreq+0x64>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	3a01      	subs	r2, #1
 8001674:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	000f4240 	.word	0x000f4240
 8001688:	20000174 	.word	0x20000174
 800168c:	0007a120 	.word	0x0007a120

08001690 <Buzzer_Start>:

void Buzzer_Start()
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(hbuzzerTim, buzzerTimChannel);
 8001694:	4b04      	ldr	r3, [pc, #16]	@ (80016a8 <Buzzer_Start+0x18>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a04      	ldr	r2, [pc, #16]	@ (80016ac <Buzzer_Start+0x1c>)
 800169a:	6812      	ldr	r2, [r2, #0]
 800169c:	4611      	mov	r1, r2
 800169e:	4618      	mov	r0, r3
 80016a0:	f002 fa40 	bl	8003b24 <HAL_TIM_PWM_Start>
}
 80016a4:	bf00      	nop
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	200002fc 	.word	0x200002fc
 80016ac:	20000300 	.word	0x20000300

080016b0 <Buzzer_Stop>:

void Buzzer_Stop()
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(hbuzzerTim, buzzerTimChannel);
 80016b4:	4b04      	ldr	r3, [pc, #16]	@ (80016c8 <Buzzer_Stop+0x18>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a04      	ldr	r2, [pc, #16]	@ (80016cc <Buzzer_Stop+0x1c>)
 80016ba:	6812      	ldr	r2, [r2, #0]
 80016bc:	4611      	mov	r1, r2
 80016be:	4618      	mov	r0, r3
 80016c0:	f002 fae0 	bl	8003c84 <HAL_TIM_PWM_Stop>
}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	200002fc 	.word	0x200002fc
 80016cc:	20000300 	.word	0x20000300

080016d0 <DC_Motor_Init>:

static TIM_HandleTypeDef *hmotorTim;
static uint32_t motorTimChannel;

void DC_Motor_Init(TIM_HandleTypeDef *htim, uint32_t channel)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
	hmotorTim = htim;
 80016da:	4a06      	ldr	r2, [pc, #24]	@ (80016f4 <DC_Motor_Init+0x24>)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6013      	str	r3, [r2, #0]
	motorTimChannel = channel;
 80016e0:	4a05      	ldr	r2, [pc, #20]	@ (80016f8 <DC_Motor_Init+0x28>)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	6013      	str	r3, [r2, #0]
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	20000304 	.word	0x20000304
 80016f8:	20000308 	.word	0x20000308

080016fc <DC_Motor_SetFreq>:

void DC_Motor_SetFreq(uint32_t freq, int duty)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
	if (duty < 0) duty = 0;
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	da02      	bge.n	8001712 <DC_Motor_SetFreq+0x16>
 800170c:	2300      	movs	r3, #0
 800170e:	603b      	str	r3, [r7, #0]
 8001710:	e004      	b.n	800171c <DC_Motor_SetFreq+0x20>
	else if (duty > 100) duty = 100;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	2b64      	cmp	r3, #100	@ 0x64
 8001716:	dd01      	ble.n	800171c <DC_Motor_SetFreq+0x20>
 8001718:	2364      	movs	r3, #100	@ 0x64
 800171a:	603b      	str	r3, [r7, #0]

    uint32_t arr = 1000000 / freq - 1;  // 주기 설정
 800171c:	4a10      	ldr	r2, [pc, #64]	@ (8001760 <DC_Motor_SetFreq+0x64>)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	fbb2 f3f3 	udiv	r3, r2, r3
 8001724:	3b01      	subs	r3, #1
 8001726:	60fb      	str	r3, [r7, #12]
    uint32_t ccr = (arr + 1) * duty / 100;  // 듀티비 비율 설정
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	3301      	adds	r3, #1
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	fb02 f303 	mul.w	r3, r2, r3
 8001732:	4a0c      	ldr	r2, [pc, #48]	@ (8001764 <DC_Motor_SetFreq+0x68>)
 8001734:	fba2 2303 	umull	r2, r3, r2, r3
 8001738:	095b      	lsrs	r3, r3, #5
 800173a:	60bb      	str	r3, [r7, #8]

	__HAL_TIM_SET_AUTORELOAD(&htim1, arr);
 800173c:	4b0a      	ldr	r3, [pc, #40]	@ (8001768 <DC_Motor_SetFreq+0x6c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001744:	4a08      	ldr	r2, [pc, #32]	@ (8001768 <DC_Motor_SetFreq+0x6c>)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ccr);
 800174a:	4b07      	ldr	r3, [pc, #28]	@ (8001768 <DC_Motor_SetFreq+0x6c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	68ba      	ldr	r2, [r7, #8]
 8001750:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001752:	bf00      	nop
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	000f4240 	.word	0x000f4240
 8001764:	51eb851f 	.word	0x51eb851f
 8001768:	200000e4 	.word	0x200000e4

0800176c <DC_Motor_Start>:

void DC_Motor_Start()
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(hmotorTim, motorTimChannel);
 8001770:	4b04      	ldr	r3, [pc, #16]	@ (8001784 <DC_Motor_Start+0x18>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a04      	ldr	r2, [pc, #16]	@ (8001788 <DC_Motor_Start+0x1c>)
 8001776:	6812      	ldr	r2, [r2, #0]
 8001778:	4611      	mov	r1, r2
 800177a:	4618      	mov	r0, r3
 800177c:	f002 f9d2 	bl	8003b24 <HAL_TIM_PWM_Start>
}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000304 	.word	0x20000304
 8001788:	20000308 	.word	0x20000308

0800178c <DC_Motor_Stop>:

void DC_Motor_Stop()
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(hmotorTim, motorTimChannel);
 8001790:	4b04      	ldr	r3, [pc, #16]	@ (80017a4 <DC_Motor_Stop+0x18>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a04      	ldr	r2, [pc, #16]	@ (80017a8 <DC_Motor_Stop+0x1c>)
 8001796:	6812      	ldr	r2, [r2, #0]
 8001798:	4611      	mov	r1, r2
 800179a:	4618      	mov	r0, r3
 800179c:	f002 fa72 	bl	8003c84 <HAL_TIM_PWM_Stop>
}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000304 	.word	0x20000304
 80017a8:	20000308 	.word	0x20000308

080017ac <DHT11_Init>:
    HAL_TIM_Base_Start(&htim5);
    while (__HAL_TIM_GET_COUNTER(&htim5) < us);
    HAL_TIM_Base_Stop(&htim5);
}

void DHT11_Init(DHT11_TypeDef *dht, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	4613      	mov	r3, r2
 80017b8:	80fb      	strh	r3, [r7, #6]
    dht->data_GPIOx = GPIOx;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	68ba      	ldr	r2, [r7, #8]
 80017be:	601a      	str	r2, [r3, #0]
    dht->data_pinNum = GPIO_Pin;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	88fa      	ldrh	r2, [r7, #6]
 80017c4:	809a      	strh	r2, [r3, #4]
}
 80017c6:	bf00      	nop
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
	...

080017d4 <FND_DispDataCallBack>:
	return fndDispNum;
}

// display fndDispNum
void FND_DispDataCallBack()
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
	static int digitPos = 0;
	// 인터럽트가 발생하면 한 자리씩 출력한다.
	digitPos = (digitPos+1) % 8;
 80017d8:	4b80      	ldr	r3, [pc, #512]	@ (80019dc <FND_DispDataCallBack+0x208>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	3301      	adds	r3, #1
 80017de:	425a      	negs	r2, r3
 80017e0:	f003 0307 	and.w	r3, r3, #7
 80017e4:	f002 0207 	and.w	r2, r2, #7
 80017e8:	bf58      	it	pl
 80017ea:	4253      	negpl	r3, r2
 80017ec:	4a7b      	ldr	r2, [pc, #492]	@ (80019dc <FND_DispDataCallBack+0x208>)
 80017ee:	6013      	str	r3, [r2, #0]
	switch(digitPos)
 80017f0:	4b7a      	ldr	r3, [pc, #488]	@ (80019dc <FND_DispDataCallBack+0x208>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b07      	cmp	r3, #7
 80017f6:	f200 80ee 	bhi.w	80019d6 <FND_DispDataCallBack+0x202>
 80017fa:	a201      	add	r2, pc, #4	@ (adr r2, 8001800 <FND_DispDataCallBack+0x2c>)
 80017fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001800:	08001821 	.word	0x08001821
 8001804:	0800184f 	.word	0x0800184f
 8001808:	08001887 	.word	0x08001887
 800180c:	080018bf 	.word	0x080018bf
 8001810:	080018f7 	.word	0x080018f7
 8001814:	0800192f 	.word	0x0800192f
 8001818:	08001967 	.word	0x08001967
 800181c:	0800199f 	.word	0x0800199f
	{
	case DIGIT_1:
		FND_DispOffAll();
 8001820:	f000 f8e8 	bl	80019f4 <FND_DispOffAll>
		FND_DispDigit(fndDispNum % 10);
 8001824:	4b6e      	ldr	r3, [pc, #440]	@ (80019e0 <FND_DispDataCallBack+0x20c>)
 8001826:	881a      	ldrh	r2, [r3, #0]
 8001828:	4b6e      	ldr	r3, [pc, #440]	@ (80019e4 <FND_DispDataCallBack+0x210>)
 800182a:	fba3 1302 	umull	r1, r3, r3, r2
 800182e:	08d9      	lsrs	r1, r3, #3
 8001830:	460b      	mov	r3, r1
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	440b      	add	r3, r1
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	b29b      	uxth	r3, r3
 800183c:	4618      	mov	r0, r3
 800183e:	f000 f913 	bl	8001a68 <FND_DispDigit>
		FND_DispOn(digitPos);
 8001842:	4b66      	ldr	r3, [pc, #408]	@ (80019dc <FND_DispDataCallBack+0x208>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f000 f8f6 	bl	8001a38 <FND_DispOn>
		break;
 800184c:	e0c3      	b.n	80019d6 <FND_DispDataCallBack+0x202>
	case DIGIT_10:
		FND_DispOffAll();
 800184e:	f000 f8d1 	bl	80019f4 <FND_DispOffAll>
		FND_DispDigit(fndDispNum /10 % 10);
 8001852:	4b63      	ldr	r3, [pc, #396]	@ (80019e0 <FND_DispDataCallBack+0x20c>)
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	4a63      	ldr	r2, [pc, #396]	@ (80019e4 <FND_DispDataCallBack+0x210>)
 8001858:	fba2 2303 	umull	r2, r3, r2, r3
 800185c:	08db      	lsrs	r3, r3, #3
 800185e:	b29a      	uxth	r2, r3
 8001860:	4b60      	ldr	r3, [pc, #384]	@ (80019e4 <FND_DispDataCallBack+0x210>)
 8001862:	fba3 1302 	umull	r1, r3, r3, r2
 8001866:	08d9      	lsrs	r1, r3, #3
 8001868:	460b      	mov	r3, r1
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	440b      	add	r3, r1
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	b29b      	uxth	r3, r3
 8001874:	4618      	mov	r0, r3
 8001876:	f000 f8f7 	bl	8001a68 <FND_DispDigit>
		FND_DispOn(digitPos);
 800187a:	4b58      	ldr	r3, [pc, #352]	@ (80019dc <FND_DispDataCallBack+0x208>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f000 f8da 	bl	8001a38 <FND_DispOn>
		break;
 8001884:	e0a7      	b.n	80019d6 <FND_DispDataCallBack+0x202>
	case DIGIT_100:
		FND_DispOffAll();
 8001886:	f000 f8b5 	bl	80019f4 <FND_DispOffAll>
		FND_DispDigit(fndDispNum /100 % 10);
 800188a:	4b55      	ldr	r3, [pc, #340]	@ (80019e0 <FND_DispDataCallBack+0x20c>)
 800188c:	881b      	ldrh	r3, [r3, #0]
 800188e:	4a56      	ldr	r2, [pc, #344]	@ (80019e8 <FND_DispDataCallBack+0x214>)
 8001890:	fba2 2303 	umull	r2, r3, r2, r3
 8001894:	095b      	lsrs	r3, r3, #5
 8001896:	b29a      	uxth	r2, r3
 8001898:	4b52      	ldr	r3, [pc, #328]	@ (80019e4 <FND_DispDataCallBack+0x210>)
 800189a:	fba3 1302 	umull	r1, r3, r3, r2
 800189e:	08d9      	lsrs	r1, r3, #3
 80018a0:	460b      	mov	r3, r1
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	440b      	add	r3, r1
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	4618      	mov	r0, r3
 80018ae:	f000 f8db 	bl	8001a68 <FND_DispDigit>
		FND_DispOn(digitPos);
 80018b2:	4b4a      	ldr	r3, [pc, #296]	@ (80019dc <FND_DispDataCallBack+0x208>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f000 f8be 	bl	8001a38 <FND_DispOn>
		break;
 80018bc:	e08b      	b.n	80019d6 <FND_DispDataCallBack+0x202>
	case DIGIT_1000:
		FND_DispOffAll();
 80018be:	f000 f899 	bl	80019f4 <FND_DispOffAll>
		FND_DispDigit(fndDispNum /1000 % 10);
 80018c2:	4b47      	ldr	r3, [pc, #284]	@ (80019e0 <FND_DispDataCallBack+0x20c>)
 80018c4:	881b      	ldrh	r3, [r3, #0]
 80018c6:	4a49      	ldr	r2, [pc, #292]	@ (80019ec <FND_DispDataCallBack+0x218>)
 80018c8:	fba2 2303 	umull	r2, r3, r2, r3
 80018cc:	099b      	lsrs	r3, r3, #6
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	4b44      	ldr	r3, [pc, #272]	@ (80019e4 <FND_DispDataCallBack+0x210>)
 80018d2:	fba3 1302 	umull	r1, r3, r3, r2
 80018d6:	08d9      	lsrs	r1, r3, #3
 80018d8:	460b      	mov	r3, r1
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	4618      	mov	r0, r3
 80018e6:	f000 f8bf 	bl	8001a68 <FND_DispDigit>
		FND_DispOn(digitPos);
 80018ea:	4b3c      	ldr	r3, [pc, #240]	@ (80019dc <FND_DispDataCallBack+0x208>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 f8a2 	bl	8001a38 <FND_DispOn>
		break;
 80018f4:	e06f      	b.n	80019d6 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_1:
		FND_DispOffAll();
 80018f6:	f000 f87d 	bl	80019f4 <FND_DispOffAll>
		if (fndDispDp & (1<<0)) {
 80018fa:	4b3d      	ldr	r3, [pc, #244]	@ (80019f0 <FND_DispDataCallBack+0x21c>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b00      	cmp	r3, #0
 8001904:	d003      	beq.n	800190e <FND_DispDataCallBack+0x13a>
			FND_DispDigit(10); // DP ON
 8001906:	200a      	movs	r0, #10
 8001908:	f000 f8ae 	bl	8001a68 <FND_DispDigit>
 800190c:	e002      	b.n	8001914 <FND_DispDataCallBack+0x140>
		} else {
			FND_DispDigit(11); // ALL OFF
 800190e:	200b      	movs	r0, #11
 8001910:	f000 f8aa 	bl	8001a68 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8001914:	4b31      	ldr	r3, [pc, #196]	@ (80019dc <FND_DispDataCallBack+0x208>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	425a      	negs	r2, r3
 800191a:	f003 0303 	and.w	r3, r3, #3
 800191e:	f002 0203 	and.w	r2, r2, #3
 8001922:	bf58      	it	pl
 8001924:	4253      	negpl	r3, r2
 8001926:	4618      	mov	r0, r3
 8001928:	f000 f886 	bl	8001a38 <FND_DispOn>
		break;
 800192c:	e053      	b.n	80019d6 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_10:
		FND_DispOffAll();
 800192e:	f000 f861 	bl	80019f4 <FND_DispOffAll>
		if (fndDispDp & (1<<1)) {
 8001932:	4b2f      	ldr	r3, [pc, #188]	@ (80019f0 <FND_DispDataCallBack+0x21c>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <FND_DispDataCallBack+0x172>
			FND_DispDigit(10); // DP ON
 800193e:	200a      	movs	r0, #10
 8001940:	f000 f892 	bl	8001a68 <FND_DispDigit>
 8001944:	e002      	b.n	800194c <FND_DispDataCallBack+0x178>
		} else {
			FND_DispDigit(11); // ALL OFF
 8001946:	200b      	movs	r0, #11
 8001948:	f000 f88e 	bl	8001a68 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 800194c:	4b23      	ldr	r3, [pc, #140]	@ (80019dc <FND_DispDataCallBack+0x208>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	425a      	negs	r2, r3
 8001952:	f003 0303 	and.w	r3, r3, #3
 8001956:	f002 0203 	and.w	r2, r2, #3
 800195a:	bf58      	it	pl
 800195c:	4253      	negpl	r3, r2
 800195e:	4618      	mov	r0, r3
 8001960:	f000 f86a 	bl	8001a38 <FND_DispOn>
		break;
 8001964:	e037      	b.n	80019d6 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_100:
		FND_DispOffAll();
 8001966:	f000 f845 	bl	80019f4 <FND_DispOffAll>
		if (fndDispDp & (1<<2)) {
 800196a:	4b21      	ldr	r3, [pc, #132]	@ (80019f0 <FND_DispDataCallBack+0x21c>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	f003 0304 	and.w	r3, r3, #4
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <FND_DispDataCallBack+0x1aa>
			FND_DispDigit(10); // DP ON
 8001976:	200a      	movs	r0, #10
 8001978:	f000 f876 	bl	8001a68 <FND_DispDigit>
 800197c:	e002      	b.n	8001984 <FND_DispDataCallBack+0x1b0>
		} else {
			FND_DispDigit(11); // ALL OFF
 800197e:	200b      	movs	r0, #11
 8001980:	f000 f872 	bl	8001a68 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8001984:	4b15      	ldr	r3, [pc, #84]	@ (80019dc <FND_DispDataCallBack+0x208>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	425a      	negs	r2, r3
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	f002 0203 	and.w	r2, r2, #3
 8001992:	bf58      	it	pl
 8001994:	4253      	negpl	r3, r2
 8001996:	4618      	mov	r0, r3
 8001998:	f000 f84e 	bl	8001a38 <FND_DispOn>
		break;
 800199c:	e01b      	b.n	80019d6 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_1000:
		FND_DispOffAll();
 800199e:	f000 f829 	bl	80019f4 <FND_DispOffAll>
		if (fndDispDp & (1<<3)) {
 80019a2:	4b13      	ldr	r3, [pc, #76]	@ (80019f0 <FND_DispDataCallBack+0x21c>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	f003 0308 	and.w	r3, r3, #8
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <FND_DispDataCallBack+0x1e2>
			FND_DispDigit(10); // DP ON
 80019ae:	200a      	movs	r0, #10
 80019b0:	f000 f85a 	bl	8001a68 <FND_DispDigit>
 80019b4:	e002      	b.n	80019bc <FND_DispDataCallBack+0x1e8>
		} else {
			FND_DispDigit(11); // ALL OFF
 80019b6:	200b      	movs	r0, #11
 80019b8:	f000 f856 	bl	8001a68 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 80019bc:	4b07      	ldr	r3, [pc, #28]	@ (80019dc <FND_DispDataCallBack+0x208>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	425a      	negs	r2, r3
 80019c2:	f003 0303 	and.w	r3, r3, #3
 80019c6:	f002 0203 	and.w	r2, r2, #3
 80019ca:	bf58      	it	pl
 80019cc:	4253      	negpl	r3, r2
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 f832 	bl	8001a38 <FND_DispOn>
		break;
 80019d4:	bf00      	nop
	}
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000310 	.word	0x20000310
 80019e0:	2000030c 	.word	0x2000030c
 80019e4:	cccccccd 	.word	0xcccccccd
 80019e8:	51eb851f 	.word	0x51eb851f
 80019ec:	10624dd3 	.word	0x10624dd3
 80019f0:	2000030e 	.word	0x2000030e

080019f4 <FND_DispOffAll>:
//		}
//	}
//}

void FND_DispOffAll()
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
	// GPIO_Write(GPIOx, Pin, RESET);
	for (int i=0; i<4; i++) {
 80019fa:	2300      	movs	r3, #0
 80019fc:	607b      	str	r3, [r7, #4]
 80019fe:	e010      	b.n	8001a22 <FND_DispOffAll+0x2e>
		HAL_GPIO_WritePin(fndDigitCom[i].GPIOx, fndDigitCom[i].pinNum, RESET);
 8001a00:	4a0c      	ldr	r2, [pc, #48]	@ (8001a34 <FND_DispOffAll+0x40>)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001a08:	4a0a      	ldr	r2, [pc, #40]	@ (8001a34 <FND_DispOffAll+0x40>)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	4413      	add	r3, r2
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	2200      	movs	r2, #0
 8001a16:	4619      	mov	r1, r3
 8001a18:	f000 fda6 	bl	8002568 <HAL_GPIO_WritePin>
	for (int i=0; i<4; i++) {
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	607b      	str	r3, [r7, #4]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b03      	cmp	r3, #3
 8001a26:	ddeb      	ble.n	8001a00 <FND_DispOffAll+0xc>
	}
}
 8001a28:	bf00      	nop
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	2000000c 	.word	0x2000000c

08001a38 <FND_DispOn>:

void FND_DispOn(int fndPos)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
	// GPIO_Write(GPIOx, Pin, SET);
	HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, SET);
 8001a40:	4a08      	ldr	r2, [pc, #32]	@ (8001a64 <FND_DispOn+0x2c>)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001a48:	4a06      	ldr	r2, [pc, #24]	@ (8001a64 <FND_DispOn+0x2c>)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	4413      	add	r3, r2
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	2201      	movs	r2, #1
 8001a56:	4619      	mov	r1, r3
 8001a58:	f000 fd86 	bl	8002568 <HAL_GPIO_WritePin>
}
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	2000000c 	.word	0x2000000c

08001a68 <FND_DispDigit>:


void FND_DispDigit(uint16_t digit)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	80fb      	strh	r3, [r7, #6]
	const uint8_t segFont[12] = {
 8001a72:	4a1f      	ldr	r2, [pc, #124]	@ (8001af0 <FND_DispDigit+0x88>)
 8001a74:	f107 0308 	add.w	r3, r7, #8
 8001a78:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a7a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		    0x90,  // 9
			0x7F,  // dot
			0xFF  // all off
	};

	for (int i=0; i<8; i++) {
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	e02c      	b.n	8001ade <FND_DispDigit+0x76>
		if (!(segFont[digit] & (1<<i))) {
 8001a84:	88fb      	ldrh	r3, [r7, #6]
 8001a86:	3318      	adds	r3, #24
 8001a88:	443b      	add	r3, r7
 8001a8a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	fa42 f303 	asr.w	r3, r2, r3
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10e      	bne.n	8001abc <FND_DispDigit+0x54>
			HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, RESET); // 0 -> on
 8001a9e:	4a15      	ldr	r2, [pc, #84]	@ (8001af4 <FND_DispDigit+0x8c>)
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001aa6:	4a13      	ldr	r2, [pc, #76]	@ (8001af4 <FND_DispDigit+0x8c>)
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	4413      	add	r3, r2
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f000 fd57 	bl	8002568 <HAL_GPIO_WritePin>
 8001aba:	e00d      	b.n	8001ad8 <FND_DispDigit+0x70>
		}
		else {
			HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, SET); // 1 -> off
 8001abc:	4a0d      	ldr	r2, [pc, #52]	@ (8001af4 <FND_DispDigit+0x8c>)
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001ac4:	4a0b      	ldr	r2, [pc, #44]	@ (8001af4 <FND_DispDigit+0x8c>)
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	4413      	add	r3, r2
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f000 fd48 	bl	8002568 <HAL_GPIO_WritePin>
	for (int i=0; i<8; i++) {
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	3301      	adds	r3, #1
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	2b07      	cmp	r3, #7
 8001ae2:	ddcf      	ble.n	8001a84 <FND_DispDigit+0x1c>
		}
	}
}
 8001ae4:	bf00      	nop
 8001ae6:	bf00      	nop
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	0800595c 	.word	0x0800595c
 8001af4:	2000002c 	.word	0x2000002c

08001af8 <LCD_Init>:

static uint8_t lcdData = 0;
static I2C_HandleTypeDef *hLcdI2C;

void LCD_Init(I2C_HandleTypeDef *hI2C)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	hLcdI2C = hI2C;
 8001b00:	4a18      	ldr	r2, [pc, #96]	@ (8001b64 <LCD_Init+0x6c>)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6013      	str	r3, [r2, #0]
	HAL_Delay(50);
 8001b06:	2032      	movs	r0, #50	@ 0x32
 8001b08:	f000 f9ca 	bl	8001ea0 <HAL_Delay>
	LCD_cmdMode();
 8001b0c:	f000 f852 	bl	8001bb4 <LCD_cmdMode>
	LCD_writeMode();
 8001b10:	f000 f862 	bl	8001bd8 <LCD_writeMode>
	LCD_sendNibbleData(0x30);
 8001b14:	2030      	movs	r0, #48	@ 0x30
 8001b16:	f000 f895 	bl	8001c44 <LCD_sendNibbleData>
	HAL_Delay(5);
 8001b1a:	2005      	movs	r0, #5
 8001b1c:	f000 f9c0 	bl	8001ea0 <HAL_Delay>
	LCD_sendNibbleData(0x30);
 8001b20:	2030      	movs	r0, #48	@ 0x30
 8001b22:	f000 f88f 	bl	8001c44 <LCD_sendNibbleData>
	HAL_Delay(1);
 8001b26:	2001      	movs	r0, #1
 8001b28:	f000 f9ba 	bl	8001ea0 <HAL_Delay>
	LCD_sendNibbleData(0x30);
 8001b2c:	2030      	movs	r0, #48	@ 0x30
 8001b2e:	f000 f889 	bl	8001c44 <LCD_sendNibbleData>
	LCD_sendNibbleData(0x20);
 8001b32:	2020      	movs	r0, #32
 8001b34:	f000 f886 	bl	8001c44 <LCD_sendNibbleData>
	LCD_sendData(LCD_4BIT_FUNC_SET);
 8001b38:	2028      	movs	r0, #40	@ 0x28
 8001b3a:	f000 f8a7 	bl	8001c8c <LCD_sendData>
	LCD_sendData(LCD_DISP_OFF);
 8001b3e:	2008      	movs	r0, #8
 8001b40:	f000 f8a4 	bl	8001c8c <LCD_sendData>
	LCD_sendData(LCD_DISP_CLEAR);
 8001b44:	2001      	movs	r0, #1
 8001b46:	f000 f8a1 	bl	8001c8c <LCD_sendData>
	LCD_sendData(LCD_ENTRY_MODE_SET);
 8001b4a:	2006      	movs	r0, #6
 8001b4c:	f000 f89e 	bl	8001c8c <LCD_sendData>
	LCD_sendData(LCD_DISP_ON);
 8001b50:	200c      	movs	r0, #12
 8001b52:	f000 f89b 	bl	8001c8c <LCD_sendData>
	LCD_backLightOn();
 8001b56:	f000 f81d 	bl	8001b94 <LCD_backLightOn>
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000318 	.word	0x20000318

08001b68 <LCD_sendI2C>:

void LCD_sendI2C(uint8_t data)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af02      	add	r7, sp, #8
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(hLcdI2C, LCD_DEV_ADDR<<1, &data, 1, 1000);
 8001b72:	4b07      	ldr	r3, [pc, #28]	@ (8001b90 <LCD_sendI2C+0x28>)
 8001b74:	6818      	ldr	r0, [r3, #0]
 8001b76:	1dfa      	adds	r2, r7, #7
 8001b78:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	2301      	movs	r3, #1
 8001b80:	214e      	movs	r1, #78	@ 0x4e
 8001b82:	f000 fe4f 	bl	8002824 <HAL_I2C_Master_Transmit>
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000318 	.word	0x20000318

08001b94 <LCD_backLightOn>:

void LCD_backLightOn()
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_BL);
 8001b98:	4b05      	ldr	r3, [pc, #20]	@ (8001bb0 <LCD_backLightOn+0x1c>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	f043 0308 	orr.w	r3, r3, #8
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	4b03      	ldr	r3, [pc, #12]	@ (8001bb0 <LCD_backLightOn+0x1c>)
 8001ba4:	701a      	strb	r2, [r3, #0]
}
 8001ba6:	bf00      	nop
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	20000314 	.word	0x20000314

08001bb4 <LCD_cmdMode>:
{
	lcdData &= ~(1<<LCD_BL);
}

void LCD_cmdMode()
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RS);
 8001bb8:	4b06      	ldr	r3, [pc, #24]	@ (8001bd4 <LCD_cmdMode+0x20>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	f023 0301 	bic.w	r3, r3, #1
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	4b04      	ldr	r3, [pc, #16]	@ (8001bd4 <LCD_cmdMode+0x20>)
 8001bc4:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001bc6:	4b03      	ldr	r3, [pc, #12]	@ (8001bd4 <LCD_cmdMode+0x20>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff ffcc 	bl	8001b68 <LCD_sendI2C>
}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20000314 	.word	0x20000314

08001bd8 <LCD_writeMode>:
	lcdData |= (1<<LCD_RS);
	LCD_sendI2C(lcdData);
}

void LCD_writeMode()
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RW);
 8001bdc:	4b06      	ldr	r3, [pc, #24]	@ (8001bf8 <LCD_writeMode+0x20>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	f023 0302 	bic.w	r3, r3, #2
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	4b04      	ldr	r3, [pc, #16]	@ (8001bf8 <LCD_writeMode+0x20>)
 8001be8:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001bea:	4b03      	ldr	r3, [pc, #12]	@ (8001bf8 <LCD_writeMode+0x20>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff ffba 	bl	8001b68 <LCD_sendI2C>
}
 8001bf4:	bf00      	nop
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20000314 	.word	0x20000314

08001bfc <LCD_E_High>:

void LCD_E_High()
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_E);
 8001c00:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <LCD_E_High+0x20>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	f043 0304 	orr.w	r3, r3, #4
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	4b04      	ldr	r3, [pc, #16]	@ (8001c1c <LCD_E_High+0x20>)
 8001c0c:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001c0e:	4b03      	ldr	r3, [pc, #12]	@ (8001c1c <LCD_E_High+0x20>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff ffa8 	bl	8001b68 <LCD_sendI2C>
}
 8001c18:	bf00      	nop
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20000314 	.word	0x20000314

08001c20 <LCD_E_Low>:

void LCD_E_Low()
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_E);
 8001c24:	4b06      	ldr	r3, [pc, #24]	@ (8001c40 <LCD_E_Low+0x20>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	f023 0304 	bic.w	r3, r3, #4
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	4b04      	ldr	r3, [pc, #16]	@ (8001c40 <LCD_E_Low+0x20>)
 8001c30:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001c32:	4b03      	ldr	r3, [pc, #12]	@ (8001c40 <LCD_E_Low+0x20>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff ff96 	bl	8001b68 <LCD_sendI2C>
}
 8001c3c:	bf00      	nop
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20000314 	.word	0x20000314

08001c44 <LCD_sendNibbleData>:

void LCD_sendNibbleData(uint8_t data)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	71fb      	strb	r3, [r7, #7]
	LCD_E_High();
 8001c4e:	f7ff ffd5 	bl	8001bfc <LCD_E_High>
	lcdData = (data & 0xf0) | (lcdData & 0x0f);
 8001c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c56:	f023 030f 	bic.w	r3, r3, #15
 8001c5a:	b25a      	sxtb	r2, r3
 8001c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c88 <LCD_sendNibbleData+0x44>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	b25b      	sxtb	r3, r3
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	b25b      	sxtb	r3, r3
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	b25b      	sxtb	r3, r3
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	4b06      	ldr	r3, [pc, #24]	@ (8001c88 <LCD_sendNibbleData+0x44>)
 8001c70:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001c72:	4b05      	ldr	r3, [pc, #20]	@ (8001c88 <LCD_sendNibbleData+0x44>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff ff76 	bl	8001b68 <LCD_sendI2C>
	LCD_E_Low();
 8001c7c:	f7ff ffd0 	bl	8001c20 <LCD_E_Low>
}
 8001c80:	bf00      	nop
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000314 	.word	0x20000314

08001c8c <LCD_sendData>:

void LCD_sendData(uint8_t data)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
	// High 4bit
	LCD_sendNibbleData(data);
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff ffd3 	bl	8001c44 <LCD_sendNibbleData>

	data = data << 4;
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	011b      	lsls	r3, r3, #4
 8001ca2:	71fb      	strb	r3, [r7, #7]
	// Low 4bit
	LCD_sendNibbleData(data);
 8001ca4:	79fb      	ldrb	r3, [r7, #7]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff ffcc 	bl	8001c44 <LCD_sendNibbleData>
}
 8001cac:	bf00      	nop
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <delay_us>:
#include "UltraSonic.h"
#define FILTER_SIZE 5


void delay_us(uint16_t us)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce8 <delay_us+0x34>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start(&htim4);
 8001cc6:	4808      	ldr	r0, [pc, #32]	@ (8001ce8 <delay_us+0x34>)
 8001cc8:	f001 fdee 	bl	80038a8 <HAL_TIM_Base_Start>

	while(__HAL_TIM_GET_COUNTER(&htim4) < us);
 8001ccc:	bf00      	nop
 8001cce:	4b06      	ldr	r3, [pc, #24]	@ (8001ce8 <delay_us+0x34>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001cd4:	88fb      	ldrh	r3, [r7, #6]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d3f9      	bcc.n	8001cce <delay_us+0x1a>
	HAL_TIM_Base_Stop(&htim4);
 8001cda:	4803      	ldr	r0, [pc, #12]	@ (8001ce8 <delay_us+0x34>)
 8001cdc:	f001 fe3e 	bl	800395c <HAL_TIM_Base_Stop>
}
 8001ce0:	bf00      	nop
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	200001bc 	.word	0x200001bc

08001cec <UltraSonic_GetDistance>:
	hultra->Echo_GPIOx = Echo_GPIOx;
	hultra->Echo_pinNum = Echo_pinNum;
}

int UltraSonic_GetDistance (UltraSonic_TypeDef *hultra)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
	uint32_t count = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	613b      	str	r3, [r7, #16]
	int distance = 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60fb      	str	r3, [r7, #12]

	// trig
	HAL_GPIO_WritePin(hultra->Trig_GPIOx, hultra->Trig_pinNum, GPIO_PIN_SET);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6818      	ldr	r0, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	889b      	ldrh	r3, [r3, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	4619      	mov	r1, r3
 8001d08:	f000 fc2e 	bl	8002568 <HAL_GPIO_WritePin>
	delay_us(10);
 8001d0c:	200a      	movs	r0, #10
 8001d0e:	f7ff ffd1 	bl	8001cb4 <delay_us>
	HAL_GPIO_WritePin(hultra->Trig_GPIOx, hultra->Trig_pinNum, GPIO_PIN_RESET);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6818      	ldr	r0, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	889b      	ldrh	r3, [r3, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	f000 fc23 	bl	8002568 <HAL_GPIO_WritePin>

	// wait echo -> high
	uint32_t timeout = 30000;
 8001d22:	f247 5330 	movw	r3, #30000	@ 0x7530
 8001d26:	617b      	str	r3, [r7, #20]
	while(!(HAL_GPIO_ReadPin(hultra->Echo_GPIOx, hultra->Echo_pinNum)))
 8001d28:	e008      	b.n	8001d3c <UltraSonic_GetDistance+0x50>
	{
		if (--timeout == 0)
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	617b      	str	r3, [r7, #20]
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d102      	bne.n	8001d3c <UltraSonic_GetDistance+0x50>
			return -1;
 8001d36:	f04f 33ff 	mov.w	r3, #4294967295
 8001d3a:	e037      	b.n	8001dac <UltraSonic_GetDistance+0xc0>
	while(!(HAL_GPIO_ReadPin(hultra->Echo_GPIOx, hultra->Echo_pinNum)))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	899b      	ldrh	r3, [r3, #12]
 8001d44:	4619      	mov	r1, r3
 8001d46:	4610      	mov	r0, r2
 8001d48:	f000 fbf6 	bl	8002538 <HAL_GPIO_ReadPin>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0eb      	beq.n	8001d2a <UltraSonic_GetDistance+0x3e>
	}

	// timer start
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8001d52:	4b18      	ldr	r3, [pc, #96]	@ (8001db4 <UltraSonic_GetDistance+0xc8>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2200      	movs	r2, #0
 8001d58:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start(&htim4);
 8001d5a:	4816      	ldr	r0, [pc, #88]	@ (8001db4 <UltraSonic_GetDistance+0xc8>)
 8001d5c:	f001 fda4 	bl	80038a8 <HAL_TIM_Base_Start>

	// wait echo -> low
	timeout = 30000;
 8001d60:	f247 5330 	movw	r3, #30000	@ 0x7530
 8001d64:	617b      	str	r3, [r7, #20]
	while(HAL_GPIO_ReadPin(hultra->Echo_GPIOx, hultra->Echo_pinNum))
 8001d66:	e008      	b.n	8001d7a <UltraSonic_GetDistance+0x8e>
	{
		if (--timeout == 0)
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d102      	bne.n	8001d7a <UltraSonic_GetDistance+0x8e>
			return -1;
 8001d74:	f04f 33ff 	mov.w	r3, #4294967295
 8001d78:	e018      	b.n	8001dac <UltraSonic_GetDistance+0xc0>
	while(HAL_GPIO_ReadPin(hultra->Echo_GPIOx, hultra->Echo_pinNum))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	899b      	ldrh	r3, [r3, #12]
 8001d82:	4619      	mov	r1, r3
 8001d84:	4610      	mov	r0, r2
 8001d86:	f000 fbd7 	bl	8002538 <HAL_GPIO_ReadPin>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1eb      	bne.n	8001d68 <UltraSonic_GetDistance+0x7c>
	}

	// timer stop
	HAL_TIM_Base_Stop(&htim4);
 8001d90:	4808      	ldr	r0, [pc, #32]	@ (8001db4 <UltraSonic_GetDistance+0xc8>)
 8001d92:	f001 fde3 	bl	800395c <HAL_TIM_Base_Stop>
	count = __HAL_TIM_GET_COUNTER(&htim4);
 8001d96:	4b07      	ldr	r3, [pc, #28]	@ (8001db4 <UltraSonic_GetDistance+0xc8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d9c:	613b      	str	r3, [r7, #16]

	distance = count / 58;
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	4a05      	ldr	r2, [pc, #20]	@ (8001db8 <UltraSonic_GetDistance+0xcc>)
 8001da2:	fba2 2303 	umull	r2, r3, r2, r3
 8001da6:	095b      	lsrs	r3, r3, #5
 8001da8:	60fb      	str	r3, [r7, #12]

	return distance;
 8001daa:	68fb      	ldr	r3, [r7, #12]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	200001bc 	.word	0x200001bc
 8001db8:	8d3dcb09 	.word	0x8d3dcb09

08001dbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8001dfc <HAL_Init+0x40>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001dfc <HAL_Init+0x40>)
 8001dc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8001dfc <HAL_Init+0x40>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a0a      	ldr	r2, [pc, #40]	@ (8001dfc <HAL_Init+0x40>)
 8001dd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dd8:	4b08      	ldr	r3, [pc, #32]	@ (8001dfc <HAL_Init+0x40>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a07      	ldr	r2, [pc, #28]	@ (8001dfc <HAL_Init+0x40>)
 8001dde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001de2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001de4:	2003      	movs	r0, #3
 8001de6:	f000 f94f 	bl	8002088 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dea:	200f      	movs	r0, #15
 8001dec:	f000 f808 	bl	8001e00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001df0:	f7fe fd30 	bl	8000854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40023c00 	.word	0x40023c00

08001e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e08:	4b12      	ldr	r3, [pc, #72]	@ (8001e54 <HAL_InitTick+0x54>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	4b12      	ldr	r3, [pc, #72]	@ (8001e58 <HAL_InitTick+0x58>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	4619      	mov	r1, r3
 8001e12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f000 f967 	bl	80020f2 <HAL_SYSTICK_Config>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e00e      	b.n	8001e4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b0f      	cmp	r3, #15
 8001e32:	d80a      	bhi.n	8001e4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e34:	2200      	movs	r2, #0
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	f04f 30ff 	mov.w	r0, #4294967295
 8001e3c:	f000 f92f 	bl	800209e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e40:	4a06      	ldr	r2, [pc, #24]	@ (8001e5c <HAL_InitTick+0x5c>)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
 8001e48:	e000      	b.n	8001e4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20000000 	.word	0x20000000
 8001e58:	20000070 	.word	0x20000070
 8001e5c:	2000006c 	.word	0x2000006c

08001e60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e64:	4b06      	ldr	r3, [pc, #24]	@ (8001e80 <HAL_IncTick+0x20>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4b06      	ldr	r3, [pc, #24]	@ (8001e84 <HAL_IncTick+0x24>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4413      	add	r3, r2
 8001e70:	4a04      	ldr	r2, [pc, #16]	@ (8001e84 <HAL_IncTick+0x24>)
 8001e72:	6013      	str	r3, [r2, #0]
}
 8001e74:	bf00      	nop
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	20000070 	.word	0x20000070
 8001e84:	2000031c 	.word	0x2000031c

08001e88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e8c:	4b03      	ldr	r3, [pc, #12]	@ (8001e9c <HAL_GetTick+0x14>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	2000031c 	.word	0x2000031c

08001ea0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ea8:	f7ff ffee 	bl	8001e88 <HAL_GetTick>
 8001eac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb8:	d005      	beq.n	8001ec6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eba:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee4 <HAL_Delay+0x44>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ec6:	bf00      	nop
 8001ec8:	f7ff ffde 	bl	8001e88 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d8f7      	bhi.n	8001ec8 <HAL_Delay+0x28>
  {
  }
}
 8001ed8:	bf00      	nop
 8001eda:	bf00      	nop
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000070 	.word	0x20000070

08001ee8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f2c <__NVIC_SetPriorityGrouping+0x44>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f04:	4013      	ands	r3, r2
 8001f06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f1a:	4a04      	ldr	r2, [pc, #16]	@ (8001f2c <__NVIC_SetPriorityGrouping+0x44>)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	60d3      	str	r3, [r2, #12]
}
 8001f20:	bf00      	nop
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f34:	4b04      	ldr	r3, [pc, #16]	@ (8001f48 <__NVIC_GetPriorityGrouping+0x18>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	0a1b      	lsrs	r3, r3, #8
 8001f3a:	f003 0307 	and.w	r3, r3, #7
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	db0b      	blt.n	8001f76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	f003 021f 	and.w	r2, r3, #31
 8001f64:	4907      	ldr	r1, [pc, #28]	@ (8001f84 <__NVIC_EnableIRQ+0x38>)
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	095b      	lsrs	r3, r3, #5
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	e000e100 	.word	0xe000e100

08001f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	6039      	str	r1, [r7, #0]
 8001f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	db0a      	blt.n	8001fb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	490c      	ldr	r1, [pc, #48]	@ (8001fd4 <__NVIC_SetPriority+0x4c>)
 8001fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa6:	0112      	lsls	r2, r2, #4
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	440b      	add	r3, r1
 8001fac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fb0:	e00a      	b.n	8001fc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	4908      	ldr	r1, [pc, #32]	@ (8001fd8 <__NVIC_SetPriority+0x50>)
 8001fb8:	79fb      	ldrb	r3, [r7, #7]
 8001fba:	f003 030f 	and.w	r3, r3, #15
 8001fbe:	3b04      	subs	r3, #4
 8001fc0:	0112      	lsls	r2, r2, #4
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	761a      	strb	r2, [r3, #24]
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	e000e100 	.word	0xe000e100
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b089      	sub	sp, #36	@ 0x24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f1c3 0307 	rsb	r3, r3, #7
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	bf28      	it	cs
 8001ffa:	2304      	movcs	r3, #4
 8001ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	3304      	adds	r3, #4
 8002002:	2b06      	cmp	r3, #6
 8002004:	d902      	bls.n	800200c <NVIC_EncodePriority+0x30>
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	3b03      	subs	r3, #3
 800200a:	e000      	b.n	800200e <NVIC_EncodePriority+0x32>
 800200c:	2300      	movs	r3, #0
 800200e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002010:	f04f 32ff 	mov.w	r2, #4294967295
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43da      	mvns	r2, r3
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	401a      	ands	r2, r3
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002024:	f04f 31ff 	mov.w	r1, #4294967295
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	fa01 f303 	lsl.w	r3, r1, r3
 800202e:	43d9      	mvns	r1, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002034:	4313      	orrs	r3, r2
         );
}
 8002036:	4618      	mov	r0, r3
 8002038:	3724      	adds	r7, #36	@ 0x24
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
	...

08002044 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3b01      	subs	r3, #1
 8002050:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002054:	d301      	bcc.n	800205a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002056:	2301      	movs	r3, #1
 8002058:	e00f      	b.n	800207a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800205a:	4a0a      	ldr	r2, [pc, #40]	@ (8002084 <SysTick_Config+0x40>)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3b01      	subs	r3, #1
 8002060:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002062:	210f      	movs	r1, #15
 8002064:	f04f 30ff 	mov.w	r0, #4294967295
 8002068:	f7ff ff8e 	bl	8001f88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800206c:	4b05      	ldr	r3, [pc, #20]	@ (8002084 <SysTick_Config+0x40>)
 800206e:	2200      	movs	r2, #0
 8002070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002072:	4b04      	ldr	r3, [pc, #16]	@ (8002084 <SysTick_Config+0x40>)
 8002074:	2207      	movs	r2, #7
 8002076:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	e000e010 	.word	0xe000e010

08002088 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff ff29 	bl	8001ee8 <__NVIC_SetPriorityGrouping>
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800209e:	b580      	push	{r7, lr}
 80020a0:	b086      	sub	sp, #24
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	4603      	mov	r3, r0
 80020a6:	60b9      	str	r1, [r7, #8]
 80020a8:	607a      	str	r2, [r7, #4]
 80020aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020b0:	f7ff ff3e 	bl	8001f30 <__NVIC_GetPriorityGrouping>
 80020b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	68b9      	ldr	r1, [r7, #8]
 80020ba:	6978      	ldr	r0, [r7, #20]
 80020bc:	f7ff ff8e 	bl	8001fdc <NVIC_EncodePriority>
 80020c0:	4602      	mov	r2, r0
 80020c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020c6:	4611      	mov	r1, r2
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff ff5d 	bl	8001f88 <__NVIC_SetPriority>
}
 80020ce:	bf00      	nop
 80020d0:	3718      	adds	r7, #24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	4603      	mov	r3, r0
 80020de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff ff31 	bl	8001f4c <__NVIC_EnableIRQ>
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b082      	sub	sp, #8
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7ff ffa2 	bl	8002044 <SysTick_Config>
 8002100:	4603      	mov	r3, r0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b084      	sub	sp, #16
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002116:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002118:	f7ff feb6 	bl	8001e88 <HAL_GetTick>
 800211c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d008      	beq.n	800213c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2280      	movs	r2, #128	@ 0x80
 800212e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e052      	b.n	80021e2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 0216 	bic.w	r2, r2, #22
 800214a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	695a      	ldr	r2, [r3, #20]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800215a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002160:	2b00      	cmp	r3, #0
 8002162:	d103      	bne.n	800216c <HAL_DMA_Abort+0x62>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002168:	2b00      	cmp	r3, #0
 800216a:	d007      	beq.n	800217c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 0208 	bic.w	r2, r2, #8
 800217a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 0201 	bic.w	r2, r2, #1
 800218a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800218c:	e013      	b.n	80021b6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800218e:	f7ff fe7b 	bl	8001e88 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b05      	cmp	r3, #5
 800219a:	d90c      	bls.n	80021b6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2220      	movs	r2, #32
 80021a0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2203      	movs	r2, #3
 80021a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e015      	b.n	80021e2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1e4      	bne.n	800218e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021c8:	223f      	movs	r2, #63	@ 0x3f
 80021ca:	409a      	lsls	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d004      	beq.n	8002208 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2280      	movs	r2, #128	@ 0x80
 8002202:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e00c      	b.n	8002222 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2205      	movs	r2, #5
 800220c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 0201 	bic.w	r2, r2, #1
 800221e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
	...

08002230 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002230:	b480      	push	{r7}
 8002232:	b089      	sub	sp, #36	@ 0x24
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800223e:	2300      	movs	r3, #0
 8002240:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002242:	2300      	movs	r3, #0
 8002244:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002246:	2300      	movs	r3, #0
 8002248:	61fb      	str	r3, [r7, #28]
 800224a:	e159      	b.n	8002500 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800224c:	2201      	movs	r2, #1
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	4013      	ands	r3, r2
 800225e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	429a      	cmp	r2, r3
 8002266:	f040 8148 	bne.w	80024fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	2b01      	cmp	r3, #1
 8002274:	d005      	beq.n	8002282 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800227e:	2b02      	cmp	r3, #2
 8002280:	d130      	bne.n	80022e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	2203      	movs	r2, #3
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4013      	ands	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022b8:	2201      	movs	r2, #1
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	091b      	lsrs	r3, r3, #4
 80022ce:	f003 0201 	and.w	r2, r3, #1
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 0303 	and.w	r3, r3, #3
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	d017      	beq.n	8002320 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	2203      	movs	r2, #3
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4013      	ands	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4313      	orrs	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d123      	bne.n	8002374 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	08da      	lsrs	r2, r3, #3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3208      	adds	r2, #8
 8002334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002338:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	220f      	movs	r2, #15
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	691a      	ldr	r2, [r3, #16]
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4313      	orrs	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	08da      	lsrs	r2, r3, #3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3208      	adds	r2, #8
 800236e:	69b9      	ldr	r1, [r7, #24]
 8002370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	2203      	movs	r2, #3
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4013      	ands	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 0203 	and.w	r2, r3, #3
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4313      	orrs	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 80a2 	beq.w	80024fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	4b57      	ldr	r3, [pc, #348]	@ (8002518 <HAL_GPIO_Init+0x2e8>)
 80023bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023be:	4a56      	ldr	r2, [pc, #344]	@ (8002518 <HAL_GPIO_Init+0x2e8>)
 80023c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80023c6:	4b54      	ldr	r3, [pc, #336]	@ (8002518 <HAL_GPIO_Init+0x2e8>)
 80023c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023d2:	4a52      	ldr	r2, [pc, #328]	@ (800251c <HAL_GPIO_Init+0x2ec>)
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	089b      	lsrs	r3, r3, #2
 80023d8:	3302      	adds	r3, #2
 80023da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	220f      	movs	r2, #15
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43db      	mvns	r3, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4013      	ands	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a49      	ldr	r2, [pc, #292]	@ (8002520 <HAL_GPIO_Init+0x2f0>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d019      	beq.n	8002432 <HAL_GPIO_Init+0x202>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a48      	ldr	r2, [pc, #288]	@ (8002524 <HAL_GPIO_Init+0x2f4>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d013      	beq.n	800242e <HAL_GPIO_Init+0x1fe>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a47      	ldr	r2, [pc, #284]	@ (8002528 <HAL_GPIO_Init+0x2f8>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d00d      	beq.n	800242a <HAL_GPIO_Init+0x1fa>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a46      	ldr	r2, [pc, #280]	@ (800252c <HAL_GPIO_Init+0x2fc>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d007      	beq.n	8002426 <HAL_GPIO_Init+0x1f6>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a45      	ldr	r2, [pc, #276]	@ (8002530 <HAL_GPIO_Init+0x300>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d101      	bne.n	8002422 <HAL_GPIO_Init+0x1f2>
 800241e:	2304      	movs	r3, #4
 8002420:	e008      	b.n	8002434 <HAL_GPIO_Init+0x204>
 8002422:	2307      	movs	r3, #7
 8002424:	e006      	b.n	8002434 <HAL_GPIO_Init+0x204>
 8002426:	2303      	movs	r3, #3
 8002428:	e004      	b.n	8002434 <HAL_GPIO_Init+0x204>
 800242a:	2302      	movs	r3, #2
 800242c:	e002      	b.n	8002434 <HAL_GPIO_Init+0x204>
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <HAL_GPIO_Init+0x204>
 8002432:	2300      	movs	r3, #0
 8002434:	69fa      	ldr	r2, [r7, #28]
 8002436:	f002 0203 	and.w	r2, r2, #3
 800243a:	0092      	lsls	r2, r2, #2
 800243c:	4093      	lsls	r3, r2
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4313      	orrs	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002444:	4935      	ldr	r1, [pc, #212]	@ (800251c <HAL_GPIO_Init+0x2ec>)
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	089b      	lsrs	r3, r3, #2
 800244a:	3302      	adds	r3, #2
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002452:	4b38      	ldr	r3, [pc, #224]	@ (8002534 <HAL_GPIO_Init+0x304>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	43db      	mvns	r3, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002476:	4a2f      	ldr	r2, [pc, #188]	@ (8002534 <HAL_GPIO_Init+0x304>)
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800247c:	4b2d      	ldr	r3, [pc, #180]	@ (8002534 <HAL_GPIO_Init+0x304>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	43db      	mvns	r3, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4013      	ands	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	4313      	orrs	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024a0:	4a24      	ldr	r2, [pc, #144]	@ (8002534 <HAL_GPIO_Init+0x304>)
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024a6:	4b23      	ldr	r3, [pc, #140]	@ (8002534 <HAL_GPIO_Init+0x304>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	43db      	mvns	r3, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4013      	ands	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024ca:	4a1a      	ldr	r2, [pc, #104]	@ (8002534 <HAL_GPIO_Init+0x304>)
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024d0:	4b18      	ldr	r3, [pc, #96]	@ (8002534 <HAL_GPIO_Init+0x304>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024f4:	4a0f      	ldr	r2, [pc, #60]	@ (8002534 <HAL_GPIO_Init+0x304>)
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	3301      	adds	r3, #1
 80024fe:	61fb      	str	r3, [r7, #28]
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	2b0f      	cmp	r3, #15
 8002504:	f67f aea2 	bls.w	800224c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002508:	bf00      	nop
 800250a:	bf00      	nop
 800250c:	3724      	adds	r7, #36	@ 0x24
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	40023800 	.word	0x40023800
 800251c:	40013800 	.word	0x40013800
 8002520:	40020000 	.word	0x40020000
 8002524:	40020400 	.word	0x40020400
 8002528:	40020800 	.word	0x40020800
 800252c:	40020c00 	.word	0x40020c00
 8002530:	40021000 	.word	0x40021000
 8002534:	40013c00 	.word	0x40013c00

08002538 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	460b      	mov	r3, r1
 8002542:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	691a      	ldr	r2, [r3, #16]
 8002548:	887b      	ldrh	r3, [r7, #2]
 800254a:	4013      	ands	r3, r2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d002      	beq.n	8002556 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002550:	2301      	movs	r3, #1
 8002552:	73fb      	strb	r3, [r7, #15]
 8002554:	e001      	b.n	800255a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002556:	2300      	movs	r3, #0
 8002558:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800255a:	7bfb      	ldrb	r3, [r7, #15]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	460b      	mov	r3, r1
 8002572:	807b      	strh	r3, [r7, #2]
 8002574:	4613      	mov	r3, r2
 8002576:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002578:	787b      	ldrb	r3, [r7, #1]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800257e:	887a      	ldrh	r2, [r7, #2]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002584:	e003      	b.n	800258e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002586:	887b      	ldrh	r3, [r7, #2]
 8002588:	041a      	lsls	r2, r3, #16
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	619a      	str	r2, [r3, #24]
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
	...

0800259c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e12b      	b.n	8002806 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d106      	bne.n	80025c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7fe f874 	bl	80006b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2224      	movs	r2, #36	@ 0x24
 80025cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 0201 	bic.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002600:	f001 f8da 	bl	80037b8 <HAL_RCC_GetPCLK1Freq>
 8002604:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	4a81      	ldr	r2, [pc, #516]	@ (8002810 <HAL_I2C_Init+0x274>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d807      	bhi.n	8002620 <HAL_I2C_Init+0x84>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4a80      	ldr	r2, [pc, #512]	@ (8002814 <HAL_I2C_Init+0x278>)
 8002614:	4293      	cmp	r3, r2
 8002616:	bf94      	ite	ls
 8002618:	2301      	movls	r3, #1
 800261a:	2300      	movhi	r3, #0
 800261c:	b2db      	uxtb	r3, r3
 800261e:	e006      	b.n	800262e <HAL_I2C_Init+0x92>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	4a7d      	ldr	r2, [pc, #500]	@ (8002818 <HAL_I2C_Init+0x27c>)
 8002624:	4293      	cmp	r3, r2
 8002626:	bf94      	ite	ls
 8002628:	2301      	movls	r3, #1
 800262a:	2300      	movhi	r3, #0
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e0e7      	b.n	8002806 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	4a78      	ldr	r2, [pc, #480]	@ (800281c <HAL_I2C_Init+0x280>)
 800263a:	fba2 2303 	umull	r2, r3, r2, r3
 800263e:	0c9b      	lsrs	r3, r3, #18
 8002640:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	430a      	orrs	r2, r1
 8002654:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	4a6a      	ldr	r2, [pc, #424]	@ (8002810 <HAL_I2C_Init+0x274>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d802      	bhi.n	8002670 <HAL_I2C_Init+0xd4>
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	3301      	adds	r3, #1
 800266e:	e009      	b.n	8002684 <HAL_I2C_Init+0xe8>
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002676:	fb02 f303 	mul.w	r3, r2, r3
 800267a:	4a69      	ldr	r2, [pc, #420]	@ (8002820 <HAL_I2C_Init+0x284>)
 800267c:	fba2 2303 	umull	r2, r3, r2, r3
 8002680:	099b      	lsrs	r3, r3, #6
 8002682:	3301      	adds	r3, #1
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6812      	ldr	r2, [r2, #0]
 8002688:	430b      	orrs	r3, r1
 800268a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002696:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	495c      	ldr	r1, [pc, #368]	@ (8002810 <HAL_I2C_Init+0x274>)
 80026a0:	428b      	cmp	r3, r1
 80026a2:	d819      	bhi.n	80026d8 <HAL_I2C_Init+0x13c>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	1e59      	subs	r1, r3, #1
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80026b2:	1c59      	adds	r1, r3, #1
 80026b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80026b8:	400b      	ands	r3, r1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00a      	beq.n	80026d4 <HAL_I2C_Init+0x138>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	1e59      	subs	r1, r3, #1
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80026cc:	3301      	adds	r3, #1
 80026ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d2:	e051      	b.n	8002778 <HAL_I2C_Init+0x1dc>
 80026d4:	2304      	movs	r3, #4
 80026d6:	e04f      	b.n	8002778 <HAL_I2C_Init+0x1dc>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d111      	bne.n	8002704 <HAL_I2C_Init+0x168>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	1e58      	subs	r0, r3, #1
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6859      	ldr	r1, [r3, #4]
 80026e8:	460b      	mov	r3, r1
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	440b      	add	r3, r1
 80026ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80026f2:	3301      	adds	r3, #1
 80026f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	bf0c      	ite	eq
 80026fc:	2301      	moveq	r3, #1
 80026fe:	2300      	movne	r3, #0
 8002700:	b2db      	uxtb	r3, r3
 8002702:	e012      	b.n	800272a <HAL_I2C_Init+0x18e>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	1e58      	subs	r0, r3, #1
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6859      	ldr	r1, [r3, #4]
 800270c:	460b      	mov	r3, r1
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	0099      	lsls	r1, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	fbb0 f3f3 	udiv	r3, r0, r3
 800271a:	3301      	adds	r3, #1
 800271c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002720:	2b00      	cmp	r3, #0
 8002722:	bf0c      	ite	eq
 8002724:	2301      	moveq	r3, #1
 8002726:	2300      	movne	r3, #0
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_I2C_Init+0x196>
 800272e:	2301      	movs	r3, #1
 8002730:	e022      	b.n	8002778 <HAL_I2C_Init+0x1dc>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10e      	bne.n	8002758 <HAL_I2C_Init+0x1bc>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	1e58      	subs	r0, r3, #1
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6859      	ldr	r1, [r3, #4]
 8002742:	460b      	mov	r3, r1
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	440b      	add	r3, r1
 8002748:	fbb0 f3f3 	udiv	r3, r0, r3
 800274c:	3301      	adds	r3, #1
 800274e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002752:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002756:	e00f      	b.n	8002778 <HAL_I2C_Init+0x1dc>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	1e58      	subs	r0, r3, #1
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6859      	ldr	r1, [r3, #4]
 8002760:	460b      	mov	r3, r1
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	0099      	lsls	r1, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	fbb0 f3f3 	udiv	r3, r0, r3
 800276e:	3301      	adds	r3, #1
 8002770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002774:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	6809      	ldr	r1, [r1, #0]
 800277c:	4313      	orrs	r3, r2
 800277e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	69da      	ldr	r2, [r3, #28]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	431a      	orrs	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80027a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	6911      	ldr	r1, [r2, #16]
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	68d2      	ldr	r2, [r2, #12]
 80027b2:	4311      	orrs	r1, r2
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6812      	ldr	r2, [r2, #0]
 80027b8:	430b      	orrs	r3, r1
 80027ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695a      	ldr	r2, [r3, #20]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	430a      	orrs	r2, r1
 80027d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f042 0201 	orr.w	r2, r2, #1
 80027e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2220      	movs	r2, #32
 80027f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	000186a0 	.word	0x000186a0
 8002814:	001e847f 	.word	0x001e847f
 8002818:	003d08ff 	.word	0x003d08ff
 800281c:	431bde83 	.word	0x431bde83
 8002820:	10624dd3 	.word	0x10624dd3

08002824 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b088      	sub	sp, #32
 8002828:	af02      	add	r7, sp, #8
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	607a      	str	r2, [r7, #4]
 800282e:	461a      	mov	r2, r3
 8002830:	460b      	mov	r3, r1
 8002832:	817b      	strh	r3, [r7, #10]
 8002834:	4613      	mov	r3, r2
 8002836:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002838:	f7ff fb26 	bl	8001e88 <HAL_GetTick>
 800283c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b20      	cmp	r3, #32
 8002848:	f040 80e0 	bne.w	8002a0c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	2319      	movs	r3, #25
 8002852:	2201      	movs	r2, #1
 8002854:	4970      	ldr	r1, [pc, #448]	@ (8002a18 <HAL_I2C_Master_Transmit+0x1f4>)
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 f964 	bl	8002b24 <I2C_WaitOnFlagUntilTimeout>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002862:	2302      	movs	r3, #2
 8002864:	e0d3      	b.n	8002a0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800286c:	2b01      	cmp	r3, #1
 800286e:	d101      	bne.n	8002874 <HAL_I2C_Master_Transmit+0x50>
 8002870:	2302      	movs	r3, #2
 8002872:	e0cc      	b.n	8002a0e <HAL_I2C_Master_Transmit+0x1ea>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b01      	cmp	r3, #1
 8002888:	d007      	beq.n	800289a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f042 0201 	orr.w	r2, r2, #1
 8002898:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2221      	movs	r2, #33	@ 0x21
 80028ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2210      	movs	r2, #16
 80028b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	893a      	ldrh	r2, [r7, #8]
 80028ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	4a50      	ldr	r2, [pc, #320]	@ (8002a1c <HAL_I2C_Master_Transmit+0x1f8>)
 80028da:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80028dc:	8979      	ldrh	r1, [r7, #10]
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	6a3a      	ldr	r2, [r7, #32]
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 f89c 	bl	8002a20 <I2C_MasterRequestWrite>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e08d      	b.n	8002a0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028f2:	2300      	movs	r3, #0
 80028f4:	613b      	str	r3, [r7, #16]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	613b      	str	r3, [r7, #16]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	613b      	str	r3, [r7, #16]
 8002906:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002908:	e066      	b.n	80029d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	6a39      	ldr	r1, [r7, #32]
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 fa22 	bl	8002d58 <I2C_WaitOnTXEFlagUntilTimeout>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00d      	beq.n	8002936 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291e:	2b04      	cmp	r3, #4
 8002920:	d107      	bne.n	8002932 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002930:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e06b      	b.n	8002a0e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293a:	781a      	ldrb	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002946:	1c5a      	adds	r2, r3, #1
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002950:	b29b      	uxth	r3, r3
 8002952:	3b01      	subs	r3, #1
 8002954:	b29a      	uxth	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800295e:	3b01      	subs	r3, #1
 8002960:	b29a      	uxth	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b04      	cmp	r3, #4
 8002972:	d11b      	bne.n	80029ac <HAL_I2C_Master_Transmit+0x188>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002978:	2b00      	cmp	r3, #0
 800297a:	d017      	beq.n	80029ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002980:	781a      	ldrb	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298c:	1c5a      	adds	r2, r3, #1
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002996:	b29b      	uxth	r3, r3
 8002998:	3b01      	subs	r3, #1
 800299a:	b29a      	uxth	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029a4:	3b01      	subs	r3, #1
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	6a39      	ldr	r1, [r7, #32]
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f000 fa19 	bl	8002de8 <I2C_WaitOnBTFFlagUntilTimeout>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00d      	beq.n	80029d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d107      	bne.n	80029d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e01a      	b.n	8002a0e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d194      	bne.n	800290a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2220      	movs	r2, #32
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	e000      	b.n	8002a0e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a0c:	2302      	movs	r3, #2
  }
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3718      	adds	r7, #24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	00100002 	.word	0x00100002
 8002a1c:	ffff0000 	.word	0xffff0000

08002a20 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b088      	sub	sp, #32
 8002a24:	af02      	add	r7, sp, #8
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	607a      	str	r2, [r7, #4]
 8002a2a:	603b      	str	r3, [r7, #0]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a34:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	2b08      	cmp	r3, #8
 8002a3a:	d006      	beq.n	8002a4a <I2C_MasterRequestWrite+0x2a>
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d003      	beq.n	8002a4a <I2C_MasterRequestWrite+0x2a>
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a48:	d108      	bne.n	8002a5c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	e00b      	b.n	8002a74 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a60:	2b12      	cmp	r3, #18
 8002a62:	d107      	bne.n	8002a74 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 f84f 	bl	8002b24 <I2C_WaitOnFlagUntilTimeout>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00d      	beq.n	8002aa8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a9a:	d103      	bne.n	8002aa4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002aa2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e035      	b.n	8002b14 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ab0:	d108      	bne.n	8002ac4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ab2:	897b      	ldrh	r3, [r7, #10]
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ac0:	611a      	str	r2, [r3, #16]
 8002ac2:	e01b      	b.n	8002afc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ac4:	897b      	ldrh	r3, [r7, #10]
 8002ac6:	11db      	asrs	r3, r3, #7
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	f003 0306 	and.w	r3, r3, #6
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	f063 030f 	orn	r3, r3, #15
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	490e      	ldr	r1, [pc, #56]	@ (8002b1c <I2C_MasterRequestWrite+0xfc>)
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 f898 	bl	8002c18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e010      	b.n	8002b14 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002af2:	897b      	ldrh	r3, [r7, #10]
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	4907      	ldr	r1, [pc, #28]	@ (8002b20 <I2C_MasterRequestWrite+0x100>)
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 f888 	bl	8002c18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e000      	b.n	8002b14 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	00010008 	.word	0x00010008
 8002b20:	00010002 	.word	0x00010002

08002b24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	603b      	str	r3, [r7, #0]
 8002b30:	4613      	mov	r3, r2
 8002b32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b34:	e048      	b.n	8002bc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3c:	d044      	beq.n	8002bc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b3e:	f7ff f9a3 	bl	8001e88 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d302      	bcc.n	8002b54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d139      	bne.n	8002bc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	0c1b      	lsrs	r3, r3, #16
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d10d      	bne.n	8002b7a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	43da      	mvns	r2, r3
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	bf0c      	ite	eq
 8002b70:	2301      	moveq	r3, #1
 8002b72:	2300      	movne	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	461a      	mov	r2, r3
 8002b78:	e00c      	b.n	8002b94 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	43da      	mvns	r2, r3
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	4013      	ands	r3, r2
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	bf0c      	ite	eq
 8002b8c:	2301      	moveq	r3, #1
 8002b8e:	2300      	movne	r3, #0
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	461a      	mov	r2, r3
 8002b94:	79fb      	ldrb	r3, [r7, #7]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d116      	bne.n	8002bc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb4:	f043 0220 	orr.w	r2, r3, #32
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e023      	b.n	8002c10 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	0c1b      	lsrs	r3, r3, #16
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d10d      	bne.n	8002bee <I2C_WaitOnFlagUntilTimeout+0xca>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	43da      	mvns	r2, r3
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	bf0c      	ite	eq
 8002be4:	2301      	moveq	r3, #1
 8002be6:	2300      	movne	r3, #0
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	461a      	mov	r2, r3
 8002bec:	e00c      	b.n	8002c08 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	43da      	mvns	r2, r3
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	bf0c      	ite	eq
 8002c00:	2301      	moveq	r3, #1
 8002c02:	2300      	movne	r3, #0
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	461a      	mov	r2, r3
 8002c08:	79fb      	ldrb	r3, [r7, #7]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d093      	beq.n	8002b36 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
 8002c24:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c26:	e071      	b.n	8002d0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c36:	d123      	bne.n	8002c80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c46:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6c:	f043 0204 	orr.w	r2, r3, #4
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e067      	b.n	8002d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c86:	d041      	beq.n	8002d0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c88:	f7ff f8fe 	bl	8001e88 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d302      	bcc.n	8002c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d136      	bne.n	8002d0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	0c1b      	lsrs	r3, r3, #16
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d10c      	bne.n	8002cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	43da      	mvns	r2, r3
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	bf14      	ite	ne
 8002cba:	2301      	movne	r3, #1
 8002cbc:	2300      	moveq	r3, #0
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	e00b      	b.n	8002cda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	43da      	mvns	r2, r3
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	bf14      	ite	ne
 8002cd4:	2301      	movne	r3, #1
 8002cd6:	2300      	moveq	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d016      	beq.n	8002d0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf8:	f043 0220 	orr.w	r2, r3, #32
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e021      	b.n	8002d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	0c1b      	lsrs	r3, r3, #16
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d10c      	bne.n	8002d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	43da      	mvns	r2, r3
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	4013      	ands	r3, r2
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	bf14      	ite	ne
 8002d28:	2301      	movne	r3, #1
 8002d2a:	2300      	moveq	r3, #0
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	e00b      	b.n	8002d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	43da      	mvns	r2, r3
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	bf14      	ite	ne
 8002d42:	2301      	movne	r3, #1
 8002d44:	2300      	moveq	r3, #0
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f47f af6d 	bne.w	8002c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d64:	e034      	b.n	8002dd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 f886 	bl	8002e78 <I2C_IsAcknowledgeFailed>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e034      	b.n	8002de0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7c:	d028      	beq.n	8002dd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d7e:	f7ff f883 	bl	8001e88 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d302      	bcc.n	8002d94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d11d      	bne.n	8002dd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d9e:	2b80      	cmp	r3, #128	@ 0x80
 8002da0:	d016      	beq.n	8002dd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2220      	movs	r2, #32
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dbc:	f043 0220 	orr.w	r2, r3, #32
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e007      	b.n	8002de0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dda:	2b80      	cmp	r3, #128	@ 0x80
 8002ddc:	d1c3      	bne.n	8002d66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002df4:	e034      	b.n	8002e60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 f83e 	bl	8002e78 <I2C_IsAcknowledgeFailed>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e034      	b.n	8002e70 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e0c:	d028      	beq.n	8002e60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e0e:	f7ff f83b 	bl	8001e88 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	68ba      	ldr	r2, [r7, #8]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d302      	bcc.n	8002e24 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d11d      	bne.n	8002e60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	f003 0304 	and.w	r3, r3, #4
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d016      	beq.n	8002e60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4c:	f043 0220 	orr.w	r2, r3, #32
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e007      	b.n	8002e70 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	f003 0304 	and.w	r3, r3, #4
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	d1c3      	bne.n	8002df6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e8e:	d11b      	bne.n	8002ec8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb4:	f043 0204 	orr.w	r2, r3, #4
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e000      	b.n	8002eca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
	...

08002ed8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e267      	b.n	80033ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d075      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002ef6:	4b88      	ldr	r3, [pc, #544]	@ (8003118 <HAL_RCC_OscConfig+0x240>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 030c 	and.w	r3, r3, #12
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d00c      	beq.n	8002f1c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f02:	4b85      	ldr	r3, [pc, #532]	@ (8003118 <HAL_RCC_OscConfig+0x240>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002f0a:	2b08      	cmp	r3, #8
 8002f0c:	d112      	bne.n	8002f34 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f0e:	4b82      	ldr	r3, [pc, #520]	@ (8003118 <HAL_RCC_OscConfig+0x240>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f1a:	d10b      	bne.n	8002f34 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f1c:	4b7e      	ldr	r3, [pc, #504]	@ (8003118 <HAL_RCC_OscConfig+0x240>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d05b      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x108>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d157      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e242      	b.n	80033ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f3c:	d106      	bne.n	8002f4c <HAL_RCC_OscConfig+0x74>
 8002f3e:	4b76      	ldr	r3, [pc, #472]	@ (8003118 <HAL_RCC_OscConfig+0x240>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a75      	ldr	r2, [pc, #468]	@ (8003118 <HAL_RCC_OscConfig+0x240>)
 8002f44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	e01d      	b.n	8002f88 <HAL_RCC_OscConfig+0xb0>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f54:	d10c      	bne.n	8002f70 <HAL_RCC_OscConfig+0x98>
 8002f56:	4b70      	ldr	r3, [pc, #448]	@ (8003118 <HAL_RCC_OscConfig+0x240>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a6f      	ldr	r2, [pc, #444]	@ (8003118 <HAL_RCC_OscConfig+0x240>)
 8002f5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	4b6d      	ldr	r3, [pc, #436]	@ (8003118 <HAL_RCC_OscConfig+0x240>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a6c      	ldr	r2, [pc, #432]	@ (8003118 <HAL_RCC_OscConfig+0x240>)
 8002f68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f6c:	6013      	str	r3, [r2, #0]
 8002f6e:	e00b      	b.n	8002f88 <HAL_RCC_OscConfig+0xb0>
 8002f70:	4b69      	ldr	r3, [pc, #420]	@ (8003118 <HAL_RCC_OscConfig+0x240>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a68      	ldr	r2, [pc, #416]	@ (8003118 <HAL_RCC_OscConfig+0x240>)
 8002f76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f7a:	6013      	str	r3, [r2, #0]
 8002f7c:	4b66      	ldr	r3, [pc, #408]	@ (8003118 <HAL_RCC_OscConfig+0x240>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a65      	ldr	r2, [pc, #404]	@ (8003118 <HAL_RCC_OscConfig+0x240>)
 8002f82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d013      	beq.n	8002fb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f90:	f7fe ff7a 	bl	8001e88 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f98:	f7fe ff76 	bl	8001e88 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b64      	cmp	r3, #100	@ 0x64
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e207      	b.n	80033ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002faa:	4b5b      	ldr	r3, [pc, #364]	@ (8003118 <HAL_RCC_OscConfig+0x240>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0f0      	beq.n	8002f98 <HAL_RCC_OscConfig+0xc0>
 8002fb6:	e014      	b.n	8002fe2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb8:	f7fe ff66 	bl	8001e88 <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fc0:	f7fe ff62 	bl	8001e88 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b64      	cmp	r3, #100	@ 0x64
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e1f3      	b.n	80033ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fd2:	4b51      	ldr	r3, [pc, #324]	@ (8003118 <HAL_RCC_OscConfig+0x240>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1f0      	bne.n	8002fc0 <HAL_RCC_OscConfig+0xe8>
 8002fde:	e000      	b.n	8002fe2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d063      	beq.n	80030b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002fee:	4b4a      	ldr	r3, [pc, #296]	@ (8003118 <HAL_RCC_OscConfig+0x240>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 030c 	and.w	r3, r3, #12
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00b      	beq.n	8003012 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ffa:	4b47      	ldr	r3, [pc, #284]	@ (8003118 <HAL_RCC_OscConfig+0x240>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003002:	2b08      	cmp	r3, #8
 8003004:	d11c      	bne.n	8003040 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003006:	4b44      	ldr	r3, [pc, #272]	@ (8003118 <HAL_RCC_OscConfig+0x240>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d116      	bne.n	8003040 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003012:	4b41      	ldr	r3, [pc, #260]	@ (8003118 <HAL_RCC_OscConfig+0x240>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d005      	beq.n	800302a <HAL_RCC_OscConfig+0x152>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d001      	beq.n	800302a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e1c7      	b.n	80033ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800302a:	4b3b      	ldr	r3, [pc, #236]	@ (8003118 <HAL_RCC_OscConfig+0x240>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	4937      	ldr	r1, [pc, #220]	@ (8003118 <HAL_RCC_OscConfig+0x240>)
 800303a:	4313      	orrs	r3, r2
 800303c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800303e:	e03a      	b.n	80030b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d020      	beq.n	800308a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003048:	4b34      	ldr	r3, [pc, #208]	@ (800311c <HAL_RCC_OscConfig+0x244>)
 800304a:	2201      	movs	r2, #1
 800304c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304e:	f7fe ff1b 	bl	8001e88 <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003056:	f7fe ff17 	bl	8001e88 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e1a8      	b.n	80033ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003068:	4b2b      	ldr	r3, [pc, #172]	@ (8003118 <HAL_RCC_OscConfig+0x240>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0f0      	beq.n	8003056 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003074:	4b28      	ldr	r3, [pc, #160]	@ (8003118 <HAL_RCC_OscConfig+0x240>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	4925      	ldr	r1, [pc, #148]	@ (8003118 <HAL_RCC_OscConfig+0x240>)
 8003084:	4313      	orrs	r3, r2
 8003086:	600b      	str	r3, [r1, #0]
 8003088:	e015      	b.n	80030b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800308a:	4b24      	ldr	r3, [pc, #144]	@ (800311c <HAL_RCC_OscConfig+0x244>)
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003090:	f7fe fefa 	bl	8001e88 <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003096:	e008      	b.n	80030aa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003098:	f7fe fef6 	bl	8001e88 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e187      	b.n	80033ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003118 <HAL_RCC_OscConfig+0x240>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1f0      	bne.n	8003098 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d036      	beq.n	8003130 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d016      	beq.n	80030f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ca:	4b15      	ldr	r3, [pc, #84]	@ (8003120 <HAL_RCC_OscConfig+0x248>)
 80030cc:	2201      	movs	r2, #1
 80030ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d0:	f7fe feda 	bl	8001e88 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030d8:	f7fe fed6 	bl	8001e88 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e167      	b.n	80033ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003118 <HAL_RCC_OscConfig+0x240>)
 80030ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0f0      	beq.n	80030d8 <HAL_RCC_OscConfig+0x200>
 80030f6:	e01b      	b.n	8003130 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030f8:	4b09      	ldr	r3, [pc, #36]	@ (8003120 <HAL_RCC_OscConfig+0x248>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030fe:	f7fe fec3 	bl	8001e88 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003104:	e00e      	b.n	8003124 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003106:	f7fe febf 	bl	8001e88 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d907      	bls.n	8003124 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e150      	b.n	80033ba <HAL_RCC_OscConfig+0x4e2>
 8003118:	40023800 	.word	0x40023800
 800311c:	42470000 	.word	0x42470000
 8003120:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003124:	4b88      	ldr	r3, [pc, #544]	@ (8003348 <HAL_RCC_OscConfig+0x470>)
 8003126:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1ea      	bne.n	8003106 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 8097 	beq.w	800326c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800313e:	2300      	movs	r3, #0
 8003140:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003142:	4b81      	ldr	r3, [pc, #516]	@ (8003348 <HAL_RCC_OscConfig+0x470>)
 8003144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003146:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10f      	bne.n	800316e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800314e:	2300      	movs	r3, #0
 8003150:	60bb      	str	r3, [r7, #8]
 8003152:	4b7d      	ldr	r3, [pc, #500]	@ (8003348 <HAL_RCC_OscConfig+0x470>)
 8003154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003156:	4a7c      	ldr	r2, [pc, #496]	@ (8003348 <HAL_RCC_OscConfig+0x470>)
 8003158:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800315c:	6413      	str	r3, [r2, #64]	@ 0x40
 800315e:	4b7a      	ldr	r3, [pc, #488]	@ (8003348 <HAL_RCC_OscConfig+0x470>)
 8003160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003166:	60bb      	str	r3, [r7, #8]
 8003168:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800316a:	2301      	movs	r3, #1
 800316c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800316e:	4b77      	ldr	r3, [pc, #476]	@ (800334c <HAL_RCC_OscConfig+0x474>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003176:	2b00      	cmp	r3, #0
 8003178:	d118      	bne.n	80031ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800317a:	4b74      	ldr	r3, [pc, #464]	@ (800334c <HAL_RCC_OscConfig+0x474>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a73      	ldr	r2, [pc, #460]	@ (800334c <HAL_RCC_OscConfig+0x474>)
 8003180:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003184:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003186:	f7fe fe7f 	bl	8001e88 <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800318e:	f7fe fe7b 	bl	8001e88 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e10c      	b.n	80033ba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a0:	4b6a      	ldr	r3, [pc, #424]	@ (800334c <HAL_RCC_OscConfig+0x474>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0f0      	beq.n	800318e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d106      	bne.n	80031c2 <HAL_RCC_OscConfig+0x2ea>
 80031b4:	4b64      	ldr	r3, [pc, #400]	@ (8003348 <HAL_RCC_OscConfig+0x470>)
 80031b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031b8:	4a63      	ldr	r2, [pc, #396]	@ (8003348 <HAL_RCC_OscConfig+0x470>)
 80031ba:	f043 0301 	orr.w	r3, r3, #1
 80031be:	6713      	str	r3, [r2, #112]	@ 0x70
 80031c0:	e01c      	b.n	80031fc <HAL_RCC_OscConfig+0x324>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	2b05      	cmp	r3, #5
 80031c8:	d10c      	bne.n	80031e4 <HAL_RCC_OscConfig+0x30c>
 80031ca:	4b5f      	ldr	r3, [pc, #380]	@ (8003348 <HAL_RCC_OscConfig+0x470>)
 80031cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ce:	4a5e      	ldr	r2, [pc, #376]	@ (8003348 <HAL_RCC_OscConfig+0x470>)
 80031d0:	f043 0304 	orr.w	r3, r3, #4
 80031d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80031d6:	4b5c      	ldr	r3, [pc, #368]	@ (8003348 <HAL_RCC_OscConfig+0x470>)
 80031d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031da:	4a5b      	ldr	r2, [pc, #364]	@ (8003348 <HAL_RCC_OscConfig+0x470>)
 80031dc:	f043 0301 	orr.w	r3, r3, #1
 80031e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80031e2:	e00b      	b.n	80031fc <HAL_RCC_OscConfig+0x324>
 80031e4:	4b58      	ldr	r3, [pc, #352]	@ (8003348 <HAL_RCC_OscConfig+0x470>)
 80031e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031e8:	4a57      	ldr	r2, [pc, #348]	@ (8003348 <HAL_RCC_OscConfig+0x470>)
 80031ea:	f023 0301 	bic.w	r3, r3, #1
 80031ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80031f0:	4b55      	ldr	r3, [pc, #340]	@ (8003348 <HAL_RCC_OscConfig+0x470>)
 80031f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f4:	4a54      	ldr	r2, [pc, #336]	@ (8003348 <HAL_RCC_OscConfig+0x470>)
 80031f6:	f023 0304 	bic.w	r3, r3, #4
 80031fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d015      	beq.n	8003230 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003204:	f7fe fe40 	bl	8001e88 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800320a:	e00a      	b.n	8003222 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800320c:	f7fe fe3c 	bl	8001e88 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	f241 3288 	movw	r2, #5000	@ 0x1388
 800321a:	4293      	cmp	r3, r2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e0cb      	b.n	80033ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003222:	4b49      	ldr	r3, [pc, #292]	@ (8003348 <HAL_RCC_OscConfig+0x470>)
 8003224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d0ee      	beq.n	800320c <HAL_RCC_OscConfig+0x334>
 800322e:	e014      	b.n	800325a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003230:	f7fe fe2a 	bl	8001e88 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003236:	e00a      	b.n	800324e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003238:	f7fe fe26 	bl	8001e88 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003246:	4293      	cmp	r3, r2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e0b5      	b.n	80033ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800324e:	4b3e      	ldr	r3, [pc, #248]	@ (8003348 <HAL_RCC_OscConfig+0x470>)
 8003250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1ee      	bne.n	8003238 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800325a:	7dfb      	ldrb	r3, [r7, #23]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d105      	bne.n	800326c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003260:	4b39      	ldr	r3, [pc, #228]	@ (8003348 <HAL_RCC_OscConfig+0x470>)
 8003262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003264:	4a38      	ldr	r2, [pc, #224]	@ (8003348 <HAL_RCC_OscConfig+0x470>)
 8003266:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800326a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 80a1 	beq.w	80033b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003276:	4b34      	ldr	r3, [pc, #208]	@ (8003348 <HAL_RCC_OscConfig+0x470>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 030c 	and.w	r3, r3, #12
 800327e:	2b08      	cmp	r3, #8
 8003280:	d05c      	beq.n	800333c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	2b02      	cmp	r3, #2
 8003288:	d141      	bne.n	800330e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800328a:	4b31      	ldr	r3, [pc, #196]	@ (8003350 <HAL_RCC_OscConfig+0x478>)
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003290:	f7fe fdfa 	bl	8001e88 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003298:	f7fe fdf6 	bl	8001e88 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e087      	b.n	80033ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032aa:	4b27      	ldr	r3, [pc, #156]	@ (8003348 <HAL_RCC_OscConfig+0x470>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1f0      	bne.n	8003298 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	69da      	ldr	r2, [r3, #28]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c4:	019b      	lsls	r3, r3, #6
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032cc:	085b      	lsrs	r3, r3, #1
 80032ce:	3b01      	subs	r3, #1
 80032d0:	041b      	lsls	r3, r3, #16
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d8:	061b      	lsls	r3, r3, #24
 80032da:	491b      	ldr	r1, [pc, #108]	@ (8003348 <HAL_RCC_OscConfig+0x470>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003350 <HAL_RCC_OscConfig+0x478>)
 80032e2:	2201      	movs	r2, #1
 80032e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e6:	f7fe fdcf 	bl	8001e88 <HAL_GetTick>
 80032ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ec:	e008      	b.n	8003300 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ee:	f7fe fdcb 	bl	8001e88 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e05c      	b.n	80033ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003300:	4b11      	ldr	r3, [pc, #68]	@ (8003348 <HAL_RCC_OscConfig+0x470>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d0f0      	beq.n	80032ee <HAL_RCC_OscConfig+0x416>
 800330c:	e054      	b.n	80033b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800330e:	4b10      	ldr	r3, [pc, #64]	@ (8003350 <HAL_RCC_OscConfig+0x478>)
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003314:	f7fe fdb8 	bl	8001e88 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800331c:	f7fe fdb4 	bl	8001e88 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e045      	b.n	80033ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800332e:	4b06      	ldr	r3, [pc, #24]	@ (8003348 <HAL_RCC_OscConfig+0x470>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f0      	bne.n	800331c <HAL_RCC_OscConfig+0x444>
 800333a:	e03d      	b.n	80033b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d107      	bne.n	8003354 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e038      	b.n	80033ba <HAL_RCC_OscConfig+0x4e2>
 8003348:	40023800 	.word	0x40023800
 800334c:	40007000 	.word	0x40007000
 8003350:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003354:	4b1b      	ldr	r3, [pc, #108]	@ (80033c4 <HAL_RCC_OscConfig+0x4ec>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d028      	beq.n	80033b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800336c:	429a      	cmp	r2, r3
 800336e:	d121      	bne.n	80033b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800337a:	429a      	cmp	r2, r3
 800337c:	d11a      	bne.n	80033b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003384:	4013      	ands	r3, r2
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800338a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800338c:	4293      	cmp	r3, r2
 800338e:	d111      	bne.n	80033b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339a:	085b      	lsrs	r3, r3, #1
 800339c:	3b01      	subs	r3, #1
 800339e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d107      	bne.n	80033b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d001      	beq.n	80033b8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e000      	b.n	80033ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3718      	adds	r7, #24
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	40023800 	.word	0x40023800

080033c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e0cc      	b.n	8003576 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033dc:	4b68      	ldr	r3, [pc, #416]	@ (8003580 <HAL_RCC_ClockConfig+0x1b8>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0307 	and.w	r3, r3, #7
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d90c      	bls.n	8003404 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ea:	4b65      	ldr	r3, [pc, #404]	@ (8003580 <HAL_RCC_ClockConfig+0x1b8>)
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033f2:	4b63      	ldr	r3, [pc, #396]	@ (8003580 <HAL_RCC_ClockConfig+0x1b8>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0307 	and.w	r3, r3, #7
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d001      	beq.n	8003404 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e0b8      	b.n	8003576 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d020      	beq.n	8003452 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	2b00      	cmp	r3, #0
 800341a:	d005      	beq.n	8003428 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800341c:	4b59      	ldr	r3, [pc, #356]	@ (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	4a58      	ldr	r2, [pc, #352]	@ (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 8003422:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003426:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0308 	and.w	r3, r3, #8
 8003430:	2b00      	cmp	r3, #0
 8003432:	d005      	beq.n	8003440 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003434:	4b53      	ldr	r3, [pc, #332]	@ (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	4a52      	ldr	r2, [pc, #328]	@ (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 800343a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800343e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003440:	4b50      	ldr	r3, [pc, #320]	@ (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	494d      	ldr	r1, [pc, #308]	@ (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 800344e:	4313      	orrs	r3, r2
 8003450:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d044      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d107      	bne.n	8003476 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003466:	4b47      	ldr	r3, [pc, #284]	@ (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d119      	bne.n	80034a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e07f      	b.n	8003576 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2b02      	cmp	r3, #2
 800347c:	d003      	beq.n	8003486 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003482:	2b03      	cmp	r3, #3
 8003484:	d107      	bne.n	8003496 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003486:	4b3f      	ldr	r3, [pc, #252]	@ (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d109      	bne.n	80034a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e06f      	b.n	8003576 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003496:	4b3b      	ldr	r3, [pc, #236]	@ (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e067      	b.n	8003576 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034a6:	4b37      	ldr	r3, [pc, #220]	@ (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f023 0203 	bic.w	r2, r3, #3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	4934      	ldr	r1, [pc, #208]	@ (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034b8:	f7fe fce6 	bl	8001e88 <HAL_GetTick>
 80034bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034be:	e00a      	b.n	80034d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c0:	f7fe fce2 	bl	8001e88 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e04f      	b.n	8003576 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034d6:	4b2b      	ldr	r3, [pc, #172]	@ (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 020c 	and.w	r2, r3, #12
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d1eb      	bne.n	80034c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034e8:	4b25      	ldr	r3, [pc, #148]	@ (8003580 <HAL_RCC_ClockConfig+0x1b8>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0307 	and.w	r3, r3, #7
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d20c      	bcs.n	8003510 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f6:	4b22      	ldr	r3, [pc, #136]	@ (8003580 <HAL_RCC_ClockConfig+0x1b8>)
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034fe:	4b20      	ldr	r3, [pc, #128]	@ (8003580 <HAL_RCC_ClockConfig+0x1b8>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0307 	and.w	r3, r3, #7
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	429a      	cmp	r2, r3
 800350a:	d001      	beq.n	8003510 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e032      	b.n	8003576 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b00      	cmp	r3, #0
 800351a:	d008      	beq.n	800352e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800351c:	4b19      	ldr	r3, [pc, #100]	@ (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	4916      	ldr	r1, [pc, #88]	@ (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	4313      	orrs	r3, r2
 800352c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0308 	and.w	r3, r3, #8
 8003536:	2b00      	cmp	r3, #0
 8003538:	d009      	beq.n	800354e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800353a:	4b12      	ldr	r3, [pc, #72]	@ (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	490e      	ldr	r1, [pc, #56]	@ (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 800354a:	4313      	orrs	r3, r2
 800354c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800354e:	f000 f821 	bl	8003594 <HAL_RCC_GetSysClockFreq>
 8003552:	4602      	mov	r2, r0
 8003554:	4b0b      	ldr	r3, [pc, #44]	@ (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	091b      	lsrs	r3, r3, #4
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	490a      	ldr	r1, [pc, #40]	@ (8003588 <HAL_RCC_ClockConfig+0x1c0>)
 8003560:	5ccb      	ldrb	r3, [r1, r3]
 8003562:	fa22 f303 	lsr.w	r3, r2, r3
 8003566:	4a09      	ldr	r2, [pc, #36]	@ (800358c <HAL_RCC_ClockConfig+0x1c4>)
 8003568:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800356a:	4b09      	ldr	r3, [pc, #36]	@ (8003590 <HAL_RCC_ClockConfig+0x1c8>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4618      	mov	r0, r3
 8003570:	f7fe fc46 	bl	8001e00 <HAL_InitTick>

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	40023c00 	.word	0x40023c00
 8003584:	40023800 	.word	0x40023800
 8003588:	08005968 	.word	0x08005968
 800358c:	20000000 	.word	0x20000000
 8003590:	2000006c 	.word	0x2000006c

08003594 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003598:	b094      	sub	sp, #80	@ 0x50
 800359a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800359c:	2300      	movs	r3, #0
 800359e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80035a8:	2300      	movs	r3, #0
 80035aa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035ac:	4b79      	ldr	r3, [pc, #484]	@ (8003794 <HAL_RCC_GetSysClockFreq+0x200>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f003 030c 	and.w	r3, r3, #12
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d00d      	beq.n	80035d4 <HAL_RCC_GetSysClockFreq+0x40>
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	f200 80e1 	bhi.w	8003780 <HAL_RCC_GetSysClockFreq+0x1ec>
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <HAL_RCC_GetSysClockFreq+0x34>
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	d003      	beq.n	80035ce <HAL_RCC_GetSysClockFreq+0x3a>
 80035c6:	e0db      	b.n	8003780 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035c8:	4b73      	ldr	r3, [pc, #460]	@ (8003798 <HAL_RCC_GetSysClockFreq+0x204>)
 80035ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035cc:	e0db      	b.n	8003786 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035ce:	4b73      	ldr	r3, [pc, #460]	@ (800379c <HAL_RCC_GetSysClockFreq+0x208>)
 80035d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035d2:	e0d8      	b.n	8003786 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035d4:	4b6f      	ldr	r3, [pc, #444]	@ (8003794 <HAL_RCC_GetSysClockFreq+0x200>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035dc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035de:	4b6d      	ldr	r3, [pc, #436]	@ (8003794 <HAL_RCC_GetSysClockFreq+0x200>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d063      	beq.n	80036b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ea:	4b6a      	ldr	r3, [pc, #424]	@ (8003794 <HAL_RCC_GetSysClockFreq+0x200>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	099b      	lsrs	r3, r3, #6
 80035f0:	2200      	movs	r2, #0
 80035f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80035f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80035f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80035fe:	2300      	movs	r3, #0
 8003600:	637b      	str	r3, [r7, #52]	@ 0x34
 8003602:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003606:	4622      	mov	r2, r4
 8003608:	462b      	mov	r3, r5
 800360a:	f04f 0000 	mov.w	r0, #0
 800360e:	f04f 0100 	mov.w	r1, #0
 8003612:	0159      	lsls	r1, r3, #5
 8003614:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003618:	0150      	lsls	r0, r2, #5
 800361a:	4602      	mov	r2, r0
 800361c:	460b      	mov	r3, r1
 800361e:	4621      	mov	r1, r4
 8003620:	1a51      	subs	r1, r2, r1
 8003622:	6139      	str	r1, [r7, #16]
 8003624:	4629      	mov	r1, r5
 8003626:	eb63 0301 	sbc.w	r3, r3, r1
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	f04f 0200 	mov.w	r2, #0
 8003630:	f04f 0300 	mov.w	r3, #0
 8003634:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003638:	4659      	mov	r1, fp
 800363a:	018b      	lsls	r3, r1, #6
 800363c:	4651      	mov	r1, sl
 800363e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003642:	4651      	mov	r1, sl
 8003644:	018a      	lsls	r2, r1, #6
 8003646:	4651      	mov	r1, sl
 8003648:	ebb2 0801 	subs.w	r8, r2, r1
 800364c:	4659      	mov	r1, fp
 800364e:	eb63 0901 	sbc.w	r9, r3, r1
 8003652:	f04f 0200 	mov.w	r2, #0
 8003656:	f04f 0300 	mov.w	r3, #0
 800365a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800365e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003662:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003666:	4690      	mov	r8, r2
 8003668:	4699      	mov	r9, r3
 800366a:	4623      	mov	r3, r4
 800366c:	eb18 0303 	adds.w	r3, r8, r3
 8003670:	60bb      	str	r3, [r7, #8]
 8003672:	462b      	mov	r3, r5
 8003674:	eb49 0303 	adc.w	r3, r9, r3
 8003678:	60fb      	str	r3, [r7, #12]
 800367a:	f04f 0200 	mov.w	r2, #0
 800367e:	f04f 0300 	mov.w	r3, #0
 8003682:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003686:	4629      	mov	r1, r5
 8003688:	024b      	lsls	r3, r1, #9
 800368a:	4621      	mov	r1, r4
 800368c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003690:	4621      	mov	r1, r4
 8003692:	024a      	lsls	r2, r1, #9
 8003694:	4610      	mov	r0, r2
 8003696:	4619      	mov	r1, r3
 8003698:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800369a:	2200      	movs	r2, #0
 800369c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800369e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80036a4:	f7fc fd98 	bl	80001d8 <__aeabi_uldivmod>
 80036a8:	4602      	mov	r2, r0
 80036aa:	460b      	mov	r3, r1
 80036ac:	4613      	mov	r3, r2
 80036ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036b0:	e058      	b.n	8003764 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036b2:	4b38      	ldr	r3, [pc, #224]	@ (8003794 <HAL_RCC_GetSysClockFreq+0x200>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	099b      	lsrs	r3, r3, #6
 80036b8:	2200      	movs	r2, #0
 80036ba:	4618      	mov	r0, r3
 80036bc:	4611      	mov	r1, r2
 80036be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036c2:	623b      	str	r3, [r7, #32]
 80036c4:	2300      	movs	r3, #0
 80036c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80036c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036cc:	4642      	mov	r2, r8
 80036ce:	464b      	mov	r3, r9
 80036d0:	f04f 0000 	mov.w	r0, #0
 80036d4:	f04f 0100 	mov.w	r1, #0
 80036d8:	0159      	lsls	r1, r3, #5
 80036da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036de:	0150      	lsls	r0, r2, #5
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	4641      	mov	r1, r8
 80036e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80036ea:	4649      	mov	r1, r9
 80036ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80036f0:	f04f 0200 	mov.w	r2, #0
 80036f4:	f04f 0300 	mov.w	r3, #0
 80036f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003700:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003704:	ebb2 040a 	subs.w	r4, r2, sl
 8003708:	eb63 050b 	sbc.w	r5, r3, fp
 800370c:	f04f 0200 	mov.w	r2, #0
 8003710:	f04f 0300 	mov.w	r3, #0
 8003714:	00eb      	lsls	r3, r5, #3
 8003716:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800371a:	00e2      	lsls	r2, r4, #3
 800371c:	4614      	mov	r4, r2
 800371e:	461d      	mov	r5, r3
 8003720:	4643      	mov	r3, r8
 8003722:	18e3      	adds	r3, r4, r3
 8003724:	603b      	str	r3, [r7, #0]
 8003726:	464b      	mov	r3, r9
 8003728:	eb45 0303 	adc.w	r3, r5, r3
 800372c:	607b      	str	r3, [r7, #4]
 800372e:	f04f 0200 	mov.w	r2, #0
 8003732:	f04f 0300 	mov.w	r3, #0
 8003736:	e9d7 4500 	ldrd	r4, r5, [r7]
 800373a:	4629      	mov	r1, r5
 800373c:	028b      	lsls	r3, r1, #10
 800373e:	4621      	mov	r1, r4
 8003740:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003744:	4621      	mov	r1, r4
 8003746:	028a      	lsls	r2, r1, #10
 8003748:	4610      	mov	r0, r2
 800374a:	4619      	mov	r1, r3
 800374c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800374e:	2200      	movs	r2, #0
 8003750:	61bb      	str	r3, [r7, #24]
 8003752:	61fa      	str	r2, [r7, #28]
 8003754:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003758:	f7fc fd3e 	bl	80001d8 <__aeabi_uldivmod>
 800375c:	4602      	mov	r2, r0
 800375e:	460b      	mov	r3, r1
 8003760:	4613      	mov	r3, r2
 8003762:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003764:	4b0b      	ldr	r3, [pc, #44]	@ (8003794 <HAL_RCC_GetSysClockFreq+0x200>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	0c1b      	lsrs	r3, r3, #16
 800376a:	f003 0303 	and.w	r3, r3, #3
 800376e:	3301      	adds	r3, #1
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003774:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003776:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003778:	fbb2 f3f3 	udiv	r3, r2, r3
 800377c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800377e:	e002      	b.n	8003786 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003780:	4b05      	ldr	r3, [pc, #20]	@ (8003798 <HAL_RCC_GetSysClockFreq+0x204>)
 8003782:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003784:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003786:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003788:	4618      	mov	r0, r3
 800378a:	3750      	adds	r7, #80	@ 0x50
 800378c:	46bd      	mov	sp, r7
 800378e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003792:	bf00      	nop
 8003794:	40023800 	.word	0x40023800
 8003798:	00f42400 	.word	0x00f42400
 800379c:	007a1200 	.word	0x007a1200

080037a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037a4:	4b03      	ldr	r3, [pc, #12]	@ (80037b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80037a6:	681b      	ldr	r3, [r3, #0]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	20000000 	.word	0x20000000

080037b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037bc:	f7ff fff0 	bl	80037a0 <HAL_RCC_GetHCLKFreq>
 80037c0:	4602      	mov	r2, r0
 80037c2:	4b05      	ldr	r3, [pc, #20]	@ (80037d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	0a9b      	lsrs	r3, r3, #10
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	4903      	ldr	r1, [pc, #12]	@ (80037dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ce:	5ccb      	ldrb	r3, [r1, r3]
 80037d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40023800 	.word	0x40023800
 80037dc:	08005978 	.word	0x08005978

080037e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037e4:	f7ff ffdc 	bl	80037a0 <HAL_RCC_GetHCLKFreq>
 80037e8:	4602      	mov	r2, r0
 80037ea:	4b05      	ldr	r3, [pc, #20]	@ (8003800 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	0b5b      	lsrs	r3, r3, #13
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	4903      	ldr	r1, [pc, #12]	@ (8003804 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037f6:	5ccb      	ldrb	r3, [r1, r3]
 80037f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	40023800 	.word	0x40023800
 8003804:	08005978 	.word	0x08005978

08003808 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e041      	b.n	800389e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d106      	bne.n	8003834 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7fd fa8e 	bl	8000d50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2202      	movs	r2, #2
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3304      	adds	r3, #4
 8003844:	4619      	mov	r1, r3
 8003846:	4610      	mov	r0, r2
 8003848:	f000 fd22 	bl	8004290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
	...

080038a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d001      	beq.n	80038c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e03c      	b.n	800393a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2202      	movs	r2, #2
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a1e      	ldr	r2, [pc, #120]	@ (8003948 <HAL_TIM_Base_Start+0xa0>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d018      	beq.n	8003904 <HAL_TIM_Base_Start+0x5c>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038da:	d013      	beq.n	8003904 <HAL_TIM_Base_Start+0x5c>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a1a      	ldr	r2, [pc, #104]	@ (800394c <HAL_TIM_Base_Start+0xa4>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d00e      	beq.n	8003904 <HAL_TIM_Base_Start+0x5c>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a19      	ldr	r2, [pc, #100]	@ (8003950 <HAL_TIM_Base_Start+0xa8>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d009      	beq.n	8003904 <HAL_TIM_Base_Start+0x5c>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a17      	ldr	r2, [pc, #92]	@ (8003954 <HAL_TIM_Base_Start+0xac>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d004      	beq.n	8003904 <HAL_TIM_Base_Start+0x5c>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a16      	ldr	r2, [pc, #88]	@ (8003958 <HAL_TIM_Base_Start+0xb0>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d111      	bne.n	8003928 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 0307 	and.w	r3, r3, #7
 800390e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2b06      	cmp	r3, #6
 8003914:	d010      	beq.n	8003938 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f042 0201 	orr.w	r2, r2, #1
 8003924:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003926:	e007      	b.n	8003938 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f042 0201 	orr.w	r2, r2, #1
 8003936:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40010000 	.word	0x40010000
 800394c:	40000400 	.word	0x40000400
 8003950:	40000800 	.word	0x40000800
 8003954:	40000c00 	.word	0x40000c00
 8003958:	40014000 	.word	0x40014000

0800395c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6a1a      	ldr	r2, [r3, #32]
 800396a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800396e:	4013      	ands	r3, r2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10f      	bne.n	8003994 <HAL_TIM_Base_Stop+0x38>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6a1a      	ldr	r2, [r3, #32]
 800397a:	f240 4344 	movw	r3, #1092	@ 0x444
 800397e:	4013      	ands	r3, r2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d107      	bne.n	8003994 <HAL_TIM_Base_Stop+0x38>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 0201 	bic.w	r2, r2, #1
 8003992:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
	...

080039ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d001      	beq.n	80039c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e044      	b.n	8003a4e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0201 	orr.w	r2, r2, #1
 80039da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a1e      	ldr	r2, [pc, #120]	@ (8003a5c <HAL_TIM_Base_Start_IT+0xb0>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d018      	beq.n	8003a18 <HAL_TIM_Base_Start_IT+0x6c>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039ee:	d013      	beq.n	8003a18 <HAL_TIM_Base_Start_IT+0x6c>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a1a      	ldr	r2, [pc, #104]	@ (8003a60 <HAL_TIM_Base_Start_IT+0xb4>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d00e      	beq.n	8003a18 <HAL_TIM_Base_Start_IT+0x6c>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a19      	ldr	r2, [pc, #100]	@ (8003a64 <HAL_TIM_Base_Start_IT+0xb8>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d009      	beq.n	8003a18 <HAL_TIM_Base_Start_IT+0x6c>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a17      	ldr	r2, [pc, #92]	@ (8003a68 <HAL_TIM_Base_Start_IT+0xbc>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d004      	beq.n	8003a18 <HAL_TIM_Base_Start_IT+0x6c>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a16      	ldr	r2, [pc, #88]	@ (8003a6c <HAL_TIM_Base_Start_IT+0xc0>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d111      	bne.n	8003a3c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 0307 	and.w	r3, r3, #7
 8003a22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2b06      	cmp	r3, #6
 8003a28:	d010      	beq.n	8003a4c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f042 0201 	orr.w	r2, r2, #1
 8003a38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a3a:	e007      	b.n	8003a4c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0201 	orr.w	r2, r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3714      	adds	r7, #20
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	40010000 	.word	0x40010000
 8003a60:	40000400 	.word	0x40000400
 8003a64:	40000800 	.word	0x40000800
 8003a68:	40000c00 	.word	0x40000c00
 8003a6c:	40014000 	.word	0x40014000

08003a70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e041      	b.n	8003b06 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d106      	bne.n	8003a9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f839 	bl	8003b0e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3304      	adds	r3, #4
 8003aac:	4619      	mov	r1, r3
 8003aae:	4610      	mov	r0, r2
 8003ab0:	f000 fbee 	bl	8004290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b16:	bf00      	nop
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
	...

08003b24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d109      	bne.n	8003b48 <HAL_TIM_PWM_Start+0x24>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	bf14      	ite	ne
 8003b40:	2301      	movne	r3, #1
 8003b42:	2300      	moveq	r3, #0
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	e022      	b.n	8003b8e <HAL_TIM_PWM_Start+0x6a>
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	2b04      	cmp	r3, #4
 8003b4c:	d109      	bne.n	8003b62 <HAL_TIM_PWM_Start+0x3e>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	bf14      	ite	ne
 8003b5a:	2301      	movne	r3, #1
 8003b5c:	2300      	moveq	r3, #0
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	e015      	b.n	8003b8e <HAL_TIM_PWM_Start+0x6a>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	2b08      	cmp	r3, #8
 8003b66:	d109      	bne.n	8003b7c <HAL_TIM_PWM_Start+0x58>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	bf14      	ite	ne
 8003b74:	2301      	movne	r3, #1
 8003b76:	2300      	moveq	r3, #0
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	e008      	b.n	8003b8e <HAL_TIM_PWM_Start+0x6a>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	bf14      	ite	ne
 8003b88:	2301      	movne	r3, #1
 8003b8a:	2300      	moveq	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e068      	b.n	8003c68 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d104      	bne.n	8003ba6 <HAL_TIM_PWM_Start+0x82>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ba4:	e013      	b.n	8003bce <HAL_TIM_PWM_Start+0xaa>
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	2b04      	cmp	r3, #4
 8003baa:	d104      	bne.n	8003bb6 <HAL_TIM_PWM_Start+0x92>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bb4:	e00b      	b.n	8003bce <HAL_TIM_PWM_Start+0xaa>
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d104      	bne.n	8003bc6 <HAL_TIM_PWM_Start+0xa2>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bc4:	e003      	b.n	8003bce <HAL_TIM_PWM_Start+0xaa>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2202      	movs	r2, #2
 8003bca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	6839      	ldr	r1, [r7, #0]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 fe06 	bl	80047e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a23      	ldr	r2, [pc, #140]	@ (8003c70 <HAL_TIM_PWM_Start+0x14c>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d107      	bne.n	8003bf6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bf4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a1d      	ldr	r2, [pc, #116]	@ (8003c70 <HAL_TIM_PWM_Start+0x14c>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d018      	beq.n	8003c32 <HAL_TIM_PWM_Start+0x10e>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c08:	d013      	beq.n	8003c32 <HAL_TIM_PWM_Start+0x10e>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a19      	ldr	r2, [pc, #100]	@ (8003c74 <HAL_TIM_PWM_Start+0x150>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d00e      	beq.n	8003c32 <HAL_TIM_PWM_Start+0x10e>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a17      	ldr	r2, [pc, #92]	@ (8003c78 <HAL_TIM_PWM_Start+0x154>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d009      	beq.n	8003c32 <HAL_TIM_PWM_Start+0x10e>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a16      	ldr	r2, [pc, #88]	@ (8003c7c <HAL_TIM_PWM_Start+0x158>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d004      	beq.n	8003c32 <HAL_TIM_PWM_Start+0x10e>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a14      	ldr	r2, [pc, #80]	@ (8003c80 <HAL_TIM_PWM_Start+0x15c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d111      	bne.n	8003c56 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2b06      	cmp	r3, #6
 8003c42:	d010      	beq.n	8003c66 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0201 	orr.w	r2, r2, #1
 8003c52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c54:	e007      	b.n	8003c66 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f042 0201 	orr.w	r2, r2, #1
 8003c64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40010000 	.word	0x40010000
 8003c74:	40000400 	.word	0x40000400
 8003c78:	40000800 	.word	0x40000800
 8003c7c:	40000c00 	.word	0x40000c00
 8003c80:	40014000 	.word	0x40014000

08003c84 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2200      	movs	r2, #0
 8003c94:	6839      	ldr	r1, [r7, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 fda6 	bl	80047e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a29      	ldr	r2, [pc, #164]	@ (8003d48 <HAL_TIM_PWM_Stop+0xc4>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d117      	bne.n	8003cd6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6a1a      	ldr	r2, [r3, #32]
 8003cac:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10f      	bne.n	8003cd6 <HAL_TIM_PWM_Stop+0x52>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6a1a      	ldr	r2, [r3, #32]
 8003cbc:	f240 4344 	movw	r3, #1092	@ 0x444
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d107      	bne.n	8003cd6 <HAL_TIM_PWM_Stop+0x52>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003cd4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6a1a      	ldr	r2, [r3, #32]
 8003cdc:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10f      	bne.n	8003d06 <HAL_TIM_PWM_Stop+0x82>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6a1a      	ldr	r2, [r3, #32]
 8003cec:	f240 4344 	movw	r3, #1092	@ 0x444
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d107      	bne.n	8003d06 <HAL_TIM_PWM_Stop+0x82>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0201 	bic.w	r2, r2, #1
 8003d04:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d104      	bne.n	8003d16 <HAL_TIM_PWM_Stop+0x92>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d14:	e013      	b.n	8003d3e <HAL_TIM_PWM_Stop+0xba>
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	2b04      	cmp	r3, #4
 8003d1a:	d104      	bne.n	8003d26 <HAL_TIM_PWM_Stop+0xa2>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d24:	e00b      	b.n	8003d3e <HAL_TIM_PWM_Stop+0xba>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d104      	bne.n	8003d36 <HAL_TIM_PWM_Stop+0xb2>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d34:	e003      	b.n	8003d3e <HAL_TIM_PWM_Stop+0xba>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	40010000 	.word	0x40010000

08003d4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d020      	beq.n	8003db0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d01b      	beq.n	8003db0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f06f 0202 	mvn.w	r2, #2
 8003d80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	f003 0303 	and.w	r3, r3, #3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 fa5b 	bl	8004252 <HAL_TIM_IC_CaptureCallback>
 8003d9c:	e005      	b.n	8003daa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 fa4d 	bl	800423e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 fa5e 	bl	8004266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	f003 0304 	and.w	r3, r3, #4
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d020      	beq.n	8003dfc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d01b      	beq.n	8003dfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f06f 0204 	mvn.w	r2, #4
 8003dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2202      	movs	r2, #2
 8003dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 fa35 	bl	8004252 <HAL_TIM_IC_CaptureCallback>
 8003de8:	e005      	b.n	8003df6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 fa27 	bl	800423e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 fa38 	bl	8004266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	f003 0308 	and.w	r3, r3, #8
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d020      	beq.n	8003e48 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f003 0308 	and.w	r3, r3, #8
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d01b      	beq.n	8003e48 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f06f 0208 	mvn.w	r2, #8
 8003e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2204      	movs	r2, #4
 8003e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	f003 0303 	and.w	r3, r3, #3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 fa0f 	bl	8004252 <HAL_TIM_IC_CaptureCallback>
 8003e34:	e005      	b.n	8003e42 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 fa01 	bl	800423e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 fa12 	bl	8004266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	f003 0310 	and.w	r3, r3, #16
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d020      	beq.n	8003e94 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f003 0310 	and.w	r3, r3, #16
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d01b      	beq.n	8003e94 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f06f 0210 	mvn.w	r2, #16
 8003e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2208      	movs	r2, #8
 8003e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f9e9 	bl	8004252 <HAL_TIM_IC_CaptureCallback>
 8003e80:	e005      	b.n	8003e8e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f9db 	bl	800423e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 f9ec 	bl	8004266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00c      	beq.n	8003eb8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d007      	beq.n	8003eb8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f06f 0201 	mvn.w	r2, #1
 8003eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7fd fa37 	bl	8001326 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00c      	beq.n	8003edc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d007      	beq.n	8003edc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 fd76 	bl	80049c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00c      	beq.n	8003f00 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d007      	beq.n	8003f00 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f9bd 	bl	800427a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	f003 0320 	and.w	r3, r3, #32
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00c      	beq.n	8003f24 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f003 0320 	and.w	r3, r3, #32
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d007      	beq.n	8003f24 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f06f 0220 	mvn.w	r2, #32
 8003f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 fd48 	bl	80049b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f24:	bf00      	nop
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d101      	bne.n	8003f4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f46:	2302      	movs	r3, #2
 8003f48:	e0ae      	b.n	80040a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2b0c      	cmp	r3, #12
 8003f56:	f200 809f 	bhi.w	8004098 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003f5a:	a201      	add	r2, pc, #4	@ (adr r2, 8003f60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f60:	08003f95 	.word	0x08003f95
 8003f64:	08004099 	.word	0x08004099
 8003f68:	08004099 	.word	0x08004099
 8003f6c:	08004099 	.word	0x08004099
 8003f70:	08003fd5 	.word	0x08003fd5
 8003f74:	08004099 	.word	0x08004099
 8003f78:	08004099 	.word	0x08004099
 8003f7c:	08004099 	.word	0x08004099
 8003f80:	08004017 	.word	0x08004017
 8003f84:	08004099 	.word	0x08004099
 8003f88:	08004099 	.word	0x08004099
 8003f8c:	08004099 	.word	0x08004099
 8003f90:	08004057 	.word	0x08004057
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68b9      	ldr	r1, [r7, #8]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 f9fe 	bl	800439c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	699a      	ldr	r2, [r3, #24]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f042 0208 	orr.w	r2, r2, #8
 8003fae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	699a      	ldr	r2, [r3, #24]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 0204 	bic.w	r2, r2, #4
 8003fbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6999      	ldr	r1, [r3, #24]
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	691a      	ldr	r2, [r3, #16]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	619a      	str	r2, [r3, #24]
      break;
 8003fd2:	e064      	b.n	800409e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68b9      	ldr	r1, [r7, #8]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 fa44 	bl	8004468 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	699a      	ldr	r2, [r3, #24]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	699a      	ldr	r2, [r3, #24]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ffe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6999      	ldr	r1, [r3, #24]
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	021a      	lsls	r2, r3, #8
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	619a      	str	r2, [r3, #24]
      break;
 8004014:	e043      	b.n	800409e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68b9      	ldr	r1, [r7, #8]
 800401c:	4618      	mov	r0, r3
 800401e:	f000 fa8f 	bl	8004540 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	69da      	ldr	r2, [r3, #28]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f042 0208 	orr.w	r2, r2, #8
 8004030:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	69da      	ldr	r2, [r3, #28]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0204 	bic.w	r2, r2, #4
 8004040:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	69d9      	ldr	r1, [r3, #28]
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	691a      	ldr	r2, [r3, #16]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	430a      	orrs	r2, r1
 8004052:	61da      	str	r2, [r3, #28]
      break;
 8004054:	e023      	b.n	800409e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68b9      	ldr	r1, [r7, #8]
 800405c:	4618      	mov	r0, r3
 800405e:	f000 fad9 	bl	8004614 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	69da      	ldr	r2, [r3, #28]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004070:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	69da      	ldr	r2, [r3, #28]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004080:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	69d9      	ldr	r1, [r3, #28]
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	021a      	lsls	r2, r3, #8
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	61da      	str	r2, [r3, #28]
      break;
 8004096:	e002      	b.n	800409e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	75fb      	strb	r3, [r7, #23]
      break;
 800409c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80040a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3718      	adds	r7, #24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040ba:	2300      	movs	r3, #0
 80040bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d101      	bne.n	80040cc <HAL_TIM_ConfigClockSource+0x1c>
 80040c8:	2302      	movs	r3, #2
 80040ca:	e0b4      	b.n	8004236 <HAL_TIM_ConfigClockSource+0x186>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2202      	movs	r2, #2
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80040ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004104:	d03e      	beq.n	8004184 <HAL_TIM_ConfigClockSource+0xd4>
 8004106:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800410a:	f200 8087 	bhi.w	800421c <HAL_TIM_ConfigClockSource+0x16c>
 800410e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004112:	f000 8086 	beq.w	8004222 <HAL_TIM_ConfigClockSource+0x172>
 8004116:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800411a:	d87f      	bhi.n	800421c <HAL_TIM_ConfigClockSource+0x16c>
 800411c:	2b70      	cmp	r3, #112	@ 0x70
 800411e:	d01a      	beq.n	8004156 <HAL_TIM_ConfigClockSource+0xa6>
 8004120:	2b70      	cmp	r3, #112	@ 0x70
 8004122:	d87b      	bhi.n	800421c <HAL_TIM_ConfigClockSource+0x16c>
 8004124:	2b60      	cmp	r3, #96	@ 0x60
 8004126:	d050      	beq.n	80041ca <HAL_TIM_ConfigClockSource+0x11a>
 8004128:	2b60      	cmp	r3, #96	@ 0x60
 800412a:	d877      	bhi.n	800421c <HAL_TIM_ConfigClockSource+0x16c>
 800412c:	2b50      	cmp	r3, #80	@ 0x50
 800412e:	d03c      	beq.n	80041aa <HAL_TIM_ConfigClockSource+0xfa>
 8004130:	2b50      	cmp	r3, #80	@ 0x50
 8004132:	d873      	bhi.n	800421c <HAL_TIM_ConfigClockSource+0x16c>
 8004134:	2b40      	cmp	r3, #64	@ 0x40
 8004136:	d058      	beq.n	80041ea <HAL_TIM_ConfigClockSource+0x13a>
 8004138:	2b40      	cmp	r3, #64	@ 0x40
 800413a:	d86f      	bhi.n	800421c <HAL_TIM_ConfigClockSource+0x16c>
 800413c:	2b30      	cmp	r3, #48	@ 0x30
 800413e:	d064      	beq.n	800420a <HAL_TIM_ConfigClockSource+0x15a>
 8004140:	2b30      	cmp	r3, #48	@ 0x30
 8004142:	d86b      	bhi.n	800421c <HAL_TIM_ConfigClockSource+0x16c>
 8004144:	2b20      	cmp	r3, #32
 8004146:	d060      	beq.n	800420a <HAL_TIM_ConfigClockSource+0x15a>
 8004148:	2b20      	cmp	r3, #32
 800414a:	d867      	bhi.n	800421c <HAL_TIM_ConfigClockSource+0x16c>
 800414c:	2b00      	cmp	r3, #0
 800414e:	d05c      	beq.n	800420a <HAL_TIM_ConfigClockSource+0x15a>
 8004150:	2b10      	cmp	r3, #16
 8004152:	d05a      	beq.n	800420a <HAL_TIM_ConfigClockSource+0x15a>
 8004154:	e062      	b.n	800421c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004166:	f000 fb1f 	bl	80047a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004178:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68ba      	ldr	r2, [r7, #8]
 8004180:	609a      	str	r2, [r3, #8]
      break;
 8004182:	e04f      	b.n	8004224 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004194:	f000 fb08 	bl	80047a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689a      	ldr	r2, [r3, #8]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80041a6:	609a      	str	r2, [r3, #8]
      break;
 80041a8:	e03c      	b.n	8004224 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041b6:	461a      	mov	r2, r3
 80041b8:	f000 fa7c 	bl	80046b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2150      	movs	r1, #80	@ 0x50
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 fad5 	bl	8004772 <TIM_ITRx_SetConfig>
      break;
 80041c8:	e02c      	b.n	8004224 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041d6:	461a      	mov	r2, r3
 80041d8:	f000 fa9b 	bl	8004712 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2160      	movs	r1, #96	@ 0x60
 80041e2:	4618      	mov	r0, r3
 80041e4:	f000 fac5 	bl	8004772 <TIM_ITRx_SetConfig>
      break;
 80041e8:	e01c      	b.n	8004224 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041f6:	461a      	mov	r2, r3
 80041f8:	f000 fa5c 	bl	80046b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2140      	movs	r1, #64	@ 0x40
 8004202:	4618      	mov	r0, r3
 8004204:	f000 fab5 	bl	8004772 <TIM_ITRx_SetConfig>
      break;
 8004208:	e00c      	b.n	8004224 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4619      	mov	r1, r3
 8004214:	4610      	mov	r0, r2
 8004216:	f000 faac 	bl	8004772 <TIM_ITRx_SetConfig>
      break;
 800421a:	e003      	b.n	8004224 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	73fb      	strb	r3, [r7, #15]
      break;
 8004220:	e000      	b.n	8004224 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004222:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004234:	7bfb      	ldrb	r3, [r7, #15]
}
 8004236:	4618      	mov	r0, r3
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800423e:	b480      	push	{r7}
 8004240:	b083      	sub	sp, #12
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004252:	b480      	push	{r7}
 8004254:	b083      	sub	sp, #12
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800425a:	bf00      	nop
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004266:	b480      	push	{r7}
 8004268:	b083      	sub	sp, #12
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800427a:	b480      	push	{r7}
 800427c:	b083      	sub	sp, #12
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
	...

08004290 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a37      	ldr	r2, [pc, #220]	@ (8004380 <TIM_Base_SetConfig+0xf0>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d00f      	beq.n	80042c8 <TIM_Base_SetConfig+0x38>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042ae:	d00b      	beq.n	80042c8 <TIM_Base_SetConfig+0x38>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a34      	ldr	r2, [pc, #208]	@ (8004384 <TIM_Base_SetConfig+0xf4>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d007      	beq.n	80042c8 <TIM_Base_SetConfig+0x38>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a33      	ldr	r2, [pc, #204]	@ (8004388 <TIM_Base_SetConfig+0xf8>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d003      	beq.n	80042c8 <TIM_Base_SetConfig+0x38>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a32      	ldr	r2, [pc, #200]	@ (800438c <TIM_Base_SetConfig+0xfc>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d108      	bne.n	80042da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a28      	ldr	r2, [pc, #160]	@ (8004380 <TIM_Base_SetConfig+0xf0>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d01b      	beq.n	800431a <TIM_Base_SetConfig+0x8a>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042e8:	d017      	beq.n	800431a <TIM_Base_SetConfig+0x8a>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a25      	ldr	r2, [pc, #148]	@ (8004384 <TIM_Base_SetConfig+0xf4>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d013      	beq.n	800431a <TIM_Base_SetConfig+0x8a>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a24      	ldr	r2, [pc, #144]	@ (8004388 <TIM_Base_SetConfig+0xf8>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d00f      	beq.n	800431a <TIM_Base_SetConfig+0x8a>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a23      	ldr	r2, [pc, #140]	@ (800438c <TIM_Base_SetConfig+0xfc>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d00b      	beq.n	800431a <TIM_Base_SetConfig+0x8a>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a22      	ldr	r2, [pc, #136]	@ (8004390 <TIM_Base_SetConfig+0x100>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d007      	beq.n	800431a <TIM_Base_SetConfig+0x8a>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a21      	ldr	r2, [pc, #132]	@ (8004394 <TIM_Base_SetConfig+0x104>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d003      	beq.n	800431a <TIM_Base_SetConfig+0x8a>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a20      	ldr	r2, [pc, #128]	@ (8004398 <TIM_Base_SetConfig+0x108>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d108      	bne.n	800432c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004320:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	4313      	orrs	r3, r2
 800432a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	4313      	orrs	r3, r2
 8004338:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	689a      	ldr	r2, [r3, #8]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a0c      	ldr	r2, [pc, #48]	@ (8004380 <TIM_Base_SetConfig+0xf0>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d103      	bne.n	800435a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	691a      	ldr	r2, [r3, #16]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f043 0204 	orr.w	r2, r3, #4
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	601a      	str	r2, [r3, #0]
}
 8004372:	bf00      	nop
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	40010000 	.word	0x40010000
 8004384:	40000400 	.word	0x40000400
 8004388:	40000800 	.word	0x40000800
 800438c:	40000c00 	.word	0x40000c00
 8004390:	40014000 	.word	0x40014000
 8004394:	40014400 	.word	0x40014400
 8004398:	40014800 	.word	0x40014800

0800439c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800439c:	b480      	push	{r7}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	f023 0201 	bic.w	r2, r3, #1
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f023 0303 	bic.w	r3, r3, #3
 80043d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	4313      	orrs	r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f023 0302 	bic.w	r3, r3, #2
 80043e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a1c      	ldr	r2, [pc, #112]	@ (8004464 <TIM_OC1_SetConfig+0xc8>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d10c      	bne.n	8004412 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	f023 0308 	bic.w	r3, r3, #8
 80043fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	4313      	orrs	r3, r2
 8004408:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f023 0304 	bic.w	r3, r3, #4
 8004410:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a13      	ldr	r2, [pc, #76]	@ (8004464 <TIM_OC1_SetConfig+0xc8>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d111      	bne.n	800443e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004420:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004428:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	4313      	orrs	r3, r2
 8004432:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	4313      	orrs	r3, r2
 800443c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	621a      	str	r2, [r3, #32]
}
 8004458:	bf00      	nop
 800445a:	371c      	adds	r7, #28
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr
 8004464:	40010000 	.word	0x40010000

08004468 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004468:	b480      	push	{r7}
 800446a:	b087      	sub	sp, #28
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	f023 0210 	bic.w	r2, r3, #16
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800449e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	021b      	lsls	r3, r3, #8
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	f023 0320 	bic.w	r3, r3, #32
 80044b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	4313      	orrs	r3, r2
 80044be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a1e      	ldr	r2, [pc, #120]	@ (800453c <TIM_OC2_SetConfig+0xd4>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d10d      	bne.n	80044e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	011b      	lsls	r3, r3, #4
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	4313      	orrs	r3, r2
 80044da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a15      	ldr	r2, [pc, #84]	@ (800453c <TIM_OC2_SetConfig+0xd4>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d113      	bne.n	8004514 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80044f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80044fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	4313      	orrs	r3, r2
 8004506:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	4313      	orrs	r3, r2
 8004512:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	685a      	ldr	r2, [r3, #4]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	621a      	str	r2, [r3, #32]
}
 800452e:	bf00      	nop
 8004530:	371c      	adds	r7, #28
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	40010000 	.word	0x40010000

08004540 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004540:	b480      	push	{r7}
 8004542:	b087      	sub	sp, #28
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800456e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f023 0303 	bic.w	r3, r3, #3
 8004576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	4313      	orrs	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004588:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	021b      	lsls	r3, r3, #8
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	4313      	orrs	r3, r2
 8004594:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a1d      	ldr	r2, [pc, #116]	@ (8004610 <TIM_OC3_SetConfig+0xd0>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d10d      	bne.n	80045ba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80045a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	021b      	lsls	r3, r3, #8
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80045b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a14      	ldr	r2, [pc, #80]	@ (8004610 <TIM_OC3_SetConfig+0xd0>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d113      	bne.n	80045ea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80045d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	011b      	lsls	r3, r3, #4
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	4313      	orrs	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	011b      	lsls	r3, r3, #4
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685a      	ldr	r2, [r3, #4]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	621a      	str	r2, [r3, #32]
}
 8004604:	bf00      	nop
 8004606:	371c      	adds	r7, #28
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	40010000 	.word	0x40010000

08004614 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004614:	b480      	push	{r7}
 8004616:	b087      	sub	sp, #28
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800464a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	021b      	lsls	r3, r3, #8
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	4313      	orrs	r3, r2
 8004656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800465e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	031b      	lsls	r3, r3, #12
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	4313      	orrs	r3, r2
 800466a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a10      	ldr	r2, [pc, #64]	@ (80046b0 <TIM_OC4_SetConfig+0x9c>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d109      	bne.n	8004688 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800467a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	019b      	lsls	r3, r3, #6
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	4313      	orrs	r3, r2
 8004686:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	621a      	str	r2, [r3, #32]
}
 80046a2:	bf00      	nop
 80046a4:	371c      	adds	r7, #28
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	40010000 	.word	0x40010000

080046b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b087      	sub	sp, #28
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	f023 0201 	bic.w	r2, r3, #1
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80046de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f023 030a 	bic.w	r3, r3, #10
 80046f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	621a      	str	r2, [r3, #32]
}
 8004706:	bf00      	nop
 8004708:	371c      	adds	r7, #28
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004712:	b480      	push	{r7}
 8004714:	b087      	sub	sp, #28
 8004716:	af00      	add	r7, sp, #0
 8004718:	60f8      	str	r0, [r7, #12]
 800471a:	60b9      	str	r1, [r7, #8]
 800471c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	f023 0210 	bic.w	r2, r3, #16
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800473c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	031b      	lsls	r3, r3, #12
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	4313      	orrs	r3, r2
 8004746:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800474e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	011b      	lsls	r3, r3, #4
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	4313      	orrs	r3, r2
 8004758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	621a      	str	r2, [r3, #32]
}
 8004766:	bf00      	nop
 8004768:	371c      	adds	r7, #28
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004772:	b480      	push	{r7}
 8004774:	b085      	sub	sp, #20
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
 800477a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004788:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4313      	orrs	r3, r2
 8004790:	f043 0307 	orr.w	r3, r3, #7
 8004794:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	609a      	str	r2, [r3, #8]
}
 800479c:	bf00      	nop
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b087      	sub	sp, #28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
 80047b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80047c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	021a      	lsls	r2, r3, #8
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	431a      	orrs	r2, r3
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	609a      	str	r2, [r3, #8]
}
 80047dc:	bf00      	nop
 80047de:	371c      	adds	r7, #28
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b087      	sub	sp, #28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	f003 031f 	and.w	r3, r3, #31
 80047fa:	2201      	movs	r2, #1
 80047fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004800:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6a1a      	ldr	r2, [r3, #32]
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	43db      	mvns	r3, r3
 800480a:	401a      	ands	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6a1a      	ldr	r2, [r3, #32]
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	f003 031f 	and.w	r3, r3, #31
 800481a:	6879      	ldr	r1, [r7, #4]
 800481c:	fa01 f303 	lsl.w	r3, r1, r3
 8004820:	431a      	orrs	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	621a      	str	r2, [r3, #32]
}
 8004826:	bf00      	nop
 8004828:	371c      	adds	r7, #28
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
	...

08004834 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004844:	2b01      	cmp	r3, #1
 8004846:	d101      	bne.n	800484c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004848:	2302      	movs	r3, #2
 800484a:	e050      	b.n	80048ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2202      	movs	r2, #2
 8004858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004872:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	4313      	orrs	r3, r2
 800487c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a1c      	ldr	r2, [pc, #112]	@ (80048fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d018      	beq.n	80048c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004898:	d013      	beq.n	80048c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a18      	ldr	r2, [pc, #96]	@ (8004900 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d00e      	beq.n	80048c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a16      	ldr	r2, [pc, #88]	@ (8004904 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d009      	beq.n	80048c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a15      	ldr	r2, [pc, #84]	@ (8004908 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d004      	beq.n	80048c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a13      	ldr	r2, [pc, #76]	@ (800490c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d10c      	bne.n	80048dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40010000 	.word	0x40010000
 8004900:	40000400 	.word	0x40000400
 8004904:	40000800 	.word	0x40000800
 8004908:	40000c00 	.word	0x40000c00
 800490c:	40014000 	.word	0x40014000

08004910 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800491a:	2300      	movs	r3, #0
 800491c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004924:	2b01      	cmp	r3, #1
 8004926:	d101      	bne.n	800492c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004928:	2302      	movs	r3, #2
 800492a:	e03d      	b.n	80049a8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	4313      	orrs	r3, r2
 8004940:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	4313      	orrs	r3, r2
 800494e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	4313      	orrs	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4313      	orrs	r3, r2
 800496a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	4313      	orrs	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	4313      	orrs	r3, r2
 8004986:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	69db      	ldr	r3, [r3, #28]
 8004992:	4313      	orrs	r3, r2
 8004994:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e042      	b.n	8004a74 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d106      	bne.n	8004a08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7fc faae 	bl	8000f64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2224      	movs	r2, #36	@ 0x24
 8004a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68da      	ldr	r2, [r3, #12]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 fcef 	bl	8005404 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	691a      	ldr	r2, [r3, #16]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	695a      	ldr	r2, [r3, #20]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68da      	ldr	r2, [r3, #12]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2220      	movs	r2, #32
 8004a68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3708      	adds	r7, #8
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	4613      	mov	r3, r2
 8004a88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b20      	cmp	r3, #32
 8004a94:	d112      	bne.n	8004abc <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d002      	beq.n	8004aa2 <HAL_UART_Receive_IT+0x26>
 8004a9c:	88fb      	ldrh	r3, [r7, #6]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e00b      	b.n	8004abe <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004aac:	88fb      	ldrh	r3, [r7, #6]
 8004aae:	461a      	mov	r2, r3
 8004ab0:	68b9      	ldr	r1, [r7, #8]
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f000 fad2 	bl	800505c <UART_Start_Receive_IT>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	e000      	b.n	8004abe <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004abc:	2302      	movs	r3, #2
  }
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
	...

08004ac8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b0ba      	sub	sp, #232	@ 0xe8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004aee:	2300      	movs	r3, #0
 8004af0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004af4:	2300      	movs	r3, #0
 8004af6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004afe:	f003 030f 	and.w	r3, r3, #15
 8004b02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004b06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10f      	bne.n	8004b2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b12:	f003 0320 	and.w	r3, r3, #32
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d009      	beq.n	8004b2e <HAL_UART_IRQHandler+0x66>
 8004b1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b1e:	f003 0320 	and.w	r3, r3, #32
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d003      	beq.n	8004b2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 fbae 	bl	8005288 <UART_Receive_IT>
      return;
 8004b2c:	e273      	b.n	8005016 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004b2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f000 80de 	beq.w	8004cf4 <HAL_UART_IRQHandler+0x22c>
 8004b38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b3c:	f003 0301 	and.w	r3, r3, #1
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d106      	bne.n	8004b52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b48:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 80d1 	beq.w	8004cf4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00b      	beq.n	8004b76 <HAL_UART_IRQHandler+0xae>
 8004b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d005      	beq.n	8004b76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b6e:	f043 0201 	orr.w	r2, r3, #1
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b7a:	f003 0304 	and.w	r3, r3, #4
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00b      	beq.n	8004b9a <HAL_UART_IRQHandler+0xd2>
 8004b82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d005      	beq.n	8004b9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b92:	f043 0202 	orr.w	r2, r3, #2
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00b      	beq.n	8004bbe <HAL_UART_IRQHandler+0xf6>
 8004ba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d005      	beq.n	8004bbe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bb6:	f043 0204 	orr.w	r2, r3, #4
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bc2:	f003 0308 	and.w	r3, r3, #8
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d011      	beq.n	8004bee <HAL_UART_IRQHandler+0x126>
 8004bca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bce:	f003 0320 	and.w	r3, r3, #32
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d105      	bne.n	8004be2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004bd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d005      	beq.n	8004bee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004be6:	f043 0208 	orr.w	r2, r3, #8
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f000 820a 	beq.w	800500c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bfc:	f003 0320 	and.w	r3, r3, #32
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d008      	beq.n	8004c16 <HAL_UART_IRQHandler+0x14e>
 8004c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c08:	f003 0320 	and.w	r3, r3, #32
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d002      	beq.n	8004c16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 fb39 	bl	8005288 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c20:	2b40      	cmp	r3, #64	@ 0x40
 8004c22:	bf0c      	ite	eq
 8004c24:	2301      	moveq	r3, #1
 8004c26:	2300      	movne	r3, #0
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c32:	f003 0308 	and.w	r3, r3, #8
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d103      	bne.n	8004c42 <HAL_UART_IRQHandler+0x17a>
 8004c3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d04f      	beq.n	8004ce2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 fa44 	bl	80050d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c52:	2b40      	cmp	r3, #64	@ 0x40
 8004c54:	d141      	bne.n	8004cda <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	3314      	adds	r3, #20
 8004c5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004c64:	e853 3f00 	ldrex	r3, [r3]
 8004c68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004c6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3314      	adds	r3, #20
 8004c7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004c82:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004c86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004c8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004c92:	e841 2300 	strex	r3, r2, [r1]
 8004c96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004c9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1d9      	bne.n	8004c56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d013      	beq.n	8004cd2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cae:	4a8a      	ldr	r2, [pc, #552]	@ (8004ed8 <HAL_UART_IRQHandler+0x410>)
 8004cb0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fd fa97 	bl	80021ea <HAL_DMA_Abort_IT>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d016      	beq.n	8004cf0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004ccc:	4610      	mov	r0, r2
 8004cce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cd0:	e00e      	b.n	8004cf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f9ac 	bl	8005030 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cd8:	e00a      	b.n	8004cf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f9a8 	bl	8005030 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ce0:	e006      	b.n	8004cf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f9a4 	bl	8005030 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004cee:	e18d      	b.n	800500c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf0:	bf00      	nop
    return;
 8004cf2:	e18b      	b.n	800500c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	f040 8167 	bne.w	8004fcc <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d02:	f003 0310 	and.w	r3, r3, #16
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f000 8160 	beq.w	8004fcc <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d10:	f003 0310 	and.w	r3, r3, #16
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f000 8159 	beq.w	8004fcc <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	60bb      	str	r3, [r7, #8]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	60bb      	str	r3, [r7, #8]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	60bb      	str	r3, [r7, #8]
 8004d2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d3a:	2b40      	cmp	r3, #64	@ 0x40
 8004d3c:	f040 80ce 	bne.w	8004edc <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f000 80a9 	beq.w	8004ea8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	f080 80a2 	bcs.w	8004ea8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d6a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d70:	69db      	ldr	r3, [r3, #28]
 8004d72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d76:	f000 8088 	beq.w	8004e8a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	330c      	adds	r3, #12
 8004d80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004d88:	e853 3f00 	ldrex	r3, [r3]
 8004d8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004d90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	330c      	adds	r3, #12
 8004da2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004da6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004daa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004db2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004db6:	e841 2300 	strex	r3, r2, [r1]
 8004dba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004dbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1d9      	bne.n	8004d7a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	3314      	adds	r3, #20
 8004dcc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004dd0:	e853 3f00 	ldrex	r3, [r3]
 8004dd4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004dd6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004dd8:	f023 0301 	bic.w	r3, r3, #1
 8004ddc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	3314      	adds	r3, #20
 8004de6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004dea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004dee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004df2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004df6:	e841 2300 	strex	r3, r2, [r1]
 8004dfa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004dfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1e1      	bne.n	8004dc6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	3314      	adds	r3, #20
 8004e08:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e0c:	e853 3f00 	ldrex	r3, [r3]
 8004e10:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004e12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	3314      	adds	r3, #20
 8004e22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004e26:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004e28:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004e2c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004e2e:	e841 2300 	strex	r3, r2, [r1]
 8004e32:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004e34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1e3      	bne.n	8004e02 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	330c      	adds	r3, #12
 8004e4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e52:	e853 3f00 	ldrex	r3, [r3]
 8004e56:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004e58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e5a:	f023 0310 	bic.w	r3, r3, #16
 8004e5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	330c      	adds	r3, #12
 8004e68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004e6c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004e6e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e70:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e72:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e74:	e841 2300 	strex	r3, r2, [r1]
 8004e78:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004e7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1e3      	bne.n	8004e48 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7fd f940 	bl	800210a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2202      	movs	r2, #2
 8004e8e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 f8cf 	bl	8005044 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004ea6:	e0b3      	b.n	8005010 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004eac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	f040 80ad 	bne.w	8005010 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eba:	69db      	ldr	r3, [r3, #28]
 8004ebc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ec0:	f040 80a6 	bne.w	8005010 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ece:	4619      	mov	r1, r3
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 f8b7 	bl	8005044 <HAL_UARTEx_RxEventCallback>
      return;
 8004ed6:	e09b      	b.n	8005010 <HAL_UART_IRQHandler+0x548>
 8004ed8:	08005197 	.word	0x08005197
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f000 808e 	beq.w	8005014 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8004ef8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 8089 	beq.w	8005014 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	330c      	adds	r3, #12
 8004f08:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f0c:	e853 3f00 	ldrex	r3, [r3]
 8004f10:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	330c      	adds	r3, #12
 8004f22:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004f26:	647a      	str	r2, [r7, #68]	@ 0x44
 8004f28:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f2e:	e841 2300 	strex	r3, r2, [r1]
 8004f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1e3      	bne.n	8004f02 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	3314      	adds	r3, #20
 8004f40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f44:	e853 3f00 	ldrex	r3, [r3]
 8004f48:	623b      	str	r3, [r7, #32]
   return(result);
 8004f4a:	6a3b      	ldr	r3, [r7, #32]
 8004f4c:	f023 0301 	bic.w	r3, r3, #1
 8004f50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	3314      	adds	r3, #20
 8004f5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004f5e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f66:	e841 2300 	strex	r3, r2, [r1]
 8004f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1e3      	bne.n	8004f3a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2220      	movs	r2, #32
 8004f76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	330c      	adds	r3, #12
 8004f86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	e853 3f00 	ldrex	r3, [r3]
 8004f8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f023 0310 	bic.w	r3, r3, #16
 8004f96:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	330c      	adds	r3, #12
 8004fa0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004fa4:	61fa      	str	r2, [r7, #28]
 8004fa6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa8:	69b9      	ldr	r1, [r7, #24]
 8004faa:	69fa      	ldr	r2, [r7, #28]
 8004fac:	e841 2300 	strex	r3, r2, [r1]
 8004fb0:	617b      	str	r3, [r7, #20]
   return(result);
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1e3      	bne.n	8004f80 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2202      	movs	r2, #2
 8004fbc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004fbe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 f83d 	bl	8005044 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004fca:	e023      	b.n	8005014 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004fcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d009      	beq.n	8004fec <HAL_UART_IRQHandler+0x524>
 8004fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d003      	beq.n	8004fec <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 f8e7 	bl	80051b8 <UART_Transmit_IT>
    return;
 8004fea:	e014      	b.n	8005016 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004fec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00e      	beq.n	8005016 <HAL_UART_IRQHandler+0x54e>
 8004ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ffc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005000:	2b00      	cmp	r3, #0
 8005002:	d008      	beq.n	8005016 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 f927 	bl	8005258 <UART_EndTransmit_IT>
    return;
 800500a:	e004      	b.n	8005016 <HAL_UART_IRQHandler+0x54e>
    return;
 800500c:	bf00      	nop
 800500e:	e002      	b.n	8005016 <HAL_UART_IRQHandler+0x54e>
      return;
 8005010:	bf00      	nop
 8005012:	e000      	b.n	8005016 <HAL_UART_IRQHandler+0x54e>
      return;
 8005014:	bf00      	nop
  }
}
 8005016:	37e8      	adds	r7, #232	@ 0xe8
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	460b      	mov	r3, r1
 800504e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005050:	bf00      	nop
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	4613      	mov	r3, r2
 8005068:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	88fa      	ldrh	r2, [r7, #6]
 8005074:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	88fa      	ldrh	r2, [r7, #6]
 800507a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2222      	movs	r2, #34	@ 0x22
 8005086:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d007      	beq.n	80050a2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68da      	ldr	r2, [r3, #12]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050a0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	695a      	ldr	r2, [r3, #20]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f042 0201 	orr.w	r2, r2, #1
 80050b0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68da      	ldr	r2, [r3, #12]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f042 0220 	orr.w	r2, r2, #32
 80050c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3714      	adds	r7, #20
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b095      	sub	sp, #84	@ 0x54
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	330c      	adds	r3, #12
 80050de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050e2:	e853 3f00 	ldrex	r3, [r3]
 80050e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80050e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	330c      	adds	r3, #12
 80050f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80050f8:	643a      	str	r2, [r7, #64]	@ 0x40
 80050fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80050fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005100:	e841 2300 	strex	r3, r2, [r1]
 8005104:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1e5      	bne.n	80050d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	3314      	adds	r3, #20
 8005112:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005114:	6a3b      	ldr	r3, [r7, #32]
 8005116:	e853 3f00 	ldrex	r3, [r3]
 800511a:	61fb      	str	r3, [r7, #28]
   return(result);
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	f023 0301 	bic.w	r3, r3, #1
 8005122:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	3314      	adds	r3, #20
 800512a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800512c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800512e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005130:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005132:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005134:	e841 2300 	strex	r3, r2, [r1]
 8005138:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800513a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1e5      	bne.n	800510c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005144:	2b01      	cmp	r3, #1
 8005146:	d119      	bne.n	800517c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	330c      	adds	r3, #12
 800514e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	e853 3f00 	ldrex	r3, [r3]
 8005156:	60bb      	str	r3, [r7, #8]
   return(result);
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	f023 0310 	bic.w	r3, r3, #16
 800515e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	330c      	adds	r3, #12
 8005166:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005168:	61ba      	str	r2, [r7, #24]
 800516a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516c:	6979      	ldr	r1, [r7, #20]
 800516e:	69ba      	ldr	r2, [r7, #24]
 8005170:	e841 2300 	strex	r3, r2, [r1]
 8005174:	613b      	str	r3, [r7, #16]
   return(result);
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d1e5      	bne.n	8005148 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2220      	movs	r2, #32
 8005180:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800518a:	bf00      	nop
 800518c:	3754      	adds	r7, #84	@ 0x54
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005196:	b580      	push	{r7, lr}
 8005198:	b084      	sub	sp, #16
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f7ff ff40 	bl	8005030 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051b0:	bf00      	nop
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	2b21      	cmp	r3, #33	@ 0x21
 80051ca:	d13e      	bne.n	800524a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051d4:	d114      	bne.n	8005200 <UART_Transmit_IT+0x48>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d110      	bne.n	8005200 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	881b      	ldrh	r3, [r3, #0]
 80051e8:	461a      	mov	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051f2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a1b      	ldr	r3, [r3, #32]
 80051f8:	1c9a      	adds	r2, r3, #2
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	621a      	str	r2, [r3, #32]
 80051fe:	e008      	b.n	8005212 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	1c59      	adds	r1, r3, #1
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	6211      	str	r1, [r2, #32]
 800520a:	781a      	ldrb	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005216:	b29b      	uxth	r3, r3
 8005218:	3b01      	subs	r3, #1
 800521a:	b29b      	uxth	r3, r3
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	4619      	mov	r1, r3
 8005220:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10f      	bne.n	8005246 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68da      	ldr	r2, [r3, #12]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005234:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68da      	ldr	r2, [r3, #12]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005244:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005246:	2300      	movs	r3, #0
 8005248:	e000      	b.n	800524c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800524a:	2302      	movs	r3, #2
  }
}
 800524c:	4618      	mov	r0, r3
 800524e:	3714      	adds	r7, #20
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68da      	ldr	r2, [r3, #12]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800526e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2220      	movs	r2, #32
 8005274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f7ff fecf 	bl	800501c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3708      	adds	r7, #8
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b08c      	sub	sp, #48	@ 0x30
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005290:	2300      	movs	r3, #0
 8005292:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005294:	2300      	movs	r3, #0
 8005296:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b22      	cmp	r3, #34	@ 0x22
 80052a2:	f040 80aa 	bne.w	80053fa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052ae:	d115      	bne.n	80052dc <UART_Receive_IT+0x54>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d111      	bne.n	80052dc <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d4:	1c9a      	adds	r2, r3, #2
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80052da:	e024      	b.n	8005326 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052ea:	d007      	beq.n	80052fc <UART_Receive_IT+0x74>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d10a      	bne.n	800530a <UART_Receive_IT+0x82>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d106      	bne.n	800530a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	b2da      	uxtb	r2, r3
 8005304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005306:	701a      	strb	r2, [r3, #0]
 8005308:	e008      	b.n	800531c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	b2db      	uxtb	r3, r3
 8005312:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005316:	b2da      	uxtb	r2, r3
 8005318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800531a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005320:	1c5a      	adds	r2, r3, #1
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800532a:	b29b      	uxth	r3, r3
 800532c:	3b01      	subs	r3, #1
 800532e:	b29b      	uxth	r3, r3
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	4619      	mov	r1, r3
 8005334:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005336:	2b00      	cmp	r3, #0
 8005338:	d15d      	bne.n	80053f6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68da      	ldr	r2, [r3, #12]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f022 0220 	bic.w	r2, r2, #32
 8005348:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68da      	ldr	r2, [r3, #12]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005358:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	695a      	ldr	r2, [r3, #20]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f022 0201 	bic.w	r2, r2, #1
 8005368:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2220      	movs	r2, #32
 800536e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800537c:	2b01      	cmp	r3, #1
 800537e:	d135      	bne.n	80053ec <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	330c      	adds	r3, #12
 800538c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	e853 3f00 	ldrex	r3, [r3]
 8005394:	613b      	str	r3, [r7, #16]
   return(result);
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	f023 0310 	bic.w	r3, r3, #16
 800539c:	627b      	str	r3, [r7, #36]	@ 0x24
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	330c      	adds	r3, #12
 80053a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053a6:	623a      	str	r2, [r7, #32]
 80053a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053aa:	69f9      	ldr	r1, [r7, #28]
 80053ac:	6a3a      	ldr	r2, [r7, #32]
 80053ae:	e841 2300 	strex	r3, r2, [r1]
 80053b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1e5      	bne.n	8005386 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0310 	and.w	r3, r3, #16
 80053c4:	2b10      	cmp	r3, #16
 80053c6:	d10a      	bne.n	80053de <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053c8:	2300      	movs	r3, #0
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	60fb      	str	r3, [r7, #12]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	60fb      	str	r3, [r7, #12]
 80053dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80053e2:	4619      	mov	r1, r3
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f7ff fe2d 	bl	8005044 <HAL_UARTEx_RxEventCallback>
 80053ea:	e002      	b.n	80053f2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f7fb ffcd 	bl	800138c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80053f2:	2300      	movs	r3, #0
 80053f4:	e002      	b.n	80053fc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80053f6:	2300      	movs	r3, #0
 80053f8:	e000      	b.n	80053fc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80053fa:	2302      	movs	r3, #2
  }
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3730      	adds	r7, #48	@ 0x30
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005408:	b0c0      	sub	sp, #256	@ 0x100
 800540a:	af00      	add	r7, sp, #0
 800540c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800541c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005420:	68d9      	ldr	r1, [r3, #12]
 8005422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	ea40 0301 	orr.w	r3, r0, r1
 800542c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800542e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005432:	689a      	ldr	r2, [r3, #8]
 8005434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	431a      	orrs	r2, r3
 800543c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	431a      	orrs	r2, r3
 8005444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	4313      	orrs	r3, r2
 800544c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800545c:	f021 010c 	bic.w	r1, r1, #12
 8005460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800546a:	430b      	orrs	r3, r1
 800546c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800546e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800547a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800547e:	6999      	ldr	r1, [r3, #24]
 8005480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	ea40 0301 	orr.w	r3, r0, r1
 800548a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800548c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	4b8f      	ldr	r3, [pc, #572]	@ (80056d0 <UART_SetConfig+0x2cc>)
 8005494:	429a      	cmp	r2, r3
 8005496:	d005      	beq.n	80054a4 <UART_SetConfig+0xa0>
 8005498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	4b8d      	ldr	r3, [pc, #564]	@ (80056d4 <UART_SetConfig+0x2d0>)
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d104      	bne.n	80054ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054a4:	f7fe f99c 	bl	80037e0 <HAL_RCC_GetPCLK2Freq>
 80054a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80054ac:	e003      	b.n	80054b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054ae:	f7fe f983 	bl	80037b8 <HAL_RCC_GetPCLK1Freq>
 80054b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ba:	69db      	ldr	r3, [r3, #28]
 80054bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054c0:	f040 810c 	bne.w	80056dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054c8:	2200      	movs	r2, #0
 80054ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80054ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80054d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80054d6:	4622      	mov	r2, r4
 80054d8:	462b      	mov	r3, r5
 80054da:	1891      	adds	r1, r2, r2
 80054dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80054de:	415b      	adcs	r3, r3
 80054e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80054e6:	4621      	mov	r1, r4
 80054e8:	eb12 0801 	adds.w	r8, r2, r1
 80054ec:	4629      	mov	r1, r5
 80054ee:	eb43 0901 	adc.w	r9, r3, r1
 80054f2:	f04f 0200 	mov.w	r2, #0
 80054f6:	f04f 0300 	mov.w	r3, #0
 80054fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005502:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005506:	4690      	mov	r8, r2
 8005508:	4699      	mov	r9, r3
 800550a:	4623      	mov	r3, r4
 800550c:	eb18 0303 	adds.w	r3, r8, r3
 8005510:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005514:	462b      	mov	r3, r5
 8005516:	eb49 0303 	adc.w	r3, r9, r3
 800551a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800551e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800552a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800552e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005532:	460b      	mov	r3, r1
 8005534:	18db      	adds	r3, r3, r3
 8005536:	653b      	str	r3, [r7, #80]	@ 0x50
 8005538:	4613      	mov	r3, r2
 800553a:	eb42 0303 	adc.w	r3, r2, r3
 800553e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005540:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005544:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005548:	f7fa fe46 	bl	80001d8 <__aeabi_uldivmod>
 800554c:	4602      	mov	r2, r0
 800554e:	460b      	mov	r3, r1
 8005550:	4b61      	ldr	r3, [pc, #388]	@ (80056d8 <UART_SetConfig+0x2d4>)
 8005552:	fba3 2302 	umull	r2, r3, r3, r2
 8005556:	095b      	lsrs	r3, r3, #5
 8005558:	011c      	lsls	r4, r3, #4
 800555a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800555e:	2200      	movs	r2, #0
 8005560:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005564:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005568:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800556c:	4642      	mov	r2, r8
 800556e:	464b      	mov	r3, r9
 8005570:	1891      	adds	r1, r2, r2
 8005572:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005574:	415b      	adcs	r3, r3
 8005576:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005578:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800557c:	4641      	mov	r1, r8
 800557e:	eb12 0a01 	adds.w	sl, r2, r1
 8005582:	4649      	mov	r1, r9
 8005584:	eb43 0b01 	adc.w	fp, r3, r1
 8005588:	f04f 0200 	mov.w	r2, #0
 800558c:	f04f 0300 	mov.w	r3, #0
 8005590:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005594:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005598:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800559c:	4692      	mov	sl, r2
 800559e:	469b      	mov	fp, r3
 80055a0:	4643      	mov	r3, r8
 80055a2:	eb1a 0303 	adds.w	r3, sl, r3
 80055a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80055aa:	464b      	mov	r3, r9
 80055ac:	eb4b 0303 	adc.w	r3, fp, r3
 80055b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80055b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80055c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80055c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80055c8:	460b      	mov	r3, r1
 80055ca:	18db      	adds	r3, r3, r3
 80055cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80055ce:	4613      	mov	r3, r2
 80055d0:	eb42 0303 	adc.w	r3, r2, r3
 80055d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80055d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80055da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80055de:	f7fa fdfb 	bl	80001d8 <__aeabi_uldivmod>
 80055e2:	4602      	mov	r2, r0
 80055e4:	460b      	mov	r3, r1
 80055e6:	4611      	mov	r1, r2
 80055e8:	4b3b      	ldr	r3, [pc, #236]	@ (80056d8 <UART_SetConfig+0x2d4>)
 80055ea:	fba3 2301 	umull	r2, r3, r3, r1
 80055ee:	095b      	lsrs	r3, r3, #5
 80055f0:	2264      	movs	r2, #100	@ 0x64
 80055f2:	fb02 f303 	mul.w	r3, r2, r3
 80055f6:	1acb      	subs	r3, r1, r3
 80055f8:	00db      	lsls	r3, r3, #3
 80055fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80055fe:	4b36      	ldr	r3, [pc, #216]	@ (80056d8 <UART_SetConfig+0x2d4>)
 8005600:	fba3 2302 	umull	r2, r3, r3, r2
 8005604:	095b      	lsrs	r3, r3, #5
 8005606:	005b      	lsls	r3, r3, #1
 8005608:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800560c:	441c      	add	r4, r3
 800560e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005612:	2200      	movs	r2, #0
 8005614:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005618:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800561c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005620:	4642      	mov	r2, r8
 8005622:	464b      	mov	r3, r9
 8005624:	1891      	adds	r1, r2, r2
 8005626:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005628:	415b      	adcs	r3, r3
 800562a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800562c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005630:	4641      	mov	r1, r8
 8005632:	1851      	adds	r1, r2, r1
 8005634:	6339      	str	r1, [r7, #48]	@ 0x30
 8005636:	4649      	mov	r1, r9
 8005638:	414b      	adcs	r3, r1
 800563a:	637b      	str	r3, [r7, #52]	@ 0x34
 800563c:	f04f 0200 	mov.w	r2, #0
 8005640:	f04f 0300 	mov.w	r3, #0
 8005644:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005648:	4659      	mov	r1, fp
 800564a:	00cb      	lsls	r3, r1, #3
 800564c:	4651      	mov	r1, sl
 800564e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005652:	4651      	mov	r1, sl
 8005654:	00ca      	lsls	r2, r1, #3
 8005656:	4610      	mov	r0, r2
 8005658:	4619      	mov	r1, r3
 800565a:	4603      	mov	r3, r0
 800565c:	4642      	mov	r2, r8
 800565e:	189b      	adds	r3, r3, r2
 8005660:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005664:	464b      	mov	r3, r9
 8005666:	460a      	mov	r2, r1
 8005668:	eb42 0303 	adc.w	r3, r2, r3
 800566c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800567c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005680:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005684:	460b      	mov	r3, r1
 8005686:	18db      	adds	r3, r3, r3
 8005688:	62bb      	str	r3, [r7, #40]	@ 0x28
 800568a:	4613      	mov	r3, r2
 800568c:	eb42 0303 	adc.w	r3, r2, r3
 8005690:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005692:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005696:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800569a:	f7fa fd9d 	bl	80001d8 <__aeabi_uldivmod>
 800569e:	4602      	mov	r2, r0
 80056a0:	460b      	mov	r3, r1
 80056a2:	4b0d      	ldr	r3, [pc, #52]	@ (80056d8 <UART_SetConfig+0x2d4>)
 80056a4:	fba3 1302 	umull	r1, r3, r3, r2
 80056a8:	095b      	lsrs	r3, r3, #5
 80056aa:	2164      	movs	r1, #100	@ 0x64
 80056ac:	fb01 f303 	mul.w	r3, r1, r3
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	00db      	lsls	r3, r3, #3
 80056b4:	3332      	adds	r3, #50	@ 0x32
 80056b6:	4a08      	ldr	r2, [pc, #32]	@ (80056d8 <UART_SetConfig+0x2d4>)
 80056b8:	fba2 2303 	umull	r2, r3, r2, r3
 80056bc:	095b      	lsrs	r3, r3, #5
 80056be:	f003 0207 	and.w	r2, r3, #7
 80056c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4422      	add	r2, r4
 80056ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80056cc:	e106      	b.n	80058dc <UART_SetConfig+0x4d8>
 80056ce:	bf00      	nop
 80056d0:	40011000 	.word	0x40011000
 80056d4:	40011400 	.word	0x40011400
 80056d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056e0:	2200      	movs	r2, #0
 80056e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80056e6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80056ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80056ee:	4642      	mov	r2, r8
 80056f0:	464b      	mov	r3, r9
 80056f2:	1891      	adds	r1, r2, r2
 80056f4:	6239      	str	r1, [r7, #32]
 80056f6:	415b      	adcs	r3, r3
 80056f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80056fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80056fe:	4641      	mov	r1, r8
 8005700:	1854      	adds	r4, r2, r1
 8005702:	4649      	mov	r1, r9
 8005704:	eb43 0501 	adc.w	r5, r3, r1
 8005708:	f04f 0200 	mov.w	r2, #0
 800570c:	f04f 0300 	mov.w	r3, #0
 8005710:	00eb      	lsls	r3, r5, #3
 8005712:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005716:	00e2      	lsls	r2, r4, #3
 8005718:	4614      	mov	r4, r2
 800571a:	461d      	mov	r5, r3
 800571c:	4643      	mov	r3, r8
 800571e:	18e3      	adds	r3, r4, r3
 8005720:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005724:	464b      	mov	r3, r9
 8005726:	eb45 0303 	adc.w	r3, r5, r3
 800572a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800572e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800573a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800573e:	f04f 0200 	mov.w	r2, #0
 8005742:	f04f 0300 	mov.w	r3, #0
 8005746:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800574a:	4629      	mov	r1, r5
 800574c:	008b      	lsls	r3, r1, #2
 800574e:	4621      	mov	r1, r4
 8005750:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005754:	4621      	mov	r1, r4
 8005756:	008a      	lsls	r2, r1, #2
 8005758:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800575c:	f7fa fd3c 	bl	80001d8 <__aeabi_uldivmod>
 8005760:	4602      	mov	r2, r0
 8005762:	460b      	mov	r3, r1
 8005764:	4b60      	ldr	r3, [pc, #384]	@ (80058e8 <UART_SetConfig+0x4e4>)
 8005766:	fba3 2302 	umull	r2, r3, r3, r2
 800576a:	095b      	lsrs	r3, r3, #5
 800576c:	011c      	lsls	r4, r3, #4
 800576e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005772:	2200      	movs	r2, #0
 8005774:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005778:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800577c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005780:	4642      	mov	r2, r8
 8005782:	464b      	mov	r3, r9
 8005784:	1891      	adds	r1, r2, r2
 8005786:	61b9      	str	r1, [r7, #24]
 8005788:	415b      	adcs	r3, r3
 800578a:	61fb      	str	r3, [r7, #28]
 800578c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005790:	4641      	mov	r1, r8
 8005792:	1851      	adds	r1, r2, r1
 8005794:	6139      	str	r1, [r7, #16]
 8005796:	4649      	mov	r1, r9
 8005798:	414b      	adcs	r3, r1
 800579a:	617b      	str	r3, [r7, #20]
 800579c:	f04f 0200 	mov.w	r2, #0
 80057a0:	f04f 0300 	mov.w	r3, #0
 80057a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057a8:	4659      	mov	r1, fp
 80057aa:	00cb      	lsls	r3, r1, #3
 80057ac:	4651      	mov	r1, sl
 80057ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057b2:	4651      	mov	r1, sl
 80057b4:	00ca      	lsls	r2, r1, #3
 80057b6:	4610      	mov	r0, r2
 80057b8:	4619      	mov	r1, r3
 80057ba:	4603      	mov	r3, r0
 80057bc:	4642      	mov	r2, r8
 80057be:	189b      	adds	r3, r3, r2
 80057c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80057c4:	464b      	mov	r3, r9
 80057c6:	460a      	mov	r2, r1
 80057c8:	eb42 0303 	adc.w	r3, r2, r3
 80057cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80057d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80057da:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80057dc:	f04f 0200 	mov.w	r2, #0
 80057e0:	f04f 0300 	mov.w	r3, #0
 80057e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80057e8:	4649      	mov	r1, r9
 80057ea:	008b      	lsls	r3, r1, #2
 80057ec:	4641      	mov	r1, r8
 80057ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057f2:	4641      	mov	r1, r8
 80057f4:	008a      	lsls	r2, r1, #2
 80057f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80057fa:	f7fa fced 	bl	80001d8 <__aeabi_uldivmod>
 80057fe:	4602      	mov	r2, r0
 8005800:	460b      	mov	r3, r1
 8005802:	4611      	mov	r1, r2
 8005804:	4b38      	ldr	r3, [pc, #224]	@ (80058e8 <UART_SetConfig+0x4e4>)
 8005806:	fba3 2301 	umull	r2, r3, r3, r1
 800580a:	095b      	lsrs	r3, r3, #5
 800580c:	2264      	movs	r2, #100	@ 0x64
 800580e:	fb02 f303 	mul.w	r3, r2, r3
 8005812:	1acb      	subs	r3, r1, r3
 8005814:	011b      	lsls	r3, r3, #4
 8005816:	3332      	adds	r3, #50	@ 0x32
 8005818:	4a33      	ldr	r2, [pc, #204]	@ (80058e8 <UART_SetConfig+0x4e4>)
 800581a:	fba2 2303 	umull	r2, r3, r2, r3
 800581e:	095b      	lsrs	r3, r3, #5
 8005820:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005824:	441c      	add	r4, r3
 8005826:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800582a:	2200      	movs	r2, #0
 800582c:	673b      	str	r3, [r7, #112]	@ 0x70
 800582e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005830:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005834:	4642      	mov	r2, r8
 8005836:	464b      	mov	r3, r9
 8005838:	1891      	adds	r1, r2, r2
 800583a:	60b9      	str	r1, [r7, #8]
 800583c:	415b      	adcs	r3, r3
 800583e:	60fb      	str	r3, [r7, #12]
 8005840:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005844:	4641      	mov	r1, r8
 8005846:	1851      	adds	r1, r2, r1
 8005848:	6039      	str	r1, [r7, #0]
 800584a:	4649      	mov	r1, r9
 800584c:	414b      	adcs	r3, r1
 800584e:	607b      	str	r3, [r7, #4]
 8005850:	f04f 0200 	mov.w	r2, #0
 8005854:	f04f 0300 	mov.w	r3, #0
 8005858:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800585c:	4659      	mov	r1, fp
 800585e:	00cb      	lsls	r3, r1, #3
 8005860:	4651      	mov	r1, sl
 8005862:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005866:	4651      	mov	r1, sl
 8005868:	00ca      	lsls	r2, r1, #3
 800586a:	4610      	mov	r0, r2
 800586c:	4619      	mov	r1, r3
 800586e:	4603      	mov	r3, r0
 8005870:	4642      	mov	r2, r8
 8005872:	189b      	adds	r3, r3, r2
 8005874:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005876:	464b      	mov	r3, r9
 8005878:	460a      	mov	r2, r1
 800587a:	eb42 0303 	adc.w	r3, r2, r3
 800587e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	663b      	str	r3, [r7, #96]	@ 0x60
 800588a:	667a      	str	r2, [r7, #100]	@ 0x64
 800588c:	f04f 0200 	mov.w	r2, #0
 8005890:	f04f 0300 	mov.w	r3, #0
 8005894:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005898:	4649      	mov	r1, r9
 800589a:	008b      	lsls	r3, r1, #2
 800589c:	4641      	mov	r1, r8
 800589e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058a2:	4641      	mov	r1, r8
 80058a4:	008a      	lsls	r2, r1, #2
 80058a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80058aa:	f7fa fc95 	bl	80001d8 <__aeabi_uldivmod>
 80058ae:	4602      	mov	r2, r0
 80058b0:	460b      	mov	r3, r1
 80058b2:	4b0d      	ldr	r3, [pc, #52]	@ (80058e8 <UART_SetConfig+0x4e4>)
 80058b4:	fba3 1302 	umull	r1, r3, r3, r2
 80058b8:	095b      	lsrs	r3, r3, #5
 80058ba:	2164      	movs	r1, #100	@ 0x64
 80058bc:	fb01 f303 	mul.w	r3, r1, r3
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	011b      	lsls	r3, r3, #4
 80058c4:	3332      	adds	r3, #50	@ 0x32
 80058c6:	4a08      	ldr	r2, [pc, #32]	@ (80058e8 <UART_SetConfig+0x4e4>)
 80058c8:	fba2 2303 	umull	r2, r3, r2, r3
 80058cc:	095b      	lsrs	r3, r3, #5
 80058ce:	f003 020f 	and.w	r2, r3, #15
 80058d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4422      	add	r2, r4
 80058da:	609a      	str	r2, [r3, #8]
}
 80058dc:	bf00      	nop
 80058de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80058e2:	46bd      	mov	sp, r7
 80058e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058e8:	51eb851f 	.word	0x51eb851f

080058ec <memset>:
 80058ec:	4402      	add	r2, r0
 80058ee:	4603      	mov	r3, r0
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d100      	bne.n	80058f6 <memset+0xa>
 80058f4:	4770      	bx	lr
 80058f6:	f803 1b01 	strb.w	r1, [r3], #1
 80058fa:	e7f9      	b.n	80058f0 <memset+0x4>

080058fc <__libc_init_array>:
 80058fc:	b570      	push	{r4, r5, r6, lr}
 80058fe:	4d0d      	ldr	r5, [pc, #52]	@ (8005934 <__libc_init_array+0x38>)
 8005900:	4c0d      	ldr	r4, [pc, #52]	@ (8005938 <__libc_init_array+0x3c>)
 8005902:	1b64      	subs	r4, r4, r5
 8005904:	10a4      	asrs	r4, r4, #2
 8005906:	2600      	movs	r6, #0
 8005908:	42a6      	cmp	r6, r4
 800590a:	d109      	bne.n	8005920 <__libc_init_array+0x24>
 800590c:	4d0b      	ldr	r5, [pc, #44]	@ (800593c <__libc_init_array+0x40>)
 800590e:	4c0c      	ldr	r4, [pc, #48]	@ (8005940 <__libc_init_array+0x44>)
 8005910:	f000 f818 	bl	8005944 <_init>
 8005914:	1b64      	subs	r4, r4, r5
 8005916:	10a4      	asrs	r4, r4, #2
 8005918:	2600      	movs	r6, #0
 800591a:	42a6      	cmp	r6, r4
 800591c:	d105      	bne.n	800592a <__libc_init_array+0x2e>
 800591e:	bd70      	pop	{r4, r5, r6, pc}
 8005920:	f855 3b04 	ldr.w	r3, [r5], #4
 8005924:	4798      	blx	r3
 8005926:	3601      	adds	r6, #1
 8005928:	e7ee      	b.n	8005908 <__libc_init_array+0xc>
 800592a:	f855 3b04 	ldr.w	r3, [r5], #4
 800592e:	4798      	blx	r3
 8005930:	3601      	adds	r6, #1
 8005932:	e7f2      	b.n	800591a <__libc_init_array+0x1e>
 8005934:	08005988 	.word	0x08005988
 8005938:	08005988 	.word	0x08005988
 800593c:	08005988 	.word	0x08005988
 8005940:	0800598c 	.word	0x0800598c

08005944 <_init>:
 8005944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005946:	bf00      	nop
 8005948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800594a:	bc08      	pop	{r3}
 800594c:	469e      	mov	lr, r3
 800594e:	4770      	bx	lr

08005950 <_fini>:
 8005950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005952:	bf00      	nop
 8005954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005956:	bc08      	pop	{r3}
 8005958:	469e      	mov	lr, r3
 800595a:	4770      	bx	lr
